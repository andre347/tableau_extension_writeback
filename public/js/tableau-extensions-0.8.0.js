(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Main"] = factory();
	else
		root["Main"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tableau = __webpack_require__(1);
	var FrelardDesktopBootstrap_1 = __webpack_require__(79);
	// This Main function will be executed when this module is loaded. Attempt to do our
	// bootstrapping with qt and log any errors we encounter
	FrelardDesktopBootstrap_1.doBootstrap().catch(function (e) {
	    console.log('Desktop bootstrapping failed: ' + e);
	});
	window.tableau = tableau;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	// Due to the way we configured webpack, we should be exporting things which will be under
	// a global variable called "tableau". Export everything we want to be visible under tableau
	// from this file.
	var ExtensionsImpl_1 = __webpack_require__(2);
	var Extensions_1 = __webpack_require__(78);
	var api_shared_1 = __webpack_require__(9);
	api_shared_1.VersionNumber.SetVersionNumber(("0.7.0"));
	var extensionImpl = new ExtensionsImpl_1.ExtensionsImpl();
	exports.extensions = new Extensions_1.Extensions(extensionImpl);
	// Export Enums
	// These show up under the tableau object. I.e. tableau.ExtensionContext.Server
	var api_external_contract_1 = __webpack_require__(77);
	exports.ExtensionContext = api_external_contract_1.ExtensionContext;
	exports.ExtensionMode = api_external_contract_1.ExtensionMode;
	exports.AnalyticsObjectType = api_external_contract_1.AnalyticsObjectType;
	exports.ColumnType = api_external_contract_1.ColumnType;
	exports.DashboardObjectType = api_external_contract_1.DashboardObjectType;
	exports.DataType = api_external_contract_1.DataType;
	exports.DateRangeType = api_external_contract_1.DateRangeType;
	exports.EncodingType = api_external_contract_1.EncodingType;
	exports.ErrorCodes = api_external_contract_1.ErrorCodes;
	exports.FieldAggregationType = api_external_contract_1.FieldAggregationType;
	exports.FieldRoleType = api_external_contract_1.FieldRoleType;
	exports.FilterDomainType = api_external_contract_1.FilterDomainType;
	exports.FilterType = api_external_contract_1.FilterType;
	exports.FilterUpdateType = api_external_contract_1.FilterUpdateType;
	exports.FilterNullOption = api_external_contract_1.FilterNullOption;
	exports.MarkType = api_external_contract_1.MarkType;
	exports.ParameterValueType = api_external_contract_1.ParameterValueType;
	exports.PeriodType = api_external_contract_1.PeriodType;
	exports.QuickTableCalcType = api_external_contract_1.QuickTableCalcType;
	exports.SelectionUpdateType = api_external_contract_1.SelectionUpdateType;
	exports.SheetType = api_external_contract_1.SheetType;
	exports.SortDirection = api_external_contract_1.SortDirection;
	exports.TableauEventType = api_external_contract_1.TableauEventType;
	exports.TrendLineModelType = api_external_contract_1.TrendLineModelType;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(3);
	var api_shared_1 = __webpack_require__(9);
	var api_utils_1 = __webpack_require__(66);
	var DashboardContent_1 = __webpack_require__(67);
	var Environment_1 = __webpack_require__(68);
	var Settings_1 = __webpack_require__(69);
	var UI_1 = __webpack_require__(70);
	var RegisterAllExtensionsServices_1 = __webpack_require__(71);
	var SettingsImpl_1 = __webpack_require__(75);
	var UIImpl_1 = __webpack_require__(76);
	var ExtensionsImpl = (function () {
	    function ExtensionsImpl() {
	    }
	    ExtensionsImpl.prototype.initializeAsync = function (isExtensionDialog) {
	        var _this = this;
	        if (!this._initializationPromise) {
	            this._initializationPromise = new Promise(function (resolve, reject) {
	                // First thing we want to do is check to see if there is a desktop dispatcher already registered for us
	                if (api_internal_contract_1.InternalApiDispatcherHolder.hasDesktopApiDispatcherPromise()) {
	                    // Running in desktop, use this promise
	                    var desktopDispatcherPromise = api_internal_contract_1.InternalApiDispatcherHolder.getDesktopDispatcherPromise();
	                    desktopDispatcherPromise.then(function (dipatcher) { return _this.onDispatcherReceived(dipatcher, isExtensionDialog); }).then(function () { resolve(); });
	                }
	                else {
	                    // We must be running in server, so we should try to kick of the server dispatcher bootstrapping
	                    api_shared_1.doCrossFrameBootstrap(window, api_shared_1.VersionNumber.Instance).then(_this.onDispatcherReceived.bind(_this)).then(function () { resolve(); });
	                }
	            });
	        }
	        return this._initializationPromise;
	    };
	    ExtensionsImpl.prototype.onDispatcherReceived = function (dispatcher, isExtensionDialog) {
	        var _this = this;
	        dispatcher.setVersionNumber(api_shared_1.VersionNumber.Instance);
	        // Call to register all the services which will use the newly initialized dispatcher
	        api_shared_1.registerAllSharedServices(dispatcher);
	        RegisterAllExtensionsServices_1.registerAllExtensionsServices(dispatcher);
	        // Get the initialization service and initialize this extension
	        var initializationService = api_shared_1.ApiServiceRegistry.instance.getService("InitializationService" /* InitializationService */);
	        return initializationService.initializeDashboardExtensionsAsync(isExtensionDialog).then(function (result) {
	            if (!result.extensionInstance.locator.dashboardPath) {
	                throw api_utils_1.TableauException.isUndefined(['DashboardPath']);
	            }
	            _this.dashboardContent = _this.initializeDashboardContent(result.extensionDashboardInfo, result.extensionInstance.locator.dashboardPath);
	            _this.environment = new Environment_1.Environment(result.extensionEnvironment);
	            _this.settings = _this.initializeSettings(result.extensionSettingsInfo);
	            _this.ui = new UI_1.UI(new UIImpl_1.UIImpl());
	        });
	    };
	    ExtensionsImpl.prototype.initializeDashboardContent = function (info, sheetPath) {
	        var dashboardImpl = new api_shared_1.DashboardImpl(info, sheetPath);
	        var dashboard = new api_shared_1.Dashboard(dashboardImpl);
	        return new DashboardContent_1.DashboardContent(dashboard);
	    };
	    ExtensionsImpl.prototype.initializeSettings = function (settingsInfo) {
	        var settingsImpl = new SettingsImpl_1.SettingsImpl(settingsInfo);
	        return new Settings_1.Settings(settingsImpl);
	    };
	    return ExtensionsImpl;
	}());
	exports.ExtensionsImpl = ExtensionsImpl;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(4));
	__export(__webpack_require__(5));
	__export(__webpack_require__(6));
	__export(__webpack_require__(7));
	__export(__webpack_require__(8));


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExtensionContext;
	(function (ExtensionContext) {
	    ExtensionContext["Desktop"] = "desktop";
	    ExtensionContext["Server"] = "server";
	    ExtensionContext["Unknown"] = "unknown";
	})(ExtensionContext = exports.ExtensionContext || (exports.ExtensionContext = {}));
	var ExtensionMode;
	(function (ExtensionMode) {
	    ExtensionMode["Authoring"] = "authoring";
	    ExtensionMode["Viewing"] = "viewing";
	    ExtensionMode["Unknown"] = "unknown";
	})(ExtensionMode = exports.ExtensionMode || (exports.ExtensionMode = {}));
	var ColumnType;
	(function (ColumnType) {
	    ColumnType["Discrete"] = "discrete";
	    ColumnType["Continuous"] = "continuous";
	})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
	var DashboardObjectType;
	(function (DashboardObjectType) {
	    DashboardObjectType["Blank"] = "blank";
	    DashboardObjectType["Worksheet"] = "worksheet";
	    DashboardObjectType["QuickFilter"] = "quick-filter";
	    DashboardObjectType["ParameterControl"] = "parameter-control";
	    DashboardObjectType["PageFilter"] = "page-filter";
	    DashboardObjectType["Legend"] = "legend";
	    DashboardObjectType["Title"] = "title";
	    DashboardObjectType["Text"] = "text";
	    DashboardObjectType["Image"] = "image";
	    DashboardObjectType["WebPage"] = "web-page";
	    DashboardObjectType["Extension"] = "extension";
	})(DashboardObjectType = exports.DashboardObjectType || (exports.DashboardObjectType = {}));
	var DataType;
	(function (DataType) {
	    DataType["String"] = "string";
	    DataType["Int"] = "int";
	    DataType["Float"] = "float";
	    DataType["Bool"] = "bool";
	    DataType["Date"] = "date";
	    DataType["DateTime"] = "date-time";
	    DataType["Spatial"] = "spatial";
	})(DataType = exports.DataType || (exports.DataType = {}));
	var EncodedDataType;
	(function (EncodedDataType) {
	    EncodedDataType["Number"] = "number";
	    EncodedDataType["String"] = "string";
	    EncodedDataType["Date"] = "date";
	    EncodedDataType["Boolean"] = "boolean";
	})(EncodedDataType = exports.EncodedDataType || (exports.EncodedDataType = {}));
	var ErrorCode;
	(function (ErrorCode) {
	    ErrorCode["ServerError"] = "server-error";
	    ErrorCode["InvalidAggregationFieldName"] = "invalid-aggregation-field-name";
	    ErrorCode["InvalidFilterFieldName"] = "invalid-filter-fieldname";
	    ErrorCode["InvalidFilterFieldValue"] = "invalid-filter-field-value";
	})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
	var FieldAggregationType;
	(function (FieldAggregationType) {
	    FieldAggregationType["Sum"] = "sum";
	    FieldAggregationType["Avg"] = "avg";
	    FieldAggregationType["Min"] = "min";
	    FieldAggregationType["Max"] = "max";
	    FieldAggregationType["Stdev"] = "stdev";
	    FieldAggregationType["Stdevp"] = "stdevp";
	    FieldAggregationType["Var"] = "var";
	    FieldAggregationType["Varp"] = "varp";
	    FieldAggregationType["Count"] = "count";
	    FieldAggregationType["Countd"] = "countd";
	    FieldAggregationType["Median"] = "median";
	    FieldAggregationType["Attr"] = "attr";
	    FieldAggregationType["None"] = "none";
	    FieldAggregationType["Year"] = "year";
	    FieldAggregationType["Qtr"] = "qtr";
	    FieldAggregationType["Month"] = "month";
	    FieldAggregationType["Day"] = "day";
	    FieldAggregationType["Hour"] = "hour";
	    FieldAggregationType["Minute"] = "minute";
	    FieldAggregationType["Second"] = "second";
	    FieldAggregationType["Week"] = "week";
	    FieldAggregationType["Weekday"] = "weekday";
	    FieldAggregationType["MonthYear"] = "month-year";
	    FieldAggregationType["Mdy"] = "mdy";
	    FieldAggregationType["End"] = "end";
	    FieldAggregationType["TruncYear"] = "trunc-year";
	    FieldAggregationType["TruncQtr"] = "trunc-qtr";
	    FieldAggregationType["TruncMonth"] = "trunc-month";
	    FieldAggregationType["TruncWeek"] = "trunc-week";
	    FieldAggregationType["TruncDay"] = "trunc-day";
	    FieldAggregationType["TruncHour"] = "trunc-hour";
	    FieldAggregationType["TruncMinute"] = "trunc-minute";
	    FieldAggregationType["TruncSecond"] = "trunc-second";
	    FieldAggregationType["Quart1"] = "quart1";
	    FieldAggregationType["Quart3"] = "quart3";
	    FieldAggregationType["Skewness"] = "skewness";
	    FieldAggregationType["Kurtosis"] = "kurtosis";
	    FieldAggregationType["InOut"] = "in-out";
	    FieldAggregationType["User"] = "user";
	})(FieldAggregationType = exports.FieldAggregationType || (exports.FieldAggregationType = {}));
	var FieldRoleType;
	(function (FieldRoleType) {
	    FieldRoleType["Dimension"] = "dimension";
	    FieldRoleType["Measure"] = "measure";
	    FieldRoleType["Unknown"] = "unknown";
	})(FieldRoleType = exports.FieldRoleType || (exports.FieldRoleType = {}));
	/**
	 *  The different update types for applying filter.
	 */
	var FilterUpdateType;
	(function (FilterUpdateType) {
	    FilterUpdateType["Add"] = "add";
	    FilterUpdateType["All"] = "all";
	    FilterUpdateType["Replace"] = "replace";
	    FilterUpdateType["Remove"] = "remove";
	})(FilterUpdateType = exports.FilterUpdateType || (exports.FilterUpdateType = {}));
	var SheetType;
	(function (SheetType) {
	    SheetType["Dashboard"] = "dashboard";
	    SheetType["Story"] = "story";
	    SheetType["Worksheet"] = "worksheet";
	})(SheetType = exports.SheetType || (exports.SheetType = {}));
	var DomainRestrictionType;
	(function (DomainRestrictionType) {
	    DomainRestrictionType["All"] = "all";
	    DomainRestrictionType["List"] = "list";
	    DomainRestrictionType["Range"] = "range";
	})(DomainRestrictionType = exports.DomainRestrictionType || (exports.DomainRestrictionType = {}));
	var DateStepPeriod;
	(function (DateStepPeriod) {
	    DateStepPeriod["Years"] = "years";
	    DateStepPeriod["Quarters"] = "quarters";
	    DateStepPeriod["Months"] = "months";
	    DateStepPeriod["Weeks"] = "weeks";
	    DateStepPeriod["Days"] = "days";
	    DateStepPeriod["Hours"] = "hours";
	    DateStepPeriod["Minutes"] = "minutes";
	    DateStepPeriod["Seconds"] = "seconds";
	})(DateStepPeriod = exports.DateStepPeriod || (exports.DateStepPeriod = {}));
	/**
	 * The option for specifying which values to include for filtering.
	 */
	var FilterNullOption;
	(function (FilterNullOption) {
	    FilterNullOption["NullValues"] = "nullvalues";
	    FilterNullOption["NonNullValues"] = "nonnullvalues";
	    FilterNullOption["AllValues"] = "allvalues";
	})(FilterNullOption = exports.FilterNullOption || (exports.FilterNullOption = {}));
	/**
	 * The type of filter domain
	 */
	var FilterDomainType;
	(function (FilterDomainType) {
	    FilterDomainType["Relevant"] = "relevant";
	    FilterDomainType["Database"] = "database";
	})(FilterDomainType = exports.FilterDomainType || (exports.FilterDomainType = {}));
	/**
	 * Internal enum for specifying the selection type for select marks api.
	 */
	var SelectionUpdateType;
	(function (SelectionUpdateType) {
	    SelectionUpdateType["Replace"] = "select-replace";
	    SelectionUpdateType["Add"] = "select-add";
	    SelectionUpdateType["Remove"] = "select-remove";
	})(SelectionUpdateType = exports.SelectionUpdateType || (exports.SelectionUpdateType = {}));
	/**
	 * Internal enum for specifying the included values type for range selection.
	 */
	var QuantitativeIncludedValues;
	(function (QuantitativeIncludedValues) {
	    QuantitativeIncludedValues["IncludeNull"] = "include-null";
	    QuantitativeIncludedValues["IncludeNonNull"] = "include-non-null";
	    QuantitativeIncludedValues["IncludeAll"] = "include-all";
	})(QuantitativeIncludedValues = exports.QuantitativeIncludedValues || (exports.QuantitativeIncludedValues = {}));
	/**
	 * Type of mark for a given marks card in a viz.
	 */
	var MarkType;
	(function (MarkType) {
	    MarkType["Bar"] = "bar";
	    MarkType["Line"] = "line";
	    MarkType["Area"] = "area";
	    MarkType["Square"] = "square";
	    MarkType["Circle"] = "circle";
	    MarkType["Shape"] = "shape";
	    MarkType["Text"] = "text";
	    MarkType["Map"] = "map";
	    MarkType["Pie"] = "pie";
	    MarkType["GanttBar"] = "gantt-bar";
	    MarkType["Polygon"] = "polygon";
	})(MarkType = exports.MarkType || (exports.MarkType = {}));
	/**
	 * Internal enum for specifying the type of filter
	 */
	var FilterType;
	(function (FilterType) {
	    FilterType["Categorical"] = "categorical";
	    FilterType["Range"] = "range";
	    FilterType["RelativeDate"] = "relativeDate";
	    FilterType["Hierarchical"] = "hierarchical";
	})(FilterType = exports.FilterType || (exports.FilterType = {}));
	/**
	 * Internal enum for specifying the DateRangeType of a relative date filter
	 */
	var DateRangeType;
	(function (DateRangeType) {
	    /**
	     * Refers to the last day, week, month, etc. of the date period.
	     */
	    DateRangeType["Last"] = "last";
	    /**
	     * Refers to the last N days, weeks, months, etc. of the date period.
	     */
	    DateRangeType["LastN"] = "lastN";
	    /**
	     * Refers to the next day, week, month, etc. of the date period.
	     */
	    DateRangeType["Next"] = "next";
	    /**
	     * Refers to the next N days, weeks, months, etc. of the date period.
	     */
	    DateRangeType["NextN"] = "nextN";
	    /**
	     * Refers to the current day, week, month, etc. of the date period.
	     */
	    DateRangeType["Current"] = "current";
	    /**
	     * Refers to everything up to and including the current day, week, month, etc. of the date period.
	     */
	    DateRangeType["ToDate"] = "toDate";
	})(DateRangeType = exports.DateRangeType || (exports.DateRangeType = {}));


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var InternalApiDispatcherHolder;
	(function (InternalApiDispatcherHolder) {
	    function getDesktopDispatcherPromise() {
	        return window.__tableauDesktopDispatcher;
	    }
	    InternalApiDispatcherHolder.getDesktopDispatcherPromise = getDesktopDispatcherPromise;
	    function hasDesktopApiDispatcherPromise() {
	        return !!InternalApiDispatcherHolder.getDesktopDispatcherPromise();
	    }
	    InternalApiDispatcherHolder.hasDesktopApiDispatcherPromise = hasDesktopApiDispatcherPromise;
	    function setDesktopDispatcherPromise(dispatcher) {
	        window.__tableauDesktopDispatcher = dispatcher;
	    }
	    InternalApiDispatcherHolder.setDesktopDispatcherPromise = setDesktopDispatcherPromise;
	})(InternalApiDispatcherHolder = exports.InternalApiDispatcherHolder || (exports.InternalApiDispatcherHolder = {}));


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var NotificationId;
	(function (NotificationId) {
	    NotificationId["SelectedMarksChanged"] = "selected-marks-changed";
	    NotificationId["ParameterChanged"] = "parameter-changed";
	    NotificationId["FilterChanged"] = "filter-changed";
	    NotificationId["ExtensionDialogUpdate"] = "extension-dialog-update";
	})(NotificationId = exports.NotificationId || (exports.NotificationId = {}));


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ParameterId;
	(function (ParameterId) {
	    ParameterId["ExtensionLocator"] = "extension-locator";
	    ParameterId["ExtensionBootstrapInfo"] = "extension-bootstrap-info";
	    ParameterId["ExtensionSettingsInfo"] = "extension-settings-info";
	    ParameterId["VisualId"] = "visual-id";
	    ParameterId["SheetPath"] = "sheet-path";
	    ParameterId["IgnoreAliases"] = "ignore-aliases";
	    ParameterId["IgnoreSelection"] = "ignore-selection";
	    ParameterId["IncludeAllColumns"] = "include-all-columns";
	    ParameterId["MaxRows"] = "max-rows";
	    ParameterId["UnderlyingDataTable"] = "underlying-data-table";
	    ParameterId["UnderlyingSummaryDataTable"] = "underlying-summary-data-table";
	    ParameterId["DataSourceDataTable"] = "data-source-data-table";
	    ParameterId["SettingsValues"] = "settings-values";
	    ParameterId["SelectedData"] = "selected-data";
	    ParameterId["HighlightedData"] = "highlighted-data";
	    // Filter Params
	    ParameterId["FieldName"] = "field-name";
	    ParameterId["FilterValues"] = "filter-values";
	    ParameterId["FilterUpdateType"] = "filter-update-type";
	    ParameterId["IsExcludeMode"] = "is-exclude";
	    ParameterId["FilterRangeMin"] = "filter-range-min";
	    ParameterId["FilterRangeMax"] = "filter-range-max";
	    ParameterId["FilterRangeNullOption"] = "filter-range-null-option";
	    ParameterId["WorksheetFilters"] = "worksheet-filters";
	    ParameterId["FieldId"] = "field-id";
	    ParameterId["DomainType"] = "domain-type";
	    ParameterId["CategoricalDomain"] = "categorical-domain";
	    ParameterId["QuantitativeDomain"] = "quantitative-dmain";
	    ParameterId["WorksheetName"] = "worksheet-name";
	    ParameterId["DashboardName"] = "dashboard";
	    ParameterId["ParameterInfo"] = "parameter-info";
	    ParameterId["ParameterInfos"] = "parameter-infos";
	    ParameterId["ParameterCaption"] = "paremeter-caption";
	    ParameterId["ParameterFieldName"] = "parameter-field-name";
	    ParameterId["ParameterValue"] = "parameter-value";
	    ParameterId["Selection"] = "selection";
	    ParameterId["SelectionUpdateType"] = "selectionUpdateType";
	    ParameterId["HierValSelectionModels"] = "hierarchicalValueSelectionModels";
	    ParameterId["QuantRangeSelectionModels"] = "quantativeRangeSelectionModels";
	    ParameterId["DimValSelectionModels"] = "dimensionValueSelectionModels";
	    ParameterId["DataSourceId"] = "data-source-id";
	    ParameterId["DataSchema"] = "data-schema";
	    ParameterId["DataSourceName"] = "data-source-name";
	    ParameterId["ColumnsToInclude"] = "columns-to-include";
	    ParameterId["JoinDescription"] = "join-description";
	    ParameterId["ConnectionDescriptionSummaries"] = "connection-description-summaries";
	    ParameterId["ExtensionDialogUrl"] = "extension-dialog-url";
	    ParameterId["ExtensionDialogPayload"] = "extension-dialog-payload";
	    ParameterId["IsExtensionDialog"] = "is-extension-dialog";
	})(ParameterId = exports.ParameterId || (exports.ParameterId = {}));


/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Declare this key type and export the NotificationId to make this behave like a string enum
	var VerbId;
	(function (VerbId) {
	    VerbId["ApplyCategoricalFilter"] = "categorical-filter";
	    VerbId["ApplyRangeFilter"] = "range-filter";
	    VerbId["ClearFilter"] = "clear-filter";
	    VerbId["InitializeExtension"] = "initialize-extension";
	    VerbId["GetDataSummaryData"] = "get-summary-data";
	    VerbId["GetUnderlyingData"] = "get-underlying-data";
	    VerbId["GetDataSourceData"] = "get-datasource-data";
	    VerbId["SaveExtensionSettings"] = "save-extension-settings";
	    VerbId["GetSelectedMarks"] = "get-selected-marks";
	    VerbId["GetHighlightedMarks"] = "get-highlighted-marks";
	    VerbId["GetParametersForSheet"] = "get-parameters-for-sheet";
	    VerbId["FindParameter"] = "find-parameter";
	    VerbId["ChangeParameterValue"] = "change-parameter-value";
	    VerbId["ClearSelectedMarks"] = "clear-selected-marks";
	    VerbId["SelectByValue"] = "select-by-value";
	    VerbId["GetDataSources"] = "get-data-sources";
	    VerbId["RefreshDataSource"] = "refresh-data-source";
	    VerbId["GetFilters"] = "get-filters";
	    VerbId["GetCategoricalDomain"] = "get-categorical-domain";
	    VerbId["GetRangeDomain"] = "get-range-domain";
	    VerbId["GetJoinDescription"] = "get-join-description";
	    VerbId["GetConnectionDescriptionSummaries"] = "get-connection-description-summaries";
	    VerbId["DisplayDialog"] = "display-dialog";
	    VerbId["CloseDialog"] = "close-dialog";
	})(VerbId = exports.VerbId || (exports.VerbId = {}));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var Dashboard_1 = __webpack_require__(10);
	exports.Dashboard = Dashboard_1.Dashboard;
	var VersionNumber_1 = __webpack_require__(17);
	exports.VersionNumber = VersionNumber_1.VersionNumber;
	var DashboardImpl_1 = __webpack_require__(18);
	exports.DashboardImpl = DashboardImpl_1.DashboardImpl;
	var EventListenerManager_1 = __webpack_require__(12);
	exports.EventListenerManager = EventListenerManager_1.EventListenerManager;
	var InternalToExternalEnumMappings_1 = __webpack_require__(23);
	exports.InternalToExternalEnumMappings = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings;
	__export(__webpack_require__(44));
	__export(__webpack_require__(28));
	__export(__webpack_require__(58));


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Sheet_1 = __webpack_require__(11);
	var Dashboard = (function (_super) {
	    __extends(Dashboard, _super);
	    function Dashboard(_dashboardImpl) {
	        var _this = _super.call(this, _dashboardImpl) || this;
	        _this._dashboardImpl = _dashboardImpl;
	        _dashboardImpl.initializeWithPublicInterfaces(_this);
	        return _this;
	    }
	    Object.defineProperty(Dashboard.prototype, "worksheets", {
	        get: function () {
	            return this._dashboardImpl.worksheets;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Dashboard.prototype, "objects", {
	        get: function () {
	            return this._dashboardImpl.objects;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Dashboard;
	}(Sheet_1.Sheet));
	exports.Dashboard = Dashboard;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventListenerManager_1 = __webpack_require__(12);
	var Sheet = (function (_super) {
	    __extends(Sheet, _super);
	    function Sheet(_sheetImpl) {
	        var _this = _super.call(this) || this;
	        _this._sheetImpl = _sheetImpl;
	        return _this;
	    }
	    Object.defineProperty(Sheet.prototype, "name", {
	        get: function () {
	            return this._sheetImpl.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Sheet.prototype, "sheetType", {
	        get: function () {
	            return this._sheetImpl.sheetType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Sheet.prototype, "size", {
	        get: function () {
	            return this._sheetImpl.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Sheet.prototype.findParameterAsync = function (parameterName) {
	        return this._sheetImpl.findParameterAsync(parameterName, this);
	    };
	    Sheet.prototype.getParametersAsync = function () {
	        return this._sheetImpl.getParametersAsync(this);
	    };
	    return Sheet;
	}(EventListenerManager_1.EventListenerManager));
	exports.Sheet = Sheet;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(13);
	/**
	 * Class designed to register and unregister handlers from a user. Only those events
	 * which are added via AddNewEventType will be supported by this instance
	 */
	var EventListenerManager = (function () {
	    function EventListenerManager() {
	        this._eventListenerManagers = {};
	    }
	    EventListenerManager.prototype.addEventListener = function (eventType, handler) {
	        if (!this._eventListenerManagers.hasOwnProperty(eventType)) {
	            throw api_utils_1.TableauException.error(EventListenerManager.UNSUPPORTED_EVENT, [eventType]);
	        }
	        return this._eventListenerManagers[eventType].addEventListener(handler);
	    };
	    EventListenerManager.prototype.removeEventListener = function (eventType, handler) {
	        if (!this._eventListenerManagers.hasOwnProperty(eventType)) {
	            throw api_utils_1.TableauException.error(EventListenerManager.UNSUPPORTED_EVENT, [eventType]);
	        }
	        return this._eventListenerManagers[eventType].removeEventListener(handler);
	    };
	    EventListenerManager.prototype.addNewEventType = function (eventManager) {
	        this._eventListenerManagers[eventManager.eventType] = eventManager;
	    };
	    EventListenerManager.UNSUPPORTED_EVENT = 'Unsupported event type : %1';
	    return EventListenerManager;
	}());
	exports.EventListenerManager = EventListenerManager;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var EnumConverter_1 = __webpack_require__(14);
	exports.EnumConverter = EnumConverter_1.EnumConverter;
	var Param_1 = __webpack_require__(16);
	exports.Param = Param_1.Param;
	var TableauException_1 = __webpack_require__(15);
	exports.TableauException = TableauException_1.TableauException;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var TableauException_1 = __webpack_require__(15);
	/**
	 * This class converts from a source enum value to destination enum
	 * value given a mapping from source to destination when constructed.
	 */
	var EnumConverter = (function () {
	    function EnumConverter(_mappings, _defaultVal) {
	        this._mappings = _mappings;
	        this._defaultVal = _defaultVal;
	    }
	    EnumConverter.prototype.convert = function (enumVal, throwIfMissing) {
	        if (this._mappings.hasOwnProperty(enumVal)) {
	            return this._mappings[enumVal];
	        }
	        if (this._defaultVal !== undefined && !throwIfMissing) {
	            return this._defaultVal;
	        }
	        throw TableauException_1.TableauException.error(EnumConverter.MAPPING_NOT_FOUND, [enumVal]);
	    };
	    EnumConverter.MAPPING_NOT_FOUND = 'Mapping not found for %1';
	    return EnumConverter;
	}());
	exports.EnumConverter = EnumConverter;


/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var TableauException = (function () {
	    function TableauException() {
	    }
	    TableauException.apiNotImplemented = function (params) {
	        var message = TableauException.format(TableauException.API_NOT_IMPLEMENTED, params);
	        return new Error(message);
	    };
	    TableauException.isUndefined = function (params) {
	        var message = TableauException.format(TableauException.UNDEFINED, params);
	        return new Error(message);
	    };
	    TableauException.isNull = function (params) {
	        var message = TableauException.format(TableauException.IS_NULL, params);
	        return new Error(message);
	    };
	    TableauException.invalidParamValue = function (params) {
	        var message = TableauException.format(TableauException.INVALID_PARAMETER_VALUE, params);
	        return new Error(message);
	    };
	    TableauException.invalidParamType = function (params) {
	        var message = TableauException.format(TableauException.INVALID_PARAMETER_TYPE, params);
	        return new Error(message);
	    };
	    TableauException.missingParameter = function (params) {
	        var message = TableauException.format(TableauException.MISSING_PARAMETER, params);
	        return new Error(message);
	    };
	    TableauException.invalid = function (params) {
	        var message = TableauException.format(TableauException.INVALID, params);
	        return new Error(message);
	    };
	    TableauException.internalError = function (params) {
	        var message = TableauException.format(TableauException.INTERNAL_ERROR, params);
	        return new Error(message);
	    };
	    TableauException.error = function (message, params) {
	        var result;
	        if (params) {
	            result = TableauException.format(message, params);
	        }
	        else {
	            result = message;
	        }
	        return new Error(result);
	    };
	    TableauException.format = function (message, params) {
	        for (var i = 0; i < params.length; i++) {
	            var match = '%' + (i + 1);
	            message = message.replace(new RegExp(match, 'g'), params[i]);
	        }
	        message = message.replace(new RegExp('%[0-9]+', 'g'), '');
	        message = message.trim();
	        return message;
	    };
	    TableauException.API_NOT_IMPLEMENTED = '%1 API not yet implemented.';
	    TableauException.UNDEFINED = '%1 is undefined.';
	    TableauException.INVALID_PARAMETER_VALUE = 'Invalid value for parameter: %1. %2';
	    TableauException.INVALID_PARAMETER_TYPE = 'Invalid type for parameter: %1. %2';
	    TableauException.MISSING_PARAMETER = 'Missing Parameter: %1.';
	    TableauException.UNKNOWN_ERROR = 'Unknown error.';
	    TableauException.INTERNAL_ERROR = 'Internal error: %1.';
	    TableauException.INVALID = 'Invalid: %1. %2';
	    TableauException.IS_NULL = '%1 is null.';
	    return TableauException;
	}());
	exports.TableauException = TableauException;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var TableauException_1 = __webpack_require__(15);
	var Param = (function () {
	    function Param() {
	    }
	    /**
	     * Verifies that an incoming parameter is 'truthy' and throws
	     * an error if it's not. This will throw an error if the value
	     * is null, undefined, NaN, the empty string, 0, or false.
	     *
	     * @param argumentValue value to verify
	     * @param argumentName name of argument to verify
	     */
	    /*tslint:disable-next-line */
	    Param.verifyValue = function (argumentValue, argumentName) {
	        if (!argumentValue) {
	            throw TableauException_1.TableauException.invalidParamValue([argumentName]);
	        }
	    };
	    /**
	     * Verifies that a string is valid.  Throws an error if the string is
	     * null, undefined, or NaN.
	     *
	     * @param argumentValue value to verify
	     * @param argumentName name of argument to verify
	     */
	    Param.verifyString = function (argumentValue, argumentName) {
	        if (argumentValue === null || argumentValue === undefined) {
	            throw TableauException_1.TableauException.invalidParamValue([argumentName]);
	        }
	    };
	    /**
	     * Verifies the value is part of the Enum
	     *
	     * String enums are {string : string} dictionaries which are not reverse mappable
	     * This is an ugly workaround
	     * @param value value to verify
	     * @param enumType enum to verify against
	     */
	    /* tslint:disable:no-any */
	    Param.isValidEnumValue = function (value, enumType) {
	        var isValid = false;
	        Object.keys(enumType).forEach(function (enumKey) {
	            if (enumType[enumKey] === value.toString()) {
	                isValid = true;
	            }
	        });
	        return isValid;
	    };
	    /* tslint:enable:no-any */
	    /**
	     * serializes the date into the format that the server expects.
	     * @param date the date to serialize
	     */
	    Param.serializeDateForPlatform = function (date) {
	        var year = date.getUTCFullYear();
	        var month = date.getUTCMonth() + 1;
	        var day = date.getUTCDate();
	        var hh = date.getUTCHours();
	        var mm = date.getUTCMinutes();
	        var sec = date.getUTCSeconds();
	        return year + '-' + month + '-' + day + ' ' + hh + ':' + mm + ':' + sec;
	    };
	    Param.serializeBooleanForPlatform = function (bool) {
	        return bool ? 'true' : 'false';
	    };
	    Param.serializeNumberForPlatform = function (num) {
	        return num.toString(10);
	    };
	    /**
	     * Verifies the params min and max for applying range filter
	     * @param min range min
	     * @param max range max
	     */
	    /* tslint:disable:no-any */
	    Param.verifyRangeParamType = function (min, max) {
	        /* tslint:enable:no-any */
	        if (!min && !max) {
	            throw TableauException_1.TableauException.invalidParamValue(['Range parameters', 'At least one of min or max is required.']);
	        }
	        if (!Param.isTypeNumber(min) && !Param.isTypeDate(min)) {
	            throw TableauException_1.TableauException.invalidParamType(['Range parameters', 'Only Date and number are allowed for parameter min.']);
	        }
	        if (!Param.isTypeNumber(max) && !Param.isTypeDate(max)) {
	            throw TableauException_1.TableauException.invalidParamType(['Range parameters', 'Only Date and number are allowed for parameter max.']);
	        }
	        if (typeof (min) !== typeof (max)) {
	            throw TableauException_1.TableauException.invalidParamType(['Range parameters', 'Parameters min and max should be of the same type.']);
	        }
	    };
	    /**
	     * Verifies the input is a number
	     */
	    /* tslint:disable:no-any */
	    Param.isTypeNumber = function (input) {
	        return typeof (input) === 'number' || input instanceof Number;
	    };
	    /* tslint:enable:no-any */
	    /**
	     * Verifies the input is a Date
	     */
	    /* tslint:disable:no-any */
	    Param.isTypeDate = function (input) {
	        return input instanceof Date;
	    };
	    /* tslint:enable:no-any */
	    /* tslint:disable-next-line:no-any */
	    Param.isTypeString = function (input) {
	        return typeof (input) === 'string' || input instanceof String;
	    };
	    /* tslint:disable-next-line:no-any */
	    Param.isTypeBool = function (input) {
	        return typeof (input) === 'boolean' || input instanceof Boolean;
	    };
	    /* tslint:disable-next-line:no-any */
	    Param.serializeParamterValue = function (value) {
	        if (Param.isTypeNumber(value)) {
	            return Param.serializeNumberForPlatform(value);
	        }
	        else if (Param.isTypeDate(value)) {
	            return Param.serializeDateForPlatform(value);
	        }
	        else if (Param.isTypeBool(value)) {
	            return Param.serializeBooleanForPlatform(value);
	        }
	        else if (Param.isTypeString(value)) {
	            return value;
	        }
	        else {
	            throw TableauException_1.TableauException.invalidParamValue(['value']);
	        }
	    };
	    return Param;
	}());
	exports.Param = Param;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(13);
	/**
	 * Represents the current version of the extensions library
	 */
	var VersionNumber = (function () {
	    // private constructor so everyone uses the singleton instance
	    function VersionNumber(versionString) {
	        var parts = versionString.split('.').map(function (p) { return parseInt(p, 10); });
	        if (parts.length !== 3) {
	            throw api_utils_1.TableauException.error(VersionNumber.INVALID_VERSION_NUMBER, [versionString]);
	        }
	        this.major = parts[0];
	        this.minor = parts[1];
	        this.fix = parts[2];
	    }
	    Object.defineProperty(VersionNumber, "Instance", {
	        /**
	         * Gets the singleton instance of the version number.
	         */
	        get: function () {
	            return VersionNumber._instance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    VersionNumber.SetVersionNumber = function (numString) {
	        VersionNumber._instance = new VersionNumber(numString);
	    };
	    Object.defineProperty(VersionNumber.prototype, "formattedValue", {
	        get: function () {
	            return this.major + "." + this.minor + "." + this.fix;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    VersionNumber.INVALID_VERSION_NUMBER = 'Invalid version number: ';
	    return VersionNumber;
	}());
	exports.VersionNumber = VersionNumber;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var DashboardObject_1 = __webpack_require__(22);
	var InternalToExternalEnumMappings_1 = __webpack_require__(23);
	var Point_1 = __webpack_require__(24);
	var Size_1 = __webpack_require__(25);
	var Worksheet_1 = __webpack_require__(26);
	var SheetImpl_1 = __webpack_require__(27);
	var SheetInfoImpl_1 = __webpack_require__(29);
	var WorksheetImpl_1 = __webpack_require__(30);
	var DashboardImpl = (function (_super) {
	    __extends(DashboardImpl, _super);
	    function DashboardImpl(_info, _sheetPath) {
	        var _this = _super.call(this, new SheetInfoImpl_1.SheetInfoImpl(_info.name, Contract.SheetType.Dashboard, new Size_1.Size(_info.size.h, _info.size.w))) || this;
	        _this._info = _info;
	        _this._sheetPath = _sheetPath;
	        return _this;
	    }
	    Object.defineProperty(DashboardImpl.prototype, "worksheets", {
	        get: function () {
	            return this._worksheets;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DashboardImpl.prototype, "objects", {
	        get: function () {
	            return this._objects;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DashboardImpl.prototype.initializeWithPublicInterfaces = function (dashboard) {
	        this._worksheets = new Array();
	        this._objects = new Array();
	        // Process all the zones which are contained in this dashboard
	        for (var _i = 0, _a = this._info.zones; _i < _a.length; _i++) {
	            var zone = _a[_i];
	            var worksheet = undefined;
	            var zoneSize = new Size_1.Size(zone.height, zone.width);
	            if (zone.zoneType === api_internal_contract_1.DashboardObjectType.Worksheet) {
	                var sheetInfo = new SheetInfoImpl_1.SheetInfoImpl(zone.name, Contract.SheetType.Worksheet, zoneSize);
	                var vizId = {
	                    worksheet: zone.name,
	                    dashboard: this._info.name,
	                    storyboard: this._sheetPath.storyboard,
	                    flipboardZoneID: this._sheetPath.flipboardZoneID,
	                    storyPointID: this._sheetPath.storyPointID
	                };
	                var worksheetImpl = new WorksheetImpl_1.WorksheetImpl(sheetInfo, vizId, dashboard);
	                worksheet = new Worksheet_1.Worksheet(worksheetImpl);
	                this._worksheets.push(worksheet);
	            }
	            var zonePoint = new Point_1.Point(zone.x, zone.y);
	            var dashboardObject = new DashboardObject_1.DashboardObject(dashboard, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dashboardObjectType.convert(zone.zoneType), zonePoint, zoneSize, worksheet);
	            this._objects.push(dashboardObject);
	        }
	    };
	    return DashboardImpl;
	}(SheetImpl_1.SheetImpl));
	exports.DashboardImpl = DashboardImpl;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(20));


/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	// All enum values made available to Extensions developers.
	// Enums should be kept in alphabetical order.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * The context in which the Extensions is currently running.
	 */
	var ExtensionContext;
	(function (ExtensionContext) {
	    ExtensionContext["Desktop"] = "desktop";
	    ExtensionContext["Server"] = "server";
	})(ExtensionContext = exports.ExtensionContext || (exports.ExtensionContext = {}));
	/**
	 * The mode in which the Extensions is currently running.
	 */
	var ExtensionMode;
	(function (ExtensionMode) {
	    ExtensionMode["Authoring"] = "authoring";
	    ExtensionMode["Viewing"] = "viewing";
	})(ExtensionMode = exports.ExtensionMode || (exports.ExtensionMode = {}));
	var AnalyticsObjectType;
	(function (AnalyticsObjectType) {
	    AnalyticsObjectType["Cluster"] = "cluster";
	    AnalyticsObjectType["Forecast"] = "forecast";
	    AnalyticsObjectType["TrendLine"] = "trend-line";
	})(AnalyticsObjectType = exports.AnalyticsObjectType || (exports.AnalyticsObjectType = {}));
	var ColumnType;
	(function (ColumnType) {
	    ColumnType["Discrete"] = "discrete";
	    ColumnType["Continuous"] = "continuous";
	})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
	/**
	 * What the object represents in a dashboard.
	 */
	var DashboardObjectType;
	(function (DashboardObjectType) {
	    DashboardObjectType["Blank"] = "blank";
	    DashboardObjectType["Worksheet"] = "worksheet";
	    DashboardObjectType["QuickFilter"] = "quick-filter";
	    DashboardObjectType["ParameterControl"] = "parameter-control";
	    DashboardObjectType["PageFilter"] = "page-filter";
	    DashboardObjectType["Legend"] = "legend";
	    DashboardObjectType["Title"] = "title";
	    DashboardObjectType["Text"] = "text";
	    DashboardObjectType["Image"] = "image";
	    DashboardObjectType["WebPage"] = "web-page";
	    DashboardObjectType["Extension"] = "extension";
	})(DashboardObjectType = exports.DashboardObjectType || (exports.DashboardObjectType = {}));
	/**
	 * The different types of data a value can have
	 */
	var DataType;
	(function (DataType) {
	    DataType["String"] = "string";
	    DataType["Int"] = "int";
	    DataType["Float"] = "float";
	    DataType["Bool"] = "bool";
	    DataType["Date"] = "date";
	    DataType["DateTime"] = "date-time";
	    DataType["Spatial"] = "spatial";
	})(DataType = exports.DataType || (exports.DataType = {}));
	/**
	 * Valid date ranges for a relative date filter.
	 */
	var DateRangeType;
	(function (DateRangeType) {
	    DateRangeType["Last"] = "last";
	    DateRangeType["LastN"] = "last-n";
	    DateRangeType["Next"] = "next";
	    DateRangeType["NextN"] = "next-n";
	    DateRangeType["Current"] = "current";
	    DateRangeType["ToDate"] = "to-date";
	})(DateRangeType = exports.DateRangeType || (exports.DateRangeType = {}));
	var EncodingType;
	(function (EncodingType) {
	    EncodingType["Column"] = "column";
	    EncodingType["Row"] = "row";
	    EncodingType["Page"] = "page";
	    EncodingType["Filter"] = "filter";
	    EncodingType["MarksType"] = "marks-type";
	    EncodingType["MeasureValues"] = "measure-values";
	    EncodingType["Color"] = "color";
	    EncodingType["Size"] = "size";
	    EncodingType["Label"] = "label";
	    EncodingType["Detail"] = "detail";
	    EncodingType["Tooltip"] = "tooltip";
	    EncodingType["Shape"] = "shape";
	    EncodingType["Path"] = "path";
	    EncodingType["Angle"] = "angle";
	})(EncodingType = exports.EncodingType || (exports.EncodingType = {}));
	/**
	 * All error codes used by the Extensions API.
	 */
	var ErrorCodes;
	(function (ErrorCodes) {
	    /**
	     * Only one dialog can be opened at time with the UI namespace functionality.
	     */
	    ErrorCodes["DialogAlreadyOpen"] = "dialog-already-open";
	    /**
	     * The open dialog was closed by the user.
	     */
	    ErrorCodes["DialogClosedByUser"] = "dialog-closed-by-user";
	    /**
	     * An error occurred while attempting to perform a filter operation.
	     */
	    ErrorCodes["FilterCannotBePerformed"] = "filter-cannot-be-performed";
	    /**
	     * An error occurred within the Tableau Extensions API. Contact Tableau Support.
	     */
	    ErrorCodes["InternalError"] = "internal-error";
	    /**
	     * An invalid aggregation was specified for the filter, such as setting a range filter to "SUM(Sales)" instead of "Sales".
	     */
	    ErrorCodes["InvalidAggregationFieldName"] = "invalid-aggregation-field-name";
	    /**
	     * A dialog must first launch to, and send messages from, the same domain as the parent Extensions.
	     */
	    ErrorCodes["InvalidDomainDialog"] = "invalid-dialog-domain";
	    /**
	     * An invalid date was specified in a method that required a date parameter.
	     */
	    ErrorCodes["InvalidDateParameter"] = "invalid-date-parameter";
	    /**
	     * A filter operation was attempted on a field that does not exist in the data source.
	     */
	    ErrorCodes["InvalidFilterFieldName"] = "invalid-filter-field-name";
	    /**
	     * A filter operation was attempted using a value that is the wrong data type or format.
	     */
	    ErrorCodes["InvalidFilterFieldValue"] = "invalid-filter-field-value";
	    /**
	     * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message field.
	     */
	    ErrorCodes["InvalidParameter"] = "invalid-parameter";
	    /**
	     * An invalid date value was specified in a Sheet.selectMarksAsync() call for a date field.
	     */
	    ErrorCodes["InvalidSelectionDate"] = "invalid-selection-date";
	    /**
	     * A field was specified in a Sheet.selectMarksAsync() call that does not exist in the data source.
	     */
	    ErrorCodes["InvalidSelectionFieldName"] = "invalid-selection-field-name";
	    /**
	     * An invalid value was specified in a Sheet.selectMarksAsync() call.
	     */
	    ErrorCodes["InvalidSelectionValue"] = "invalid-selection-value";
	    /**
	     * A required parameter was not specified, null, or an empty string/array.
	     */
	    ErrorCodes["NullOrEmptyParameter"] = "null-or-empty-parameter";
	    /**
	     * An unknown event name was specified in the call to Viz.addEventListeneror Viz.removeEventListener.
	     */
	    ErrorCodes["UnsupportedEventName"] = "unsupported-event-name";
	    /**
	     * A method was used for a type of datasource that doesn't support that method (see getActiveTablesAsync for an example)
	     */
	    ErrorCodes["UnsupportedMethodForDataSourceType"] = "unsupported-method-for-data-source-type";
	})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
	/**
	 *  Type of aggregation on a field.
	 */
	var FieldAggregationType;
	(function (FieldAggregationType) {
	    FieldAggregationType["Sum"] = "sum";
	    FieldAggregationType["Avg"] = "avg";
	    FieldAggregationType["Min"] = "min";
	    FieldAggregationType["Max"] = "max";
	    FieldAggregationType["Stdev"] = "stdev";
	    FieldAggregationType["Stdevp"] = "stdevp";
	    FieldAggregationType["Var"] = "var";
	    FieldAggregationType["Varp"] = "varp";
	    FieldAggregationType["Count"] = "count";
	    FieldAggregationType["Countd"] = "countd";
	    FieldAggregationType["Median"] = "median";
	    FieldAggregationType["Attr"] = "attr";
	    FieldAggregationType["None"] = "none";
	    FieldAggregationType["Year"] = "year";
	    FieldAggregationType["Qtr"] = "qtr";
	    FieldAggregationType["Month"] = "month";
	    FieldAggregationType["Day"] = "day";
	    FieldAggregationType["Hour"] = "hour";
	    FieldAggregationType["Minute"] = "minute";
	    FieldAggregationType["Second"] = "second";
	    FieldAggregationType["Week"] = "week";
	    FieldAggregationType["Weekday"] = "weekday";
	    FieldAggregationType["MonthYear"] = "month-year";
	    FieldAggregationType["Mdy"] = "mdy";
	    FieldAggregationType["End"] = "end";
	    FieldAggregationType["TruncYear"] = "trunc-year";
	    FieldAggregationType["TruncQtr"] = "trunc-qtr";
	    FieldAggregationType["TruncMonth"] = "trunc-month";
	    FieldAggregationType["TruncWeek"] = "trunc-week";
	    FieldAggregationType["TruncDay"] = "trunc-day";
	    FieldAggregationType["TruncHour"] = "trunc-hour";
	    FieldAggregationType["TruncMinute"] = "trunc-minute";
	    FieldAggregationType["TruncSecond"] = "trunc-second";
	    FieldAggregationType["Quart1"] = "quart1";
	    FieldAggregationType["Quart3"] = "quart3";
	    FieldAggregationType["Skewness"] = "skewness";
	    FieldAggregationType["Kurtosis"] = "kurtosis";
	    FieldAggregationType["InOut"] = "in-out";
	    FieldAggregationType["User"] = "user";
	})(FieldAggregationType = exports.FieldAggregationType || (exports.FieldAggregationType = {}));
	/**
	 * Role of a field.
	 */
	var FieldRoleType;
	(function (FieldRoleType) {
	    FieldRoleType["Dimension"] = "dimension";
	    FieldRoleType["Measure"] = "measure";
	    FieldRoleType["Unknown"] = "unknown";
	})(FieldRoleType = exports.FieldRoleType || (exports.FieldRoleType = {}));
	/**
	 * An enumeration of the valid types of filters that can be applied.
	 */
	var FilterType;
	(function (FilterType) {
	    FilterType["Categorical"] = "categorical";
	    FilterType["Range"] = "range";
	    FilterType["Hierarchical"] = "hierarchical";
	    FilterType["RelativeDate"] = "relative-date";
	})(FilterType = exports.FilterType || (exports.FilterType = {}));
	/**
	 * The different update types for applying filter
	 */
	var FilterUpdateType;
	(function (FilterUpdateType) {
	    FilterUpdateType["Add"] = "add";
	    FilterUpdateType["All"] = "all";
	    FilterUpdateType["Replace"] = "replace";
	    FilterUpdateType["Remove"] = "remove";
	})(FilterUpdateType = exports.FilterUpdateType || (exports.FilterUpdateType = {}));
	/**
	 * The domain type for a filter
	 */
	var FilterDomainType;
	(function (FilterDomainType) {
	    /**
	     * The domain values that are relevant to the specified filter
	     * i.e. the domain is restricted by a previous filter
	     */
	    FilterDomainType["Relevant"] = "relevant";
	    /**
	     * list of all possible domain values from database
	     */
	    FilterDomainType["Database"] = "database";
	})(FilterDomainType = exports.FilterDomainType || (exports.FilterDomainType = {}));
	/**
	 * The option for specifying which values to include for filtering
	 * Indicates what to do with null values for a given filter or mark selection call.
	 */
	var FilterNullOption;
	(function (FilterNullOption) {
	    FilterNullOption["NullValues"] = "null-values";
	    FilterNullOption["NonNullValues"] = "non-null-values";
	    FilterNullOption["AllValues"] = "all-values";
	})(FilterNullOption = exports.FilterNullOption || (exports.FilterNullOption = {}));
	/**
	 * Type of mark for a given marks card in a viz.
	 */
	var MarkType;
	(function (MarkType) {
	    MarkType["Bar"] = "bar";
	    MarkType["Line"] = "line";
	    MarkType["Area"] = "area";
	    MarkType["Square"] = "square";
	    MarkType["Circle"] = "circle";
	    MarkType["Shape"] = "shape";
	    MarkType["Text"] = "text";
	    MarkType["Map"] = "map";
	    MarkType["Pie"] = "pie";
	    MarkType["GanttBar"] = "gantt-bar";
	    MarkType["Polygon"] = "polygon";
	})(MarkType = exports.MarkType || (exports.MarkType = {}));
	/**
	 * An enumeration describing the different types of allowable values.
	 * This is used for restricting the domain of a parameter
	 */
	var ParameterValueType;
	(function (ParameterValueType) {
	    ParameterValueType["All"] = "all";
	    ParameterValueType["List"] = "list";
	    ParameterValueType["Range"] = "range";
	})(ParameterValueType = exports.ParameterValueType || (exports.ParameterValueType = {}));
	/**
	 * Date period used in filters and in parameters.
	 */
	var PeriodType;
	(function (PeriodType) {
	    PeriodType["Years"] = "years";
	    PeriodType["Quarters"] = "quarters";
	    PeriodType["Months"] = "months";
	    PeriodType["Weeks"] = "weeks";
	    PeriodType["Days"] = "days";
	    PeriodType["Hours"] = "hours";
	    PeriodType["Minutes"] = "minutes";
	    PeriodType["Seconds"] = "seconds";
	})(PeriodType = exports.PeriodType || (exports.PeriodType = {}));
	var QuickTableCalcType;
	(function (QuickTableCalcType) {
	    QuickTableCalcType["RunningTotal"] = "running-total";
	    QuickTableCalcType["Difference"] = "difference";
	    QuickTableCalcType["PercentDifference"] = "percent-difference";
	    QuickTableCalcType["PercentOfTotal"] = "percent-of-total";
	    QuickTableCalcType["Rank"] = "rank";
	    QuickTableCalcType["Percentile"] = "percentile";
	    QuickTableCalcType["MovingAverage"] = "moving-average";
	    QuickTableCalcType["YTDTotal"] = "ytd-total";
	    QuickTableCalcType["CompoundGrowthRate"] = "compound-growth-rate";
	    QuickTableCalcType["YearOverYearGrowth"] = "year-over-year-growth";
	    QuickTableCalcType["YTDGrowth"] = "ytd-growth";
	    QuickTableCalcType["Undefined"] = "undefined";
	})(QuickTableCalcType = exports.QuickTableCalcType || (exports.QuickTableCalcType = {}));
	/**
	 * Enum for specifying the selection type for select marks api.
	 */
	var SelectionUpdateType;
	(function (SelectionUpdateType) {
	    SelectionUpdateType["Replace"] = "select-replace";
	    SelectionUpdateType["Add"] = "select-add";
	    SelectionUpdateType["Remove"] = "select-remove";
	})(SelectionUpdateType = exports.SelectionUpdateType || (exports.SelectionUpdateType = {}));
	/**
	 * The type of sheet a Sheet object represents
	 */
	var SheetType;
	(function (SheetType) {
	    SheetType["Dashboard"] = "dashboard";
	    SheetType["Story"] = "story";
	    SheetType["Worksheet"] = "worksheet";
	})(SheetType = exports.SheetType || (exports.SheetType = {}));
	var SortDirection;
	(function (SortDirection) {
	    SortDirection["Increasing"] = "increasing";
	    SortDirection["Decreasing"] = "decreasing";
	})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
	/**
	 * Represents a certain type of event which can be listened for
	 */
	var TableauEventType;
	(function (TableauEventType) {
	    /** Raised when any filter has changed state.*/
	    TableauEventType["FilterChanged"] = "filter-changed";
	    /** The selected marks on a visualization has changed */
	    TableauEventType["MarkSelectionChanged"] = "mark-selection-changed";
	    /** A parameter has had its value modified */
	    TableauEventType["ParameterChanged"] = "parameter-changed";
	})(TableauEventType = exports.TableauEventType || (exports.TableauEventType = {}));
	var TrendLineModelType;
	(function (TrendLineModelType) {
	    TrendLineModelType["Linear"] = "linear";
	    TrendLineModelType["Logarithmic"] = "logarithmic";
	    TrendLineModelType["Exponential"] = "exponential";
	    TrendLineModelType["Polynomial"] = "polynomial";
	})(TrendLineModelType = exports.TrendLineModelType || (exports.TrendLineModelType = {}));


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(4));
	__export(__webpack_require__(5));
	__export(__webpack_require__(6));
	__export(__webpack_require__(7));
	__export(__webpack_require__(8));


/***/ },
/* 22 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the dashboard objects - the zones in a dashboard.
	 * This does not follow the Impl pattern as it is just a property bag.
	 */
	var DashboardObject = (function () {
	    function DashboardObject(_dashboard, _type, _position, _size, _worksheet) {
	        this._dashboard = _dashboard;
	        this._type = _type;
	        this._position = _position;
	        this._size = _size;
	        this._worksheet = _worksheet;
	    }
	    Object.defineProperty(DashboardObject.prototype, "dashboard", {
	        get: function () {
	            return this._dashboard;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DashboardObject.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DashboardObject.prototype, "position", {
	        get: function () {
	            return this._position;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DashboardObject.prototype, "size", {
	        get: function () {
	            return this._size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DashboardObject.prototype, "worksheet", {
	        get: function () {
	            return this._worksheet;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DashboardObject;
	}());
	exports.DashboardObject = DashboardObject;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_external_contract_1 = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
	/**
	 * Maps enums used by the internal-api-contract to the enums used
	 * in the external-api-contract, which developers code against.
	 */
	var InternalToExternalEnumMappings = (function () {
	    function InternalToExternalEnumMappings() {
	    }
	    InternalToExternalEnumMappings.extensionContext = new api_utils_1.EnumConverter((_a = {},
	        _a[api_internal_contract_1.ExtensionContext.Desktop] = api_external_contract_1.ExtensionContext.Desktop,
	        _a[api_internal_contract_1.ExtensionContext.Server] = api_external_contract_1.ExtensionContext.Server,
	        _a));
	    InternalToExternalEnumMappings.extensionMode = new api_utils_1.EnumConverter((_b = {},
	        _b[api_internal_contract_1.ExtensionMode.Authoring] = api_external_contract_1.ExtensionMode.Authoring,
	        _b[api_internal_contract_1.ExtensionMode.Viewing] = api_external_contract_1.ExtensionMode.Viewing,
	        _b));
	    InternalToExternalEnumMappings.columnType = new api_utils_1.EnumConverter((_c = {},
	        _c[api_internal_contract_1.ColumnType.Continuous] = api_external_contract_1.ColumnType.Continuous,
	        _c[api_internal_contract_1.ColumnType.Discrete] = api_external_contract_1.ColumnType.Discrete,
	        _c));
	    InternalToExternalEnumMappings.fieldAggregationType = new api_utils_1.EnumConverter((_d = {},
	        _d[api_internal_contract_1.FieldAggregationType.Attr] = api_external_contract_1.FieldAggregationType.Attr,
	        _d[api_internal_contract_1.FieldAggregationType.Avg] = api_external_contract_1.FieldAggregationType.Avg,
	        _d[api_internal_contract_1.FieldAggregationType.Count] = api_external_contract_1.FieldAggregationType.Count,
	        _d[api_internal_contract_1.FieldAggregationType.Countd] = api_external_contract_1.FieldAggregationType.Countd,
	        _d[api_internal_contract_1.FieldAggregationType.Day] = api_external_contract_1.FieldAggregationType.Day,
	        _d[api_internal_contract_1.FieldAggregationType.End] = api_external_contract_1.FieldAggregationType.End,
	        _d[api_internal_contract_1.FieldAggregationType.Hour] = api_external_contract_1.FieldAggregationType.Hour,
	        _d[api_internal_contract_1.FieldAggregationType.InOut] = api_external_contract_1.FieldAggregationType.InOut,
	        _d[api_internal_contract_1.FieldAggregationType.Kurtosis] = api_external_contract_1.FieldAggregationType.Kurtosis,
	        _d[api_internal_contract_1.FieldAggregationType.Max] = api_external_contract_1.FieldAggregationType.Max,
	        _d[api_internal_contract_1.FieldAggregationType.Mdy] = api_external_contract_1.FieldAggregationType.Mdy,
	        _d[api_internal_contract_1.FieldAggregationType.Median] = api_external_contract_1.FieldAggregationType.Median,
	        _d[api_internal_contract_1.FieldAggregationType.Min] = api_external_contract_1.FieldAggregationType.Min,
	        _d[api_internal_contract_1.FieldAggregationType.Minute] = api_external_contract_1.FieldAggregationType.Minute,
	        _d[api_internal_contract_1.FieldAggregationType.MonthYear] = api_external_contract_1.FieldAggregationType.MonthYear,
	        _d[api_internal_contract_1.FieldAggregationType.None] = api_external_contract_1.FieldAggregationType.None,
	        _d[api_internal_contract_1.FieldAggregationType.Qtr] = api_external_contract_1.FieldAggregationType.Qtr,
	        _d[api_internal_contract_1.FieldAggregationType.Quart1] = api_external_contract_1.FieldAggregationType.Quart1,
	        _d[api_internal_contract_1.FieldAggregationType.Quart3] = api_external_contract_1.FieldAggregationType.Quart3,
	        _d[api_internal_contract_1.FieldAggregationType.Second] = api_external_contract_1.FieldAggregationType.Second,
	        _d[api_internal_contract_1.FieldAggregationType.Skewness] = api_external_contract_1.FieldAggregationType.Skewness,
	        _d[api_internal_contract_1.FieldAggregationType.Stdev] = api_external_contract_1.FieldAggregationType.Stdev,
	        _d[api_internal_contract_1.FieldAggregationType.Stdevp] = api_external_contract_1.FieldAggregationType.Stdevp,
	        _d[api_internal_contract_1.FieldAggregationType.Sum] = api_external_contract_1.FieldAggregationType.Sum,
	        _d[api_internal_contract_1.FieldAggregationType.TruncDay] = api_external_contract_1.FieldAggregationType.TruncDay,
	        _d[api_internal_contract_1.FieldAggregationType.TruncHour] = api_external_contract_1.FieldAggregationType.TruncHour,
	        _d[api_internal_contract_1.FieldAggregationType.TruncMinute] = api_external_contract_1.FieldAggregationType.TruncMinute,
	        _d[api_internal_contract_1.FieldAggregationType.TruncMonth] = api_external_contract_1.FieldAggregationType.TruncMonth,
	        _d[api_internal_contract_1.FieldAggregationType.TruncQtr] = api_external_contract_1.FieldAggregationType.TruncQtr,
	        _d[api_internal_contract_1.FieldAggregationType.TruncSecond] = api_external_contract_1.FieldAggregationType.TruncSecond,
	        _d[api_internal_contract_1.FieldAggregationType.TruncWeek] = api_external_contract_1.FieldAggregationType.TruncWeek,
	        _d[api_internal_contract_1.FieldAggregationType.TruncYear] = api_external_contract_1.FieldAggregationType.TruncYear,
	        _d[api_internal_contract_1.FieldAggregationType.User] = api_external_contract_1.FieldAggregationType.User,
	        _d[api_internal_contract_1.FieldAggregationType.Var] = api_external_contract_1.FieldAggregationType.Var,
	        _d[api_internal_contract_1.FieldAggregationType.Varp] = api_external_contract_1.FieldAggregationType.Varp,
	        _d[api_internal_contract_1.FieldAggregationType.Week] = api_external_contract_1.FieldAggregationType.Week,
	        _d[api_internal_contract_1.FieldAggregationType.Weekday] = api_external_contract_1.FieldAggregationType.Weekday,
	        _d[api_internal_contract_1.FieldAggregationType.Year] = api_external_contract_1.FieldAggregationType.Year,
	        _d));
	    InternalToExternalEnumMappings.fieldRoleType = new api_utils_1.EnumConverter((_e = {},
	        _e[api_internal_contract_1.FieldRoleType.Dimension] = api_external_contract_1.FieldRoleType.Dimension,
	        _e[api_internal_contract_1.FieldRoleType.Measure] = api_external_contract_1.FieldRoleType.Measure,
	        _e[api_internal_contract_1.FieldRoleType.Unknown] = api_external_contract_1.FieldRoleType.Unknown,
	        _e));
	    InternalToExternalEnumMappings.sheetType = new api_utils_1.EnumConverter((_f = {},
	        _f[api_internal_contract_1.SheetType.Dashboard] = api_external_contract_1.SheetType.Dashboard,
	        _f[api_internal_contract_1.SheetType.Story] = api_external_contract_1.SheetType.Story,
	        _f[api_internal_contract_1.SheetType.Worksheet] = api_external_contract_1.SheetType.Worksheet,
	        _f));
	    InternalToExternalEnumMappings.dashboardObjectType = new api_utils_1.EnumConverter((_g = {},
	        _g[api_internal_contract_1.DashboardObjectType.Extension] = api_external_contract_1.DashboardObjectType.Extension,
	        _g[api_internal_contract_1.DashboardObjectType.Blank] = api_external_contract_1.DashboardObjectType.Blank,
	        _g[api_internal_contract_1.DashboardObjectType.Image] = api_external_contract_1.DashboardObjectType.Image,
	        _g[api_internal_contract_1.DashboardObjectType.Legend] = api_external_contract_1.DashboardObjectType.Legend,
	        _g[api_internal_contract_1.DashboardObjectType.PageFilter] = api_external_contract_1.DashboardObjectType.PageFilter,
	        _g[api_internal_contract_1.DashboardObjectType.ParameterControl] = api_external_contract_1.DashboardObjectType.ParameterControl,
	        _g[api_internal_contract_1.DashboardObjectType.QuickFilter] = api_external_contract_1.DashboardObjectType.QuickFilter,
	        _g[api_internal_contract_1.DashboardObjectType.Text] = api_external_contract_1.DashboardObjectType.Text,
	        _g[api_internal_contract_1.DashboardObjectType.Title] = api_external_contract_1.DashboardObjectType.Title,
	        _g[api_internal_contract_1.DashboardObjectType.WebPage] = api_external_contract_1.DashboardObjectType.WebPage,
	        _g[api_internal_contract_1.DashboardObjectType.Worksheet] = api_external_contract_1.DashboardObjectType.Worksheet,
	        _g));
	    InternalToExternalEnumMappings.dataType = new api_utils_1.EnumConverter((_h = {},
	        _h[api_internal_contract_1.DataType.Bool] = api_external_contract_1.DataType.Bool,
	        _h[api_internal_contract_1.DataType.Date] = api_external_contract_1.DataType.Date,
	        _h[api_internal_contract_1.DataType.DateTime] = api_external_contract_1.DataType.DateTime,
	        _h[api_internal_contract_1.DataType.Float] = api_external_contract_1.DataType.Float,
	        _h[api_internal_contract_1.DataType.Int] = api_external_contract_1.DataType.Int,
	        _h[api_internal_contract_1.DataType.String] = api_external_contract_1.DataType.String,
	        _h));
	    InternalToExternalEnumMappings.filterUpdateType = new api_utils_1.EnumConverter((_j = {},
	        _j[api_internal_contract_1.FilterUpdateType.Add] = api_external_contract_1.FilterUpdateType.Add,
	        _j[api_internal_contract_1.FilterUpdateType.All] = api_external_contract_1.FilterUpdateType.All,
	        _j[api_internal_contract_1.FilterUpdateType.Remove] = api_external_contract_1.FilterUpdateType.Remove,
	        _j[api_internal_contract_1.FilterUpdateType.Replace] = api_external_contract_1.FilterUpdateType.Replace,
	        _j));
	    InternalToExternalEnumMappings.allowableValues = new api_utils_1.EnumConverter((_k = {},
	        _k[api_internal_contract_1.DomainRestrictionType.All] = api_external_contract_1.ParameterValueType.All,
	        _k[api_internal_contract_1.DomainRestrictionType.List] = api_external_contract_1.ParameterValueType.List,
	        _k[api_internal_contract_1.DomainRestrictionType.Range] = api_external_contract_1.ParameterValueType.Range,
	        _k));
	    InternalToExternalEnumMappings.dateStepPeriod = new api_utils_1.EnumConverter((_l = {},
	        _l[api_internal_contract_1.DateStepPeriod.Years] = api_external_contract_1.PeriodType.Years,
	        _l[api_internal_contract_1.DateStepPeriod.Quarters] = api_external_contract_1.PeriodType.Quarters,
	        _l[api_internal_contract_1.DateStepPeriod.Months] = api_external_contract_1.PeriodType.Months,
	        _l[api_internal_contract_1.DateStepPeriod.Weeks] = api_external_contract_1.PeriodType.Weeks,
	        _l[api_internal_contract_1.DateStepPeriod.Days] = api_external_contract_1.PeriodType.Days,
	        _l[api_internal_contract_1.DateStepPeriod.Hours] = api_external_contract_1.PeriodType.Hours,
	        _l[api_internal_contract_1.DateStepPeriod.Minutes] = api_external_contract_1.PeriodType.Minutes,
	        _l[api_internal_contract_1.DateStepPeriod.Seconds] = api_external_contract_1.PeriodType.Seconds,
	        _l));
	    InternalToExternalEnumMappings.dateRangeType = new api_utils_1.EnumConverter((_m = {},
	        _m[api_internal_contract_1.DateRangeType.Current] = api_external_contract_1.DateRangeType.Current,
	        _m[api_internal_contract_1.DateRangeType.Last] = api_external_contract_1.DateRangeType.Last,
	        _m[api_internal_contract_1.DateRangeType.LastN] = api_external_contract_1.DateRangeType.LastN,
	        _m[api_internal_contract_1.DateRangeType.Next] = api_external_contract_1.DateRangeType.Next,
	        _m[api_internal_contract_1.DateRangeType.NextN] = api_external_contract_1.DateRangeType.NextN,
	        _m[api_internal_contract_1.DateRangeType.ToDate] = api_external_contract_1.DateRangeType.ToDate,
	        _m));
	    InternalToExternalEnumMappings.filterType = new api_utils_1.EnumConverter((_o = {},
	        _o[api_internal_contract_1.FilterType.Categorical] = api_external_contract_1.FilterType.Categorical,
	        _o[api_internal_contract_1.FilterType.Range] = api_external_contract_1.FilterType.Range,
	        _o[api_internal_contract_1.FilterType.RelativeDate] = api_external_contract_1.FilterType.RelativeDate,
	        _o[api_internal_contract_1.FilterType.Hierarchical] = api_external_contract_1.FilterType.Hierarchical,
	        _o));
	    return InternalToExternalEnumMappings;
	}());
	exports.InternalToExternalEnumMappings = InternalToExternalEnumMappings;
	var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
	/* tslint:enable:typedef */


/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Point = (function () {
	    function Point(_x, _y) {
	        this._x = _x;
	        this._y = _y;
	    }
	    Object.defineProperty(Point.prototype, "x", {
	        get: function () {
	            return this._x;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Point.prototype, "y", {
	        get: function () {
	            return this._y;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Point;
	}());
	exports.Point = Point;


/***/ },
/* 25 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Size = (function () {
	    function Size(_height, _width) {
	        this._height = _height;
	        this._width = _width;
	    }
	    Object.defineProperty(Size.prototype, "height", {
	        get: function () {
	            return this._height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Size.prototype, "width", {
	        get: function () {
	            return this._width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Size;
	}());
	exports.Size = Size;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(13);
	var Sheet_1 = __webpack_require__(11);
	var Worksheet = (function (_super) {
	    __extends(Worksheet, _super);
	    function Worksheet(_worksheetImpl) {
	        var _this = _super.call(this, _worksheetImpl) || this;
	        _this._worksheetImpl = _worksheetImpl;
	        // Call to initialize events and then call down to the event listener manager to handle things
	        _this._worksheetImpl.initializeEvents(_this).forEach(function (e) { return _this.addNewEventType(e); });
	        return _this;
	    }
	    Object.defineProperty(Worksheet.prototype, "parentDashboard", {
	        get: function () {
	            return this._worksheetImpl.parentDashboard;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Worksheet.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
	        return this._worksheetImpl.applyFilterAsync(fieldName, values, updateType, options);
	    };
	    Worksheet.prototype.applyRangeFilterAsync = function (fieldName, filterOptions) {
	        return this._worksheetImpl.applyRangeFilterAsync(fieldName, filterOptions);
	    };
	    Worksheet.prototype.clearFilterAsync = function (fieldName) {
	        return this._worksheetImpl.clearFilterAsync(fieldName);
	    };
	    Worksheet.prototype.getAnalyticObjectsAsync = function () {
	        throw api_utils_1.TableauException.apiNotImplemented(['getAnalyticObjectsAsync']);
	    };
	    Worksheet.prototype.getDataSourcesAsync = function () {
	        return this._worksheetImpl.getDataSourcesAsync();
	    };
	    Worksheet.prototype.getEncodingsAsync = function () {
	        throw api_utils_1.TableauException.apiNotImplemented(['getEncodingsAsync']);
	    };
	    Worksheet.prototype.getFiltersAsync = function () {
	        return this._worksheetImpl.getFiltersAsync();
	    };
	    Worksheet.prototype.getSelectedMarksAsync = function () {
	        return this._worksheetImpl.getSelectedMarksAsync();
	    };
	    Worksheet.prototype.getHighlightedMarksAsync = function () {
	        return this._worksheetImpl.getHighlightedMarksAsync();
	    };
	    Worksheet.prototype.getSummaryDataAsync = function (options) {
	        return this._worksheetImpl.getSummaryDataAsync(options);
	    };
	    Worksheet.prototype.getUnderlyingDataAsync = function (options) {
	        return this._worksheetImpl.getUnderlyingDataAsync(options);
	    };
	    Worksheet.prototype.clearSelectedMarksAsync = function () {
	        return this._worksheetImpl.clearSelectedMarksAsync();
	    };
	    Worksheet.prototype.selectMarksByIDAsync = function (marksInfo, updateType) {
	        return this._worksheetImpl.selectMarksByIdAsync(marksInfo, updateType);
	    };
	    Worksheet.prototype.selectMarksByValueAsync = function (selections, selectionUpdateType) {
	        return this._worksheetImpl.selectMarksByValueAsync(selections, selectionUpdateType);
	    };
	    Worksheet.prototype.selectMarksByIdAsync = function (selections, selectionUpdateType) {
	        return this._worksheetImpl.selectMarksByIdAsync(selections, selectionUpdateType);
	    };
	    return Worksheet;
	}(Sheet_1.Sheet));
	exports.Worksheet = Worksheet;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ServiceRegistry_1 = __webpack_require__(28);
	var SheetImpl = (function () {
	    function SheetImpl(_sheetInfoImpl) {
	        this._sheetInfoImpl = _sheetInfoImpl;
	    }
	    Object.defineProperty(SheetImpl.prototype, "name", {
	        get: function () {
	            return this._sheetInfoImpl.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SheetImpl.prototype, "sheetType", {
	        get: function () {
	            return this._sheetInfoImpl.sheetType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SheetImpl.prototype, "sheetPath", {
	        get: function () {
	            return this._sheetInfoImpl.sheetPath;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SheetImpl.prototype, "size", {
	        get: function () {
	            return this._sheetInfoImpl.sheetSize;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SheetImpl.prototype.findParameterAsync = function (parameterName, sheet) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("parameters-service" /* Parameters */);
	        return service.findParameterByNameAsync(parameterName, sheet);
	    };
	    SheetImpl.prototype.getParametersAsync = function (sheet) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("parameters-service" /* Parameters */);
	        return service.getParametersForSheetAsync(this.sheetPath, sheet);
	    };
	    return SheetImpl;
	}());
	exports.SheetImpl = SheetImpl;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(13);
	var ServiceRegistryImpl = (function () {
	    function ServiceRegistryImpl() {
	        this._services = {};
	    }
	    ServiceRegistryImpl.prototype.registerService = function (service) {
	        this._services[service.serviceName] = service;
	    };
	    ServiceRegistryImpl.prototype.getService = function (serviceName) {
	        if (!this._services.hasOwnProperty(serviceName)) {
	            throw api_utils_1.TableauException.error(ServiceRegistryImpl.SERVICE_NOT_REGISTERED, [serviceName]);
	        }
	        return this._services[serviceName];
	    };
	    ServiceRegistryImpl.SERVICE_NOT_REGISTERED = 'No Service %1 is registered';
	    return ServiceRegistryImpl;
	}());
	/**
	 * static class used for getting access to the single instance
	 * of the ApiServiceRegistry
	 */
	var ApiServiceRegistry = (function () {
	    // Private to avoid anyone constructing this
	    function ApiServiceRegistry() {
	    }
	    Object.defineProperty(ApiServiceRegistry, "instance", {
	        /**
	         * Gets the singleton instance of the ServiceRegistry
	         */
	        get: function () {
	            if (!window.__tableauApiServiceRegistry) {
	                ApiServiceRegistry.setInstance(new ServiceRegistryImpl());
	            }
	            if (!window.__tableauApiServiceRegistry) {
	                throw api_utils_1.TableauException.error(ApiServiceRegistry.SERVICE_REGISTRY_FAILED);
	            }
	            return window.__tableauApiServiceRegistry;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Helper method to override the registry instance. Can be used by unit tests
	     *
	     * @param {ServiceRegistry} serviceRegistry The new registry
	     */
	    ApiServiceRegistry.setInstance = function (serviceRegistry) {
	        window.__tableauApiServiceRegistry = serviceRegistry;
	    };
	    ApiServiceRegistry.SERVICE_REGISTRY_FAILED = 'Assigning service registry failed';
	    return ApiServiceRegistry;
	}());
	exports.ApiServiceRegistry = ApiServiceRegistry;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_external_contract_1 = __webpack_require__(19);
	var SheetInfoImpl = (function () {
	    function SheetInfoImpl(_name, _sheetType, _sheetSize) {
	        this._name = _name;
	        this._sheetType = _sheetType;
	        this._sheetSize = _sheetSize;
	    }
	    Object.defineProperty(SheetInfoImpl.prototype, "name", {
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SheetInfoImpl.prototype, "sheetSize", {
	        get: function () {
	            return this._sheetSize;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SheetInfoImpl.prototype, "sheetType", {
	        get: function () {
	            return this._sheetType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SheetInfoImpl.prototype, "sheetPath", {
	        get: function () {
	            return {
	                sheetName: this.name,
	                isDashboard: this.sheetType === api_external_contract_1.SheetType.Dashboard
	                // TODO - Stories
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SheetInfoImpl;
	}());
	exports.SheetInfoImpl = SheetInfoImpl;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var DataSource_1 = __webpack_require__(31);
	var DataSourceImpl_1 = __webpack_require__(32);
	var SheetImpl_1 = __webpack_require__(27);
	var SingleEventManagerImpl_1 = __webpack_require__(37);
	var FilterChangedEvent_1 = __webpack_require__(38);
	var MarksSelectedEvent_1 = __webpack_require__(42);
	var GetDataService_1 = __webpack_require__(43);
	var ServiceRegistry_1 = __webpack_require__(28);
	var visualIdsAreEqual = function (a, b) {
	    return a && b &&
	        a.worksheet === b.worksheet &&
	        a.dashboard === b.dashboard &&
	        a.storyboard === b.storyboard &&
	        a.storyPointID === b.storyPointID &&
	        a.flipboardZoneID === b.flipboardZoneID;
	};
	var WorksheetImpl = (function (_super) {
	    __extends(WorksheetImpl, _super);
	    function WorksheetImpl(sheetInfoImpl, _visualId, _parentDashboard) {
	        var _this = _super.call(this, sheetInfoImpl) || this;
	        _this._visualId = _visualId;
	        _this._parentDashboard = _parentDashboard;
	        return _this;
	    }
	    Object.defineProperty(WorksheetImpl.prototype, "parentDashboard", {
	        get: function () {
	            return this._parentDashboard;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Helper method which goes through and registers each event type this impl knows about
	     * with the NotificationService. It returns an array of SingleEventManager objects which
	     * can then be passed to an EventListenerManager to handle user registration / unregistration.
	     *
	     * @param {Worksheet} worksheet The worksheet object which will be included with the event notifications
	     * @returns {Array<SingleEventManager>} Collection of event managers to pass to an EventListenerManager
	     */
	    WorksheetImpl.prototype.initializeEvents = function (worksheet) {
	        var _this = this;
	        var results = new Array();
	        var notificationService;
	        try {
	            notificationService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("notification-service" /* Notification */);
	        }
	        catch (e) {
	            // If we don't have this service registered, just return
	            return results;
	        }
	        // Initialize all of the event managers we'll need (one for each event type)
	        var marksEvent = new SingleEventManagerImpl_1.SingleEventManagerImpl(Contract.TableauEventType.MarkSelectionChanged);
	        notificationService.registerHandler(api_internal_contract_1.NotificationId.SelectedMarksChanged, function (model) {
	            var visualId = model;
	            return visualIdsAreEqual(visualId, _this.visualId);
	        }, function (viz) {
	            marksEvent.triggerEvent(function () { return new MarksSelectedEvent_1.MarksSelectedEvent(worksheet); });
	        });
	        var filterEvent = new SingleEventManagerImpl_1.SingleEventManagerImpl(Contract.TableauEventType.FilterChanged);
	        notificationService.registerHandler(api_internal_contract_1.NotificationId.FilterChanged, function (model) {
	            var filterEventResponse = model;
	            return _this.visualId.worksheet === filterEventResponse.visualId.worksheet;
	        }, function (event) {
	            filterEvent.triggerEvent(function () { return new FilterChangedEvent_1.FilterChangedEvent(worksheet, event.fieldName); });
	        });
	        results.push(marksEvent);
	        results.push(filterEvent);
	        // TODO - other event types
	        return results;
	    };
	    Object.defineProperty(WorksheetImpl.prototype, "visualId", {
	        get: function () {
	            return this._visualId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WorksheetImpl.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("filter-service" /* Filter */);
	        return service.applyFilterAsync(this.visualId, fieldName, values, updateType, options);
	    };
	    WorksheetImpl.prototype.applyRangeFilterAsync = function (fieldName, filterOptions) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("filter-service" /* Filter */);
	        return service.applyRangeFilterAsync(this.visualId, fieldName, filterOptions);
	    };
	    WorksheetImpl.prototype.clearFilterAsync = function (fieldName) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("filter-service" /* Filter */);
	        return service.clearFilterAsync(this.visualId, fieldName);
	    };
	    WorksheetImpl.prototype.getDataSourcesAsync = function () {
	        var _this = this;
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("data-source-service" /* DataSourceService */);
	        return service.getDataSourcesAsync(this.visualId).then(function (result) {
	            var dataSchema = result;
	            var worksheetDataSourceInfo = dataSchema.worksheetDataSchemaMap[_this.name];
	            var dataSources = [];
	            // First, add the primary datasource.  By convention, it comes first in the returned array.
	            var primaryId = worksheetDataSourceInfo.primaryDataSource;
	            dataSources.push(_this.createDataSourceFromInfo(dataSchema.dataSources[primaryId]));
	            // Then, loop through any secondary data sources and add them.
	            for (var _i = 0, _a = worksheetDataSourceInfo.referencedDataSourceList; _i < _a.length; _i++) {
	                var secondaryId = _a[_i];
	                if (secondaryId !== primaryId) {
	                    dataSources.push(_this.createDataSourceFromInfo(dataSchema.dataSources[secondaryId]));
	                }
	            }
	            return dataSources;
	        });
	    };
	    WorksheetImpl.prototype.getFiltersAsync = function () {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("filter-service" /* Filter */);
	        return service.getFiltersAsync(this.visualId);
	    };
	    WorksheetImpl.prototype.getSelectedMarksAsync = function () {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("get-data-service" /* GetData */);
	        return service.getSelectedMarksAsync(this.visualId);
	    };
	    WorksheetImpl.prototype.getHighlightedMarksAsync = function () {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("get-data-service" /* GetData */);
	        return service.getHighlightedMarksAsync(this.visualId);
	    };
	    WorksheetImpl.prototype.getSummaryDataAsync = function (options) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("get-data-service" /* GetData */);
	        options = options || {};
	        return service.getUnderlyingDataAsync(this.visualId, GetDataService_1.GetDataType.Summary, !!options.ignoreAliases, !!options.ignoreSelection, true, 0);
	    };
	    WorksheetImpl.prototype.getUnderlyingDataAsync = function (options) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("get-data-service" /* GetData */);
	        options = options || {};
	        return service.getUnderlyingDataAsync(this.visualId, GetDataService_1.GetDataType.Underlying, !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.maxRows || 0);
	    };
	    WorksheetImpl.prototype.clearSelectedMarksAsync = function () {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("selection-service" /* Selection */);
	        return service.clearSelectedMarksAsync(this.visualId);
	    };
	    WorksheetImpl.prototype.selectMarksByValueAsync = function (selections, selectionUpdateType) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("selection-service" /* Selection */);
	        return service.selectMarksByValueAsync(this.visualId, selections, selectionUpdateType);
	    };
	    WorksheetImpl.prototype.selectMarksByIdAsync = function (selections, selectionUpdateType) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("selection-service" /* Selection */);
	        return service.selectMarksByIdAsync(this.visualId, selections, selectionUpdateType);
	    };
	    WorksheetImpl.prototype.createDataSourceFromInfo = function (dataSourceInfo) {
	        var dataSourceImpl = new DataSourceImpl_1.DataSourceImpl(dataSourceInfo);
	        var dataSource = new DataSource_1.DataSource(dataSourceImpl);
	        dataSourceImpl.initializeWithPublicInterfaces(dataSource);
	        return dataSource;
	    };
	    return WorksheetImpl;
	}(SheetImpl_1.SheetImpl));
	exports.WorksheetImpl = WorksheetImpl;


/***/ },
/* 31 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DataSource = (function () {
	    function DataSource(_dataSourceImpl) {
	        this._dataSourceImpl = _dataSourceImpl;
	    }
	    Object.defineProperty(DataSource.prototype, "name", {
	        get: function () {
	            return this._dataSourceImpl.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "id", {
	        get: function () {
	            return this._dataSourceImpl.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "fields", {
	        get: function () {
	            return this._dataSourceImpl.fields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "extractUpdateTime", {
	        get: function () {
	            return this._dataSourceImpl.extractUpdateTime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "isExtract", {
	        get: function () {
	            return this._dataSourceImpl.isExtract;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataSource.prototype.refreshAsync = function () {
	        return this._dataSourceImpl.refreshAsync();
	    };
	    DataSource.prototype.getActiveTablesAsync = function () {
	        return this._dataSourceImpl.getActiveTablesAsync();
	    };
	    DataSource.prototype.getConnectionSummariesAsync = function () {
	        return this._dataSourceImpl.getConnectionSummariesAsync();
	    };
	    DataSource.prototype.getUnderlyingDataAsync = function (options) {
	        return this._dataSourceImpl.getUnderlyingDataAsync(options);
	    };
	    return DataSource;
	}());
	exports.DataSource = DataSource;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FieldImpl_1 = __webpack_require__(33);
	var ConnectionSummary_1 = __webpack_require__(34);
	var Field_1 = __webpack_require__(35);
	var TableSummary_1 = __webpack_require__(36);
	var ServiceRegistry_1 = __webpack_require__(28);
	var DataSourceImpl = (function () {
	    function DataSourceImpl(_dataSourceInfo) {
	        var _this = this;
	        this._dataSourceInfo = _dataSourceInfo;
	        this._fields = _dataSourceInfo.fields.map(function (fieldModel) {
	            var fieldImpl = new FieldImpl_1.FieldImpl(fieldModel, _this);
	            return new Field_1.Field(fieldImpl);
	        });
	    }
	    Object.defineProperty(DataSourceImpl.prototype, "name", {
	        get: function () {
	            return this._dataSourceInfo.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSourceImpl.prototype, "id", {
	        get: function () {
	            return this._dataSourceInfo.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSourceImpl.prototype, "extractUpdateTime", {
	        get: function () {
	            return this._dataSourceInfo.extractUpdateTime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSourceImpl.prototype, "fields", {
	        get: function () {
	            return this._fields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSourceImpl.prototype, "isExtract", {
	        get: function () {
	            return this._dataSourceInfo.isExtract;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataSourceImpl.prototype.refreshAsync = function () {
	        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("data-source-service" /* DataSourceService */);
	        return dataSourceService.refreshAsync(this._dataSourceInfo.id);
	    };
	    DataSourceImpl.prototype.getConnectionSummariesAsync = function () {
	        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("data-source-service" /* DataSourceService */);
	        return dataSourceService.getConnectionSummariesAsync(this._dataSourceInfo.id).then(function (summaries) {
	            return summaries.map(function (summary) { return new ConnectionSummary_1.ConnectionSummary(summary); });
	        });
	    };
	    DataSourceImpl.prototype.getActiveTablesAsync = function () {
	        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("data-source-service" /* DataSourceService */);
	        return dataSourceService.getActiveTablesAsync(this._dataSourceInfo.id).then(function (tableInfos) {
	            return tableInfos.map(function (tableInfo) { return new TableSummary_1.TableSummary(tableInfo); });
	        });
	    };
	    DataSourceImpl.prototype.getUnderlyingDataAsync = function (options) {
	        var defaultOptions = {
	            ignoreAliases: false,
	            maxRows: 10000,
	            columnsToInclude: [],
	        };
	        options = options || {};
	        var getDataService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("get-data-service" /* GetData */);
	        return getDataService.getDataSourceDataAsync(this.id, !!options.ignoreAliases, options.maxRows || defaultOptions.maxRows, options.columnsToInclude || defaultOptions.columnsToInclude);
	    };
	    DataSourceImpl.prototype.initializeWithPublicInterfaces = function (dataSource) {
	        this._fields = this._dataSourceInfo.fields.map(function (fieldModel) {
	            var fieldImpl = new FieldImpl_1.FieldImpl(fieldModel, dataSource);
	            return new Field_1.Field(fieldImpl);
	        });
	    };
	    return DataSourceImpl;
	}());
	exports.DataSourceImpl = DataSourceImpl;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var InternalToExternalEnumMappings_1 = __webpack_require__(23);
	var FieldImpl = (function () {
	    function FieldImpl(_fieldInfo, _parentDataSource) {
	        this._fieldInfo = _fieldInfo;
	        this._parentDataSource = _parentDataSource;
	    }
	    Object.defineProperty(FieldImpl.prototype, "name", {
	        get: function () {
	            return this._fieldInfo.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "id", {
	        get: function () {
	            return this._fieldInfo.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "description", {
	        get: function () {
	            return this._fieldInfo.description;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "aggregation", {
	        get: function () {
	            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.fieldAggregationType.convert(this._fieldInfo.aggregation);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "dataSource", {
	        get: function () {
	            return this._parentDataSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "role", {
	        get: function () {
	            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.fieldRoleType.convert(this._fieldInfo.role);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "isHidden", {
	        get: function () {
	            return this._fieldInfo.isHidden;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "isGenerated", {
	        get: function () {
	            return this._fieldInfo.isGenerated;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "isCalculatedField", {
	        get: function () {
	            return this._fieldInfo.isCalculatedField;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FieldImpl.prototype, "isCombinedField", {
	        get: function () {
	            return this._fieldInfo.isCombinedField;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FieldImpl.prototype.getCalculatedFieldAsync = function () {
	        throw new Error('Field getCalculatedFieldAsync method not yet implemented.');
	    };
	    return FieldImpl;
	}());
	exports.FieldImpl = FieldImpl;


/***/ },
/* 34 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of a connection summary.
	 * This does not follow the Impl pattern as it is just a property bag.
	 */
	var ConnectionSummary = (function () {
	    function ConnectionSummary(_connectionInfo) {
	        this._connectionInfo = _connectionInfo;
	    }
	    Object.defineProperty(ConnectionSummary.prototype, "name", {
	        get: function () {
	            return this._connectionInfo.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectionSummary.prototype, "id", {
	        get: function () {
	            return this._connectionInfo.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectionSummary.prototype, "serverURI", {
	        get: function () {
	            return this._connectionInfo.serverURI;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectionSummary.prototype, "type", {
	        get: function () {
	            return this._connectionInfo.type;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ConnectionSummary;
	}());
	exports.ConnectionSummary = ConnectionSummary;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(13);
	var Field = (function () {
	    function Field(_fieldImpl) {
	        this._fieldImpl = _fieldImpl;
	    }
	    Object.defineProperty(Field.prototype, "name", {
	        get: function () {
	            return this._fieldImpl.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "id", {
	        get: function () {
	            return this._fieldImpl.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "description", {
	        get: function () {
	            return this._fieldImpl.description;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "aggregation", {
	        get: function () {
	            return this._fieldImpl.aggregation;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "dataSource", {
	        get: function () {
	            return this._fieldImpl.dataSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "role", {
	        get: function () {
	            return this._fieldImpl.role;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "isHidden", {
	        get: function () {
	            return this._fieldImpl.isHidden;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "isGenerated", {
	        get: function () {
	            return this._fieldImpl.isGenerated;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "isCalculatedField", {
	        get: function () {
	            return this._fieldImpl.isCalculatedField;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "columnType", {
	        get: function () {
	            throw api_utils_1.TableauException.apiNotImplemented(['Field.columnType']);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Field.prototype, "isCombinedField", {
	        get: function () {
	            return this._fieldImpl.isCombinedField;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Field.prototype.getCalculatedFieldAsync = function () {
	        return this._fieldImpl.getCalculatedFieldAsync();
	    };
	    return Field;
	}());
	exports.Field = Field;


/***/ },
/* 36 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of a table summary.
	 * This does not follow the Impl pattern as it is just a property bag.
	 */
	var TableSummary = (function () {
	    function TableSummary(_tableInfo) {
	        this._tableInfo = _tableInfo;
	    }
	    Object.defineProperty(TableSummary.prototype, "name", {
	        get: function () {
	            return this._tableInfo.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableSummary.prototype, "id", {
	        get: function () {
	            return this._tableInfo.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableSummary.prototype, "connectionId", {
	        get: function () {
	            return this._tableInfo.connectionId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableSummary.prototype, "customSQL", {
	        get: function () {
	            return this._tableInfo.customSQL;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TableSummary;
	}());
	exports.TableSummary = TableSummary;


/***/ },
/* 37 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This class implements the SingleEventManager interface for a single type of Tableau event
	 *
	 * @template TEventType The Tableau event type this class specializes
	 */
	var SingleEventManagerImpl = (function () {
	    function SingleEventManagerImpl(eventType) {
	        this._eventType = eventType;
	        this._handlers = [];
	    }
	    Object.defineProperty(SingleEventManagerImpl.prototype, "eventType", {
	        get: function () {
	            return this._eventType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SingleEventManagerImpl.prototype.addEventListener = function (handler) {
	        var _this = this;
	        this._handlers.push(handler);
	        return function () { return _this.removeEventListener(handler); };
	    };
	    SingleEventManagerImpl.prototype.removeEventListener = function (handler) {
	        var beforeCount = this._handlers.length;
	        this._handlers = this._handlers.filter(function (h) { return h !== handler; });
	        return beforeCount > this._handlers.length;
	    };
	    SingleEventManagerImpl.prototype.triggerEvent = function (eventGenerator) {
	        for (var _i = 0, _a = this._handlers; _i < _a.length; _i++) {
	            var handler = _a[_i];
	            try {
	                var eventModel = eventGenerator();
	                handler(eventModel);
	            }
	            catch (e) {
	                // Since this handler could be outside our control, just catch anything it throws and continue on
	                continue;
	            }
	        }
	    };
	    return SingleEventManagerImpl;
	}());
	exports.SingleEventManagerImpl = SingleEventManagerImpl;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_utils_1 = __webpack_require__(13);
	var TableauWorksheetEvent_1 = __webpack_require__(39);
	var FilterChangedEvent = (function (_super) {
	    __extends(FilterChangedEvent, _super);
	    function FilterChangedEvent(worksheet, _fieldName) {
	        var _this = _super.call(this, Contract.TableauEventType.FilterChanged, worksheet) || this;
	        _this._fieldName = _fieldName;
	        return _this;
	    }
	    Object.defineProperty(FilterChangedEvent.prototype, "fieldName", {
	        get: function () {
	            return this._fieldName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FilterChangedEvent.prototype.getFilterAsync = function () {
	        var _this = this;
	        return this._worksheet.getFiltersAsync().then(function (filters) {
	            // TODO: Filtering of the filters should eventually be done platform side.
	            var eventedFilter = filters.find(function (filter) { return (filter.fieldName === _this._fieldName); });
	            if (!eventedFilter) {
	                // We shouldn't hit this unless the filter was removed from the worksheet
	                // after the event was raised.
	                throw api_utils_1.TableauException.internalError(['Filter no longer found in worksheet.']);
	            }
	            return eventedFilter;
	        });
	    };
	    return FilterChangedEvent;
	}(TableauWorksheetEvent_1.TableauWorksheetEvent));
	exports.FilterChangedEvent = FilterChangedEvent;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var TableauSheetEvent_1 = __webpack_require__(40);
	var TableauWorksheetEvent = (function (_super) {
	    __extends(TableauWorksheetEvent, _super);
	    function TableauWorksheetEvent(type, _worksheet) {
	        var _this = _super.call(this, type, _worksheet) || this;
	        _this._worksheet = _worksheet;
	        return _this;
	    }
	    Object.defineProperty(TableauWorksheetEvent.prototype, "worksheet", {
	        get: function () {
	            return this._worksheet;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TableauWorksheetEvent;
	}(TableauSheetEvent_1.TableauSheetEvent));
	exports.TableauWorksheetEvent = TableauWorksheetEvent;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var TableauEvent_1 = __webpack_require__(41);
	var TableauSheetEvent = (function (_super) {
	    __extends(TableauSheetEvent, _super);
	    function TableauSheetEvent(type, sheet) {
	        var _this = _super.call(this, type) || this;
	        _this._sheet = sheet;
	        return _this;
	    }
	    Object.defineProperty(TableauSheetEvent.prototype, "sheet", {
	        get: function () {
	            return this._sheet;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TableauSheetEvent;
	}(TableauEvent_1.TableauEvent));
	exports.TableauSheetEvent = TableauSheetEvent;


/***/ },
/* 41 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var TableauEvent = (function () {
	    function TableauEvent(type) {
	        this._type = type;
	    }
	    Object.defineProperty(TableauEvent.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TableauEvent;
	}());
	exports.TableauEvent = TableauEvent;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var TableauWorksheetEvent_1 = __webpack_require__(39);
	var MarksSelectedEvent = (function (_super) {
	    __extends(MarksSelectedEvent, _super);
	    function MarksSelectedEvent(worksheet) {
	        return _super.call(this, Contract.TableauEventType.MarkSelectionChanged, worksheet) || this;
	    }
	    MarksSelectedEvent.prototype.getMarksAsync = function () {
	        return this.worksheet.getSelectedMarksAsync();
	    };
	    return MarksSelectedEvent;
	}(TableauWorksheetEvent_1.TableauWorksheetEvent));
	exports.MarksSelectedEvent = MarksSelectedEvent;


/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Defines which type of getData call to make.
	 */
	var GetDataType;
	(function (GetDataType) {
	    GetDataType["Summary"] = "summary";
	    GetDataType["Underlying"] = "underlying";
	})(GetDataType = exports.GetDataType || (exports.GetDataType = {}));


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DataSourceServiceImpl_1 = __webpack_require__(45);
	var FilterServiceImpl_1 = __webpack_require__(46);
	var GetDataServiceImpl_1 = __webpack_require__(50);
	var NotificationServiceImpl_1 = __webpack_require__(51);
	var ParametersServiceImpl_1 = __webpack_require__(52);
	var SelectionServiceImpl_1 = __webpack_require__(56);
	var ServiceRegistry_1 = __webpack_require__(28);
	function registerAllSharedServices(dispatcher) {
	    ServiceRegistry_1.ApiServiceRegistry.instance.registerService(new DataSourceServiceImpl_1.DataSourceServiceImpl(dispatcher));
	    ServiceRegistry_1.ApiServiceRegistry.instance.registerService(new GetDataServiceImpl_1.GetDataServiceImpl(dispatcher));
	    ServiceRegistry_1.ApiServiceRegistry.instance.registerService(new FilterServiceImpl_1.FilterServiceImpl(dispatcher));
	    ServiceRegistry_1.ApiServiceRegistry.instance.registerService(new NotificationServiceImpl_1.NotificationServiceImpl(dispatcher));
	    ServiceRegistry_1.ApiServiceRegistry.instance.registerService(new ParametersServiceImpl_1.ParametersServiceImpl(dispatcher));
	    ServiceRegistry_1.ApiServiceRegistry.instance.registerService(new SelectionServiceImpl_1.SelectionServiceImpl(dispatcher));
	}
	exports.registerAllSharedServices = registerAllSharedServices;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_external_contract_1 = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	var DataSourceServiceImpl = (function () {
	    function DataSourceServiceImpl(_dispatcher) {
	        this._dispatcher = _dispatcher;
	    }
	    Object.defineProperty(DataSourceServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "data-source-service" /* DataSourceService */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataSourceServiceImpl.prototype.refreshAsync = function (dataSourceId) {
	        var parameters = (_a = {}, _a[api_internal_contract_1.ParameterId.DataSourceId] = dataSourceId, _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.RefreshDataSource, parameters).then(function (response) {
	            return;
	        });
	        var _a;
	    };
	    DataSourceServiceImpl.prototype.getActiveTablesAsync = function (dataSourceId) {
	        var joinParameters = (_a = {}, _a[api_internal_contract_1.ParameterId.DataSourceId] = dataSourceId, _a);
	        // Get the description of the tables used by this connection
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.GetJoinDescription, joinParameters).then(function (joinResponse) {
	            var joinDescription = joinResponse.result;
	            // getActiveTables is unsupported for cubes and GA. We do not have a connection type property
	            // available from the platform (intentionally, to reduce code churn as new connections are added).
	            // Instead,just check if any tables are returned. This array will be empty for any non-table based datasource.
	            if (joinDescription.tables.length === 0) {
	                throw api_utils_1.TableauException.error('getActiveTablesAsync is unsupported for DataSource.', [api_external_contract_1.ErrorCodes.UnsupportedMethodForDataSourceType]);
	            }
	            return joinDescription.tables;
	        });
	        var _a;
	    };
	    DataSourceServiceImpl.prototype.getDataSourcesAsync = function (visualId) {
	        var parameters = (_a = {}, _a[api_internal_contract_1.ParameterId.VisualId] = visualId, _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.GetDataSources, parameters).then(function (response) {
	            var dataSchema = response.result;
	            return dataSchema;
	        });
	        var _a;
	    };
	    DataSourceServiceImpl.prototype.getConnectionSummariesAsync = function (dataSourceId) {
	        var params = (_a = {}, _a[api_internal_contract_1.ParameterId.DataSourceId] = dataSourceId, _a);
	        // Get the description of the tables used by this connection
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.GetConnectionDescriptionSummaries, params).then(function (response) {
	            var descriptionSummaries = response.result;
	            return descriptionSummaries;
	        });
	        var _a;
	    };
	    return DataSourceServiceImpl;
	}());
	exports.DataSourceServiceImpl = DataSourceServiceImpl;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	var ExternalToInternalEnumMappings_1 = __webpack_require__(47);
	var InternalToExternalEnumMappings_1 = __webpack_require__(23);
	var FilterModels_1 = __webpack_require__(48);
	var GetDataModels_1 = __webpack_require__(49);
	var FilterServiceImpl = (function () {
	    function FilterServiceImpl(dispatcher) {
	        this._dispatcher = dispatcher;
	    }
	    Object.defineProperty(FilterServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "filter-service" /* Filter */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FilterServiceImpl.prototype.applyFilterAsync = function (visualId, fieldName, values, updateType, filterOptions) {
	        if (!api_utils_1.Param.isValidEnumValue(updateType, Contract.FilterUpdateType)) {
	            throw api_utils_1.TableauException.invalidParamValue(['FilterUpdateType']);
	        }
	        var verb = api_internal_contract_1.VerbId.ApplyCategoricalFilter;
	        var parameters = {};
	        parameters[api_internal_contract_1.ParameterId.VisualId] = visualId;
	        parameters[api_internal_contract_1.ParameterId.FieldName] = fieldName;
	        parameters[api_internal_contract_1.ParameterId.FilterValues] = values;
	        parameters[api_internal_contract_1.ParameterId.FilterUpdateType] = updateType;
	        parameters[api_internal_contract_1.ParameterId.IsExcludeMode] =
	            (filterOptions === undefined || filterOptions.isExcludeMode === undefined) ? false : filterOptions.isExcludeMode;
	        return this._dispatcher.execute(verb, parameters).then(function (response) {
	            var error = response.result;
	            if (!(error.errorCode === null || error.errorCode === undefined)) {
	                // TODO: come back and implement error handling logic
	                throw api_utils_1.TableauException.error(FilterServiceImpl.FILTER_ERROR, [error.errorCode]);
	            }
	            return fieldName;
	        });
	    };
	    FilterServiceImpl.prototype.applyRangeFilterAsync = function (visualId, fieldName, filterOptions) {
	        if (!filterOptions) {
	            throw api_utils_1.TableauException.missingParameter(['RangeFilterOptions']);
	        }
	        api_utils_1.Param.verifyRangeParamType(filterOptions.min, filterOptions.max);
	        var verb = api_internal_contract_1.VerbId.ApplyRangeFilter;
	        var parameters = {};
	        if (filterOptions.min) {
	            var min = void 0;
	            if (filterOptions.min instanceof Date) {
	                min = api_utils_1.Param.serializeDateForPlatform(filterOptions.min);
	            }
	            else {
	                min = filterOptions.min;
	            }
	            parameters[api_internal_contract_1.ParameterId.FilterRangeMin] = min;
	        }
	        if (filterOptions.max) {
	            var max = void 0;
	            if (filterOptions.max instanceof Date) {
	                max = api_utils_1.Param.serializeDateForPlatform(filterOptions.max);
	            }
	            else {
	                max = filterOptions.max;
	            }
	            parameters[api_internal_contract_1.ParameterId.FilterRangeMax] = max;
	        }
	        if (filterOptions.nullOption) {
	            if (!api_utils_1.Param.isValidEnumValue(filterOptions.nullOption, Contract.FilterNullOption)) {
	                throw api_utils_1.TableauException.invalidParamValue(['NullOption']);
	            }
	            parameters[api_internal_contract_1.ParameterId.FilterRangeNullOption] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.nullOptions.convert(filterOptions.nullOption);
	        }
	        parameters[api_internal_contract_1.ParameterId.FieldName] = fieldName;
	        parameters[api_internal_contract_1.ParameterId.VisualId] = visualId;
	        return this._dispatcher.execute(verb, parameters).then(function (response) {
	            return fieldName;
	        });
	    };
	    FilterServiceImpl.prototype.clearFilterAsync = function (visualId, fieldName) {
	        var verb = api_internal_contract_1.VerbId.ClearFilter;
	        var parameters = {};
	        parameters[api_internal_contract_1.ParameterId.VisualId] = visualId;
	        parameters[api_internal_contract_1.ParameterId.FieldName] = fieldName;
	        return this._dispatcher.execute(verb, parameters).then(function (resposne) {
	            return fieldName;
	        });
	    };
	    FilterServiceImpl.prototype.getFiltersAsync = function (visualId) {
	        var _this = this;
	        var verb = api_internal_contract_1.VerbId.GetFilters;
	        var parameters = {};
	        parameters[api_internal_contract_1.ParameterId.VisualId] = visualId;
	        return this._dispatcher.execute(verb, parameters).then(function (response) {
	            var filters = response.result;
	            return _this.convertDomainFilters(filters);
	        });
	    };
	    FilterServiceImpl.prototype.getCategoricalDomainAsync = function (worksheetName, fieldId, domainType) {
	        var _this = this;
	        if (!api_utils_1.Param.isValidEnumValue(domainType, Contract.FilterDomainType)) {
	            throw new Error('Invalid value for parameter FilterDomainType');
	        }
	        var verb = api_internal_contract_1.VerbId.GetCategoricalDomain;
	        var parameters = {};
	        parameters[api_internal_contract_1.ParameterId.VisualId] = {
	            worksheet: worksheetName
	        };
	        parameters[api_internal_contract_1.ParameterId.FieldId] = fieldId;
	        parameters[api_internal_contract_1.ParameterId.DomainType] = domainType;
	        return this._dispatcher.execute(verb, parameters).then(function (response) {
	            var domain = response.result;
	            return _this.convertCategoricalDomain(domain, domainType);
	        });
	    };
	    FilterServiceImpl.prototype.getRangeDomainAsync = function (worksheetName, fieldId, domainType) {
	        var _this = this;
	        if (!api_utils_1.Param.isValidEnumValue(domainType, Contract.FilterDomainType)) {
	            throw new Error('Invalid value for parameter FilterDomainType');
	        }
	        var verb = api_internal_contract_1.VerbId.GetRangeDomain;
	        var parameters = {};
	        parameters[api_internal_contract_1.ParameterId.VisualId] = {
	            worksheet: worksheetName
	        };
	        parameters[api_internal_contract_1.ParameterId.FieldId] = fieldId;
	        parameters[api_internal_contract_1.ParameterId.DomainType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterDomainType.convert(domainType);
	        return this._dispatcher.execute(verb, parameters).then(function (response) {
	            var domain = response.result;
	            return _this.convertRangeDomain(domain, domainType);
	        });
	    };
	    // Helper Methods
	    FilterServiceImpl.prototype.convertDomainFilters = function (domainFilters) {
	        var _this = this;
	        var filters = [];
	        domainFilters.forEach(function (domainFilter) {
	            switch (domainFilter.filterType) {
	                case api_internal_contract_1.FilterType.Categorical: {
	                    var filter = domainFilter;
	                    if (filter) {
	                        filters.push(_this.convertCategoricalFilter(filter));
	                    }
	                    else {
	                        throw new Error('Invalid Categorical Filter');
	                    }
	                    break;
	                }
	                case api_internal_contract_1.FilterType.Range: {
	                    var filter = domainFilter;
	                    if (filter) {
	                        filters.push(_this.convertRangeFilter(filter));
	                    }
	                    else {
	                        throw new Error('Invalid Range Filter');
	                    }
	                    break;
	                }
	                case api_internal_contract_1.FilterType.RelativeDate: {
	                    var filter = domainFilter;
	                    if (filter) {
	                        filters.push(_this.convertRelativeDateFilter(filter));
	                    }
	                    else {
	                        throw new Error('Invalid Relative Date Filter');
	                    }
	                    break;
	                }
	                default: {
	                    break;
	                }
	            }
	        });
	        return filters;
	    };
	    FilterServiceImpl.prototype.convertCategoricalFilter = function (domainFilter) {
	        var appliedValues = domainFilter.values.map(function (dv) {
	            return new GetDataModels_1.DataValue(dv.value, dv.formattedValue);
	        });
	        return new FilterModels_1.CategoricalFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, Contract.FilterType.Categorical, appliedValues, domainFilter.isExclude);
	    };
	    FilterServiceImpl.prototype.convertRangeFilter = function (domainFilter) {
	        var minValue = new GetDataModels_1.DataValue(domainFilter.min.value, domainFilter.min.formattedValue);
	        var maxValue = new GetDataModels_1.DataValue(domainFilter.max.value, domainFilter.max.formattedValue);
	        return new FilterModels_1.RangeFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, Contract.FilterType.Range, minValue, maxValue, domainFilter.includeNullValues);
	    };
	    FilterServiceImpl.prototype.convertRelativeDateFilter = function (domainFilter) {
	        var anchorDateValue = new GetDataModels_1.DataValue(domainFilter.anchorDate.value, domainFilter.anchorDate.formattedValue);
	        return new FilterModels_1.RelativeDateFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, Contract.FilterType.RelativeDate, anchorDateValue, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateStepPeriod.convert(domainFilter.periodType), InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateRangeType.convert(domainFilter.rangeType), domainFilter.rangeN);
	    };
	    FilterServiceImpl.prototype.convertCategoricalDomain = function (domain, domainType) {
	        var values = domain.values.map(function (domainDv) {
	            return new GetDataModels_1.DataValue(domainDv.value, domainDv.formattedValue);
	        });
	        return new FilterModels_1.CategoricalDomain(values, domainType);
	    };
	    FilterServiceImpl.prototype.convertRangeDomain = function (domain, domainType) {
	        var min = new GetDataModels_1.DataValue(domain.min.value, domain.min.formattedValue);
	        var max = new GetDataModels_1.DataValue(domain.max.value, domain.max.formattedValue);
	        return new FilterModels_1.RangeDomain(min, max, domainType);
	    };
	    FilterServiceImpl.FILTER_ERROR = 'Error Applying Filter: %1';
	    return FilterServiceImpl;
	}());
	exports.FilterServiceImpl = FilterServiceImpl;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_external_contract_1 = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
	/**
	 * Maps enums used by the external-api-contract to the enums used
	 * in the internal-api-contract, which developers code against.
	 */
	var ExternalToInternalEnumMappings = (function () {
	    function ExternalToInternalEnumMappings() {
	    }
	    ExternalToInternalEnumMappings.nullOptions = new api_utils_1.EnumConverter((_a = {},
	        _a[api_external_contract_1.FilterNullOption.AllValues] = api_internal_contract_1.FilterNullOption.AllValues,
	        _a[api_external_contract_1.FilterNullOption.NonNullValues] = api_internal_contract_1.FilterNullOption.NonNullValues,
	        _a[api_external_contract_1.FilterNullOption.NonNullValues] = api_internal_contract_1.FilterNullOption.NullValues,
	        _a));
	    ExternalToInternalEnumMappings.filterDomainType = new api_utils_1.EnumConverter((_b = {},
	        _b[api_external_contract_1.FilterDomainType.Relevant] = api_internal_contract_1.FilterDomainType.Relevant,
	        _b[api_external_contract_1.FilterDomainType.Database] = api_internal_contract_1.FilterDomainType.Database,
	        _b));
	    return ExternalToInternalEnumMappings;
	}());
	exports.ExternalToInternalEnumMappings = ExternalToInternalEnumMappings;
	var _a, _b;
	/* tslint:enable:typedef */


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var ServiceRegistry_1 = __webpack_require__(28);
	var Filter = (function () {
	    function Filter(_worksheetName, _fieldName, _filterType, _fieldId) {
	        this._worksheetName = _worksheetName;
	        this._fieldName = _fieldName;
	        this._filterType = _filterType;
	        this._fieldId = _fieldId;
	    }
	    Object.defineProperty(Filter.prototype, "worksheetName", {
	        get: function () {
	            return this._worksheetName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Filter.prototype, "fieldName", {
	        get: function () {
	            return this._fieldName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Filter.prototype, "fieldId", {
	        get: function () {
	            return this._fieldId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Filter.prototype, "filterType", {
	        get: function () {
	            return this._filterType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Filter.prototype.getFieldAsync = function () {
	        throw new Error('Method not implemented');
	    };
	    return Filter;
	}());
	exports.Filter = Filter;
	var CategoricalFilter = (function (_super) {
	    __extends(CategoricalFilter, _super);
	    function CategoricalFilter(worksheetName, fieldName, fieldId, filterType, _appliedValues, _isExcludeMode) {
	        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId) || this;
	        _this._appliedValues = _appliedValues;
	        _this._isExcludeMode = _isExcludeMode;
	        return _this;
	    }
	    Object.defineProperty(CategoricalFilter.prototype, "appliedValues", {
	        get: function () {
	            return this._appliedValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CategoricalFilter.prototype, "isExcludeMode", {
	        get: function () {
	            return this._isExcludeMode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CategoricalFilter.prototype.getDomainAsync = function (domainType) {
	        if (!domainType) {
	            domainType = Contract.FilterDomainType.Relevant;
	        }
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("filter-service" /* Filter */);
	        return service.getCategoricalDomainAsync(this._worksheetName, this._fieldId, domainType);
	    };
	    return CategoricalFilter;
	}(Filter));
	exports.CategoricalFilter = CategoricalFilter;
	var RangeFilter = (function (_super) {
	    __extends(RangeFilter, _super);
	    function RangeFilter(worksheetName, fieldName, fieldId, filterType, _min, _max, _includeNullValues) {
	        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId) || this;
	        _this._min = _min;
	        _this._max = _max;
	        _this._includeNullValues = _includeNullValues;
	        return _this;
	    }
	    Object.defineProperty(RangeFilter.prototype, "minValue", {
	        get: function () {
	            return this._min;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeFilter.prototype, "maxValue", {
	        get: function () {
	            return this._max;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeFilter.prototype, "includeNullValues", {
	        get: function () {
	            return this._includeNullValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RangeFilter.prototype.getDomainAsync = function (domainType) {
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("filter-service" /* Filter */);
	        if (!domainType) {
	            domainType = Contract.FilterDomainType.Relevant;
	        }
	        return service.getRangeDomainAsync(this._worksheetName, this._fieldId, domainType);
	    };
	    return RangeFilter;
	}(Filter));
	exports.RangeFilter = RangeFilter;
	var RelativeDateFilter = (function (_super) {
	    __extends(RelativeDateFilter, _super);
	    function RelativeDateFilter(worksheetName, fieldName, fieldId, filterType, _anchorDate, _periodType, _rangeType, _rangeN) {
	        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId) || this;
	        _this._anchorDate = _anchorDate;
	        _this._periodType = _periodType;
	        _this._rangeType = _rangeType;
	        _this._rangeN = _rangeN;
	        return _this;
	    }
	    Object.defineProperty(RelativeDateFilter.prototype, "anchorDate", {
	        get: function () {
	            return this._anchorDate;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RelativeDateFilter.prototype, "periodType", {
	        get: function () {
	            return this._periodType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RelativeDateFilter.prototype, "rangeType", {
	        get: function () {
	            return this._rangeType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RelativeDateFilter.prototype, "rangeN", {
	        get: function () {
	            return this._rangeN;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RelativeDateFilter;
	}(Filter));
	exports.RelativeDateFilter = RelativeDateFilter;
	var CategoricalDomain = (function () {
	    function CategoricalDomain(_values, _domainType) {
	        this._values = _values;
	        this._domainType = _domainType;
	    }
	    Object.defineProperty(CategoricalDomain.prototype, "values", {
	        get: function () {
	            return this._values;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CategoricalDomain.prototype, "type", {
	        get: function () {
	            return this._domainType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CategoricalDomain;
	}());
	exports.CategoricalDomain = CategoricalDomain;
	var RangeDomain = (function () {
	    function RangeDomain(_min, _max, _domainType) {
	        this._min = _min;
	        this._max = _max;
	        this._domainType = _domainType;
	    }
	    Object.defineProperty(RangeDomain.prototype, "type", {
	        get: function () {
	            return this._domainType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeDomain.prototype, "min", {
	        get: function () {
	            return this._min;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeDomain.prototype, "max", {
	        get: function () {
	            return this._max;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RangeDomain;
	}());
	exports.RangeDomain = RangeDomain;


/***/ },
/* 49 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DataTable = (function () {
	    function DataTable(_data, _columns, _totalRowCount, _isSummaryData, _marksInfo) {
	        this._data = _data;
	        this._columns = _columns;
	        this._totalRowCount = _totalRowCount;
	        this._isSummaryData = _isSummaryData;
	        this._marksInfo = _marksInfo;
	        // TODO: get rid of this in redesign.
	        this._name = _isSummaryData ? 'Summary Data Table' : 'Underlying Data Table';
	    }
	    Object.defineProperty(DataTable.prototype, "name", {
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataTable.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataTable.prototype, "columns", {
	        get: function () {
	            return this._columns;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataTable.prototype, "marksInfo", {
	        get: function () {
	            return this._marksInfo;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataTable.prototype, "totalRowCount", {
	        get: function () {
	            return this._totalRowCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataTable.prototype, "isSummaryData", {
	        get: function () {
	            return this._isSummaryData;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DataTable;
	}());
	exports.DataTable = DataTable;
	var MarkInfo = (function () {
	    function MarkInfo(_type, _color, _tupleId) {
	        this._type = _type;
	        this._color = _color;
	        this._tupleId = _tupleId;
	    }
	    Object.defineProperty(MarkInfo.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MarkInfo.prototype, "color", {
	        get: function () {
	            return this._color;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MarkInfo.prototype, "tupleId", {
	        get: function () {
	            return this._tupleId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return MarkInfo;
	}());
	exports.MarkInfo = MarkInfo;
	var Column = (function () {
	    function Column(_fieldName, _dataType, // TODO: this shoudl be an enum type
	        _isReferenced, _index) {
	        this._fieldName = _fieldName;
	        this._dataType = _dataType;
	        this._isReferenced = _isReferenced;
	        this._index = _index;
	    }
	    Object.defineProperty(Column.prototype, "fieldName", {
	        get: function () {
	            return this._fieldName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Column.prototype, "dataType", {
	        get: function () {
	            return this._dataType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Column.prototype, "isReferenced", {
	        get: function () {
	            return this._isReferenced;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Column.prototype, "index", {
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Column;
	}());
	exports.Column = Column;
	var DataValue = (function () {
	    /* tslint:disable:no-any */
	    function DataValue(_value, _formattedValue) {
	        this._value = _value;
	        this._formattedValue = _formattedValue;
	    }
	    Object.defineProperty(DataValue.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataValue.prototype, "formattedValue", {
	        get: function () {
	            return this._formattedValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DataValue;
	}());
	exports.DataValue = DataValue;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var GetDataModels_1 = __webpack_require__(49);
	var GetDataService_1 = __webpack_require__(43);
	var GetDataServiceImpl = (function () {
	    function GetDataServiceImpl(dispatcher) {
	        this._dispatcher = dispatcher;
	    }
	    Object.defineProperty(GetDataServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "get-data-service" /* GetData */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GetDataServiceImpl.prototype.getUnderlyingDataAsync = function (visualId, getType, ignoreAliases, ignoreSelection, includeAllColumns, maxRows) {
	        var _this = this;
	        // Create all of our parameters
	        var verb = getType === GetDataService_1.GetDataType.Summary ? api_internal_contract_1.VerbId.GetDataSummaryData : api_internal_contract_1.VerbId.GetUnderlyingData;
	        var parameters = {};
	        parameters[api_internal_contract_1.ParameterId.VisualId] = visualId;
	        parameters[api_internal_contract_1.ParameterId.IgnoreAliases] = ignoreAliases;
	        parameters[api_internal_contract_1.ParameterId.IgnoreSelection] = ignoreSelection;
	        parameters[api_internal_contract_1.ParameterId.IncludeAllColumns] = includeAllColumns;
	        parameters[api_internal_contract_1.ParameterId.MaxRows] = maxRows;
	        return this._dispatcher.execute(verb, parameters).then(function (response) {
	            var responseData = response.result;
	            return _this.processResultsTable(responseData.data, responseData.isSummary);
	        });
	    };
	    GetDataServiceImpl.prototype.getSelectedMarksAsync = function (visualId) {
	        var _this = this;
	        var parameters = (_a = {}, _a[api_internal_contract_1.ParameterId.VisualId] = visualId, _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.GetSelectedMarks, parameters).then(function (response) {
	            var responseData = response.result;
	            return {
	                data: responseData.data.map(function (table) { return _this.processResultsTable(table, true); })
	            };
	        });
	        var _a;
	    };
	    GetDataServiceImpl.prototype.getHighlightedMarksAsync = function (visualId) {
	        var _this = this;
	        var parameters = (_a = {}, _a[api_internal_contract_1.ParameterId.VisualId] = visualId, _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.GetHighlightedMarks, parameters).then(function (response) {
	            var responseData = response.result;
	            return {
	                data: responseData.data.map(function (table) { return _this.processResultsTable(table, true); })
	            };
	        });
	        var _a;
	    };
	    GetDataServiceImpl.prototype.getDataSourceDataAsync = function (dataSourceId, ignoreAliases, maxRows, columnsToInclude) {
	        var _this = this;
	        var parameters = (_a = {},
	            _a[api_internal_contract_1.ParameterId.DataSourceId] = dataSourceId,
	            _a[api_internal_contract_1.ParameterId.IgnoreAliases] = ignoreAliases,
	            _a[api_internal_contract_1.ParameterId.MaxRows] = maxRows,
	            _a[api_internal_contract_1.ParameterId.ColumnsToInclude] = columnsToInclude,
	            _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.GetDataSourceData, parameters).then(function (response) {
	            var responseData = response.result;
	            return _this.processResultsTable(responseData.data, false);
	        });
	        var _a;
	    };
	    GetDataServiceImpl.prototype.processResultsTable = function (responseData, isSummary) {
	        var headers = responseData.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, Contract.DataType.String /*h.DataType*/, h.isReferenced, h.index); });
	        // TODO This should be controlled by a flag indicating whether this api will respond marks info or not
	        var marks;
	        if (responseData.marks) {
	            marks = responseData.marks.map(function (h) { return new GetDataModels_1.MarkInfo(h.type, h.color, h.tupleId); });
	        }
	        var table = responseData.dataTable.map(function (row) {
	            return row.map(function (cell) {
	                return new GetDataModels_1.DataValue(cell.value, cell.formattedValue);
	            });
	        });
	        if (marks) {
	            return new GetDataModels_1.DataTable(table, headers, table.length, isSummary, marks);
	        }
	        return new GetDataModels_1.DataTable(table, headers, table.length, isSummary);
	    };
	    return GetDataServiceImpl;
	}());
	exports.GetDataServiceImpl = GetDataServiceImpl;


/***/ },
/* 51 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Registration = (function () {
	    function Registration(_filterFn, _callbackFn) {
	        this._filterFn = _filterFn;
	        this._callbackFn = _callbackFn;
	        // Nothing Here
	    }
	    Registration.prototype.onNotification = function (notificationModel) {
	        if (this._filterFn(notificationModel)) {
	            this._callbackFn(notificationModel);
	        }
	    };
	    return Registration;
	}());
	var NotificationServiceImpl = (function () {
	    function NotificationServiceImpl(dispatcher) {
	        this.dispatcher = dispatcher;
	        this._handlers = {};
	        this.dispatcher.registerNotificationHandler(this.onNotification.bind(this));
	    }
	    Object.defineProperty(NotificationServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "notification-service" /* Notification */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NotificationServiceImpl.prototype.registerHandler = function (id, filterFn, handler) {
	        var _this = this;
	        var handlers = this._handlers[id] || new Array();
	        var registration = new Registration(filterFn, handler);
	        handlers.push(registration);
	        this._handlers[id] = handlers;
	        return function () { return _this.removeRegistration(id, registration); };
	    };
	    NotificationServiceImpl.prototype.hasHandlersForNotificationType = function (id) {
	        return this._handlers.hasOwnProperty(id);
	    };
	    NotificationServiceImpl.prototype.onNotification = function (notification) {
	        if (!this.hasHandlersForNotificationType(notification.notificationId)) {
	            return;
	        }
	        // Go through and check for all the handlers of this particular notification
	        this._handlers[notification.notificationId].forEach(function (h) { return h.onNotification(notification.data); });
	    };
	    NotificationServiceImpl.prototype.removeRegistration = function (id, registration) {
	        if (!this.hasHandlersForNotificationType(id)) {
	            return;
	        }
	        this._handlers[id] = this._handlers[id].filter(function (reg) { return reg !== registration; });
	    };
	    return NotificationServiceImpl;
	}());
	exports.NotificationServiceImpl = NotificationServiceImpl;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	var ParameterImpl_1 = __webpack_require__(53);
	var Parameter_1 = __webpack_require__(55);
	var ParametersServiceImpl = (function () {
	    function ParametersServiceImpl(dispatcher) {
	        this.dispatcher = dispatcher;
	    }
	    Object.defineProperty(ParametersServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "parameters-service" /* Parameters */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ParametersServiceImpl.prototype.getParametersForSheetAsync = function (sheetPath, sheet) {
	        var parameters = (_a = {},
	            _a[api_internal_contract_1.ParameterId.SheetPath] = sheetPath,
	            _a);
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.GetParametersForSheet, parameters).then(function (response) {
	            // TODO - Check for error
	            var result = response.result;
	            return result.map(function (parameterInfo) {
	                var impl = new ParameterImpl_1.ParameterImpl(parameterInfo);
	                return new Parameter_1.Parameter(impl, sheet);
	            });
	        });
	        var _a;
	    };
	    ParametersServiceImpl.prototype.changeParameterValueAsync = function (fieldName, newValue) {
	        var parameters = (_a = {},
	            _a[api_internal_contract_1.ParameterId.ParameterFieldName] = fieldName,
	            _a[api_internal_contract_1.ParameterId.ParameterValue] = newValue,
	            _a);
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.ChangeParameterValue, parameters).then(function (response) {
	            var result = response.result;
	            return result;
	        });
	        var _a;
	    };
	    ParametersServiceImpl.prototype.findParameterByNameAsync = function (name, sheet) {
	        return this.findParameterAsync(sheet, name, undefined);
	    };
	    ParametersServiceImpl.prototype.findParameterByGlobalFieldNameAsync = function (fieldName, sheet) {
	        return this.findParameterAsync(sheet, undefined, fieldName);
	    };
	    ParametersServiceImpl.prototype.findParameterAsync = function (sheet, name, fieldName) {
	        var parameters = {};
	        if (name !== undefined) {
	            parameters[api_internal_contract_1.ParameterId.ParameterCaption] = name;
	        }
	        else if (fieldName !== undefined) {
	            parameters[api_internal_contract_1.ParameterId.ParameterFieldName] = fieldName;
	        }
	        else {
	            throw api_utils_1.TableauException.missingParameter(['field name or caption']);
	        }
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.FindParameter, parameters).then(function (response) {
	            var instanceOfParameterInfo = function (object) {
	                return 'fieldName' in object;
	            };
	            // We need to check to see if we got a valid response back again
	            if (instanceOfParameterInfo(response.result)) {
	                var result = response.result;
	                var impl = new ParameterImpl_1.ParameterImpl(result);
	                return new Parameter_1.Parameter(impl, sheet);
	            }
	            else {
	                return undefined;
	            }
	        });
	    };
	    return ParametersServiceImpl;
	}());
	exports.ParametersServiceImpl = ParametersServiceImpl;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	var InternalToExternalEnumMappings_1 = __webpack_require__(23);
	var ParameterChangedEvent_1 = __webpack_require__(54);
	var GetDataModels_1 = __webpack_require__(49);
	var ServiceRegistry_1 = __webpack_require__(28);
	var SingleEventManagerImpl_1 = __webpack_require__(37);
	var ParameterImpl = (function () {
	    function ParameterImpl(parameterInfo) {
	        this.setParameterInfo(parameterInfo);
	    }
	    Object.defineProperty(ParameterImpl.prototype, "name", {
	        get: function () {
	            return this._parameterInfo.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ParameterImpl.prototype, "currentValue", {
	        get: function () {
	            return new GetDataModels_1.DataValue(this._parameterInfo.currentValue.value, this._parameterInfo.currentValue.formattedValue);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ParameterImpl.prototype, "dataType", {
	        get: function () {
	            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dataType.convert(this._parameterInfo.dataType);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ParameterImpl.prototype, "id", {
	        get: function () {
	            return this._globalFieldName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ParameterImpl.prototype, "allowableValues", {
	        get: function () {
	            return this._allowableValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ParameterImpl.prototype.changeValueAsync = function (newValue) {
	        var _this = this;
	        var coercedValue = api_utils_1.Param.serializeParamterValue(newValue);
	        var parametersService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("parameters-service" /* Parameters */);
	        return parametersService.changeParameterValueAsync(this._globalFieldName, coercedValue).then(function (parameterInfo) {
	            _this.setParameterInfo(parameterInfo);
	            return _this.currentValue;
	        });
	    };
	    /**
	     * Helper method which goes through and registers each event type this impl knows about
	     * with the NotificationService. It returns an array of SingleEventManager objects which
	     * can then be passed to an EventListenerManager to handle user registration / unregistration.
	     *
	     * @param sheet The sheet object which will be included with the event notifications
	     * @returns {Array<SingleEventManager>} Collection of event managers to pass to an EventListenerManager
	     */
	    ParameterImpl.prototype.initializeEvents = function (sheet) {
	        var _this = this;
	        var results = new Array();
	        var notificationService;
	        try {
	            notificationService = ServiceRegistry_1.ApiServiceRegistry.instance.getService("notification-service" /* Notification */);
	        }
	        catch (e) {
	            // If we don't have this service registered, just return
	            return results;
	        }
	        // Initialize all of the event managers we'll need (one for each event type)
	        var parameterEvent = new SingleEventManagerImpl_1.SingleEventManagerImpl(Contract.TableauEventType.ParameterChanged);
	        notificationService.registerHandler(api_internal_contract_1.NotificationId.ParameterChanged, function (model) {
	            var fieldName = model;
	            return fieldName === _this._globalFieldName;
	        }, function (fieldName) {
	            parameterEvent.triggerEvent(function () { return new ParameterChangedEvent_1.ParameterChangedEvent(fieldName, sheet); });
	        });
	        results.push(parameterEvent);
	        return results;
	    };
	    ParameterImpl.prototype.setParameterInfo = function (parameterInfo) {
	        this._parameterInfo = parameterInfo;
	        this._globalFieldName = parameterInfo.fieldName;
	        var type = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.allowableValues.convert(parameterInfo.allowableValuesType);
	        var listValues;
	        var minValue;
	        var maxValue;
	        var stepSize;
	        var dateStepPeriod;
	        if (type === Contract.ParameterValueType.List) {
	            var values = parameterInfo.allowableValues || [];
	            listValues = values.map(function (val) { return new GetDataModels_1.DataValue(val.value, val.formattedValue); });
	        }
	        else if (type === Contract.ParameterValueType.Range) {
	            minValue = parameterInfo.minValue && new GetDataModels_1.DataValue(parameterInfo.minValue.value, parameterInfo.minValue.formattedValue);
	            maxValue = parameterInfo.maxValue && new GetDataModels_1.DataValue(parameterInfo.maxValue.value, parameterInfo.maxValue.formattedValue);
	            stepSize = parameterInfo.stepSize;
	            dateStepPeriod = parameterInfo.dateStepPeriod &&
	                InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateStepPeriod.convert(parameterInfo.dateStepPeriod);
	        }
	        this._allowableValues = {
	            type: type,
	            allowableValues: listValues,
	            minValue: minValue,
	            maxValue: maxValue,
	            stepSize: stepSize,
	            dateStepPeriod: dateStepPeriod
	        };
	    };
	    return ParameterImpl;
	}());
	exports.ParameterImpl = ParameterImpl;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_utils_1 = __webpack_require__(13);
	var ServiceRegistry_1 = __webpack_require__(28);
	var TableauSheetEvent_1 = __webpack_require__(40);
	var ParameterChangedEvent = (function (_super) {
	    __extends(ParameterChangedEvent, _super);
	    function ParameterChangedEvent(_globalFieldName, sheet) {
	        var _this = _super.call(this, Contract.TableauEventType.ParameterChanged, sheet) || this;
	        _this._globalFieldName = _globalFieldName;
	        return _this;
	    }
	    ParameterChangedEvent.prototype.getParameterAsync = function () {
	        // Call down to our service to get the parameter back via its field name
	        var service = ServiceRegistry_1.ApiServiceRegistry.instance.getService("parameters-service" /* Parameters */);
	        return service.findParameterByGlobalFieldNameAsync(this._globalFieldName, this.sheet).then(function (parameter) {
	            if (parameter === undefined) {
	                throw api_utils_1.TableauException.error(ParameterChangedEvent.PARAM_NOT_FOUND);
	            }
	            return parameter;
	        });
	    };
	    ParameterChangedEvent.PARAM_NOT_FOUND = 'Unable to find parameter';
	    return ParameterChangedEvent;
	}(TableauSheetEvent_1.TableauSheetEvent));
	exports.ParameterChangedEvent = ParameterChangedEvent;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventListenerManager_1 = __webpack_require__(12);
	/**
	 * Implementation of the Parameter contract. Calls down to the impl
	 * class for almost all of the work it does.
	 */
	var Parameter = (function (_super) {
	    __extends(Parameter, _super);
	    function Parameter(parameterImpl, sheet) {
	        var _this = _super.call(this) || this;
	        _this.parameterImpl = parameterImpl;
	        // Initialize our event handling for this class
	        _this.parameterImpl.initializeEvents(sheet).forEach(function (e) { return _this.addNewEventType(e); });
	        return _this;
	    }
	    Object.defineProperty(Parameter.prototype, "name", {
	        get: function () {
	            return this.parameterImpl.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parameter.prototype, "currentValue", {
	        get: function () {
	            return this.parameterImpl.currentValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parameter.prototype, "dataType", {
	        get: function () {
	            return this.parameterImpl.dataType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parameter.prototype, "allowableValues", {
	        get: function () {
	            return this.parameterImpl.allowableValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parameter.prototype, "id", {
	        get: function () {
	            return this.parameterImpl.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Parameter.prototype.changeValueAsync = function (newValue) {
	        return this.parameterImpl.changeValueAsync(newValue);
	    };
	    return Parameter;
	}(EventListenerManager_1.EventListenerManager));
	exports.Parameter = Parameter;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(19);
	var api_internal_contract_1 = __webpack_require__(21);
	var api_utils_1 = __webpack_require__(13);
	var SelectionModels_1 = __webpack_require__(57);
	var SelectionServiceImpl = (function () {
	    function SelectionServiceImpl(dispatcher) {
	        this._dispatcher = dispatcher;
	    }
	    Object.defineProperty(SelectionServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "selection-service" /* Selection */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Method to clear all the selected marks for the given worksheet.
	     *
	     * @param visualId
	     */
	    SelectionServiceImpl.prototype.clearSelectedMarksAsync = function (visualId) {
	        var parameters = (_a = {}, _a[api_internal_contract_1.ParameterId.VisualId] = visualId, _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.ClearSelectedMarks, parameters).then(function (response) {
	            return; // Expecting an empty model and hence the void response.
	        });
	        var _a;
	    };
	    /**
	     * Method to select marks for the given worksheet.
	     *
	     * @param visualId
	     * @param selectionCriteria
	     * @param selectionUpdateType
	     */
	    SelectionServiceImpl.prototype.selectMarksByValueAsync = function (visualId, selectionCriterias, selectionUpdateType) {
	        if (selectionCriterias.length === 0) {
	            throw api_utils_1.TableauException.invalid(['Selection criteria', 'Selections missing.']);
	        }
	        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
	        var selectionCriteriaType = this.validateSelectionCriteria(selectionCriterias[0]);
	        var selectionModelContainer = this.parseSelectionMarks(selectionCriterias, selectionCriteriaType);
	        var parameters = (_a = {},
	            _a[api_internal_contract_1.ParameterId.VisualId] = visualId,
	            _a[api_internal_contract_1.ParameterId.SelectionUpdateType] = selectionType,
	            _a);
	        switch (selectionCriteriaType) {
	            case SelectionCriteriaType.HierarchicalType: {
	                parameters[api_internal_contract_1.ParameterId.HierValSelectionModels] = selectionModelContainer.hierModelArr;
	                break;
	            }
	            case SelectionCriteriaType.RangeType: {
	                parameters[api_internal_contract_1.ParameterId.QuantRangeSelectionModels] = selectionModelContainer.quantModelArr;
	                break;
	            }
	            case SelectionCriteriaType.DimensionType: {
	                parameters[api_internal_contract_1.ParameterId.DimValSelectionModels] = selectionModelContainer.dimModelArr;
	                break;
	            }
	            default:
	                break;
	        }
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.SelectByValue, parameters).then(function (response) {
	            // Expecting an empty model and hence the void response.
	            return;
	            // TODO Investigate the error response with multiple output params and throw error accordingly.
	        });
	        var _a;
	    };
	    /**
	   * Method to select marks for the given worksheet.
	   *
	   * @param visualId
	   * @param MarkInfo
	   * @param selectionUpdateType
	   */
	    SelectionServiceImpl.prototype.selectMarksByIdAsync = function (visualId, marks, selectionUpdateType) {
	        if (marks.length === 0) {
	            throw api_utils_1.TableauException.invalid(['Selection', 'Marks info missing.']);
	        }
	        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
	        var selectionModelContainer = this.parseSelectionIds(marks);
	        var parameters = (_a = {},
	            _a[api_internal_contract_1.ParameterId.VisualId] = visualId,
	            _a[api_internal_contract_1.ParameterId.SelectionUpdateType] = selectionType,
	            _a[api_internal_contract_1.ParameterId.Selection] = selectionModelContainer.selection,
	            _a);
	        return this._dispatcher.execute(api_internal_contract_1.VerbId.SelectByValue, parameters).then(function (response) {
	            // Expecting an empty model and hence the void response.
	            return;
	            // TODO Investigate the error response with multiple output params and throw error accordingly.
	        });
	        var _a;
	    };
	    /**
	     * Method to prepare the pres models for selection by MarksInfo
	     * @param marks
	     */
	    SelectionServiceImpl.prototype.parseSelectionIds = function (marks) {
	        var ids = [];
	        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
	        for (var i = 0; i < marks.length; i++) {
	            var tupleId = marks[i].tupleId;
	            if (tupleId !== undefined && tupleId !== null) {
	                ids.push(tupleId.toString()); // collect the tuple ids
	            }
	            else {
	                throw api_utils_1.TableauException.invalid(['tupleId']);
	            }
	        }
	        if (ids.length !== 0) {
	            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
	            tupleSelectionModel.selectionType = 'tuples';
	            tupleSelectionModel.objectIds = ids;
	            selectionModelContainer.selection = tupleSelectionModel;
	        }
	        return selectionModelContainer;
	    };
	    /**
	     * Method to prepare the pres models for selection by values.
	     *
	     * Supports 3 types for selection:
	     * 1) hierarchical value based selection
	     * 2) range value based selection
	     * 3) Dimension value based selection
	     *
	     * @param marks
	     * @param hierModelArr
	     * @param dimModelArr
	     * @param quantModelArr
	     * @param selection
	     */
	    SelectionServiceImpl.prototype.parseSelectionMarks = function (selectionCriterias, selectionType) {
	        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
	        var mixedSelectionsError = false;
	        for (var i = 0; i < selectionCriterias.length; i++) {
	            var st = selectionCriterias[i];
	            if (st.fieldName && (st.value !== undefined && st.value !== null)) {
	                var catRegex = new RegExp('(\[[A-Za-z0-9]+]).*', 'g');
	                var rangeOption = st.value;
	                if (catRegex.test(st.fieldName)) {
	                    if (selectionType === SelectionCriteriaType.HierarchicalType) {
	                        var hierModel = this.addToParamsList(st.fieldName, st.value);
	                        selectionModelContainer.hierModelArr.push(hierModel);
	                    }
	                    else {
	                        mixedSelectionsError = true;
	                        break;
	                    }
	                }
	                else if (rangeOption.min !== undefined
	                    && rangeOption.max !== undefined) {
	                    if (selectionType === SelectionCriteriaType.RangeType) {
	                        var quantModel = this.addToRangeParamsList(st.fieldName, rangeOption);
	                        selectionModelContainer.quantModelArr.push(quantModel);
	                    }
	                    else {
	                        mixedSelectionsError = true;
	                        break;
	                    }
	                }
	                else {
	                    if (selectionType === SelectionCriteriaType.DimensionType) {
	                        var dimModel = this.addToParamsList(st.fieldName, st.value);
	                        selectionModelContainer.dimModelArr.push(dimModel);
	                    }
	                    else {
	                        mixedSelectionsError = true;
	                        break;
	                    }
	                }
	            }
	        }
	        if (mixedSelectionsError) {
	            throw api_utils_1.TableauException.invalid(['Selection Criteria', 'Different types of selection criterias provided.']);
	        }
	        return selectionModelContainer;
	    };
	    /**
	     *
	     * @param selectionCriterias Validate and determine the selection criterias type.
	     */
	    SelectionServiceImpl.prototype.validateSelectionCriteria = function (selectionCriteria) {
	        var selectionType;
	        // Determine the type of selection, this command is by looking at the first selection
	        var crit = selectionCriteria;
	        var catRegex = new RegExp('(\[[A-Za-z0-9]+]).*', 'g');
	        var rangeOption = crit.value;
	        if (crit.fieldName && (crit.value !== undefined && crit.value !== null)) {
	            if (catRegex.test(crit.fieldName)) {
	                selectionType = SelectionCriteriaType.HierarchicalType;
	            }
	            else if (rangeOption.min !== undefined
	                && rangeOption.max !== undefined) {
	                selectionType = SelectionCriteriaType.RangeType;
	            }
	            else {
	                selectionType = SelectionCriteriaType.DimensionType;
	            }
	        }
	        else {
	            throw api_utils_1.TableauException.invalid(['Selection', 'Criteria format.']);
	        }
	        return selectionType;
	    };
	    /**
	     * Method to transform the key value pair into value based pres model object.
	     *
	     * @param valueSelectionModel
	     * @param fieldName
	     * @param value
	     */
	    SelectionServiceImpl.prototype.addToParamsList = function (fieldName, value) {
	        var valueSelectionModel = new SelectionModels_1.ValueSelectionModel();
	        var markValues = [];
	        if (value instanceof Array) {
	            var valueArr = value;
	            for (var i = 0; i < valueArr.length; i++) {
	                markValues.push(valueArr[i].toString());
	            }
	        }
	        else {
	            markValues.push(value.toString());
	        }
	        valueSelectionModel.qualifiedFieldCaption = fieldName;
	        valueSelectionModel.selectValues = markValues;
	        return valueSelectionModel;
	    };
	    /**
	     * Method to transform the key value pair into range based selection pres model.
	     *
	     * TODO: Need to handle the parsing of date type values.
	     *
	     * @param valueSelectionModel
	     * @param fieldName
	     * @param value
	     */
	    SelectionServiceImpl.prototype.addToRangeParamsList = function (fieldName, value) {
	        var rangeSelectionModel = new SelectionModels_1.RangeSelectionModel();
	        rangeSelectionModel.qualifiedFieldCaption = fieldName;
	        if (value.max !== undefined && value.max !== null) {
	            rangeSelectionModel.maxValue = value.max.toString();
	        }
	        if (value.min !== undefined && value.min !== null) {
	            rangeSelectionModel.minValue = value.min.toString();
	        }
	        rangeSelectionModel.included = this.validateNullOptionType(value.nullOption);
	        return rangeSelectionModel;
	    };
	    /**
	     * Method to validate the selection update type.
	     *
	     * @param selectionUpdateType
	     */
	    SelectionServiceImpl.prototype.validateSelectionUpdateType = function (selectionUpdateType) {
	        if (selectionUpdateType === Contract.SelectionUpdateType.Replace) {
	            return api_internal_contract_1.SelectionUpdateType.Replace;
	        }
	        else if (selectionUpdateType === Contract.SelectionUpdateType.Add) {
	            return api_internal_contract_1.SelectionUpdateType.Add;
	        }
	        else if (selectionUpdateType === Contract.SelectionUpdateType.Remove) {
	            return api_internal_contract_1.SelectionUpdateType.Remove;
	        }
	        return api_internal_contract_1.SelectionUpdateType.Replace;
	    };
	    /**
	     * Method to validate the include type for range selection.
	     *
	     * @param nullOption
	     */
	    SelectionServiceImpl.prototype.validateNullOptionType = function (nullOption) {
	        if (nullOption) {
	            if (nullOption === Contract.FilterNullOption.NullValues) {
	                return api_internal_contract_1.QuantitativeIncludedValues.IncludeNull;
	            }
	            else if (nullOption === Contract.FilterNullOption.NonNullValues) {
	                return api_internal_contract_1.QuantitativeIncludedValues.IncludeNonNull;
	            }
	            else if (nullOption === Contract.FilterNullOption.AllValues) {
	                return api_internal_contract_1.QuantitativeIncludedValues.IncludeAll;
	            }
	        }
	        return api_internal_contract_1.QuantitativeIncludedValues.IncludeAll;
	    };
	    return SelectionServiceImpl;
	}());
	exports.SelectionServiceImpl = SelectionServiceImpl;
	/**
	 * Enum for the different selection criteria types.
	 */
	var SelectionCriteriaType;
	(function (SelectionCriteriaType) {
	    SelectionCriteriaType[SelectionCriteriaType["HierarchicalType"] = 1] = "HierarchicalType";
	    SelectionCriteriaType[SelectionCriteriaType["RangeType"] = 2] = "RangeType";
	    SelectionCriteriaType[SelectionCriteriaType["DimensionType"] = 3] = "DimensionType";
	    SelectionCriteriaType[SelectionCriteriaType["TuplesType"] = 4] = "TuplesType";
	})(SelectionCriteriaType || (SelectionCriteriaType = {}));


/***/ },
/* 57 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Selection Model.
	 */
	var SelectionModel = (function () {
	    function SelectionModel() {
	    }
	    return SelectionModel;
	}());
	exports.SelectionModel = SelectionModel;
	/**
	 * Value based selection model. Meant for hierarchical, range and categorical selections.
	 */
	var ValueSelectionModel = (function (_super) {
	    __extends(ValueSelectionModel, _super);
	    function ValueSelectionModel() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.selectValues = [];
	        return _this;
	    }
	    return ValueSelectionModel;
	}(SelectionModel));
	exports.ValueSelectionModel = ValueSelectionModel;
	/**
	 * Hierarchical value selection model
	 */
	var HierarchicalSelectionModel = (function (_super) {
	    __extends(HierarchicalSelectionModel, _super);
	    function HierarchicalSelectionModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return HierarchicalSelectionModel;
	}(ValueSelectionModel));
	exports.HierarchicalSelectionModel = HierarchicalSelectionModel;
	/**
	 * Range based value selection model
	 */
	var RangeSelectionModel = (function (_super) {
	    __extends(RangeSelectionModel, _super);
	    function RangeSelectionModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return RangeSelectionModel;
	}(SelectionModel));
	exports.RangeSelectionModel = RangeSelectionModel;
	/**
	 * Dimension value selection model
	 */
	var DimensionSelectionModel = (function (_super) {
	    __extends(DimensionSelectionModel, _super);
	    function DimensionSelectionModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return DimensionSelectionModel;
	}(ValueSelectionModel));
	exports.DimensionSelectionModel = DimensionSelectionModel;
	/**
	 * Tuple based selection model
	 */
	var TupleSelectionModel = (function () {
	    function TupleSelectionModel() {
	        this.objectIds = [];
	    }
	    return TupleSelectionModel;
	}());
	exports.TupleSelectionModel = TupleSelectionModel;
	/**
	 * Container class to populate all the selection models when parsing input
	 */
	var SelectionModelsContainer = (function () {
	    function SelectionModelsContainer() {
	        this.hierModelArr = [];
	        this.dimModelArr = [];
	        this.quantModelArr = [];
	    }
	    return SelectionModelsContainer;
	}());
	exports.SelectionModelsContainer = SelectionModelsContainer;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_messaging_1 = __webpack_require__(59);
	var CrossFrameDispatcher_1 = __webpack_require__(65);
	// Checks to see if we are running in an iframe currently: https://stackoverflow.com/a/326076/8821153
	function inIframe(thisWindow) {
	    try {
	        return thisWindow.self !== thisWindow.parent;
	    }
	    catch (e) {
	        return true;
	    }
	}
	/**
	 * Attempts to bootstrap the extension with a cross-frame parent where Tableau is running
	 *
	 * @param thisWindow The window which we are running in (injected for unit testing purposes)
	 * @param versionNumber The version number of our API to include in the initialization message
	 * @returns A promise which is doing the actual bootstrapping
	 */
	function doCrossFrameBootstrap(thisWindow, versionNumber) {
	    return new Promise(function (resolve, reject) {
	        // Check to make sure we're in an iframe and have a parent to communicate with
	        if (!inIframe(thisWindow)) {
	            reject('This extension is not running inside an iframe or desktop. Initialization failed.');
	        }
	        // Create the messenger which will do he communication between this window and our parent
	        // Since we don't know where we are running yet, we have to make this initial origin '*'. Once
	        // we have successfully initialized our extension, we will limit where we send messages
	        var messenger = new api_messaging_1.CrossFrameMessenger(thisWindow, thisWindow.parent, '*');
	        // Prepare to send an initialization message to the parent frame
	        var initializationMessage = messenger.prepareInitializationMessage(versionNumber, api_messaging_1.VERSION);
	        // When we receive a response back from the parent, we check to make sure the guids match and then we know
	        // that the parent is aware of us and we can start communicating
	        messenger.setCommandResponseMessageHandler(function (msg) {
	            // Verify we are getting a response from our initialize message
	            if (msg.commandGuid === initializationMessage.messageGuid) {
	                var dispatcher = new CrossFrameDispatcher_1.CrossFrameDispatcher(messenger);
	                resolve(dispatcher);
	            }
	        });
	        // Now that our handlers are ready, start listening and send our initialization message
	        messenger.startListening();
	        initializationMessage.send();
	    });
	}
	exports.doCrossFrameBootstrap = doCrossFrameBootstrap;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(60));
	__export(__webpack_require__(63));
	// Export the version number of messaging for consumers to use.
	// Be very careful making any updates to this contract which break version compatibility.
	exports.VERSION = {
	    major: 1,
	    minor: 0,
	    fix: 0
	};


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var guid_1 = __webpack_require__(61);
	var CrossFramePreparedMessage_1 = __webpack_require__(62);
	var MessageTypes_1 = __webpack_require__(63);
	var MessageTypeChecks_1 = __webpack_require__(64);
	/**
	 * The CrossFrameMessenger is the primary export from the api-messaging module. An instance of
	 * this class can be instantiated on both sides of a frame boundary to facilitate communication
	 * in both directions between the frames. This class implements both the dispatcher and the listener
	 * portions, but doesn't require callers to care about both.
	 */
	var CrossFrameMessenger = (function () {
	    /**
	     * Creates an instance of CrossFrameMessenger. If you would like to use the CrossFrameMessenger as a MessageListener,
	     * be sure to call StartListening and register message handlers.
	     * @param thisWindow The window object which the CrossFrameMessenger lives. An onMessage listener will be added here.
	     * @param [otherWindow] Optional otherWindow which messages will be posted to.
	     *                      If defined, incoming messages must originate from otherWindow to be passed on
	     * @param [otherWindowOrigin] The target origin which otherWindow must have in order to receive dispatched messages.
	     *                            This value will be sent as the targetOrigin of a postMessage
	     *                            (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
	     */
	    function CrossFrameMessenger(thisWindow, otherWindow, otherWindowOrigin) {
	        this.thisWindow = thisWindow;
	        this.otherWindow = otherWindow;
	        this.otherWindowOrigin = otherWindowOrigin;
	        // Make sure to call StartListening
	    }
	    ///// MessageListener Implementation
	    CrossFrameMessenger.prototype.startListening = function () {
	        var _this = this;
	        // Check if we already are listening, if not, hook up a message listener
	        if (!this.unregisterFunction) {
	            var boundHandler_1 = this.onMessageReceived.bind(this);
	            this.thisWindow.addEventListener('message', boundHandler_1, true);
	            this.unregisterFunction = function () { return _this.thisWindow.removeEventListener('message', boundHandler_1, true); };
	        }
	    };
	    CrossFrameMessenger.prototype.stopListening = function () {
	        // Stop listening if we have started listening
	        if (this.unregisterFunction) {
	            this.unregisterFunction();
	            this.unregisterFunction = undefined;
	        }
	    };
	    CrossFrameMessenger.prototype.setInitializeMessageHandler = function (handler) {
	        this.initializeMessageHandler = handler;
	    };
	    CrossFrameMessenger.prototype.setCommandResponseMessageHandler = function (handler) {
	        this.commandResponseMessageHandler = handler;
	    };
	    CrossFrameMessenger.prototype.setCommandMessageHandler = function (handler) {
	        this.commandMessageHandler = handler;
	    };
	    CrossFrameMessenger.prototype.setNotificationMessageHandler = function (handler) {
	        this.notificationMessageHandler = handler;
	    };
	    ///// MessageDispatcher Implementation
	    CrossFrameMessenger.prototype.prepareInitializationMessage = function (apiVersion, crossFrameVersion) {
	        var message = {
	            msgGuid: guid_1.Guid.create().formattedValue,
	            msgType: MessageTypes_1.MessageType.Initialize,
	            crossFrameVersion: crossFrameVersion,
	            apiVersion: apiVersion
	        };
	        return this.prepareMessage(message);
	    };
	    CrossFrameMessenger.prototype.prepareCommandMessage = function (verbId, parameters) {
	        var message = {
	            msgGuid: guid_1.Guid.create().formattedValue,
	            msgType: MessageTypes_1.MessageType.Command,
	            verbId: verbId,
	            parameters: parameters
	        };
	        return this.prepareMessage(message);
	    };
	    CrossFrameMessenger.prototype.prepareCommandResponseMessage = function (commandGuid, data, error) {
	        var message = {
	            msgGuid: guid_1.Guid.create().formattedValue,
	            msgType: MessageTypes_1.MessageType.CommandResponse,
	            commandGuid: commandGuid,
	            data: data,
	            error: error
	        };
	        return this.prepareMessage(message);
	    };
	    CrossFrameMessenger.prototype.prepareNotificationMessage = function (notificationId, data) {
	        var message = {
	            msgGuid: guid_1.Guid.create().formattedValue,
	            msgType: MessageTypes_1.MessageType.Notification,
	            notificationId: notificationId,
	            data: data
	        };
	        return this.prepareMessage(message);
	    };
	    /**
	     * Prepares a pending message for sending and returns the prepared message
	     *
	     * @param msg The message to be sent to this.otherWindow
	     * @returns The prepared message
	     */
	    CrossFrameMessenger.prototype.prepareMessage = function (msg) {
	        if (!this.otherWindow || !this.otherWindowOrigin) {
	            throw 'Other window not initialized, cannot dispatch messages';
	        }
	        var preparedMessage = new CrossFramePreparedMessage_1.CrossFramePreparedMessage(msg, this.otherWindow, this.otherWindowOrigin);
	        return preparedMessage;
	    };
	    /**
	     * Called when a message is received. Does some validation of the message, and then
	     * calls an appropriate message handler if one is defined
	     *
	     * @param event The incoming MessageEvent
	     */
	    CrossFrameMessenger.prototype.onMessageReceived = function (event) {
	        // If we have an otherWindow defined, make sure the message is coming from there
	        if (this.otherWindow && event.source !== this.otherWindow) {
	            return;
	        }
	        // Do some validation on event.data to make sure that we have received a real message
	        if (!event.data) {
	            return;
	        }
	        var message = event.data;
	        if (!MessageTypeChecks_1.isMessage(message)) {
	            return;
	        }
	        // Check the declared message type, validate the message, and call an appropriate hander if one exists
	        switch (message.msgType) {
	            case MessageTypes_1.MessageType.Initialize: {
	                if (!MessageTypeChecks_1.isInitMessage(message) || !this.initializeMessageHandler) {
	                    return;
	                }
	                this.initializeMessageHandler(message, event.source);
	                break;
	            }
	            case MessageTypes_1.MessageType.CommandResponse: {
	                if (!MessageTypeChecks_1.isCommandResponseMessage(message) || !this.commandResponseMessageHandler) {
	                    return;
	                }
	                this.commandResponseMessageHandler(message, event.source);
	                break;
	            }
	            case MessageTypes_1.MessageType.Command: {
	                if (!MessageTypeChecks_1.isCommandMessage(message) || !this.commandMessageHandler) {
	                    return;
	                }
	                this.commandMessageHandler(message, event.source);
	                break;
	            }
	            case MessageTypes_1.MessageType.Notification: {
	                if (!MessageTypeChecks_1.isNotificationMessage(message) || !this.notificationMessageHandler) {
	                    return;
	                }
	                this.notificationMessageHandler(message, event.source);
	                break;
	            }
	            default:
	        }
	    };
	    return CrossFrameMessenger;
	}());
	exports.CrossFrameMessenger = CrossFrameMessenger;


/***/ },
/* 61 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var guidRegex = /^[a-f0-9]{8}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{12}$/i;
	var emptyGuidValue = '00000000-0000-0000-0000-000000000000';
	/**
	 * This is where the magic happens. Generates the specified number of GUID quads using a random number.
	 * @param count The number of quads to generate.
	 */
	function generateQuad(count) {
	    if (count === void 0) { count = 1; }
	    var out = '';
	    for (var i = 0; i < count; i++) {
	        // tslint:disable-next-line:no-bitwise
	        out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
	    }
	    return out;
	}
	/**
	 * Represents a Globally Unique Identifier (GUID). This is not meant to be cryptographically secure.
	 */
	var Guid = (function () {
	    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	    // Constructor
	    function Guid(value) {
	        this.value = value.toLowerCase();
	    }
	    Object.defineProperty(Guid.prototype, "formattedValue", {
	        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	        // Properties
	        /**
	         * Read-only formatted value of the GUID.
	         */
	        get: function () {
	            return this.value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Guid.prototype, "isEmpty", {
	        /**
	         * Returns a value indicating whether this GUID is empty (equal to Guid.EMPTY).
	         */
	        get: function () {
	            return this.value === emptyGuidValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	    // Methods
	    /**
	     * Returns a value indicating whether the value is a valid GUID.
	     * @param value Either a Guid instance or a string
	     */
	    Guid.isGuid = function (value) {
	        return (value instanceof Guid) || guidRegex.test(value);
	    };
	    /**
	     * Creates a new GUID.
	     */
	    Guid.create = function () {
	        return new Guid([generateQuad(2), generateQuad(), generateQuad(), generateQuad(), generateQuad(3)].join('-'));
	    };
	    /**
	     * Parses an existing GUID string. Throws a TypeError if the value is not a valid GUID.
	     * @param value the existing GUID string to parse
	     */
	    Guid.parse = function (value) {
	        if (!Guid.isGuid(value)) {
	            throw new TypeError("Value is not a valid GUID: '" + value + "'");
	        }
	        return new Guid(value);
	    };
	    /**
	     * Returns the formatted GUID.
	     */
	    Guid.prototype.toString = function () {
	        return this.value;
	    };
	    /**
	     * Returns a value indicating whether another GUID is equal to this GUID.
	     * @param other Either another Guid instance or a formatted GUID string.
	     */
	    Guid.prototype.equals = function (other) {
	        var otherGuid = (other instanceof Guid) ? other : Guid.parse(other);
	        return this.formattedValue === otherGuid.formattedValue;
	    };
	    /**
	     * Represents a placeholder GUID or a value to represent a non-GUID.
	     * Returns '00000000-0000-0000-0000-000000000000'.
	     */
	    Guid.EMPTY = new Guid(emptyGuidValue);
	    return Guid;
	}());
	exports.Guid = Guid;


/***/ },
/* 62 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the PreparedMessage interface used to post messages between
	 * two frames using window.postMessage
	 */
	var CrossFramePreparedMessage = (function () {
	    /**
	     * Creates an instance of CrossFramePreparedMessage.
	     * @param _message The message to be sent
	     * @param _target The target window where the message will be sent
	     * @param _origin The targetOrigin where this message can be received
	     */
	    function CrossFramePreparedMessage(_message, _target, _origin) {
	        this._message = _message;
	        this._target = _target;
	        this._origin = _origin;
	    }
	    Object.defineProperty(CrossFramePreparedMessage.prototype, "messageGuid", {
	        get: function () { return this._message.msgGuid; },
	        enumerable: true,
	        configurable: true
	    });
	    CrossFramePreparedMessage.prototype.send = function () {
	        this._target.postMessage(this._message, this._origin);
	        return this;
	    };
	    return CrossFramePreparedMessage;
	}());
	exports.CrossFramePreparedMessage = CrossFramePreparedMessage;


/***/ },
/* 63 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Enum defining the 4 different types of messages we have defined
	 */
	var MessageType;
	(function (MessageType) {
	    MessageType["Initialize"] = "initialize";
	    MessageType["Notification"] = "notification";
	    MessageType["Command"] = "command";
	    MessageType["CommandResponse"] = "command-response";
	})(MessageType = exports.MessageType || (exports.MessageType = {}));


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var guid_1 = __webpack_require__(61);
	var MessageTypes_1 = __webpack_require__(63);
	/* tslint:disable no-any */
	function isMessage(data) {
	    if (!data) {
	        return false;
	    }
	    var message = data;
	    if (!message || !message.msgGuid || !message.msgType) {
	        return false;
	    }
	    if (!guid_1.Guid.isGuid(message.msgGuid)) {
	        return false;
	    }
	    if (typeof message.msgType !== 'string') {
	        return false;
	    }
	    var messageTypes = [MessageTypes_1.MessageType.Command, MessageTypes_1.MessageType.CommandResponse, MessageTypes_1.MessageType.Initialize, MessageTypes_1.MessageType.Notification];
	    if (messageTypes.indexOf(message.msgType) < 0) {
	        return false;
	    }
	    return true;
	}
	exports.isMessage = isMessage;
	function isVersion(versionNumber) {
	    if (!versionNumber) {
	        return false;
	    }
	    var v = versionNumber;
	    if (typeof v !== 'object') {
	        return false;
	    }
	    if (typeof v.fix !== 'number' || typeof v.minor !== 'number' || typeof v.major !== 'number') {
	        return false;
	    }
	    return true;
	}
	exports.isVersion = isVersion;
	function isInitMessage(message) {
	    if (!isMessage(message)) {
	        return false;
	    }
	    var initMessage = message;
	    if (initMessage.msgType !== MessageTypes_1.MessageType.Initialize) {
	        return false;
	    }
	    if (!initMessage.apiVersion || !isVersion(initMessage.apiVersion)) {
	        return false;
	    }
	    if (!initMessage.crossFrameVersion || !isVersion(initMessage.crossFrameVersion)) {
	        return false;
	    }
	    return true;
	}
	exports.isInitMessage = isInitMessage;
	function isCommandResponseMessage(message) {
	    if (!isMessage(message)) {
	        return false;
	    }
	    var crMessage = message;
	    if (crMessage.msgType !== MessageTypes_1.MessageType.CommandResponse) {
	        return false;
	    }
	    if (!guid_1.Guid.isGuid(crMessage.commandGuid)) {
	        return false;
	    }
	    if (!crMessage.data && !crMessage.error) {
	        return false;
	    }
	    return true;
	}
	exports.isCommandResponseMessage = isCommandResponseMessage;
	function isCommandMessage(message) {
	    if (!isMessage(message)) {
	        return false;
	    }
	    var commandMessage = message;
	    if (commandMessage.msgType !== MessageTypes_1.MessageType.Command) {
	        return false;
	    }
	    if (!commandMessage.parameters || typeof commandMessage.parameters !== 'object') {
	        return false;
	    }
	    if (!commandMessage.verbId || typeof commandMessage.verbId !== 'string') {
	        return false;
	    }
	    return true;
	}
	exports.isCommandMessage = isCommandMessage;
	function isNotificationMessage(message) {
	    if (!isMessage(message)) {
	        return false;
	    }
	    var notificationMessage = message;
	    if (notificationMessage.msgType !== MessageTypes_1.MessageType.Notification) {
	        return false;
	    }
	    if (!notificationMessage.data || typeof notificationMessage.data !== 'object') {
	        return false;
	    }
	    if (!notificationMessage.notificationId || typeof notificationMessage.notificationId !== 'string') {
	        return false;
	    }
	    return true;
	}
	exports.isNotificationMessage = isNotificationMessage;


/***/ },
/* 65 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * This is an implementation of the InternalApiDispatcher interface which functions by passing messages
	 * across a frame boundary. This is usually between the code where our javscript library has been included
	 * by a 3rd party dev and another frame where Tableau server has content.
	 */
	var CrossFrameDispatcher = (function () {
	    /**
	     * Creates an instance of CrossFrameDispatcher which will use the given messenger to communicate
	     * @param _messenger an instantiated and listening messenger object
	     */
	    function CrossFrameDispatcher(_messenger) {
	        this._messenger = _messenger;
	        // Collection of pending promises which are waiting to be resolved. When we receive a response back from the other frame,
	        // these promises can be either resolved or rejected
	        this._pendingPromises = {};
	        // The collection of notification handlers which have been registered with this dispatcher
	        this._notificationHandlers = [];
	        if (!this._messenger) {
	            throw 'Missing messenger object';
	        }
	        // Set up our message handlers. We only care about incoming notifications and command responses
	        this._messenger.setCommandResponseMessageHandler(this.onCommandResponse.bind(this));
	        this._messenger.setNotificationMessageHandler(this.onNotification.bind(this));
	    }
	    ////// Start InternalApiDispatcher implementation
	    CrossFrameDispatcher.prototype.setVersionNumber = function (versionNumber) {
	        this._versionNumber = versionNumber;
	    };
	    CrossFrameDispatcher.prototype.execute = function (verb, parameters) {
	        var _this = this;
	        // To execute a verb, we first prepare a command message and then define a promise.
	        var preparedMessage = this._messenger.prepareCommandMessage(verb, parameters);
	        var promise = new Promise(function (resolve, reject) {
	            // Save off the pending promise by the messageGuid we are about to send. When a response is
	            // received, we'll be able to resolve this promise with the result
	            _this._pendingPromises[preparedMessage.messageGuid] = { resolve: resolve, reject: reject };
	        });
	        // Actually send the message and return the promise
	        preparedMessage.send();
	        return promise;
	    };
	    CrossFrameDispatcher.prototype.registerNotificationHandler = function (handler) {
	        this._notificationHandlers.push(handler);
	    };
	    CrossFrameDispatcher.prototype.unregisterNotificationHandler = function (handler) {
	        this._notificationHandlers = this._notificationHandlers.filter(function (h) { return h !== handler; });
	    };
	    ////// End InternalApiDispatcher implementation
	    CrossFrameDispatcher.prototype.onCommandResponse = function (response) {
	        // We got a command response, look through the pending promises and resolve
	        if (Object.keys(this._pendingPromises).indexOf(response.commandGuid) < 0) {
	            return; // We don't have any reference to this command, just return
	        }
	        var pendingPromise = this._pendingPromises[response.commandGuid];
	        // If we have an error defined, reject the promise
	        if (response.error) {
	            pendingPromise.reject(response.error);
	        }
	        // If we have data defined, resolve the promise
	        if (response.data) {
	            pendingPromise.resolve({ result: response.data });
	        }
	        // Clean up our pending promises object
	        delete this._pendingPromises[response.commandGuid];
	    };
	    CrossFrameDispatcher.prototype.onNotification = function (notificationMessage) {
	        // Go through each notification handler we have registered and let them know a notification came in
	        for (var _i = 0, _a = this._notificationHandlers; _i < _a.length; _i++) {
	            var handler = _a[_i];
	            try {
	                handler({ notificationId: notificationMessage.notificationId, data: notificationMessage.data });
	            }
	            catch (e) {
	                // Ignore this. Wrap in try/catch so if one handler errors, the other still get the message
	            }
	        }
	    };
	    return CrossFrameDispatcher;
	}());
	exports.CrossFrameDispatcher = CrossFrameDispatcher;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var EnumConverter_1 = __webpack_require__(14);
	exports.EnumConverter = EnumConverter_1.EnumConverter;
	var Param_1 = __webpack_require__(16);
	exports.Param = Param_1.Param;
	var TableauException_1 = __webpack_require__(15);
	exports.TableauException = TableauException_1.TableauException;


/***/ },
/* 67 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the external DashboardContent namespace.
	 * This does not follow the Impl pattern as DashboardContent is
	 * currently just a (single) property bag.
	 */
	var DashboardContent = (function () {
	    function DashboardContent(_dashboard) {
	        this._dashboard = _dashboard;
	    }
	    Object.defineProperty(DashboardContent.prototype, "dashboard", {
	        get: function () {
	            return this._dashboard;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DashboardContent;
	}());
	exports.DashboardContent = DashboardContent;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_shared_1 = __webpack_require__(9);
	/**
	 * Implementation of the external environment namespace.
	 * Environment does not follow the Impl pattern as it is
	 * just a property bag.
	 */
	var Environment = (function () {
	    function Environment(extensionEnvironment) {
	        this._apiVersion = extensionEnvironment.apiVersion;
	        this._context = api_shared_1.InternalToExternalEnumMappings.extensionContext.convert(extensionEnvironment.extensionContext);
	        this._language = extensionEnvironment.extensionLanguage;
	        this._locale = extensionEnvironment.extensionLocale;
	        this._mode = api_shared_1.InternalToExternalEnumMappings.extensionMode.convert(extensionEnvironment.extensionMode);
	        this._operatingSystem = extensionEnvironment.operatingSystem;
	        this._tableauVersion = extensionEnvironment.tableauVersion;
	    }
	    Object.defineProperty(Environment.prototype, "apiVersion", {
	        get: function () {
	            return this._apiVersion;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Environment.prototype, "context", {
	        get: function () {
	            return this._context;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Environment.prototype, "language", {
	        get: function () {
	            return this._language;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Environment.prototype, "locale", {
	        get: function () {
	            return this._locale;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Environment.prototype, "mode", {
	        get: function () {
	            return this._mode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Environment.prototype, "operatingSystem", {
	        get: function () {
	            return this._operatingSystem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Environment.prototype, "tableauVersion", {
	        get: function () {
	            return this._tableauVersion;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Environment;
	}());
	exports.Environment = Environment;


/***/ },
/* 69 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the external settings namespace.
	 */
	var Settings = (function () {
	    function Settings(settingsImpl) {
	        this.settingsImpl = settingsImpl;
	    }
	    Settings.prototype.erase = function (key) {
	        this.settingsImpl.erase(key);
	    };
	    Settings.prototype.get = function (key) {
	        return this.settingsImpl.get(key);
	    };
	    Settings.prototype.getAll = function () {
	        return this.settingsImpl.getAll();
	    };
	    Object.defineProperty(Settings.prototype, "isModified", {
	        get: function () {
	            return this.settingsImpl.isModified;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Settings.prototype.saveAsync = function () {
	        return this.settingsImpl.saveAsync();
	    };
	    Settings.prototype.set = function (key, value) {
	        this.settingsImpl.set(key, value);
	    };
	    return Settings;
	}());
	exports.Settings = Settings;


/***/ },
/* 70 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the external UI namespace.
	 */
	var UI = (function () {
	    function UI(_impl) {
	        this._impl = _impl;
	    }
	    UI.prototype.displayDialogAsync = function (url, payload, options) {
	        return this._impl.displayDialogAsync(url, payload, options);
	    };
	    UI.prototype.closeDialog = function (payload) {
	        this._impl.closeDialog(payload);
	    };
	    return UI;
	}());
	exports.UI = UI;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_shared_1 = __webpack_require__(9);
	var InitializationServiceImpl_1 = __webpack_require__(72);
	var SettingsServiceImpl_1 = __webpack_require__(73);
	var UIServiceImpl_1 = __webpack_require__(74);
	function registerAllExtensionsServices(dispatcher) {
	    api_shared_1.ApiServiceRegistry.instance.registerService(new InitializationServiceImpl_1.InitializationServiceImpl(dispatcher));
	    api_shared_1.ApiServiceRegistry.instance.registerService(new SettingsServiceImpl_1.SettingsServiceImpl(dispatcher));
	    api_shared_1.ApiServiceRegistry.instance.registerService(new UIServiceImpl_1.UIServiceImpl(dispatcher));
	}
	exports.registerAllExtensionsServices = registerAllExtensionsServices;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(3);
	var InitializationServiceImpl = (function () {
	    function InitializationServiceImpl(dispatcher) {
	        this.dispatcher = dispatcher;
	    }
	    Object.defineProperty(InitializationServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "InitializationService" /* InitializationService */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    InitializationServiceImpl.prototype.initializeDashboardExtensionsAsync = function (isExtensionDialg) {
	        var params = (_a = {}, _a[api_internal_contract_1.ParameterId.IsExtensionDialog] = isExtensionDialg, _a);
	        // We don't need any parameters for this call because they are added in for us by the dispatcher
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.InitializeExtension, params).then(function (response) {
	            // TODO - Validate return value
	            var result = response.result;
	            return result;
	        });
	        var _a;
	    };
	    return InitializationServiceImpl;
	}());
	exports.InitializationServiceImpl = InitializationServiceImpl;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(3);
	var api_utils_1 = __webpack_require__(66);
	var SettingsServiceImpl = (function () {
	    function SettingsServiceImpl(dispatcher) {
	        this.dispatcher = dispatcher;
	    }
	    Object.defineProperty(SettingsServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "SettingsService" /* SettingsService */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SettingsServiceImpl.prototype.saveSettingsAsync = function (settings) {
	        var parameters = (_a = {}, _a[api_internal_contract_1.ParameterId.SettingsValues] = settings, _a);
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.SaveExtensionSettings, parameters).then(function (value) {
	            var result = value.result;
	            if (!result || !result.settingsValues) {
	                throw api_utils_1.TableauException.internalError(['saving settings.']);
	            }
	            return (result.settingsValues);
	        });
	        var _a;
	    };
	    return SettingsServiceImpl;
	}());
	exports.SettingsServiceImpl = SettingsServiceImpl;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(3);
	var UIServiceImpl = (function () {
	    function UIServiceImpl(dispatcher) {
	        this.dispatcher = dispatcher;
	    }
	    Object.defineProperty(UIServiceImpl.prototype, "serviceName", {
	        get: function () {
	            return "UIService" /* UIService */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    UIServiceImpl.prototype.displayDialogAsync = function (url, payload) {
	        var parameters = (_a = {},
	            _a[api_internal_contract_1.ParameterId.ExtensionDialogUrl] = url,
	            _a[api_internal_contract_1.ParameterId.ExtensionDialogPayload] = payload,
	            _a);
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.DisplayDialog, parameters).then(function (response) {
	            return;
	        });
	        var _a;
	    };
	    UIServiceImpl.prototype.closeDialog = function (payload) {
	        var parameters = (payload) ? (_a = {}, _a[api_internal_contract_1.ParameterId.ExtensionDialogPayload] = payload, _a) : {};
	        return this.dispatcher.execute(api_internal_contract_1.VerbId.CloseDialog, parameters).then(function (response) {
	            return;
	        });
	        var _a;
	    };
	    return UIServiceImpl;
	}());
	exports.UIServiceImpl = UIServiceImpl;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_shared_1 = __webpack_require__(9);
	var api_utils_1 = __webpack_require__(66);
	var SettingsImpl = (function () {
	    function SettingsImpl(settingsInfo) {
	        // Since promises can't be introspected for state, keep a variable that
	        // indicates a save is in progress, so that set/erase can't be called during a save.
	        this._saveInProgress = false;
	        this.initializeSettings(settingsInfo);
	    }
	    SettingsImpl.prototype.erase = function (key) {
	        api_utils_1.Param.verifyValue(key, 'key');
	        // Only make a modification if we have the key already
	        if (this._currentSettings[key]) {
	            this.verifySettingsAreUnlocked();
	            delete this._currentSettings[key];
	            this._isModified = true;
	        }
	    };
	    SettingsImpl.prototype.get = function (key) {
	        api_utils_1.Param.verifyValue(key, 'key');
	        return this._currentSettings[key];
	    };
	    SettingsImpl.prototype.getAll = function () {
	        // Returns a mutable copy of the settings
	        return Object.assign({}, this._currentSettings);
	    };
	    Object.defineProperty(SettingsImpl.prototype, "isModified", {
	        get: function () {
	            return this._isModified;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SettingsImpl.prototype.saveAsync = function () {
	        var _this = this;
	        this.verifySettingsAreUnlocked();
	        // Just resolve immediately if settings are unchanged
	        if (!this._isModified) {
	            return Promise.resolve(this._currentSettings);
	        }
	        this._saveInProgress = true;
	        // Use the settings service to save settings to twb
	        var settingsService = api_shared_1.ApiServiceRegistry.instance.getService("SettingsService" /* SettingsService */);
	        return settingsService.saveSettingsAsync(this._currentSettings).then(function (newSettings) {
	            _this._saveInProgress = false;
	            _this._isModified = false;
	            Object.assign(_this._currentSettings, newSettings);
	            return newSettings;
	        });
	    };
	    SettingsImpl.prototype.set = function (key, value) {
	        api_utils_1.Param.verifyValue(key, 'key'); // Key shouldn't be an empty string.
	        api_utils_1.Param.verifyString(value, 'value'); // Empty string value is allowed.
	        this.verifySettingsAreUnlocked();
	        this._currentSettings[key] = value;
	        this._isModified = true;
	    };
	    SettingsImpl.prototype.initializeSettings = function (settingsInfo) {
	        api_utils_1.Param.verifyValue(settingsInfo, 'settingsInfo');
	        api_utils_1.Param.verifyValue(settingsInfo.settingsValues, 'settingsInfo.SettingsValues');
	        this._currentSettings = settingsInfo.settingsValues;
	        // Reset the isModified flag
	        this._isModified = false;
	    };
	    /**
	     * This helper should be called before any local update to this.currentSettings.
	     * Checks if a current save call is still in progress and throws an error if so.
	     */
	    SettingsImpl.prototype.verifySettingsAreUnlocked = function () {
	        if (this._saveInProgress) {
	            throw api_utils_1.TableauException.error(SettingsImpl.ASYNC_SAVE_IN_PROGRESS);
	        }
	    };
	    SettingsImpl.ASYNC_SAVE_IN_PROGRESS = 'Async Save is in progress, updating settings is not allowed.';
	    return SettingsImpl;
	}());
	exports.SettingsImpl = SettingsImpl;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Contract = __webpack_require__(77);
	var api_internal_contract_1 = __webpack_require__(3);
	var api_shared_1 = __webpack_require__(9);
	var UIImpl = (function () {
	    function UIImpl() {
	    }
	    UIImpl.prototype.displayDialogAsync = function (url, payload, options) {
	        var uiService = api_shared_1.ApiServiceRegistry.instance.getService("UIService" /* UIService */);
	        var notificationService = api_shared_1.ApiServiceRegistry.instance.getService("notification-service" /* Notification */);
	        return new Promise(function (resolve, reject) {
	            // TODO: 719549 send and handle intial payload
	            uiService.displayDialogAsync(url, '').then(function () {
	                var unregisterFn = notificationService.registerHandler(api_internal_contract_1.NotificationId.ExtensionDialogUpdate, function (model) {
	                    return true; // Let through any dialog update event
	                }, function (event) {
	                    if (event.isCloseEvent) {
	                        resolve(event.closePayload);
	                    }
	                    else {
	                        // TODO reconcile with TableauError story
	                        throw new Error(Contract.ErrorCodes.DialogClosedByUser);
	                    }
	                    unregisterFn();
	                });
	            });
	        });
	    };
	    UIImpl.prototype.closeDialog = function (payload) {
	        var uiService = api_shared_1.ApiServiceRegistry.instance.getService("UIService" /* UIService */);
	        uiService.closeDialog(payload);
	    };
	    return UIImpl;
	}());
	exports.UIImpl = UIImpl;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(20));


/***/ },
/* 78 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the external Extensions namespace.
	 */
	var Extensions = (function () {
	    function Extensions(extensionImpl) {
	        this.extensionImpl = extensionImpl;
	        this.extensionImpl = extensionImpl;
	    }
	    Object.defineProperty(Extensions.prototype, "dashboardContent", {
	        get: function () {
	            return this.extensionImpl.dashboardContent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Extensions.prototype, "environment", {
	        get: function () {
	            return this.extensionImpl.environment;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Extensions.prototype, "settings", {
	        get: function () {
	            return this.extensionImpl.settings;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Extensions.prototype, "ui", {
	        get: function () {
	            return this.extensionImpl.ui;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Extensions.prototype.initializeAsync = function () {
	        return this.extensionImpl.initializeAsync(false);
	    };
	    Extensions.prototype.initializeDialogAsync = function () {
	        return this.extensionImpl.initializeAsync(true);
	    };
	    return Extensions;
	}());
	exports.Extensions = Extensions;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_core_1 = __webpack_require__(80);
	var api_internal_contract_1 = __webpack_require__(101);
	var api_utils_1 = __webpack_require__(102);
	var AddInApiPresLayerImpl_1 = __webpack_require__(103);
	var DesktopApiDispatcher_1 = __webpack_require__(104);
	var QtWebChannelImpl_1 = __webpack_require__(105);
	/**
	 * Wrapper for all the bootstrapping logic. This code attempts to initialize the qt pres-layer
	 * as well as the desktop dispatcher. It then assigns it to the global desktop dispatcher to
	 * be picked up by the add-in external Api
	 */
	function doBootstrap() {
	    if (!QtWebChannelImpl_1.hasQt()) {
	        return Promise.reject('Not running in desktop with qt available');
	    }
	    // First we need to initialize the webchannel pres-layer
	    var dispatcherPromise = QtWebChannelImpl_1.initializeWebChannelPresLayer().then(function (preslayer) {
	        var presLayerApi = new AddInApiPresLayerImpl_1.AddInApiPresLayerImpl(preslayer);
	        if (!presLayerApi.AddInInstanceInfo.addInLocatorPresModel) {
	            throw api_utils_1.TableauException.isUndefined(['AddInInstanceInfo']);
	        }
	        // Initialize the apiEventHandler and the desktopDispatcher with it
	        var apiEventHandler = new api_core_1.ApiEventHandler(presLayerApi, presLayerApi.AddInInstanceInfo.addInLocatorPresModel, true);
	        var desktopDispatcher = new DesktopApiDispatcher_1.DesktopApiDispatcher(apiEventHandler);
	        return desktopDispatcher;
	    });
	    // Assign the desktop dispatcher for the other project to find it
	    api_internal_contract_1.InternalApiDispatcherHolder.setDesktopDispatcherPromise(dispatcherPromise);
	    return dispatcherPromise;
	}
	exports.doBootstrap = doBootstrap;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(81));
	var Events_1 = __webpack_require__(90);
	exports.NotificationId = Events_1.NotificationId;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var api_utils_1 = __webpack_require__(83);
	var Params_1 = __webpack_require__(84);
	var CommandMappingRegistryFactory_1 = __webpack_require__(85);
	var EventMappingRegistryFactory_1 = __webpack_require__(89);
	var ParameterMappingRegistryFactory_1 = __webpack_require__(94);
	/**
	 * Main class for the api-core project. This class is responsible for executing comamnd and marshalling notifications
	 * between the internal Api and the pres-layer Api. After construction, SetVersionNumber must be called in order to
	 * use this class
	 *
	 * @export
	 * @class ApiEventHandler
	 */
	var ApiEventHandler = (function () {
	    /**
	     * Creates an instance of ApiEventHandler.
	     * @param {PresentationLayer} presLayer - An implementation of the pres-layer Api to use
	     * @param {AddInLocatorPresModel} addInLocatorPresModel - locator for the add-in which is being referenced
	     * @param {runningInDesktop} boolean - true if this is ApiEventHandler is created in a Desktop context.
	     * @memberof ApiEventHandler
	     */
	    function ApiEventHandler(_presLayer, _presLayerAddInLocator, _runningInDesktop) {
	        this._presLayer = _presLayer;
	        this._presLayerAddInLocator = _presLayerAddInLocator;
	        this._runningInDesktop = _runningInDesktop;
	    }
	    /**
	     * Sets the internal Api version number which the external library is expecting to use. This must be called before
	     * anything else in order to properly set up the translation layers.
	     *
	     * @param {VersionNumber} versionNumber
	     * @memberof ApiEventHandler
	     */
	    ApiEventHandler.prototype.setVersionNumber = function (versionNumber) {
	        this._versionNumber = versionNumber;
	        // Initialize all our registries
	        this._commandRegistry = CommandMappingRegistryFactory_1.CommandMappingRegistryFactory.createCommandMappingRegistry(versionNumber, this._runningInDesktop);
	        this._apiToPresLayerRegistry = ParameterMappingRegistryFactory_1.ParameterMappingRegistryFactory.createApiToPresLayerParamRegistry(versionNumber);
	        this._presLayerToApiRegistry = ParameterMappingRegistryFactory_1.ParameterMappingRegistryFactory.createPresLayerToApiParamRegistry(versionNumber);
	        this._eventRegistry = EventMappingRegistryFactory_1.EventMappingRegistryFactory.createEventMappingRegistry(versionNumber);
	        // Convert our addInLocator to the Api version
	        this._apiExtensionLocator = this._presLayerToApiRegistry
	            .get(Params_1.ParameterId.AddInLocator, api_internal_contract_1.ParameterId.ExtensionLocator)(this._presLayerAddInLocator);
	        for (var _i = 0, _a = Object.keys(this._eventRegistry); _i < _a.length; _i++) {
	            var plEventId = _a[_i];
	            // Register for all notifications we know about and bind the event type to the callback
	            this._presLayer.registerNotificationHandler(plEventId, this.onPresLayerNotification.bind(this, plEventId));
	        }
	    };
	    /**
	     * Sets an event handler function to be notified when Api events come in. Only a single registration is supported.
	     *
	     * @param {NotificationHandler} eventHandler
	     * @memberof ApiEventHandler
	     */
	    ApiEventHandler.prototype.setEventHandler = function (eventHandler) {
	        this._eventHandler = eventHandler;
	        // TODO - Register for pres layer events
	    };
	    /**
	     * Executes the requested Api command by converting the parameters, running the command against the pres-layer,
	     * then processing the result back into a format the Api can understand
	     *
	     * @param {VerbId} verb
	     * @param {ExecuteParameters} parameters
	     * @returns {Promise<ExecuteResponse>}
	     * @memberof ApiEventHandler
	     */
	    ApiEventHandler.prototype.execute = function (verb, parameters) {
	        var _this = this;
	        this.assertInitialized();
	        var command = this._commandRegistry.getCommand(verb);
	        parameters = parameters || {};
	        // Augment the command with the locator if it's needed
	        if (command.needsAddInLocator) {
	            parameters[api_internal_contract_1.ParameterId.ExtensionLocator] = this._apiExtensionLocator;
	        }
	        var commandsParams = command.createParams(parameters, this._apiToPresLayerRegistry);
	        return this._presLayer.invokeCommand(command.namespace, command.commandId, commandsParams)
	            .then(function (commandResult) {
	            var convertedResult = command.ProcessResult(commandResult, _this._presLayerToApiRegistry);
	            return {
	                result: convertedResult
	            };
	        });
	    };
	    Object.defineProperty(ApiEventHandler.prototype, "ApiExtensionLocator", {
	        get: function () {
	            return this._apiExtensionLocator;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Helper method to check that things are initialized as expected. Throws if initialization not complete
	     *
	     * @private
	     * @memberof ApiEventHandler
	     */
	    ApiEventHandler.prototype.assertInitialized = function () {
	        if (!this._versionNumber) {
	            throw api_utils_1.TableauException.error(ApiEventHandler.VERSION_NOT_CONFIGURED);
	        }
	    };
	    /**
	     * Called when a new event notification comes in from the presentation layer
	     *
	     * @param eventId The pres layer event id
	     * @param presModel The pres model that is included with the event
	     */
	    ApiEventHandler.prototype.onPresLayerNotification = function (eventId, presModel) {
	        // First look up this eventId in our registry and convert to presModel
	        var eventMapping = this._eventRegistry[eventId];
	        var apiModel = eventMapping.converter(presModel);
	        if (this._eventHandler) {
	            this._eventHandler(eventMapping.apiId, apiModel);
	        }
	    };
	    ApiEventHandler.VERSION_NOT_CONFIGURED = 'VersionNumber not yet configured. Cannot take any actions';
	    return ApiEventHandler;
	}());
	exports.ApiEventHandler = ApiEventHandler;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(4));
	__export(__webpack_require__(5));
	__export(__webpack_require__(6));
	__export(__webpack_require__(7));
	__export(__webpack_require__(8));


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var EnumConverter_1 = __webpack_require__(14);
	exports.EnumConverter = EnumConverter_1.EnumConverter;
	var Param_1 = __webpack_require__(16);
	exports.Param = Param_1.Param;
	var TableauException_1 = __webpack_require__(15);
	exports.TableauException = TableauException_1.TableauException;


/***/ },
/* 84 */
/***/ function(module, exports) {

	"use strict";
	// -----------------------------------------------------------------------------
	//
	// This file is the copyrighted property of Tableau Software and is protected
	// by registered patents and other applicable U.S. and international laws and
	// regulations.
	//
	// Unlicensed use of the contents of this file is prohibited. Please refer to
	// the NOTICES.txt file for further details.
	//
	// -----------------------------------------------------------------------------
	// WARNING: Computer generated file.  Do not hand modify.
	// DEPENDS ON: ['../js-api/api-core/node_modules/@tableau/preslayer-codegen-typescript/templates/params-ts.template', u'../js-api/api-core/temp-pres-layer/all-params.data']
	Object.defineProperty(exports, "__esModule", { value: true });
	var ParameterId;
	(function (ParameterId) {
	    // DPI_IntegerRLE, having type int[]
	    ParameterId["IntegerRLE"] = "intRle";
	    // DPI_UnsignedIntegerRLE, having type uint[]
	    ParameterId["UnsignedIntegerRLE"] = "uintRle";
	    // DPI_FloatRLE, having type float[]
	    ParameterId["FloatRLE"] = "floatRle";
	    // DPI_ParameterID, having type string
	    ParameterId["ParameterID"] = "paramType";
	    // DPI_AllowCustomDatabase, having type bool
	    ParameterId["AllowCustomDatabase"] = "allowCustomDatabase";
	    // DPI_AllowCustomSchema, having type bool
	    ParameterId["AllowCustomSchema"] = "allowCustomSchema";
	    // DPI_AllowCustomSQL, having type bool
	    ParameterId["AllowCustomSQL"] = "allowCustomSql";
	    // DPI_AllowCustomSQLWithoutSchema, having type bool
	    ParameterId["AllowCustomSQLWithoutSchema"] = "allowCustomSqlWithoutSchema";
	    // DPI_AllowPreviewData, having type bool
	    ParameterId["AllowPreviewData"] = "allowPreviewData";
	    // DPI_AllowStoredProc, having type bool
	    ParameterId["AllowStoredProc"] = "allowStoredProcedure";
	    // DPI_AllowUnion, having type bool
	    ParameterId["AllowUnion"] = "allowUnion";
	    // DPI_AreVariablesVisible, having type bool
	    ParameterId["AreVariablesVisible"] = "areVariablesVisible";
	    // DPI_AttrLegacyConnection, having type bool
	    ParameterId["AttrLegacyConnection"] = "widgetAttrLegacy";
	    // DPI_AttrReadUncommitted, having type bool
	    ParameterId["AttrReadUncommitted"] = "widgetAttrReadUncommittedData";
	    // DPI_AttrRequireSSL, having type bool
	    ParameterId["AttrRequireSSL"] = "widgetAttrRequireSsl";
	    // DPI_AttrRequireEncryption, having type bool
	    ParameterId["AttrRequireEncryption"] = "widgetAttrRequireEncryption";
	    // DPI_Bool, having type bool
	    ParameterId["Bool"] = "bool";
	    // DPI_CanPartition, having type bool
	    ParameterId["CanPartition"] = "canPartition";
	    // DPI_CanRecommendDataSources, having type bool
	    ParameterId["CanRecommendDataSources"] = "canRecommendDatasources";
	    // DPI_CanRecommendTables, having type bool
	    ParameterId["CanRecommendTables"] = "canRecommendTables";
	    // DPI_CheckPermissions, having type bool
	    ParameterId["CheckPermissions"] = "checkPermissions";
	    // DPI_DatabaseNameOptional, having type bool
	    ParameterId["DatabaseNameOptional"] = "databaseNameOptional";
	    // DPI_DatabaseWHOptional, having type bool
	    ParameterId["DatabaseWHOptional"] = "databaseWarehouseOptional";
	    // DPI_DoValidation, having type bool
	    ParameterId["DoValidation"] = "doValidation";
	    // DPI_DoneLoadingAllSheets, having type bool
	    ParameterId["DoneLoadingAllSheets"] = "googleSheetDoneLoading";
	    // DPI_GABasicItemsEnabled, having type bool
	    ParameterId["GABasicItemsEnabled"] = "gaBasicItemsEnabled";
	    // DPI_GADimensionMeasuresEnabled, having type bool
	    ParameterId["GADimensionMeasuresEnabled"] = "gaDimensionsMeasuresEnabled";
	    // DPI_GAFiltersEnabled, having type bool
	    ParameterId["GAFiltersEnabled"] = "gaFiltersEnabled";
	    // DPI_HasDatabase, having type bool
	    ParameterId["HasDatabase"] = "hasDatabase";
	    // DPI_HasDataLoss, having type bool
	    ParameterId["HasDataLoss"] = "hasDataLoss";
	    // DPI_HasFastMetadata, having type bool
	    ParameterId["HasFastMetadata"] = "hasFastMetadata";
	    // DPI_HasNewlyDiscoveredSchema, having type bool
	    ParameterId["HasNewlyDiscoveredSchema"] = "hasNewlyDiscoveredSchema";
	    // DPI_HasPermissions, having type bool
	    ParameterId["HasPermissions"] = "hasPermissions";
	    // DPI_HasSchema, having type bool
	    ParameterId["HasSchema"] = "hasSchema";
	    // DPI_HasSchemaCount, having type bool
	    ParameterId["HasSchemaCount"] = "hasSchemaCount";
	    // DPI_HasTables, having type bool
	    ParameterId["HasTables"] = "hasTables";
	    // DPI_HasUncommittedChanges, having type bool
	    ParameterId["HasUncommittedChanges"] = "hasUncommittedChanges";
	    // DPI_HasWarehouse, having type bool
	    ParameterId["HasWarehouse"] = "hasWarehouse";
	    // DPI_HasWarning, having type bool
	    ParameterId["HasWarning"] = "hasWarning";
	    // DPI_IsCalculated, having type bool
	    ParameterId["IsCalculated"] = "isCalculated";
	    // DPI_IsConnectedToDataSource, having type bool
	    ParameterId["IsConnectedToDataSource"] = "isConnectedDatasource";
	    // DPI_IsDisabledDataConnection, having type bool
	    ParameterId["IsDisabledDataConnection"] = "isDisabledDataConnection";
	    // DPI_IsEditable, having type bool
	    ParameterId["IsEditable"] = "isEditable";
	    // DPI_IsEnabled, having type bool
	    ParameterId["IsEnabled"] = "isEnabled";
	    // DPI_IsFinishedConnecting, having type bool
	    ParameterId["IsFinishedConnecting"] = "isFinishedConnecting";
	    // DPI_IsHidden, having type bool
	    ParameterId["IsHidden"] = "isHidden";
	    // DPI_IsMultiTable, having type bool
	    ParameterId["IsMultiTable"] = "isMultiTable";
	    // DPI_IsNewCustomSQL, having type bool
	    ParameterId["IsNewCustomSQL"] = "isNewCustomSql";
	    // DPI_IsNewDataSource, having type bool
	    ParameterId["IsNewDataSource"] = "isNewDataSrc";
	    // DPI_IsPublishedFederated, having type bool
	    ParameterId["IsPublishedFederated"] = "isPublishedFederated";
	    // DPI_IsSampled, having type bool
	    ParameterId["IsSampled"] = "isSampled";
	    // DPI_IsSchemaMemberNewlyDiscovered, having type bool
	    ParameterId["IsSchemaMemberNewlyDiscovered"] = "isSchemaMemberNewlyDiscovered";
	    // DPI_IsSlowFast, having type bool
	    ParameterId["IsSlowFast"] = "isSlowfast";
	    // DPI_IsSupported, having type bool
	    ParameterId["IsSupported"] = "isSupported";
	    // DPI_IsTableSelectionVisible, having type bool
	    ParameterId["IsTableSelectionVisible"] = "isTableSelectionVisible";
	    // DPI_IsTableauServerDatasource, having type bool
	    ParameterId["IsTableauServerDatasource"] = "isTableauServerDatasource";
	    // DPI_IsTableauServerDatasourceConnectable, having type bool
	    ParameterId["IsTableauServerDatasourceConnectable"] = "isTableauServerDatasourceConnectable";
	    // DPI_IsTableauServerDatasourceDownloadable, having type bool
	    ParameterId["IsTableauServerDatasourceDownloadable"] = "isTableauServerDatasourceDownloadable";
	    // DPI_IsVisible, having type bool
	    ParameterId["IsVisible"] = "isVisible";
	    // DPI_NeedFlatten, having type bool
	    ParameterId["NeedFlatten"] = "needFlatten";
	    // DPI_SSLRequiresCertificate, having type bool
	    ParameterId["SSLRequiresCertificate"] = "sslRequiresCertificate";
	    // DPI_SchemaOptional, having type bool
	    ParameterId["SchemaOptional"] = "schemaOptional";
	    // DPI_ServiceNameOptional, having type bool
	    ParameterId["ServiceNameOptional"] = "serviceNameOptional";
	    // DPI_ShouldWarnForCrossSchemaJoins, having type bool
	    ParameterId["ShouldWarnForCrossSchemaJoins"] = "shouldWarnCrossSchemaJoins";
	    // DPI_ShowBrowseButton, having type bool
	    ParameterId["ShowBrowseButton"] = "showBrowseButton";
	    // DPI_ShowConnectionPrompt, having type bool
	    ParameterId["ShowConnectionPrompt"] = "showConnectionPrompt";
	    // DPI_ShowDBBrowseButton, having type bool
	    ParameterId["ShowDBBrowseButton"] = "showDbBrowseButton";
	    // DPI_ShowDBNamePrompt, having type bool
	    ParameterId["ShowDBNamePrompt"] = "showDbPrompt";
	    // DPI_ShowDBWHNamePrompt, having type bool
	    ParameterId["ShowDBWHNamePrompt"] = "showDbwhPrompt";
	    // DPI_ShowImportSSLCertLabel, having type bool
	    ParameterId["ShowImportSSLCertLabel"] = "showImportSslcertLabel";
	    // DPI_ShowPortPrompt, having type bool
	    ParameterId["ShowPortPrompt"] = "showPortPrompt";
	    // DPI_ShowSSLCheckbox, having type bool
	    ParameterId["ShowSSLCheckbox"] = "showSslCheckbox";
	    // DPI_ShowEncryptionCheckbox, having type bool
	    ParameterId["ShowEncryptionCheckbox"] = "showEncryptionCheckbox";
	    // DPI_ShowServerNamePrompt, having type bool
	    ParameterId["ShowServerNamePrompt"] = "showServerPrompt";
	    // DPI_ShowServiceNamePrompt, having type bool
	    ParameterId["ShowServiceNamePrompt"] = "showServicePrompt";
	    // DPI_ShowUncommittedDataCheckbox, having type bool
	    ParameterId["ShowUncommittedDataCheckbox"] = "showUncommittedDataCheckbox";
	    // DPI_SupportsGenericAuth, having type bool
	    ParameterId["SupportsGenericAuth"] = "supportsGenericAuth";
	    // DPI_TableauServerFetchAscending, having type bool
	    ParameterId["TableauServerFetchAscending"] = "tableauServerFetchAscending";
	    // DPI_UsesRadioButton, having type bool
	    ParameterId["UsesRadioButton"] = "usesRadioButton";
	    // DPI_BigQueryLegacySQLCheckStatus, having type bool
	    ParameterId["BigQueryLegacySQLCheckStatus"] = "datasourceBigqueryLegacySqlCheckStatus";
	    // DPI_HasBigQueryLegacySQLCheck, having type bool
	    ParameterId["HasBigQueryLegacySQLCheck"] = "datasourceBigqueryLegacySqlCheck";
	    // DPI_AutoFetchLimit, having type int
	    ParameterId["AutoFetchLimit"] = "autoFetchLimit";
	    // DPI_ConnectionType, having type int
	    ParameterId["ConnectionType"] = "connectionType";
	    // DPI_IconId, having type int
	    ParameterId["IconId"] = "iconId";
	    // DPI_SelectedCatalogIndex, having type int
	    ParameterId["SelectedCatalogIndex"] = "selectedCatalogIndex";
	    // DPI_SelectedCubeIndex, having type int
	    ParameterId["SelectedCubeIndex"] = "selectedCubeIndex";
	    // DPI_SelectedGAAccountIndex, having type int
	    ParameterId["SelectedGAAccountIndex"] = "selectedGaAccountIndex";
	    // DPI_SelectedGAMeasureSetIndex, having type int
	    ParameterId["SelectedGAMeasureSetIndex"] = "selectedGaMeasureSetIndex";
	    // DPI_SelectedGAPropertyIndex, having type int
	    ParameterId["SelectedGAPropertyIndex"] = "selectedGaPropertyIndex";
	    // DPI_SelectedGASegmentIndex, having type int
	    ParameterId["SelectedGASegmentIndex"] = "selectedGaSegmentIndex";
	    // DPI_SelectedGAViewIndex, having type int
	    ParameterId["SelectedGAViewIndex"] = "selectedGaViewIndex";
	    // DPI_SelectedGoogleSheetIndex, having type int
	    ParameterId["SelectedGoogleSheetIndex"] = "selectedGoogleSheetIndex";
	    // DPI_SelectedOptionIndex, having type int
	    ParameterId["SelectedOptionIndex"] = "selectedOptionIndex";
	    // DPI_SlowMetadataCount, having type int
	    ParameterId["SlowMetadataCount"] = "slowMetadataCount";
	    // DPI_TableauServerFetchSortBy, having type int
	    ParameterId["TableauServerFetchSortBy"] = "tableauServerFetchSort";
	    // DPI_ActualParameterOrdinal, having type uint
	    ParameterId["ActualParameterOrdinal"] = "actualParameterOrdinal";
	    // DPI_ActualParameterType, having type uint
	    ParameterId["ActualParameterType"] = "actualParameterType";
	    // DPI_CharSetID, having type uint
	    ParameterId["CharSetID"] = "charsetId";
	    // DPI_DataSourceOrdinal, having type uint
	    ParameterId["DataSourceOrdinal"] = "datasourceOrdinal";
	    // DPI_FilterCount, having type uint
	    ParameterId["FilterCount"] = "filterCount";
	    // DPI_VariablesCount, having type uint
	    ParameterId["VariablesCount"] = "variablesCount";
	    // DPI_ActualParameterDisplayName, having type string
	    ParameterId["ActualParameterDisplayName"] = "actualParameterDisplayName";
	    // DPI_ActualParameterName, having type string
	    ParameterId["ActualParameterName"] = "actualParameterName";
	    // DPI_ActualParameterValue, having type string
	    ParameterId["ActualParameterValue"] = "actualParameterValue";
	    // DPI_AttrAPIVersion, having type string
	    ParameterId["AttrAPIVersion"] = "attrApiVersion";
	    // DPI_AttrAuthType, having type string
	    ParameterId["AttrAuthType"] = "widgetAttrAuthtype";
	    // DPI_AttrConnectionData, having type string
	    ParameterId["AttrConnectionData"] = "attrConnectionData";
	    // DPI_AttrConnectionName, having type string
	    ParameterId["AttrConnectionName"] = "attrConnectionName";
	    // DPI_AttrConnectionType, having type string
	    ParameterId["AttrConnectionType"] = "widgetAttrConnectiontype";
	    // DPI_AttrConnectionURL, having type string
	    ParameterId["AttrConnectionURL"] = "attrConnectionUrl";
	    // DPI_AttrCubeSpecificationId, having type string
	    ParameterId["AttrCubeSpecificationId"] = "widgetAttrCubeSpecificationId";
	    // DPI_AttrCubeSpecificationValue, having type string
	    ParameterId["AttrCubeSpecificationValue"] = "widgetAttrCubeSpecificationValue";
	    // DPI_AttrDSN, having type string
	    ParameterId["AttrDSN"] = "widgetAttrDsn";
	    // DPI_AttrDatabase, having type string
	    ParameterId["AttrDatabase"] = "widgetAttrDb";
	    // DPI_AttrDatabaseWarehouse, having type string
	    ParameterId["AttrDatabaseWarehouse"] = "widgetAttrDbwh";
	    // DPI_AttrDriver, having type string
	    ParameterId["AttrDriver"] = "widgetAttrDriver";
	    // DPI_AttrFilename, having type string
	    ParameterId["AttrFilename"] = "widgetAttrFilename";
	    // DPI_AttrHTTPPath, having type string
	    ParameterId["AttrHTTPPath"] = "widgetAttrHttpPath";
	    // DPI_AttrIncrementalRefreshKey, having type string
	    ParameterId["AttrIncrementalRefreshKey"] = "attrIncrementalRefreshKey";
	    // DPI_AttrKerberosHost, having type string
	    ParameterId["AttrKerberosHost"] = "widgetAttrKerberosHost";
	    // DPI_AttrKerberosRealm, having type string
	    ParameterId["AttrKerberosRealm"] = "widgetAttrKerberosRealm";
	    // DPI_AttrKerberosService, having type string
	    ParameterId["AttrKerberosService"] = "widgetAttrKerberosService";
	    // DPI_AttrLastRecordToken, having type string
	    ParameterId["AttrLastRecordToken"] = "attrLastRecordToken";
	    // DPI_AttrMDWPath, having type string
	    ParameterId["AttrMDWPath"] = "widgetAttrMdwPath";
	    // DPI_AttrMDWUsername, having type string
	    ParameterId["AttrMDWUsername"] = "widgetAttrMdwUsername";
	    // DPI_AttrODBCPrompt, having type string
	    ParameterId["AttrODBCPrompt"] = "widgetAttrOdbcPrompt";
	    // DPI_AttrODBCStringExtras, having type string
	    ParameterId["AttrODBCStringExtras"] = "widgetAttrOdbcStringExtras";
	    // DPI_AttrPort, having type string
	    ParameterId["AttrPort"] = "widgetAttrPort";
	    // DPI_AttrSAPClient, having type string
	    ParameterId["AttrSAPClient"] = "widgetAttrSapClient";
	    // DPI_AttrSAPLanguage, having type string
	    ParameterId["AttrSAPLanguage"] = "widgetAttrSapLanguage";
	    // DPI_AttrEdition, having type string
	    ParameterId["AttrEdition"] = "widgetAttrSslEdition";
	    // DPI_AttrSAMLIdP, having type string
	    ParameterId["AttrSAMLIdP"] = "widgetAttrSamlIdp";
	    // DPI_AttrSSODomain, having type string
	    ParameterId["AttrSSODomain"] = "widgetAttrSsoDomain";
	    // DPI_AttrSSLCert, having type string
	    ParameterId["AttrSSLCert"] = "widgetAttrSslCert";
	    // DPI_AttrScriptVersion, having type string
	    ParameterId["AttrScriptVersion"] = "attrScriptVersion";
	    // DPI_AttrServer, having type string
	    ParameterId["AttrServer"] = "widgetAttrServer";
	    // DPI_AttrService, having type string
	    ParameterId["AttrService"] = "widgetAttrService";
	    // DPI_AttrUsername, having type string
	    ParameterId["AttrUsername"] = "widgetAttrUser";
	    // DPI_AuthenticationPrompt, having type string
	    ParameterId["AuthenticationPrompt"] = "authenticationPrompt";
	    // DPI_ButtonClickAction, having type string
	    ParameterId["ButtonClickAction"] = "buttonClickAction";
	    // DPI_ButtonCaption, having type string
	    ParameterId["ButtonCaption"] = "buttonCaption";
	    // DPI_ButtonImagePath, having type string
	    ParameterId["ButtonImagePath"] = "buttonImagePath";
	    // DPI_ButtonImagePathKey, having type string
	    ParameterId["ButtonImagePathKey"] = "buttonImagePathKey";
	    // DPI_ButtonNavigationTarget, having type string
	    ParameterId["ButtonNavigationTarget"] = "buttonNavigationTarget";
	    // DPI_Caption, having type string
	    ParameterId["Caption"] = "caption";
	    // DPI_CatalogListPrompt, having type string
	    ParameterId["CatalogListPrompt"] = "catalogListPrompt";
	    // DPI_CatalogName, having type string
	    ParameterId["CatalogName"] = "catalogName";
	    // DPI_CatalogSearchTerm, having type string
	    ParameterId["CatalogSearchTerm"] = "catalogSearchTerm";
	    // DPI_Category, having type string
	    ParameterId["Category"] = "itemCategory";
	    // DPI_ClassName, having type string
	    ParameterId["ClassName"] = "classNameForCleaning";
	    // DPI_CloudFileClassName, having type string
	    ParameterId["CloudFileClassName"] = "cloudFileClassName";
	    // DPI_CloudFileStorageProvider, having type string
	    ParameterId["CloudFileStorageProvider"] = "cloudFileStorageProvider";
	    // DPI_ConfigName, having type string
	    ParameterId["ConfigName"] = "connectionConfigName";
	    // DPI_ConnectionCaption, having type string
	    ParameterId["ConnectionCaption"] = "connectionCaption";
	    // DPI_ConnectionDescriptionLabel, having type string
	    ParameterId["ConnectionDescriptionLabel"] = "connectionDescriptionLabel";
	    // DPI_ConnectionClass, having type string
	    ParameterId["ConnectionClass"] = "connectionClassName";
	    // DPI_ConnectionName, having type string
	    ParameterId["ConnectionName"] = "connectionName";
	    // DPI_ConnectionOptionName, having type string
	    ParameterId["ConnectionOptionName"] = "connectionOptionName";
	    // DPI_ConnectionSpecificationTitle, having type string
	    ParameterId["ConnectionSpecificationTitle"] = "connectionSpecificationTitle";
	    // DPI_ConnectionTypeLabel, having type string
	    ParameterId["ConnectionTypeLabel"] = "connectionTypeLabel";
	    // DPI_ConnectionURI, having type string
	    ParameterId["ConnectionURI"] = "connectionUri";
	    // DPI_CubeDescription, having type string
	    ParameterId["CubeDescription"] = "cubeDescription";
	    // DPI_CubeLastUpdated, having type string
	    ParameterId["CubeLastUpdated"] = "cubeLastUpdated";
	    // DPI_CubeListPrompt, having type string
	    ParameterId["CubeListPrompt"] = "cubeListPrompt";
	    // DPI_CubeName, having type string
	    ParameterId["CubeName"] = "cubeName";
	    // DPI_CubeSearchTerm, having type string
	    ParameterId["CubeSearchTerm"] = "cubeSearchTerm";
	    // DPI_CurrentText, having type string
	    ParameterId["CurrentText"] = "currentText";
	    // DPI_CustomSplitStringSeparator, having type string
	    ParameterId["CustomSplitStringSeparator"] = "customSplitStringSeparator";
	    // DPI_DatasourceId, having type string
	    ParameterId["DatasourceId"] = "datasourceId";
	    // DPI_DBNamePrompt, having type string
	    ParameterId["DBNamePrompt"] = "dbNamePrompt";
	    // DPI_DBWHNamePrompt, having type string
	    ParameterId["DBWHNamePrompt"] = "dbWarehouseNamePrompt";
	    // DPI_DSClass, having type string
	    ParameterId["DSClass"] = "dsClass";
	    // DPI_DatabaseName, having type string
	    ParameterId["DatabaseName"] = "datasourceDatabaseName";
	    // DPI_DatabaseNote, having type string
	    ParameterId["DatabaseNote"] = "databaseNote";
	    // DPI_DragLabel, having type string
	    ParameterId["DragLabel"] = "dragLabel";
	    // DPI_EffectiveDateRange, having type string
	    ParameterId["EffectiveDateRange"] = "effectiveDateRange";
	    // DPI_GoogleSheetCreatedTime, having type string
	    ParameterId["GoogleSheetCreatedTime"] = "googleSheetCreatedTime";
	    // DPI_GoogleSheetId, having type string
	    ParameterId["GoogleSheetId"] = "googleSheetId";
	    // DPI_GoogleSheetLastModifiedTime, having type string
	    ParameterId["GoogleSheetLastModifiedTime"] = "googleSheetLastModifiedTime";
	    // DPI_GoogleSheetLastModifyingUser, having type string
	    ParameterId["GoogleSheetLastModifyingUser"] = "googleSheetLastModifyingUser";
	    // DPI_GoogleSheetLastViewedByUserTime, having type string
	    ParameterId["GoogleSheetLastViewedByUserTime"] = "googleSheetLastViewedByUserTime";
	    // DPI_GoogleSheetMimeType, having type string
	    ParameterId["GoogleSheetMimeType"] = "googleSheetMimeType";
	    // DPI_GoogleSheetName, having type string
	    ParameterId["GoogleSheetName"] = "googleSheetName";
	    // DPI_GoogleSheetOwner, having type string
	    ParameterId["GoogleSheetOwner"] = "googleSheetOwner";
	    // DPI_GoogleSheetThumbnailLink, having type string
	    ParameterId["GoogleSheetThumbnailLink"] = "googleSheetThumbnailLink";
	    // DPI_GoogleSheetThumbnailId, having type string
	    ParameterId["GoogleSheetThumbnailId"] = "googleSheetThumbnailId";
	    // DPI_GoogleSheetThumbnailLocalPath, having type string
	    ParameterId["GoogleSheetThumbnailLocalPath"] = "googleSheetThumbnailLocalPath";
	    // DPI_GoogleSheetWebViewLink, having type string
	    ParameterId["GoogleSheetWebViewLink"] = "googleSheetWebViewLink";
	    // DPI_GoogleSheetsListErrorMessage, having type string
	    ParameterId["GoogleSheetsListErrorMessage"] = "googleSheetsListErrorMessage";
	    // DPI_InitialSQL, having type string
	    ParameterId["InitialSQL"] = "initialSql";
	    // DPI_ISODate, having type string
	    ParameterId["ISODate"] = "isoDate";
	    // DPI_ISOEndDate, having type string
	    ParameterId["ISOEndDate"] = "isoEndDate";
	    // DPI_ISOStartDate, having type string
	    ParameterId["ISOStartDate"] = "isoStartDate";
	    // DPI_IsolationLevel, having type string
	    ParameterId["IsolationLevel"] = "datasourceIsolationLevel";
	    // DPI_ItemDescription, having type string
	    ParameterId["ItemDescription"] = "itemDescription";
	    // DPI_ItemId, having type string
	    ParameterId["ItemId"] = "itemId";
	    // DPI_KerberosHost, having type string
	    ParameterId["KerberosHost"] = "datasourceKerberosHost";
	    // DPI_KerberosRealm, having type string
	    ParameterId["KerberosRealm"] = "datasourceKerberosRealm";
	    // DPI_KerberosService, having type string
	    ParameterId["KerberosService"] = "datasourceKerberosService";
	    // DPI_Name, having type string
	    ParameterId["Name"] = "name";
	    // DPI_OptionId, having type string
	    ParameterId["OptionId"] = "optionId";
	    // DPI_PartitioningButtonLabel, having type string
	    ParameterId["PartitioningButtonLabel"] = "partitioningButtonLabel";
	    // DPI_PartitioningButtonTooltip, having type string
	    ParameterId["PartitioningButtonTooltip"] = "partitioningButtonTooltip";
	    // DPI_PartitioningText, having type string
	    ParameterId["PartitioningText"] = "queryPartitioningText";
	    // DPI_PdfStartPage, having type string
	    ParameterId["PdfStartPage"] = "pdfStartPage";
	    // DPI_PdfEndPage, having type string
	    ParameterId["PdfEndPage"] = "pdfEndPage";
	    // DPI_PortPrompt, having type string
	    ParameterId["PortPrompt"] = "portPrompt";
	    // DPI_PromptText, having type string
	    ParameterId["PromptText"] = "promptText";
	    // DPI_QueryBanding, having type string
	    ParameterId["QueryBanding"] = "queryBanding";
	    // DPI_QueryText, having type string
	    ParameterId["QueryText"] = "queryText";
	    // DPI_RecommendationUUID, having type string
	    ParameterId["RecommendationUUID"] = "recommendationUuid";
	    // DPI_SQLQuery, having type string
	    ParameterId["SQLQuery"] = "sqlQuery";
	    // DPI_SchemaComboFallbackText, having type string
	    ParameterId["SchemaComboFallbackText"] = "schemaComboFallbackText";
	    // DPI_SchemaLabel, having type string
	    ParameterId["SchemaLabel"] = "schemaLabel";
	    // DPI_SchemaMemberGlobalName, having type string
	    ParameterId["SchemaMemberGlobalName"] = "schemaMemberGlobalName";
	    // DPI_SchemaName, having type string
	    ParameterId["SchemaName"] = "datasourceSchemaName";
	    // DPI_ScriptText, having type string
	    ParameterId["ScriptText"] = "scriptText";
	    // DPI_SecondaryWhiteList, having type string
	    ParameterId["SecondaryWhiteList"] = "secondaryWhiteList";
	    // DPI_Server, having type string
	    ParameterId["Server"] = "datasourceServer";
	    // DPI_ServerNamePrompt, having type string
	    ParameterId["ServerNamePrompt"] = "serverNamePrompt";
	    // DPI_Service, having type string
	    ParameterId["Service"] = "datasourceService";
	    // DPI_ServiceNamePrompt, having type string
	    ParameterId["ServiceNamePrompt"] = "servicePrompt";
	    // DPI_SheetFormatting, having type string
	    ParameterId["SheetFormatting"] = "sheetFormatting";
	    // DPI_SlowMetadataSearchTerm, having type string
	    ParameterId["SlowMetadataSearchTerm"] = "slowMetadataSearchTerm";
	    // DPI_StandardConnectionName, having type string
	    ParameterId["StandardConnectionName"] = "datasourceStandardConnectionName";
	    // DPI_StandardConnectionPlaceholderText, having type string
	    ParameterId["StandardConnectionPlaceholderText"] = "standardConnectionPlaceholderText";
	    // DPI_StoredProcedureParameterTitle, having type string
	    ParameterId["StoredProcedureParameterTitle"] = "storedProcedureParameterTitle";
	    // DPI_TableAlias, having type string
	    ParameterId["TableAlias"] = "tableAlias";
	    // DPI_RightTableAlias, having type string
	    ParameterId["RightTableAlias"] = "rightTableAlias";
	    // DPI_TableCaption, having type string
	    ParameterId["TableCaption"] = "tableCaption";
	    // DPI_TableCollectionName, having type string
	    ParameterId["TableCollectionName"] = "tableCollectionName";
	    // DPI_TablePlaceholderText, having type string
	    ParameterId["TablePlaceholderText"] = "tablePlaceholderText";
	    // DPI_TableRanking, having type string
	    ParameterId["TableRanking"] = "tableRanking";
	    // DPI_TableSortKey, having type string
	    ParameterId["TableSortKey"] = "tableSortkey";
	    // DPI_TableTooltip, having type string
	    ParameterId["TableTooltip"] = "tableTooltip";
	    // DPI_TableToReplace, having type string
	    ParameterId["TableToReplace"] = "tableToReplace";
	    // DPI_TableWarningMessage, having type string
	    ParameterId["TableWarningMessage"] = "tableWarningMessage";
	    // DPI_TableauServerDatasourceDescription, having type string
	    ParameterId["TableauServerDatasourceDescription"] = "tableauServerDatasourceDescription";
	    // DPI_TableauServerDatasourceLastExtract, having type string
	    ParameterId["TableauServerDatasourceLastExtract"] = "tableauServerDatasourceLastExtract";
	    // DPI_TableauServerDatasourceModified, having type string
	    ParameterId["TableauServerDatasourceModified"] = "tableauServerDatasourceModified";
	    // DPI_TableauServerDatasourceOwner, having type string
	    ParameterId["TableauServerDatasourceOwner"] = "tableauServerDatasourceOwner";
	    // DPI_TableauServerDatasourcePath, having type string
	    ParameterId["TableauServerDatasourcePath"] = "tableauServerDatasourcePath";
	    // DPI_TableauServerFetchSearchQuery, having type string
	    ParameterId["TableauServerFetchSearchQuery"] = "tableauServerFetchSearchQuery";
	    // DPI_TableauServerName, having type string
	    ParameterId["TableauServerName"] = "tableauServerName";
	    // DPI_TableauServerProjectName, having type string
	    ParameterId["TableauServerProjectName"] = "tableauServerProjectName";
	    // DPI_TableauServerUsername, having type string
	    ParameterId["TableauServerUsername"] = "tableauServerUsername";
	    // DPI_TransportType, having type string
	    ParameterId["TransportType"] = "transportType";
	    // DPI_WarehouseName, having type string
	    ParameterId["WarehouseName"] = "datasourceWarehouseName";
	    // DPI_WorkgroupWorkbookName, having type string
	    ParameterId["WorkgroupWorkbookName"] = "workgroupWorkbookName";
	    // DPI_AnalyticsItemTooltip, having type string
	    ParameterId["AnalyticsItemTooltip"] = "analyticsItemTooltip";
	    // DPI_Description, having type string
	    ParameterId["Description"] = "description";
	    // DPI_DSClassCaption, having type string
	    ParameterId["DSClassCaption"] = "dsClassCaption";
	    // DPI_Formula, having type string
	    ParameterId["Formula"] = "formula";
	    // DPI_MessageText, having type string
	    ParameterId["MessageText"] = "messageText";
	    // DPI_Datasource, having type string
	    ParameterId["Datasource"] = "datasource";
	    // DPI_DatasourceSource, having type string
	    ParameterId["DatasourceSource"] = "datasourceSource";
	    // DPI_DatasourceTarget, having type string
	    ParameterId["DatasourceTarget"] = "datasourceTarget";
	    // DPI_FirstDatasource, having type string
	    ParameterId["FirstDatasource"] = "firstDatasource";
	    // DPI_NewDatasource, having type string
	    ParameterId["NewDatasource"] = "newDatasource";
	    // DPI_ParametersDatasource, having type string
	    ParameterId["ParametersDatasource"] = "parametersDatasource";
	    // DPI_PrimaryDatasource, having type string
	    ParameterId["PrimaryDatasource"] = "primaryDatasource";
	    // DPI_ButtonNavigationTargets, having type string[]
	    ParameterId["ButtonNavigationTargets"] = "buttonNavigationTargets";
	    // DPI_ConnectionDatabases, having type string[]
	    ParameterId["ConnectionDatabases"] = "connectionDatabases";
	    // DPI_ConnectionSchemas, having type string[]
	    ParameterId["ConnectionSchemas"] = "connectionSchemas";
	    // DPI_ConnectionWarehouses, having type string[]
	    ParameterId["ConnectionWarehouses"] = "connectionWarehouses";
	    // DPI_DSClasses, having type string[]
	    ParameterId["DSClasses"] = "dsClasses";
	    // DPI_PossibleChoices, having type string[]
	    ParameterId["PossibleChoices"] = "possibleChoices";
	    // DPI_StandardConnections, having type string[]
	    ParameterId["StandardConnections"] = "standardConnections";
	    // DPI_Strings, having type string[]
	    ParameterId["Strings"] = "strings";
	    // DPI_TableauServerProjectNames, having type string[]
	    ParameterId["TableauServerProjectNames"] = "tableauServerProjectNames";
	    // DPI_TableCaptions, having type string[]
	    ParameterId["TableCaptions"] = "tableCaptions";
	    // DPI_DataValues, having type object[]
	    ParameterId["DataValues"] = "dataValues";
	    // DPI_QueryBandErrors, having type object[]
	    ParameterId["QueryBandErrors"] = "queryBandErrors";
	    // DPI_QueryBandParameters, having type object[]
	    ParameterId["QueryBandParameters"] = "queryBandParameters";
	    // DPI_InitialSQLParameters, having type object[]
	    ParameterId["InitialSQLParameters"] = "initialSqlParameters";
	    // DPI_ConnectionAttributes, having type Dictionary(of string)
	    ParameterId["ConnectionAttributes"] = "connectionAttrs";
	    // DPI_ConnectionProps, having type Dictionary(of string)
	    ParameterId["ConnectionProps"] = "connectionProps";
	    // DPI_DisplayNameMap, having type Dictionary(of string)
	    ParameterId["DisplayNameMap"] = "displayNameMap";
	    // DPI_LookupTable, having type Dictionary(of string)
	    ParameterId["LookupTable"] = "lookupTable";
	    // DPI_OAuthAttrs, having type Dictionary(of string)
	    ParameterId["OAuthAttrs"] = "oauthAttrs";
	    // DPI_StringMap, having type Dictionary(of string)
	    ParameterId["StringMap"] = "stringMap";
	    // DPI_TableRankingMap, having type Dictionary(of string)
	    ParameterId["TableRankingMap"] = "tableRankingMap";
	    // DPI_WDCAttributes, having type Dictionary(of string)
	    ParameterId["WDCAttributes"] = "wdcAttrs";
	    // DPI_ConnectorAttributes, having type Dictionary(of string)
	    ParameterId["ConnectorAttributes"] = "connectorAttrs";
	    // DPI_TableRelevanceParams, having type Dictionary(of string)
	    ParameterId["TableRelevanceParams"] = "tableRelevanceParams";
	    // DPI_ActualParameterParameter, having type string
	    ParameterId["ActualParameterParameter"] = "actualParameterParameter";
	    // DPI_DataColumnName, having type string
	    ParameterId["DataColumnName"] = "dataColumnName";
	    // DPI_LHSDataColumnName, having type string
	    ParameterId["LHSDataColumnName"] = "lhsDataColumnName";
	    // DPI_RHSDataColumnName, having type string
	    ParameterId["RHSDataColumnName"] = "rhsDataColumnName";
	    // DPI_FullCubeName, having type string
	    ParameterId["FullCubeName"] = "fullCubeName";
	    // DPI_FullVariableName, having type string
	    ParameterId["FullVariableName"] = "fullVariableName";
	    // DPI_SemanticRole, having type string
	    ParameterId["SemanticRole"] = "semanticRole";
	    // DPI_StoredProcedureName, having type string
	    ParameterId["StoredProcedureName"] = "storedProcName";
	    // DPI_TableName, having type string
	    ParameterId["TableName"] = "tableName";
	    // DPI_AddedTableNames, having type string[]
	    ParameterId["AddedTableNames"] = "addedTableNames";
	    // DPI_CoalesceGroupFields, having type string[]
	    ParameterId["CoalesceGroupFields"] = "coalesceGroupFields";
	    // DPI_QualifiedNames, having type string[]
	    ParameterId["QualifiedNames"] = "qualifiedNames";
	    // DPI_JoinFieldAliases, having type string[]
	    ParameterId["JoinFieldAliases"] = "joinField_aliases";
	    // DPI_JoinInfoFields, having type string[]
	    ParameterId["JoinInfoFields"] = "joinInfoFields";
	    // DPI_PivotGroupFields, having type string[]
	    ParameterId["PivotGroupFields"] = "pivotGroupFields";
	    // DPI_RemovedTableNames, having type string[]
	    ParameterId["RemovedTableNames"] = "removedTableNames";
	    // DPI_StoredProcedures, having type string[]
	    ParameterId["StoredProcedures"] = "storedProcedures";
	    // DPI_TableNames, having type string[]
	    ParameterId["TableNames"] = "tableNames";
	    // DPI_ColumnName, having type string
	    ParameterId["ColumnName"] = "columnName";
	    // DPI_FieldName, having type string
	    ParameterId["FieldName"] = "fn";
	    // DPI_FieldNames, having type string[]
	    ParameterId["FieldNames"] = "fieldNames";
	    // DPI_GoogleSheetThumbnailImage, having type string
	    ParameterId["GoogleSheetThumbnailImage"] = "googleSheetThumbnailImage";
	    // DPI_AttrMDWPassword, having type string
	    ParameterId["AttrMDWPassword"] = "widgetAttrMdwPassword";
	    // DPI_AttrPassword, having type string
	    ParameterId["AttrPassword"] = "widgetAttrPassword";
	    // DPI_DatasourcePassword, having type string
	    ParameterId["DatasourcePassword"] = "datasourcePassword";
	    // DPI_FederatedKeychain, having type string
	    ParameterId["FederatedKeychain"] = "federatedKeychain";
	    // DPI_DataParameterID, having type string
	    ParameterId["DataParameterID"] = "dataParamType";
	    // DPI_ConnectServerWidgetType, having type ConnectServerWidgetType
	    ParameterId["ConnectServerWidgetType"] = "connectServerWidgetType";
	    // DPI_AuthenticationMode, having type Mode
	    ParameterId["AuthenticationMode"] = "authMode";
	    // DPI_ReconnectAuthMode, having type ReconnectMode
	    ParameterId["ReconnectAuthMode"] = "reconnectAuthMode";
	    // DPI_CurrentAuthOption, having type AuthOption
	    ParameterId["CurrentAuthOption"] = "currAuthOption";
	    // DPI_AuthOptionList, having type AuthOption[]
	    ParameterId["AuthOptionList"] = "authOptions";
	    // DPI_ConnectionSpecificationType, having type ConnectionSpecificationType
	    ParameterId["ConnectionSpecificationType"] = "connectionSpecificationType";
	    // DPI_DataType, having type DataType
	    ParameterId["DataType"] = "dataType";
	    // DPI_LHSDataType, having type DataType
	    ParameterId["LHSDataType"] = "lhsDataType";
	    // DPI_RHSDataType, having type DataType
	    ParameterId["RHSDataType"] = "rhsDataType";
	    // DPI_DefaultFieldRole, having type FieldRole
	    ParameterId["DefaultFieldRole"] = "defaultFieldRole";
	    // DPI_FieldRole, having type FieldRole
	    ParameterId["FieldRole"] = "fieldRole";
	    // DPI_DefaultFieldType, having type FieldType
	    ParameterId["DefaultFieldType"] = "defaultFieldType";
	    // DPI_FieldType, having type FieldType
	    ParameterId["FieldType"] = "fieldType";
	    // DPI_FieldTypeList, having type FieldType[]
	    ParameterId["FieldTypeList"] = "fieldTypeList";
	    // DPI_FieldTypeListDetail, having type FieldType[]
	    ParameterId["FieldTypeListDetail"] = "fieldTypeListDetail";
	    // DPI_AggType, having type AggType
	    ParameterId["AggType"] = "aggregation";
	    // DPI_DefaultAggType, having type AggType
	    ParameterId["DefaultAggType"] = "defaultAggregation";
	    // DPI_ForecastAgg, having type AggType
	    ParameterId["ForecastAgg"] = "forecastSummarizeTo";
	    // DPI_ForecastAutoAgg, having type AggType
	    ParameterId["ForecastAutoAgg"] = "forecastAutoSummarizeTo";
	    // DPI_ForecastAutoRangeUnits, having type AggType
	    ParameterId["ForecastAutoRangeUnits"] = "forecastAutoRangeUnits";
	    // DPI_ForecastEndOfRangeUnits, having type AggType
	    ParameterId["ForecastEndOfRangeUnits"] = "forecastEndOfRangeUnits";
	    // DPI_ForecastNextRangeUnits, having type AggType
	    ParameterId["ForecastNextRangeUnits"] = "forecastNextRangeUnits";
	    // DPI_SourceAgg, having type AggType
	    ParameterId["SourceAgg"] = "sourceAggregation";
	    // DPI_TargetAgg, having type AggType
	    ParameterId["TargetAgg"] = "targetAggregation";
	    // DPI_AggregateByAggTypes, having type AggType[]
	    ParameterId["AggregateByAggTypes"] = "aggregateByAggTypes";
	    // DPI_AggregationValues, having type AggType[]
	    ParameterId["AggregationValues"] = "aggregationValues";
	    // DPI_SortAggValues, having type AggType[]
	    ParameterId["SortAggValues"] = "sortAggValues";
	    // DPI_ColumnClass, having type ColumnClass
	    ParameterId["ColumnClass"] = "columnClass";
	    // DPI_DatePeriodType, having type DatePeriodType
	    ParameterId["DatePeriodType"] = "datePeriodType";
	    // DPI_ConnectionWidgetType, having type ConnectionWidgetType
	    ParameterId["ConnectionWidgetType"] = "connectionWidgetType";
	    // DPI_TablePillIcon, having type TablePillIcon
	    ParameterId["TablePillIcon"] = "tablePillIconType";
	    // DPI_EnumeratedEntityType, having type EntityType
	    ParameterId["EnumeratedEntityType"] = "enumeratedEntityType";
	    // DPI_PickEntitySearchType, having type PickEntitySearchType
	    ParameterId["PickEntitySearchType"] = "entitySearchType";
	    // DPI_ExpressionOp, having type Op
	    ParameterId["ExpressionOp"] = "expressionOp";
	    // DPI_ExpressionOperatorCaption, having type ExpressionOperatorCaptionPresModel
	    ParameterId["ExpressionOperatorCaption"] = "expressionOperatorCaption";
	    // DPI_RelationalExperessionOps, having type ExpressionOperatorCaptionPresModel[]
	    ParameterId["RelationalExperessionOps"] = "relationalExpressionOps";
	    // DPI_HierarchyExpressionOps, having type ExpressionOperatorCaptionPresModel[]
	    ParameterId["HierarchyExpressionOps"] = "hierarchyExpressionOps";
	    // DPI_DefaultSortDirection, having type SortDirection
	    ParameterId["DefaultSortDirection"] = "defSortOrder";
	    // DPI_SortDirection, having type SortDirection
	    ParameterId["SortDirection"] = "sortOrder";
	    // DPI_SortDirectionValues, having type SortDirection[]
	    ParameterId["SortDirectionValues"] = "sortDirectionValues";
	    // DPI_CubeMetadataCategory, having type CubeMetadataCategory
	    ParameterId["CubeMetadataCategory"] = "cubeMetadataCategory";
	    // DPI_CubeMetadataCategories, having type CubeMetadataCategory[]
	    ParameterId["CubeMetadataCategories"] = "cubeMetadataCategories";
	    // DPI_GoogleBasicInfoType, having type GoogleBasicInfoType
	    ParameterId["GoogleBasicInfoType"] = "googleBasicInfoType";
	    // DPI_GoogleAnalyticsDateRangeOptionType, having type DateRange
	    ParameterId["GoogleAnalyticsDateRangeOptionType"] = "googleAnalyticsDateRangeOptionType";
	    // DPI_TableCalcType, having type TableCalcType
	    ParameterId["TableCalcType"] = "tableCalcType";
	    // DPI_TableCalcTypeValues, having type TableCalcType[]
	    ParameterId["TableCalcTypeValues"] = "tableCalcTypeValues";
	    // DPI_RelativeAddress, having type RelativeAddress
	    ParameterId["RelativeAddress"] = "relativeAddress";
	    // DPI_RelativeValues, having type RelativeAddress[]
	    ParameterId["RelativeValues"] = "relativeValues";
	    // DPI_OrderingType, having type OrderingType
	    ParameterId["OrderingType"] = "orderingType";
	    // DPI_OrderingTypeValues, having type OrderingType[]
	    ParameterId["OrderingTypeValues"] = "orderingTypeValues";
	    // DPI_CategoricalBinItemType, having type CategoricalBinItemType
	    ParameterId["CategoricalBinItemType"] = "categoricalBinItemType";
	    // DPI_AuthenticationInfos, having type AuthenticationSettingsPresModel
	    ParameterId["AuthenticationInfos"] = "authInfo";
	    // DPI_ConnectionWidgetParams, having type ConnectionParamsPresModel
	    ParameterId["ConnectionWidgetParams"] = "widgetConnectionParams";
	    // DPI_ConnectionSettings, having type ConnectionSettingsPresModel
	    ParameterId["ConnectionSettings"] = "connectionSettings";
	    // DPI_ReconnectAuthenticationSettings, having type AuthenticationSettingsPresModel
	    ParameterId["ReconnectAuthenticationSettings"] = "reconnectAuthSettings";
	    // DPI_CubeConnectionSpecificationOption, having type CubeConnectionSpecificationOptionPresModel
	    ParameterId["CubeConnectionSpecificationOption"] = "cubeConnectionSpecificationOption";
	    // DPI_CubeConnectionSpecificationOptions, having type CubeConnectionSpecificationOptionPresModel[]
	    ParameterId["CubeConnectionSpecificationOptions"] = "cubeConnectionSpecificationOptions";
	    // DPI_CubeConnectionSpecification, having type CubeConnectionSpecificationPresModel
	    ParameterId["CubeConnectionSpecification"] = "cubeConnectionSpecification";
	    // DPI_ConnectionSettingsOption, having type ConnectionSettingsOptionPresModel
	    ParameterId["ConnectionSettingsOption"] = "connectionSettingsOption";
	    // DPI_ConnectionSettingsOptions, having type ConnectionSettingsOptionPresModel[]
	    ParameterId["ConnectionSettingsOptions"] = "connectionSettingsOptions";
	    // DPI_StringCollation, having type StringCollationPresModel
	    ParameterId["StringCollation"] = "stringCollation";
	    // DPI_DatabaseEnumeration, having type DatabaseEnumerationPresModel
	    ParameterId["DatabaseEnumeration"] = "databaseEnumeration";
	    // DPI_SchemaEnumeration, having type SchemaEnumerationPresModel
	    ParameterId["SchemaEnumeration"] = "schemaEnumeration";
	    // DPI_StandardConnectionEnumeration, having type StandardConnectionEnumerationPresModel
	    ParameterId["StandardConnectionEnumeration"] = "standardConnectionEnumeration";
	    // DPI_StoredProcedureEnumeration, having type StoredProcedureEnumerationPresModel
	    ParameterId["StoredProcedureEnumeration"] = "storedProcedureEnumeration";
	    // DPI_TableEnumeration, having type TableEnumerationPresModel
	    ParameterId["TableEnumeration"] = "tableEnumeration";
	    // DPI_WarehouseEnumeration, having type WarehouseEnumerationPresModel
	    ParameterId["WarehouseEnumeration"] = "warehouseEnumeration";
	    // DPI_SlowMetadataSchemaList, having type SlowMetadataSchemaListPresModel
	    ParameterId["SlowMetadataSchemaList"] = "slowMetadataSchemaList";
	    // DPI_SlowMetadataTableList, having type SlowMetadataTableListPresModel
	    ParameterId["SlowMetadataTableList"] = "slowMetadataTableList";
	    // DPI_CubeCatalog, having type CubeCatalogPresModel
	    ParameterId["CubeCatalog"] = "cubeCatalog";
	    // DPI_CubeCatalogs, having type CubeCatalogPresModel[]
	    ParameterId["CubeCatalogs"] = "cubeCatalogs";
	    // DPI_CubeCatalogEnumeration, having type CubeCatalogEnumerationPresModel
	    ParameterId["CubeCatalogEnumeration"] = "cubeCatalogEnumeration";
	    // DPI_Cube, having type CubePresModel
	    ParameterId["Cube"] = "cube";
	    // DPI_Cubes, having type CubePresModel[]
	    ParameterId["Cubes"] = "cubes";
	    // DPI_CubeEnumeration, having type CubeEnumerationPresModel
	    ParameterId["CubeEnumeration"] = "cubeEnumeration";
	    // DPI_GoogleAnalyticsBasicItem, having type GoogleAnalyticsBasicItemPresModel
	    ParameterId["GoogleAnalyticsBasicItem"] = "googleAnalyticsBasicItem";
	    // DPI_GAMeasureSets, having type GoogleAnalyticsBasicItemPresModel[]
	    ParameterId["GAMeasureSets"] = "gaMeasureSets";
	    // DPI_GoogleAnalyticsViews, having type GoogleAnalyticsBasicItemPresModel[]
	    ParameterId["GoogleAnalyticsViews"] = "googleAnalyticsViews";
	    // DPI_GoogleAnalyticsProperties, having type GoogleAnalyticsBasicItemPresModel[]
	    ParameterId["GoogleAnalyticsProperties"] = "googleAnalyticsProperties";
	    // DPI_GoogleBasicInfoItems, having type GoogleAnalyticsBasicItemPresModel[]
	    ParameterId["GoogleBasicInfoItems"] = "googleAnalyticsAccounts";
	    // DPI_GoogleAnalyticsComplexItem, having type GoogleAnalyticsComplexItemPresModel
	    ParameterId["GoogleAnalyticsComplexItem"] = "googleAnalyticsComplexItem";
	    // DPI_GoogleAnalyticsPossibleDimensions, having type GoogleAnalyticsComplexItemPresModel[]
	    ParameterId["GoogleAnalyticsPossibleDimensions"] = "googleAnalyticsPossibleDimensions";
	    // DPI_GoogleAnalyticsPossibleMeasures, having type GoogleAnalyticsComplexItemPresModel[]
	    ParameterId["GoogleAnalyticsPossibleMeasures"] = "googleAnalyticsPossibleMeasures";
	    // DPI_GoogleAnalyticsPossibleSegments, having type GoogleAnalyticsComplexItemPresModel[]
	    ParameterId["GoogleAnalyticsPossibleSegments"] = "googleAnalyticsPossibleSegments";
	    // DPI_GoogleAnalyticsSelectedDimensions, having type GoogleAnalyticsComplexItemPresModel[]
	    ParameterId["GoogleAnalyticsSelectedDimensions"] = "googleAnalyticsSelectedDimensions";
	    // DPI_GoogleAnalyticsSelectedMeasures, having type GoogleAnalyticsComplexItemPresModel[]
	    ParameterId["GoogleAnalyticsSelectedMeasures"] = "googleAnalyticsSelectedMeasures";
	    // DPI_GoogleAnalyticsDateRangeOption, having type GoogleAnalyticsDateRangeOptionPresModel
	    ParameterId["GoogleAnalyticsDateRangeOption"] = "googleAnalyticsDateRangeOption";
	    // DPI_GoogleAnalyticsDateRangeOptions, having type GoogleAnalyticsDateRangeOptionPresModel[]
	    ParameterId["GoogleAnalyticsDateRangeOptions"] = "googleAnalyticsDateRangeOptions";
	    // DPI_GoogleAnalyticsEndDate, having type GoogleAnalyticsDatePresModel
	    ParameterId["GoogleAnalyticsEndDate"] = "googleAnalyticsEndDate";
	    // DPI_GoogleAnalyticsStartDate, having type GoogleAnalyticsDatePresModel
	    ParameterId["GoogleAnalyticsStartDate"] = "googleAnalyticsStartDate";
	    // DPI_GoogleAnalyticsDateRange, having type GoogleAnalyticsDateRangePresModel
	    ParameterId["GoogleAnalyticsDateRange"] = "googleAnalyticsDateRange";
	    // DPI_GoogleAnalyticsQueryPartitioning, having type GoogleAnalyticsQueryPartitioningPresModel
	    ParameterId["GoogleAnalyticsQueryPartitioning"] = "googleAnalyticsQueryPartitioning";
	    // DPI_GAConnectionDescription, having type GoogleAnalyticsConnectionDescriptionPresModel
	    ParameterId["GAConnectionDescription"] = "gaConnectionDescription";
	    // DPI_GoogleSheetItem, having type GoogleSheetItemPresModel
	    ParameterId["GoogleSheetItem"] = "googleSheetItem";
	    // DPI_GoogleSheetItems, having type GoogleSheetItemPresModel[]
	    ParameterId["GoogleSheetItems"] = "googleSheetItems";
	    // DPI_GoogleSheetsListPresModel, having type GoogleSheetsListPresModel
	    ParameterId["GoogleSheetsListPresModel"] = "googleSheetsList";
	    // DPI_GoogleSheetPanePresModel, having type GoogleSheetPanePresModel
	    ParameterId["GoogleSheetPanePresModel"] = "googleSheetPane";
	    // DPI_TableauServerConnectionDescription, having type TableauServerConnectionDescriptionPresModel
	    ParameterId["TableauServerConnectionDescription"] = "tableauServerConnectionDescription";
	    // DPI_InitialSQLPresModel, having type InitialSQLPresModel
	    ParameterId["InitialSQLPresModel"] = "initialSqlPresModel";
	    // DPI_QueryBandingPresModel, having type QueryBandingPresModel
	    ParameterId["QueryBandingPresModel"] = "queryBandingPresModel";
	    // DPI_SlowMetadata, having type SlowMetadataPresModel
	    ParameterId["SlowMetadata"] = "slowMetadata";
	    // DPI_SlowMetadataSchemaSearchPresModel, having type SlowMetadataSearchPresModel
	    ParameterId["SlowMetadataSchemaSearchPresModel"] = "slowMetadataSchemaSearch";
	    // DPI_SlowMetadataTableSearchPresModel, having type SlowMetadataSearchPresModel
	    ParameterId["SlowMetadataTableSearchPresModel"] = "slowMetadataTableSearch";
	    // DPI_TableauServerProjectsPresModel, having type TableauServerProjectsPresModel
	    ParameterId["TableauServerProjectsPresModel"] = "tableauServerProjectsPresmodel";
	    // DPI_TableauServerDataSourcePresModel, having type TableauServerDataSourcePresModel
	    ParameterId["TableauServerDataSourcePresModel"] = "tableauServerDataSourcePresmodel";
	    // DPI_TableauServerDataSourcePresModels, having type TableauServerDataSourcePresModel[]
	    ParameterId["TableauServerDataSourcePresModels"] = "tableauServerDataSourcePresmodels";
	    // DPI_TableauServerDataSourcesPresModel, having type TableauServerDataSourcesPresModel
	    ParameterId["TableauServerDataSourcesPresModel"] = "tableauServerDataSourcesPresmodel";
	    // DPI_TableauServerDataPresModel, having type TableauServerDataPresModel
	    ParameterId["TableauServerDataPresModel"] = "tableauServerDataPresmodel";
	    // DPI_StoredProcedureParameterPresModel, having type StoredProcedureParameterPresModel
	    ParameterId["StoredProcedureParameterPresModel"] = "storedProcedureParameter";
	    // DPI_StoredProcedureParametersPresModel, having type StoredProcedureParameterPresModel[]
	    ParameterId["StoredProcedureParametersPresModel"] = "storedProcedureParameters";
	    // DPI_CustomSQLInfo, having type CustomSQLInfoPresModel
	    ParameterId["CustomSQLInfo"] = "customSqlInfo";
	    // DPI_ConnectionTableInfo, having type ConnectionTableInfoPresModel
	    ParameterId["ConnectionTableInfo"] = "connectionTableInfo";
	    // DPI_TableInfos, having type ConnectionTableInfoPresModel[]
	    ParameterId["TableInfos"] = "tableInfos";
	    // DPI_ConnectionDescription, having type ConnectionDescriptionPresModel
	    ParameterId["ConnectionDescription"] = "connectionDescription";
	    // DPI_ConnectionDescriptionSummary, having type ConnectionDescriptionSummaryPresModel
	    ParameterId["ConnectionDescriptionSummary"] = "connectionDescriptionSummary";
	    // DPI_ConnectionDescriptionSummaries, having type ConnectionDescriptionSummaryPresModel[]
	    ParameterId["ConnectionDescriptionSummaries"] = "connectionDescriptionSummaries";
	    // DPI_DataSourceParserValidationMode, having type DataSourceParserValidationMode
	    ParameterId["DataSourceParserValidationMode"] = "dataSourceParserValidationMode";
	    // DPI_OAuthCredentialTypeInfo, having type OAuthCredentialTypeInfoPresModel
	    ParameterId["OAuthCredentialTypeInfo"] = "oauthCredentialTypeInfo";
	    // DPI_OAuthCredentialTypeInfos, having type OAuthCredentialTypeInfoPresModel[]
	    ParameterId["OAuthCredentialTypeInfos"] = "oauthCredentialTypeInfos";
	    // DPI_OAuthSettings, having type OAuthSettingsPresModel
	    ParameterId["OAuthSettings"] = "oauthSettings";
	    // DPI_CredentialTypePropertiesFlag, having type CredentialTypePropertiesFlag
	    ParameterId["CredentialTypePropertiesFlag"] = "credentialTypePropertiesFlag";
	    // DPI_CredentialTypePropertiesFlags, having type CredentialTypePropertiesFlag[]
	    ParameterId["CredentialTypePropertiesFlags"] = "credentialTypePropertiesFlags";
	    // DPI_ConnectionTypeEnum, having type ConnectionTypeEnum
	    ParameterId["ConnectionTypeEnum"] = "connectionTypeEnum";
	    // DPI_ConnectorType, having type ConnectorType
	    ParameterId["ConnectorType"] = "connectorType";
	    // DPI_PdfPagePicker, having type PdfPagePickerPresModel
	    ParameterId["PdfPagePicker"] = "pdfPagePicker";
	    // DPI_ActivateNew, having type bool
	    ParameterId["ActivateNew"] = "activateNew";
	    // DPI_AddActions, having type bool
	    ParameterId["AddActions"] = "addActions";
	    // DPI_AddAsFloating, having type bool
	    ParameterId["AddAsFloating"] = "addAsFloating";
	    // DPI_AddColorDictionary, having type bool
	    ParameterId["AddColorDictionary"] = "addColorDictionary";
	    // DPI_AddDroplines, having type bool
	    ParameterId["AddDroplines"] = "addDroplines";
	    // DPI_AddHeaders, having type bool
	    ParameterId["AddHeaders"] = "addHeaders";
	    // DPI_AddHighlighting, having type bool
	    ParameterId["AddHighlighting"] = "addHighlighting";
	    // DPI_AddImageDictionary, having type bool
	    ParameterId["AddImageDictionary"] = "addImageDictionary";
	    // DPI_AddMarkLabels, having type bool
	    ParameterId["AddMarkLabels"] = "addMarkLabels";
	    // DPI_AddPages, having type bool
	    ParameterId["AddPages"] = "addPages";
	    // DPI_AddSelection, having type bool
	    ParameterId["AddSelection"] = "addSelection";
	    // DPI_AddToFolder, having type bool
	    ParameterId["AddToFolder"] = "addToFolder";
	    // DPI_AddVizData, having type bool
	    ParameterId["AddVizData"] = "addVizData";
	    // DPI_AlertConditionMet, having type bool
	    ParameterId["AlertConditionMet"] = "alertConditionMet";
	    // DPI_AllFields, having type bool
	    ParameterId["AllFields"] = "allFields";
	    // DPI_AllOnEmpty, having type bool
	    ParameterId["AllOnEmpty"] = "allOnEmpty";
	    // DPI_AllPages, having type bool
	    ParameterId["AllPages"] = "includeAllPages";
	    // DPI_AllowPreviewSizeChange, having type bool
	    ParameterId["AllowPreviewSizeChange"] = "allowPreviewSizeChange";
	    // DPI_AllSelectedIsEffectivelyRangeTypeAll, having type bool
	    ParameterId["AllSelectedIsEffectivelyRangeTypeAll"] = "allSelectedIsEffectivelyRangeTypeAll";
	    // DPI_AllStoryPoints, having type bool
	    ParameterId["AllStoryPoints"] = "allStorypoints";
	    // DPI_AllowAllRange, having type bool
	    ParameterId["AllowAllRange"] = "allowAllRange";
	    // DPI_AllowCreatingNewParameters, having type bool
	    ParameterId["AllowCreatingNewParameters"] = "allowCreatingNewParameters";
	    // DPI_AllowContinuousDate, having type bool
	    ParameterId["AllowContinuousDate"] = "allowContinuousDate";
	    // DPI_AllowDuplicateFieldDropOnFilterShelf, having type bool
	    ParameterId["AllowDuplicateFieldDropOnFilterShelf"] = "allowDuplicateFieldDropOnFilterShelf";
	    // DPI_AllowFilterPreset, having type bool
	    ParameterId["AllowFilterPreset"] = "allowFilterPreset";
	    // DPI_AllowHoverActions, having type bool
	    ParameterId["AllowHoverActions"] = "allowHoverActions";
	    // DPI_AllowHyphenation, having type bool
	    ParameterId["AllowHyphenation"] = "allowHyphenation";
	    // DPI_AllowJoinOnCalc, having type bool
	    ParameterId["AllowJoinOnCalc"] = "allowJoinOnCalc";
	    // DPI_AllowManualRange, having type bool
	    ParameterId["AllowManualRange"] = "allowManualRange";
	    // DPI_AllowMapping, having type bool
	    ParameterId["AllowMapping"] = "allowMapping";
	    // DPI_AllowMultiSelect, having type bool
	    ParameterId["AllowMultiSelect"] = "allowMultiSelect";
	    // DPI_AllowNull, having type bool
	    ParameterId["AllowNull"] = "allowNull";
	    // DPI_AllowPanZoom, having type bool
	    ParameterId["AllowPanZoom"] = "allowPanZoom";
	    // DPI_AllowPatternBased, having type bool
	    ParameterId["AllowPatternBased"] = "allowPatternBasedUnion";
	    // DPI_AllowPromptText, having type bool
	    ParameterId["AllowPromptText"] = "allowPromptText";
	    // DPI_AllowSaveDataSource, having type bool
	    ParameterId["AllowSaveDataSource"] = "allowSaveDataSource";
	    // DPI_AllowWholeDate, having type bool
	    ParameterId["AllowWholeDate"] = "allowWholeDate";
	    // DPI_AllowWork, having type bool
	    ParameterId["AllowWork"] = "allowWork";
	    // DPI_AllowWrap, having type bool
	    ParameterId["AllowWrap"] = "allowWrap";
	    // DPI_AppIs32Bit, having type bool
	    ParameterId["AppIs32Bit"] = "appIs32Bit";
	    // DPI_AppIs64Bit, having type bool
	    ParameterId["AppIs64Bit"] = "appIs64Bit";
	    // DPI_AppIsBeta, having type bool
	    ParameterId["AppIsBeta"] = "appIsBeta";
	    // DPI_AppIsOEM, having type bool
	    ParameterId["AppIsOEM"] = "appIsOem";
	    // DPI_AppendTde, having type bool
	    ParameterId["AppendTde"] = "appendTde";
	    // DPI_ApplyColors, having type bool
	    ParameterId["ApplyColors"] = "applyColors";
	    // DPI_ApplyNewSelection, having type bool
	    ParameterId["ApplyNewSelection"] = "applyNewSelection";
	    // DPI_AreConfidenceBandsValid, having type bool
	    ParameterId["AreConfidenceBandsValid"] = "areConfidenceBandsValid";
	    // DPI_AreDataSourceFiltersVisible, having type bool
	    ParameterId["AreDataSourceFiltersVisible"] = "areDataSourceFiltersVisible";
	    // DPI_AreExtractFiltersEnabled, having type bool
	    ParameterId["AreExtractFiltersEnabled"] = "areExtractFiltersEnabled";
	    // DPI_AreNullsIncluded, having type bool
	    ParameterId["AreNullsIncluded"] = "areNullsIncluded";
	    // DPI_AreTotalsUsed, having type bool
	    ParameterId["AreTotalsUsed"] = "areTotalsUsed";
	    // DPI_AtTheLevelFieldIsInvalid, having type bool
	    ParameterId["AtTheLevelFieldIsInvalid"] = "atTheLevelFieldIsInvalid";
	    // DPI_AutoURL, having type bool
	    ParameterId["AutoURL"] = "autoUrl";
	    // DPI_AutoUpdate, having type bool
	    ParameterId["AutoUpdate"] = "autoUpdate";
	    // DPI_BackingSheetIsDashboard, having type bool
	    ParameterId["BackingSheetIsDashboard"] = "isBackingSheetDashboard";
	    // DPI_BeginDataSourcePresModelUpdate, having type bool
	    ParameterId["BeginDataSourcePresModelUpdate"] = "beginDataSourcePresModelUpdate";
	    // DPI_AggregateDrillUp, having type bool
	    ParameterId["AggregateDrillUp"] = "boolAggregateDrillUp";
	    // DPI_BoxplotMarkExclusion, having type bool
	    ParameterId["BoxplotMarkExclusion"] = "boxplotMarkExclusion";
	    // DPI_BreakPageOnPane, having type bool
	    ParameterId["BreakPageOnPane"] = "breakPageOnPane";
	    // DPI_BrushLegends, having type bool
	    ParameterId["BrushLegends"] = "brushLegends";
	    // DPI_CachePresModels, having type bool
	    ParameterId["CachePresModels"] = "cachePresModels";
	    // DPI_CanAddConnections, having type bool
	    ParameterId["CanAddConnections"] = "canAddConnections";
	    // DPI_SortPillCanBeDragged, having type bool
	    ParameterId["SortPillCanBeDragged"] = "sortPillCanBeDragged";
	    // DPI_CanAddTable, having type bool
	    ParameterId["CanAddTable"] = "canAddTable";
	    // DPI_CanAddToDrillPath, having type bool
	    ParameterId["CanAddToDrillPath"] = "canAddToDrillPath";
	    // DPI_CanAnalyzeData, having type bool
	    ParameterId["CanAnalyzeData"] = "canAnalyzeData";
	    // DPI_CanBeAddedToSchemaViewer, having type bool
	    ParameterId["CanBeAddedToSchemaViewer"] = "canBeAddedToSchemaViewer";
	    // DPI_CanChangeDataType, having type bool
	    ParameterId["CanChangeDataType"] = "canChangeDataType";
	    // DPI_CanChangeSemanticRole, having type bool
	    ParameterId["CanChangeSemanticRole"] = "canChangeSemanticRole";
	    // DPI_CanDerive, having type bool
	    ParameterId["CanDerive"] = "canDerive";
	    // DPI_CanDrop, having type bool
	    ParameterId["CanDrop"] = "canDrop";
	    // DPI_CanEdit, having type bool
	    ParameterId["CanEdit"] = "canEdit";
	    // DPI_CanEditLegendColor, having type bool
	    ParameterId["CanEditLegendColor"] = "canEditLegendColor";
	    // DPI_CanEnableCenter, having type bool
	    ParameterId["CanEnableCenter"] = "canEnableCenter";
	    // DPI_CanShowAdvancedSettings, having type bool
	    ParameterId["CanShowAdvancedSettings"] = "canShowAdvancedSettings";
	    // DPI_CanEnableFilterStateButton, having type bool
	    ParameterId["CanEnableFilterStateButton"] = "canEnableFilterStateButton";
	    // DPI_CanFloat, having type bool
	    ParameterId["CanFloat"] = "canFloat";
	    // DPI_CanHaveTitle, having type bool
	    ParameterId["CanHaveTitle"] = "canHaveTitle";
	    // DPI_CanIgnoreUpdate, having type bool
	    ParameterId["CanIgnoreUpdate"] = "canIgnoreUpdate";
	    // DPI_CanLogTransformExplanatoryAxis, having type bool
	    ParameterId["CanLogTransformExplanatoryAxis"] = "canLogTransformExplanatoryAxis";
	    // DPI_CanNavigateBack, having type bool
	    ParameterId["CanNavigateBack"] = "canNavigateBack";
	    // DPI_CanNavigateForward, having type bool
	    ParameterId["CanNavigateForward"] = "canNavigateForward";
	    // DPI_CanScrollX, having type bool
	    ParameterId["CanScrollX"] = "canScrollX";
	    // DPI_CanScrollY, having type bool
	    ParameterId["CanScrollY"] = "canScrollY";
	    // DPI_CanSetDomain, having type bool
	    ParameterId["CanSetDomain"] = "canSetDomain";
	    // DPI_CanSetMapUnit, having type bool
	    ParameterId["CanSetMapUnit"] = "canSetMapUnit";
	    // DPI_CanShowApplyButton, having type bool
	    ParameterId["CanShowApplyButton"] = "canShowApplyButton";
	    // DPI_CanShowFilterStateButton, having type bool
	    ParameterId["CanShowFilterStateButton"] = "canShowFilterStateButton";
	    // DPI_CanShowMoreFewerButton, having type bool
	    ParameterId["CanShowMoreFewerButton"] = "canShowMoreFewerButton";
	    // DPI_CanShowSyncClientOptions, having type bool
	    ParameterId["CanShowSyncClientOptions"] = "canShowSyncClientOptions";
	    // DPI_CanSort, having type bool
	    ParameterId["CanSort"] = "canSort";
	    // DPI_CanSortOrdinally, having type bool
	    ParameterId["CanSortOrdinally"] = "canSortOrdinal";
	    // DPI_CanToggleAutomaticDrill, having type bool
	    ParameterId["CanToggleAutomaticDrill"] = "canToggleAutomaticDrill";
	    // DPI_CanToggleGeographicSearch, having type bool
	    ParameterId["CanToggleGeographicSearch"] = "canToggleGeographicSearch";
	    // DPI_CanToggleMapScale, having type bool
	    ParameterId["CanToggleMapScale"] = "canToggleMapScale";
	    // DPI_CanUseFullColorRange, having type bool
	    ParameterId["CanUseFullColorRange"] = "canUseFullColorRange";
	    // DPI_CanUseMultipleHierarchies, having type bool
	    ParameterId["CanUseMultipleHierarchies"] = "canUseMultipleHierarchies";
	    // DPI_CenterHorizontally, having type bool
	    ParameterId["CenterHorizontally"] = "centerHorizontally";
	    // DPI_CenterVertically, having type bool
	    ParameterId["CenterVertically"] = "centerVertically";
	    // DPI_ChangeAllFields, having type bool
	    ParameterId["ChangeAllFields"] = "changeAllFields";
	    // DPI_Changed, having type bool
	    ParameterId["Changed"] = "changed";
	    // DPI_ClearBrushing, having type bool
	    ParameterId["ClearBrushing"] = "clearBrushing";
	    // DPI_ClearSort, having type bool
	    ParameterId["ClearSort"] = "clearSort";
	    // DPI_ClearView, having type bool
	    ParameterId["ClearView"] = "clearView";
	    // DPI_Collapsed, having type bool
	    ParameterId["Collapsed"] = "collapsed";
	    // DPI_ConsolidateInCommit, having type bool
	    ParameterId["ConsolidateInCommit"] = "consolidateInCommit";
	    // DPI_ClusterEnableScaledCheckbox, having type bool
	    ParameterId["ClusterEnableScaledCheckbox"] = "clusterEnableScaledCheckbox";
	    // DPI_CommitPillFinished, having type bool
	    ParameterId["CommitPillFinished"] = "commitPillFinished";
	    // DPI_CompressArrays, having type bool
	    ParameterId["CompressArrays"] = "compressArrays";
	    // DPI_ComputeCompoundedRate, having type bool
	    ParameterId["ComputeCompoundedRate"] = "computeCompoundedRate";
	    // DPI_ConfidenceIntervalAllowed, having type bool
	    ParameterId["ConfidenceIntervalAllowed"] = "confidenceIntervalAllowed";
	    // DPI_ConfigIsDesktopStandard, having type bool
	    ParameterId["ConfigIsDesktopStandard"] = "configIsDesktopStandard";
	    // DPI_ConfigIsInteractor, having type bool
	    ParameterId["ConfigIsInteractor"] = "configIsInteractor";
	    // DPI_ConfigIsPublic, having type bool
	    ParameterId["ConfigIsPublic"] = "configIsPublic";
	    // DPI_ConfigIsReader, having type bool
	    ParameterId["ConfigIsReader"] = "configIsReader";
	    // DPI_ContainsQuant, having type bool
	    ParameterId["ContainsQuant"] = "containsQuant";
	    // DPI_ContainsValidDatasources, having type bool
	    ParameterId["ContainsValidDatasources"] = "containsValidDatasources";
	    // DPI_ControllerMissing, having type bool
	    ParameterId["ControllerMissing"] = "controllerMissing";
	    // DPI_CreateExtractForPublish, having type bool
	    ParameterId["CreateExtractForPublish"] = "createExtractForPublish";
	    // DPI_CrossTab, having type bool
	    ParameterId["CrossTab"] = "crossTab";
	    // DPI_CullLabels, having type bool
	    ParameterId["CullLabels"] = "cullLabels";
	    // DPI_CurrentCustViewIdFlag, having type bool
	    ParameterId["CurrentCustViewIdFlag"] = "isCurrentCustViewIdValid";
	    // DPI_DashboardEnableSnap, having type bool
	    ParameterId["DashboardEnableSnap"] = "dashboardEnableSnap";
	    // DPI_DashboardShowGrid, having type bool
	    ParameterId["DashboardShowGrid"] = "dashboardShowGrid";
	    // DPI_DataGridSortOrder, having type bool
	    ParameterId["DataGridSortOrder"] = "datagridSortOrder";
	    // DPI_DeleteExtract, having type bool
	    ParameterId["DeleteExtract"] = "deleteExtract";
	    // DPI_DeleteOnlySpecifiedSelection, having type bool
	    ParameterId["DeleteOnlySpecifiedSelection"] = "deleteOnlySpecifiedSelection";
	    // DPI_DeleteOrphans, having type bool
	    ParameterId["DeleteOrphans"] = "deleteOrphans";
	    // DPI_DimensionIsEffectivelyEmpty, having type bool
	    ParameterId["DimensionIsEffectivelyEmpty"] = "dimensionIsEffectivelyEmpty";
	    // DPI_DisabledDataConnectionClassNames, having type bool
	    ParameterId["DisabledDataConnectionClassNames"] = "disabledDataConnectionClassNames";
	    // DPI_DisablePresModelHandler, having type bool
	    ParameterId["DisablePresModelHandler"] = "disablePresModelHandler";
	    // DPI_DisplayDate, having type bool
	    ParameterId["DisplayDate"] = "displayDate";
	    // DPI_DisplayTime, having type bool
	    ParameterId["DisplayTime"] = "displayTime";
	    // DPI_DoDropUIAction, having type bool
	    ParameterId["DoDropUIAction"] = "doDropUiAction";
	    // DPI_DoMerge, having type bool
	    ParameterId["DoMerge"] = "doMerge";
	    // DPI_DoPreDropUIAction, having type bool
	    ParameterId["DoPreDropUIAction"] = "doPreDropUiAction";
	    // DPI_DoQuery, having type bool
	    ParameterId["DoQuery"] = "doQuery";
	    // DPI_DragHorz, having type bool
	    ParameterId["DragHorz"] = "dragHorz";
	    // DPI_DrillDown, having type bool
	    ParameterId["DrillDown"] = "drillDown";
	    // DPI_DropToXAxis, having type bool
	    ParameterId["DropToXAxis"] = "dropToXAxis";
	    // DPI_DropToYAxis, having type bool
	    ParameterId["DropToYAxis"] = "dropToYAxis";
	    // DPI_DropUnnamedFields, having type bool
	    ParameterId["DropUnnamedFields"] = "dropUnnamedFields";
	    // DPI_EditExisting, having type bool
	    ParameterId["EditExisting"] = "editExisting";
	    // DPI_EditingConnection, having type bool
	    ParameterId["EditingConnection"] = "editingConnection";
	    // DPI_EmbedCredentials, having type bool
	    ParameterId["EmbedCredentials"] = "embedCredentials";
	    // DPI_EmbedOAuthCredential, having type bool
	    ParameterId["EmbedOAuthCredential"] = "embedOauthCredentials";
	    // DPI_EmptyHighlightFogAll, having type bool
	    ParameterId["EmptyHighlightFogAll"] = "emptyHighlightFogAll";
	    // DPI_EnableAlphabeticSort, having type bool
	    ParameterId["EnableAlphabeticSort"] = "enableAlphabeticSort";
	    // DPI_EnableAnchor, having type bool
	    ParameterId["EnableAnchor"] = "enableAnchor";
	    // DPI_EnableAutomaticDrill, having type bool
	    ParameterId["EnableAutomaticDrill"] = "enableAutomaticDrill";
	    // DPI_EnableConfidenceBands, having type bool
	    ParameterId["EnableConfidenceBands"] = "enableConfidenceBands";
	    // DPI_EnableDataOrderSort, having type bool
	    ParameterId["EnableDataOrderSort"] = "enableDataOrderSort";
	    // DPI_EnableFieldSort, having type bool
	    ParameterId["EnableFieldSort"] = "enableFieldSort";
	    // DPI_EnableInstantAnalytics, having type bool
	    ParameterId["EnableInstantAnalytics"] = "enableInstantAnalytics";
	    // DPI_EnableLines, having type bool
	    ParameterId["EnableLines"] = "enableLines";
	    // DPI_EnableManualSort, having type bool
	    ParameterId["EnableManualSort"] = "enableManualSort";
	    // DPI_EnableMarks, having type bool
	    ParameterId["EnableMarks"] = "enableMarks";
	    // DPI_EnableMultipleSelection, having type bool
	    ParameterId["EnableMultipleSelection"] = "enableMultipleSelection";
	    // DPI_EnablePrefetching, having type bool
	    ParameterId["EnablePrefetching"] = "enablePrefetching";
	    // DPI_EnableTableCalcDensification, having type bool
	    ParameterId["EnableTableCalcDensification"] = "enableTableCalcDensification";
	    // DPI_EnableTooltips, having type bool
	    ParameterId["EnableTooltips"] = "enableTooltips";
	    // DPI_EndDataSourcePresModelUpdate, having type bool
	    ParameterId["EndDataSourcePresModelUpdate"] = "endDataSourcePresModelUpdate";
	    // DPI_EstimateNulls, having type bool
	    ParameterId["EstimateNulls"] = "estimateNulls";
	    // DPI_Exclude, having type bool
	    ParameterId["Exclude"] = "exclude";
	    // DPI_ExcludeColor, having type bool
	    ParameterId["ExcludeColor"] = "excludeColor";
	    // DPI_ExcludeCubeDenorm, having type bool
	    ParameterId["ExcludeCubeDenorm"] = "excludeCubeDenorm";
	    // DPI_ExcludeInterceptEnabled, having type bool
	    ParameterId["ExcludeInterceptEnabled"] = "excludeInterceptEnabled";
	    // DPI_ExcludeLocalFunctions, having type bool
	    ParameterId["ExcludeLocalFunctions"] = "excludeLocalFunctions";
	    // DPI_ExportDashboardImageFromSheet, having type bool
	    ParameterId["ExportDashboardImageFromSheet"] = "exportImageSheetAsDashboard";
	    // DPI_ExtSvcConfigIsAuthEnabled, having type bool
	    ParameterId["ExtSvcConfigIsAuthEnabled"] = "extSvcConfigIsAuthEnabled";
	    // DPI_ExtractFullRefresh, having type bool
	    ParameterId["ExtractFullRefresh"] = "extractFullRefresh";
	    // DPI_ExtractNeedsRefresh, having type bool
	    ParameterId["ExtractNeedsRefresh"] = "extractNeedsRefresh";
	    // DPI_ExtractPending, having type bool
	    ParameterId["ExtractPending"] = "extractPending";
	    // DPI_ExtractSelected, having type bool
	    ParameterId["ExtractSelected"] = "extractSelected";
	    // DPI_FederatableOnly, having type bool
	    ParameterId["FederatableOnly"] = "federatableOnly";
	    // DPI_FieldSortOrder, having type bool
	    ParameterId["FieldSortOrder"] = "fieldSortOrder";
	    // DPI_FieldSupportsContains, having type bool
	    ParameterId["FieldSupportsContains"] = "fieldSupportsContains";
	    // DPI_FieldSupportsEndsWith, having type bool
	    ParameterId["FieldSupportsEndsWith"] = "fieldSupportsEndsWith";
	    // DPI_FieldSupportsStartsWith, having type bool
	    ParameterId["FieldSupportsStartsWith"] = "fieldSupportsStartsWith";
	    // DPI_FillAbove, having type bool
	    ParameterId["FillAbove"] = "fillAbove";
	    // DPI_FillBelow, having type bool
	    ParameterId["FillBelow"] = "fillBelow";
	    // DPI_FillWithZeroes, having type bool
	    ParameterId["FillWithZeroes"] = "fillZeroes";
	    // DPI_FilterIsNamed, having type bool
	    ParameterId["FilterIsNamed"] = "filterIsNamed";
	    // DPI_Focus, having type bool
	    ParameterId["Focus"] = "focus";
	    // DPI_ForInternalUse, having type bool
	    ParameterId["ForInternalUse"] = "internalUse";
	    // DPI_ForceBrowserRendering, having type bool
	    ParameterId["ForceBrowserRendering"] = "forceBrowserRendering";
	    // DPI_ForceCache, having type bool
	    ParameterId["ForceCache"] = "forceCache";
	    // DPI_ForceColorFromApp, having type bool
	    ParameterId["ForceColorFromApp"] = "forceColorFromApp";
	    // DPI_ForceConnectionAttempt, having type bool
	    ParameterId["ForceConnectionAttempt"] = "forceConnectionAttempt";
	    // DPI_ForceConsolidateInCommit, having type bool
	    ParameterId["ForceConsolidateInCommit"] = "forceConsolidateInCommit";
	    // DPI_ForceExtractRefresh, having type bool
	    ParameterId["ForceExtractRefresh"] = "extractForceRefresh";
	    // DPI_ForceInterceptZero, having type bool
	    ParameterId["ForceInterceptZero"] = "forceInterceptZero";
	    // DPI_ForceOldConnectExperience, having type bool
	    ParameterId["ForceOldConnectExperience"] = "forceOldConnectExperience";
	    // DPI_ForceRelativeDate, having type bool
	    ParameterId["ForceRelativeDate"] = "forceRelativeDate";
	    // DPI_ForceToggleHighlightStateOn, having type bool
	    ParameterId["ForceToggleHighlightStateOn"] = "forceHighlightOn";
	    // DPI_ForceUserToChoose, having type bool
	    ParameterId["ForceUserToChoose"] = "forceUserToChoose";
	    // DPI_ForceWholeDate, having type bool
	    ParameterId["ForceWholeDate"] = "forceWholeDate";
	    // DPI_ForecastSelected, having type bool
	    ParameterId["ForecastSelected"] = "forecastSelected";
	    // DPI_ForecastUseAutoAgg, having type bool
	    ParameterId["ForecastUseAutoAgg"] = "forecastUseAutoSummarize";
	    // DPI_ForJoin, having type bool
	    ParameterId["ForJoin"] = "forJoin";
	    // DPI_FormatDataValueLocally, having type bool
	    ParameterId["FormatDataValueLocally"] = "formatDataValueLocally";
	    // DPI_FormatIfColumn, having type bool
	    ParameterId["FormatIfColumn"] = "formatIfColumn";
	    // DPI_FormatIfParameter, having type bool
	    ParameterId["FormatIfParameter"] = "formatIfParameter";
	    // DPI_GeographicSearchIsDataLoaded, having type bool
	    ParameterId["GeographicSearchIsDataLoaded"] = "geographicSearchDataLoaded";
	    // DPI_GeographicSearchLoadDataAsync, having type bool
	    ParameterId["GeographicSearchLoadDataAsync"] = "geographicSearchLoadDataAsync";
	    // DPI_GroupByAll, having type bool
	    ParameterId["GroupByAll"] = "groupByAll";
	    // DPI_HasAlias, having type bool
	    ParameterId["HasAlias"] = "hasAlias";
	    // DPI_HasAllMember, having type bool
	    ParameterId["HasAllMember"] = "hasAllMember";
	    // DPI_HasApply, having type bool
	    ParameterId["HasApply"] = "hasApply";
	    // DPI_HasBackgroundImage, having type bool
	    ParameterId["HasBackgroundImage"] = "hasBackgroundImage";
	    // DPI_HasBeenDismissed, having type bool
	    ParameterId["HasBeenDismissed"] = "hasBeenDismissed";
	    // DPI_HasCaption, having type bool
	    ParameterId["HasCaption"] = "hasCaption";
	    // DPI_HasCondition, having type bool
	    ParameterId["HasCondition"] = "hasCondition";
	    // DPI_HasConnectPermissions, having type bool
	    ParameterId["HasConnectPermissions"] = "hasConnectPermissions";
	    // DPI_HasDashboard, having type bool
	    ParameterId["HasDashboard"] = "hasDashboard";
	    // DPI_HasDownloadPermissions, having type bool
	    ParameterId["HasDownloadPermissions"] = "hasDownloadPermissions";
	    // DPI_HasDrill, having type bool
	    ParameterId["HasDrill"] = "hasDrill";
	    // DPI_HasExclude, having type bool
	    ParameterId["HasExclude"] = "hasExclude";
	    // DPI_HasFill, having type bool
	    ParameterId["HasFill"] = "hasFill";
	    // DPI_HasLabels, having type bool
	    ParameterId["HasLabels"] = "hasLabels";
	    // DPI_HasLimit, having type bool
	    ParameterId["HasLimit"] = "hasLimit";
	    // DPI_HasLine, having type bool
	    ParameterId["HasLine"] = "hasLine";
	    // DPI_HasModifiedAxes, having type bool
	    ParameterId["HasModifiedAxes"] = "hasModifiedAxes";
	    // DPI_HasNonRootCalculations, having type bool
	    ParameterId["HasNonRootCalculations"] = "hasNonRootCalculations";
	    // DPI_HasOnlyOneHierarchy, having type bool
	    ParameterId["HasOnlyOneHierarchy"] = "hasOnlyOneHierarchy";
	    // DPI_HasPattern, having type bool
	    ParameterId["HasPattern"] = "hasPattern";
	    // DPI_HasPublishGuidanceResults, having type bool
	    ParameterId["HasPublishGuidanceResults"] = "hasPublishGuidanceResults";
	    // DPI_HasSelection, having type bool
	    ParameterId["HasSelection"] = "hasSelection";
	    // DPI_HasServerCredentials, having type bool
	    ParameterId["HasServerCredentials"] = "hasServerCredentials";
	    // DPI_HasSpace, having type bool
	    ParameterId["HasSpace"] = "hasSpace";
	    // DPI_HasStoredProcedure, having type bool
	    ParameterId["HasStoredProcedure"] = "hasStoredProcedure";
	    // DPI_HasStringCalculatedMeasures, having type bool
	    ParameterId["HasStringCalculatedMeasures"] = "hasStringCalculatedMeasures";
	    // DPI_HasTableCalcData, having type bool
	    ParameterId["HasTableCalcData"] = "hasTableCalcData";
	    // DPI_HasTitle, having type bool
	    ParameterId["HasTitle"] = "hasTitle";
	    // DPI_HasUserSpecificContent, having type bool
	    ParameterId["HasUserSpecificContent"] = "hasUserSpecificContent";
	    // DPI_HasUnjoinedTable, having type bool
	    ParameterId["HasUnjoinedTable"] = "hasUnjoinedTable";
	    // DPI_HasVarArgs, having type bool
	    ParameterId["HasVarArgs"] = "hasVarArgs";
	    // DPI_HasVisitedWDCPage, having type bool
	    ParameterId["HasVisitedWDCPage"] = "hasVisitedWdcPage";
	    // DPI_IgnoreAliases, having type bool
	    ParameterId["IgnoreAliases"] = "ignoreAliases";
	    // DPI_IgnoreDomain, having type bool
	    ParameterId["IgnoreDomain"] = "ignoreDomain";
	    // DPI_IgnoreSelection, having type bool
	    ParameterId["IgnoreSelection"] = "ignoreSelection";
	    // DPI_IncludeAllColumns, having type bool
	    ParameterId["IncludeAllColumns"] = "includeAllColumns";
	    // DPI_IncludeContext, having type bool
	    ParameterId["IncludeContext"] = "includeContext";
	    // DPI_IncludeDashboardPresModels, having type bool
	    ParameterId["IncludeDashboardPresModels"] = "includeDashboardPresModels";
	    // DPI_IncludeItemSet, having type bool
	    ParameterId["IncludeItemSet"] = "includeItemSet";
	    // DPI_IncludeLocalFiles, having type bool
	    ParameterId["IncludeLocalFiles"] = "includeLocalFiles";
	    // DPI_IncludeOtherSelected, having type bool
	    ParameterId["IncludeOtherSelected"] = "includeOtherSelected";
	    // DPI_IncludeNulls, having type bool
	    ParameterId["IncludeNulls"] = "includeNulls";
	    // DPI_IncludeParent, having type bool
	    ParameterId["IncludeParent"] = "includeParent";
	    // DPI_IncludeSelections, having type bool
	    ParameterId["IncludeSelections"] = "includeSelections";
	    // DPI_IncludeSiblings, having type bool
	    ParameterId["IncludeSiblings"] = "includeSiblings";
	    // DPI_IncludeStories, having type bool
	    ParameterId["IncludeStories"] = "includeStories";
	    // DPI_IncludeSubfolders, having type bool
	    ParameterId["IncludeSubfolders"] = "includeSubfolders";
	    // DPI_IncludeVolatileProps, having type bool
	    ParameterId["IncludeVolatileProps"] = "includeVolatileProps";
	    // DPI_IncludesTag, having type bool
	    ParameterId["IncludesTag"] = "includesTag";
	    // DPI_InsertAfter, having type bool
	    ParameterId["InsertAfter"] = "insertAfter";
	    // DPI_InsertAtEnd, having type bool
	    ParameterId["InsertAtEnd"] = "insertAtEnd";
	    // DPI_InstantAnalyticsAllowed, having type bool
	    ParameterId["InstantAnalyticsAllowed"] = "instantAnalyticsAllowed";
	    // DPI_IntegerCoordinates, having type bool
	    ParameterId["IntegerCoordinates"] = "intCoords";
	    // DPI_InvalidatedLayout, having type bool
	    ParameterId["InvalidatedLayout"] = "invalidatedLayout";
	    // DPI_IsActive, having type bool
	    ParameterId["IsActive"] = "isActive";
	    // DPI_IsAddToFilter, having type bool
	    ParameterId["IsAddToFilter"] = "isAddToFilterButtonChecked";
	    // DPI_IsAllButtonVisible, having type bool
	    ParameterId["IsAllButtonVisible"] = "isAllButtonVisible";
	    // DPI_IsAllowedInCalcs, having type bool
	    ParameterId["IsAllowedInCalcs"] = "isAllowedInCalcs";
	    // DPI_IsAppMapSource, having type bool
	    ParameterId["IsAppMapSource"] = "isAppMapSource";
	    // DPI_IsArchive, having type bool
	    ParameterId["IsArchive"] = "isArchive";
	    // DPI_IsAttributeHierarchy, having type bool
	    ParameterId["IsAttributeHierarchy"] = "isAttributeHierarchy";
	    // DPI_IsAuthoringMode, having type bool
	    ParameterId["IsAuthoringMode"] = "isAuthoringMode";
	    // DPI_IsAuto, having type bool
	    ParameterId["IsAuto"] = "isAuto";
	    // DPI_IsAutoClear, having type bool
	    ParameterId["IsAutoClear"] = "isAutoClear";
	    // DPI_IsAutoColumn, having type bool
	    ParameterId["IsAutoColumn"] = "isAutoColumn";
	    // DPI_IsAutoHidden, having type bool
	    ParameterId["IsAutoHidden"] = "isAutoHidden";
	    // DPI_IsAutoSelect, having type bool
	    ParameterId["IsAutoSelect"] = "isAutoSelect";
	    // DPI_IsBold, having type bool
	    ParameterId["IsBold"] = "isBold";
	    // DPI_IsBorderVisible, having type bool
	    ParameterId["IsBorderVisible"] = "isBorderVisible";
	    // DPI_IsBoxplot, having type bool
	    ParameterId["IsBoxplot"] = "isBoxplot";
	    // DPI_IsCapable, having type bool
	    ParameterId["IsCapable"] = "isCapable";
	    // DPI_IsCaptured, having type bool
	    ParameterId["IsCaptured"] = "isCaptured";
	    // DPI_IsCentered, having type bool
	    ParameterId["IsCentered"] = "isCentered";
	    // DPI_IsChecked, having type bool
	    ParameterId["IsChecked"] = "isChecked";
	    // DPI_IsColorDiverging, having type bool
	    ParameterId["IsColorDiverging"] = "isColorDiverging";
	    // DPI_IsColorStepped, having type bool
	    ParameterId["IsColorStepped"] = "isColorStepped";
	    // DPI_IsCombinedField, having type bool
	    ParameterId["IsCombinedField"] = "isCombinedField";
	    // DPI_IsConnected, having type bool
	    ParameterId["IsConnected"] = "isConnected";
	    // DPI_IsContextMenuAllowed, having type bool
	    ParameterId["IsContextMenuAllowed"] = "isContextMenuAllowed";
	    // DPI_IsContinuous, having type bool
	    ParameterId["IsContinuous"] = "isContinuous";
	    // DPI_IsCopy, having type bool
	    ParameterId["IsCopy"] = "isCopy";
	    // DPI_IsCustomCalculation, having type bool
	    ParameterId["IsCustomCalculation"] = "isCustomCalculation";
	    // DPI_IsCustomPalette, having type bool
	    ParameterId["IsCustomPalette"] = "isCustomPalette";
	    // DPI_IsCustomSQL, having type bool
	    ParameterId["IsCustomSQL"] = "isCustomSql";
	    // DPI_IsCustomValueEnabled, having type bool
	    ParameterId["IsCustomValueEnabled"] = "isCustomValueEnabled";
	    // DPI_IsDataAlertConditionMet, having type bool
	    ParameterId["IsDataAlertConditionMet"] = "isDataAlertConditionMet";
	    // DPI_IsDataAlertDialogVisible, having type bool
	    ParameterId["IsDataAlertDialogVisible"] = "isDataAlertDialogVisible";
	    // DPI_IsDataBin, having type bool
	    ParameterId["IsDataBin"] = "isDataBin";
	    // DPI_IsDataGridVisible, having type bool
	    ParameterId["IsDataGridVisible"] = "isDataGridVisible";
	    // DPI_IsDatabase, having type bool
	    ParameterId["IsDatabase"] = "isDatabase";
	    // DPI_IsDatabaseFilterInclusive, having type bool
	    ParameterId["IsDatabaseFilterInclusive"] = "isDbFilterInclusive";
	    // DPI_IsDataSourceFilter, having type bool
	    ParameterId["IsDataSourceFilter"] = "isDatasourceFilter";
	    // DPI_IsDateTimeAnchor, having type bool
	    ParameterId["IsDateTimeAnchor"] = "isDateTimeAnchor";
	    // DPI_IsDateTimeField, having type bool
	    ParameterId["IsDateTimeField"] = "isDateTimeField";
	    // DPI_IsDraggable, having type bool
	    ParameterId["IsDraggable"] = "isDraggable";
	    // DPI_IsMDXCalculation, having type bool
	    ParameterId["IsMDXCalculation"] = "isMdxCalculation";
	    // DPI_IsMetadata, having type bool
	    ParameterId["IsMetadata"] = "isMetadata";
	    // DPI_IsWebDataTabViewSupported, having type bool
	    ParameterId["IsWebDataTabViewSupported"] = "isWebDataTabViewSupported";
	    // DPI_IsPublishedDatasourceReplacement, having type bool
	    ParameterId["IsPublishedDatasourceReplacement"] = "isPublishedDatasourceReplacement";
	    // DPI_IsDeadDrop, having type bool
	    ParameterId["IsDeadDrop"] = "isDeadDrop";
	    // DPI_IsDefault, having type bool
	    ParameterId["IsDefault"] = "isDefault";
	    // DPI_IsDeleteCalcConfirm, having type bool
	    ParameterId["IsDeleteCalcConfirm"] = "isDeleteCalcConfirmed";
	    // DPI_IsDimension, having type bool
	    ParameterId["IsDimension"] = "isDimension";
	    // DPI_IsDisabled, having type bool
	    ParameterId["IsDisabled"] = "isDisabled";
	    // DPI_IsDivider, having type bool
	    ParameterId["IsDivider"] = "isDivider";
	    // DPI_IsDropdownEnabled, having type bool
	    ParameterId["IsDropdownEnabled"] = "isDropdownEnabled";
	    // DPI_IsEditing, having type bool
	    ParameterId["IsEditing"] = "isEditing";
	    // DPI_IsEmbedded, having type bool
	    ParameterId["IsEmbedded"] = "isEmbedded";
	    // DPI_IsEmpty, having type bool
	    ParameterId["IsEmpty"] = "isEmpty";
	    // DPI_IsExtensionCloseEvent, having type bool
	    ParameterId["IsExtensionCloseEvent"] = "isExtensionCloseEvent";
	    // DPI_IsExtensionDialog, having type bool
	    ParameterId["IsExtensionDialog"] = "isExtensionDialog";
	    // DPI_IsAddInEnabled, having type bool
	    ParameterId["IsAddInEnabled"] = "isAddInEnabled";
	    // DPI_IsInDrillPath, having type bool
	    ParameterId["IsInDrillPath"] = "isInDrillPath";
	    // DPI_AddInJSDebuggingEnabled, having type bool
	    ParameterId["AddInJSDebuggingEnabled"] = "addInJsDebugginEnabled";
	    // DPI_AddInPauseBeforeLoading, having type bool
	    ParameterId["AddInPauseBeforeLoading"] = "addInPauseBeforeLoading";
	    // DPI_IsDSHierarchical, having type bool
	    ParameterId["IsDSHierarchical"] = "isDsHierarchical";
	    // DPI_IsEditorOpen, having type bool
	    ParameterId["IsEditorOpen"] = "isEditorOpen";
	    // DPI_IsEndPtMoveable, having type bool
	    ParameterId["IsEndPtMoveable"] = "isEndpointMovable";
	    // DPI_IsExclude, having type bool
	    ParameterId["IsExclude"] = "isExcludeButtonChecked";
	    // DPI_IsExistingConnection, having type bool
	    ParameterId["IsExistingConnection"] = "isExistingConnection";
	    // DPI_IsExistingObject, having type bool
	    ParameterId["IsExistingObject"] = "isExistingObject";
	    // DPI_IsExtract, having type bool
	    ParameterId["IsExtract"] = "isExtract";
	    // DPI_IsExtractOnlyConnection, having type bool
	    ParameterId["IsExtractOnlyConnection"] = "isExtractOnlyConnection";
	    // DPI_IsExtractSelectionVisible, having type bool
	    ParameterId["IsExtractSelectionVisible"] = "isExtractSelectionVisible";
	    // DPI_IsFederatable, having type bool
	    ParameterId["IsFederatable"] = "isFederatable";
	    // DPI_IsField, having type bool
	    ParameterId["IsField"] = "isField";
	    // DPI_IsFieldParameter, having type bool
	    ParameterId["IsFieldParameter"] = "isFieldParameter";
	    // DPI_IsFilterActionField, having type bool
	    ParameterId["IsFilterActionField"] = "isFilterActionField";
	    // DPI_IsFilterPresent, having type bool
	    ParameterId["IsFilterPresent"] = "isFilterPresent";
	    // DPI_IsFirstClassConnector, having type bool
	    ParameterId["IsFirstClassConnector"] = "isFirstClassConnector";
	    // DPI_IsFloating, having type bool
	    ParameterId["IsFloating"] = "isFloating";
	    // DPI_IsFolded, having type bool
	    ParameterId["IsFolded"] = "isFolded";
	    // DPI_IsForceDirty, having type bool
	    ParameterId["IsForceDirty"] = "isForceDirty";
	    // DPI_IsForceManual, having type bool
	    ParameterId["IsForceManual"] = "isForceManual";
	    // DPI_IsForInput, having type bool
	    ParameterId["IsForInput"] = "isForInput";
	    // DPI_IsForecastEnabled, having type bool
	    ParameterId["IsForecastEnabled"] = "isForecastEnabled";
	    // DPI_IsFullScan, having type bool
	    ParameterId["IsFullScan"] = "isFullScan";
	    // DPI_IsFullStyling, having type bool
	    ParameterId["IsFullStyling"] = "isFullStyling";
	    // DPI_IsGenerated, having type bool
	    ParameterId["IsGenerated"] = "isGenerated";
	    // DPI_IsGlobalNames, having type bool
	    ParameterId["IsGlobalNames"] = "isGlobalNames";
	    // DPI_IsGrayed, having type bool
	    ParameterId["IsGrayed"] = "isGrayed";
	    // DPI_IsGrayscale, having type bool
	    ParameterId["IsGrayscale"] = "isGrayscale";
	    // DPI_IsGroup, having type bool
	    ParameterId["IsGroup"] = "isGroup";
	    // DPI_IsHideableField, having type bool
	    ParameterId["IsHideableField"] = "isHideableField";
	    // DPI_IsHierarchy, having type bool
	    ParameterId["IsHierarchy"] = "isHierarchy";
	    // DPI_IsHierarchySingleSelect, having type bool
	    ParameterId["IsHierarchySingleSelect"] = "isHierarchySingleSelect";
	    // DPI_IsHighlightAllowed, having type bool
	    ParameterId["IsHighlightAllowed"] = "isHighlightAllowed";
	    // DPI_IsHighlightEnabled, having type bool
	    ParameterId["IsHighlightEnabled"] = "isHighlightEnabled";
	    // DPI_IsHighlightField, having type bool
	    ParameterId["IsHighlightField"] = "isHighlightField";
	    // DPI_IsHorizontal, having type bool
	    ParameterId["IsHorizontal"] = "isHorizontal";
	    // DPI_IsImageEnabled, having type bool
	    ParameterId["IsImageEnabled"] = "isImageEnabled";
	    // DPI_IsInDefault, having type bool
	    ParameterId["IsInDefault"] = "isInDefault";
	    // DPI_IsInPrimaryDataSource, having type bool
	    ParameterId["IsInPrimaryDataSource"] = "isInPrimaryDataSource";
	    // DPI_IsInner, having type bool
	    ParameterId["IsInner"] = "isInner";
	    // DPI_IsInstance, having type bool
	    ParameterId["IsInstance"] = "isInstance";
	    // DPI_IsInvalid, having type bool
	    ParameterId["IsInvalid"] = "isInvalid";
	    // DPI_IsInvalidCalcOnDG, having type bool
	    ParameterId["IsInvalidCalcOnDG"] = "isInvalidDgCalc";
	    // DPI_IsItalics, having type bool
	    ParameterId["IsItalics"] = "isItalics";
	    // DPI_IsJoinAreaVisible, having type bool
	    ParameterId["IsJoinAreaVisible"] = "isJoinAreaVisible";
	    // DPI_IsLabels, having type bool
	    ParameterId["IsLabels"] = "isLabels";
	    // DPI_IsLayered, having type bool
	    ParameterId["IsLayered"] = "isLayered";
	    // DPI_IsLeft, having type bool
	    ParameterId["IsLeft"] = "isLeft";
	    // DPI_IsLegacy, having type bool
	    ParameterId["IsLegacy"] = "isLegacy";
	    // DPI_IsLevel, having type bool
	    ParameterId["IsLevel"] = "isLevel";
	    // DPI_IsLevelOrLevelIdentity, having type bool
	    ParameterId["IsLevelOrLevelIdentity"] = "isLevelOrLevelIdentity";
	    // DPI_IsLicensed, having type bool
	    ParameterId["IsLicensed"] = "isLicensed";
	    // DPI_IsLink, having type bool
	    ParameterId["IsLink"] = "isLink";
	    // DPI_IsLinked, having type bool
	    ParameterId["IsLinked"] = "isLinked";
	    // DPI_IsMap, having type bool
	    ParameterId["IsMap"] = "isMap";
	    // DPI_IsMeasure, having type bool
	    ParameterId["IsMeasure"] = "isMeasure";
	    // DPI_IsMerge, having type bool
	    ParameterId["IsMerge"] = "isMerge";
	    // DPI_IsMessageSourceRemote, having type bool
	    ParameterId["IsMessageSourceRemote"] = "isMessageSourceRemote";
	    // DPI_IsMaxOpen, having type bool
	    ParameterId["IsMaxOpen"] = "isMaxOpen";
	    // DPI_IsMinOpen, having type bool
	    ParameterId["IsMinOpen"] = "isMinOpen";
	    // DPI_IsMissingFromExtract, having type bool
	    ParameterId["IsMissingFromExtract"] = "isMissingFromExtract";
	    // DPI_IsMobile, having type bool
	    ParameterId["IsMobile"] = "isMobile";
	    // DPI_IsModified, having type bool
	    ParameterId["IsModified"] = "isModified";
	    // DPI_IsNew, having type bool
	    ParameterId["IsNew"] = "isNew";
	    // DPI_IsNewCloudFileDataSource, having type bool
	    ParameterId["IsNewCloudFileDataSource"] = "isNewCloudFileDataSource";
	    // DPI_IsNewZone, having type bool
	    ParameterId["IsNewZone"] = "isNewZone";
	    // DPI_IsNone, having type bool
	    ParameterId["IsNone"] = "isNone";
	    // DPI_IsOfflineMode, having type bool
	    ParameterId["IsOfflineMode"] = "isOfflineMode";
	    // DPI_IsPreAqlBin, having type bool
	    ParameterId["IsPreAqlBin"] = "isPreAqlBin";
	    // DPI_IsOMeasuresAndRelational, having type bool
	    ParameterId["IsOMeasuresAndRelational"] = "isOmeasuresAndRelational";
	    // DPI_IsOpaque, having type bool
	    ParameterId["IsOpaque"] = "isOpaque";
	    // DPI_IsOrphaned, having type bool
	    ParameterId["IsOrphaned"] = "isOrphaned";
	    // DPI_IsOverlay, having type bool
	    ParameterId["IsOverlay"] = "isOverlay";
	    // DPI_IsOverride, having type bool
	    ParameterId["IsOverride"] = "isOverride";
	    // DPI_IsPageLoading, having type bool
	    ParameterId["IsPageLoading"] = "isPageLoading";
	    // DPI_IsParameterSelected, having type bool
	    ParameterId["IsParameterSelected"] = "isParameterSelected";
	    // DPI_IsParameterSelectedOnFrom, having type bool
	    ParameterId["IsParameterSelectedOnFrom"] = "isParameterSelectedOnFrom";
	    // DPI_IsParameterSelectedOnTo, having type bool
	    ParameterId["IsParameterSelectedOnTo"] = "isParameterSelectedOnTo";
	    // DPI_IsPatternBased, having type bool
	    ParameterId["IsPatternBased"] = "isPatternBased";
	    // DPI_IsPinned, having type bool
	    ParameterId["IsPinned"] = "isPinned";
	    // DPI_IsPresentationMode, having type bool
	    ParameterId["IsPresentationMode"] = "isPresentationModeDoc";
	    // DPI_IsPublishAllowed, having type bool
	    ParameterId["IsPublishAllowed"] = "isPublishAllowed";
	    // DPI_IsMustDowngradeToPublish, having type bool
	    ParameterId["IsMustDowngradeToPublish"] = "isDowngradeToPublishRequired";
	    // DPI_IsPublished, having type bool
	    ParameterId["IsPublished"] = "isPublished";
	    // DPI_IsQuantitative, having type bool
	    ParameterId["IsQuantitative"] = "isQuantitative";
	    // DPI_IsQuickTableCalc, having type bool
	    ParameterId["IsQuickTableCalc"] = "isQuickTableCalc";
	    // DPI_IsRadioOn, having type bool
	    ParameterId["IsRadioOn"] = "isRadioOn";
	    // DPI_IsReconnect, having type bool
	    ParameterId["IsReconnect"] = "isReconnect";
	    // DPI_IsRecursive, having type bool
	    ParameterId["IsRecursive"] = "isRecursive";
	    // DPI_IsReferenced, having type bool
	    ParameterId["IsReferenced"] = "isReferenced";
	    // DPI_IsRemovalAllowed, having type bool
	    ParameterId["IsRemovalAllowed"] = "isRowRemovalAllowed";
	    // DPI_IsRenderCapable, having type bool
	    ParameterId["IsRenderCapable"] = "isRenderCapable";
	    // DPI_IsRequired, having type bool
	    ParameterId["IsRequired"] = "isRequired";
	    // DPI_IsReversed, having type bool
	    ParameterId["IsReversed"] = "isReversed";
	    // DPI_IsRightDrag, having type bool
	    ParameterId["IsRightDrag"] = "isRightDrag";
	    // DPI_IsRowLabels, having type bool
	    ParameterId["IsRowLabels"] = "isRowLabels";
	    // DPI_IsPercentage, having type bool
	    ParameterId["IsPercentage"] = "isPercentage";
	    // DPI_IsSalesforceInConnection, having type bool
	    ParameterId["IsSalesforceInConnection"] = "isSalesforceInConnection";
	    // DPI_IsScaled, having type bool
	    ParameterId["IsScaled"] = "isScaled";
	    // DPI_IsSecondaryField, having type bool
	    ParameterId["IsSecondaryField"] = "isSecondaryField";
	    // DPI_IsSelected, having type bool
	    ParameterId["IsSelected"] = "isSelected";
	    // DPI_IsSelectedItem, having type bool
	    ParameterId["IsSelectedItem"] = "isSelectedItem";
	    // DPI_IsSelectionDisabled, having type bool
	    ParameterId["IsSelectionDisabled"] = "isSelectionDisabled";
	    // DPI_IsShiftDrag, having type bool
	    ParameterId["IsShiftDrag"] = "isShiftDrag";
	    // DPI_IsSingleLabel, having type bool
	    ParameterId["IsSingleLabel"] = "isSingleLabel";
	    // DPI_IsSingleSelect, having type bool
	    ParameterId["IsSingleSelect"] = "isSingleSelect";
	    // DPI_IsSingleSelectMode, having type bool
	    ParameterId["IsSingleSelectMode"] = "isSingleSelectMode";
	    // DPI_IsSingleSelection, having type bool
	    ParameterId["IsSingleSelection"] = "isSingleSelection";
	    // DPI_IsSorted, having type bool
	    ParameterId["IsSorted"] = "isSorted";
	    // DPI_IsSortPill, having type bool
	    ParameterId["IsSortPill"] = "isSortPill";
	    // DPI_IsSpecial, having type bool
	    ParameterId["IsSpecial"] = "isSpecial";
	    // DPI_IsSplashScreen, having type bool
	    ParameterId["IsSplashScreen"] = "isSplashScreen";
	    // DPI_IsStoryEmpty, having type bool
	    ParameterId["IsStoryEmpty"] = "isStoryEmpty";
	    // DPI_IsStrikeThrough, having type bool
	    ParameterId["IsStrikeThrough"] = "isStrikeThrough";
	    // DPI_IsTableCalc, having type bool
	    ParameterId["IsTableCalc"] = "isTableCalc";
	    // DPI_IsTableCleaningSubtable, having type bool
	    ParameterId["IsTableCleaningSubtable"] = "isTableCleaningSubtable";
	    // DPI_IsTableFilterInclusive, having type bool
	    ParameterId["IsTableFilterInclusive"] = "isTableFilterInclusive";
	    // DPI_IsTableRanked, having type bool
	    ParameterId["IsTableRanked"] = "isTableRanked";
	    // DPI_IsTemporary, having type bool
	    ParameterId["IsTemporary"] = "isTemporary";
	    // DPI_IsTimeIntelligence, having type bool
	    ParameterId["IsTimeIntelligence"] = "isTimeIntelligence";
	    // DPI_IsTitleVisible, having type bool
	    ParameterId["IsTitleVisible"] = "isTitleVisible";
	    // DPI_IsTopLevel, having type bool
	    ParameterId["IsTopLevel"] = "isTopLevel";
	    // DPI_IsTwoValued, having type bool
	    ParameterId["IsTwoValued"] = "isTwoValued";
	    // DPI_IsTypeInFinished, having type bool
	    ParameterId["IsTypeInFinished"] = "isTypeinFinished";
	    // DPI_IsTypeInPill, having type bool
	    ParameterId["IsTypeInPill"] = "isTypeInPill";
	    // DPI_IsURLActionField, having type bool
	    ParameterId["IsURLActionField"] = "isUrlActionField";
	    // DPI_IsUnderlined, having type bool
	    ParameterId["IsUnderlined"] = "isUnderlined";
	    // DPI_IsUnion, having type bool
	    ParameterId["IsUnion"] = "isUnion";
	    // DPI_IsUnionReplacement, having type bool
	    ParameterId["IsUnionReplacement"] = "isUnionReplacement";
	    // DPI_IsUnnamedCalc, having type bool
	    ParameterId["IsUnnamedCalc"] = "isUnnamed";
	    // DPI_IsUserDefinedAttribute, having type bool
	    ParameterId["IsUserDefinedAttribute"] = "isUserDefinedAttribute";
	    // DPI_IsUserEditable, having type bool
	    ParameterId["IsUserEditable"] = "isUserEditable";
	    // DPI_IsUserPrompted, having type bool
	    ParameterId["IsUserPrompted"] = "isUserPrompted";
	    // DPI_IsUserResponded, having type bool
	    ParameterId["IsUserResponded"] = "isUserResponded";
	    // DPI_IsValid, having type bool
	    ParameterId["IsValid"] = "isValid";
	    // DPI_IsValidDateRange, having type bool
	    ParameterId["IsValidDateRange"] = "isValidDateRange";
	    // DPI_IsValidWDCPage, having type bool
	    ParameterId["IsValidWDCPage"] = "isValidWdcPage";
	    // DPI_IsVaryingAttributeDimension, having type bool
	    ParameterId["IsVaryingAttributeDimension"] = "isVaryingAttributeDimension";
	    // DPI_IsVertical, having type bool
	    ParameterId["IsVertical"] = "isVertical";
	    // DPI_IsViewModified, having type bool
	    ParameterId["IsViewModified"] = "isViewModified";
	    // DPI_IsVisuallyCategorical, having type bool
	    ParameterId["IsVisuallyCategorical"] = "isVisuallyCat";
	    // DPI_IsVizInTooltip, having type bool
	    ParameterId["IsVizInTooltip"] = "isVizInTooltip";
	    // DPI_IsWeb, having type bool
	    ParameterId["IsWeb"] = "isWeb";
	    // DPI_IsWhite, having type bool
	    ParameterId["IsWhite"] = "isWhite";
	    // DPI_IsWorldNew, having type bool
	    ParameterId["IsWorldNew"] = "isWorldNew";
	    // DPI_IsXAxis, having type bool
	    ParameterId["IsXAxis"] = "isXAxis";
	    // DPI_KeepAspectRatio, having type bool
	    ParameterId["KeepAspectRatio"] = "keepAspectRatio";
	    // DPI_KeepFieldFilters, having type bool
	    ParameterId["KeepFieldFilters"] = "keepFieldFilters";
	    // DPI_LabelLineEndFirst, having type bool
	    ParameterId["LabelLineEndFirst"] = "labelLineEndFirst";
	    // DPI_LabelLineEndLast, having type bool
	    ParameterId["LabelLineEndLast"] = "labelLineEndLast";
	    // DPI_LabelMarkMax, having type bool
	    ParameterId["LabelMarkMax"] = "labelMarkMax";
	    // DPI_LabelMarkMin, having type bool
	    ParameterId["LabelMarkMin"] = "labelMarkMin";
	    // DPI_LockAspectRatio, having type bool
	    ParameterId["LockAspectRatio"] = "lockAspectRatio";
	    // DPI_LoopPlayback, having type bool
	    ParameterId["LoopPlayback"] = "loopPlayback";
	    // DPI_LossyImages, having type bool
	    ParameterId["LossyImages"] = "lossyImages";
	    // DPI_MakeGlobal, having type bool
	    ParameterId["MakeGlobal"] = "isMakeGlobal";
	    // DPI_ManualSortOnly, having type bool
	    ParameterId["ManualSortOnly"] = "manualSortOnly";
	    // DPI_MapBoxDefaultStyleSelected, having type bool
	    ParameterId["MapBoxDefaultStyleSelected"] = "mapboxDefaultStyleSelected";
	    // DPI_MapBoxURLParseSuccessful, having type bool
	    ParameterId["MapBoxURLParseSuccessful"] = "mapboxUrlParseSuccessful";
	    // DPI_MapClientRequestsMapTiles, having type bool
	    ParameterId["MapClientRequestsMapTiles"] = "clientRequestsMapTiles";
	    // DPI_MapHasValidLayer, having type bool
	    ParameterId["MapHasValidLayer"] = "mapHasValidLayer";
	    // DPI_MapShowAttribution, having type bool
	    ParameterId["MapShowAttribution"] = "showAttribution";
	    // DPI_MarkLabelsVisibilityChanged, having type bool
	    ParameterId["MarkLabelsVisibilityChanged"] = "markLabelsVisibilityChanged";
	    // DPI_MembersLoaded, having type bool
	    ParameterId["MembersLoaded"] = "membersLoaded";
	    // DPI_MinimizeNames, having type bool
	    ParameterId["MinimizeNames"] = "useMinNames";
	    // DPI_ModelsTime, having type bool
	    ParameterId["ModelsTime"] = "modelsTime";
	    // DPI_MoveRefereceLineUp, having type bool
	    ParameterId["MoveRefereceLineUp"] = "moveReferenceLineUp";
	    // DPI_MultiDataSources, having type bool
	    ParameterId["MultiDataSources"] = "multiDataSources";
	    // DPI_NavArrowsVisible, having type bool
	    ParameterId["NavArrowsVisible"] = "navArrowsVisible";
	    // DPI_OEMHasSplashScreen, having type bool
	    ParameterId["OEMHasSplashScreen"] = "oemHasSplashScreen";
	    // DPI_OneWayBrushing, having type bool
	    ParameterId["OneWayBrushing"] = "oneWayBrushing";
	    // DPI_OnlyAggregations, having type bool
	    ParameterId["OnlyAggregations"] = "onlyAggregations";
	    // DPI_OnlyShowDateBins, having type bool
	    ParameterId["OnlyShowDateBins"] = "onlyShowDateBins";
	    // DPI_OverrideAllowed, having type bool
	    ParameterId["OverrideAllowed"] = "overrideAllowed";
	    // DPI_OverrideStackDumper, having type bool
	    ParameterId["OverrideStackDumper"] = "overrideStackDumper";
	    // DPI_PageAutoColorLines, having type bool
	    ParameterId["PageAutoColorLines"] = "autoColorLines";
	    // DPI_PageAutoColorMarks, having type bool
	    ParameterId["PageAutoColorMarks"] = "autoColorMarks";
	    // DPI_PageHistoryFade, having type bool
	    ParameterId["PageHistoryFade"] = "historyFade";
	    // DPI_PercentageBands, having type bool
	    ParameterId["PercentageBands"] = "percentageBands";
	    // DPI_PercentilesAllowed, having type bool
	    ParameterId["PercentilesAllowed"] = "percentilesAllowed";
	    // DPI_PublishWithRemoteQueryAgent, having type bool
	    ParameterId["PublishWithRemoteQueryAgent"] = "publishWithRemoteQueryAgent";
	    // DPI_PreviousSheet, having type bool
	    ParameterId["PreviousSheet"] = "previousSheet";
	    // DPI_PromptDeleteSheetsWithVizInTooltip, having type bool
	    ParameterId["PromptDeleteSheetsWithVizInTooltip"] = "promptDeleteSheetsWithVizInTooltip";
	    // DPI_QuantilesAllowed, having type bool
	    ParameterId["QuantilesAllowed"] = "quantilesAllowed";
	    // DPI_RadialDistanceHitTest, having type bool
	    ParameterId["RadialDistanceHitTest"] = "radialDistanceHitTest";
	    // DPI_RefLineSelected, having type bool
	    ParameterId["RefLineSelected"] = "refLineSelected";
	    // DPI_RemovedSheets, having type bool
	    ParameterId["RemovedSheets"] = "removedSheets";
	    // DPI_RenderImagesAsUrls, having type bool
	    ParameterId["RenderImagesAsUrls"] = "imagesAsUrls";
	    // DPI_RenderOnTop, having type bool
	    ParameterId["RenderOnTop"] = "renderOnTop";
	    // DPI_RepeatHeadersLegends, having type bool
	    ParameterId["RepeatHeadersLegends"] = "repeatHeadersLegends";
	    // DPI_ReplaceActiveConfig, having type bool
	    ParameterId["ReplaceActiveConfig"] = "replaceActiveConfig";
	    // DPI_ReplaceDatasourceAfterPublish, having type bool
	    ParameterId["ReplaceDatasourceAfterPublish"] = "replaceDatasourceAfterPublish";
	    // DPI_ReplaceDatasourceFailed, having type bool
	    ParameterId["ReplaceDatasourceFailed"] = "replaceDatasourceFailed";
	    // DPI_ReplaceTde, having type bool
	    ParameterId["ReplaceTde"] = "replaceTde";
	    // DPI_RequireSelection, having type bool
	    ParameterId["RequireSelection"] = "requireSelection";
	    // DPI_RequiresDBVariables, having type bool
	    ParameterId["RequiresDBVariables"] = "requiresDbVariables";
	    // DPI_RequiresFieldList, having type bool
	    ParameterId["RequiresFieldList"] = "requiresFieldList";
	    // DPI_RestartEveryFieldIsInvalid, having type bool
	    ParameterId["RestartEveryFieldIsInvalid"] = "restartEveryFieldIsInvalid";
	    // DPI_RightJustify, having type bool
	    ParameterId["RightJustify"] = "rightJustify";
	    // DPI_SaveEnabled, having type bool
	    ParameterId["SaveEnabled"] = "saveEnabled";
	    // DPI_SavePasswordAllowed, having type bool
	    ParameterId["SavePasswordAllowed"] = "savePasswordAllowed";
	    // DPI_ScopeIsolation, having type bool
	    ParameterId["ScopeIsolation"] = "scopeIsolation";
	    // DPI_SelectionRequired, having type bool
	    ParameterId["SelectionRequired"] = "selectionRequired";
	    // DPI_SendNotifications, having type bool
	    ParameterId["SendNotifications"] = "sendNotifications";
	    // DPI_SetActive, having type bool
	    ParameterId["SetActive"] = "setActive";
	    // DPI_SetDefaultSort, having type bool
	    ParameterId["SetDefaultSort"] = "setDefault";
	    // DPI_SheetIsDashboard, having type bool
	    ParameterId["SheetIsDashboard"] = "isDashboard";
	    // DPI_SheetIsStoryboard, having type bool
	    ParameterId["SheetIsStoryboard"] = "isStory";
	    // DPI_ShouldAlwaysDisplayAlias, having type bool
	    ParameterId["ShouldAlwaysDisplayAlias"] = "shouldAlwaysDisplayAlias";
	    // DPI_ShouldAutoCapture, having type bool
	    ParameterId["ShouldAutoCapture"] = "shouldAutoCapture";
	    // DPI_ShouldAutoRevert, having type bool
	    ParameterId["ShouldAutoRevert"] = "shouldAutoRevert";
	    // DPI_ShouldChangeUIMode, having type bool
	    ParameterId["ShouldChangeUIMode"] = "shouldChangeUiMode";
	    // DPI_ShouldDisplay, having type bool
	    ParameterId["ShouldDisplay"] = "shouldDisplay";
	    // DPI_ShouldDrill, having type bool
	    ParameterId["ShouldDrill"] = "shouldDrill";
	    // DPI_ShouldForceConnectionAttempt, having type bool
	    ParameterId["ShouldForceConnectionAttempt"] = "shouldForceConnectionAttempt";
	    // DPI_ShouldRefreshDS, having type bool
	    ParameterId["ShouldRefreshDS"] = "shouldRefreshDs";
	    // DPI_ShouldScaleMarksInAxisUnits, having type bool
	    ParameterId["ShouldScaleMarksInAxisUnits"] = "shouldScaleMarksInAxisUnits";
	    // DPI_ShouldSeedCredentials, having type bool
	    ParameterId["ShouldSeedCredentials"] = "shouldSeedCredentials";
	    // DPI_ShouldShowDataSourceConnectionError, having type bool
	    ParameterId["ShouldShowDataSourceConnectionError"] = "shouldShowDataSourceConnectionError";
	    // DPI_ShouldShowDistance, having type bool
	    ParameterId["ShouldShowDistance"] = "shouldShowDistance";
	    // DPI_ShouldShowHiddenField, having type bool
	    ParameterId["ShouldShowHiddenField"] = "shouldShowHiddenField";
	    // DPI_ShouldShowMapScale, having type bool
	    ParameterId["ShouldShowMapScale"] = "shouldShowMapScale";
	    // DPI_ShouldURLEscape, having type bool
	    ParameterId["ShouldURLEscape"] = "shouldUrlEscape";
	    // DPI_ShouldUpdateDomainInfo, having type bool
	    ParameterId["ShouldUpdateDomainInfo"] = "shouldUpdateDomInfo";
	    // DPI_ShowAddToFilter, having type bool
	    ParameterId["ShowAddToFilter"] = "showAddToFilterButton";
	    // DPI_ShowAliases, having type bool
	    ParameterId["ShowAliases"] = "showAliases";
	    // DPI_ShowAllPages, having type bool
	    ParameterId["ShowAllPages"] = "showAllPages";
	    // DPI_ShowApply, having type bool
	    ParameterId["ShowApply"] = "showApplyButton";
	    // DPI_ShowApplyAndCancelButtons, having type bool
	    ParameterId["ShowApplyAndCancelButtons"] = "showApplyAndCancelButtons";
	    // DPI_ShowAuthenticationOptions, having type bool
	    ParameterId["ShowAuthenticationOptions"] = "showAuthenticationOptions";
	    // DPI_ShowAuthenticationSetting, having type bool
	    ParameterId["ShowAuthenticationSetting"] = "showAuthenticationSetting";
	    // DPI_ShowAuto, having type bool
	    ParameterId["ShowAuto"] = "showAuto";
	    // DPI_ShowBold, having type bool
	    ParameterId["ShowBold"] = "showBoldOption";
	    // DPI_ShowButtons, having type bool
	    ParameterId["ShowButtons"] = "showButtons";
	    // DPI_ShowCaption, having type bool
	    ParameterId["ShowCaption"] = "showCaption";
	    // DPI_ShowColorLegend, having type bool
	    ParameterId["ShowColorLegend"] = "showColorLegend";
	    // DPI_ShowDataGridInlineRename, having type bool
	    ParameterId["ShowDataGridInlineRename"] = "showDataGridInlineRename";
	    // DPI_ShowDetailMessages, having type bool
	    ParameterId["ShowDetailMessages"] = "showDetailMessages";
	    // DPI_ShowDate, having type bool
	    ParameterId["ShowDate"] = "showDate";
	    // DPI_ShowDragLabel, having type bool
	    ParameterId["ShowDragLabel"] = "showDragLabel";
	    // DPI_ShowDropMeasures, having type bool
	    ParameterId["ShowDropMeasures"] = "showDropMeasures";
	    // DPI_ShowEmbedAll, having type bool
	    ParameterId["ShowEmbedAll"] = "showEmbedAll";
	    // DPI_ShowEntireImage, having type bool
	    ParameterId["ShowEntireImage"] = "showEntireImage";
	    // DPI_ShowExclude, having type bool
	    ParameterId["ShowExclude"] = "showExcludeButton";
	    // DPI_ShowFloatingZoomToolbar, having type bool
	    ParameterId["ShowFloatingZoomToolbar"] = "showFloatingZoomToolbar";
	    // DPI_ShowFormatter, having type bool
	    ParameterId["ShowFormatter"] = "showFormatter";
	    // DPI_ShowFullSchedules, having type bool
	    ParameterId["ShowFullSchedules"] = "showFullSchedules";
	    // DPI_ShowGeographicSearch, having type bool
	    ParameterId["ShowGeographicSearch"] = "showGeographicSearch";
	    // DPI_ShowHiddenFields, having type bool
	    ParameterId["ShowHiddenFields"] = "showHiddenFields";
	    // DPI_ShowHistoryControls, having type bool
	    ParameterId["ShowHistoryControls"] = "showHistoryControls";
	    // DPI_ShowIncludeLocalFiles, having type bool
	    ParameterId["ShowIncludeLocalFiles"] = "showIncludeLocalFiles";
	    // DPI_ShowIncludeOtherOption, having type bool
	    ParameterId["ShowIncludeOtherOption"] = "showIncludeOtherOption";
	    // DPI_ShowIncludeSelections, having type bool
	    ParameterId["ShowIncludeSelections"] = "showIncludeSelections";
	    // DPI_ShowIncrSchedules, having type bool
	    ParameterId["ShowIncrSchedules"] = "showIncrSchedules";
	    // DPI_ShowInnerMostLevel, having type bool
	    ParameterId["ShowInnerMostLevel"] = "showInnermostLevel";
	    // DPI_ShowItalics, having type bool
	    ParameterId["ShowItalics"] = "showItalicsOption";
	    // DPI_ShowLegend, having type bool
	    ParameterId["ShowLegend"] = "showLegend";
	    // DPI_ShowLockedPermissionsIcon, having type bool
	    ParameterId["ShowLockedPermissionsIcon"] = "showLockedPermissionsIcon";
	    // DPI_ShowManageDatasources, having type bool
	    ParameterId["ShowManageDatasources"] = "showManageDatasources";
	    // DPI_ShowMapLegend, having type bool
	    ParameterId["ShowMapLegend"] = "showMapLegend";
	    // DPI_ShowMapScale, having type bool
	    ParameterId["ShowMapScale"] = "showMapScale";
	    // DPI_ShowMappedFilterCols, having type bool
	    ParameterId["ShowMappedFilterCols"] = "showMappedFilterColumns";
	    // DPI_ShowName, having type bool
	    ParameterId["ShowName"] = "showName";
	    // DPI_ShowNone, having type bool
	    ParameterId["ShowNone"] = "showNone";
	    // DPI_ShowPagePlayback, having type bool
	    ParameterId["ShowPagePlayback"] = "showPagePlayback";
	    // DPI_ShowPageReadout, having type bool
	    ParameterId["ShowPageReadout"] = "showPageReadout";
	    // DPI_ShowPageSlider, having type bool
	    ParameterId["ShowPageSlider"] = "showPageSlider";
	    // DPI_ShowParent, having type bool
	    ParameterId["ShowParent"] = "showParent";
	    // DPI_ShowPercentages, having type bool
	    ParameterId["ShowPercentages"] = "showPercentages";
	    // DPI_ShowPredictionIntervals, having type bool
	    ParameterId["ShowPredictionIntervals"] = "showPredictionIntervals";
	    // DPI_ShowPublishedDatasources, having type bool
	    ParameterId["ShowPublishedDatasources"] = "showPublishedDatasources";
	    // DPI_ShowRelDatePicker, having type bool
	    ParameterId["ShowRelDatePicker"] = "showRelDatePicker";
	    // DPI_ShowReplaceDatasource, having type bool
	    ParameterId["ShowReplaceDatasource"] = "showReplaceDatasource";
	    // DPI_ShowSeparator, having type bool
	    ParameterId["ShowSeparator"] = "showSeparator";
	    // DPI_ShowShapeLegend, having type bool
	    ParameterId["ShowShapeLegend"] = "showShapeLegend";
	    // DPI_ShowSizeLegend, having type bool
	    ParameterId["ShowSizeLegend"] = "showSizeLegend";
	    // DPI_ShowShelf, having type bool
	    ParameterId["ShowShelf"] = "showShelf";
	    // DPI_ShowStructure, having type bool
	    ParameterId["ShowStructure"] = "showStructure";
	    // DPI_ShowSyncClientOptions, having type bool
	    ParameterId["ShowSyncClientOptions"] = "showSyncClientOptions";
	    // DPI_ShowTabsAllowed, having type bool
	    ParameterId["ShowTabsAllowed"] = "showTabsAllowed";
	    // DPI_ShowTime, having type bool
	    ParameterId["ShowTime"] = "showTime";
	    // DPI_ShowTitle, having type bool
	    ParameterId["ShowTitle"] = "showTitle";
	    // DPI_ShowTransSlider, having type bool
	    ParameterId["ShowTransSlider"] = "showTransparencySlider";
	    // DPI_ShowUnderline, having type bool
	    ParameterId["ShowUnderline"] = "showUnderlineOption";
	    // DPI_ShowUserThumbnailOptions, having type bool
	    ParameterId["ShowUserThumbnailOptions"] = "showUserThumbnailOptions";
	    // DPI_ShowView, having type bool
	    ParameterId["ShowView"] = "showView";
	    // DPI_ShowViews, having type bool
	    ParameterId["ShowViews"] = "showViews";
	    // DPI_ShowingPageLoadError, having type bool
	    ParameterId["ShowingPageLoadError"] = "showingPageLoadError";
	    // DPI_SupressAliases, having type bool
	    ParameterId["SupressAliases"] = "suspressAliases";
	    // DPI_SupressThousandsSeparator, having type bool
	    ParameterId["SupressThousandsSeparator"] = "supressThousandsSeparator";
	    // DPI_SingleSelectOnly, having type bool
	    ParameterId["SingleSelectOnly"] = "singleSelectOnly";
	    // DPI_SkipConnectAction, having type bool
	    ParameterId["SkipConnectAction"] = "skipConnectAction";
	    // DPI_SkipIfActive, having type bool
	    ParameterId["SkipIfActive"] = "skipIfActive";
	    // DPI_SkipRefresh, having type bool
	    ParameterId["SkipRefresh"] = "skipRefresh";
	    // DPI_SkipValidation, having type bool
	    ParameterId["SkipValidation"] = "skipValidation";
	    // DPI_Skipped, having type bool
	    ParameterId["Skipped"] = "skipped";
	    // DPI_SortFieldIsInvalid, having type bool
	    ParameterId["SortFieldIsInvalid"] = "sortFieldIsInvalid";
	    // DPI_SortModeIsAuto, having type bool
	    ParameterId["SortModeIsAuto"] = "sortModeIsAuto";
	    // DPI_SplitOnEdgeSnap, having type bool
	    ParameterId["SplitOnEdgeSnap"] = "splitOnEdgeSnap";
	    // DPI_StandardDeviationAllowed, having type bool
	    ParameterId["StandardDeviationAllowed"] = "standardDeviationAllowed";
	    // DPI_State, having type bool
	    ParameterId["State"] = "state";
	    // DPI_StoredProcDisabled, having type bool
	    ParameterId["StoredProcDisabled"] = "storedProcDisabled";
	    // DPI_StoredProcsDropable, having type bool
	    ParameterId["StoredProcsDropable"] = "storedProcsDropable";
	    // DPI_StoryIsEmpty, having type bool
	    ParameterId["StoryIsEmpty"] = "storyIsEmpty";
	    // DPI_StoryPointIsEmpty, having type bool
	    ParameterId["StoryPointIsEmpty"] = "storyPointIsEmpty";
	    // DPI_SuccessfulSave, having type bool
	    ParameterId["SuccessfulSave"] = "successfulSave";
	    // DPI_SupportXAxis, having type bool
	    ParameterId["SupportXAxis"] = "supportXAxis";
	    // DPI_SupportYAxis, having type bool
	    ParameterId["SupportYAxis"] = "supportYAxis";
	    // DPI_SupportsCenterAlignment, having type bool
	    ParameterId["SupportsCenterAlignment"] = "supportsCenterAlignment";
	    // DPI_SupportsDBFilters, having type bool
	    ParameterId["SupportsDBFilters"] = "supportsDatabaseFilters";
	    // DPI_SupportsMultipleValues, having type bool
	    ParameterId["SupportsMultipleValues"] = "supportsMultipleValues";
	    // DPI_SupportsRightAlignment, having type bool
	    ParameterId["SupportsRightAlignment"] = "supportsRightAlignment";
	    // DPI_SupportsTableFilters, having type bool
	    ParameterId["SupportsTableFilters"] = "supportsTableFilters";
	    // DPI_Symmetric, having type bool
	    ParameterId["Symmetric"] = "symmetric";
	    // DPI_SyncAutomaticDrill, having type bool
	    ParameterId["SyncAutomaticDrill"] = "syncAutomaticDrill";
	    // DPI_TabsAllowed, having type bool
	    ParameterId["TabsAllowed"] = "tabsAllowed";
	    // DPI_TextDropdownState, having type bool
	    ParameterId["TextDropdownState"] = "toggleState";
	    // DPI_TitleInline, having type bool
	    ParameterId["TitleInline"] = "titleInline";
	    // DPI_ToggleHighlightStateChanged, having type bool
	    ParameterId["ToggleHighlightStateChanged"] = "toggleHighlight";
	    // DPI_Transformed80Format, having type bool
	    ParameterId["Transformed80Format"] = "oldFormat";
	    // DPI_TrendLineSelected, having type bool
	    ParameterId["TrendLineSelected"] = "trendLineSelected";
	    // DPI_TruncDate, having type bool
	    ParameterId["TruncDate"] = "truncDate";
	    // DPI_TupleSelected, having type bool
	    ParameterId["TupleSelected"] = "tupleSelected";
	    // DPI_UIAutomationDidPageLoad, having type bool
	    ParameterId["UIAutomationDidPageLoad"] = "uiAutomationDidPageLoad";
	    // DPI_UIAutomationIsChecked, having type bool
	    ParameterId["UIAutomationIsChecked"] = "uiAutomationIsChecked";
	    // DPI_UIAutomationIsEnabled, having type bool
	    ParameterId["UIAutomationIsEnabled"] = "uiAutomationIsEnabled";
	    // DPI_UIAutomationIsEventProcessed, having type bool
	    ParameterId["UIAutomationIsEventProcessed"] = "uiAutomationIsEventProcessed";
	    // DPI_UIAutomationIsFocused, having type bool
	    ParameterId["UIAutomationIsFocused"] = "uiAutomationIsFocused";
	    // DPI_UIAutomationIsFound, having type bool
	    ParameterId["UIAutomationIsFound"] = "uiAutomationIsFound";
	    // DPI_UIAutomationIsReadonly, having type bool
	    ParameterId["UIAutomationIsReadonly"] = "uiAutomationIsReadonly";
	    // DPI_UIAutomationIsSelected, having type bool
	    ParameterId["UIAutomationIsSelected"] = "uiAutomationIsSelected";
	    // DPI_UpdateAllPanes, having type bool
	    ParameterId["UpdateAllPanes"] = "updateAllPanes";
	    // DPI_UpdateDSCaptionOnly, having type bool
	    ParameterId["UpdateDSCaptionOnly"] = "updateDsCaptionOnly";
	    // DPI_UpdateModelFromParams, having type bool
	    ParameterId["UpdateModelFromParams"] = "updateModelFromParams";
	    // DPI_UpdateShelves, having type bool
	    ParameterId["UpdateShelves"] = "updateShelves";
	    // DPI_UpdatesUseContext, having type bool
	    ParameterId["UpdatesUseContext"] = "updatesUseContext";
	    // DPI_UpgradeDocumentVersion, having type bool
	    ParameterId["UpgradeDocumentVersion"] = "upgradeDocumentVersion";
	    // DPI_UseAliases, having type bool
	    ParameterId["UseAliases"] = "useAliases";
	    // DPI_UseBlankForNull, having type bool
	    ParameterId["UseBlankForNull"] = "useBlankForNull";
	    // DPI_UseCalculationEditor, having type bool
	    ParameterId["UseCalculationEditor"] = "useCalculationEditor";
	    // DPI_UseCenterValue, having type bool
	    ParameterId["UseCenterValue"] = "useCenterValue";
	    // DPI_UseColor, having type bool
	    ParameterId["UseColor"] = "useColor";
	    // DPI_UseCustomMarkSize, having type bool
	    ParameterId["UseCustomMarkSize"] = "useCustomMarkSize";
	    // DPI_UseDarkIcons, having type bool
	    ParameterId["UseDarkIcons"] = "useDarkIcons";
	    // DPI_UseDataStoreMinfiedNames, having type bool
	    ParameterId["UseDataStoreMinfiedNames"] = "useDatastoreMinNames";
	    // DPI_UseInitialDomainType, having type bool
	    ParameterId["UseInitialDomainType"] = "useInitialDomainType";
	    // DPI_UseEndValue, having type bool
	    ParameterId["UseEndValue"] = "useEndValue";
	    // DPI_UseForOverlayHitTest, having type bool
	    ParameterId["UseForOverlayHitTest"] = "useForOverlayHitTest";
	    // DPI_UseFullColorRange, having type bool
	    ParameterId["UseFullColorRange"] = "useFullColorRange";
	    // DPI_UseFullDomain, having type bool
	    ParameterId["UseFullDomain"] = "useFullDomain";
	    // DPI_UseInlineImages, having type bool
	    ParameterId["UseInlineImages"] = "useInlineImages";
	    // DPI_UseMeasures, having type bool
	    ParameterId["UseMeasures"] = "useMeasures";
	    // DPI_UseNewQuickFilters, having type bool
	    ParameterId["UseNewQuickFilters"] = "useNewQuickFilters";
	    // DPI_UseNotificationReturn, having type bool
	    ParameterId["UseNotificationReturn"] = "useNotificationReturn";
	    // DPI_UseParameters, having type bool
	    ParameterId["UseParameters"] = "useParameters";
	    // DPI_UseSelector, having type bool
	    ParameterId["UseSelector"] = "useSelector";
	    // DPI_UseSignificantDigits, having type bool
	    ParameterId["UseSignificantDigits"] = "useSignificantDigits";
	    // DPI_UseSpecialStrings, having type bool
	    ParameterId["UseSpecialStrings"] = "useSpecialStrings";
	    // DPI_UseStartValue, having type bool
	    ParameterId["UseStartValue"] = "useStartValue";
	    // DPI_UseTabs, having type bool
	    ParameterId["UseTabs"] = "useTabs";
	    // DPI_UseTabletAsDefaultPreview, having type bool
	    ParameterId["UseTabletAsDefaultPreview"] = "useTabletAsDefaultPreview";
	    // DPI_UseTargetPt, having type bool
	    ParameterId["UseTargetPt"] = "useTargetPoint";
	    // DPI_UseUSLocale, having type bool
	    ParameterId["UseUSLocale"] = "useUsLocale";
	    // DPI_UseYAxis, having type bool
	    ParameterId["UseYAxis"] = "useYAxis";
	    // DPI_Valid, having type bool
	    ParameterId["Valid"] = "valid";
	    // DPI_VizDataV82, having type bool
	    ParameterId["VizDataV82"] = "vizData82";
	    // DPI_WasCanceled, having type bool
	    ParameterId["WasCanceled"] = "wasCanceled";
	    // DPI_WMSConnectionSuccessful, having type bool
	    ParameterId["WMSConnectionSuccessful"] = "wmsConnectionSuccessful";
	    // DPI_WMSShouldUseTiles, having type bool
	    ParameterId["WMSShouldUseTiles"] = "wmsShouldUseTiles";
	    // DPI_WantDomain, having type bool
	    ParameterId["WantDomain"] = "wantDomain";
	    // DPI_WorkbookModified, having type bool
	    ParameterId["WorkbookModified"] = "workbookModified";
	    // DPI_ZoomIn, having type bool
	    ParameterId["ZoomIn"] = "zoomIn";
	    // DPI_ShowMarkLabels, having type bool
	    ParameterId["ShowMarkLabels"] = "showMarkLabels";
	    // DPI_HasDuplicates, having type bool
	    ParameterId["HasDuplicates"] = "hasDuplicates";
	    // DPI_HasUserDefinedIncrement, having type bool
	    ParameterId["HasUserDefinedIncrement"] = "hasUserDefinedIncrement";
	    // DPI_HasUserDefinedMax, having type bool
	    ParameterId["HasUserDefinedMax"] = "hasUserDefinedMax";
	    // DPI_HasUserDefinedMin, having type bool
	    ParameterId["HasUserDefinedMin"] = "hasUserDefinedMin";
	    // DPI_IsDuplicate, having type bool
	    ParameterId["IsDuplicate"] = "isDuplicate";
	    // DPI_IsEditingValue, having type bool
	    ParameterId["IsEditingValue"] = "isEditingValue";
	    // DPI_ShouldRestrictDataType, having type bool
	    ParameterId["ShouldRestrictDataType"] = "restrictDataType";
	    // DPI_EnableIncludeZero, having type bool
	    ParameterId["EnableIncludeZero"] = "enableIncludeZero";
	    // DPI_EnableSyncDualAxes, having type bool
	    ParameterId["EnableSyncDualAxes"] = "enableSynchronizeDualAxes";
	    // DPI_EnableShowTimes, having type bool
	    ParameterId["EnableShowTimes"] = "enableShowTimes";
	    // DPI_EnableTickMarksTab, having type bool
	    ParameterId["EnableTickMarksTab"] = "enableTickMarksTab";
	    // DPI_IsTemporal, having type bool
	    ParameterId["IsTemporal"] = "isTemporal";
	    // DPI_ShouldIncludeZero, having type bool
	    ParameterId["ShouldIncludeZero"] = "shouldIncludeZero";
	    // DPI_ShouldReverseAxis, having type bool
	    ParameterId["ShouldReverseAxis"] = "shouldReverseAxis";
	    // DPI_ShouldShowTimes, having type bool
	    ParameterId["ShouldShowTimes"] = "shouldShowTimes";
	    // DPI_UseAutomaticAxisSubtitle, having type bool
	    ParameterId["UseAutomaticAxisSubtitle"] = "useAutomaticSubtitle";
	    // DPI_UseAutomaticAxisTitle, having type bool
	    ParameterId["UseAutomaticAxisTitle"] = "useAutomaticTitle";
	    // DPI_AllSelected, having type bool
	    ParameterId["AllSelected"] = "allSelected";
	    // DPI_AutoCommit, having type bool
	    ParameterId["AutoCommit"] = "autoCommit";
	    // DPI_CacheOnly, having type bool
	    ParameterId["CacheOnly"] = "cacheOnly";
	    // DPI_IncludeData, having type bool
	    ParameterId["IncludeData"] = "includeData";
	    // DPI_IsPatternExclusive, having type bool
	    ParameterId["IsPatternExclusive"] = "isPatternExclusive";
	    // DPI_IsSearchable, having type bool
	    ParameterId["IsSearchable"] = "isSearchable";
	    // DPI_IsSelectionExclusive, having type bool
	    ParameterId["IsSelectionExclusive"] = "isSelectionExclusive";
	    // DPI_ResetNewFilter, having type bool
	    ParameterId["ResetNewFilter"] = "resetNewFilter";
	    // DPI_UseAllWhenManualEmpty, having type bool
	    ParameterId["UseAllWhenManualEmpty"] = "useAllWhenManualEmpty";
	    // DPI_UseAllWhenPatternEmpty, having type bool
	    ParameterId["UseAllWhenPatternEmpty"] = "useAllWhenPatternEmpty";
	    // DPI_GroupByDrillDown, having type bool
	    ParameterId["GroupByDrillDown"] = "groupByDrillDown";
	    // DPI_GroupByTable, having type bool
	    ParameterId["GroupByTable"] = "groupByTable";
	    // DPI_IncludeGroups, having type bool
	    ParameterId["IncludeGroups"] = "includeGroups";
	    // DPI_IncludePendingState, having type bool
	    ParameterId["IncludePendingState"] = "includePendingState";
	    // DPI_IncludeFieldMenus, having type bool
	    ParameterId["IncludeFieldMenus"] = "includeFieldMenus";
	    // DPI_IncludeFormattedValues, having type bool
	    ParameterId["IncludeFormattedValues"] = "includeFormattedValues";
	    // DPI_IncludeColumnInstances, having type bool
	    ParameterId["IncludeColumnInstances"] = "includeColumnInstances";
	    // DPI_IncludeAdHocCalcs, having type bool
	    ParameterId["IncludeAdHocCalcs"] = "includeAdhocCalcs";
	    // DPI_IncludeHiddenInvalidFields, having type bool
	    ParameterId["IncludeHiddenInvalidFields"] = "includeHiddenInvalidFields";
	    // DPI_IncludeNonExtractedColumns, having type bool
	    ParameterId["IncludeNonExtractedColumns"] = "includeNonExtractedColumns";
	    // DPI_IncludeCalculatedFieldFormulas, having type bool
	    ParameterId["IncludeCalculatedFieldFormulas"] = "includeCalculatedFieldFormulas";
	    // DPI_SetDataPreviewCustomFieldOrder, having type bool
	    ParameterId["SetDataPreviewCustomFieldOrder"] = "setDataPreviewCustomFieldOrder";
	    // DPI_CustomSplitAllowSplitFromRight, having type bool
	    ParameterId["CustomSplitAllowSplitFromRight"] = "customSplitAllowSplitFromRight";
	    // DPI_IsChanged, having type bool
	    ParameterId["IsChanged"] = "isChanged";
	    // DPI_ShowFontColorPicker, having type bool
	    ParameterId["ShowFontColorPicker"] = "showFontColorPicker";
	    // DPI_ShowFontFamilyPicker, having type bool
	    ParameterId["ShowFontFamilyPicker"] = "showFontFamilyPicker";
	    // DPI_ShowFontSizePicker, having type bool
	    ParameterId["ShowFontSizePicker"] = "showFontSizePicker";
	    // DPI_ShowFontStyleButtons, having type bool
	    ParameterId["ShowFontStyleButtons"] = "showFontStyleButtons";
	    // DPI_ShowLineForAll, having type bool
	    ParameterId["ShowLineForAll"] = "showLineForAll";
	    // DPI_ShowLineForColumn, having type bool
	    ParameterId["ShowLineForColumn"] = "showLineForColumn";
	    // DPI_ShowLineForRow, having type bool
	    ParameterId["ShowLineForRow"] = "showLineForRow";
	    // DPI_ShowLinePatternPicker, having type bool
	    ParameterId["ShowLinePatternPicker"] = "showLinePatternPicker";
	    // DPI_ShowLineTransparency, having type bool
	    ParameterId["ShowLineTransparency"] = "showLineTransparency";
	    // DPI_ShowLineWidthPicker, having type bool
	    ParameterId["ShowLineWidthPicker"] = "showLineWidthPicker";
	    // DPI_CanBeAuto, having type bool
	    ParameterId["CanBeAuto"] = "canBeAuto";
	    // DPI_CanBeNone, having type bool
	    ParameterId["CanBeNone"] = "canBeNone";
	    // DPI_CanMatchMarkColor, having type bool
	    ParameterId["CanMatchMarkColor"] = "canMatchMarkColor";
	    // DPI_HasOpacity, having type bool
	    ParameterId["HasOpacity"] = "hasOpacity";
	    // DPI_IncludeAllHidden, having type bool
	    ParameterId["IncludeAllHidden"] = "includeAllHidden";
	    // DPI_IncludeCurrent, having type bool
	    ParameterId["IncludeCurrent"] = "includeCurrent";
	    // DPI_IsIncluded, having type bool
	    ParameterId["IsIncluded"] = "isIncluded";
	    // DPI_IsRelative, having type bool
	    ParameterId["IsRelative"] = "isRelative";
	    // DPI_IsSecondaryAllowed, having type bool
	    ParameterId["IsSecondaryAllowed"] = "isSecondaryAllowed";
	    // DPI_NullIfIncomplete, having type bool
	    ParameterId["NullIfIncomplete"] = "nullIfIncomplete";
	    // DPI_IsCalcAssistanceEnabled, having type bool
	    ParameterId["IsCalcAssistanceEnabled"] = "isCalcAssistanceEnabled";
	    // DPI_UseSecondaryCalc, having type bool
	    ParameterId["UseSecondaryCalc"] = "useSecondaryCalc";
	    // DPI_CanLoad, having type bool
	    ParameterId["CanLoad"] = "canLoad";
	    // DPI_DescriptionOnly, having type bool
	    ParameterId["DescriptionOnly"] = "descriptionOnly";
	    // DPI_AreAliasesSupported, having type bool
	    ParameterId["AreAliasesSupported"] = "areAliasesSupported";
	    // DPI_AreRefColumnsSupported, having type bool
	    ParameterId["AreRefColumnsSupported"] = "areRefColumnsSupported";
	    // DPI_IsAggregated, having type bool
	    ParameterId["IsAggregated"] = "isAggregated";
	    // DPI_IsExportSupported, having type bool
	    ParameterId["IsExportSupported"] = "isExportSupported";
	    // DPI_IsMeasureNames, having type bool
	    ParameterId["IsMeasureNames"] = "isMeasureNames";
	    // DPI_IsSummarySupported, having type bool
	    ParameterId["IsSummarySupported"] = "isSummarySupported";
	    // DPI_IsTopNSupported, having type bool
	    ParameterId["IsTopNSupported"] = "isTopNSupported";
	    // DPI_IsUnderlyingSupported, having type bool
	    ParameterId["IsUnderlyingSupported"] = "isUnderlyingSupported";
	    // DPI_OnlyExportSummary, having type bool
	    ParameterId["OnlyExportSummary"] = "onlyExportSummary";
	    // DPI_ShowAllFields, having type bool
	    ParameterId["ShowAllFields"] = "showAllFields";
	    // DPI_UseTablePtrs, having type bool
	    ParameterId["UseTablePtrs"] = "useTablePtrs";
	    // DPI_OnlyFetchSummary, having type bool
	    ParameterId["OnlyFetchSummary"] = "onlyFetchSummary";
	    // DPI_IsDeviceLayoutCustomized, having type bool
	    ParameterId["IsDeviceLayoutCustomized"] = "isDeviceLayoutCustomized";
	    // DPI_IsDeviceSizeCustomized, having type bool
	    ParameterId["IsDeviceSizeCustomized"] = "isDeviceSizeCustomized";
	    // DPI_IsDeviceSupportedByMobileApp, having type bool
	    ParameterId["IsDeviceSupportedByMobileApp"] = "isDeviceSupportedByMobileApp";
	    // DPI_IsPortrait, having type bool
	    ParameterId["IsPortrait"] = "isPortrait";
	    // DPI_IsPortraitByDefault, having type bool
	    ParameterId["IsPortraitByDefault"] = "isPortraitByDefault";
	    // DPI_IsUserCustomFormat, having type bool
	    ParameterId["IsUserCustomFormat"] = "isUserCustomFormat";
	    // DPI_ShouldDisplayRebuildExtractMessage, having type bool
	    ParameterId["ShouldDisplayRebuildExtractMessage"] = "shouldDisplayRebuildExtractMessage";
	    // DPI_SupportsCustomStartOfWeek, having type bool
	    ParameterId["SupportsCustomStartOfWeek"] = "supportsCustomStartOfWeek";
	    // DPI_NeedsConnectPrompt, having type bool
	    ParameterId["NeedsConnectPrompt"] = "needsConnectPrompt";
	    // DPI_NeedsCloseDataSourceErrorPrompt, having type bool
	    ParameterId["NeedsCloseDataSourceErrorPrompt"] = "needsCloseDsErrorPrompt";
	    // DPI_ClearCurrentSelection, having type bool
	    ParameterId["ClearCurrentSelection"] = "clearCurrentSelection";
	    // DPI_HasContains, having type bool
	    ParameterId["HasContains"] = "hasContains";
	    // DPI_HasEndsWith, having type bool
	    ParameterId["HasEndsWith"] = "hasEndsWith";
	    // DPI_HasReplaceSelection, having type bool
	    ParameterId["HasReplaceSelection"] = "hasReplaceSelection";
	    // DPI_HasStartsWith, having type bool
	    ParameterId["HasStartsWith"] = "hasStartsWith";
	    // DPI_IsLeafSelectionOnly, having type bool
	    ParameterId["IsLeafSelectionOnly"] = "isLeafSelectionOnly";
	    // DPI_ReplaceSelection, having type bool
	    ParameterId["ReplaceSelection"] = "replaceSelection";
	    // DPI_IsColorPaletteCustomized, having type bool
	    ParameterId["IsColorPaletteCustomized"] = "isColorPaletteCustomized";
	    // DPI_ReversePaletteOrder, having type bool
	    ParameterId["ReversePaletteOrder"] = "reversePaletteOrder";
	    // DPI_TriedToConnect, having type bool
	    ParameterId["TriedToConnect"] = "triedToConnect";
	    // DPI_ScaleMarksInAxisUnits, having type bool
	    ParameterId["ScaleMarksInAxisUnits"] = "scaleMarksInAxisUnits";
	    // DPI_ShowMarkSizingOptions, having type bool
	    ParameterId["ShowMarkSizingOptions"] = "showMarkSizingOptions";
	    // DPI_UseSizeFieldCaption, having type bool
	    ParameterId["UseSizeFieldCaption"] = "useSizeFieldCaption";
	    // DPI_IsLicensedAndRegistered, having type bool
	    ParameterId["IsLicensedAndRegistered"] = "isLicensedAndRegistered";
	    // DPI_SetNewDatasourceActive, having type bool
	    ParameterId["SetNewDatasourceActive"] = "setNewDatasourceActive";
	    // DPI_AllowCustomLabel, having type bool
	    ParameterId["AllowCustomLabel"] = "allowCustomLabel";
	    // DPI_IsMostRecentModeValid, having type bool
	    ParameterId["IsMostRecentModeValid"] = "isMostRecentModeValid";
	    // DPI_MustShowLabels, having type bool
	    ParameterId["MustShowLabels"] = "mustShowLabels";
	    // DPI_ShowRunningOrderLabels, having type bool
	    ParameterId["ShowRunningOrderLabels"] = "showRunningOrderLabels";
	    // DPI_IsDroppedFile, having type bool
	    ParameterId["IsDroppedFile"] = "isDroppedFile";
	    // DPI_IsInitialized, having type bool
	    ParameterId["IsInitialized"] = "isInitialized";
	    // DPI_IncludeDashboard, having type bool
	    ParameterId["IncludeDashboard"] = "includeDashboard";
	    // DPI_ChildrenCanResize, having type bool
	    ParameterId["ChildrenCanResize"] = "childrenCanResize";
	    // DPI_BoolMap, having type Dictionary(of bool)
	    ParameterId["BoolMap"] = "boolMap";
	    // DPI_CheckedMenuItems, having type bool[]
	    ParameterId["CheckedMenuItems"] = "checkedMenuItems";
	    // DPI_IncludedSheetValues, having type bool[]
	    ParameterId["IncludedSheetValues"] = "includedSheetValues";
	    // DPI_SortOrderVector, having type bool[]
	    ParameterId["SortOrderVector"] = "sortOrderVector";
	    // DPI_ActionName, having type string
	    ParameterId["ActionName"] = "actionName";
	    // DPI_ActionSourceText, having type string
	    ParameterId["ActionSourceText"] = "actionSourceText";
	    // DPI_ActionTypeAsString, having type string
	    ParameterId["ActionTypeAsString"] = "actionTypeAsString";
	    // DPI_ActiveTab, having type string
	    ParameterId["ActiveTab"] = "active_tab";
	    // DPI_AddInFeatureName, having type string
	    ParameterId["AddInFeatureName"] = "addInFeatureName";
	    // DPI_AddInId, having type string
	    ParameterId["AddInId"] = "addInId";
	    // DPI_AddInstanceId, having type string
	    ParameterId["AddInstanceId"] = "addInInstanceId";
	    // DPI_AddInName, having type string
	    ParameterId["AddInName"] = "addInName";
	    // DPI_AddInLocale, having type string
	    ParameterId["AddInLocale"] = "addInLocale";
	    // DPI_AddInLanguage, having type string
	    ParameterId["AddInLanguage"] = "addInLanguage";
	    // DPI_ExtensionVersion, having type string
	    ParameterId["ExtensionVersion"] = "extensionVersion";
	    // DPI_APIVersion, having type string
	    ParameterId["APIVersion"] = "apiVersion";
	    // DPI_Alias, having type string
	    ParameterId["Alias"] = "alias";
	    // DPI_AnchorDate, having type string
	    ParameterId["AnchorDate"] = "anchorDate";
	    // DPI_AnnotationRes, having type string
	    ParameterId["AnnotationRes"] = "annotationRes";
	    // DPI_ReadId, having type string
	    ParameterId["ReadId"] = "readId";
	    // DPI_AnnotationText, having type string
	    ParameterId["AnnotationText"] = "annotationText";
	    // DPI_ArchiveDirectory, having type string
	    ParameterId["ArchiveDirectory"] = "archiveDirectory";
	    // DPI_ArchiveFullPath, having type string
	    ParameterId["ArchiveFullPath"] = "archiveFullPath";
	    // DPI_AtTheLevelInvalidFieldCaption, having type string
	    ParameterId["AtTheLevelInvalidFieldCaption"] = "atTheLevelInvalidFieldCaption";
	    // DPI_AutoCompleteSubstring, having type string
	    ParameterId["AutoCompleteSubstring"] = "acSubstring";
	    // DPI_AutosaveFileId, having type string
	    ParameterId["AutosaveFileId"] = "autosaveFileId";
	    // DPI_AutosaveTimerInterval, having type string
	    ParameterId["AutosaveTimerInterval"] = "autosaveTimerInterval";
	    // DPI_BaseColumnCaption, having type string
	    ParameterId["BaseColumnCaption"] = "baseColumnCaption";
	    // DPI_ButtonObjectClickAction, having type string
	    ParameterId["ButtonObjectClickAction"] = "buttonObjectClickAction";
	    // DPI_ButtonObjectImagePath, having type string
	    ParameterId["ButtonObjectImagePath"] = "buttonObjectImagePath";
	    // DPI_ClearButtonText, having type string
	    ParameterId["ClearButtonText"] = "clearButtonText";
	    // DPI_ColorPaletteId, having type string
	    ParameterId["ColorPaletteId"] = "colorPaletteId";
	    // DPI_ColorPaletteName, having type string
	    ParameterId["ColorPaletteName"] = "colorPaletteName";
	    // DPI_ColorSwatch, having type string
	    ParameterId["ColorSwatch"] = "colorSwatch";
	    // DPI_CommandName, having type string
	    ParameterId["CommandName"] = "commandName";
	    // DPI_ConfidenceLevelValue, having type string
	    ParameterId["ConfidenceLevelValue"] = "confidenceLevelValue";
	    // DPI_CountDistinctStr, having type string
	    ParameterId["CountDistinctStr"] = "countDistinctStr";
	    // DPI_CrossTabFilepath, having type string
	    ParameterId["CrossTabFilepath"] = "crossTabFilepath";
	    // DPI_CSSMargin, having type string
	    ParameterId["CSSMargin"] = "cssMargin";
	    // DPI_CSSWhitespace, having type string
	    ParameterId["CSSWhitespace"] = "cssWhitespace";
	    // DPI_DBPassword, having type string
	    ParameterId["DBPassword"] = "dbPassword";
	    // DPI_DBUsername, having type string
	    ParameterId["DBUsername"] = "dbUsername";
	    // DPI_DataAlertConditionText, having type string
	    ParameterId["DataAlertConditionText"] = "dataAlertConditionText";
	    // DPI_DataAlertMeasureText, having type string
	    ParameterId["DataAlertMeasureText"] = "dataAlertMeasureText";
	    // DPI_DataAlertSpecSerializedText, having type string
	    ParameterId["DataAlertSpecSerializedText"] = "dataAlertSpecSerializedText";
	    // DPI_DataAlertDefaultSubject, having type string
	    ParameterId["DataAlertDefaultSubject"] = "dataAlertDefaultSubject";
	    // DPI_DataAlertThresholdText, having type string
	    ParameterId["DataAlertThresholdText"] = "dataAlertThresholdText";
	    // DPI_DataGridSortColumnName, having type string
	    ParameterId["DataGridSortColumnName"] = "datagridSortColumnName";
	    // DPI_DataServerConnectionError, having type string
	    ParameterId["DataServerConnectionError"] = "dataServerConnectionError";
	    // DPI_DatabaseFilter, having type string
	    ParameterId["DatabaseFilter"] = "databaseFilter";
	    // DPI_DatabaseFilterPrompt, having type string
	    ParameterId["DatabaseFilterPrompt"] = "databaseFilterPrompt";
	    // DPI_DatasourceRanking, having type string
	    ParameterId["DatasourceRanking"] = "datasourceRanking";
	    // DPI_DatasourceUrl, having type string
	    ParameterId["DatasourceUrl"] = "datasourceUrl";
	    // DPI_DatasourceUsername, having type string
	    ParameterId["DatasourceUsername"] = "datasourceUsername";
	    // DPI_DataSourceCreationError, having type string
	    ParameterId["DataSourceCreationError"] = "dataSourceCreationError";
	    // DPI_DateFormat, having type string
	    ParameterId["DateFormat"] = "dateFormat";
	    // DPI_DatePart, having type string
	    ParameterId["DatePart"] = "datePart";
	    // DPI_DatePartAbbrev, having type string
	    ParameterId["DatePartAbbrev"] = "datePartAbbrev";
	    // DPI_DefaultHierarchyName, having type string
	    ParameterId["DefaultHierarchyName"] = "defaultHierarchyName";
	    // DPI_DefaultMenuItemKey, having type string
	    ParameterId["DefaultMenuItemKey"] = "defaultMenuItemKey";
	    // DPI_Delimiter, having type string
	    ParameterId["Delimiter"] = "delimiter";
	    // DPI_DeviceName, having type string
	    ParameterId["DeviceName"] = "deviceName";
	    // DPI_DeviceType, having type string
	    ParameterId["DeviceType"] = "deviceType";
	    // DPI_DisplayPath, having type string
	    ParameterId["DisplayPath"] = "displayPath";
	    // DPI_DistributionValueString, having type string
	    ParameterId["DistributionValueString"] = "distributionValueString";
	    // DPI_DrillPathName, having type string
	    ParameterId["DrillPathName"] = "drillPathName";
	    // DPI_EmbeddedTitle, having type string
	    ParameterId["EmbeddedTitle"] = "embeddedTitle";
	    // DPI_EnterValueText, having type string
	    ParameterId["EnterValueText"] = "enterValueText";
	    // DPI_EscapeString, having type string
	    ParameterId["EscapeString"] = "escapeString";
	    // DPI_ExtensionDialogPayload, having type string
	    ParameterId["ExtensionDialogPayload"] = "extensionDialogPayload";
	    // DPI_ExtensionDialogUrl, having type string
	    ParameterId["ExtensionDialogUrl"] = "extensionDialogUrl";
	    // DPI_ExtSvcConfigHost, having type string
	    ParameterId["ExtSvcConfigHost"] = "extSvcConfigHost";
	    // DPI_ExtSvcConfigPassword, having type string
	    ParameterId["ExtSvcConfigPassword"] = "extSvcConfigPassword";
	    // DPI_ExtSvcConfigPort, having type string
	    ParameterId["ExtSvcConfigPort"] = "extSvcConfigPort";
	    // DPI_ExtSvcConfigConnectTimeout, having type string
	    ParameterId["ExtSvcConfigConnectTimeout"] = "extSvcConnectTimeout";
	    // DPI_ExtSvcConfigPrevHost, having type string
	    ParameterId["ExtSvcConfigPrevHost"] = "extSvcConfigPrevHost";
	    // DPI_ExtSvcConfigUsername, having type string
	    ParameterId["ExtSvcConfigUsername"] = "extSvcConfigUsername";
	    // DPI_ExtractUpdateTime, having type string
	    ParameterId["ExtractUpdateTime"] = "extractUpdateTime";
	    // DPI_FieldFolderName, having type string
	    ParameterId["FieldFolderName"] = "fieldFolderName";
	    // DPI_FieldNameString, having type string
	    ParameterId["FieldNameString"] = "fieldName";
	    // DPI_FilterSearchDomain, having type string
	    ParameterId["FilterSearchDomain"] = "filterSearchDomain";
	    // DPI_FilterSpec, having type string
	    ParameterId["FilterSpec"] = "filterSpec";
	    // DPI_FirstValue, having type string
	    ParameterId["FirstValue"] = "firstValue";
	    // DPI_FolderName, having type string
	    ParameterId["FolderName"] = "folderName";
	    // DPI_FontName, having type string
	    ParameterId["FontName"] = "fontName";
	    // DPI_FormatString, having type string
	    ParameterId["FormatString"] = "formatString";
	    // DPI_FormattedDisplayString, having type string
	    ParameterId["FormattedDisplayString"] = "formattedDisplayString";
	    // DPI_FormattedIncrementValue, having type string
	    ParameterId["FormattedIncrementValue"] = "formattedIncrement";
	    // DPI_FormattedMaxValue, having type string
	    ParameterId["FormattedMaxValue"] = "formattedMax";
	    // DPI_FormattedMinValue, having type string
	    ParameterId["FormattedMinValue"] = "formattedMin";
	    // DPI_FormattedValue, having type string
	    ParameterId["FormattedValue"] = "formattedValue";
	    // DPI_FormattedCenterValue, having type string
	    ParameterId["FormattedCenterValue"] = "formattedCenter";
	    // DPI_FormattedEndValue, having type string
	    ParameterId["FormattedEndValue"] = "formattedEnd";
	    // DPI_FormattedStartValue, having type string
	    ParameterId["FormattedStartValue"] = "formattedStart";
	    // DPI_PairedFormattedValue, having type string
	    ParameterId["PairedFormattedValue"] = "pairedFormattedValue";
	    // DPI_FrameAttributes, having type string
	    ParameterId["FrameAttributes"] = "frameAttr";
	    // DPI_GUID, having type string
	    ParameterId["GUID"] = "guid";
	    // DPI_GeographicSearchCandidateDisplayName, having type string
	    ParameterId["GeographicSearchCandidateDisplayName"] = "geographicSearchCandidateDisplayName";
	    // DPI_GeographicSearchCandidateParentName, having type string
	    ParameterId["GeographicSearchCandidateParentName"] = "geographicSearchCandidateParentName";
	    // DPI_GeographicSearchCandidateType, having type string
	    ParameterId["GeographicSearchCandidateType"] = "geographicSearchCandidateType";
	    // DPI_GeographicSearchLocale, having type string
	    ParameterId["GeographicSearchLocale"] = "geographicSearchLocale";
	    // DPI_GeographicSearchQueryString, having type string
	    ParameterId["GeographicSearchQueryString"] = "geographicSearchSearchString";
	    // DPI_GeographicSearchUILocale, having type string
	    ParameterId["GeographicSearchUILocale"] = "geographicSearchUilocale";
	    // DPI_IconRes, having type string
	    ParameterId["IconRes"] = "iconRes";
	    // DPI_ImageHash, having type string
	    ParameterId["ImageHash"] = "imageHash";
	    // DPI_ImageName, having type string
	    ParameterId["ImageName"] = "imageName";
	    // DPI_ImageRes, having type string
	    ParameterId["ImageRes"] = "imageRes";
	    // DPI_IncludesSiblingsPrompt, having type string
	    ParameterId["IncludesSiblingsPrompt"] = "includesSiblingsPrompt";
	    // DPI_IncludesSubfoldersPrompt, having type string
	    ParameterId["IncludesSubfoldersPrompt"] = "includesSubfoldersPrompt";
	    // DPI_IncrementalScheduleIDs, having type string
	    ParameterId["IncrementalScheduleIDs"] = "incrementalScheduleIds";
	    // DPI_InvariantKeyword, having type string
	    ParameterId["InvariantKeyword"] = "invariantKeyword";
	    // DPI_JoinOperator, having type string
	    ParameterId["JoinOperator"] = "joinOperator";
	    // DPI_JoinExpression, having type string
	    ParameterId["JoinExpression"] = "joinExpression";
	    // DPI_Key, having type string
	    ParameterId["Key"] = "keyId";
	    // DPI_Label, having type string
	    ParameterId["Label"] = "label";
	    // DPI_PairedLabel, having type string
	    ParameterId["PairedLabel"] = "pairedLabel";
	    // DPI_LayoutID, having type string
	    ParameterId["LayoutID"] = "layoutId";
	    // DPI_LeftJoinExpression, having type string
	    ParameterId["LeftJoinExpression"] = "leftJoinExpression";
	    // DPI_LimitCountExpression, having type string
	    ParameterId["LimitCountExpression"] = "limitCountExpression";
	    // DPI_LinkTarget, having type string
	    ParameterId["LinkTarget"] = "linkTarget";
	    // DPI_Locale, having type string
	    ParameterId["Locale"] = "locale";
	    // DPI_LocalizedKeyword, having type string
	    ParameterId["LocalizedKeyword"] = "localizedKeyword";
	    // DPI_MapBoxGLStyleId, having type string
	    ParameterId["MapBoxGLStyleId"] = "mapboxGlStyleId";
	    // DPI_MapBoxStyleUrl, having type string
	    ParameterId["MapBoxStyleUrl"] = "mapboxStyleUrl";
	    // DPI_MapBoxUsername, having type string
	    ParameterId["MapBoxUsername"] = "mapboxUsername";
	    // DPI_MapScaleReadoutString, having type string
	    ParameterId["MapScaleReadoutString"] = "mapScaleReadoutString";
	    // DPI_MapScaleTooltipString, having type string
	    ParameterId["MapScaleTooltipString"] = "mapScaleTooltipString";
	    // DPI_MapSourceName, having type string
	    ParameterId["MapSourceName"] = "mapSourceName";
	    // DPI_MaxLabel, having type string
	    ParameterId["MaxLabel"] = "maxLabel";
	    // DPI_MinLabel, having type string
	    ParameterId["MinLabel"] = "minLabel";
	    // DPI_ModelDescriptionParagraph, having type string
	    ParameterId["ModelDescriptionParagraph"] = "modelDescriptionParagraph";
	    // DPI_NameTemplate, having type string
	    ParameterId["NameTemplate"] = "nameTemplate";
	    // DPI_NewDrillPath, having type string
	    ParameterId["NewDrillPath"] = "newDrillPath";
	    // DPI_NewFieldFolderName, having type string
	    ParameterId["NewFieldFolderName"] = "newFieldFolderName";
	    // DPI_NewTableAlias, having type string
	    ParameterId["NewTableAlias"] = "newTableAlias";
	    // DPI_NlpBackend, having type string
	    ParameterId["NlpBackend"] = "nlpBackend";
	    // DPI_NonFormattedValue, having type string
	    ParameterId["NonFormattedValue"] = "unformattedValue";
	    // DPI_OAuthUserName, having type string
	    ParameterId["OAuthUserName"] = "oauthUsername";
	    // DPI_ObjectName, having type string
	    ParameterId["ObjectName"] = "objectName";
	    // DPI_ObjectOverrideMessage, having type string
	    ParameterId["ObjectOverrideMessage"] = "objectOverrideMessage";
	    // DPI_OldTableAlias, having type string
	    ParameterId["OldTableAlias"] = "oldTableAlias";
	    // DPI_OperatingSystem, having type string
	    ParameterId["OperatingSystem"] = "operatingSystem";
	    // DPI_OriginalFilePath, having type string
	    ParameterId["OriginalFilePath"] = "originalFilePath";
	    // DPI_OriginalFileVersion, having type string
	    ParameterId["OriginalFileVersion"] = "originalFileVersion";
	    // DPI_PaneDescriptorKey, having type string
	    ParameterId["PaneDescriptorKey"] = "paneDescrKey";
	    // DPI_ParentName, having type string
	    ParameterId["ParentName"] = "parentName";
	    // DPI_ParentTable, having type string
	    ParameterId["ParentTable"] = "parentTable";
	    // DPI_PatternFilterString, having type string
	    ParameterId["PatternFilterString"] = "patternFilterString";
	    // DPI_PendingCalcName, having type string
	    ParameterId["PendingCalcName"] = "pendingCalcName";
	    // DPI_PercentilesString, having type string
	    ParameterId["PercentilesString"] = "percentilesString";
	    // DPI_ProjectId, having type string
	    ParameterId["ProjectId"] = "projectId";
	    // DPI_ProjectName, having type string
	    ParameterId["ProjectName"] = "projectName";
	    // DPI_PropertyName, having type string
	    ParameterId["PropertyName"] = "propertyName";
	    // DPI_QuickFilterTitleCaption, having type string
	    ParameterId["QuickFilterTitleCaption"] = "quickFilterTitleCaption";
	    // DPI_RangeDiffStr, having type string
	    ParameterId["RangeDiffStr"] = "diffValue";
	    // DPI_RangeMaxStr, having type string
	    ParameterId["RangeMaxStr"] = "maxValue";
	    // DPI_RangeMinStr, having type string
	    ParameterId["RangeMinStr"] = "minValue";
	    // DPI_RecoveredFilePath, having type string
	    ParameterId["RecoveredFilePath"] = "recoveredFilePath";
	    // DPI_ReferenceLineSpecificationId, having type string
	    ParameterId["ReferenceLineSpecificationId"] = "referenceLineId";
	    // DPI_ReplaceFieldPrompt, having type string
	    ParameterId["ReplaceFieldPrompt"] = "replaceFieldPrompt";
	    // DPI_RightJoinExpression, having type string
	    ParameterId["RightJoinExpression"] = "rightJoinExpression";
	    // DPI_RootPath, having type string
	    ParameterId["RootPath"] = "rootPath";
	    // DPI_RuntimeFinalDatastore, having type string
	    ParameterId["RuntimeFinalDatastore"] = "runtimeFinalDatastore";
	    // DPI_RuntimeInitialDatastore, having type string
	    ParameterId["RuntimeInitialDatastore"] = "runtimeInitialDatastore";
	    // DPI_RuntimeVTL, having type string
	    ParameterId["RuntimeVTL"] = "runtimeVtl";
	    // DPI_SampleDataString, having type string
	    ParameterId["SampleDataString"] = "sampleData";
	    // DPI_ScheduleIDs, having type string
	    ParameterId["ScheduleIDs"] = "scheduleIds";
	    // DPI_SchemaFieldIconResource, having type string
	    ParameterId["SchemaFieldIconResource"] = "fieldIconRes";
	    // DPI_ScreenName, having type string
	    ParameterId["ScreenName"] = "screenName";
	    // DPI_ScriptCommand, having type string
	    ParameterId["ScriptCommand"] = "command";
	    // DPI_SecondValue, having type string
	    ParameterId["SecondValue"] = "secondValue";
	    // DPI_SelectedValue, having type string
	    ParameterId["SelectedValue"] = "selectedValue";
	    // DPI_ShapeName, having type string
	    ParameterId["ShapeName"] = "shapeName";
	    // DPI_SheetId, having type string
	    ParameterId["SheetId"] = "sheetId";
	    // DPI_ShowDataTable, having type string
	    ParameterId["ShowDataTable"] = "showDataTable";
	    // DPI_SimpleCommand, having type string
	    ParameterId["SimpleCommand"] = "simpleCommand";
	    // DPI_SortModeCaption, having type string
	    ParameterId["SortModeCaption"] = "sortModeCaption";
	    // DPI_SourceName, having type string
	    ParameterId["SourceName"] = "sourceName";
	    // DPI_SourceText, having type string
	    ParameterId["SourceText"] = "sourceText";
	    // DPI_SpecialValueText, having type string
	    ParameterId["SpecialValueText"] = "specialValueText";
	    // DPI_StaticImage, having type string
	    ParameterId["StaticImage"] = "staticImage";
	    // DPI_StoryPointBase, having type string
	    ParameterId["StoryPointBase"] = "storyPointBase";
	    // DPI_StoryPointCaption, having type string
	    ParameterId["StoryPointCaption"] = "storyPointCaption";
	    // DPI_Storyboard, having type string
	    ParameterId["Storyboard"] = "storyboard";
	    // DPI_StyledLabel, having type string
	    ParameterId["StyledLabel"] = "styledLabel";
	    // DPI_SummaryCaption, having type string
	    ParameterId["SummaryCaption"] = "summaryCaption";
	    // DPI_SummaryField, having type string
	    ParameterId["SummaryField"] = "summaryField";
	    // DPI_TableauVersion, having type string
	    ParameterId["TableauVersion"] = "tableauVersion";
	    // DPI_TableFilter, having type string
	    ParameterId["TableFilter"] = "tableFilter";
	    // DPI_TableFilterPrompt, having type string
	    ParameterId["TableFilterPrompt"] = "tableFilterPrompt";
	    // DPI_TagsLabel, having type string
	    ParameterId["TagsLabel"] = "tagsLabel";
	    // DPI_Target, having type string
	    ParameterId["Target"] = "target";
	    // DPI_ThumbnailGroup, having type string
	    ParameterId["ThumbnailGroup"] = "thumbnailGroup";
	    // DPI_ThumbnailUser, having type string
	    ParameterId["ThumbnailUser"] = "thumbnailUser";
	    // DPI_TimeFormat, having type string
	    ParameterId["TimeFormat"] = "timeFormat";
	    // DPI_TrendLineErrorString, having type string
	    ParameterId["TrendLineErrorString"] = "trendLineErrorString";
	    // DPI_TrendLineModelFormula, having type string
	    ParameterId["TrendLineModelFormula"] = "trendLineModelFormula";
	    // DPI_URLString, having type string
	    ParameterId["URLString"] = "urlString";
	    // DPI_URLTest, having type string
	    ParameterId["URLTest"] = "urlTest";
	    // DPI_ValidationMessage, having type string
	    ParameterId["ValidationMessage"] = "validationMessage";
	    // DPI_ValueStr, having type string
	    ParameterId["ValueStr"] = "valueString";
	    // DPI_VerifiedNonFormattedValue, having type string
	    ParameterId["VerifiedNonFormattedValue"] = "verifiedUnformattedValue";
	    // DPI_WorkbookFullPath, having type string
	    ParameterId["WorkbookFullPath"] = "workbookFullPath";
	    // DPI_WindowTitle, having type string
	    ParameterId["WindowTitle"] = "windowTitle";
	    // DPI_ZoneName, having type string
	    ParameterId["ZoneName"] = "zoneName";
	    // DPI_ZoneParam, having type string
	    ParameterId["ZoneParam"] = "zoneParam";
	    // DPI_DataAlertErrorText, having type string
	    ParameterId["DataAlertErrorText"] = "dataAlertErrorText";
	    // DPI_ExtractTempDirectory, having type string
	    ParameterId["ExtractTempDirectory"] = "extractTempDir";
	    // DPI_DSSubClass, having type string
	    ParameterId["DSSubClass"] = "dsSubClass";
	    // DPI_DbgCommandLine, having type string
	    ParameterId["DbgCommandLine"] = "debugCommandLine";
	    // DPI_DbgLogPath, having type string
	    ParameterId["DbgLogPath"] = "debugLogPath";
	    // DPI_DbgOSVersion, having type string
	    ParameterId["DbgOSVersion"] = "debugOsVersion";
	    // DPI_DbgUserName, having type string
	    ParameterId["DbgUserName"] = "debugUsername";
	    // DPI_ErrorMsg, having type string
	    ParameterId["ErrorMsg"] = "errorMessage";
	    // DPI_ErrorStackTrace, having type string
	    ParameterId["ErrorStackTrace"] = "errorStackTrace";
	    // DPI_ErrorStr, having type string
	    ParameterId["ErrorStr"] = "errorString";
	    // DPI_EventMessage, having type string
	    ParameterId["EventMessage"] = "eventMessage";
	    // DPI_EventTimestamp, having type string
	    ParameterId["EventTimestamp"] = "eventTimestamp";
	    // DPI_ExtractDeltaPath, having type string
	    ParameterId["ExtractDeltaPath"] = "extractDeltaPath";
	    // DPI_ExtractPath, having type string
	    ParameterId["ExtractPath"] = "extractPath";
	    // DPI_ExtractSuggestedPath, having type string
	    ParameterId["ExtractSuggestedPath"] = "suggestedExtractPath";
	    // DPI_ExtractTaskSummary, having type string
	    ParameterId["ExtractTaskSummary"] = "extractTaskSummary";
	    // DPI_FactorsString, having type string
	    ParameterId["FactorsString"] = "factorsStr";
	    // DPI_FormattedFamilyName, having type string
	    ParameterId["FormattedFamilyName"] = "formattedFamilyName";
	    // DPI_FunctionSignature, having type string
	    ParameterId["FunctionSignature"] = "funcSig";
	    // DPI_FunctionTooltip, having type string
	    ParameterId["FunctionTooltip"] = "funcTooltip";
	    // DPI_HelpContents, having type string
	    ParameterId["HelpContents"] = "helpContents";
	    // DPI_MapAttributionText, having type string
	    ParameterId["MapAttributionText"] = "mapAttributionText";
	    // DPI_MapAttributionTextSize, having type string
	    ParameterId["MapAttributionTextSize"] = "mapAttributionTextSize";
	    // DPI_MapAttributionUrl, having type string
	    ParameterId["MapAttributionUrl"] = "mapAttributionUrl";
	    // DPI_MapBoxErrorMessage, having type string
	    ParameterId["MapBoxErrorMessage"] = "mapboxErrorMessage";
	    // DPI_MapBoxOldStyleName, having type string
	    ParameterId["MapBoxOldStyleName"] = "mapboxOldStyleName";
	    // DPI_MapBoxSelectedStyle, having type string
	    ParameterId["MapBoxSelectedStyle"] = "mapboxSelectedStyle";
	    // DPI_MapBoxStyleName, having type string
	    ParameterId["MapBoxStyleName"] = "mapboxStyleName";
	    // DPI_MapLayerRequest, having type string
	    ParameterId["MapLayerRequest"] = "mapLayerRequest";
	    // DPI_MapServerKey, having type string
	    ParameterId["MapServerKey"] = "mapServerKey";
	    // DPI_MapTileServer, having type string
	    ParameterId["MapTileServer"] = "mapTileServer";
	    // DPI_MapTileUrl, having type string
	    ParameterId["MapTileUrl"] = "mapTileUrl";
	    // DPI_PercentagesString, having type string
	    ParameterId["PercentagesString"] = "percentagesStr";
	    // DPI_PublishErrorMessage, having type string
	    ParameterId["PublishErrorMessage"] = "publishErrorMessage";
	    // DPI_TdePath, having type string
	    ParameterId["TdePath"] = "tdePath";
	    // DPI_UIAutomationComponentName, having type string
	    ParameterId["UIAutomationComponentName"] = "uiAutomationComponentName";
	    // DPI_UIAutomationEndTime, having type string
	    ParameterId["UIAutomationEndTime"] = "uiAutomationEndTime";
	    // DPI_UIAutomationName, having type string
	    ParameterId["UIAutomationName"] = "uiAutomationName";
	    // DPI_UIAutomationStartTime, having type string
	    ParameterId["UIAutomationStartTime"] = "uiAutomationStartTime";
	    // DPI_UIAutomationValue, having type string
	    ParameterId["UIAutomationValue"] = "uiAutomationValue";
	    // DPI_WMSConnectionName, having type string
	    ParameterId["WMSConnectionName"] = "wmsConnectionName";
	    // DPI_WMSOldConnectionName, having type string
	    ParameterId["WMSOldConnectionName"] = "wmsOldConnectionName";
	    // DPI_WMSServerUrl, having type string
	    ParameterId["WMSServerUrl"] = "wmsServerUrl";
	    // DPI_AboutBuildVersion, having type string
	    ParameterId["AboutBuildVersion"] = "aboutBuildVersion";
	    // DPI_ActionFields, having type string
	    ParameterId["ActionFields"] = "actionFields";
	    // DPI_AddVariableLabel, having type string
	    ParameterId["AddVariableLabel"] = "addVariableLabel";
	    // DPI_AddVariableTooltip, having type string
	    ParameterId["AddVariableTooltip"] = "addVariableTooltip";
	    // DPI_AllowedDataSourcesByName, having type string
	    ParameterId["AllowedDataSourcesByName"] = "allowedDataSourcesByName";
	    // DPI_AppAboutVersion, having type string
	    ParameterId["AppAboutVersion"] = "appAboutVersion";
	    // DPI_AppBuildBranchName, having type string
	    ParameterId["AppBuildBranchName"] = "appBuildBranchName";
	    // DPI_AppBuildVersion, having type string
	    ParameterId["AppBuildVersion"] = "appBuildVersion";
	    // DPI_AppExternalVersion, having type string
	    ParameterId["AppExternalVersion"] = "appExternalVersion";
	    // DPI_AppName, having type string
	    ParameterId["AppName"] = "appName";
	    // DPI_AppProductVersion, having type string
	    ParameterId["AppProductVersion"] = "appProductVersion";
	    // DPI_OriginalVersion, having type string
	    ParameterId["OriginalVersion"] = "originalVersion";
	    // DPI_AtTheLevelSpecialCaption, having type string
	    ParameterId["AtTheLevelSpecialCaption"] = "atTheLevelSpecialCaption";
	    // DPI_AutoCompleteCalc, having type string
	    ParameterId["AutoCompleteCalc"] = "acCalc";
	    // DPI_CSVPath, having type string
	    ParameterId["CSVPath"] = "csvPath";
	    // DPI_CommandNamespace, having type string
	    ParameterId["CommandNamespace"] = "commandNamespace";
	    // DPI_Condition, having type string
	    ParameterId["Condition"] = "condition";
	    // DPI_ConditionSummary, having type string
	    ParameterId["ConditionSummary"] = "conditionSummary";
	    // DPI_ConfirmationMsg, having type string
	    ParameterId["ConfirmationMsg"] = "confirmationMsg";
	    // DPI_DashboardTypeText, having type string
	    ParameterId["DashboardTypeText"] = "dashboardType";
	    // DPI_DataserverPublicAddress, having type string
	    ParameterId["DataserverPublicAddress"] = "dataserverPublicAddress";
	    // DPI_DatasourceFileName, having type string
	    ParameterId["DatasourceFileName"] = "datasourceFileName";
	    // DPI_DecimalMark, having type string
	    ParameterId["DecimalMark"] = "decimalMark";
	    // DPI_DeleteVariableTooltip, having type string
	    ParameterId["DeleteVariableTooltip"] = "deleteVariableTooltip";
	    // DPI_DialogTitle, having type string
	    ParameterId["DialogTitle"] = "dialogTitle";
	    // DPI_DisplayValue, having type string
	    ParameterId["DisplayValue"] = "displayValue";
	    // DPI_TooltipValue, having type string
	    ParameterId["TooltipValue"] = "tooltipValue";
	    // DPI_DstPath, having type string
	    ParameterId["DstPath"] = "dstPath";
	    // DPI_EditWidgetHeader, having type string
	    ParameterId["EditWidgetHeader"] = "editWidgetHeader";
	    // DPI_EditWidgetInstruction, having type string
	    ParameterId["EditWidgetInstruction"] = "editWidgetInstruction";
	    // DPI_EndSelectionCaption, having type string
	    ParameterId["EndSelectionCaption"] = "endSelectionCaption";
	    // DPI_ErrorConfirmationQuestion, having type string
	    ParameterId["ErrorConfirmationQuestion"] = "errorConfirmationQuestion";
	    // DPI_ErrorDialogTitle, having type string
	    ParameterId["ErrorDialogTitle"] = "errorDialogTitle";
	    // DPI_ErrorHelpLink, having type string
	    ParameterId["ErrorHelpLink"] = "errorHelpLink";
	    // DPI_ErrorShortMessage, having type string
	    ParameterId["ErrorShortMessage"] = "errorShortMessage";
	    // DPI_FilterSearchQuery, having type string
	    ParameterId["FilterSearchQuery"] = "filterSearchQuery";
	    // DPI_FromLabel, having type string
	    ParameterId["FromLabel"] = "fromLabel";
	    // DPI_FunctionHelp, having type string
	    ParameterId["FunctionHelp"] = "functionHelp";
	    // DPI_Instructions, having type string
	    ParameterId["Instructions"] = "instructions";
	    // DPI_IssueHelperLinks, having type string
	    ParameterId["IssueHelperLinks"] = "issueHelperLinks";
	    // DPI_LargeUnitDisplay, having type string
	    ParameterId["LargeUnitDisplay"] = "largeUnitDisplay";
	    // DPI_Limit, having type string
	    ParameterId["Limit"] = "limit";
	    // DPI_ListViewNameLabel, having type string
	    ParameterId["ListViewNameLabel"] = "listViewNameLabel";
	    // DPI_ListViewValueLabel, having type string
	    ParameterId["ListViewValueLabel"] = "listViewValueLabel";
	    // DPI_MapScaleReadoutUnit, having type string
	    ParameterId["MapScaleReadoutUnit"] = "mapScaleReadoutUnit";
	    // DPI_MeasureDimension, having type string
	    ParameterId["MeasureDimension"] = "measuresDimension";
	    // DPI_MimeType, having type string
	    ParameterId["MimeType"] = "mimeType";
	    // DPI_NotificationMsg, having type string
	    ParameterId["NotificationMsg"] = "notificationMsg";
	    // DPI_OperationName, having type string
	    ParameterId["OperationName"] = "operationName";
	    // DPI_PageTitle, having type string
	    ParameterId["PageTitle"] = "pageTitle";
	    // DPI_PatternSummary, having type string
	    ParameterId["PatternSummary"] = "patternSummary";
	    // DPI_ReferenceLineId, having type string
	    ParameterId["ReferenceLineId"] = "refLineId";
	    // DPI_ReferenceLinePairedId, having type string
	    ParameterId["ReferenceLinePairedId"] = "refLinePairedId";
	    // DPI_ReplaceText, having type string
	    ParameterId["ReplaceText"] = "replaceText";
	    // DPI_RequiredVariableMessage, having type string
	    ParameterId["RequiredVariableMessage"] = "requiredVariableMessage";
	    // DPI_RestartEverySpecialCaption, having type string
	    ParameterId["RestartEverySpecialCaption"] = "restartEverySpecialCaption";
	    // DPI_Root, having type string
	    ParameterId["Root"] = "root";
	    // DPI_SelectionSummary, having type string
	    ParameterId["SelectionSummary"] = "selectionSummary";
	    // DPI_SessionAttributeKey, having type string
	    ParameterId["SessionAttributeKey"] = "sessionAttributeKey";
	    // DPI_SessionAttributeValue, having type string
	    ParameterId["SessionAttributeValue"] = "sessionAttributeValue";
	    // DPI_SheetAttributeKey, having type string
	    ParameterId["SheetAttributeKey"] = "baseSheetAttributeKey";
	    // DPI_SheetAttributeValue, having type string
	    ParameterId["SheetAttributeValue"] = "baseSheetAttributeValue";
	    // DPI_SmallUnitDisplay, having type string
	    ParameterId["SmallUnitDisplay"] = "smallUnitDisplay";
	    // DPI_SourceCaption, having type string
	    ParameterId["SourceCaption"] = "sourceCaption";
	    // DPI_SrcPath, having type string
	    ParameterId["SrcPath"] = "srcPath";
	    // DPI_StartSelectionCaption, having type string
	    ParameterId["StartSelectionCaption"] = "startSelectionCaption";
	    // DPI_Subtitle, having type string
	    ParameterId["Subtitle"] = "subtitle";
	    // DPI_TableauServerSiteName, having type string
	    ParameterId["TableauServerSiteName"] = "tableauServerSiteName";
	    // DPI_TargetCaption, having type string
	    ParameterId["TargetCaption"] = "targetCaption";
	    // DPI_ThumbnailPath, having type string
	    ParameterId["ThumbnailPath"] = "thumbnailPath";
	    // DPI_ToLabel, having type string
	    ParameterId["ToLabel"] = "toLabel";
	    // DPI_URLAddress, having type string
	    ParameterId["URLAddress"] = "urlAddress";
	    // DPI_UrlRoot, having type string
	    ParameterId["UrlRoot"] = "urlRoot";
	    // DPI_ValuesTableHeader, having type string
	    ParameterId["ValuesTableHeader"] = "valuesTableHeader";
	    // DPI_ValuesTableHeader2, having type string
	    ParameterId["ValuesTableHeader2"] = "valuesTableHeader2";
	    // DPI_VariableDescription, having type string
	    ParameterId["VariableDescription"] = "variableDescription";
	    // DPI_VariableDisplayName, having type string
	    ParameterId["VariableDisplayName"] = "variableDisplayName";
	    // DPI_VariableGUID, having type string
	    ParameterId["VariableGUID"] = "variableGuid";
	    // DPI_VerboseName, having type string
	    ParameterId["VerboseName"] = "verboseName";
	    // DPI_ViewId, having type string
	    ParameterId["ViewId"] = "viewId";
	    // DPI_Warning1, having type string
	    ParameterId["Warning1"] = "warning1";
	    // DPI_Warning2, having type string
	    ParameterId["Warning2"] = "warning2";
	    // DPI_RefreshToken, having type string
	    ParameterId["RefreshToken"] = "refresh_token";
	    // DPI_TokenType, having type string
	    ParameterId["TokenType"] = "token_type";
	    // DPI_XSRFToken, having type string
	    ParameterId["XSRFToken"] = "xsrf_token";
	    // DPI_AxisSubtitle, having type string
	    ParameterId["AxisSubtitle"] = "axisSubtitle";
	    // DPI_AxisTitle, having type string
	    ParameterId["AxisTitle"] = "axisTitle";
	    // DPI_TickMarkOriginDataValue, having type string
	    ParameterId["TickMarkOriginDataValue"] = "tickMarkOriginDataValue";
	    // DPI_TickMarkOriginDataValueNoTime, having type string
	    ParameterId["TickMarkOriginDataValueNoTime"] = "tickMarkOriginDataValueNoTime";
	    // DPI_TickMarkSpacingDataValue, having type string
	    ParameterId["TickMarkSpacingDataValue"] = "tickMarkSpacingDataValue";
	    // DPI_ExtractActionLocalized, having type string
	    ParameterId["ExtractActionLocalized"] = "extractActionLocalized";
	    // DPI_ExtractSource, having type string
	    ParameterId["ExtractSource"] = "extractSource";
	    // DPI_FileContents, having type string
	    ParameterId["FileContents"] = "fileContents";
	    // DPI_SaveImagePath, having type string
	    ParameterId["SaveImagePath"] = "saveImagePath";
	    // DPI_WidgetUID, having type string
	    ParameterId["WidgetUID"] = "widgetUniqueId";
	    // DPI_DatePropertiesDisplayText, having type string
	    ParameterId["DatePropertiesDisplayText"] = "datePropertiesDisplayText";
	    // DPI_DatePropertiesHelperText, having type string
	    ParameterId["DatePropertiesHelperText"] = "datePropertiesHelperText";
	    // DPI_EventName, having type string
	    ParameterId["EventName"] = "eventName";
	    // DPI_ExceptionType, having type string
	    ParameterId["ExceptionType"] = "exceptionType";
	    // DPI_SearchPlaceholder, having type string
	    ParameterId["SearchPlaceholder"] = "searchPlaceholder";
	    // DPI_TargetVersion, having type string
	    ParameterId["TargetVersion"] = "targetVersion";
	    // DPI_DataValueDisplayString, having type string
	    ParameterId["DataValueDisplayString"] = "dataValueDisplayString";
	    // DPI_DomainString, having type string
	    ParameterId["DomainString"] = "domainString";
	    // DPI_RawDataValueString, having type string
	    ParameterId["RawDataValueString"] = "rawDataValueString";
	    // DPI_RichTextDialogTitle, having type string
	    ParameterId["RichTextDialogTitle"] = "richTextDialogTitle";
	    // DPI_RichTextContent, having type string
	    ParameterId["RichTextContent"] = "richTextContent";
	    // DPI_MarkSizeAsString, having type string
	    ParameterId["MarkSizeAsString"] = "markSizeAsString";
	    // DPI_UnitsLabel, having type string
	    ParameterId["UnitsLabel"] = "unitsLabel";
	    // DPI_EmailAddress, having type string
	    ParameterId["EmailAddress"] = "emailAddress";
	    // DPI_FirstName, having type string
	    ParameterId["FirstName"] = "firstName";
	    // DPI_LastName, having type string
	    ParameterId["LastName"] = "lastName";
	    // DPI_SummaryCardAvg, having type string
	    ParameterId["SummaryCardAvg"] = "summaryCardAvg";
	    // DPI_SummaryCardCaption, having type string
	    ParameterId["SummaryCardCaption"] = "summaryCardCaption";
	    // DPI_SummaryCardCount, having type string
	    ParameterId["SummaryCardCount"] = "summaryCardCount";
	    // DPI_SummaryCardKurtosis, having type string
	    ParameterId["SummaryCardKurtosis"] = "summaryCardKurtosis";
	    // DPI_SummaryCardMax, having type string
	    ParameterId["SummaryCardMax"] = "summaryCardMax";
	    // DPI_SummaryCardMedian, having type string
	    ParameterId["SummaryCardMedian"] = "summaryCardMedian";
	    // DPI_SummaryCardMin, having type string
	    ParameterId["SummaryCardMin"] = "summaryCardMin";
	    // DPI_SummaryCardQuart1, having type string
	    ParameterId["SummaryCardQuart1"] = "summaryCardQuart1";
	    // DPI_SummaryCardQuart3, having type string
	    ParameterId["SummaryCardQuart3"] = "summaryCardQuart3";
	    // DPI_SummaryCardSkewness, having type string
	    ParameterId["SummaryCardSkewness"] = "summaryCardSkewness";
	    // DPI_SummaryCardStdev, having type string
	    ParameterId["SummaryCardStdev"] = "summaryCardStdev";
	    // DPI_SummaryCardSum, having type string
	    ParameterId["SummaryCardSum"] = "summaryCardSum";
	    // DPI_ValueClassAttr, having type string
	    ParameterId["ValueClassAttr"] = "valueClassAttr";
	    // DPI_TrendLineDialogTitle, having type string
	    ParameterId["TrendLineDialogTitle"] = "trendLineDialogTitle";
	    // DPI_LinearFitTypeLabel, having type string
	    ParameterId["LinearFitTypeLabel"] = "linearFitTypeLabel";
	    // DPI_LogFitTypeLabel, having type string
	    ParameterId["LogFitTypeLabel"] = "logFitTypeLabel";
	    // DPI_ExpFitTypeLabel, having type string
	    ParameterId["ExpFitTypeLabel"] = "expFitTypeLabel";
	    // DPI_PowerFitTypeLabel, having type string
	    ParameterId["PowerFitTypeLabel"] = "powerFitTypeLabel";
	    // DPI_PolynomialFitTypeLabel, having type string
	    ParameterId["PolynomialFitTypeLabel"] = "polynomialFitTypeLabel";
	    // DPI_ExcludeColorLabel, having type string
	    ParameterId["ExcludeColorLabel"] = "excludeColorLabel";
	    // DPI_EnableConfidenceBandsLabel, having type string
	    ParameterId["EnableConfidenceBandsLabel"] = "enableConfidenceBandsLabel";
	    // DPI_ForceInterceptZeroLabel, having type string
	    ParameterId["ForceInterceptZeroLabel"] = "forceInterceptZero label";
	    // DPI_EnableInstantAnalyticsLabel, having type string
	    ParameterId["EnableInstantAnalyticsLabel"] = "enableInstantAnalyticsLabel";
	    // DPI_EnableTooltipsLabel, having type string
	    ParameterId["EnableTooltipsLabel"] = "enableTooltipLabel";
	    // DPI_AuthenticationSummary, having type string
	    ParameterId["AuthenticationSummary"] = "authenticationSummary";
	    // DPI_BtnCancelText, having type string
	    ParameterId["BtnCancelText"] = "btnCancelText";
	    // DPI_BtnOkText, having type string
	    ParameterId["BtnOkText"] = "btnOkText";
	    // DPI_ButtonText, having type string
	    ParameterId["ButtonText"] = "buttonText";
	    // DPI_CalculationCaption, having type string
	    ParameterId["CalculationCaption"] = "calculationCaption";
	    // DPI_CalculationDependencies, having type string
	    ParameterId["CalculationDependencies"] = "calculationDependencies";
	    // DPI_CalculationFormula, having type string
	    ParameterId["CalculationFormula"] = "calculationFormula";
	    // DPI_CheckPublishMessage, having type string
	    ParameterId["CheckPublishMessage"] = "checkPublishSummary";
	    // DPI_ClusterModelText, having type string
	    ParameterId["ClusterModelText"] = "clusterModelText";
	    // DPI_ClusterSummaryScaledText, having type string
	    ParameterId["ClusterSummaryScaledText"] = "clusterSummaryScaledText";
	    // DPI_ClusterSummaryText, having type string
	    ParameterId["ClusterSummaryText"] = "clusterSummaryText";
	    // DPI_ColumnCaption, having type string
	    ParameterId["ColumnCaption"] = "columnCaption";
	    // DPI_CurrentDatePeriodLabel, having type string
	    ParameterId["CurrentDatePeriodLabel"] = "currentDatePeriodLabel";
	    // DPI_CurrentToDateLabel, having type string
	    ParameterId["CurrentToDateLabel"] = "currentToDateLabel";
	    // DPI_DatasourceCaption, having type string
	    ParameterId["DatasourceCaption"] = "datasourceCaption";
	    // DPI_DateRangeLabel, having type string
	    ParameterId["DateRangeLabel"] = "dateRangeLabel";
	    // DPI_DefaultCaption, having type string
	    ParameterId["DefaultCaption"] = "defaultCaption";
	    // DPI_DisplayString, having type string
	    ParameterId["DisplayString"] = "displayText";
	    // DPI_DragDescription, having type string
	    ParameterId["DragDescription"] = "dragDescription";
	    // DPI_ExceptionMessage, having type string
	    ParameterId["ExceptionMessage"] = "exceptionMessage";
	    // DPI_Explanation, having type string
	    ParameterId["Explanation"] = "explanation";
	    // DPI_FieldCaption, having type string
	    ParameterId["FieldCaption"] = "fieldCaption";
	    // DPI_FieldSummary, having type string
	    ParameterId["FieldSummary"] = "fieldSummary";
	    // DPI_FieldSummaryLabel, having type string
	    ParameterId["FieldSummaryLabel"] = "fieldSummaryLabel";
	    // DPI_FilterDescription, having type string
	    ParameterId["FilterDescription"] = "filterDescription";
	    // DPI_FilterName, having type string
	    ParameterId["FilterName"] = "filterName";
	    // DPI_ForecastModelText, having type string
	    ParameterId["ForecastModelText"] = "forecastModelText";
	    // DPI_ForecastSummaryPctText, having type string
	    ParameterId["ForecastSummaryPctText"] = "forecastSummaryPctText";
	    // DPI_ForecastSummaryText, having type string
	    ParameterId["ForecastSummaryText"] = "forecastSummaryText";
	    // DPI_HasActiveExtractText, having type string
	    ParameterId["HasActiveExtractText"] = "hasActiveExtractText";
	    // DPI_HtmlColor, having type string
	    ParameterId["HtmlColor"] = "htmlColor";
	    // DPI_IncludeLocalFilesCheckedWarning, having type string
	    ParameterId["IncludeLocalFilesCheckedWarning"] = "includeLocalFilesCheckedWarning";
	    // DPI_IncludeLocalFilesWarning, having type string
	    ParameterId["IncludeLocalFilesWarning"] = "includeLocalFilesWarning";
	    // DPI_InvalidFieldCaption, having type string
	    ParameterId["InvalidFieldCaption"] = "invalidFieldCaption";
	    // DPI_LastDatePeriodLabel, having type string
	    ParameterId["LastDatePeriodLabel"] = "lastDatePeriodLabel";
	    // DPI_LastNDatePeriodsLabel, having type string
	    ParameterId["LastNDatePeriodsLabel"] = "lastNDatePeriodsLabel";
	    // DPI_LimitSummary, having type string
	    ParameterId["LimitSummary"] = "summary";
	    // DPI_LoadedExistingObjectWarning, having type string
	    ParameterId["LoadedExistingObjectWarning"] = "loadedExistingObjectWarning";
	    // DPI_ManageDatasourcesSummary, having type string
	    ParameterId["ManageDatasourcesSummary"] = "manageDatasourcesSummary";
	    // DPI_ModalDialog, having type string
	    ParameterId["ModalDialog"] = "modalDialog";
	    // DPI_NewDatasourceCaption, having type string
	    ParameterId["NewDatasourceCaption"] = "newDatasourceCaption";
	    // DPI_NextDatePeriodLabel, having type string
	    ParameterId["NextDatePeriodLabel"] = "nextDatePeriodLabel";
	    // DPI_NextNDatePeriodsLabel, having type string
	    ParameterId["NextNDatePeriodsLabel"] = "nextNDatePeriodsLabel";
	    // DPI_PermissionsButtonLabel, having type string
	    ParameterId["PermissionsButtonLabel"] = "permissionsButtonLabel";
	    // DPI_PermissionsEditorRoleId, having type string
	    ParameterId["PermissionsEditorRoleId"] = "permissionsEditorRoleId";
	    // DPI_PermissionsLabel, having type string
	    ParameterId["PermissionsLabel"] = "permissionsLabel";
	    // DPI_PerspectiveCaption, having type string
	    ParameterId["PerspectiveCaption"] = "perspectiveCaption";
	    // DPI_PublishButtonLabel, having type string
	    ParameterId["PublishButtonLabel"] = "publishButtonLabel";
	    // DPI_PublishChoiceLabel, having type string
	    ParameterId["PublishChoiceLabel"] = "publishChoiceLabel";
	    // DPI_PublishObjectViewsSummary, having type string
	    ParameterId["PublishObjectViewsSummary"] = "publishObjectViewsSummary";
	    // DPI_QualifiedFieldCaption, having type string
	    ParameterId["QualifiedFieldCaption"] = "qualifiedFieldCaption";
	    // DPI_RelationshipTooltipText, having type string
	    ParameterId["RelationshipTooltipText"] = "relationshipTooltipText";
	    // DPI_ResetObjectAttributesWarning, having type string
	    ParameterId["ResetObjectAttributesWarning"] = "resetObjectAttributesWarning";
	    // DPI_RowCountCaption, having type string
	    ParameterId["RowCountCaption"] = "rowCountCaption";
	    // DPI_ServerCaption, having type string
	    ParameterId["ServerCaption"] = "serverCaption";
	    // DPI_SizeModeName, having type string
	    ParameterId["SizeModeName"] = "sizeModeName";
	    // DPI_SummaryText, having type string
	    ParameterId["SummaryText"] = "summaryText";
	    // DPI_SyncClientUseExtractLabel, having type string
	    ParameterId["SyncClientUseExtractLabel"] = "syncClientUseExtractLabel";
	    // DPI_Text, having type string
	    ParameterId["Text"] = "text";
	    // DPI_NLGText, having type string
	    ParameterId["NLGText"] = "nlgText";
	    // DPI_ArkLangText, having type string
	    ParameterId["ArkLangText"] = "arklang_text";
	    // DPI_TextDropdownControlLabel, having type string
	    ParameterId["TextDropdownControlLabel"] = "controlLabel";
	    // DPI_ThumbnailUserName, having type string
	    ParameterId["ThumbnailUserName"] = "thumbnailUserName";
	    // DPI_TitleString, having type string
	    ParameterId["TitleString"] = "titleString";
	    // DPI_TooltipText, having type string
	    ParameterId["TooltipText"] = "tooltipText";
	    // DPI_UpdatedCalcCaption, having type string
	    ParameterId["UpdatedCalcCaption"] = "updatedCalculationCaption";
	    // DPI_UpdatedCalcFormula, having type string
	    ParameterId["UpdatedCalcFormula"] = "updatedCalculationFormula";
	    // DPI_UserCaption, having type string
	    ParameterId["UserCaption"] = "userCaption";
	    // DPI_WarningTooltipText, having type string
	    ParameterId["WarningTooltipText"] = "warningTooltipText";
	    // DPI_DatasourceFile, having type string
	    ParameterId["DatasourceFile"] = "datasourceFile";
	    // DPI_File, having type string
	    ParameterId["File"] = "file";
	    // DPI_FileNameBase, having type string
	    ParameterId["FileNameBase"] = "filenameBase";
	    // DPI_NewFile, having type string
	    ParameterId["NewFile"] = "newFile";
	    // DPI_OriginalFile, having type string
	    ParameterId["OriginalFile"] = "originalFile";
	    // DPI_OutputFile, having type string
	    ParameterId["OutputFile"] = "outputFile";
	    // DPI_SampleFileName, having type string
	    ParameterId["SampleFileName"] = "sampleFilename";
	    // DPI_WorkbookFile, having type string
	    ParameterId["WorkbookFile"] = "workbookFile";
	    // DPI_ImageKey, having type string
	    ParameterId["ImageKey"] = "imageKey";
	    // DPI_OverlayImageKey, having type string
	    ParameterId["OverlayImageKey"] = "overlayImageKey";
	    // DPI_TempFileKey, having type string
	    ParameterId["TempFileKey"] = "tempfileKey";
	    // DPI_CapturedSheet, having type string
	    ParameterId["CapturedSheet"] = "capturedSheet";
	    // DPI_CurrentSheet, having type string
	    ParameterId["CurrentSheet"] = "currentSheet";
	    // DPI_Dashboard, having type string
	    ParameterId["Dashboard"] = "dashboard";
	    // DPI_EnsureSheet, having type string
	    ParameterId["EnsureSheet"] = "ensureSheetName";
	    // DPI_NewSheet, having type string
	    ParameterId["NewSheet"] = "newSheet";
	    // DPI_Sheet, having type string
	    ParameterId["Sheet"] = "sheet";
	    // DPI_SheetName, having type string
	    ParameterId["SheetName"] = "sheetName";
	    // DPI_SourceDashboard, having type string
	    ParameterId["SourceDashboard"] = "sourceDashboard";
	    // DPI_SourceSheet, having type string
	    ParameterId["SourceSheet"] = "sourceSheet";
	    // DPI_TargetSheet, having type string
	    ParameterId["TargetSheet"] = "targetSheet";
	    // DPI_WorkbookName, having type string
	    ParameterId["WorkbookName"] = "workbookName";
	    // DPI_Worksheet, having type string
	    ParameterId["Worksheet"] = "worksheet";
	    // DPI_BaseViewThumbLink, having type string
	    ParameterId["BaseViewThumbLink"] = "baseViewThumbLink";
	    // DPI_BlogLink, having type string
	    ParameterId["BlogLink"] = "blogLink";
	    // DPI_CacheUrl, having type string
	    ParameterId["CacheUrl"] = "cacheUrl";
	    // DPI_DownloadLink, having type string
	    ParameterId["DownloadLink"] = "downloadLink";
	    // DPI_RepositoryUrl, having type string
	    ParameterId["RepositoryUrl"] = "repositoryUrl";
	    // DPI_ShareLink, having type string
	    ParameterId["ShareLink"] = "shareLink";
	    // DPI_URL, having type string
	    ParameterId["URL"] = "url";
	    // DPI_ClusterModelHtml, having type string
	    ParameterId["ClusterModelHtml"] = "clusterModelHtml";
	    // DPI_ClusterSummaryHtml, having type string
	    ParameterId["ClusterSummaryHtml"] = "clusterSummaryHtml";
	    // DPI_ClusterSummaryScaledHtml, having type string
	    ParameterId["ClusterSummaryScaledHtml"] = "clusterSummaryScaledHtml";
	    // DPI_FieldDescription, having type string
	    ParameterId["FieldDescription"] = "fieldDescription";
	    // DPI_ForecastModelHtml, having type string
	    ParameterId["ForecastModelHtml"] = "forecastModelHtml";
	    // DPI_ForecastSummaryHtml, having type string
	    ParameterId["ForecastSummaryHtml"] = "forecastSummaryHtml";
	    // DPI_ForecastSummaryPctHtml, having type string
	    ParameterId["ForecastSummaryPctHtml"] = "forecastSummaryPctHtml";
	    // DPI_Html, having type string
	    ParameterId["Html"] = "html";
	    // DPI_HtmlSelection, having type string
	    ParameterId["HtmlSelection"] = "htmlSelection";
	    // DPI_HtmlTooltip, having type string
	    ParameterId["HtmlTooltip"] = "htmlTooltip";
	    // DPI_HtmlTooltipModified, having type string
	    ParameterId["HtmlTooltipModified"] = "htmlTooltipModified";
	    // DPI_TitleHtml, having type string
	    ParameterId["TitleHtml"] = "titleHtml";
	    // DPI_CacheUrlInfoJson, having type string
	    ParameterId["CacheUrlInfoJson"] = "cacheUrlInfoJson";
	    // DPI_FilterSearchJson, having type string
	    ParameterId["FilterSearchJson"] = "filterSearchJson";
	    // DPI_FilterSearchWithIndexJson, having type string
	    ParameterId["FilterSearchWithIndexJson"] = "filterSearchWithIndexJson";
	    // DPI_FilterShowChildrenJson, having type string
	    ParameterId["FilterShowChildrenJson"] = "filterShowChildrenJson";
	    // DPI_FiltersJson, having type string
	    ParameterId["FiltersJson"] = "filtersJson";
	    // DPI_FrameJson, having type string
	    ParameterId["FrameJson"] = "frameJson";
	    // DPI_GeometryJson, having type string
	    ParameterId["GeometryJson"] = "geometryJson";
	    // DPI_GetFilterItemsJson, having type string
	    ParameterId["GetFilterItemsJson"] = "getFilterItemsJson";
	    // DPI_KeepOnlyResponseJson, having type string
	    ParameterId["KeepOnlyResponseJson"] = "keepOnlyResponseJson";
	    // DPI_MenuCommandsJson, having type string
	    ParameterId["MenuCommandsJson"] = "menuCommandsJson";
	    // DPI_ModifiedSheetsJson, having type string
	    ParameterId["ModifiedSheetsJson"] = "modifiedSheetsJson";
	    // DPI_ParameterCtrlJson, having type string
	    ParameterId["ParameterCtrlJson"] = "parameterCtrlJson";
	    // DPI_ViewJson, having type string
	    ParameterId["ViewJson"] = "viewJson";
	    // DPI_CustomizedViewXML, having type string
	    ParameterId["CustomizedViewXML"] = "customizedViewXml";
	    // DPI_DatasourceDeltaXML, having type string
	    ParameterId["DatasourceDeltaXML"] = "datasourceDeltaXml";
	    // DPI_DatasourceXML, having type string
	    ParameterId["DatasourceXML"] = "datasourceXml";
	    // DPI_KeychainXML, having type string
	    ParameterId["KeychainXML"] = "keychainXml";
	    // DPI_PermissionsModelXML, having type string
	    ParameterId["PermissionsModelXML"] = "permissionsModelXml";
	    // DPI_SharedViewsXML, having type string
	    ParameterId["SharedViewsXML"] = "sharedViewsXml";
	    // DPI_TargetURL, having type string
	    ParameterId["TargetURL"] = "targetUrl";
	    // DPI_Anchor, having type string
	    ParameterId["Anchor"] = "anchor";
	    // DPI_CenterValue, having type string
	    ParameterId["CenterValue"] = "centerValue";
	    // DPI_ComputedBinSize, having type string
	    ParameterId["ComputedBinSize"] = "computedBinSize";
	    // DPI_ConstantValue, having type string
	    ParameterId["ConstantValue"] = "constantValue";
	    // DPI_PairedConstantValue, having type string
	    ParameterId["PairedConstantValue"] = "pairedConstantValue";
	    // DPI_CountDistinct, having type string
	    ParameterId["CountDistinct"] = "countDistinct";
	    // DPI_DataMax, having type string
	    ParameterId["DataMax"] = "dataMax";
	    // DPI_DataMin, having type string
	    ParameterId["DataMin"] = "dataMin";
	    // DPI_DataValueString, having type string
	    ParameterId["DataValueString"] = "dataValueStr";
	    // DPI_EndValue, having type string
	    ParameterId["EndValue"] = "endValue";
	    // DPI_RangeMax, having type string
	    ParameterId["RangeMax"] = "rangeMax";
	    // DPI_RangeMin, having type string
	    ParameterId["RangeMin"] = "rangeMin";
	    // DPI_RangeStepSize, having type string
	    ParameterId["RangeStepSize"] = "rangeStepSize";
	    // DPI_StartValue, having type string
	    ParameterId["StartValue"] = "startValue";
	    // DPI_TargetValue, having type string
	    ParameterId["TargetValue"] = "targetValue";
	    // DPI_ValueInc, having type string
	    ParameterId["ValueInc"] = "valueInc";
	    // DPI_ValueMax, having type string
	    ParameterId["ValueMax"] = "valueMax";
	    // DPI_ValueMin, having type string
	    ParameterId["ValueMin"] = "valueMin";
	    // DPI_QuantilesValue, having type string
	    ParameterId["QuantilesValue"] = "quantilesValue";
	    // DPI_UserInputBinSize, having type string
	    ParameterId["UserInputBinSize"] = "userBinSize";
	    // DPI_AddedDataSources, having type string[]
	    ParameterId["AddedDataSources"] = "addedDataSourceNames";
	    // DPI_AddressingCaptions, having type string[]
	    ParameterId["AddressingCaptions"] = "addressingCaptions";
	    // DPI_AggregationCaptions, having type string[]
	    ParameterId["AggregationCaptions"] = "aggregationCaptions";
	    // DPI_AtTheLevelCaptions, having type string[]
	    ParameterId["AtTheLevelCaptions"] = "atTheLevelCaptions";
	    // DPI_AuthenticationSettingLabels, having type string[]
	    ParameterId["AuthenticationSettingLabels"] = "authenticationSettingLabels";
	    // DPI_AutosaveFileIdsVector, having type string[]
	    ParameterId["AutosaveFileIdsVector"] = "autosaveFileIdsVector";
	    // DPI_ChangedTuples, having type string[]
	    ParameterId["ChangedTuples"] = "changedTuples";
	    // DPI_CharsetsAvailable, having type string[]
	    ParameterId["CharsetsAvailable"] = "charsetsAvailable";
	    // DPI_CharsetDisplayNames, having type string[]
	    ParameterId["CharsetDisplayNames"] = "charsetDisplayNames";
	    // DPI_ColorFactors, having type string[]
	    ParameterId["ColorFactors"] = "colorFactors";
	    // DPI_ColumnFullNames, having type string[]
	    ParameterId["ColumnFullNames"] = "columnFullNames";
	    // DPI_ConnectionNames, having type string[]
	    ParameterId["ConnectionNames"] = "connectionNames";
	    // DPI_ConnectionCaptions, having type string[]
	    ParameterId["ConnectionCaptions"] = "connectionCaptions";
	    // DPI_ConnectionBigQueryLegacySQLCheckBox, having type string[]
	    ParameterId["ConnectionBigQueryLegacySQLCheckBox"] = "connectionBigqueryLegacySqlCheckbox";
	    // DPI_CustomFieldOrder, having type string[]
	    ParameterId["CustomFieldOrder"] = "customFieldOrder";
	    // DPI_DataSourceClasses, having type string[]
	    ParameterId["DataSourceClasses"] = "dataSourceClasses";
	    // DPI_DataSourceNames, having type string[]
	    ParameterId["DataSourceNames"] = "dataSourceNames";
	    // DPI_DataSourceNames2, having type string[]
	    ParameterId["DataSourceNames2"] = "dataSourceNames2";
	    // DPI_DataSourcesWithEmptyRelation, having type string[]
	    ParameterId["DataSourcesWithEmptyRelation"] = "dataSourcesWithEmptyRelation";
	    // DPI_DataSourceCreationErrors, having type string[]
	    ParameterId["DataSourceCreationErrors"] = "dataSourceCreationErrors";
	    // DPI_DateFormats, having type string[]
	    ParameterId["DateFormats"] = "dateFormats";
	    // DPI_DayNames, having type string[]
	    ParameterId["DayNames"] = "dayNames";
	    // DPI_DrillPathVector, having type string[]
	    ParameterId["DrillPathVector"] = "drillpathVector";
	    // DPI_ErrorDetails, having type string[]
	    ParameterId["ErrorDetails"] = "errorDetails";
	    // DPI_ExceptionMessageParams, having type string[]
	    ParameterId["ExceptionMessageParams"] = "exceptionMessageParams";
	    // DPI_ExcludedSheets, having type string[]
	    ParameterId["ExcludedSheets"] = "excludeSheets";
	    // DPI_FieldDisplayNames, having type string[]
	    ParameterId["FieldDisplayNames"] = "fieldDisplayNames";
	    // DPI_FieldFolderVector, having type string[]
	    ParameterId["FieldFolderVector"] = "fieldFolderVector";
	    // DPI_FileIds, having type string[]
	    ParameterId["FileIds"] = "fileIds";
	    // DPI_FilePaths, having type string[]
	    ParameterId["FilePaths"] = "filePaths";
	    // DPI_FileNames, having type string[]
	    ParameterId["FileNames"] = "fileNames";
	    // DPI_FilterAdd, having type string[]
	    ParameterId["FilterAdd"] = "filterAdd";
	    // DPI_FilterAliases, having type string[]
	    ParameterId["FilterAliases"] = "filterValues";
	    // DPI_FilterRemove, having type string[]
	    ParameterId["FilterRemove"] = "filterRemove";
	    // DPI_FixedCaptions, having type string[]
	    ParameterId["FixedCaptions"] = "fixedCaptions";
	    // DPI_FontFamilies, having type string[]
	    ParameterId["FontFamilies"] = "fontFamilies";
	    // DPI_FormatStrings, having type string[]
	    ParameterId["FormatStrings"] = "formatStrings";
	    // DPI_FormattedValues, having type string[]
	    ParameterId["FormattedValues"] = "formattedValues";
	    // DPI_FoundTuples, having type string[]
	    ParameterId["FoundTuples"] = "foundTuples";
	    // DPI_FullSchedulesLabels, having type string[]
	    ParameterId["FullSchedulesLabels"] = "fullSchedulesLabels";
	    // DPI_ImageResourceList, having type string[]
	    ParameterId["ImageResourceList"] = "imageResources";
	    // DPI_IncludeList, having type string[]
	    ParameterId["IncludeList"] = "includeList";
	    // DPI_IncrSchedulesLabels, having type string[]
	    ParameterId["IncrSchedulesLabels"] = "incrSchedulesLabels";
	    // DPI_InvalidDates, having type string[]
	    ParameterId["InvalidDates"] = "invalidDates";
	    // DPI_InvalidValues, having type string[]
	    ParameterId["InvalidValues"] = "invalidValues";
	    // DPI_ItemValues, having type string[]
	    ParameterId["ItemValues"] = "itemValues";
	    // DPI_JoinEditableProps, having type string[]
	    ParameterId["JoinEditableProps"] = "joinEditableProps";
	    // DPI_JoinFieldCaptions, having type string[]
	    ParameterId["JoinFieldCaptions"] = "joinFieldCaptions";
	    // DPI_LocaleOptions, having type string[]
	    ParameterId["LocaleOptions"] = "localeOptions";
	    // DPI_LocaleDisplayNames, having type string[]
	    ParameterId["LocaleDisplayNames"] = "localeDisplayNames";
	    // DPI_MapBoxStyleMaps, having type string[]
	    ParameterId["MapBoxStyleMaps"] = "mapboxStyleMaps";
	    // DPI_MapConnectionErrorDetails, having type string[]
	    ParameterId["MapConnectionErrorDetails"] = "mapConnectionErrorDetails";
	    // DPI_SheetNames, having type string[]
	    ParameterId["SheetNames"] = "sheetNames";
	    // DPI_MapSourceNames, having type string[]
	    ParameterId["MapSourceNames"] = "mapSourceNames";
	    // DPI_MarkGeometries, having type string[]
	    ParameterId["MarkGeometries"] = "markGeometries";
	    // DPI_MenuItems, having type string[]
	    ParameterId["MenuItems"] = "menuItems";
	    // DPI_Modes, having type string[]
	    ParameterId["Modes"] = "modes";
	    // DPI_MonthNames, having type string[]
	    ParameterId["MonthNames"] = "monthNames";
	    // DPI_NumberFormats, having type string[]
	    ParameterId["NumberFormats"] = "numberFormats";
	    // DPI_ObjectTextIDs, having type string[]
	    ParameterId["ObjectTextIDs"] = "objectTextIds";
	    // DPI_OldExtracts, having type string[]
	    ParameterId["OldExtracts"] = "oldExtracts";
	    // DPI_OrderingTypeCaptions, having type string[]
	    ParameterId["OrderingTypeCaptions"] = "orderingTypeCaptions";
	    // DPI_PageNames, having type string[]
	    ParameterId["PageNames"] = "pageNames";
	    // DPI_PaneDescriptorKeys, having type string[]
	    ParameterId["PaneDescriptorKeys"] = "paneDescriptorKeys";
	    // DPI_ParamCaptions, having type string[]
	    ParameterId["ParamCaptions"] = "paramCaptions";
	    // DPI_PrecannedDataValues, having type string[]
	    ParameterId["PrecannedDataValues"] = "precannedDataValues";
	    // DPI_PublishChoiceLabels, having type string[]
	    ParameterId["PublishChoiceLabels"] = "publishChoiceLabels";
	    // DPI_RankTypeCaptions, having type string[]
	    ParameterId["RankTypeCaptions"] = "rankTypeCaptions";
	    // DPI_RecentTags, having type string[]
	    ParameterId["RecentTags"] = "recentTags";
	    // DPI_RelativeCaptions, having type string[]
	    ParameterId["RelativeCaptions"] = "relativeCaptions";
	    // DPI_RemovedDataSources, having type string[]
	    ParameterId["RemovedDataSources"] = "removedDataSourceNames";
	    // DPI_RepresentativeTuple, having type string[]
	    ParameterId["RepresentativeTuple"] = "representativeTuple";
	    // DPI_RestartEveryCaptions, having type string[]
	    ParameterId["RestartEveryCaptions"] = "restartEveryCaptions";
	    // DPI_SchemaMemberGlobalNames, having type string[]
	    ParameterId["SchemaMemberGlobalNames"] = "schemaMemberGlobalNames";
	    // DPI_SelectValuesList, having type string[]
	    ParameterId["SelectValuesList"] = "selectValues";
	    // DPI_SelectionValueList, having type string[]
	    ParameterId["SelectionValueList"] = "selectionValueList";
	    // DPI_SortAggCaptions, having type string[]
	    ParameterId["SortAggCaptions"] = "sortAggCaptions";
	    // DPI_SortDirectionCaptions, having type string[]
	    ParameterId["SortDirectionCaptions"] = "sortDirectionCaptions";
	    // DPI_SortFieldCaptions, having type string[]
	    ParameterId["SortFieldCaptions"] = "sortFieldCaptions";
	    // DPI_SortFieldNameVector, having type string[]
	    ParameterId["SortFieldNameVector"] = "sortFieldnameVector";
	    // DPI_SupportedJoinOperators, having type string[]
	    ParameterId["SupportedJoinOperators"] = "supportedJoinOperators";
	    // DPI_TableCalcTypeCaptions, having type string[]
	    ParameterId["TableCalcTypeCaptions"] = "tableCalcTypeCaptions";
	    // DPI_Tags, having type string[]
	    ParameterId["Tags"] = "tags";
	    // DPI_TermVec, having type string[]
	    ParameterId["TermVec"] = "termVector";
	    // DPI_UIAutomationList, having type string[]
	    ParameterId["UIAutomationList"] = "uiAutomationList";
	    // DPI_ReferenceLineValidCustomLabelTags, having type string[]
	    ParameterId["ReferenceLineValidCustomLabelTags"] = "validReferenceLineCustomLabelTags";
	    // DPI_LocalizedKeywords, having type string[]
	    ParameterId["LocalizedKeywords"] = "localizedKeywords";
	    // DPI_AvailableCalendars, having type string[]
	    ParameterId["AvailableCalendars"] = "availableCalendars";
	    // DPI_SheetsToBeDeletedOrHidden, having type string[]
	    ParameterId["SheetsToBeDeletedOrHidden"] = "sheetsToBeDeletedOrHidden";
	    // DPI_AddSheets, having type string[]
	    ParameterId["AddSheets"] = "addSheets";
	    // DPI_NamesOfSubsheets, having type string[]
	    ParameterId["NamesOfSubsheets"] = "namesOfSubsheets";
	    // DPI_RemoveSheets, having type string[]
	    ParameterId["RemoveSheets"] = "removeSheets";
	    // DPI_ScrollOffsetSheets, having type string[]
	    ParameterId["ScrollOffsetSheets"] = "scrollOffsetSheets";
	    // DPI_Sheets, having type string[]
	    ParameterId["Sheets"] = "sheets";
	    // DPI_SourceWorksheets, having type string[]
	    ParameterId["SourceWorksheets"] = "sourceWorksheets";
	    // DPI_TargetExcludes, having type string[]
	    ParameterId["TargetExcludes"] = "targetExclude";
	    // DPI_TargetWorksheets, having type string[]
	    ParameterId["TargetWorksheets"] = "targetWorksheets";
	    // DPI_TileURLs, having type string[]
	    ParameterId["TileURLs"] = "tileUrls";
	    // DPI_Details, having type string[]
	    ParameterId["Details"] = "details";
	    // DPI_FieldCaptions, having type string[]
	    ParameterId["FieldCaptions"] = "fieldCaptions";
	    // DPI_HighlightCaptions, having type string[]
	    ParameterId["HighlightCaptions"] = "highlightCaptions";
	    // DPI_LevelCaptions, having type string[]
	    ParameterId["LevelCaptions"] = "levelCaptions";
	    // DPI_LevelLeafValues, having type string[]
	    ParameterId["LevelLeafValues"] = "levelLeafValues";
	    // DPI_SubstitutionVariables, having type string[]
	    ParameterId["SubstitutionVariables"] = "substitutionVariables";
	    // DPI_SubstitutionVariableValues, having type string[]
	    ParameterId["SubstitutionVariableValues"] = "substitutionVariableValues";
	    // DPI_HtmlTooltips, having type string[]
	    ParameterId["HtmlTooltips"] = "htmlTooltips";
	    // DPI_InvalidFields, having type string[]
	    ParameterId["InvalidFields"] = "invalidFields";
	    // DPI_NamesOfColumns, having type string[]
	    ParameterId["NamesOfColumns"] = "namesOfColumns";
	    // DPI_NamesOfFields, having type string[]
	    ParameterId["NamesOfFields"] = "namesOfFields";
	    // DPI_ReferencedDatasources, having type string[]
	    ParameterId["ReferencedDatasources"] = "referencedDataSourceList";
	    // DPI_CSSAttrs, having type Dictionary(of string)
	    ParameterId["CSSAttrs"] = "cssAttrs";
	    // DPI_DataSourceMap, having type Dictionary(of string)
	    ParameterId["DataSourceMap"] = "dataSourceMap";
	    // DPI_EventParameters, having type Dictionary(of string)
	    ParameterId["EventParameters"] = "eventParameters";
	    // DPI_ExceptionAttrs, having type Dictionary(of string)
	    ParameterId["ExceptionAttrs"] = "exceptionAttrs";
	    // DPI_InvalidSheetMessage, having type Dictionary(of string)
	    ParameterId["InvalidSheetMessage"] = "invalidSheetMessages";
	    // DPI_MapBoxDefaultStyle, having type Dictionary(of string)
	    ParameterId["MapBoxDefaultStyle"] = "mapboxDefaultStyles";
	    // DPI_PaneFormattings, having type Dictionary(of string)
	    ParameterId["PaneFormattings"] = "paneFormattings";
	    // DPI_SourceNameWithCaption, having type Dictionary(of string)
	    ParameterId["SourceNameWithCaption"] = "sourceNameWithCaption";
	    // DPI_ConnectionColorMap, having type Dictionary(of string)
	    ParameterId["ConnectionColorMap"] = "connectionColorMap";
	    // DPI_TargetNameWithCaption, having type Dictionary(of string)
	    ParameterId["TargetNameWithCaption"] = "targetNameWithCaption";
	    // DPI_ViewIds, having type Dictionary(of string)
	    ParameterId["ViewIds"] = "viewIds";
	    // DPI_AddInSettings, having type Dictionary(of string)
	    ParameterId["AddInSettings"] = "addInSettings";
	    // DPI_DatasourceIcons, having type Dictionary(of string)
	    ParameterId["DatasourceIcons"] = "datasourceIcons";
	    // DPI_FormattedText, having type string
	    ParameterId["FormattedText"] = "formattedText";
	    // DPI_IconTooltip, having type string
	    ParameterId["IconTooltip"] = "iconTooltip";
	    // DPI_Title, having type string
	    ParameterId["Title"] = "title";
	    // DPI_Tooltip, having type string
	    ParameterId["Tooltip"] = "tooltip";
	    // DPI_ZoneText, having type string
	    ParameterId["ZoneText"] = "zoneText";
	    // DPI_AlignmentFlags, having type int
	    ParameterId["AlignmentFlags"] = "alignmentFlags";
	    // DPI_AlphaLevel, having type int
	    ParameterId["AlphaLevel"] = "alphaLevel";
	    // DPI_AnovaDF, having type int
	    ParameterId["AnovaDF"] = "anovaDf";
	    // DPI_AtTheLevelIndex, having type int
	    ParameterId["AtTheLevelIndex"] = "atTheLevelIndex";
	    // DPI_AutomaticDrillIdxInVector, having type int
	    ParameterId["AutomaticDrillIdxInVector"] = "automaticDrillIdxVector";
	    // DPI_AutoSize, having type int
	    ParameterId["AutoSize"] = "automaticSize";
	    // DPI_BaseCoord, having type int
	    ParameterId["BaseCoord"] = "baseCoord";
	    // DPI_CalcEditorCursorPosPostDrop, having type int
	    ParameterId["CalcEditorCursorPosPostDrop"] = "calcEditorCursorPosPostDrop";
	    // DPI_CalcEditorDropPos, having type int
	    ParameterId["CalcEditorDropPos"] = "calcEditorDropPos";
	    // DPI_CalcEditorTextSelectionEndPos, having type int
	    ParameterId["CalcEditorTextSelectionEndPos"] = "calcEditorTextSelectionEndPos";
	    // DPI_CalcEditorTextSelectionStartPos, having type int
	    ParameterId["CalcEditorTextSelectionStartPos"] = "calcEditorTextSelectionStartPos";
	    // DPI_CategoricalBinId, having type int
	    ParameterId["CategoricalBinId"] = "categoricalBinId";
	    // DPI_CategoricalFindControllerId, having type int
	    ParameterId["CategoricalFindControllerId"] = "categoricalFindControllerId";
	    // DPI_ClauseToModifyIndex, having type int
	    ParameterId["ClauseToModifyIndex"] = "clauseToModifyIndex";
	    // DPI_ClientRenderPixelLimit, having type int
	    ParameterId["ClientRenderPixelLimit"] = "clientRenderPixelLimit";
	    // DPI_ColCount, having type int
	    ParameterId["ColCount"] = "colCount";
	    // DPI_ColWidth, having type int
	    ParameterId["ColWidth"] = "colWidth";
	    // DPI_ColumnLevels, having type int
	    ParameterId["ColumnLevels"] = "columnLevels";
	    // DPI_ColumnNumber, having type int
	    ParameterId["ColumnNumber"] = "columnNumber";
	    // DPI_ColumnWidth, having type int
	    ParameterId["ColumnWidth"] = "columnWidth";
	    // DPI_ContentHeight, having type int
	    ParameterId["ContentHeight"] = "contentH";
	    // DPI_ContentWidth, having type int
	    ParameterId["ContentWidth"] = "contentW";
	    // DPI_ContentX, having type int
	    ParameterId["ContentX"] = "contentX";
	    // DPI_ContentY, having type int
	    ParameterId["ContentY"] = "contentY";
	    // DPI_Coordinate, having type int
	    ParameterId["Coordinate"] = "coord";
	    // DPI_CurDateAgg, having type int
	    ParameterId["CurDateAgg"] = "curDateAgg";
	    // DPI_CurrentCustViewId, having type int
	    ParameterId["CurrentCustViewId"] = "currentCustomViewId";
	    // DPI_CustomSplitCharacterCountSeparator, having type int
	    ParameterId["CustomSplitCharacterCountSeparator"] = "customSplitCharacterCountSeparator";
	    // DPI_CustomSplitDesiredSplitCount, having type int
	    ParameterId["CustomSplitDesiredSplitCount"] = "customSplitDesiredSplitCount";
	    // DPI_DashboardGridSize, having type int
	    ParameterId["DashboardGridSize"] = "dashboardGridSize";
	    // DPI_DataIndex, having type int
	    ParameterId["DataIndex"] = "dataIndex";
	    // DPI_DecimalPlaces, having type int
	    ParameterId["DecimalPlaces"] = "decimalPlaces";
	    // DPI_DeltaTime, having type int
	    ParameterId["DeltaTime"] = "deltaTime";
	    // DPI_DestPix, having type int
	    ParameterId["DestPix"] = "destPix";
	    // DPI_DeviceIndex, having type int
	    ParameterId["DeviceIndex"] = "deviceIndex";
	    // DPI_Duration, having type int
	    ParameterId["Duration"] = "duration";
	    // DPI_EndPtX, having type int
	    ParameterId["EndPtX"] = "endX";
	    // DPI_EndPtY, having type int
	    ParameterId["EndPtY"] = "endY";
	    // DPI_ErrorLen, having type int
	    ParameterId["ErrorLen"] = "lengthOfCalcOfError";
	    // DPI_ErrorPos, having type int
	    ParameterId["ErrorPos"] = "startPositionForError";
	    // DPI_ExceptionErrorMessageId, having type int
	    ParameterId["ExceptionErrorMessageId"] = "exceptionErrorMessageId";
	    // DPI_ExtentsH, having type int
	    ParameterId["ExtentsH"] = "extentsHeight";
	    // DPI_ExtentsW, having type int
	    ParameterId["ExtentsW"] = "extentsWidth";
	    // DPI_ExtentsX, having type int
	    ParameterId["ExtentsX"] = "extentsX";
	    // DPI_ExtentsY, having type int
	    ParameterId["ExtentsY"] = "extentsY";
	    // DPI_FieldIndex, having type int
	    ParameterId["FieldIndex"] = "fieldIndex";
	    // DPI_FieldNameId, having type int
	    ParameterId["FieldNameId"] = "fieldNameId";
	    // DPI_FirstDayOfWeek, having type int
	    ParameterId["FirstDayOfWeek"] = "firstDayOfWeek";
	    // DPI_FirstLinkedLevel, having type int
	    ParameterId["FirstLinkedLevel"] = "firstLinkedLevel";
	    // DPI_FirstValueIndex, having type int
	    ParameterId["FirstValueIndex"] = "firstValueIndex";
	    // DPI_FixedSizePresetIndex, having type int
	    ParameterId["FixedSizePresetIndex"] = "fixedSizePresetIndex";
	    // DPI_FocusItemIndex, having type int
	    ParameterId["FocusItemIndex"] = "focusItemIndex";
	    // DPI_FontSize, having type int
	    ParameterId["FontSize"] = "fontSize";
	    // DPI_ForecastIntRangeEnd, having type int
	    ParameterId["ForecastIntRangeEnd"] = "forecastIntRangeEnd";
	    // DPI_ForecastIntRangeStart, having type int
	    ParameterId["ForecastIntRangeStart"] = "forecastIntRangeStart";
	    // DPI_FunctionHelpIndex, having type int
	    ParameterId["FunctionHelpIndex"] = "functionHelpIndex";
	    // DPI_GeographicSearchMaxResults, having type int
	    ParameterId["GeographicSearchMaxResults"] = "geographicSearchMaxResults";
	    // DPI_Height, having type int
	    ParameterId["Height"] = "h";
	    // DPI_HierarchyLevel, having type int
	    ParameterId["HierarchyLevel"] = "hierarchyLevel";
	    // DPI_HierarchyLevelLoaded, having type int
	    ParameterId["HierarchyLevelLoaded"] = "hierarchyLevelLoaded";
	    // DPI_HierarchyLevelMinimum, having type int
	    ParameterId["HierarchyLevelMinimum"] = "hierarchyLevelMinimum";
	    // DPI_HierarchyLoadLimit, having type int
	    ParameterId["HierarchyLoadLimit"] = "hierarchyLoadLimit";
	    // DPI_HierarchySelectControllerId, having type int
	    ParameterId["HierarchySelectControllerId"] = "hierarchySelectControllerId";
	    // DPI_HorzTextCell, having type int
	    ParameterId["HorzTextCell"] = "horzTextCell";
	    // DPI_ImageIndex, having type int
	    ParameterId["ImageIndex"] = "imageIndex";
	    // DPI_ImageSizeLimit, having type int
	    ParameterId["ImageSizeLimit"] = "imageSizeLimit";
	    // DPI_TransparentLineMarksLimit, having type int
	    ParameterId["TransparentLineMarksLimit"] = "transparentLineMarksLimit";
	    // DPI_Indent, having type int
	    ParameterId["Indent"] = "indent";
	    // DPI_Index, having type int
	    ParameterId["Index"] = "idx";
	    // DPI_IndexFrom, having type int
	    ParameterId["IndexFrom"] = "indexFrom";
	    // DPI_IndexOffset, having type int
	    ParameterId["IndexOffset"] = "indexOffset";
	    // DPI_IndexRelativeDateField, having type int
	    ParameterId["IndexRelativeDateField"] = "indiexRelativeDateField";
	    // DPI_IndexSelectedItem, having type int
	    ParameterId["IndexSelectedItem"] = "indexSelectedItem";
	    // DPI_IndexTo, having type int
	    ParameterId["IndexTo"] = "indexTo";
	    // DPI_InlineConnectionRenameRow, having type int
	    ParameterId["InlineConnectionRenameRow"] = "inlineConnectionRenameRow";
	    // DPI_InsertPos, having type int
	    ParameterId["InsertPos"] = "insertPos";
	    // DPI_IsHasDataSupported, having type int
	    ParameterId["IsHasDataSupported"] = "isHasDataSupported";
	    // DPI_LeftMargin, having type int
	    ParameterId["LeftMargin"] = "leftMargin";
	    // DPI_LeftRightBorderWidth, having type int
	    ParameterId["LeftRightBorderWidth"] = "leftRightBorderWidth";
	    // DPI_LevelNumber, having type int
	    ParameterId["LevelNumber"] = "levelNumber";
	    // DPI_LowerBound, having type int
	    ParameterId["LowerBound"] = "lowerBound";
	    // DPI_MapRequestPixels, having type int
	    ParameterId["MapRequestPixels"] = "mapRequestPixels";
	    // DPI_MapScaleFontSizePixels, having type int
	    ParameterId["MapScaleFontSizePixels"] = "mapScaleFontSizePixels";
	    // DPI_MapScaleReadoutNumber, having type int
	    ParameterId["MapScaleReadoutNumber"] = "mapScaleReadoutNumber";
	    // DPI_MapScaleWidth, having type int
	    ParameterId["MapScaleWidth"] = "mapScaleWidth";
	    // DPI_MapTileSize, having type int
	    ParameterId["MapTileSize"] = "mapTileSize";
	    // DPI_Margin, having type int
	    ParameterId["Margin"] = "margin";
	    // DPI_MarginBottom, having type int
	    ParameterId["MarginBottom"] = "marginBottom";
	    // DPI_MarginLeft, having type int
	    ParameterId["MarginLeft"] = "marginLeft";
	    // DPI_MarginRight, having type int
	    ParameterId["MarginRight"] = "marginRight";
	    // DPI_MarginTop, having type int
	    ParameterId["MarginTop"] = "marginTop";
	    // DPI_MaxCell, having type int
	    ParameterId["MaxCell"] = "maxCell";
	    // DPI_MaxItemSpan, having type int
	    ParameterId["MaxItemSpan"] = "maxItemSpan";
	    // DPI_MaxPolynomialDegree, having type int
	    ParameterId["MaxPolynomialDegree"] = "maxDegree";
	    // DPI_MaxPosition, having type int
	    ParameterId["MaxPosition"] = "maxPosition";
	    // DPI_MaxSize, having type int
	    ParameterId["MaxSize"] = "maxSize";
	    // DPI_MinCell, having type int
	    ParameterId["MinCell"] = "minCell";
	    // DPI_MinPolynomialDegree, having type int
	    ParameterId["MinPolynomialDegree"] = "minDegree";
	    // DPI_MinPosition, having type int
	    ParameterId["MinPosition"] = "minPosition";
	    // DPI_MinSize, having type int
	    ParameterId["MinSize"] = "minSize";
	    // DPI_ModelDF, having type int
	    ParameterId["ModelDF"] = "modelDf";
	    // DPI_NewIndex, having type int
	    ParameterId["NewIndex"] = "newIndex";
	    // DPI_NumDataSourcesUsingServer, having type int
	    ParameterId["NumDataSourcesUsingServer"] = "numDataSourcesUsingServer";
	    // DPI_NumFilteredObs, having type int
	    ParameterId["NumFilteredObs"] = "filteredObservations";
	    // DPI_NumModeledObs, having type int
	    ParameterId["NumModeledObs"] = "modeledObservations";
	    // DPI_NumNotClustered, having type int
	    ParameterId["NumNotClustered"] = "numNotClustered";
	    // DPI_NumNumericFields, having type int
	    ParameterId["NumNumericFields"] = "numNumericFields";
	    // DPI_NumOutliers, having type int
	    ParameterId["NumOutliers"] = "numOutliers";
	    // DPI_NumRows, having type int
	    ParameterId["NumRows"] = "numRows";
	    // DPI_NumSelected, having type int
	    ParameterId["NumSelected"] = "numSelected";
	    // DPI_OffsetX, having type int
	    ParameterId["OffsetX"] = "offsetX";
	    // DPI_OffsetY, having type int
	    ParameterId["OffsetY"] = "offsetY";
	    // DPI_Padding, having type int
	    ParameterId["Padding"] = "padding";
	    // DPI_PaddingBottom, having type int
	    ParameterId["PaddingBottom"] = "paddingBottom";
	    // DPI_PaddingLeft, having type int
	    ParameterId["PaddingLeft"] = "paddingLeft";
	    // DPI_PaddingRight, having type int
	    ParameterId["PaddingRight"] = "paddingRight";
	    // DPI_PaddingTop, having type int
	    ParameterId["PaddingTop"] = "paddingTop";
	    // DPI_PageLoadPercentage, having type int
	    ParameterId["PageLoadPercentage"] = "pageLoadPercentage";
	    // DPI_PaletteIndex, having type int
	    ParameterId["PaletteIndex"] = "paletteIndex";
	    // DPI_PaneSpecificationId, having type int
	    ParameterId["PaneSpecificationId"] = "paneSpec";
	    // DPI_ParameterCtrlIncrementsPerTick, having type int
	    ParameterId["ParameterCtrlIncrementsPerTick"] = "parameterControlIncrementMultiplier";
	    // DPI_PolynomialDegree, having type int
	    ParameterId["PolynomialDegree"] = "degree";
	    // DPI_Port, having type int
	    ParameterId["Port"] = "datasourcePort";
	    // DPI_Position, having type int
	    ParameterId["Position"] = "position";
	    // DPI_ParentProjectId, having type int
	    ParameterId["ParentProjectId"] = "parentProjectId";
	    // DPI_Radius, having type int
	    ParameterId["Radius"] = "radius";
	    // DPI_ReadoutOffset, having type int
	    ParameterId["ReadoutOffset"] = "readoutOffset";
	    // DPI_ReferenceIndex, having type int
	    ParameterId["ReferenceIndex"] = "referenceIndex";
	    // DPI_RegionHeight, having type int
	    ParameterId["RegionHeight"] = "regionHeight";
	    // DPI_RegionWidth, having type int
	    ParameterId["RegionWidth"] = "regionWidth";
	    // DPI_RemovedDatasourceCount, having type int
	    ParameterId["RemovedDatasourceCount"] = "removedDatasourceCount";
	    // DPI_RemovedSheetCount, having type int
	    ParameterId["RemovedSheetCount"] = "removedSheetCount";
	    // DPI_ResidualDF, having type int
	    ParameterId["ResidualDF"] = "residualDf";
	    // DPI_ResizeColumn, having type int
	    ParameterId["ResizeColumn"] = "resizeColumn";
	    // DPI_RestartEveryIndex, having type int
	    ParameterId["RestartEveryIndex"] = "restartEveryIndex";
	    // DPI_RightMargin, having type int
	    ParameterId["RightMargin"] = "rightMargin";
	    // DPI_RowCount, having type int
	    ParameterId["RowCount"] = "rowCount";
	    // DPI_RowHeight, having type int
	    ParameterId["RowHeight"] = "rowHeight";
	    // DPI_RowInnerLevels, having type int
	    ParameterId["RowInnerLevels"] = "rowInnerLevels";
	    // DPI_RowLevels, having type int
	    ParameterId["RowLevels"] = "rowLevels";
	    // DPI_RowNumber, having type int
	    ParameterId["RowNumber"] = "rowNumber";
	    // DPI_RowWidth, having type int
	    ParameterId["RowWidth"] = "rowWidth";
	    // DPI_SecondLinkedLevel, having type int
	    ParameterId["SecondLinkedLevel"] = "secondLinkedLevel";
	    // DPI_SecondValueIndex, having type int
	    ParameterId["SecondValueIndex"] = "secondValueIndex";
	    // DPI_SecondsAgo, having type int
	    ParameterId["SecondsAgo"] = "secondsAgo";
	    // DPI_SelectionEnd, having type int
	    ParameterId["SelectionEnd"] = "selectionEnd";
	    // DPI_SelectionStart, having type int
	    ParameterId["SelectionStart"] = "selectionStart";
	    // DPI_ShapePaletteID, having type int
	    ParameterId["ShapePaletteID"] = "shapePaletteId";
	    // DPI_SheetIndex, having type int
	    ParameterId["SheetIndex"] = "sheetIndex";
	    // DPI_ShelfPositionIndex, having type int
	    ParameterId["ShelfPositionIndex"] = "shelfPosIndex";
	    // DPI_Size, having type int
	    ParameterId["Size"] = "size";
	    // DPI_SizeDifference, having type int
	    ParameterId["SizeDifference"] = "sizeDelta";
	    // DPI_SnapDistance, having type int
	    ParameterId["SnapDistance"] = "snapDistance";
	    // DPI_SnapLocation, having type int
	    ParameterId["SnapLocation"] = "snapLocation";
	    // DPI_SolveOrder, having type int
	    ParameterId["SolveOrder"] = "solveOrder";
	    // DPI_SpaceBetweenPoints, having type int
	    ParameterId["SpaceBetweenPoints"] = "spaceBetweenPoints";
	    // DPI_StepSize, having type int
	    ParameterId["StepSize"] = "stepSize";
	    // DPI_Steps, having type int
	    ParameterId["Steps"] = "steps";
	    // DPI_StoryPointIndex, having type int
	    ParameterId["StoryPointIndex"] = "currentStorypointIndex";
	    // DPI_StyleLen, having type int
	    ParameterId["StyleLen"] = "tokenLengthForStyle";
	    // DPI_StylePos, having type int
	    ParameterId["StylePos"] = "tokenPositionForStyle";
	    // DPI_SwatchAreaWidth, having type int
	    ParameterId["SwatchAreaWidth"] = "swatchWidth";
	    // DPI_TargetBinId, having type int
	    ParameterId["TargetBinId"] = "targetBinId";
	    // DPI_TargetPtX, having type int
	    ParameterId["TargetPtX"] = "targetX";
	    // DPI_TargetPtY, having type int
	    ParameterId["TargetPtY"] = "targetY";
	    // DPI_TileFactor, having type int
	    ParameterId["TileFactor"] = "tileFactor";
	    // DPI_TitleHeight, having type int
	    ParameterId["TitleHeight"] = "titleHeight";
	    // DPI_TitleWidth, having type int
	    ParameterId["TitleWidth"] = "titleWidth";
	    // DPI_TopBottomBorderWidth, having type int
	    ParameterId["TopBottomBorderWidth"] = "topBottomBorderWidth";
	    // DPI_UIAutomationLineSize, having type int
	    ParameterId["UIAutomationLineSize"] = "uiAutomationLineSize";
	    // DPI_UIAutomationPageSize, having type int
	    ParameterId["UIAutomationPageSize"] = "uiAutomationPageSize";
	    // DPI_UID, having type int
	    ParameterId["UID"] = "uid";
	    // DPI_UpperBound, having type int
	    ParameterId["UpperBound"] = "upperBound";
	    // DPI_VertTextCell, having type int
	    ParameterId["VertTextCell"] = "vertTextCell";
	    // DPI_Width, having type int
	    ParameterId["Width"] = "w";
	    // DPI_X, having type int
	    ParameterId["X"] = "x";
	    // DPI_Y, having type int
	    ParameterId["Y"] = "y";
	    // DPI_ZOrder, having type int
	    ParameterId["ZOrder"] = "zOrder";
	    // DPI_ZoneIconIndex, having type int
	    ParameterId["ZoneIconIndex"] = "zoneIconIndex";
	    // DPI_AliasIndices, having type int[]
	    ParameterId["AliasIndices"] = "aliasIndices";
	    // DPI_AnovaDFVec, having type int[]
	    ParameterId["AnovaDFVec"] = "anovaDfVector";
	    // DPI_ColumnIndices, having type int[]
	    ParameterId["ColumnIndices"] = "columnIndices";
	    // DPI_DrillFieldIndices, having type int[]
	    ParameterId["DrillFieldIndices"] = "drillFieldIndices";
	    // DPI_FilterMaxIndices, having type int[]
	    ParameterId["FilterMaxIndices"] = "filterMaxIndices";
	    // DPI_FilterMinIndices, having type int[]
	    ParameterId["FilterMinIndices"] = "filterMinIndices";
	    // DPI_FilterValuesIndices, having type int[]
	    ParameterId["FilterValuesIndices"] = "filterValueIndices";
	    // DPI_FormatStringIndices, having type int[]
	    ParameterId["FormatStringIndices"] = "formatstrIndices";
	    // DPI_FormattedValIndices, having type int[]
	    ParameterId["FormattedValIndices"] = "formatValIdxs";
	    // DPI_PaletteIndices, having type int[]
	    ParameterId["PaletteIndices"] = "palettesIndices";
	    // DPI_PaneIndices, having type int[]
	    ParameterId["PaneIndices"] = "paneIndices";
	    // DPI_Points, having type int[]
	    ParameterId["Points"] = "points";
	    // DPI_QuickFilterSettings, having type int[]
	    ParameterId["QuickFilterSettings"] = "quickFilterSettings";
	    // DPI_SelectedIndices, having type int[]
	    ParameterId["SelectedIndices"] = "selectedIndices";
	    // DPI_ShelfPositionIndices, having type int[]
	    ParameterId["ShelfPositionIndices"] = "shelfPosIndices";
	    // DPI_TileBox, having type int[]
	    ParameterId["TileBox"] = "tileBox";
	    // DPI_TrailOverride, having type int[]
	    ParameterId["TrailOverride"] = "trailOverride";
	    // DPI_UIDs, having type int[]
	    ParameterId["UIDs"] = "uids";
	    // DPI_ValueIndices, having type int[]
	    ParameterId["ValueIndices"] = "valueIndices";
	    // DPI_XCellOffsets, having type int[]
	    ParameterId["XCellOffsets"] = "xCellOffsets";
	    // DPI_XPixelOffsets, having type int[]
	    ParameterId["XPixelOffsets"] = "xPixelOffsets";
	    // DPI_YCellOffsets, having type int[]
	    ParameterId["YCellOffsets"] = "yCellOffsets";
	    // DPI_YPixelOffsets, having type int[]
	    ParameterId["YPixelOffsets"] = "yPixelOffsets";
	    // DPI_IntMap, having type Dictionary(of int)
	    ParameterId["IntMap"] = "intMap";
	    // DPI_SelectedAuthSettingIndices, having type Dictionary(of int)
	    ParameterId["SelectedAuthSettingIndices"] = "selectedAuthSettingIndices";
	    // DPI_ActiveStoryPointID, having type uint
	    ParameterId["ActiveStoryPointID"] = "activeStoryPointId";
	    // DPI_ActiveZoneID, having type uint
	    ParameterId["ActiveZoneID"] = "activeZoneId";
	    // DPI_ActualSize, having type uint
	    ParameterId["ActualSize"] = "actualSize";
	    // DPI_AddInDebugPort, having type uint
	    ParameterId["AddInDebugPort"] = "addInDebugPort";
	    // DPI_AggregationIndex, having type uint
	    ParameterId["AggregationIndex"] = "aggregationIndex";
	    // DPI_AnnotationID, having type uint
	    ParameterId["AnnotationID"] = "annotationId";
	    // DPI_AssignedAliasCount, having type uint
	    ParameterId["AssignedAliasCount"] = "assignedAliasCount";
	    // DPI_CapabilityId, having type uint
	    ParameterId["CapabilityId"] = "capabilityId";
	    // DPI_CaretIndex, having type uint
	    ParameterId["CaretIndex"] = "caretIndex";
	    // DPI_CellID, having type uint
	    ParameterId["CellID"] = "cellId";
	    // DPI_ColumnIndex, having type uint
	    ParameterId["ColumnIndex"] = "columnIndex";
	    // DPI_CommandID, having type uint
	    ParameterId["CommandID"] = "id";
	    // DPI_CommandIndex, having type uint
	    ParameterId["CommandIndex"] = "index";
	    // DPI_ControllerId, having type uint
	    ParameterId["ControllerId"] = "controllerId";
	    // DPI_Count, having type uint
	    ParameterId["Count"] = "count";
	    // DPI_URowCount, having type uint
	    ParameterId["URowCount"] = "uRowCount";
	    // DPI_UColumnCount, having type uint
	    ParameterId["UColumnCount"] = "uColumnCount";
	    // DPI_CurrentPage, having type uint
	    ParameterId["CurrentPage"] = "currentPage";
	    // DPI_DatePeriodsCount, having type uint
	    ParameterId["DatePeriodsCount"] = "datePeriodsCount";
	    // DPI_Decimals, having type uint
	    ParameterId["Decimals"] = "decimals";
	    // DPI_DefaultHeight, having type uint
	    ParameterId["DefaultHeight"] = "defaultHeight";
	    // DPI_DefaultItem, having type uint
	    ParameterId["DefaultItem"] = "defaultItem";
	    // DPI_DefaultWidth, having type uint
	    ParameterId["DefaultWidth"] = "defaultWidth";
	    // DPI_Depth, having type uint
	    ParameterId["Depth"] = "depth";
	    // DPI_DetailID, having type uint
	    ParameterId["DetailID"] = "detailId";
	    // DPI_DrillLevel, having type uint
	    ParameterId["DrillLevel"] = "drillLevel";
	    // DPI_DuplicateIndex, having type uint
	    ParameterId["DuplicateIndex"] = "duplicateIndex";
	    // DPI_EndIndex, having type uint
	    ParameterId["EndIndex"] = "endIndex";
	    // DPI_FieldIconIdx, having type uint
	    ParameterId["FieldIconIdx"] = "fieldIconIdx";
	    // DPI_FilterLevel, having type uint
	    ParameterId["FilterLevel"] = "filterLevel";
	    // DPI_FilterTileSize, having type uint
	    ParameterId["FilterTileSize"] = "filterTileSize";
	    // DPI_FiscalYearStart, having type uint
	    ParameterId["FiscalYearStart"] = "fiscalYearStart";
	    // DPI_FitPagesAcross, having type uint
	    ParameterId["FitPagesAcross"] = "pageFitHorizontal";
	    // DPI_FitPagesDown, having type uint
	    ParameterId["FitPagesDown"] = "pageFitVertical";
	    // DPI_FixedIndex, having type uint
	    ParameterId["FixedIndex"] = "fixedIndex";
	    // DPI_FlipboardZoneID, having type uint
	    ParameterId["FlipboardZoneID"] = "flipboardZoneId";
	    // DPI_ForecastAutoRangeSize, having type uint
	    ParameterId["ForecastAutoRangeSize"] = "forecastAutoRangeSize";
	    // DPI_ForecastEndOfRange, having type uint
	    ParameterId["ForecastEndOfRange"] = "forecastEndOfRange";
	    // DPI_ForecastIgnoreLast, having type uint
	    ParameterId["ForecastIgnoreLast"] = "forecastIgnoreLast";
	    // DPI_ForecastNextRangeSize, having type uint
	    ParameterId["ForecastNextRangeSize"] = "forecastNextRangeSize";
	    // DPI_GroupFlags, having type uint
	    ParameterId["GroupFlags"] = "groupFlag";
	    // DPI_HierarchyLevels, having type uint
	    ParameterId["HierarchyLevels"] = "hierarchyLevels";
	    // DPI_HierarchyMemberId, having type uint
	    ParameterId["HierarchyMemberId"] = "hierarchyMemberId";
	    // DPI_HitTestFlags, having type uint
	    ParameterId["HitTestFlags"] = "hitTestFlags";
	    // DPI_ImageHeight, having type uint
	    ParameterId["ImageHeight"] = "imageHeight";
	    // DPI_ImageWidth, having type uint
	    ParameterId["ImageWidth"] = "imageWidth";
	    // DPI_ItemIndex, having type uint
	    ParameterId["ItemIndex"] = "itemIndex";
	    // DPI_ItemIndex1, having type uint
	    ParameterId["ItemIndex1"] = "itemIndex1";
	    // DPI_LineHeight, having type uint
	    ParameterId["LineHeight"] = "lineHeight";
	    // DPI_MapIntermediateLevels, having type uint
	    ParameterId["MapIntermediateLevels"] = "mapIntermediateLevels";
	    // DPI_MapWorldRepeats, having type uint
	    ParameterId["MapWorldRepeats"] = "mapWorldRepeats";
	    // DPI_MaxAlpha, having type uint
	    ParameterId["MaxAlpha"] = "maxAlpha";
	    // DPI_MaxHeight, having type uint
	    ParameterId["MaxHeight"] = "maxHeight";
	    // DPI_MaxNumberWebListItems, having type uint
	    ParameterId["MaxNumberWebListItems"] = "maxNumberWebListItems";
	    // DPI_MaxPrevOrNextValues, having type uint
	    ParameterId["MaxPrevOrNextValues"] = "maxPrevOrNextValues";
	    // DPI_MaxRows, having type uint
	    ParameterId["MaxRows"] = "maxRows";
	    // DPI_MaxTransparency, having type uint
	    ParameterId["MaxTransparency"] = "colorMaxTransparencyValue";
	    // DPI_MaxWidth, having type uint
	    ParameterId["MaxWidth"] = "maxWidth";
	    // DPI_MinColumns, having type uint
	    ParameterId["MinColumns"] = "minColumns";
	    // DPI_MinHeight, having type uint
	    ParameterId["MinHeight"] = "minHeight";
	    // DPI_MinPrevOrNextValues, having type uint
	    ParameterId["MinPrevOrNextValues"] = "minPrevOrNextValues";
	    // DPI_MinTransparency, having type uint
	    ParameterId["MinTransparency"] = "colorMinTransparencyValue";
	    // DPI_MinWidth, having type uint
	    ParameterId["MinWidth"] = "minWidth";
	    // DPI_NestedCalcsIndex, having type uint
	    ParameterId["NestedCalcsIndex"] = "nestedCalcsIndex";
	    // DPI_NextValues, having type uint
	    ParameterId["NextValues"] = "nextValues";
	    // DPI_NodeLevel, having type uint
	    ParameterId["NodeLevel"] = "nodeLevel";
	    // DPI_NumHighlighted, having type uint
	    ParameterId["NumHighlighted"] = "numHighlighted";
	    // DPI_NumberOfNextValues, having type uint
	    ParameterId["NumberOfNextValues"] = "numberOfNextValues";
	    // DPI_NumberOfPrevValues, having type uint
	    ParameterId["NumberOfPrevValues"] = "numberOfPrevValues";
	    // DPI_ObjectID, having type uint
	    ParameterId["ObjectID"] = "objectId";
	    // DPI_OrderingTypeIndex, having type uint
	    ParameterId["OrderingTypeIndex"] = "orderingTypeIndex";
	    // DPI_PageCount, having type uint
	    ParameterId["PageCount"] = "pageCount";
	    // DPI_PageFadeEnd, having type uint
	    ParameterId["PageFadeEnd"] = "fadeEnd";
	    // DPI_PageFadeStart, having type uint
	    ParameterId["PageFadeStart"] = "fadeStart";
	    // DPI_PageIndex, having type uint
	    ParameterId["PageIndex"] = "pageIndex";
	    // DPI_PageNumber, having type uint
	    ParameterId["PageNumber"] = "pageNumber";
	    // DPI_PageScalePercent, having type uint
	    ParameterId["PageScalePercent"] = "pageScalePercent";
	    // DPI_PageTrailLength, having type uint
	    ParameterId["PageTrailLength"] = "historyLength";
	    // DPI_PaletteFlagsVal, having type uint
	    ParameterId["PaletteFlagsVal"] = "paletteFlagsVal";
	    // DPI_PaneIndex, having type uint
	    ParameterId["PaneIndex"] = "paneIndex";
	    // DPI_ParamCtrlDisplayFlags, having type uint
	    ParameterId["ParamCtrlDisplayFlags"] = "paramDisplayFlags";
	    // DPI_ParentZoneID, having type uint
	    ParameterId["ParentZoneID"] = "parentZoneId";
	    // DPI_PercentileParam, having type uint
	    ParameterId["PercentileParam"] = "percentileParam";
	    // DPI_PrevValues, having type uint
	    ParameterId["PrevValues"] = "prevValues";
	    // DPI_PublishResultStringId, having type uint
	    ParameterId["PublishResultStringId"] = "publishResultStringId";
	    // DPI_QRGBColor, having type uint
	    ParameterId["QRGBColor"] = "qrgbColor";
	    // DPI_RangeDefaultN, having type uint
	    ParameterId["RangeDefaultN"] = "rangeDefaultN";
	    // DPI_RangeN, having type uint
	    ParameterId["RangeN"] = "rangeN";
	    // DPI_RankTypeIndex, having type uint
	    ParameterId["RankTypeIndex"] = "rankTypeIndex";
	    // DPI_RenderComplexity, having type uint
	    ParameterId["RenderComplexity"] = "renderComplexityLimit";
	    // DPI_RowIndex, having type uint
	    ParameterId["RowIndex"] = "rowIndex";
	    // DPI_SelectedAuthSettingIndex, having type uint
	    ParameterId["SelectedAuthSettingIndex"] = "selectedAuthSettingIndex";
	    // DPI_SelectedFullScheduleIndex, having type uint
	    ParameterId["SelectedFullScheduleIndex"] = "selectedFullScheduleIndex";
	    // DPI_SelectedIncrScheduleIndex, having type uint
	    ParameterId["SelectedIncrScheduleIndex"] = "selectedIncrScheduleIndex";
	    // DPI_SelectedPublishChoiceIndex, having type uint
	    ParameterId["SelectedPublishChoiceIndex"] = "selectedPublishChoiceIndex";
	    // DPI_SelectedMemberCount, having type uint
	    ParameterId["SelectedMemberCount"] = "selectedMemberCount";
	    // DPI_ShapeID, having type uint
	    ParameterId["ShapeID"] = "shapeId";
	    // DPI_SheetUseCount, having type uint
	    ParameterId["SheetUseCount"] = "useCount";
	    // DPI_ShelfItemID, having type uint
	    ParameterId["ShelfItemID"] = "shelfItemId";
	    // DPI_SigFigs, having type uint
	    ParameterId["SigFigs"] = "sigFigs";
	    // DPI_SortAggIndex, having type uint
	    ParameterId["SortAggIndex"] = "sortAggIndvValues";
	    // DPI_SortColumnIndex, having type uint
	    ParameterId["SortColumnIndex"] = "sortColumnIndex";
	    // DPI_SortDirectionIndex, having type uint
	    ParameterId["SortDirectionIndex"] = "sortDirectionIndex";
	    // DPI_SortFieldIndex, having type uint
	    ParameterId["SortFieldIndex"] = "sortFieldIndex";
	    // DPI_StartIndex, having type uint
	    ParameterId["StartIndex"] = "startIndex";
	    // DPI_StartOfWeek, having type uint
	    ParameterId["StartOfWeek"] = "startOfWeek";
	    // DPI_StoreId, having type uint
	    ParameterId["StoreId"] = "storeId";
	    // DPI_StoryPointID, having type uint
	    ParameterId["StoryPointID"] = "storyPointId";
	    // DPI_TableCalcTypeIndex, having type uint
	    ParameterId["TableCalcTypeIndex"] = "tableCalcTypeIndex";
	    // DPI_TableCalcTypesUsed, having type uint
	    ParameterId["TableCalcTypesUsed"] = "tableCalcTypesUsed";
	    // DPI_TemplateIndex, having type uint
	    ParameterId["TemplateIndex"] = "templateIndex";
	    // DPI_TileCount, having type uint
	    ParameterId["TileCount"] = "tileCount";
	    // DPI_TimeoutSeconds, having type uint
	    ParameterId["TimeoutSeconds"] = "timeoutSeconds";
	    // DPI_TopN, having type uint
	    ParameterId["TopN"] = "topN";
	    // DPI_TotalNumberOfItemsInSet, having type uint
	    ParameterId["TotalNumberOfItemsInSet"] = "totalNumberOfItemsInSet";
	    // DPI_TotalMemberCount, having type uint
	    ParameterId["TotalMemberCount"] = "totalMemberCount";
	    // DPI_Transparency, having type uint
	    ParameterId["Transparency"] = "colorTransparencyValue";
	    // DPI_TupleID, having type uint
	    ParameterId["TupleID"] = "tupleId";
	    // DPI_UIndex, having type uint
	    ParameterId["UIndex"] = "uindex";
	    // DPI_UndoPosition, having type uint
	    ParameterId["UndoPosition"] = "undoPosition";
	    // DPI_UnsignedWidth, having type uint
	    ParameterId["UnsignedWidth"] = "uw";
	    // DPI_UnsignedWidthBottom, having type uint
	    ParameterId["UnsignedWidthBottom"] = "uwb";
	    // DPI_UnsignedWidthLeft, having type uint
	    ParameterId["UnsignedWidthLeft"] = "uwl";
	    // DPI_UnsignedWidthRight, having type uint
	    ParameterId["UnsignedWidthRight"] = "uwr";
	    // DPI_UnsignedWidthTop, having type uint
	    ParameterId["UnsignedWidthTop"] = "uwt";
	    // DPI_ValueIndex, having type uint
	    ParameterId["ValueIndex"] = "valueIndex";
	    // DPI_ValueInt, having type uint
	    ParameterId["ValueInt"] = "valueInt";
	    // DPI_WorldOffset, having type uint
	    ParameterId["WorldOffset"] = "worldOffset";
	    // DPI_XDuplicateIndex, having type uint
	    ParameterId["XDuplicateIndex"] = "xDuplicateIndex";
	    // DPI_XIndex, having type uint
	    ParameterId["XIndex"] = "xIndex";
	    // DPI_YDuplicateIndex, having type uint
	    ParameterId["YDuplicateIndex"] = "yDuplicateIndex";
	    // DPI_YIndex, having type uint
	    ParameterId["YIndex"] = "yIndex";
	    // DPI_ZoneID, having type uint
	    ParameterId["ZoneID"] = "zoneId";
	    // DPI_ZoneZOrder, having type uint
	    ParameterId["ZoneZOrder"] = "zoneZOrder";
	    // DPI_ComponentID, having type uint
	    ParameterId["ComponentID"] = "componentId";
	    // DPI_NonThreadPoolUseCount, having type uint
	    ParameterId["NonThreadPoolUseCount"] = "nonThreadPoolUseCount";
	    // DPI_AddressingIndices, having type uint[]
	    ParameterId["AddressingIndices"] = "addressingIndices";
	    // DPI_AddressingInvalidIndices, having type uint[]
	    ParameterId["AddressingInvalidIndices"] = "addressingInvalidIndices";
	    // DPI_ChildZoneIds, having type uint[]
	    ParameterId["ChildZoneIds"] = "childZoneIds";
	    // DPI_ColorList, having type uint[]
	    ParameterId["ColorList"] = "colorList";
	    // DPI_DuplicateIndices, having type uint[]
	    ParameterId["DuplicateIndices"] = "duplicateIndices";
	    // DPI_FilterAddIndices, having type uint[]
	    ParameterId["FilterAddIndices"] = "filterAddIndices";
	    // DPI_FilterIndices, having type uint[]
	    ParameterId["FilterIndices"] = "filterIndices";
	    // DPI_FilterLevelAdd, having type uint[]
	    ParameterId["FilterLevelAdd"] = "filterLevelAdd";
	    // DPI_FilterLevelRemove, having type uint[]
	    ParameterId["FilterLevelRemove"] = "filterLevelRemove";
	    // DPI_FilterLevels, having type uint[]
	    ParameterId["FilterLevels"] = "filterLevels";
	    // DPI_FilterRemoveIndices, having type uint[]
	    ParameterId["FilterRemoveIndices"] = "filterRemoveIndices";
	    // DPI_FixedValues, having type uint[]
	    ParameterId["FixedValues"] = "fixedValues";
	    // DPI_HierarchyMemberIdList, having type uint[]
	    ParameterId["HierarchyMemberIdList"] = "hierarchyMemberIdList";
	    // DPI_InvalidIndices, having type uint[]
	    ParameterId["InvalidIndices"] = "invalidIndices";
	    // DPI_ItemIndices, having type uint[]
	    ParameterId["ItemIndices"] = "itemIndices";
	    // DPI_LineTupleIDs, having type uint[]
	    ParameterId["LineTupleIDs"] = "lineTupleIds";
	    // DPI_ObjectIDs, having type uint[]
	    ParameterId["ObjectIDs"] = "objectIds";
	    // DPI_PageIndices, having type uint[]
	    ParameterId["PageIndices"] = "pageIndices";
	    // DPI_QRGB, having type uint[]
	    ParameterId["QRGB"] = "qrgbList";
	    // DPI_QRGBColors, having type uint[]
	    ParameterId["QRGBColors"] = "qrgbColors";
	    // DPI_RefLineID, having type uint[]
	    ParameterId["RefLineID"] = "reflineId";
	    // DPI_ShapeIDs, having type uint[]
	    ParameterId["ShapeIDs"] = "shapeIds";
	    // DPI_ShelfSelection, having type uint[]
	    ParameterId["ShelfSelection"] = "shelfSelection";
	    // DPI_StoryPointIDs, having type uint[]
	    ParameterId["StoryPointIDs"] = "storyPointIds";
	    // DPI_TupleIDs, having type uint[]
	    ParameterId["TupleIDs"] = "tupleIds";
	    // DPI_Widths, having type uint[]
	    ParameterId["Widths"] = "widths";
	    // DPI_UintMap, having type Dictionary(of uint32_t)
	    ParameterId["UintMap"] = "uintMap";
	    // DPI_Alpha, having type float
	    ParameterId["Alpha"] = "alpha";
	    // DPI_Angle, having type float
	    ParameterId["Angle"] = "angle";
	    // DPI_BreakPointValue, having type float
	    ParameterId["BreakPointValue"] = "breakPointValue";
	    // DPI_DevicePixelRatio, having type float
	    ParameterId["DevicePixelRatio"] = "devicePixelRatio";
	    // DPI_Distance, having type float
	    ParameterId["Distance"] = "distance";
	    // DPI_FloatX, having type float
	    ParameterId["FloatX"] = "floatX";
	    // DPI_FloatY, having type float
	    ParameterId["FloatY"] = "floatY";
	    // DPI_FogDesaturation, having type float
	    ParameterId["FogDesaturation"] = "fogDesaturation";
	    // DPI_MarkScale, having type float
	    ParameterId["MarkScale"] = "markScale";
	    // DPI_MarkSizeInPixelUnits, having type float
	    ParameterId["MarkSizeInPixelUnits"] = "markSizeInPixelUnits";
	    // DPI_PointSize, having type float
	    ParameterId["PointSize"] = "pointSize";
	    // DPI_StrokeWidth, having type float
	    ParameterId["StrokeWidth"] = "strokeWidth";
	    // DPI_TextRegionOrientation, having type float
	    ParameterId["TextRegionOrientation"] = "orientation";
	    // DPI_TransformAngle, having type float
	    ParameterId["TransformAngle"] = "transformAngle";
	    // DPI_ZoomLevel, having type float
	    ParameterId["ZoomLevel"] = "zoomLevel";
	    // DPI_OldZoomLevel, having type float
	    ParameterId["OldZoomLevel"] = "oldZoomLevel";
	    // DPI_NewZoomLevel, having type float
	    ParameterId["NewZoomLevel"] = "newZoomLevel";
	    // DPI_AspectRatio, having type float
	    ParameterId["AspectRatio"] = "aspectRatio";
	    // DPI_BottomPrintMargin, having type float
	    ParameterId["BottomPrintMargin"] = "bottomPrintMargin";
	    // DPI_EarthRadius, having type float
	    ParameterId["EarthRadius"] = "earthRadius";
	    // DPI_FloatHeight, having type float
	    ParameterId["FloatHeight"] = "floatHeight";
	    // DPI_FloatLeft, having type float
	    ParameterId["FloatLeft"] = "floatLeft";
	    // DPI_FloatRadius, having type float
	    ParameterId["FloatRadius"] = "floatRadius";
	    // DPI_FloatTop, having type float
	    ParameterId["FloatTop"] = "floatTop";
	    // DPI_FloatWidth, having type float
	    ParameterId["FloatWidth"] = "floatWidth";
	    // DPI_LeftPrintMargin, having type float
	    ParameterId["LeftPrintMargin"] = "leftPrintMargin";
	    // DPI_MapCenterLatitude, having type float
	    ParameterId["MapCenterLatitude"] = "mapCenterLatitude";
	    // DPI_MapCenterLongitude, having type float
	    ParameterId["MapCenterLongitude"] = "mapCenterLongitude";
	    // DPI_MapDisplayScale, having type float
	    ParameterId["MapDisplayScale"] = "mapDisplayScale";
	    // DPI_MapMaxStretch, having type float
	    ParameterId["MapMaxStretch"] = "mapMaxStretch";
	    // DPI_MapMaxZoom, having type float
	    ParameterId["MapMaxZoom"] = "mapMaxZoom";
	    // DPI_MapMinShrink, having type float
	    ParameterId["MapMinShrink"] = "mapMinShrink";
	    // DPI_MapMinZoom, having type float
	    ParameterId["MapMinZoom"] = "mapMinZoom";
	    // DPI_MapRequestZoom, having type float
	    ParameterId["MapRequestZoom"] = "mapRequestZoom";
	    // DPI_MapWashout, having type float
	    ParameterId["MapWashout"] = "mapWashout";
	    // DPI_MaxLatitude, having type float
	    ParameterId["MaxLatitude"] = "maxLatitude";
	    // DPI_MaxLongitude, having type float
	    ParameterId["MaxLongitude"] = "maxLongitude";
	    // DPI_MinLatitude, having type float
	    ParameterId["MinLatitude"] = "minLatitude";
	    // DPI_MinLongitude, having type float
	    ParameterId["MinLongitude"] = "minLongitude";
	    // DPI_RightPrintMargin, having type float
	    ParameterId["RightPrintMargin"] = "rightPrintMargin";
	    // DPI_TopPrintMargin, having type float
	    ParameterId["TopPrintMargin"] = "topPrintMargin";
	    // DPI_UIAutomationMaximum, having type float
	    ParameterId["UIAutomationMaximum"] = "uiAutomationMaximum";
	    // DPI_UIAutomationMinimum, having type float
	    ParameterId["UIAutomationMinimum"] = "uiAutomationMinimum";
	    // DPI_UIAutomationOffset, having type float
	    ParameterId["UIAutomationOffset"] = "uiAutomationOffset";
	    // DPI_UnitDivisor, having type float
	    ParameterId["UnitDivisor"] = "unitDivisor";
	    // DPI_UnitTransition, having type float
	    ParameterId["UnitTransition"] = "unitTransition";
	    // DPI_AutomaticDrillIdx, having type float[]
	    ParameterId["AutomaticDrillIdx"] = "automaticDrillIdx";
	    // DPI_DestinationBox, having type float[]
	    ParameterId["DestinationBox"] = "destBox";
	    // DPI_LowerEnd, having type float[]
	    ParameterId["LowerEnd"] = "lowerEnd";
	    // DPI_OppositeAxis, having type float[]
	    ParameterId["OppositeAxis"] = "oppositeAxis";
	    // DPI_PointsF, having type float[]
	    ParameterId["PointsF"] = "pointsF";
	    // DPI_SourceBox, having type float[]
	    ParameterId["SourceBox"] = "sourceBox";
	    // DPI_TransformOffset, having type float[]
	    ParameterId["TransformOffset"] = "transformOffset";
	    // DPI_TransformScale, having type float[]
	    ParameterId["TransformScale"] = "transformScale";
	    // DPI_UpperEnd, having type float[]
	    ParameterId["UpperEnd"] = "upperEnd";
	    // DPI_FloatMap, having type Dictionary(of float)
	    ParameterId["FloatMap"] = "floatMap";
	    // DPI_BGSS, having type double
	    ParameterId["BGSS"] = "betweenGroupSumOfSquares";
	    // DPI_ConfidenceLevel, having type double
	    ParameterId["ConfidenceLevel"] = "confidenceLevel";
	    // DPI_ConfidencePercentage, having type double
	    ParameterId["ConfidencePercentage"] = "confidencePercentage";
	    // DPI_DoubleLeft, having type double
	    ParameterId["DoubleLeft"] = "doubleLeft";
	    // DPI_DoubleTop, having type double
	    ParameterId["DoubleTop"] = "doubleTop";
	    // DPI_DoubleValue, having type double
	    ParameterId["DoubleValue"] = "doubleValue";
	    // DPI_DoubleX, having type double
	    ParameterId["DoubleX"] = "doubleX";
	    // DPI_DoubleY, having type double
	    ParameterId["DoubleY"] = "doubleY";
	    // DPI_FStatistic, having type double
	    ParameterId["FStatistic"] = "fStatistic";
	    // DPI_FilterRangeMax, having type double
	    ParameterId["FilterRangeMax"] = "filterRangeMax";
	    // DPI_FilterRangeMin, having type double
	    ParameterId["FilterRangeMin"] = "filterRangeMin";
	    // DPI_GeographicSearchCandidateScore, having type double
	    ParameterId["GeographicSearchCandidateScore"] = "geographicSearchCandidateScore";
	    // DPI_HeightD, having type double
	    ParameterId["HeightD"] = "height";
	    // DPI_InflectionFraction, having type double
	    ParameterId["InflectionFraction"] = "inflectionFraction";
	    // DPI_InflectionValue, having type double
	    ParameterId["InflectionValue"] = "inflectionValue";
	    // DPI_MSE, having type double
	    ParameterId["MSE"] = "meanSquaredError";
	    // DPI_MSM, having type double
	    ParameterId["MSM"] = "meanSquaredModel";
	    // DPI_MapScaleMarginOfError, having type double
	    ParameterId["MapScaleMarginOfError"] = "mapScaleMarginOfError";
	    // DPI_MarkSize, having type double
	    ParameterId["MarkSize"] = "markSize";
	    // DPI_MaxMarkSize, having type double
	    ParameterId["MaxMarkSize"] = "maxMarkSize";
	    // DPI_MinMarkSize, having type double
	    ParameterId["MinMarkSize"] = "minMarkSize";
	    // DPI_NotchPosition, having type double
	    ParameterId["NotchPosition"] = "notchPosition";
	    // DPI_NotchValue, having type double
	    ParameterId["NotchValue"] = "notchValue";
	    // DPI_PValue, having type double
	    ParameterId["PValue"] = "pValue";
	    // DPI_PercentDimensions, having type double
	    ParameterId["PercentDimensions"] = "percentDimensions";
	    // DPI_PercentGroups, having type double
	    ParameterId["PercentGroups"] = "percentGroups";
	    // DPI_PercentMeasures, having type double
	    ParameterId["PercentMeasures"] = "percentMeasures";
	    // DPI_RSquared, having type double
	    ParameterId["RSquared"] = "rSquared";
	    // DPI_SSE, having type double
	    ParameterId["SSE"] = "sumSquaredError";
	    // DPI_SSM, having type double
	    ParameterId["SSM"] = "sumSquaredModel";
	    // DPI_StandardError, having type double
	    ParameterId["StandardError"] = "standardError";
	    // DPI_TSS, having type double
	    ParameterId["TSS"] = "totalSumOfSquares";
	    // DPI_WGSS, having type double
	    ParameterId["WGSS"] = "withinGroupSumOfSquares";
	    // DPI_WidthD, having type double
	    ParameterId["WidthD"] = "width";
	    // DPI_ZoomFactor, having type double
	    ParameterId["ZoomFactor"] = "zoomFactor";
	    // DPI_CoefficientPValueVec, having type double[]
	    ParameterId["CoefficientPValueVec"] = "coefficientPValueVector";
	    // DPI_CoefficientStdErrVec, having type double[]
	    ParameterId["CoefficientStdErrVec"] = "coefficientStdErrorVector";
	    // DPI_CoefficientTValueVec, having type double[]
	    ParameterId["CoefficientTValueVec"] = "coefficientTValueVector";
	    // DPI_CoefficientVec, having type double[]
	    ParameterId["CoefficientVec"] = "coefficientVector";
	    // DPI_FStatisticVec, having type double[]
	    ParameterId["FStatisticVec"] = "trendLineFStatisticVector";
	    // DPI_Factors, having type double[]
	    ParameterId["Factors"] = "factors";
	    // DPI_MSEVec, having type double[]
	    ParameterId["MSEVec"] = "meanSquaredErrorVector";
	    // DPI_Means, having type double[]
	    ParameterId["Means"] = "means";
	    // DPI_PValueVec, having type double[]
	    ParameterId["PValueVec"] = "pValueVector";
	    // DPI_Percentages, having type double[]
	    ParameterId["Percentages"] = "percentages";
	    // DPI_Percentiles, having type double[]
	    ParameterId["Percentiles"] = "percentiles";
	    // DPI_SSEVec, having type double[]
	    ParameterId["SSEVec"] = "sumSquaredErrorVector";
	    // DPI_StDevs, having type double[]
	    ParameterId["StDevs"] = "stdev";
	    // DPI_UnscaledMeans, having type double[]
	    ParameterId["UnscaledMeans"] = "unscaledMeans";
	    // DPI_DeltaTimeMs, having type long
	    ParameterId["DeltaTimeMs"] = "deltaTimeMs";
	    // DPI_ExtractHistoryRowCount, having type long
	    ParameterId["ExtractHistoryRowCount"] = "extractRowCount";
	    // DPI_ExtractHistoryRowsRemoved, having type long
	    ParameterId["ExtractHistoryRowsRemoved"] = "extractRowsRemoved";
	    // DPI_ExtractsSize, having type long
	    ParameterId["ExtractsSize"] = "extractsSize";
	    // DPI_OldExtractSize, having type long
	    ParameterId["OldExtractSize"] = "oldExtractSize";
	    // DPI_RowsInserted, having type long
	    ParameterId["RowsInserted"] = "rowsInserted";
	    // DPI_SampleSize, having type long
	    ParameterId["SampleSize"] = "sampleSize";
	    // DPI_SampleSpace, having type long
	    ParameterId["SampleSpace"] = "sampleSpace";
	    // DPI_ThreadPoolUseCount, having type long
	    ParameterId["ThreadPoolUseCount"] = "threadPoolUseCount";
	    // DPI_ActionId, having type string
	    ParameterId["ActionId"] = "actionId";
	    // DPI_AxisColumn, having type string
	    ParameterId["AxisColumn"] = "axisColumn";
	    // DPI_BaseColumnName, having type string
	    ParameterId["BaseColumnName"] = "baseColumnName";
	    // DPI_BreakPointFieldName, having type string
	    ParameterId["BreakPointFieldName"] = "breakPointFieldName";
	    // DPI_PairedFieldName, having type string
	    ParameterId["PairedFieldName"] = "pairedFn";
	    // DPI_FieldNameAllowEmpty, having type string
	    ParameterId["FieldNameAllowEmpty"] = "fieldNameAllowEmpty";
	    // DPI_FieldNameDisAgg, having type string
	    ParameterId["FieldNameDisAgg"] = "fnDisagg";
	    // DPI_FieldNameLocal, having type string
	    ParameterId["FieldNameLocal"] = "fieldNameLocal";
	    // DPI_FieldNamePrev, having type string
	    ParameterId["FieldNamePrev"] = "fnPrev";
	    // DPI_FieldNameSource, having type string
	    ParameterId["FieldNameSource"] = "fnSource";
	    // DPI_FieldNameTarget, having type string
	    ParameterId["FieldNameTarget"] = "fnTarget";
	    // DPI_FieldNameX, having type string
	    ParameterId["FieldNameX"] = "fnX";
	    // DPI_FieldNameY, having type string
	    ParameterId["FieldNameY"] = "fnY";
	    // DPI_FieldToSort, having type string
	    ParameterId["FieldToSort"] = "fieldToSort";
	    // DPI_GlobalFieldName, having type string
	    ParameterId["GlobalFieldName"] = "globalFieldName";
	    // DPI_HierarchyName, having type string
	    ParameterId["HierarchyName"] = "hierarchyName";
	    // DPI_InvalidAggFieldName, having type string
	    ParameterId["InvalidAggFieldName"] = "invalidAggFieldName";
	    // DPI_InvalidFieldName, having type string
	    ParameterId["InvalidFieldName"] = "invalidFieldName";
	    // DPI_LimitParameterName, having type string
	    ParameterId["LimitParameterName"] = "limitParameterName";
	    // DPI_LocalBaseColumnName, having type string
	    ParameterId["LocalBaseColumnName"] = "localBaseColumnName";
	    // DPI_MeasureName, having type string
	    ParameterId["MeasureName"] = "measureName";
	    // DPI_NestedCalcField, having type string
	    ParameterId["NestedCalcField"] = "nestedCalcFn";
	    // DPI_ParameterName, having type string
	    ParameterId["ParameterName"] = "parameterName";
	    // DPI_ReferenceParam, having type string
	    ParameterId["ReferenceParam"] = "referenceParam";
	    // DPI_ReplacementFieldName, having type string
	    ParameterId["ReplacementFieldName"] = "replacementFieldName";
	    // DPI_RHSTableAlias, having type string
	    ParameterId["RHSTableAlias"] = "rhsTableAlias";
	    // DPI_SortMeasureName, having type string
	    ParameterId["SortMeasureName"] = "sortMeasureName";
	    // DPI_UniqueName, having type string
	    ParameterId["UniqueName"] = "uniqueName";
	    // DPI_ValueColumn, having type string
	    ParameterId["ValueColumn"] = "valueColumn";
	    // DPI_PairedValueColumn, having type string
	    ParameterId["PairedValueColumn"] = "pairedValueColumn";
	    // DPI_ActionIds, having type string[]
	    ParameterId["ActionIds"] = "actionIds";
	    // DPI_AddressingValues, having type string[]
	    ParameterId["AddressingValues"] = "addressingValues";
	    // DPI_AllColumns, having type string[]
	    ParameterId["AllColumns"] = "allColumns";
	    // DPI_AtTheLevelValues, having type string[]
	    ParameterId["AtTheLevelValues"] = "atTheLevelValues";
	    // DPI_AutomaticDrillFieldName, having type string[]
	    ParameterId["AutomaticDrillFieldName"] = "automaticDrillFieldName";
	    // DPI_BlendingFieldCandidates, having type string[]
	    ParameterId["BlendingFieldCandidates"] = "blendingFieldCandidates";
	    // DPI_Columns, having type string[]
	    ParameterId["Columns"] = "columns";
	    // DPI_CurrentBlendingFields, having type string[]
	    ParameterId["CurrentBlendingFields"] = "currentBlendingFields";
	    // DPI_DimensionsToSort, having type string[]
	    ParameterId["DimensionsToSort"] = "dimensionsToSort";
	    // DPI_DrillFieldVector, having type string[]
	    ParameterId["DrillFieldVector"] = "drillFieldVector";
	    // DPI_EncodingFieldVector, having type string[]
	    ParameterId["EncodingFieldVector"] = "encodingFieldVector";
	    // DPI_FieldVector, having type string[]
	    ParameterId["FieldVector"] = "fieldVector";
	    // DPI_FilterFields, having type string[]
	    ParameterId["FilterFields"] = "filterFields";
	    // DPI_LODFieldVector, having type string[]
	    ParameterId["LODFieldVector"] = "lodFieldVector";
	    // DPI_LegendColumns, having type string[]
	    ParameterId["LegendColumns"] = "legendColumns";
	    // DPI_LegendNames, having type string[]
	    ParameterId["LegendNames"] = "legendNames";
	    // DPI_NodeColumns, having type string[]
	    ParameterId["NodeColumns"] = "nodeColumns";
	    // DPI_PageFields, having type string[]
	    ParameterId["PageFields"] = "pageFields";
	    // DPI_ParamValues, having type string[]
	    ParameterId["ParamValues"] = "paramValues";
	    // DPI_RefLineFields, having type string[]
	    ParameterId["RefLineFields"] = "reflineFields";
	    // DPI_ReferencedColumns, having type string[]
	    ParameterId["ReferencedColumns"] = "referencedColumns";
	    // DPI_RelatedFieldNames, having type string[]
	    ParameterId["RelatedFieldNames"] = "relatedFieldNames";
	    // DPI_RemoveActionResults, having type string[]
	    ParameterId["RemoveActionResults"] = "removeActionResults";
	    // DPI_ResponseVector, having type string[]
	    ParameterId["ResponseVector"] = "responseVector";
	    // DPI_RestartEveryValues, having type string[]
	    ParameterId["RestartEveryValues"] = "restartEveryValues";
	    // DPI_ResultFields, having type string[]
	    ParameterId["ResultFields"] = "resultFields";
	    // DPI_SortFieldValues, having type string[]
	    ParameterId["SortFieldValues"] = "sortFieldValues";
	    // DPI_UniqueFieldVector, having type string[]
	    ParameterId["UniqueFieldVector"] = "uniqueFieldVector";
	    // DPI_XFields, having type string[]
	    ParameterId["XFields"] = "xFields";
	    // DPI_YFields, having type string[]
	    ParameterId["YFields"] = "yFields";
	    // DPI_ConnectionFullName, having type string
	    ParameterId["ConnectionFullName"] = "connectionFullName";
	    // DPI_ConnectionFullNames, having type string[]
	    ParameterId["ConnectionFullNames"] = "connectionFullNames";
	    // DPI_AnchorValue, having type object
	    ParameterId["AnchorValue"] = "anchorValue";
	    // DPI_BoundDataValue, having type object
	    ParameterId["BoundDataValue"] = "boundDataValue";
	    // DPI_DataValue, having type object
	    ParameterId["DataValue"] = "dataValue";
	    // DPI_DataValueIncrement, having type object
	    ParameterId["DataValueIncrement"] = "dataValueIncrement";
	    // DPI_DataValueLowerX, having type object
	    ParameterId["DataValueLowerX"] = "dataValueLowerX";
	    // DPI_DataValueLowerY, having type object
	    ParameterId["DataValueLowerY"] = "dataValueLowerY";
	    // DPI_DataValueUpperX, having type object
	    ParameterId["DataValueUpperX"] = "dataValueUpperX";
	    // DPI_DataValueUpperY, having type object
	    ParameterId["DataValueUpperY"] = "dataValueUpperY";
	    // DPI_DefaultDataValue, having type object
	    ParameterId["DefaultDataValue"] = "defaultDataValue";
	    // DPI_EffectiveStartDate, having type object
	    ParameterId["EffectiveStartDate"] = "effectiveStartDate";
	    // DPI_EffectiveEndDate, having type object
	    ParameterId["EffectiveEndDate"] = "effectiveEndDate";
	    // DPI_MaxDataValue, having type object
	    ParameterId["MaxDataValue"] = "maxDataValue";
	    // DPI_MinDataValue, having type object
	    ParameterId["MinDataValue"] = "minDataValue";
	    // DPI_ValidatedDataValue, having type object
	    ParameterId["ValidatedDataValue"] = "validatedDataValue";
	    // DPI_BinSize, having type object
	    ParameterId["BinSize"] = "binSize";
	    // DPI_LimitCount, having type object
	    ParameterId["LimitCount"] = "limitCount";
	    // DPI_DataValueList, having type object[]
	    ParameterId["DataValueList"] = "dataValueList";
	    // DPI_FieldDisplayItem, having type FieldDisplayItemPresModel
	    ParameterId["FieldDisplayItem"] = "fieldDisplayItem";
	    // DPI_FieldDisplayList, having type FieldDisplayItemPresModel[]
	    ParameterId["FieldDisplayList"] = "fieldDisplayList";
	    // DPI_FieldCaptionPair, having type FieldCaptionPairPresModel
	    ParameterId["FieldCaptionPair"] = "fieldCaptionPair";
	    // DPI_FieldCaptionPairs, having type FieldCaptionPairPresModel[]
	    ParameterId["FieldCaptionPairs"] = "fieldCaptionPairs";
	    // DPI_ParameterCaptionPairs, having type FieldCaptionPairPresModel[]
	    ParameterId["ParameterCaptionPairs"] = "parameterCaptionPairs";
	    // DPI_VaryingAttributeDimensions, having type FieldCaptionPairPresModel[]
	    ParameterId["VaryingAttributeDimensions"] = "varyingAttributeDimensions";
	    // DPI_FieldCaptionPairState, having type FieldCaptionPairStatePresModel
	    ParameterId["FieldCaptionPairState"] = "fieldCaptionPairState";
	    // DPI_FieldCaptionPairStates, having type FieldCaptionPairStatePresModel[]
	    ParameterId["FieldCaptionPairStates"] = "fieldCaptionPairStates";
	    // DPI_DatasourceCaptionPair, having type DatasourceCaptionPairPresModel
	    ParameterId["DatasourceCaptionPair"] = "datasourceCaptionPair";
	    // DPI_DatasourceCaptionPairs, having type DatasourceCaptionPairPresModel[]
	    ParameterId["DatasourceCaptionPairs"] = "datasourceCaptionPairs";
	    // DPI_SheetNameInfoPair, having type SheetNameInfoPairPresModel
	    ParameterId["SheetNameInfoPair"] = "sheetNameInfoPair";
	    // DPI_SheetNameInfoPairs, having type SheetNameInfoPairPresModel[]
	    ParameterId["SheetNameInfoPairs"] = "sheetNameInfoPairs";
	    // DPI_BGActiveColor, having type string
	    ParameterId["BGActiveColor"] = "bgActiveColor";
	    // DPI_BGColor, having type string
	    ParameterId["BGColor"] = "bgColor";
	    // DPI_BGRestColor, having type string
	    ParameterId["BGRestColor"] = "bgRestColor";
	    // DPI_BorderColor, having type string
	    ParameterId["BorderColor"] = "borderColor";
	    // DPI_BorderColorBottom, having type string
	    ParameterId["BorderColorBottom"] = "borderColorBottom";
	    // DPI_BorderColorLeft, having type string
	    ParameterId["BorderColorLeft"] = "borderColorLeft";
	    // DPI_BorderColorRight, having type string
	    ParameterId["BorderColorRight"] = "borderColorRight";
	    // DPI_BorderColorTop, having type string
	    ParameterId["BorderColorTop"] = "borderColorTop";
	    // DPI_ButtonObjectBackgroundColor, having type string
	    ParameterId["ButtonObjectBackgroundColor"] = "buttonObjectBackgroundColor";
	    // DPI_Color, having type string
	    ParameterId["Color"] = "color";
	    // DPI_Color1, having type string
	    ParameterId["Color1"] = "color1";
	    // DPI_Color2, having type string
	    ParameterId["Color2"] = "color2";
	    // DPI_DefaultColor, having type string
	    ParameterId["DefaultColor"] = "defaultColor";
	    // DPI_DistanceFontColor, having type string
	    ParameterId["DistanceFontColor"] = "distanceFontColor";
	    // DPI_FillColor, having type string
	    ParameterId["FillColor"] = "fillColor";
	    // DPI_FogColor, having type string
	    ParameterId["FogColor"] = "fogColor";
	    // DPI_HeaderColor, having type string
	    ParameterId["HeaderColor"] = "headerColor";
	    // DPI_HighlightBGColor, having type string
	    ParameterId["HighlightBGColor"] = "highlightBgColor";
	    // DPI_HighlightTextColor, having type string
	    ParameterId["HighlightTextColor"] = "highlightTextColor";
	    // DPI_HoverColor, having type string
	    ParameterId["HoverColor"] = "hoverColor";
	    // DPI_HyperlinkColor, having type string
	    ParameterId["HyperlinkColor"] = "hyperlinkColor";
	    // DPI_MapAttributionFill, having type string
	    ParameterId["MapAttributionFill"] = "mapAttributionFill";
	    // DPI_MapAttributionTextColor, having type string
	    ParameterId["MapAttributionTextColor"] = "mapAttributionTextColor";
	    // DPI_MapPaneBackgroundFill, having type string
	    ParameterId["MapPaneBackgroundFill"] = "mapPaneBackgroundFill";
	    // DPI_MapScaleBorderColor, having type string
	    ParameterId["MapScaleBorderColor"] = "mapScaleBorderColor";
	    // DPI_MapScaleColor, having type string
	    ParameterId["MapScaleColor"] = "mapScaleColor";
	    // DPI_MapWaitTileFill, having type string
	    ParameterId["MapWaitTileFill"] = "mapWaitTileFill";
	    // DPI_MarkColor, having type string
	    ParameterId["MarkColor"] = "markColor";
	    // DPI_NavArrowDisabledColor, having type string
	    ParameterId["NavArrowDisabledColor"] = "navArrowDisabledColor";
	    // DPI_NavArrowHoverColor, having type string
	    ParameterId["NavArrowHoverColor"] = "navArrowHoverColor";
	    // DPI_NavArrowIdleColor, having type string
	    ParameterId["NavArrowIdleColor"] = "navArrowIdleColor";
	    // DPI_NavArrowPressedColor, having type string
	    ParameterId["NavArrowPressedColor"] = "navArrowPressedColor";
	    // DPI_PaneColor, having type string
	    ParameterId["PaneColor"] = "paneColor";
	    // DPI_PressColor, having type string
	    ParameterId["PressColor"] = "pressColor";
	    // DPI_ResizeBorderColor, having type string
	    ParameterId["ResizeBorderColor"] = "resizeBorderColor";
	    // DPI_SelectBGColor, having type string
	    ParameterId["SelectBGColor"] = "selectBgColor";
	    // DPI_SelectionTextColor, having type string
	    ParameterId["SelectionTextColor"] = "selectionTextColor";
	    // DPI_SwatchBackgroundColor, having type string
	    ParameterId["SwatchBackgroundColor"] = "swatchBgColor";
	    // DPI_SwatchBorderColor, having type string
	    ParameterId["SwatchBorderColor"] = "swatchBorderColor";
	    // DPI_TabColor, having type string
	    ParameterId["TabColor"] = "tabColor";
	    // DPI_Colors, having type string[]
	    ParameterId["Colors"] = "colors";
	    // DPI_ColorMap, having type Dictionary(of string)
	    ParameterId["ColorMap"] = "colorMap";
	    // DPI_Pixmap, having type string
	    ParameterId["Pixmap"] = "pixmap";
	    // DPI_Image, having type string
	    ParameterId["Image"] = "image";
	    // DPI_OverlayImage, having type string
	    ParameterId["OverlayImage"] = "overlayImage";
	    // DPI_IconImage, having type string
	    ParameterId["IconImage"] = "iconImage";
	    // DPI_ImageList, having type string[]
	    ParameterId["ImageList"] = "imageList";
	    // DPI_ImageMap, having type Dictionary(of string)
	    ParameterId["ImageMap"] = "imageMap";
	    // DPI_UUID, having type object
	    ParameterId["UUID"] = "uuid";
	    // DPI_DashboardObjectHandle, having type object
	    ParameterId["DashboardObjectHandle"] = "dashboardObjectHandle";
	    // DPI_DashboardObjectNewStateHandle, having type object
	    ParameterId["DashboardObjectNewStateHandle"] = "dashboardObjectNewStateHandle";
	    // DPI_DashboardObjectCurrentStateHandle, having type object
	    ParameterId["DashboardObjectCurrentStateHandle"] = "dashboardObjectCurrentStateHandle";
	    // DPI_DashboardObjectBatchID, having type object
	    ParameterId["DashboardObjectBatchID"] = "dashboardObjectBatchId";
	    // DPI_Nanoseconds, having type object
	    ParameterId["Nanoseconds"] = "nanoseconds";
	    // DPI_Microseconds, having type object
	    ParameterId["Microseconds"] = "microseconds";
	    // DPI_Milliseconds, having type object
	    ParameterId["Milliseconds"] = "milliseconds";
	    // DPI_TimeoutS, having type object
	    ParameterId["TimeoutS"] = "timeoutS";
	    // DPI_Minutes, having type object
	    ParameterId["Minutes"] = "minutes";
	    // DPI_Hours, having type object
	    ParameterId["Hours"] = "hours";
	    // DPI_CardType, having type CardType
	    ParameterId["CardType"] = "cardType";
	    // DPI_DocParameterID, having type string
	    ParameterId["DocParameterID"] = "type";
	    // DPI_ArgumentParam, having type string
	    ParameterId["ArgumentParam"] = "argumentParam";
	    // DPI_ArgumentParams, having type string[]
	    ParameterId["ArgumentParams"] = "argumentParams";
	    // DPI_ActionType, having type ActionType
	    ParameterId["ActionType"] = "actionType";
	    // DPI_AnnotateEnum, having type AnnotateEnum
	    ParameterId["AnnotateEnum"] = "annotateEnum";
	    // DPI_JoinType, having type SQLJoinType
	    ParameterId["JoinType"] = "joinType";
	    // DPI_SupportedJoinTypes, having type SQLJoinType[]
	    ParameterId["SupportedJoinTypes"] = "supportedJoinTypes";
	    // DPI_Rounding, having type Rounding
	    ParameterId["Rounding"] = "roundingEnum";
	    // DPI_BodyType, having type BodyType
	    ParameterId["BodyType"] = "bodyType";
	    // DPI_LineEnd, having type LineEnd
	    ParameterId["LineEnd"] = "lineEndEnum";
	    // DPI_LineEndSize, having type LineEndSize
	    ParameterId["LineEndSize"] = "lineEndSizeEnum";
	    // DPI_BrushSpecialFields, having type BrushSpecialFields
	    ParameterId["BrushSpecialFields"] = "specialFields";
	    // DPI_CellSizeChange, having type CellSizeChange
	    ParameterId["CellSizeChange"] = "cellSizeChange";
	    // DPI_CellType, having type CellType
	    ParameterId["CellType"] = "cellType";
	    // DPI_ConnectionAttemptResult, having type ConnectionAttemptResult
	    ParameterId["ConnectionAttemptResult"] = "connectionAttemptResult";
	    // DPI_ConnectionErrorStage, having type ConnectionErrorStage
	    ParameterId["ConnectionErrorStage"] = "connectionErrorStage";
	    // DPI_ConnectionErrorType, having type ConnectionErrorType
	    ParameterId["ConnectionErrorType"] = "connectionErrorType";
	    // DPI_DataServerConnectionResult, having type DataServerConnectionResult
	    ParameterId["DataServerConnectionResult"] = "dsConnectionResult";
	    // DPI_DropWhen, having type DropWhen
	    ParameterId["DropWhen"] = "dropWhen";
	    // DPI_DropType, having type DropFieldResult
	    ParameterId["DropType"] = "dropType";
	    // DPI_EncodingType, having type EncodingType
	    ParameterId["EncodingType"] = "encodingType";
	    // DPI_DropdownEncodingType, having type EncodingType
	    ParameterId["DropdownEncodingType"] = "dropdownEncodingType";
	    // DPI_EncodingTypes, having type EncodingType[]
	    ParameterId["EncodingTypes"] = "encodingTypes";
	    // DPI_FieldOrderType, having type FieldOrderType
	    ParameterId["FieldOrderType"] = "fieldOrderType";
	    // DPI_FilterIconType, having type FilterIconType
	    ParameterId["FilterIconType"] = "filterIconType";
	    // DPI_FilterIconTypes, having type FilterIconType[]
	    ParameterId["FilterIconTypes"] = "filterIconTypes";
	    // DPI_FloatingToolbarVis, having type FloatingToolbarVisibility
	    ParameterId["FloatingToolbarVis"] = "toolbarVisibility";
	    // DPI_FolderRole, having type FolderRole
	    ParameterId["FolderRole"] = "folderRole";
	    // DPI_LegendType, having type Enum
	    ParameterId["LegendType"] = "legendType";
	    // DPI_ForecastModelType, having type ForecastModelType
	    ParameterId["ForecastModelType"] = "forecastModelType";
	    // DPI_ForecastTrendType, having type ForecastComponentType
	    ParameterId["ForecastTrendType"] = "forecastTrendType";
	    // DPI_ForecastSeasonType, having type ForecastComponentType
	    ParameterId["ForecastSeasonType"] = "forecastSeasonType";
	    // DPI_ForecastRangeType, having type ForecastRangeType
	    ParameterId["ForecastRangeType"] = "forecastRangeType";
	    // DPI_ForecastStatus, having type ForecastStatus
	    ParameterId["ForecastStatus"] = "forecastStatus";
	    // DPI_SheetForecastStatus, having type ForecastStatus
	    ParameterId["SheetForecastStatus"] = "sheetForecastStatus";
	    // DPI_PDForecastStatusList, having type ForecastStatus[]
	    ParameterId["PDForecastStatusList"] = "paneDescriptorForecastStatusList";
	    // DPI_ForecastColumnType, having type ForecastColumnType
	    ParameterId["ForecastColumnType"] = "forecastColumnType";
	    // DPI_DataScaling, having type DataScaling
	    ParameterId["DataScaling"] = "dataScaling";
	    // DPI_GetFilterItemsJsonResponse, having type GetJsonResponseEnum
	    ParameterId["GetFilterItemsJsonResponse"] = "getFilterItemsJsonResponse";
	    // DPI_FilterSearchJsonResponse, having type GetJsonResponseEnum
	    ParameterId["FilterSearchJsonResponse"] = "filterSearchJsonResponse";
	    // DPI_FilterSearchWithIndexJsonResponse, having type GetJsonResponseEnum
	    ParameterId["FilterSearchWithIndexJsonResponse"] = "filterSearchWithIndexJsonResponse";
	    // DPI_FilterShowChildrenJsonResponse, having type GetJsonResponseEnum
	    ParameterId["FilterShowChildrenJsonResponse"] = "filterShowChildrenJsonResponse";
	    // DPI_HAlignment, having type LabelHAlignment
	    ParameterId["HAlignment"] = "horizontalLabelAlignment";
	    // DPI_JoinValidationError, having type JoinValidationError
	    ParameterId["JoinValidationError"] = "joinValidationError";
	    // DPI_NameConflictResolution, having type NameConflictResolution
	    ParameterId["NameConflictResolution"] = "nameConflictResolution";
	    // DPI_LabelDir, having type TextOrient
	    ParameterId["LabelDir"] = "labelDirection";
	    // DPI_LabelAlign, having type TextAlign
	    ParameterId["LabelAlign"] = "labelAlignment";
	    // DPI_LabelWrap, having type TextWrapMode
	    ParameterId["LabelWrap"] = "labelWrap";
	    // DPI_WrapMode, having type TextWrapMode
	    ParameterId["WrapMode"] = "wrapMode";
	    // DPI_MarkEnum, having type MarkEnum
	    ParameterId["MarkEnum"] = "markEnum";
	    // DPI_PercentMode, having type PercentMode
	    ParameterId["PercentMode"] = "percentageMode";
	    // DPI_ReferenceOptionsSet, having type ReferenceOptionsSet
	    ParameterId["ReferenceOptionsSet"] = "referenceOptionsSet";
	    // DPI_ReferenceOptionsSets, having type ReferenceOptionsSet[]
	    ParameterId["ReferenceOptionsSets"] = "referenceOptionsSets";
	    // DPI_RankType, having type RankType
	    ParameterId["RankType"] = "rankType";
	    // DPI_RankTypeValues, having type RankType[]
	    ParameterId["RankTypeValues"] = "rankTypeValues";
	    // DPI_SpecialValuesMode, having type SpecialValuesMode
	    ParameterId["SpecialValuesMode"] = "specialValuesMode";
	    // DPI_VAlignment, having type LabelVAlignment
	    ParameterId["VAlignment"] = "verticalLabelAlignment";
	    // DPI_ColorMode, having type ColorMode
	    ParameterId["ColorMode"] = "colorMode";
	    // DPI_MarkLabelsMode, having type MarkLabelsMode
	    ParameterId["MarkLabelsMode"] = "markLabelsMode";
	    // DPI_MarkLabelsScope, having type MarkLabelsScope
	    ParameterId["MarkLabelsScope"] = "markLabelsScope";
	    // DPI_MarkLabelsVisibility, having type MarkLabelsVisibility
	    ParameterId["MarkLabelsVisibility"] = "markLabelsVisibility";
	    // DPI_PrimitiveType, having type PrimitiveType
	    ParameterId["PrimitiveType"] = "primitiveType";
	    // DPI_ActualPrimitiveType, having type PrimitiveType
	    ParameterId["ActualPrimitiveType"] = "actualPrimitiveType";
	    // DPI_PrimitiveTypes, having type PrimitiveType[]
	    ParameterId["PrimitiveTypes"] = "primitiveTypes";
	    // DPI_ShapeType, having type ShapeType
	    ParameterId["ShapeType"] = "shapeType";
	    // DPI_SortIndicatorType, having type SortIndicatorType
	    ParameterId["SortIndicatorType"] = "sortIndicatorType";
	    // DPI_SortType, having type SortType
	    ParameterId["SortType"] = "sortBy";
	    // DPI_SortEnd, having type SortEnd
	    ParameterId["SortEnd"] = "sortEnd";
	    // DPI_StackingMode, having type StackingMode
	    ParameterId["StackingMode"] = "stackingMode";
	    // DPI_StyleTheme, having type StyleTheme
	    ParameterId["StyleTheme"] = "styleTheme";
	    // DPI_TrendLineFitType, having type TrendLineFitType
	    ParameterId["TrendLineFitType"] = "fitType";
	    // DPI_UpdateScope, having type UpdateScope
	    ParameterId["UpdateScope"] = "updateScope";
	    // DPI_ParameterCtrlDisplayMode, having type DisplayMode
	    ParameterId["ParameterCtrlDisplayMode"] = "paramDisplayMode";
	    // DPI_ParameterCtrlDisplayFlag, having type ParameterCtrlDisplayFlag
	    ParameterId["ParameterCtrlDisplayFlag"] = "paramDisplayFlag";
	    // DPI_Included, having type QuantitativeIncludedValues
	    ParameterId["Included"] = "included";
	    // DPI_CommandsType, having type CommandsType
	    ParameterId["CommandsType"] = "commandsType";
	    // DPI_ParameterDomainType, having type DomainType
	    ParameterId["ParameterDomainType"] = "parameterDomainType";
	    // DPI_FilterDomainType, having type DomainType
	    ParameterId["FilterDomainType"] = "filterDomainType";
	    // DPI_FilterDomains, having type DomainType[]
	    ParameterId["FilterDomains"] = "filterDomains";
	    // DPI_FilterDomainTypeCaption, having type FilterDomainTypeCaptionPresModel
	    ParameterId["FilterDomainTypeCaption"] = "filterDomainTypeCaption";
	    // DPI_FilterDomainTypeCaptions, having type FilterDomainTypeCaptionPresModel[]
	    ParameterId["FilterDomainTypeCaptions"] = "filterDomainTypeCaptions";
	    // DPI_CategoricalFilterType, having type CategoricalFilterType
	    ParameterId["CategoricalFilterType"] = "categoricalFilterType";
	    // DPI_QuantitativeFilterType, having type QuantitativeFilterType
	    ParameterId["QuantitativeFilterType"] = "quantitativeFilterType";
	    // DPI_FilterPatternType, having type PatternType
	    ParameterId["FilterPatternType"] = "filterPatternType";
	    // DPI_FilterConditionType, having type ConditionType
	    ParameterId["FilterConditionType"] = "filterConditionType";
	    // DPI_FiltersPresetType, having type PresetType
	    ParameterId["FiltersPresetType"] = "filtersPresetType";
	    // DPI_FiltersRangeType, having type RangeType
	    ParameterId["FiltersRangeType"] = "filtersRangeType";
	    // DPI_DateRangeType, having type RelativeDateRangeType
	    ParameterId["DateRangeType"] = "dateRangeType";
	    // DPI_PageFlag, having type PageNavFlags
	    ParameterId["PageFlag"] = "pageFlag";
	    // DPI_MarksToTrail, having type MarksToTrail
	    ParameterId["MarksToTrail"] = "marksToTrail";
	    // DPI_TrailType, having type TrailType
	    ParameterId["TrailType"] = "trailType";
	    // DPI_ChangePageDirection, having type ChangePageType
	    ParameterId["ChangePageDirection"] = "changeTo";
	    // DPI_AnimationControl, having type PageAnimationControl
	    ParameterId["AnimationControl"] = "animationControl";
	    // DPI_LinePattern, having type LinePattern
	    ParameterId["LinePattern"] = "linePattern";
	    // DPI_LineCap, having type LineCap
	    ParameterId["LineCap"] = "lineCap";
	    // DPI_LineJoin, having type LineJoin
	    ParameterId["LineJoin"] = "lineJoin";
	    // DPI_LineAlignment, having type LineAlignment
	    ParameterId["LineAlignment"] = "lineAlignment";
	    // DPI_FillMode, having type FillMode
	    ParameterId["FillMode"] = "fillMode";
	    // DPI_CursorShape, having type CursorShape
	    ParameterId["CursorShape"] = "cursorShape";
	    // DPI_ShowMeCommandType, having type ShowMeCommandType
	    ParameterId["ShowMeCommandType"] = "showMeCommandType";
	    // DPI_ShelfIconType, having type ShelfIconType
	    ParameterId["ShelfIconType"] = "shelfIconType";
	    // DPI_ShelfIconTypes, having type ShelfIconType[]
	    ParameterId["ShelfIconTypes"] = "shelfIconTypes";
	    // DPI_ItemDrawStyle, having type ItemDrawStyle
	    ParameterId["ItemDrawStyle"] = "itemDrawStyle";
	    // DPI_ScaleMode, having type ScaleMode
	    ParameterId["ScaleMode"] = "pageScaleMode";
	    // DPI_PageOrientationOption, having type PageOrientation
	    ParameterId["PageOrientationOption"] = "pageOrientationOption";
	    // DPI_PageSizeOption, having type PageSizeOption
	    ParameterId["PageSizeOption"] = "pageSizeOption";
	    // DPI_SortRegionType, having type SortRegionType
	    ParameterId["SortRegionType"] = "sortRegion";
	    // DPI_LegendItemLayout, having type LegendItemLayout
	    ParameterId["LegendItemLayout"] = "legendLayout";
	    // DPI_LegendItemOrder, having type LegendItemOrder
	    ParameterId["LegendItemOrder"] = "legendOrder";
	    // DPI_VizImageRegion, having type VizImageRegion
	    ParameterId["VizImageRegion"] = "r";
	    // DPI_LegacyMenuName, having type LegacyMenuName
	    ParameterId["LegacyMenuName"] = "legacyMenuName";
	    // DPI_LegacyMenuState, having type LegacyMenuState
	    ParameterId["LegacyMenuState"] = "legacyMenuState";
	    // DPI_LegacyMenuStateList, having type LegacyMenuState[]
	    ParameterId["LegacyMenuStateList"] = "legacyMenuStates";
	    // DPI_DimensionType, having type DimensionType
	    ParameterId["DimensionType"] = "dimensionType";
	    // DPI_LayoutType, having type LayoutType
	    ParameterId["LayoutType"] = "layoutType";
	    // DPI_ShelfType, having type ShelfType
	    ParameterId["ShelfType"] = "shelfType";
	    // DPI_LastSelectionShelf, having type ShelfType
	    ParameterId["LastSelectionShelf"] = "lastShelf";
	    // DPI_SchemaViewerDataSourceType, having type SchemaViewerDataSourceType
	    ParameterId["SchemaViewerDataSourceType"] = "schemaDatasourceType";
	    // DPI_SchemaItemType, having type SchemaItemType
	    ParameterId["SchemaItemType"] = "schemaItemType";
	    // DPI_HSMSelectionMode, having type SelectionMode
	    ParameterId["HSMSelectionMode"] = "hsmSelectionMode";
	    // DPI_HSMDefaultMemberType, having type DefaultMemberType
	    ParameterId["HSMDefaultMemberType"] = "hsmDefaultMemberType";
	    // DPI_HSMNotificationType, having type NotificationType
	    ParameterId["HSMNotificationType"] = "hsmNotificationType";
	    // DPI_HSMSelectionRequestType, having type SelectionRequestType
	    ParameterId["HSMSelectionRequestType"] = "hsmSelectionRequestType";
	    // DPI_HSMMemberSelectRequestType, having type MemberSelectRequestType
	    ParameterId["HSMMemberSelectRequestType"] = "hsmMemberSelectRequestType";
	    // DPI_PivotStrategy, having type FieldPivotStrategy
	    ParameterId["PivotStrategy"] = "pivotStrategy";
	    // DPI_AliasType, having type AliasType
	    ParameterId["AliasType"] = "aliasType";
	    // DPI_DSODimensionSortOrder, having type DataSourceOrder
	    ParameterId["DSODimensionSortOrder"] = "dsoDimensionSortOrder";
	    // DPI_DSOMeasureSortOrder, having type DataSourceOrder
	    ParameterId["DSOMeasureSortOrder"] = "dsoMeasureSortOrder";
	    // DPI_DSOSortOrder, having type DataSourceOrder
	    ParameterId["DSOSortOrder"] = "dsoSortOrder";
	    // DPI_VTAggType, having type VTAggType
	    ParameterId["VTAggType"] = "vtAggregation";
	    // DPI_FieldTypeIconSet, having type FieldTypeIconSet
	    ParameterId["FieldTypeIconSet"] = "fieldIconSet";
	    // DPI_VisualPart, having type VisualPart
	    ParameterId["VisualPart"] = "visualPart";
	    // DPI_DefaultMapToolEnum, having type MapToolSelection
	    ParameterId["DefaultMapToolEnum"] = "defaultMapToolEnum";
	    // DPI_DefaultMapUnitEnum, having type MapUnitSelectionEnum
	    ParameterId["DefaultMapUnitEnum"] = "defaultMapUnitEnum";
	    // DPI_SceneModelDetail, having type Detail
	    ParameterId["SceneModelDetail"] = "sceneModelDetailEnum";
	    // DPI_SceneModelHitType, having type HitType
	    ParameterId["SceneModelHitType"] = "sceneModelHitType";
	    // DPI_HitTestStyle, having type HitTestStyle
	    ParameterId["HitTestStyle"] = "hitTestStyle";
	    // DPI_MarkState, having type MarkState
	    ParameterId["MarkState"] = "markState";
	    // DPI_SheetType, having type SheetType
	    ParameterId["SheetType"] = "sheetType";
	    // DPI_DragSource, having type DragDropType
	    ParameterId["DragSource"] = "dragSource";
	    // DPI_DropTarget, having type DragDropType
	    ParameterId["DropTarget"] = "dropTarget";
	    // DPI_ShelfDropAction, having type ShelfDropAction
	    ParameterId["ShelfDropAction"] = "shelfDropAction";
	    // DPI_ShelfDropContext, having type ShelfDropContext
	    ParameterId["ShelfDropContext"] = "shelfDropContext";
	    // DPI_FilterSelectionTracking, having type SelectionTracking
	    ParameterId["FilterSelectionTracking"] = "filterSelectionTracking";
	    // DPI_FilterUpdateType, having type FilterUpdateType
	    ParameterId["FilterUpdateType"] = "filterUpdateType";
	    // DPI_FilterUpdateQualifierType, having type FilterUpdateQualifierType
	    ParameterId["FilterUpdateQualifierType"] = "filterUpdateQualifierType";
	    // DPI_ParameterError, having type ParameterError
	    ParameterId["ParameterError"] = "parameterError";
	    // DPI_SelectionType, having type SelectionType
	    ParameterId["SelectionType"] = "selectionType";
	    // DPI_SelectionUpdateType, having type SelectionUpdateType
	    ParameterId["SelectionUpdateType"] = "selectionUpdateType";
	    // DPI_SelectOptions, having type SelectOptions
	    ParameterId["SelectOptions"] = "selectOptions";
	    // DPI_WhitespaceSelectionBehavior, having type WhitespaceSelectionBehavior
	    ParameterId["WhitespaceSelectionBehavior"] = "whitespaceSelectionBehavior";
	    // DPI_AxisOrientation, having type Orientation
	    ParameterId["AxisOrientation"] = "axisOrientation";
	    // DPI_DecimalMode, having type DecimalMode
	    ParameterId["DecimalMode"] = "decimalMode";
	    // DPI_ActivationMethod, having type ActivationMethod
	    ParameterId["ActivationMethod"] = "activation";
	    // DPI_SourceType, having type SourceType
	    ParameterId["SourceType"] = "sourceType";
	    // DPI_OnClear, having type OnClear
	    ParameterId["OnClear"] = "onClear";
	    // DPI_MergeOrSplit, having type MergeOrSplit
	    ParameterId["MergeOrSplit"] = "mergeOrSplit";
	    // DPI_FilterMode, having type FilterMode
	    ParameterId["FilterMode"] = "filterMode";
	    // DPI_FilterType, having type FilterType
	    ParameterId["FilterType"] = "filterType";
	    // DPI_DashboardObjectType, having type DocDashboardObjectTypes
	    ParameterId["DashboardObjectType"] = "dashboardObjectType";
	    // DPI_ZoneType, having type ZoneType
	    ParameterId["ZoneType"] = "zoneType";
	    // DPI_ZoneLayoutType, having type ZoneLayoutType
	    ParameterId["ZoneLayoutType"] = "zoneLayoutType";
	    // DPI_QuickTableCalcType, having type QuickTableCalcCommandType
	    ParameterId["QuickTableCalcType"] = "quickTableCalcType";
	    // DPI_TableCalcCommandType, having type TableCalcCommandType
	    ParameterId["TableCalcCommandType"] = "tableCalcCommandType";
	    // DPI_TableCalcAddressType, having type TableCalcAddressCommandType
	    ParameterId["TableCalcAddressType"] = "tableCalcAddressType";
	    // DPI_MarkLayoutPrimitive, having type Primitive
	    ParameterId["MarkLayoutPrimitive"] = "markLayoutPrimitive";
	    // DPI_MarkLayoutVizType, having type VizType
	    ParameterId["MarkLayoutVizType"] = "markLayoutVizType";
	    // DPI_MarkAlignment, having type MarkAlignment
	    ParameterId["MarkAlignment"] = "markAlignment";
	    // DPI_ModifyZoneZOrderType, having type ModifyZoneZOrderCommandType
	    ParameterId["ModifyZoneZOrderType"] = "modifyZoneZOrderType";
	    // DPI_TextRegionHAlign, having type TextRegionHAlign
	    ParameterId["TextRegionHAlign"] = "halign";
	    // DPI_TextRegionVAlign, having type TextRegionVAlign
	    ParameterId["TextRegionVAlign"] = "valign";
	    // DPI_PathElement, having type PathElement
	    ParameterId["PathElement"] = "pathElement";
	    // DPI_PathElements, having type PathElement[]
	    ParameterId["PathElements"] = "pathElements";
	    // DPI_RenderMode, having type RenderMode
	    ParameterId["RenderMode"] = "renderMode";
	    // DPI_FontStyle, having type TableauFontStyle
	    ParameterId["FontStyle"] = "fontStyle";
	    // DPI_FontWeight, having type FontWeight
	    ParameterId["FontWeight"] = "fontWeight";
	    // DPI_TextDecoration, having type TextDecoration
	    ParameterId["TextDecoration"] = "textDecoration";
	    // DPI_BorderStyle, having type BorderStyle
	    ParameterId["BorderStyle"] = "borderStyle";
	    // DPI_BorderStyleTop, having type BorderStyle
	    ParameterId["BorderStyleTop"] = "borderStyleTop";
	    // DPI_BorderStyleRight, having type BorderStyle
	    ParameterId["BorderStyleRight"] = "borderStyleRight";
	    // DPI_BorderStyleBottom, having type BorderStyle
	    ParameterId["BorderStyleBottom"] = "borderStyleBottom";
	    // DPI_BorderStyleLeft, having type BorderStyle
	    ParameterId["BorderStyleLeft"] = "borderStyleLeft";
	    // DPI_FloatingToolbarVisibility, having type FloatingToolbarVisibility
	    ParameterId["FloatingToolbarVisibility"] = "floatingToolbarVisibility";
	    // DPI_GeoSearchVisibility, having type GeoSearchVisibility
	    ParameterId["GeoSearchVisibility"] = "geographicSearchVisibility";
	    // DPI_MapScaleVisibility, having type MapScaleVisibility
	    ParameterId["MapScaleVisibility"] = "mapScaleVisibility";
	    // DPI_VizNavigationSetting, having type VizNavigationSetting
	    ParameterId["VizNavigationSetting"] = "vizNavigationSetting";
	    // DPI_AutoDrillVisibility, having type AutoDrillVisibility
	    ParameterId["AutoDrillVisibility"] = "autoDrillVisibility";
	    // DPI_ClientUIMetricType, having type ClientUIMetricType
	    ParameterId["ClientUIMetricType"] = "clientUiMetricType";
	    // DPI_SheetScrollDirection, having type SheetScrollDirection
	    ParameterId["SheetScrollDirection"] = "sheetScrollDirection";
	    // DPI_SizeMode, having type SizeMode
	    ParameterId["SizeMode"] = "sizeMode";
	    // DPI_PerspectiveAggregate, having type PerspectiveAggregate
	    ParameterId["PerspectiveAggregate"] = "perspectiveAggregation";
	    // DPI_StyleAttribute, having type StyleAttribute
	    ParameterId["StyleAttribute"] = "styleAttribute";
	    // DPI_StyleAttributes, having type StyleAttribute[]
	    ParameterId["StyleAttributes"] = "styleAttributes";
	    // DPI_StyleElement, having type StyleElement
	    ParameterId["StyleElement"] = "styleElement";
	    // DPI_StyleDataClass, having type StyleDataClass
	    ParameterId["StyleDataClass"] = "styleClass";
	    // DPI_StyleFieldScope, having type StyleFieldScope
	    ParameterId["StyleFieldScope"] = "styleScope";
	    // DPI_FormatControlType, having type FormatControlType
	    ParameterId["FormatControlType"] = "formatType";
	    // DPI_LineInterpolationMode, having type LineInterpolationMode
	    ParameterId["LineInterpolationMode"] = "lineInterpolationMode";
	    // DPI_MarkersMode, having type MarkMarkersMode
	    ParameterId["MarkersMode"] = "markersMode";
	    // DPI_AppConfigEnum, having type AppConfigEnum
	    ParameterId["AppConfigEnum"] = "appConfigEnum";
	    // DPI_ColorPaletteType, having type ColorPaletteType
	    ParameterId["ColorPaletteType"] = "colorPaletteType";
	    // DPI_ExtractType, having type ExtractType
	    ParameterId["ExtractType"] = "extractType";
	    // DPI_ActivityDisposition, having type ActivityDisposition
	    ParameterId["ActivityDisposition"] = "activityDisposition";
	    // DPI_ActivityResult, having type ActivityResult
	    ParameterId["ActivityResult"] = "activityResult";
	    // DPI_TooltipMode, having type TooltipMode
	    ParameterId["TooltipMode"] = "tooltipMode";
	    // DPI_RuntimeOutput, having type RuntimeOutput
	    ParameterId["RuntimeOutput"] = "runtimeOutput";
	    // DPI_AnalyticsObjectType, having type AnalyticsObjectType
	    ParameterId["AnalyticsObjectType"] = "analyticsObjectType";
	    // DPI_UIAutomationStatus, having type UIAutomationCommandStatus
	    ParameterId["UIAutomationStatus"] = "uiAutomationStatus";
	    // DPI_TableViewDataType, having type TableViewDataType
	    ParameterId["TableViewDataType"] = "tableViewerDataType";
	    // DPI_UnitsFormat, having type UnitsFormatEnum
	    ParameterId["UnitsFormat"] = "unitsFormat";
	    // DPI_FilterLimitType, having type LimitType
	    ParameterId["FilterLimitType"] = "filterLimitType";
	    // DPI_DistributionSelectedType, having type DistributionType
	    ParameterId["DistributionSelectedType"] = "distributionSelectedType";
	    // DPI_DistributionType, having type DistributionType
	    ParameterId["DistributionType"] = "distributionType";
	    // DPI_TranslatedDistributionType, having type TranslatedDistributionTypePresModel
	    ParameterId["TranslatedDistributionType"] = "translatedDistributionType";
	    // DPI_TranslatedDistributionTypes, having type TranslatedDistributionTypePresModel[]
	    ParameterId["TranslatedDistributionTypes"] = "translatedDistributionTypes";
	    // DPI_RefLineFormulaGroup, having type FormulaGroup
	    ParameterId["RefLineFormulaGroup"] = "reflineFormulaGroup";
	    // DPI_ReferenceLineScopeType, having type ScopeType
	    ParameterId["ReferenceLineScopeType"] = "referenceLineScopeType";
	    // DPI_StDevType, having type StDevType
	    ParameterId["StDevType"] = "stdevType";
	    // DPI_ShowBounds, having type ShowBounds
	    ParameterId["ShowBounds"] = "showBounds";
	    // DPI_BoxplotWhiskerType, having type BoxplotWhiskerType
	    ParameterId["BoxplotWhiskerType"] = "boxplotWhiskerType";
	    // DPI_ReferenceLineLabelType, having type LabelType
	    ParameterId["ReferenceLineLabelType"] = "referenceLineLabelType";
	    // DPI_PairedReferenceLineLabelType, having type LabelType
	    ParameterId["PairedReferenceLineLabelType"] = "pairedReferenceLineLabelType";
	    // DPI_ConfidenceIntervalSelectedState, having type ConfidenceIntervalState
	    ParameterId["ConfidenceIntervalSelectedState"] = "confidenceIntervalSelectedState";
	    // DPI_ConfidenceIntervalState, having type ConfidenceIntervalState
	    ParameterId["ConfidenceIntervalState"] = "confidenceIntervalState";
	    // DPI_TranslatedLabelType, having type TranslatedLabelTypePresModel
	    ParameterId["TranslatedLabelType"] = "translatedLabelType";
	    // DPI_ReferenceLineValidLabelTypes, having type TranslatedLabelTypePresModel[]
	    ParameterId["ReferenceLineValidLabelTypes"] = "validReferenceLineLabelTypes";
	    // DPI_ReferenceLineFormulaType, having type FormulaType
	    ParameterId["ReferenceLineFormulaType"] = "referenceLineFormulaType";
	    // DPI_PairedReferenceLineFormulaType, having type FormulaType
	    ParameterId["PairedReferenceLineFormulaType"] = "pairedReferenceLineFormulaType";
	    // DPI_TranslatedFormulaType, having type TranslatedFormulaTypePresModel
	    ParameterId["TranslatedFormulaType"] = "translatedFormulaType";
	    // DPI_ReferenceLineValidFormulaTypes, having type TranslatedFormulaTypePresModel[]
	    ParameterId["ReferenceLineValidFormulaTypes"] = "validReferenceLineFormulaTypes";
	    // DPI_ReferenceLineValidPairedFormulaTypes, having type TranslatedFormulaTypePresModel[]
	    ParameterId["ReferenceLineValidPairedFormulaTypes"] = "validReferenceLinePairedFormulaTypes";
	    // DPI_TranslatedConfidenceIntervalState, having type TranslatedConfidenceIntervalStatePresModel
	    ParameterId["TranslatedConfidenceIntervalState"] = "translatedConfidenceIntervalState";
	    // DPI_TranslatedConfidenceIntervalStates, having type TranslatedConfidenceIntervalStatePresModel[]
	    ParameterId["TranslatedConfidenceIntervalStates"] = "translatedConfidenceIntervalStates";
	    // DPI_TranslatedStDevType, having type TranslatedStDevTypePresModel
	    ParameterId["TranslatedStDevType"] = "translatedStdevType";
	    // DPI_TranslatedStDevTypes, having type TranslatedStDevTypePresModel[]
	    ParameterId["TranslatedStDevTypes"] = "translatedStdevTypes";
	    // DPI_ReferenceLineLODCalcType, having type LODCalcType
	    ParameterId["ReferenceLineLODCalcType"] = "referenceLineLodCalcType";
	    // DPI_ValueDomainType, having type ValueDomainType
	    ParameterId["ValueDomainType"] = "valueDomainType";
	    // DPI_ValueDomainTypes, having type ValueDomainType[]
	    ParameterId["ValueDomainTypes"] = "valueDomainTypes";
	    // DPI_OperationType, having type OperationType
	    ParameterId["OperationType"] = "operationType";
	    // DPI_OperationTypes, having type OperationType[]
	    ParameterId["OperationTypes"] = "operationTypes";
	    // DPI_ConnectionTypeCategory, having type ConnectionTypeCategory
	    ParameterId["ConnectionTypeCategory"] = "connectionTypeCategory";
	    // DPI_ConnectionTypeGroup, having type ConnectionTypeGroup
	    ParameterId["ConnectionTypeGroup"] = "connectionTypeGroup";
	    // DPI_CommandRedirectType, having type CommandRedirectType
	    ParameterId["CommandRedirectType"] = "commandRedirectType";
	    // DPI_CustomSplitMode, having type SplitMode
	    ParameterId["CustomSplitMode"] = "customSplitMode";
	    // DPI_CustomSplitSeparatorType, having type SeparatorType
	    ParameterId["CustomSplitSeparatorType"] = "customSplitSeparatorType";
	    // DPI_LevelSelectionState, having type LevelSelectionState
	    ParameterId["LevelSelectionState"] = "levelSelectionState";
	    // DPI_LevelSelectionStates, having type LevelSelectionState[]
	    ParameterId["LevelSelectionStates"] = "levelSelectionStates";
	    // DPI_SourceDestIcon, having type SourceDestIcon
	    ParameterId["SourceDestIcon"] = "sourceDestIcon";
	    // DPI_LegendLayout, having type LegendLayout
	    ParameterId["LegendLayout"] = "pageLegendLayout";
	    // DPI_ImagesEditResultCode, having type ImagesEditResultCode
	    ParameterId["ImagesEditResultCode"] = "imagesEditResultCode";
	    // DPI_CalculationContext, having type CalculationContext
	    ParameterId["CalculationContext"] = "calculationContext";
	    // DPI_WorkgroupPublishErrorType, having type WorkgroupPublishErrorType
	    ParameterId["WorkgroupPublishErrorType"] = "workgroupPublishErrorType";
	    // DPI_IsParameter, having type TriBool
	    ParameterId["IsParameter"] = "isParameter";
	    // DPI_AddressingState, having type WidgetState
	    ParameterId["AddressingState"] = "addressingState";
	    // DPI_AllPagesState, having type WidgetState
	    ParameterId["AllPagesState"] = "allPagesState";
	    // DPI_AtTheLevelState, having type WidgetState
	    ParameterId["AtTheLevelState"] = "atTheLevelState";
	    // DPI_ComputeCompoundedRateState, having type WidgetState
	    ParameterId["ComputeCompoundedRateState"] = "computeCompoundedRateState";
	    // DPI_CustomNullIfIncompleteState, having type WidgetState
	    ParameterId["CustomNullIfIncompleteState"] = "customNullIfIncompleteState";
	    // DPI_NestedCalcsState, having type WidgetState
	    ParameterId["NestedCalcsState"] = "nestedCalcsState";
	    // DPI_RankTypeState, having type WidgetState
	    ParameterId["RankTypeState"] = "rankTypeState";
	    // DPI_ReferenceOptionsState, having type WidgetState
	    ParameterId["ReferenceOptionsState"] = "referenceOptionsState";
	    // DPI_RestartEveryState, having type WidgetState
	    ParameterId["RestartEveryState"] = "restartEveryState";
	    // DPI_SortAggState, having type WidgetState
	    ParameterId["SortAggState"] = "sortAggState";
	    // DPI_SortState, having type WidgetState
	    ParameterId["SortState"] = "sortState";
	    // DPI_TableCalcTypeState, having type WidgetState
	    ParameterId["TableCalcTypeState"] = "tableCalcTypeState";
	    // DPI_TableCalcAssistanceWidgetState, having type WidgetState
	    ParameterId["TableCalcAssistanceWidgetState"] = "tableCalcAssistanceWidgetState";
	    // DPI_CalcNestingLevel, having type CalcNestingLevel
	    ParameterId["CalcNestingLevel"] = "calcNestingLevel";
	    // DPI_DataProviderType, having type DataProviderType
	    ParameterId["DataProviderType"] = "dataProviderType";
	    // DPI_HeuristicCommandReinterpretation, having type HeuristicCommandReinterpretation
	    ParameterId["HeuristicCommandReinterpretation"] = "heuristicCommandReinterpretation";
	    // DPI_ExtractRefreshStatus, having type ExtractRefreshStatus
	    ParameterId["ExtractRefreshStatus"] = "extractRefreshStatus";
	    // DPI_RichTextEditorWidgetKey, having type RichTextEditorWidgetKey
	    ParameterId["RichTextEditorWidgetKey"] = "richTextEditorWidgetKey";
	    // DPI_RichTextWidgetKeys, having type RichTextEditorWidgetKey[]
	    ParameterId["RichTextWidgetKeys"] = "richTextWidgetKeys";
	    // DPI_TypeOfFormatItem, having type TypeOfFormatItem
	    ParameterId["TypeOfFormatItem"] = "typeOfFormatItem";
	    // DPI_TypeOfFormatContainer, having type TypeOfFormatContainer
	    ParameterId["TypeOfFormatContainer"] = "typeOfFormatContainer";
	    // DPI_TypeOfFormatControl, having type TypeOfFormatControl
	    ParameterId["TypeOfFormatControl"] = "typeOfFormatControl";
	    // DPI_FormatWidgetKey, having type FormatWidgetKey
	    ParameterId["FormatWidgetKey"] = "formatWidgetKey";
	    // DPI_ColorSwatchType, having type ColorSwatchType
	    ParameterId["ColorSwatchType"] = "formatColorSwatchType";
	    // DPI_PickerType, having type PickerType
	    ParameterId["PickerType"] = "pickerType";
	    // DPI_ExtractHistoryRefreshType, having type RefreshType
	    ParameterId["ExtractHistoryRefreshType"] = "extractHistoryRefreshTypeEnum";
	    // DPI_AxisFoldState, having type AxisFoldState
	    ParameterId["AxisFoldState"] = "axisFoldState";
	    // DPI_TickMarkSpacingUnits, having type TickSpacingUnits
	    ParameterId["TickMarkSpacingUnits"] = "tickSpacingUnits";
	    // DPI_TickMarkState, having type TickMarkState
	    ParameterId["TickMarkState"] = "tickMarkState";
	    // DPI_AxisRangeType, having type AxisRangeType
	    ParameterId["AxisRangeType"] = "axisRangeType";
	    // DPI_ScaleType, having type ScaleType
	    ParameterId["ScaleType"] = "scaleType";
	    // DPI_DashboardDeviceLayout, having type DashboardDeviceLayout
	    ParameterId["DashboardDeviceLayout"] = "dashboardDeviceLayout";
	    // DPI_ActivateDeviceLayout, having type DashboardDeviceLayout
	    ParameterId["ActivateDeviceLayout"] = "activateDeviceLayout";
	    // DPI_DashboardDeviceLayouts, having type DashboardDeviceLayout[]
	    ParameterId["DashboardDeviceLayouts"] = "dashboardDeviceLayouts";
	    // DPI_DeviceSource, having type DeviceSource
	    ParameterId["DeviceSource"] = "deviceSource";
	    // DPI_DashboardSizingDimension, having type DashboardSizingDimension
	    ParameterId["DashboardSizingDimension"] = "dashboardSizingDimension";
	    // DPI_GridOverlayMode, having type GridOverlayMode
	    ParameterId["GridOverlayMode"] = "gridOverlayMode";
	    // DPI_DashboardSizingMode, having type DashboardSizingMode
	    ParameterId["DashboardSizingMode"] = "dashboardSizingMode";
	    // DPI_FlipboardNavType, having type FlipboardNavType
	    ParameterId["FlipboardNavType"] = "flipboardNavType";
	    // DPI_FieldPickerDialogUseCase, having type FieldPickerDialogUseCase
	    ParameterId["FieldPickerDialogUseCase"] = "fieldPickerDialogUseCase";
	    // DPI_StartOfWeekEnum, having type SOWValue
	    ParameterId["StartOfWeekEnum"] = "startOfWeekEnum";
	    // DPI_StartOfFiscalYear, having type FYSValues
	    ParameterId["StartOfFiscalYear"] = "startOfFiscalYear";
	    // DPI_TotalsInclusionValue, having type TotalsInclusion
	    ParameterId["TotalsInclusionValue"] = "totalsInclusionValue";
	    // DPI_FormatCode, having type FormatCode
	    ParameterId["FormatCode"] = "formatCode";
	    // DPI_FindType, having type FindType
	    ParameterId["FindType"] = "findType";
	    // DPI_PerspectiveType, having type PerspectiveType
	    ParameterId["PerspectiveType"] = "perspectiveType";
	    // DPI_GeometryType, having type GeometryType
	    ParameterId["GeometryType"] = "geometryType";
	    // DPI_PaneLabelComposition, having type PaneLabelComposition
	    ParameterId["PaneLabelComposition"] = "paneLabelComposition";
	    // DPI_WarningType, having type WarningType
	    ParameterId["WarningType"] = "warningType";
	    // DPI_UIMode, having type WorkbookUIMode
	    ParameterId["UIMode"] = "uiMode";
	    // DPI_MenuItemId, having type TopLevelMenuItem
	    ParameterId["MenuItemId"] = "menuItemId";
	    // DPI_CommandReturn, having type object
	    ParameterId["CommandReturn"] = "commandReturn";
	    // DPI_LegacyPresModel, having type object
	    ParameterId["LegacyPresModel"] = "legacyPresModel";
	    // DPI_PresentationModel, having type object
	    ParameterId["PresentationModel"] = "presModelHolder";
	    // DPI_Event, having type object
	    ParameterId["Event"] = "eventContainer";
	    // DPI_LineStyle, having type Array
	    ParameterId["LineStyle"] = "lineStyle";
	    // DPI_StrokeStyle, having type Array
	    ParameterId["StrokeStyle"] = "strokeStyle";
	    // DPI_Schema, having type Array
	    ParameterId["Schema"] = "schema";
	    // DPI_StartTuple, having type Array
	    ParameterId["StartTuple"] = "startTuple";
	    // DPI_EndTuple, having type Array
	    ParameterId["EndTuple"] = "endTuple";
	    // DPI_Tuple, having type Array
	    ParameterId["Tuple"] = "tuple";
	    // DPI_Tuples, having type Array[]
	    ParameterId["Tuples"] = "tuples";
	    // DPI_CustomDomainTuples, having type Array[]
	    ParameterId["CustomDomainTuples"] = "customDomainTuples";
	    // DPI_UpdatedTuples, having type Array[]
	    ParameterId["UpdatedTuples"] = "updatedTuples";
	    // DPI_Table, having type Array
	    ParameterId["Table"] = "table";
	    // DPI_AliasedValue, having type Array
	    ParameterId["AliasedValue"] = "valueAlias";
	    // DPI_FirstAliasedValue, having type Array
	    ParameterId["FirstAliasedValue"] = "firstAlisedValue";
	    // DPI_MaximumRange, having type Array
	    ParameterId["MaximumRange"] = "maximumRangeValue";
	    // DPI_MinimumRange, having type Array
	    ParameterId["MinimumRange"] = "minimumRangeValue";
	    // DPI_SecondAliasedValue, having type Array
	    ParameterId["SecondAliasedValue"] = "secondAlisedValue";
	    // DPI_AliasedSelectionList, having type Array[]
	    ParameterId["AliasedSelectionList"] = "aliasedSelectionList";
	    // DPI_AliasedValues, having type Array[]
	    ParameterId["AliasedValues"] = "valuesAliases";
	    // DPI_VerboseAliasedRangeMax, having type Array
	    ParameterId["VerboseAliasedRangeMax"] = "verboseAliasedRangeMax";
	    // DPI_VerboseAliasedValue, having type Array
	    ParameterId["VerboseAliasedValue"] = "verboseAliasedValue";
	    // DPI_MultiBucket, having type MultiBucket
	    ParameterId["MultiBucket"] = "xValues";
	    // DPI_PageName, having type PageName
	    ParameterId["PageName"] = "pageName";
	    // DPI_Selector, having type object
	    ParameterId["Selector"] = "selector";
	    // DPI_PaneId, having type object
	    ParameterId["PaneId"] = "paneId";
	    // DPI_PaneIds, having type PaneId[]
	    ParameterId["PaneIds"] = "paneIds";
	    // DPI_ImageRegionInfo, having type object
	    ParameterId["ImageRegionInfo"] = "vizRegionRect";
	    // DPI_ImageRegionInfoList, having type object[]
	    ParameterId["ImageRegionInfoList"] = "vizRegionRectList";
	    // DPI_VisualID, having type VisualID
	    ParameterId["VisualID"] = "visualId";
	    // DPI_VisualIDPM, having type VisualIDPresModel
	    ParameterId["VisualIDPM"] = "visualIdPresModel";
	    // DPI_InvalidSheets, having type VisualIDPresModel[]
	    ParameterId["InvalidSheets"] = "invalidSheets";
	    // DPI_VisualIDPMs, having type VisualIDPresModel[]
	    ParameterId["VisualIDPMs"] = "visualIds";
	    // DPI_SheetPathPM, having type SheetPathPresModel
	    ParameterId["SheetPathPM"] = "sheetPath";
	    // DPI_CapturedSheetPM, having type SheetPathPresModel
	    ParameterId["CapturedSheetPM"] = "capturedSheetPm";
	    // DPI_CurrentSheetPM, having type SheetPathPresModel
	    ParameterId["CurrentSheetPM"] = "currentSheetPm";
	    // DPI_DashboardPM, having type SheetPathPresModel
	    ParameterId["DashboardPM"] = "dashboardPm";
	    // DPI_NewSheetPM, having type SheetPathPresModel
	    ParameterId["NewSheetPM"] = "newSheetPm";
	    // DPI_SheetNamePM, having type SheetPathPresModel
	    ParameterId["SheetNamePM"] = "sheetNamePm";
	    // DPI_SheetPM, having type SheetPathPresModel
	    ParameterId["SheetPM"] = "sheetPm";
	    // DPI_SourceDashboardPM, having type SheetPathPresModel
	    ParameterId["SourceDashboardPM"] = "sourceDashboardPm";
	    // DPI_SourceSheetPM, having type SheetPathPresModel
	    ParameterId["SourceSheetPM"] = "sourceSheetPm";
	    // DPI_TargetSheetPM, having type SheetPathPresModel
	    ParameterId["TargetSheetPM"] = "targetSheetPm";
	    // DPI_WorksheetPM, having type SheetPathPresModel
	    ParameterId["WorksheetPM"] = "worksheetPm";
	    // DPI_ModifiedSheets, having type SheetPathPresModel[]
	    ParameterId["ModifiedSheets"] = "modifiedSheets";
	    // DPI_DataColumn, having type DataColumnPresModel
	    ParameterId["DataColumn"] = "dataColumn";
	    // DPI_DataColumns, having type DataColumnPresModel[]
	    ParameterId["DataColumns"] = "dataColumns";
	    // DPI_Addresses, having type DataColumnPresModel[]
	    ParameterId["Addresses"] = "addresses";
	    // DPI_EncodingColumns, having type Dictionary(of DataColumnPresModel)
	    ParameterId["EncodingColumns"] = "encodingColumns";
	    // DPI_TextRunColumns, having type Dictionary(of DataColumnPresModel)
	    ParameterId["TextRunColumns"] = "textRunColumns";
	    // DPI_TextStyleColumns, having type Dictionary(of DataColumnPresModel)
	    ParameterId["TextStyleColumns"] = "textStyleColumns";
	    // DPI_NamedDataColumn, having type NamedDataColumnPresModel
	    ParameterId["NamedDataColumn"] = "namedDataColumn";
	    // DPI_NamedDataColumns, having type NamedDataColumnPresModel[]
	    ParameterId["NamedDataColumns"] = "namedDataColumns";
	    // DPI_DataTable, having type DataTablePresModel
	    ParameterId["DataTable"] = "dataTable";
	    // DPI_ActionSpecification, having type None
	    ParameterId["ActionSpecification"] = "actionSpec";
	    // DPI_Column, having type Column
	    ParameterId["Column"] = "columnContext";
	    // DPI_SetFunction, having type SetFunction
	    ParameterId["SetFunction"] = "setFunction";
	    // DPI_SetFunctions, having type SetFunctions
	    ParameterId["SetFunctions"] = "setFunctions";
	    // DPI_VisualProfileShowMe, having type VisualProfileShowMe
	    ParameterId["VisualProfileShowMe"] = "vpsm";
	    // DPI_DataSourcePtr, having type DataSource
	    ParameterId["DataSourcePtr"] = "datasourcePtr";
	    // DPI_WorkgroupConnection, having type WorkgroupConnection
	    ParameterId["WorkgroupConnection"] = "workgroupConnection";
	    // DPI_Authenticator, having type AuthenticatorRawPtr
	    ParameterId["Authenticator"] = "authenticator";
	    // DPI_UpgradeAttr, having type UpgradeAttr
	    ParameterId["UpgradeAttr"] = "upgradeAttr";
	    // DPI_ExtractAttr, having type ExtractAttr
	    ParameterId["ExtractAttr"] = "extractAttr";
	    // DPI_RefreshAttr, having type RefreshAttr
	    ParameterId["RefreshAttr"] = "refreshAttr";
	    // DPI_ContextSpecification, having type ContextSpecification
	    ParameterId["ContextSpecification"] = "contextSpecification";
	    // DPI_SchemaViewerSelector, having type SchemaViewerSelectorPtr
	    ParameterId["SchemaViewerSelector"] = "schemaViewerSelector";
	    // DPI_LegendItems, having type MultiBuckets
	    ParameterId["LegendItems"] = "legendItems";
	    // DPI_LegendItem, having type MultiBucket
	    ParameterId["LegendItem"] = "legendItem";
	    // DPI_SourceItem, having type MultiBucket
	    ParameterId["SourceItem"] = "sourceItem";
	    // DPI_DestItem, having type MultiBucket
	    ParameterId["DestItem"] = "destItem";
	    // DPI_IQuickSortState, having type IQuickSortState
	    ParameterId["IQuickSortState"] = "quickSortState";
	    // DPI_AppBuildDate, having type DateTime
	    ParameterId["AppBuildDate"] = "appBuildDate";
	    // DPI_ForecastDateRangeEnd, having type DateTime
	    ParameterId["ForecastDateRangeEnd"] = "forecastDateRangeEnd";
	    // DPI_ForecastDateRangeStart, having type DateTime
	    ParameterId["ForecastDateRangeStart"] = "forecastDateRangeStart";
	    // DPI_LastModified, having type DateTime
	    ParameterId["LastModified"] = "lastModified";
	    // DPI_SearchDomainPtr, having type MultiDomain
	    ParameterId["SearchDomainPtr"] = "searchDomainPtr";
	    // DPI_ResultsDomainPtr, having type MultiDomain
	    ParameterId["ResultsDomainPtr"] = "resultsDomainPtr";
	    // DPI_Actions, having type object
	    ParameterId["Actions"] = "actions";
	    // DPI_SRCommands, having type object
	    ParameterId["SRCommands"] = "selectionRelaxationCommands";
	    // DPI_Commands, having type object
	    ParameterId["Commands"] = "commands";
	    // DPI_DataTypeCommands, having type object
	    ParameterId["DataTypeCommands"] = "datatypeCommands";
	    // DPI_MultiSelectCommands, having type object
	    ParameterId["MultiSelectCommands"] = "multiselectCommands";
	    // DPI_NonVizCommands, having type object
	    ParameterId["NonVizCommands"] = "nonVizCommands";
	    // DPI_QuickFilterCommands, having type object
	    ParameterId["QuickFilterCommands"] = "quickFilterCommands";
	    // DPI_ShowMeCommands, having type object
	    ParameterId["ShowMeCommands"] = "showMeCommands";
	    // DPI_SortIndicatorMenu, having type object
	    ParameterId["SortIndicatorMenu"] = "sortIndicatorMenu";
	    // DPI_StandardCommands, having type object
	    ParameterId["StandardCommands"] = "standardCommands";
	    // DPI_VizCommands, having type object
	    ParameterId["VizCommands"] = "vizCommands";
	    // DPI_ZoneChromeCommands, having type object
	    ParameterId["ZoneChromeCommands"] = "zoneChromeCommands";
	    // DPI_CommandItem, having type CommandsItem
	    ParameterId["CommandItem"] = "commandItem";
	    // DPI_CommandItems, having type CommandsItem[]
	    ParameterId["CommandItems"] = "commandItems";
	    // DPI_Command, having type SimpleCommandsPresModel
	    ParameterId["Command"] = "simpleCommandModel";
	    // DPI_AddCommand, having type SimpleCommandsPresModel
	    ParameterId["AddCommand"] = "addSimpleCommandModel";
	    // DPI_RemoveCommand, having type SimpleCommandsPresModel
	    ParameterId["RemoveCommand"] = "removeSimpleCommandModel";
	    // DPI_AcceptCommand, having type SimpleCommandsPresModel
	    ParameterId["AcceptCommand"] = "acceptSimpleCommandModel";
	    // DPI_DeclineCommand, having type SimpleCommandsPresModel
	    ParameterId["DeclineCommand"] = "declineSimpleCommandModel";
	    // DPI_DropCommand, having type SimpleCommandsPresModel
	    ParameterId["DropCommand"] = "dropCommandModel";
	    // DPI_EditCaptionCommand, having type SimpleCommandsPresModel
	    ParameterId["EditCaptionCommand"] = "editCaptionCommandModel";
	    // DPI_FontCommand, having type SimpleCommandsPresModel
	    ParameterId["FontCommand"] = "fontCommandModel";
	    // DPI_LineStyleCommand, having type SimpleCommandsPresModel
	    ParameterId["LineStyleCommand"] = "lineStyleCommandModel";
	    // DPI_FormatCommand, having type SimpleCommandsPresModel
	    ParameterId["FormatCommand"] = "formatCommandModel";
	    // DPI_DestructorCommand, having type SimpleCommandsPresModel
	    ParameterId["DestructorCommand"] = "destructorCommand";
	    // DPI_ClearFormatCommand, having type SimpleCommandsPresModel
	    ParameterId["ClearFormatCommand"] = "clearFormatCommandModel";
	    // DPI_RichTextCommand, having type SimpleCommandsPresModel
	    ParameterId["RichTextCommand"] = "richTextCommandModel";
	    // DPI_SortIndicatorCommand, having type SimpleCommandsPresModel
	    ParameterId["SortIndicatorCommand"] = "sortIndicatorCommand";
	    // DPI_ReleaseStoreCommand, having type SimpleCommandsPresModel
	    ParameterId["ReleaseStoreCommand"] = "releaseStoreCommand";
	    // DPI_ConfirmationCommand, having type SimpleCommandsPresModel
	    ParameterId["ConfirmationCommand"] = "confirmationCommand";
	    // DPI_CommandList, having type SimpleCommandsPresModel[]
	    ParameterId["CommandList"] = "commandList";
	    // DPI_ParameterCtrl, having type ParameterCtrlPresModel
	    ParameterId["ParameterCtrl"] = "parameterControl";
	    // DPI_ParameterCtrls, having type ParameterCtrlPresModel[]
	    ParameterId["ParameterCtrls"] = "parameterControls";
	    // DPI_PageModel, having type PagePresModel
	    ParameterId["PageModel"] = "pageModel";
	    // DPI_PageTrailOptions, having type PageTrailOptionsPresModel
	    ParameterId["PageTrailOptions"] = "pageTrailOptions";
	    // DPI_Field, having type FieldPresModel
	    ParameterId["Field"] = "field";
	    // DPI_FieldList, having type FieldPresModel[]
	    ParameterId["FieldList"] = "fieldList";
	    // DPI_DimensionsFieldList, having type FieldPresModel[]
	    ParameterId["DimensionsFieldList"] = "dimensionsFieldList";
	    // DPI_MeasuresFieldList, having type FieldPresModel[]
	    ParameterId["MeasuresFieldList"] = "measuresFieldList";
	    // DPI_SetsFieldList, having type FieldPresModel[]
	    ParameterId["SetsFieldList"] = "setsFieldList";
	    // DPI_ParametersFieldList, having type FieldPresModel[]
	    ParameterId["ParametersFieldList"] = "parametersFieldList";
	    // DPI_FieldColumn, having type FieldColumnPresModel
	    ParameterId["FieldColumn"] = "column";
	    // DPI_FieldColumnList, having type FieldColumnPresModel[]
	    ParameterId["FieldColumnList"] = "columnList";
	    // DPI_StructuredMeasure, having type StructuredMeasurePresModel
	    ParameterId["StructuredMeasure"] = "structuredMeasure";
	    // DPI_StructuredMeasureList, having type StructuredMeasurePresModel[]
	    ParameterId["StructuredMeasureList"] = "structuredMeasureList";
	    // DPI_Level, having type LevelPresModel
	    ParameterId["Level"] = "level";
	    // DPI_Parameter, having type ParameterPresModel
	    ParameterId["Parameter"] = "parameter";
	    // DPI_BaseDimension, having type BaseDimensionPresModel
	    ParameterId["BaseDimension"] = "baseDimension";
	    // DPI_Dimension, having type DimensionPresModel
	    ParameterId["Dimension"] = "dimension";
	    // DPI_AttributeDimensionList, having type DimensionPresModel[]
	    ParameterId["AttributeDimensionList"] = "attributeDimensionList";
	    // DPI_AttributeDimension, having type AttributeDimensionPresModel
	    ParameterId["AttributeDimension"] = "attributeDimension";
	    // DPI_AttributeAttributeDimensionList, having type AttributeDimensionPresModel[]
	    ParameterId["AttributeAttributeDimensionList"] = "attributeAttributeDimensionList";
	    // DPI_StandardDimension, having type StandardDimensionPresModel
	    ParameterId["StandardDimension"] = "standardDimension";
	    // DPI_RelationalTable, having type RelationalTablePresModel
	    ParameterId["RelationalTable"] = "relationalTable";
	    // DPI_DrillPath, having type DrillPathPresModel
	    ParameterId["DrillPath"] = "drillPath";
	    // DPI_FieldFolder, having type FieldFolderPresModel
	    ParameterId["FieldFolder"] = "fieldFolder";
	    // DPI_Group, having type GroupPresModel
	    ParameterId["Group"] = "group";
	    // DPI_UserDefinedAttributeList, having type GroupPresModel[]
	    ParameterId["UserDefinedAttributeList"] = "userDefinedAttributeList";
	    // DPI_Hierarchy, having type HierarchyPresModel
	    ParameterId["Hierarchy"] = "hierarchy";
	    // DPI_HierarchyList, having type HierarchyPresModel[]
	    ParameterId["HierarchyList"] = "hierarchyList";
	    // DPI_HierarchyMemberSelectedState, having type HierarchySelect_MemberSelectedStatePresModel
	    ParameterId["HierarchyMemberSelectedState"] = "hierarchyMemberSelectedState";
	    // DPI_HierarchySelectionChanges, having type HierarchySelect_MemberSelectedStatePresModel[]
	    ParameterId["HierarchySelectionChanges"] = "hierarchySelectionChanges";
	    // DPI_DisplayFolder, having type DisplayFolderPresModel
	    ParameterId["DisplayFolder"] = "displayFolder";
	    // DPI_DisplayFolderList, having type DisplayFolderPresModel[]
	    ParameterId["DisplayFolderList"] = "displayFolderList";
	    // DPI_DataSourceLayout, having type DataSourceLayoutPresModel
	    ParameterId["DataSourceLayout"] = "dataSourceLayout";
	    // DPI_BaseDataSource, having type BaseDataSourcePresModel
	    ParameterId["BaseDataSource"] = "baseDataSource";
	    // DPI_BaseDataSources, having type Dictionary(of BaseDataSourcePresModel)
	    ParameterId["BaseDataSources"] = "baseDataSources";
	    // DPI_DataSource, having type DataSourcePresModel
	    ParameterId["DataSource"] = "dataSource";
	    // DPI_DataSources, having type Dictionary(of DataSourcePresModel)
	    ParameterId["DataSources"] = "dataSources";
	    // DPI_SchemaViewerDataSource, having type SchemaViewerDataSourcePresModel
	    ParameterId["SchemaViewerDataSource"] = "schemaViewerDataSource";
	    // DPI_SchemaViewerParameterDataSource, having type SchemaViewerDataSourcePresModel
	    ParameterId["SchemaViewerParameterDataSource"] = "schemaViewerParameterDataSource";
	    // DPI_SchemaViewerDataSources, having type Dictionary(of SchemaViewerDataSourcePresModel)
	    ParameterId["SchemaViewerDataSources"] = "schemaViewerDataSources";
	    // DPI_BaseDataSchema, having type BaseDataSchemaPresModel
	    ParameterId["BaseDataSchema"] = "baseDataSchema";
	    // DPI_DataSchema, having type DataSchemaPresModel
	    ParameterId["DataSchema"] = "dataSchema";
	    // DPI_SchemaViewerDataSchema, having type SchemaViewerDataSchemaPresModel
	    ParameterId["SchemaViewerDataSchema"] = "schemaViewerDataSchema";
	    // DPI_SchemaViewerMenuType, having type SchemaViewerMenuType
	    ParameterId["SchemaViewerMenuType"] = "schemaViewerMenuType";
	    // DPI_SheetListItem, having type SheetListItemPresModel
	    ParameterId["SheetListItem"] = "sheetListItem";
	    // DPI_SheetListItems, having type SheetListItemPresModel[]
	    ParameterId["SheetListItems"] = "sheetListItems";
	    // DPI_SheetList, having type SheetListPresModel
	    ParameterId["SheetList"] = "sheetList";
	    // DPI_SizeModeOption, having type SizeModeOptionPresModel
	    ParameterId["SizeModeOption"] = "sizeModeOption";
	    // DPI_SizeModeOptions, having type SizeModeOptionPresModel[]
	    ParameterId["SizeModeOptions"] = "sizeModeOptions";
	    // DPI_DashboardSizeControl, having type DashboardSizeControlPresModel
	    ParameterId["DashboardSizeControl"] = "dashboardSizeControl";
	    // DPI_DeviceLayoutInfoItem, having type DeviceLayoutInfoItemPresModel
	    ParameterId["DeviceLayoutInfoItem"] = "deviceLayoutInfoItem";
	    // DPI_DeviceLayoutInfoItems, having type DeviceLayoutInfoItemPresModel[]
	    ParameterId["DeviceLayoutInfoItems"] = "deviceLayoutInfoItems";
	    // DPI_DeviceLayoutInfoList, having type DeviceLayoutInfoListPresModel
	    ParameterId["DeviceLayoutInfoList"] = "deviceLayoutInfoList";
	    // DPI_SpecializedDeviceLayoutItem, having type SpecializedDeviceLayoutItemPresModel
	    ParameterId["SpecializedDeviceLayoutItem"] = "specializedDeviceLayoutItem";
	    // DPI_SpecializedDeviceLayoutItems, having type SpecializedDeviceLayoutItemPresModel[]
	    ParameterId["SpecializedDeviceLayoutItems"] = "specializedDeviceLayoutItems";
	    // DPI_SpecializedDeviceLayoutList, having type SpecializedDeviceLayoutListPresModel
	    ParameterId["SpecializedDeviceLayoutList"] = "specializedDeviceLayoutList";
	    // DPI_SizeItem, having type SizeItemPresModel
	    ParameterId["SizeItem"] = "sizeItem";
	    // DPI_SizeItems, having type SizeItemPresModel[]
	    ParameterId["SizeItems"] = "sizeItems";
	    // DPI_DeviceSizesList, having type SizeItemListPresModel
	    ParameterId["DeviceSizesList"] = "deviceSizesList";
	    // DPI_PresetSizesList, having type SizeItemListPresModel
	    ParameterId["PresetSizesList"] = "presetSizesList";
	    // DPI_SizeItemList, having type SizeItemListPresModel
	    ParameterId["SizeItemList"] = "sizeItemList";
	    // DPI_SubstitutionKeyword, having type SubstitutionKeywordPresModel
	    ParameterId["SubstitutionKeyword"] = "substitutionKeyword";
	    // DPI_SubstitutionKeywords, having type SubstitutionKeywordPresModel[]
	    ParameterId["SubstitutionKeywords"] = "substitutionKeywords";
	    // DPI_SubstitutionKeywordSubList, having type SubstitutionKeywordSubListPresModel
	    ParameterId["SubstitutionKeywordSubList"] = "substitutionKeywordsSublist";
	    // DPI_SubstitutionKeywordSubLists, having type SubstitutionKeywordSubListPresModel[]
	    ParameterId["SubstitutionKeywordSubLists"] = "substitutionKeywordSublists";
	    // DPI_SubstitutionKeywordList, having type SubstitutionKeywordListPresModel
	    ParameterId["SubstitutionKeywordList"] = "substitutionKeywordsList";
	    // DPI_DeviceZoneListItem, having type DeviceZoneListItemPresModel
	    ParameterId["DeviceZoneListItem"] = "deviceZoneListItem";
	    // DPI_DeviceZoneListItems, having type DeviceZoneListItemPresModel[]
	    ParameterId["DeviceZoneListItems"] = "deviceZoneListItems";
	    // DPI_DeviceZoneList, having type DeviceZoneListPresModel
	    ParameterId["DeviceZoneList"] = "deviceZoneList";
	    // DPI_ZoneSnapLineListItem, having type ZoneSnapLineListItemPresModel
	    ParameterId["ZoneSnapLineListItem"] = "snapLineListItem";
	    // DPI_OuterHorizontalSnapLines, having type ZoneSnapLineListItemPresModel[]
	    ParameterId["OuterHorizontalSnapLines"] = "outerHorizontalSnapLines";
	    // DPI_OuterVerticalSnapLines, having type ZoneSnapLineListItemPresModel[]
	    ParameterId["OuterVerticalSnapLines"] = "outerVerticalSnapLines";
	    // DPI_InnerHorizontalSnapLines, having type ZoneSnapLineListItemPresModel[]
	    ParameterId["InnerHorizontalSnapLines"] = "innerHorizontalSnapLines";
	    // DPI_InnerVerticalSnapLines, having type ZoneSnapLineListItemPresModel[]
	    ParameterId["InnerVerticalSnapLines"] = "innerVerticalSnapLines";
	    // DPI_ZoneSnapLineList, having type ZoneSnapLineListPresModel
	    ParameterId["ZoneSnapLineList"] = "snapLineList";
	    // DPI_DashboardZoneHierarchy, having type DashboardZoneHierarchyPresModel
	    ParameterId["DashboardZoneHierarchy"] = "dashboardZoneHierarchy";
	    // DPI_DeviceZoneVisibilityListItem, having type DeviceZoneVisibilityListItemPresModel
	    ParameterId["DeviceZoneVisibilityListItem"] = "deviceZoneVisibilityListItem";
	    // DPI_DeviceZoneVisibilityListItems, having type DeviceZoneVisibilityListItemPresModel[]
	    ParameterId["DeviceZoneVisibilityListItems"] = "deviceZoneVisibilityListItems";
	    // DPI_DeviceZoneVisibilityList, having type DeviceZoneVisibilityListPresModel
	    ParameterId["DeviceZoneVisibilityList"] = "deviceZoneVisibilityList";
	    // DPI_WorksheetDataSchema, having type WorksheetDataSchemaPresModel
	    ParameterId["WorksheetDataSchema"] = "worksheetDataSchema";
	    // DPI_WorksheetDataSchemaMap, having type Dictionary(of WorksheetDataSchemaPresModel)
	    ParameterId["WorksheetDataSchemaMap"] = "worksheetDataSchemaMap";
	    // DPI_Shelf, having type ShelfPresModel
	    ParameterId["Shelf"] = "shelf";
	    // DPI_ShelfDetail, having type ShelfPresModel
	    ParameterId["ShelfDetail"] = "shelfDetail";
	    // DPI_ShelfList, having type ShelfPresModel[]
	    ParameterId["ShelfList"] = "shelfList";
	    // DPI_ShelfItem, having type ShelfItemPresModel
	    ParameterId["ShelfItem"] = "shelfItem";
	    // DPI_ShelfItems, having type ShelfItemPresModel[]
	    ParameterId["ShelfItems"] = "shelfItems";
	    // DPI_Shelves, having type ShelvesPresModel
	    ParameterId["Shelves"] = "shelves";
	    // DPI_FieldEncoding, having type FieldEncodingPresModel
	    ParameterId["FieldEncoding"] = "fieldEncoding";
	    // DPI_FieldEncodings, having type FieldEncodingPresModel[]
	    ParameterId["FieldEncodings"] = "fieldEncodings";
	    // DPI_UberTip, having type UberTipPresModel
	    ParameterId["UberTip"] = "uberTip";
	    // DPI_AnalyticsObjectDragInfo, having type AnalyticsObjectDragInfoPresModel
	    ParameterId["AnalyticsObjectDragInfo"] = "analyticsObjectDragInfo";
	    // DPI_TrendLine, having type TrendLinePresModel
	    ParameterId["TrendLine"] = "trendLine";
	    // DPI_TrendLineDialog, having type TrendLineDialogPresModel
	    ParameterId["TrendLineDialog"] = "trendLineDialog";
	    // DPI_TrendLineDescribePresModel, having type TrendLineDescribePresModel
	    ParameterId["TrendLineDescribePresModel"] = "trendLineDescribePresModel";
	    // DPI_TrendLineAOVModelPresModel, having type TrendLineAOVModelPresModel
	    ParameterId["TrendLineAOVModelPresModel"] = "trendLineAovModelPresModel";
	    // DPI_TrendLineAOVModelsPresModel, having type TrendLineAOVModelPresModel[]
	    ParameterId["TrendLineAOVModelsPresModel"] = "trendModelDescriptionVector";
	    // DPI_TrendLineLineCoefficientPresModel, having type TrendLineLineCoefficientPresModel
	    ParameterId["TrendLineLineCoefficientPresModel"] = "trendLineLineCoefficient";
	    // DPI_TrendLineLineCoefficientsPresModel, having type TrendLineLineCoefficientPresModel[]
	    ParameterId["TrendLineLineCoefficientsPresModel"] = "trendLineLineCoefficientsPresModel";
	    // DPI_TrendLineLinesPresModel, having type TrendLineLinesPresModel
	    ParameterId["TrendLineLinesPresModel"] = "trendLineLinesPresModel";
	    // DPI_TrendLineAOVPresModel, having type TrendLineAOVPresModel
	    ParameterId["TrendLineAOVPresModel"] = "trendLineAnovaPresModel";
	    // DPI_ReferenceLine, having type ReferenceLinePresModel
	    ParameterId["ReferenceLine"] = "referenceLine";
	    // DPI_ReferenceLines, having type ReferenceLinePresModel[]
	    ParameterId["ReferenceLines"] = "referenceLines";
	    // DPI_PercentileEditDataValue, having type EditDataValuePresModel
	    ParameterId["PercentileEditDataValue"] = "percentileEditDataValue";
	    // DPI_LimitEditDataValue, having type EditDataValuePresModel
	    ParameterId["LimitEditDataValue"] = "limitEditDataValue";
	    // DPI_ConfidenceLevelCombo, having type EditValueWidgetPresModel
	    ParameterId["ConfidenceLevelCombo"] = "confidenceLevelCombo";
	    // DPI_DistributionQuantilesCombo, having type EditValueWidgetPresModel
	    ParameterId["DistributionQuantilesCombo"] = "distributionQuantilesLevelCombo";
	    // DPI_PercentilesCombo, having type EditValueWidgetPresModel
	    ParameterId["PercentilesCombo"] = "distributionPercentilesLevelCombo";
	    // DPI_NumericBinSizeCombo, having type EditValueWidgetPresModel
	    ParameterId["NumericBinSizeCombo"] = "numericBinSizeCombo";
	    // DPI_FieldPickerField, having type FieldPickerFieldPresModel
	    ParameterId["FieldPickerField"] = "fieldPickerField";
	    // DPI_FieldPickerFields, having type FieldPickerFieldPresModel[]
	    ParameterId["FieldPickerFields"] = "fieldPickerFields";
	    // DPI_FieldPickerCombo, having type FieldPickerComboPresModel
	    ParameterId["FieldPickerCombo"] = "fieldPickerCombo";
	    // DPI_PairedFieldPickerCombo, having type FieldPickerComboPresModel
	    ParameterId["PairedFieldPickerCombo"] = "pairedFieldPickerCombo";
	    // DPI_ReferenceLineEditorPresModel, having type ReferenceLineEditorPresModel
	    ParameterId["ReferenceLineEditorPresModel"] = "referenceLineEditor";
	    // DPI_CloseDataSourceErrorDialogPresModel, having type CloseDataSourceErrorDialogPresModel
	    ParameterId["CloseDataSourceErrorDialogPresModel"] = "closeDsErrorDialog";
	    // DPI_EditReferenceLine, having type EditReferenceLinePresModel
	    ParameterId["EditReferenceLine"] = "editReferenceLine";
	    // DPI_EditReferenceBand, having type EditReferenceBandPresModel
	    ParameterId["EditReferenceBand"] = "editReferenceBand";
	    // DPI_EditDistribution, having type EditDistributionPresModel
	    ParameterId["EditDistribution"] = "editDistribution";
	    // DPI_DistributionPercentages, having type DistributionPercentagesPresModel
	    ParameterId["DistributionPercentages"] = "distributionPercentages";
	    // DPI_DistributionPercentiles, having type DistributionPercentilesPresModel
	    ParameterId["DistributionPercentiles"] = "distributionPercentiles";
	    // DPI_DistributionQuantiles, having type DistributionQuantilesPresModel
	    ParameterId["DistributionQuantiles"] = "distributionQuantiles";
	    // DPI_DistributionStandardDeviation, having type DistributionStandardDeviationPresModel
	    ParameterId["DistributionStandardDeviation"] = "distributionStddev";
	    // DPI_SortIndicators, having type SortIndicatorsPresModel
	    ParameterId["SortIndicators"] = "sortIndicators";
	    // DPI_SortIndicatorRegion, having type SortIndicatorRegionPresModel
	    ParameterId["SortIndicatorRegion"] = "sortIndicatorRegion";
	    // DPI_SortIndicatorRegions, having type SortIndicatorRegionPresModel[]
	    ParameterId["SortIndicatorRegions"] = "sortIndicatorRegions";
	    // DPI_SortIndicatorItem, having type SortIndicatorItemPresModel
	    ParameterId["SortIndicatorItem"] = "sortIndicatorItem";
	    // DPI_SortIndicatorItems, having type SortIndicatorItemPresModel[]
	    ParameterId["SortIndicatorItems"] = "sortIndicatorItems";
	    // DPI_BuilderConfig, having type BuilderConfigPresModel
	    ParameterId["BuilderConfig"] = "builderConfig";
	    // DPI_SheetLayoutInfo, having type SheetLayoutInfoPresModel
	    ParameterId["SheetLayoutInfo"] = "sheetLayoutInfo";
	    // DPI_AreaRect, having type RectanglePresModel
	    ParameterId["AreaRect"] = "areaRect";
	    // DPI_Border, having type RectanglePresModel
	    ParameterId["Border"] = "borderRect";
	    // DPI_BoundsRect, having type RectanglePresModel
	    ParameterId["BoundsRect"] = "boundsRect";
	    // DPI_ButtonRect, having type RectanglePresModel
	    ParameterId["ButtonRect"] = "buttonRect";
	    // DPI_DragRect, having type RectanglePresModel
	    ParameterId["DragRect"] = "dragRect";
	    // DPI_FocusRect, having type RectanglePresModel
	    ParameterId["FocusRect"] = "focusRect";
	    // DPI_ImageTileRect, having type RectanglePresModel
	    ParameterId["ImageTileRect"] = "tileRect";
	    // DPI_ItemRect, having type RectanglePresModel
	    ParameterId["ItemRect"] = "itemRect";
	    // DPI_LabelRect, having type RectanglePresModel
	    ParameterId["LabelRect"] = "labelRect";
	    // DPI_MarkRect, having type RectanglePresModel
	    ParameterId["MarkRect"] = "markRect";
	    // DPI_MarkTooltipRect, having type RectanglePresModel
	    ParameterId["MarkTooltipRect"] = "markTooltipRect";
	    // DPI_MenuButtonRect, having type RectanglePresModel
	    ParameterId["MenuButtonRect"] = "menuButtonRect";
	    // DPI_OutRegionRect, having type RectanglePresModel
	    ParameterId["OutRegionRect"] = "outRegionRect";
	    // DPI_PaneRect, having type RectanglePresModel
	    ParameterId["PaneRect"] = "paneRect";
	    // DPI_PixelExtents, having type RectanglePresModel
	    ParameterId["PixelExtents"] = "pixelExtents";
	    // DPI_RectMaxLabel, having type RectanglePresModel
	    ParameterId["RectMaxLabel"] = "rectMaxLabel";
	    // DPI_RectMinLabel, having type RectanglePresModel
	    ParameterId["RectMinLabel"] = "rectMinLabel";
	    // DPI_RectRamp, having type RectanglePresModel
	    ParameterId["RectRamp"] = "rectRamp";
	    // DPI_RectTitle, having type RectanglePresModel
	    ParameterId["RectTitle"] = "rectTitle";
	    // DPI_RegionRect, having type RectanglePresModel
	    ParameterId["RegionRect"] = "regionRect";
	    // DPI_SelectionRect, having type RectanglePresModel
	    ParameterId["SelectionRect"] = "selectionRect";
	    // DPI_UnusedRect, having type RectanglePresModel
	    ParameterId["UnusedRect"] = "unusedRect";
	    // DPI_ZoneEdgeRect, having type RectanglePresModel
	    ParameterId["ZoneEdgeRect"] = "zoneEdge";
	    // DPI_ZoneEdgeRectPix, having type RectanglePresModel
	    ParameterId["ZoneEdgeRectPix"] = "zoneEdgePix";
	    // DPI_ZoneEdgeRectPp, having type RectanglePresModel
	    ParameterId["ZoneEdgeRectPp"] = "zoneEdgePp";
	    // DPI_UIAutomationLinkRect, having type RectanglePresModel
	    ParameterId["UIAutomationLinkRect"] = "linkRect";
	    // DPI_Borders, having type RectanglePresModel[]
	    ParameterId["Borders"] = "borderRects";
	    // DPI_UIAutomationLinkRects, having type RectanglePresModel[]
	    ParameterId["UIAutomationLinkRects"] = "linkRects";
	    // DPI_DomainExtents, having type DoubleRectanglePresModel
	    ParameterId["DomainExtents"] = "domainExtents";
	    // DPI_MapDomainExtents, having type DoubleRectanglePresModel
	    ParameterId["MapDomainExtents"] = "mapDomainExtents";
	    // DPI_MapLatLongRect, having type MapRectPresModel
	    ParameterId["MapLatLongRect"] = "mapLatLongRect";
	    // DPI_Center, having type PointPresModel
	    ParameterId["Center"] = "center";
	    // DPI_CenterMarkLineBegin, having type PointPresModel
	    ParameterId["CenterMarkLineBegin"] = "centerMarkLineBegin";
	    // DPI_CenterMarkLineEnd, having type PointPresModel
	    ParameterId["CenterMarkLineEnd"] = "centerMarkLineEnd";
	    // DPI_DropLocation, having type PointPresModel
	    ParameterId["DropLocation"] = "dropLocation";
	    // DPI_EndPt, having type PointPresModel
	    ParameterId["EndPt"] = "endPoint";
	    // DPI_GrabLocation, having type PointPresModel
	    ParameterId["GrabLocation"] = "grabLocation";
	    // DPI_GridOrigin, having type PointPresModel
	    ParameterId["GridOrigin"] = "gridOrigin";
	    // DPI_LassoSelectionPoint, having type PointPresModel
	    ParameterId["LassoSelectionPoint"] = "lassoSelectionPoint";
	    // DPI_MenuLocation, having type PointPresModel
	    ParameterId["MenuLocation"] = "menuLocation";
	    // DPI_MoveOffset, having type PointPresModel
	    ParameterId["MoveOffset"] = "moveOffset";
	    // DPI_OverlayAnchor, having type PointPresModel
	    ParameterId["OverlayAnchor"] = "overlayAnchor";
	    // DPI_PanAmount, having type PointPresModel
	    ParameterId["PanAmount"] = "panAmount";
	    // DPI_PanLocation, having type PointPresModel
	    ParameterId["PanLocation"] = "panLocation";
	    // DPI_PaneResolverLocation, having type PointPresModel
	    ParameterId["PaneResolverLocation"] = "paneResolverLocation";
	    // DPI_PixelExtentsOffset, having type PointPresModel
	    ParameterId["PixelExtentsOffset"] = "extentsOffset";
	    // DPI_Point1, having type PointPresModel
	    ParameterId["Point1"] = "pt1";
	    // DPI_Point2, having type PointPresModel
	    ParameterId["Point2"] = "pt2";
	    // DPI_Point3, having type PointPresModel
	    ParameterId["Point3"] = "pt3";
	    // DPI_RegionPoint, having type PointPresModel
	    ParameterId["RegionPoint"] = "regionPoint";
	    // DPI_ScrollOffset, having type PointPresModel
	    ParameterId["ScrollOffset"] = "scrollOffset";
	    // DPI_SelectAtPoint, having type PointPresModel
	    ParameterId["SelectAtPoint"] = "selectAtPoint";
	    // DPI_SelectOffset, having type PointPresModel
	    ParameterId["SelectOffset"] = "selectOffset";
	    // DPI_TargetPt, having type PointPresModel
	    ParameterId["TargetPt"] = "targetPoint";
	    // DPI_TextOrigin, having type PointPresModel
	    ParameterId["TextOrigin"] = "textOrigin";
	    // DPI_TooltipAnchorPoint, having type PointPresModel
	    ParameterId["TooltipAnchorPoint"] = "tooltipAnchorPoint";
	    // DPI_TooltipOffset, having type PointPresModel
	    ParameterId["TooltipOffset"] = "tooltipOffset";
	    // DPI_VizLocation, having type PointPresModel
	    ParameterId["VizLocation"] = "vizLocation";
	    // DPI_ZoomAnchorPoint, having type PointPresModel
	    ParameterId["ZoomAnchorPoint"] = "zoomAnchorPoint";
	    // DPI_MenuAnchorPoint, having type PointPresModel
	    ParameterId["MenuAnchorPoint"] = "menuAnchorPoint";
	    // DPI_OverlayAnchors, having type PointPresModel[]
	    ParameterId["OverlayAnchors"] = "overlayAnchors";
	    // DPI_LassoSelection, having type PointPresModel[]
	    ParameterId["LassoSelection"] = "lassoSelection";
	    // DPI_ScrollOffsetPoints, having type PointPresModel[]
	    ParameterId["ScrollOffsetPoints"] = "scrollOffsetPoints";
	    // DPI_RadialSelection, having type CirclePresModel
	    ParameterId["RadialSelection"] = "radialSelection";
	    // DPI_DomainOrigin, having type FloatPointPresModel
	    ParameterId["DomainOrigin"] = "domainOrigin";
	    // DPI_FloatCenter, having type FloatPointPresModel
	    ParameterId["FloatCenter"] = "floatCenter";
	    // DPI_FloatPoint, having type FloatPointPresModel
	    ParameterId["FloatPoint"] = "floatPoint";
	    // DPI_ClientAvailableSpace, having type SizePresModel
	    ParameterId["ClientAvailableSpace"] = "clientAvailableSpace";
	    // DPI_DashboardPortSize, having type SizePresModel
	    ParameterId["DashboardPortSize"] = "dashboardPort";
	    // DPI_LegendSize, having type SizePresModel
	    ParameterId["LegendSize"] = "legendSize";
	    // DPI_StoryPortSize, having type SizePresModel
	    ParameterId["StoryPortSize"] = "storyPort";
	    // DPI_SwatchAreaSize, having type SizePresModel
	    ParameterId["SwatchAreaSize"] = "areaSize";
	    // DPI_SwatchImageSize, having type SizePresModel
	    ParameterId["SwatchImageSize"] = "imageSize";
	    // DPI_ViewportSize, having type SizePresModel
	    ParameterId["ViewportSize"] = "viewportSize";
	    // DPI_WorksheetPortSize, having type SizePresModel
	    ParameterId["WorksheetPortSize"] = "worksheetPort";
	    // DPI_ResizeEntity, having type ResizeEntityPresModel
	    ParameterId["ResizeEntity"] = "resizeEntity";
	    // DPI_RowResizers, having type ResizeEntityPresModel[]
	    ParameterId["RowResizers"] = "rowResizers";
	    // DPI_ColResizers, having type ResizeEntityPresModel[]
	    ParameterId["ColResizers"] = "colResizers";
	    // DPI_ResizeInfoPresModel, having type ResizeInfoPresModel
	    ParameterId["ResizeInfoPresModel"] = "resizeInfo";
	    // DPI_ServerSheet, having type ServerSheetPresModel
	    ParameterId["ServerSheet"] = "serverSheet";
	    // DPI_ServerSheets, having type ServerSheetPresModel[]
	    ParameterId["ServerSheets"] = "serverSheets";
	    // DPI_SheetInfo, having type SheetInfoPresModel
	    ParameterId["SheetInfo"] = "sheetInfo";
	    // DPI_SheetsInfo, having type SheetInfoPresModel[]
	    ParameterId["SheetsInfo"] = "sheetsInfo";
	    // DPI_ServerWorkbook, having type ServerWorkbookPresModel
	    ParameterId["ServerWorkbook"] = "serverWorkbook";
	    // DPI_PDFExportOptionsPresModel, having type PDFExportOptionsPresModel
	    ParameterId["PDFExportOptionsPresModel"] = "pdfExport";
	    // DPI_ExportFileResultPresModel, having type ExportFileResultPresModel
	    ParameterId["ExportFileResultPresModel"] = "pdfResult";
	    // DPI_PDFSheet, having type PDFSheetPresModel
	    ParameterId["PDFSheet"] = "pdfSheet";
	    // DPI_SheetOptions, having type PDFSheetPresModel[]
	    ParameterId["SheetOptions"] = "sheetOptions";
	    // DPI_ExportLayoutOptions, having type ExportLayoutOptionsPresModel
	    ParameterId["ExportLayoutOptions"] = "exportLayoutOptions";
	    // DPI_DataAlertConditionOperationType, having type DataAlertConditionOperationType
	    ParameterId["DataAlertConditionOperationType"] = "dataAlertConditionOp";
	    // DPI_DataAlertDialogPresModel, having type DataAlertDialogPresModel
	    ParameterId["DataAlertDialogPresModel"] = "dataAlertDialogPresModel";
	    // DPI_DataAlertMeasure, having type DataAlertMeasurePresModel
	    ParameterId["DataAlertMeasure"] = "dataAlertMeasure";
	    // DPI_DataAlertMeasures, having type DataAlertMeasurePresModel[]
	    ParameterId["DataAlertMeasures"] = "dataAlertMeasures";
	    // DPI_DataAlertConstantCondition, having type DataAlertConstantConditionPresModel
	    ParameterId["DataAlertConstantCondition"] = "dataAlertConstantCondition";
	    // DPI_DataAlertDialogMode, having type DataAlertDialogMode
	    ParameterId["DataAlertDialogMode"] = "dataAlertDialogMode";
	    // DPI_LightweightMapOptions, having type LightweightMapOptionsPresModel
	    ParameterId["LightweightMapOptions"] = "lightweightMapOptions";
	    // DPI_DataHighlighter, having type DataHighlighterPresModel
	    ParameterId["DataHighlighter"] = "dataHighlighter";
	    // DPI_DataHighlighterItemSet, having type DataHighlighterItemSetPresModel
	    ParameterId["DataHighlighterItemSet"] = "dataHighlighterItemSet";
	    // DPI_DataHighlighterItem, having type DataHighlighterItemPresModel
	    ParameterId["DataHighlighterItem"] = "dataHighlighterItem";
	    // DPI_DataHighlighterItems, having type DataHighlighterItemPresModel[]
	    ParameterId["DataHighlighterItems"] = "dataHighlighterItems";
	    // DPI_CategoricalLegendLayout, having type CategoricalLegendLayoutPresModel
	    ParameterId["CategoricalLegendLayout"] = "catLegendLayout";
	    // DPI_CategoricalLegend, having type CategoricalLegendPresModel
	    ParameterId["CategoricalLegend"] = "categoricalLegend";
	    // DPI_CategoricalLegends, having type CategoricalLegendPresModel[]
	    ParameterId["CategoricalLegends"] = "categoricalLegends";
	    // DPI_CategoricalColorLegend, having type CategoricalColorLegendPresModel
	    ParameterId["CategoricalColorLegend"] = "colorLegend";
	    // DPI_ColorLegendItem, having type CategoricalColorLegendItemPresModel
	    ParameterId["ColorLegendItem"] = "colorLegendItem";
	    // DPI_ColorLegendItems, having type CategoricalColorLegendItemPresModel[]
	    ParameterId["ColorLegendItems"] = "colorLegendItems";
	    // DPI_CategoricalShapeLegend, having type CategoricalShapeLegendPresModel
	    ParameterId["CategoricalShapeLegend"] = "categoricalShapeLegend";
	    // DPI_ShapeLegendItem, having type CategoricalShapeLegendItemPresModel
	    ParameterId["ShapeLegendItem"] = "shapeLegendItem";
	    // DPI_ShapeLegendItems, having type CategoricalShapeLegendItemPresModel[]
	    ParameterId["ShapeLegendItems"] = "shapeLegendItems";
	    // DPI_CategoricalHighlightLegend, having type CategoricalHighlightLegendPresModel
	    ParameterId["CategoricalHighlightLegend"] = "categoricalHighlightLegend";
	    // DPI_HighlightLegendItem, having type CategoricalLegendItemPresModel
	    ParameterId["HighlightLegendItem"] = "highlightLegendItem";
	    // DPI_HighlightLegendItems, having type CategoricalLegendItemPresModel[]
	    ParameterId["HighlightLegendItems"] = "highlightLegendItems";
	    // DPI_CategoricalSizeLegend, having type CategoricalSizeLegendPresModel
	    ParameterId["CategoricalSizeLegend"] = "categoricalSizeLegend";
	    // DPI_SizeLegendItem, having type CategoricalSizeLegendItemPresModel
	    ParameterId["SizeLegendItem"] = "sizeLegendItem";
	    // DPI_SizeLegendItems, having type CategoricalSizeLegendItemPresModel[]
	    ParameterId["SizeLegendItems"] = "sizeLegendItems";
	    // DPI_CategoricalMapLegend, having type CategoricalMapLegendPresModel
	    ParameterId["CategoricalMapLegend"] = "categoricalMapLegend";
	    // DPI_QuantitativeColorLegend, having type QuantitativeColorLegendPresModel
	    ParameterId["QuantitativeColorLegend"] = "quantitativeColorLegend";
	    // DPI_QuantitativeColorLegends, having type QuantitativeColorLegendPresModel[]
	    ParameterId["QuantitativeColorLegends"] = "quantitativeColorLegends";
	    // DPI_QuantitativeLegendLayout, having type QuantitativeLegendLayoutPresModel
	    ParameterId["QuantitativeLegendLayout"] = "quantitativeLegendLayout";
	    // DPI_ServerRenderedLegend, having type ServerRenderedLegendPresModel
	    ParameterId["ServerRenderedLegend"] = "serverRenderedLegend";
	    // DPI_CategoricalFilter, having type CategoricalFilterPresModel
	    ParameterId["CategoricalFilter"] = "categoricalFilter";
	    // DPI_CategoricalFilterRelational, having type CategoricalFilterRelationalPresModel
	    ParameterId["CategoricalFilterRelational"] = "categoricalFilterRelational";
	    // DPI_CategoricalFilterMemberDomainPage, having type CategoricalFilterMemberDomainPagePresModel
	    ParameterId["CategoricalFilterMemberDomainPage"] = "categoricalFilterMemberDomainPage";
	    // DPI_CategoricalFilterCacheInfo, having type CategoricalFilterCacheInfoPresModel
	    ParameterId["CategoricalFilterCacheInfo"] = "categoricalFilterCacheInfo";
	    // DPI_CategoricalFilterPatternDisplay, having type CategoricalFilterPatternDisplayPresModel
	    ParameterId["CategoricalFilterPatternDisplay"] = "categoricalFilterPatternDisplay";
	    // DPI_CategoricalFilterPatternUpdate, having type CategoricalFilterPatternUpdatePresModel
	    ParameterId["CategoricalFilterPatternUpdate"] = "categoricalFilterPatternUpdate";
	    // DPI_CategoricalFilterConditionDisplay, having type CategoricalFilterConditionDisplayPresModel
	    ParameterId["CategoricalFilterConditionDisplay"] = "categoricalFilterConditionDisplay";
	    // DPI_CategoricalFilterConditionUpdate, having type CategoricalFilterConditionUpdatePresModel
	    ParameterId["CategoricalFilterConditionUpdate"] = "categoricalFilterConditionUpdate";
	    // DPI_CategoricalFilterLimitDisplay, having type CategoricalFilterLimitDisplayPresModel
	    ParameterId["CategoricalFilterLimitDisplay"] = "categoricalFilterLimitDisplay";
	    // DPI_CategoricalFilterLimitUpdate, having type CategoricalFilterLimitUpdatePresModel
	    ParameterId["CategoricalFilterLimitUpdate"] = "categoricalFilterLimitUpdate";
	    // DPI_CategoricalFilterNew, having type CategoricalFilter_NewPresModel
	    ParameterId["CategoricalFilterNew"] = "categoricalFilterNew";
	    // DPI_CategoricalFilterHierarchy, having type CategoricalFilterHierarchyPresModel
	    ParameterId["CategoricalFilterHierarchy"] = "categoricalFilterHirerarchy";
	    // DPI_CategoricalFilterUpdate, having type CategoricalFilterUpdatePresModel
	    ParameterId["CategoricalFilterUpdate"] = "categoricalFilterUpdate";
	    // DPI_CategoricalFilterRelationalState, having type CategoricalFilterRelationalStatePresModel
	    ParameterId["CategoricalFilterRelationalState"] = "categoricalRelationalState";
	    // DPI_CategoricalFilterRelationalUpdatedState, having type CategoricalFilterRelationalStatePresModel
	    ParameterId["CategoricalFilterRelationalUpdatedState"] = "categoricalRelationalUpdatedState";
	    // DPI_CategoricalFilterRelationalDomainInfo, having type CategoricalFilterRelationalDomainInfoPresModel
	    ParameterId["CategoricalFilterRelationalDomainInfo"] = "categoricalFilterRelationalDomainInfo";
	    // DPI_CategoricalFilterRelationalDisplay, having type CategoricalFilterRelationalDisplayPresModel
	    ParameterId["CategoricalFilterRelationalDisplay"] = "categoricalFilterRelationalDisplay";
	    // DPI_ExpressionToken, having type ExpressionTokenPresModel
	    ParameterId["ExpressionToken"] = "expressionToken";
	    // DPI_ExpressionTokens, having type ExpressionTokenPresModel[]
	    ParameterId["ExpressionTokens"] = "expressionTokens";
	    // DPI_FormulaValidation, having type FormulaValidationPresModel
	    ParameterId["FormulaValidation"] = "formulaValidation";
	    // DPI_CaptionedFilterValue, having type FilterValuePresModel
	    ParameterId["CaptionedFilterValue"] = "captionedFilterValue";
	    // DPI_CaptionedRangeMin, having type FilterValuePresModel
	    ParameterId["CaptionedRangeMin"] = "captionedRangeMin";
	    // DPI_CaptionedRangeMax, having type FilterValuePresModel
	    ParameterId["CaptionedRangeMax"] = "captionedRangeMax";
	    // DPI_CaptionedAnchorDate, having type FilterValuePresModel
	    ParameterId["CaptionedAnchorDate"] = "captionedAnchorDate";
	    // DPI_CaptionedFilterValueList, having type FilterValuePresModel[]
	    ParameterId["CaptionedFilterValueList"] = "captionedFilterValueList";
	    // DPI_CategoricalFilterInfo, having type CategoricalFilterInfoPresModel
	    ParameterId["CategoricalFilterInfo"] = "categoricalFilterInfo";
	    // DPI_QuantitativeFilterInfo, having type QuantitativeFilterInfoPresModel
	    ParameterId["QuantitativeFilterInfo"] = "quantitativeFilterInfo";
	    // DPI_RelativeDateFilterInfo, having type RelativeDateFilterInfoPresModel
	    ParameterId["RelativeDateFilterInfo"] = "relativeDateFilterInfo";
	    // DPI_RelativeDateFilterLabels, having type RelativeDateFilterLabelsPresModel
	    ParameterId["RelativeDateFilterLabels"] = "relativeDateFilterLables";
	    // DPI_FilterSelectMeasure, having type FilterSelectMeasurePresModel
	    ParameterId["FilterSelectMeasure"] = "filterSelectMeasure";
	    // DPI_FilterListItem, having type FilterListItemPresModel
	    ParameterId["FilterListItem"] = "filterListItem";
	    // DPI_FilterListItems, having type FilterListItemPresModel[]
	    ParameterId["FilterListItems"] = "filterItems";
	    // DPI_FilterFieldInfo, having type FilterFieldInfoPresModel
	    ParameterId["FilterFieldInfo"] = "filterFieldInfo";
	    // DPI_FilterInfo, having type FilterInfoPresModel
	    ParameterId["FilterInfo"] = "filterInfo";
	    // DPI_FiltersInfo, having type FilterInforPresModel[]
	    ParameterId["FiltersInfo"] = "filtersInfo";
	    // DPI_CategoricalDomain, having type CategoricalDomainPresModel
	    ParameterId["CategoricalDomain"] = "categoricalDomain";
	    // DPI_QuantitativeDomain, having type QuantitativeDomainPresModel
	    ParameterId["QuantitativeDomain"] = "quantitativeDomain";
	    // DPI_QuantitativeFilter, having type QuantitativeFilterPresModel
	    ParameterId["QuantitativeFilter"] = "quantitativeFilter";
	    // DPI_QuantitativeFilterRange, having type QuantitativeFilterRangePresModel
	    ParameterId["QuantitativeFilterRange"] = "quantitativeFilterRange";
	    // DPI_QuantitativeFilterDomain, having type QuantitativeFilterDomainPresModel
	    ParameterId["QuantitativeFilterDomain"] = "quantitativeFilterDomain";
	    // DPI_DateTimePeriod, having type DateTimePeriodPresModel
	    ParameterId["DateTimePeriod"] = "dateTimePeriod";
	    // DPI_DateTimePeriods, having type DateTimePeriodPresModel[]
	    ParameterId["DateTimePeriods"] = "dateTimePeriods";
	    // DPI_RelativeDateFilter, having type RelativeDateFilterPresModel
	    ParameterId["RelativeDateFilter"] = "relativeDateFilter";
	    // DPI_ValidationResults, having type ValidationResultsPresModel
	    ParameterId["ValidationResults"] = "validationResults";
	    // DPI_DomainMember, having type DomainMemberPresModel
	    ParameterId["DomainMember"] = "domainMember";
	    // DPI_DomainMembers, having type DomainMemberPresModel[]
	    ParameterId["DomainMembers"] = "domainMembers";
	    // DPI_QuickFilterDisplay, having type QuickFilterDisplayPresModel
	    ParameterId["QuickFilterDisplay"] = "quickFilterDisplay";
	    // DPI_QuickFilter, having type QuickFilterPresModel
	    ParameterId["QuickFilter"] = "quickFilter";
	    // DPI_QuantitativeQuickFilter, having type QuantitativeQuickFilterPresModel
	    ParameterId["QuantitativeQuickFilter"] = "quantitativeQuickFilter";
	    // DPI_RelativeDateQuickFilter, having type RelativeDateQuickFilterPresModel
	    ParameterId["RelativeDateQuickFilter"] = "relativeDateQuickFilter";
	    // DPI_CategoricalQuickFilter, having type CategoricalQuickFilterPresModel
	    ParameterId["CategoricalQuickFilter"] = "categoricalQuickFilter";
	    // DPI_HierarchicalQuickFilter, having type HierarchicalQuickFilterPresModel
	    ParameterId["HierarchicalQuickFilter"] = "hierarchicalQuickFilter";
	    // DPI_DomainTable, having type DomainTablePresModel
	    ParameterId["DomainTable"] = "domainTable";
	    // DPI_DomainTables, having type DomainTablePresModel[]
	    ParameterId["DomainTables"] = "domainTables";
	    // DPI_DomainTuples, having type Tuples
	    ParameterId["DomainTuples"] = "domainTuples";
	    // DPI_SearchTuples, having type Tuples
	    ParameterId["SearchTuples"] = "searchTuples";
	    // DPI_SelectedTuples, having type TupleHash
	    ParameterId["SelectedTuples"] = "selectedTuples";
	    // DPI_PendingTuples, having type TupleHash
	    ParameterId["PendingTuples"] = "pendingTuples";
	    // DPI_Domain, having type MultiDomain
	    ParameterId["Domain"] = "domain";
	    // DPI_DateOption, having type DateBinDialogOptionPresModel
	    ParameterId["DateOption"] = "dateOption";
	    // DPI_DateOptions, having type DateBinDialogOptionPresModel[]
	    ParameterId["DateOptions"] = "dateOptions";
	    // DPI_FilterRangeAdd, having type FilterRangePresModel
	    ParameterId["FilterRangeAdd"] = "filterRangeAdd";
	    // DPI_FilterRangeRemove, having type FilterRangePresModel
	    ParameterId["FilterRangeRemove"] = "filterRangeRemove";
	    // DPI_FilterOptions, having type FilterOptionsPresModel
	    ParameterId["FilterOptions"] = "filterOptions";
	    // DPI_Layer, having type LayerPresModel
	    ParameterId["Layer"] = "layer";
	    // DPI_Layers, having type LayerPresModel[]
	    ParameterId["Layers"] = "layers";
	    // DPI_MarksCardPresModel, having type MarksCardPresModel
	    ParameterId["MarksCardPresModel"] = "marksCardPresModel";
	    // DPI_UIItem, having type UIItemPresModel
	    ParameterId["UIItem"] = "uiItem";
	    // DPI_EncodingUIItem, having type EncodingUIItemPresModel
	    ParameterId["EncodingUIItem"] = "encodingUiItem";
	    // DPI_EncodingUIItems, having type EncodingUIItemPresModel[]
	    ParameterId["EncodingUIItems"] = "encodingUiItems";
	    // DPI_PrimTypeUIItem, having type PrimitiveTypeUIItemPresModel
	    ParameterId["PrimTypeUIItem"] = "primitiveTypeUiItem";
	    // DPI_PrimTypeUIItems, having type PrimitiveTypeUIItemPresModel[]
	    ParameterId["PrimTypeUIItems"] = "primitiveTypeUiItems";
	    // DPI_LineInterpolationModeUIItem, having type LineInterpolationModeUIItemPresModel
	    ParameterId["LineInterpolationModeUIItem"] = "lineInterpolationModeUiItem";
	    // DPI_LineInterpolationModeUIItemSet, having type LineInterpolationModeUIItemPresModel[]
	    ParameterId["LineInterpolationModeUIItemSet"] = "lineInterpolationModeUiItemSet";
	    // DPI_MarksCardDropdownItem, having type MarksCardDropdownItemPresModel
	    ParameterId["MarksCardDropdownItem"] = "marksCardDropdownItem";
	    // DPI_TooltipDropdownItem, having type TooltipDropdownItemPresModel
	    ParameterId["TooltipDropdownItem"] = "tooltipDropdownItem";
	    // DPI_TextDropdownItem, having type TextDropdownItemPresModel
	    ParameterId["TextDropdownItem"] = "textDropdownItem";
	    // DPI_ColorDropdownItem, having type ColorDropdownItemPresModel
	    ParameterId["ColorDropdownItem"] = "colorDropdownItem";
	    // DPI_SizeSliderPresModel, having type SizeSliderPresModel
	    ParameterId["SizeSliderPresModel"] = "sizeSliderPresModel";
	    // DPI_InflectionPoint, having type InflectionPointPresModel
	    ParameterId["InflectionPoint"] = "inflectionPoint";
	    // DPI_InflectionPoints, having type InflectionPointPresModel[]
	    ParameterId["InflectionPoints"] = "inflectionPoints";
	    // DPI_Notch, having type NotchPresModel
	    ParameterId["Notch"] = "notch";
	    // DPI_Notches, having type NotchPresModel[]
	    ParameterId["Notches"] = "notches";
	    // DPI_MarkSizeOptionsPresModel, having type MarkSizeOptionsPresModel
	    ParameterId["MarkSizeOptionsPresModel"] = "markSizeOptionsPresModel";
	    // DPI_ModifyMarksInSet, having type AddOrRemoveMarks
	    ParameterId["ModifyMarksInSet"] = "addOrRemoveMarks";
	    // DPI_MarkLabelsSpecification, having type MarkLabelsSpecificationPresModel
	    ParameterId["MarkLabelsSpecification"] = "markLabelsSpecification";
	    // DPI_ColorPalette, having type ColorPalettePresModel
	    ParameterId["ColorPalette"] = "colorPalette";
	    // DPI_SelectedColorPalette, having type ColorPalettePresModel
	    ParameterId["SelectedColorPalette"] = "selectedColorPalette";
	    // DPI_ColorPalettes, having type ColorPalettePresModel[]
	    ParameterId["ColorPalettes"] = "colorPalettes";
	    // DPI_ColorPaletteGroup, having type ColorPaletteGroupPresModel
	    ParameterId["ColorPaletteGroup"] = "colorPaletteGroup";
	    // DPI_CatColorPaletteGroups, having type ColorPaletteGroupPresModel[]
	    ParameterId["CatColorPaletteGroups"] = "catColorPaletteGroups";
	    // DPI_QColorPaletteGroups, having type ColorPaletteGroupPresModel[]
	    ParameterId["QColorPaletteGroups"] = "qColorPaletteGroups";
	    // DPI_ColorPaletteCollection, having type ColorPaletteCollectionPresModel
	    ParameterId["ColorPaletteCollection"] = "colorPaletteCollection";
	    // DPI_QuantitativeColor, having type QuantitativeColorPresModel
	    ParameterId["QuantitativeColor"] = "quantitativeColor";
	    // DPI_CategoricalColor, having type CategoricalColorPresModel
	    ParameterId["CategoricalColor"] = "categoricalColor";
	    // DPI_ItemColorPair, having type ItemColorPairPresModel
	    ParameterId["ItemColorPair"] = "itemColorPair";
	    // DPI_ItemColorPairs, having type ItemColorPairPresModel[]
	    ParameterId["ItemColorPairs"] = "itemColorPairs";
	    // DPI_VQLCommandResponse, having type VQLCommandResponsePresModel
	    ParameterId["VQLCommandResponse"] = "vqlCmdResponse";
	    // DPI_LayoutStatus, having type LayoutStatusPresModel
	    ParameterId["LayoutStatus"] = "layoutStatus";
	    // DPI_VizState, having type VizStatePresModel
	    ParameterId["VizState"] = "vizState";
	    // DPI_VizStateList, having type VizStatePresModel[]
	    ParameterId["VizStateList"] = "vizStateList";
	    // DPI_CommandResult, having type CommandResultPresModel
	    ParameterId["CommandResult"] = "cmdResult";
	    // DPI_CommandResultList, having type CommandResultPresModel[]
	    ParameterId["CommandResultList"] = "cmdResultList";
	    // DPI_URLAction, having type URLActionPresModel
	    ParameterId["URLAction"] = "urlAction";
	    // DPI_URLActionList, having type URLActionPresModel[]
	    ParameterId["URLActionList"] = "urlActionList";
	    // DPI_LegacyMenu, having type LegacyMenuPresModel
	    ParameterId["LegacyMenu"] = "legacyMenu";
	    // DPI_LegacyMenus, having type LegacyMenuPresModel[]
	    ParameterId["LegacyMenus"] = "legacyMenus";
	    // DPI_ConnectionAttemptInfo, having type ConnectionAttemptInfoPresModel
	    ParameterId["ConnectionAttemptInfo"] = "connectionAttemptInfo";
	    // DPI_DataSourceConnectionAttemptInfo, having type DataSourceConnectionAttemptInfoPresModel
	    ParameterId["DataSourceConnectionAttemptInfo"] = "dataSourceConnectionAttemptInfo";
	    // DPI_DataSourceConnectionAttemptInfos, having type DataSourceConnectionAttemptInfoPresModel[]
	    ParameterId["DataSourceConnectionAttemptInfos"] = "dataSourceConnectionAttemptInfos";
	    // DPI_CommandValidationPresModel, having type CommandValidationPresModel
	    ParameterId["CommandValidationPresModel"] = "commandValidationPresModel";
	    // DPI_WarningMessage, having type WarningMessagePresModel
	    ParameterId["WarningMessage"] = "warningMessagePresModel";
	    // DPI_ApplicationPresModel, having type ApplicationPresModel
	    ParameterId["ApplicationPresModel"] = "applicationPresModel";
	    // DPI_ToolbarPresModel, having type ToolbarPresModel
	    ParameterId["ToolbarPresModel"] = "toolbarPresModel";
	    // DPI_WorkbookPresModel, having type WorkbookPresModel
	    ParameterId["WorkbookPresModel"] = "workbookPresModel";
	    // DPI_ServerFonts, having type ServerFontsPresModel
	    ParameterId["ServerFonts"] = "serverFonts";
	    // DPI_PublishDataSourceMetadataPresModel, having type PublishDataSourceMetadataPresModel
	    ParameterId["PublishDataSourceMetadataPresModel"] = "publishDataSourceMetadataPresModel";
	    // DPI_DashboardPresModel, having type DashboardPresModel
	    ParameterId["DashboardPresModel"] = "dashboardPresModel";
	    // DPI_DashboardSizePresModel, having type DashboardSizePresModel
	    ParameterId["DashboardSizePresModel"] = "dashboardSizePresModel";
	    // DPI_DashboardSizeWithValidationPresModel, having type DashboardSizeWithValidationPresModel
	    ParameterId["DashboardSizeWithValidationPresModel"] = "dashboardSizeWithValidationPresModel";
	    // DPI_DashboardInfoPresModel, having type DashboardInfoPresModel
	    ParameterId["DashboardInfoPresModel"] = "dashboardInfoPresModel";
	    // DPI_VisualPresModel, having type VisualPresModel
	    ParameterId["VisualPresModel"] = "visual";
	    // DPI_VisualPresModels, having type VisualPresModel[]
	    ParameterId["VisualPresModels"] = "visuals";
	    // DPI_DropLinesPresModel, having type DropLinesPresModel
	    ParameterId["DropLinesPresModel"] = "dropLinesPresModel";
	    // DPI_DropFieldPresModel, having type DropFieldPresModel
	    ParameterId["DropFieldPresModel"] = "dropFieldPresModel";
	    // DPI_DropFieldResultPresModel, having type DropFieldResultPresModel
	    ParameterId["DropFieldResultPresModel"] = "dropFieldResultPresModel";
	    // DPI_CurrentAxisRange, having type DataValueRangePresModel
	    ParameterId["CurrentAxisRange"] = "currentAxisRange";
	    // DPI_CurrentAxisRangeNoTime, having type DataValueRangePresModel
	    ParameterId["CurrentAxisRangeNoTime"] = "currentAxisRangeNoTime";
	    // DPI_DefaultAxisRange, having type DataValueRangePresModel
	    ParameterId["DefaultAxisRange"] = "defaultAxisRange";
	    // DPI_NewAxisRange, having type DataValueRangePresModel
	    ParameterId["NewAxisRange"] = "newAxisRange";
	    // DPI_AxisOptions, having type AxisOptionsPresModel
	    ParameterId["AxisOptions"] = "axis";
	    // DPI_AxisMajorTicks, having type TickMarkInfoPresModel
	    ParameterId["AxisMajorTicks"] = "axisMajorTicks";
	    // DPI_AxisMinorTicks, having type TickMarkInfoPresModel
	    ParameterId["AxisMinorTicks"] = "axisMinorTicks";
	    // DPI_EditAxisDialog, having type EditAxisDialogPresModel
	    ParameterId["EditAxisDialog"] = "editAxisDialog";
	    // DPI_MarkLabels, having type ScenePresModel
	    ParameterId["MarkLabels"] = "markLabels";
	    // DPI_Scene, having type ScenePresModel
	    ParameterId["Scene"] = "scene";
	    // DPI_MapServer, having type MapServerPresModel
	    ParameterId["MapServer"] = "mapServer";
	    // DPI_VisualList, having type VisualListPresModel
	    ParameterId["VisualList"] = "visualList";
	    // DPI_DrawFirst, having type VisualListPresModel[]
	    ParameterId["DrawFirst"] = "drawFirst";
	    // DPI_DrawLast, having type VisualListPresModel[]
	    ParameterId["DrawLast"] = "drawLast";
	    // DPI_DrawPane, having type VisualListPresModel[]
	    ParameterId["DrawPane"] = "drawPane";
	    // DPI_UserPaneInfo, having type UserPaneInfoPresModel
	    ParameterId["UserPaneInfo"] = "userPaneInfo";
	    // DPI_AnalyticsPane, having type AnalyticsPanePresModel
	    ParameterId["AnalyticsPane"] = "analyticsPane";
	    // DPI_AnalyticsObjectItem, having type AnalyticsObjectItemPresModel
	    ParameterId["AnalyticsObjectItem"] = "analyticsObjectItem";
	    // DPI_AnalyticsObjectItems, having type AnalyticsObjectItemPresModel[]
	    ParameterId["AnalyticsObjectItems"] = "analyticsObjectItems";
	    // DPI_AnalyticsObjectGroup, having type AnalyticsObjectGroupPresModel
	    ParameterId["AnalyticsObjectGroup"] = "analyticsObjectGroup";
	    // DPI_AnalyticsObjectGroups, having type AnalyticsObjectGroupPresModel[]
	    ParameterId["AnalyticsObjectGroups"] = "analyticsObjectGroups";
	    // DPI_DropZoneItem, having type DropZoneItemPresModel
	    ParameterId["DropZoneItem"] = "dropZoneItem";
	    // DPI_DropZoneItems, having type DropZoneItemPresModel[]
	    ParameterId["DropZoneItems"] = "dropZoneItems";
	    // DPI_DropTargetInfo, having type DropTargetInfoPresModel
	    ParameterId["DropTargetInfo"] = "dropTargetInfo";
	    // DPI_Pane, having type PanePresModel
	    ParameterId["Pane"] = "pane";
	    // DPI_Panes, having type PanePresModel[]
	    ParameterId["Panes"] = "panes";
	    // DPI_RadialSelectionDistanceInfo, having type RadialSelectionDistanceInfoPresModel
	    ParameterId["RadialSelectionDistanceInfo"] = "radialSelectionDistanceInfo";
	    // DPI_MapScaleInfo, having type MapScaleInfoPresModel
	    ParameterId["MapScaleInfo"] = "mapScaleInfo";
	    // DPI_RenderNode, having type RenderNodePresModel
	    ParameterId["RenderNode"] = "renderNode";
	    // DPI_RenderNodes, having type RenderNodePresModel[]
	    ParameterId["RenderNodes"] = "renderNodes";
	    // DPI_PredictionBand, having type PredictionBandPresModel
	    ParameterId["PredictionBand"] = "predictionBand";
	    // DPI_PredictionWhisker, having type PredictionWhiskerPresModel
	    ParameterId["PredictionWhisker"] = "predictionWhisker";
	    // DPI_DrawGroup, having type DrawPointsPresModel
	    ParameterId["DrawGroup"] = "drawGroup";
	    // DPI_ClipReset, having type DrawItemPresModel
	    ParameterId["ClipReset"] = "clipReset";
	    // DPI_DrawItem, having type DrawItemPresModel
	    ParameterId["DrawItem"] = "drawItem";
	    // DPI_TransformPop, having type DrawItemPresModel
	    ParameterId["TransformPop"] = "transformPop";
	    // DPI_TransformPush, having type DrawItemPresModel
	    ParameterId["TransformPush"] = "transformPush";
	    // DPI_DrawItems, having type DrawItemPresModel[]
	    ParameterId["DrawItems"] = "drawItems";
	    // DPI_ClipRect, having type DrawPointsPresModel
	    ParameterId["ClipRect"] = "clipRect";
	    // DPI_DrawEllipse, having type DrawPointsPresModel
	    ParameterId["DrawEllipse"] = "drawEllipse";
	    // DPI_DrawFillEllipse, having type DrawPointsPresModel
	    ParameterId["DrawFillEllipse"] = "drawFillEllipse";
	    // DPI_DrawFillPolygon, having type DrawPointsPresModel
	    ParameterId["DrawFillPolygon"] = "drawFillPolygon";
	    // DPI_DrawFillRect, having type DrawPointsPresModel
	    ParameterId["DrawFillRect"] = "drawFillRect";
	    // DPI_DrawPolygon, having type DrawPointsPresModel
	    ParameterId["DrawPolygon"] = "drawPolygon";
	    // DPI_DrawPolyline, having type DrawPointsPresModel
	    ParameterId["DrawPolyline"] = "drawPolyline";
	    // DPI_DrawRect, having type DrawPointsPresModel
	    ParameterId["DrawRect"] = "drawRect";
	    // DPI_DrawFillPath, having type DrawPathPresModel
	    ParameterId["DrawFillPath"] = "drawFillPath";
	    // DPI_DrawPath, having type DrawPathPresModel
	    ParameterId["DrawPath"] = "drawPath";
	    // DPI_DrawText, having type DrawTextPresModel
	    ParameterId["DrawText"] = "drawText";
	    // DPI_DrawImage, having type DrawImagePresModel
	    ParameterId["DrawImage"] = "drawImage";
	    // DPI_ImageTileInfo, having type ImageTileInfoPresModel
	    ParameterId["ImageTileInfo"] = "tileInfo";
	    // DPI_ImageTileInfos, having type ImageTileInfoPresModel[]
	    ParameterId["ImageTileInfos"] = "tileInfos";
	    // DPI_DrawImageTiles, having type DrawImageTilesPresModel
	    ParameterId["DrawImageTiles"] = "drawImageTiles";
	    // DPI_DrawPen, having type DrawPenPresModel
	    ParameterId["DrawPen"] = "drawPen";
	    // DPI_DrawSolidBrush, having type DrawSolidBrushPresModel
	    ParameterId["DrawSolidBrush"] = "drawSolidBrush";
	    // DPI_DrawTextProperties, having type DrawTextPropertiesPresModel
	    ParameterId["DrawTextProperties"] = "drawTextProps";
	    // DPI_DrawGradientBrush, having type DrawGradientBrushPresModel
	    ParameterId["DrawGradientBrush"] = "drawGradientBrush";
	    // DPI_DrawTransform, having type DrawTransformPresModel
	    ParameterId["DrawTransform"] = "transform";
	    // DPI_DrawAntialias, having type DrawAntialiasPresModel
	    ParameterId["DrawAntialias"] = "drawAntialias";
	    // DPI_ImageDictionary, having type ImageDictionaryPresModel
	    ParameterId["ImageDictionary"] = "imageDictionary";
	    // DPI_ColorDictionary, having type ColorDictionaryPresModel
	    ParameterId["ColorDictionary"] = "colorDictionary";
	    // DPI_MarkShape, having type MarkShapePresModel
	    ParameterId["MarkShape"] = "markShape";
	    // DPI_MarkShapeList, having type MarkShapePresModel[]
	    ParameterId["MarkShapeList"] = "markShapeList";
	    // DPI_PaneDescriptor, having type PaneDescriptorPresModel
	    ParameterId["PaneDescriptor"] = "paneDescriptor";
	    // DPI_PDMarks, having type PDMarksPresModel
	    ParameterId["PDMarks"] = "pdMarks";
	    // DPI_PDMarksMap, having type Dictionary(of PDMarksPresModel)
	    ParameterId["PDMarksMap"] = "pdMarksMap";
	    // DPI_LabelTextTable, having type LabelTextTable
	    ParameterId["LabelTextTable"] = "labelTextTable";
	    // DPI_TextTableHelper, having type TextTableHelper
	    ParameterId["TextTableHelper"] = "textTableHelper";
	    // DPI_GeometryTable, having type GeometryTable
	    ParameterId["GeometryTable"] = "geometryTable";
	    // DPI_PaneMarks, having type PaneMarksPresModel
	    ParameterId["PaneMarks"] = "paneMarks";
	    // DPI_PaneMarksList, having type PaneMarksPresModel[]
	    ParameterId["PaneMarksList"] = "paneMarksList";
	    // DPI_BrushingSelection, having type SelectionPresModel
	    ParameterId["BrushingSelection"] = "brushing";
	    // DPI_Selection, having type SelectionPresModel
	    ParameterId["Selection"] = "selection";
	    // DPI_BrushingSelectionList, having type SelectionPresModel[]
	    ParameterId["BrushingSelectionList"] = "brushingSelectionList";
	    // DPI_SelectionList, having type SelectionPresModel[]
	    ParameterId["SelectionList"] = "selectionList";
	    // DPI_ShelfSelectionModel, having type ShelfSelectionPresModel
	    ParameterId["ShelfSelectionModel"] = "shelfSelectionModel";
	    // DPI_ShelfSelectionModels, having type ShelfSelectionPresModel[]
	    ParameterId["ShelfSelectionModels"] = "shelfSelectionModels";
	    // DPI_ShelfSelectionsModel, having type ShelfSelectionsPresModel
	    ParameterId["ShelfSelectionsModel"] = "shelfSelectionsModel";
	    // DPI_DimValSelectionModel, having type DimensionValueSelectionPresModel
	    ParameterId["DimValSelectionModel"] = "dimensionValueSelectionModel";
	    // DPI_DimValSelectionModels, having type DimensionValueSelectionPresModel[]
	    ParameterId["DimValSelectionModels"] = "dimensionValueSelectionModels";
	    // DPI_HierValSelectionModel, having type HierarchicalValueSelectionPresModel
	    ParameterId["HierValSelectionModel"] = "hierarchicalValueSelectionModel";
	    // DPI_HierValSelectionModels, having type HierarchicalValueSelectionPresModel[]
	    ParameterId["HierValSelectionModels"] = "hierarchicalValueSelectionModels";
	    // DPI_QuantRangeSelectionModel, having type QuantativeRangeSelectionPresModel
	    ParameterId["QuantRangeSelectionModel"] = "quantativeRangeSelectionModel";
	    // DPI_QuantRangeSelectionModels, having type QuantativeRangeSelectionPresModel[]
	    ParameterId["QuantRangeSelectionModels"] = "quantativeRangeSelectionModels";
	    // DPI_QuantValueSelectionModel, having type QuantativeValueSelectionPresModel
	    ParameterId["QuantValueSelectionModel"] = "quantativeValueSelectionModel";
	    // DPI_QuantValueSelectionModels, having type QuantativeValueSelectionPresModel[]
	    ParameterId["QuantValueSelectionModels"] = "quantativeValueSelectionModels";
	    // DPI_LegendSelectionInfo, having type LegendSelectionInfoPresModel
	    ParameterId["LegendSelectionInfo"] = "legendSelectionInfo";
	    // DPI_NodeReference, having type NodeReferencePresModel
	    ParameterId["NodeReference"] = "nodeReference";
	    // DPI_PageReference, having type PageReferencePresModel
	    ParameterId["PageReference"] = "pageReference";
	    // DPI_OrientedNodeReference, having type OrientedNodeReferencePresModel
	    ParameterId["OrientedNodeReference"] = "orientedNodeReference";
	    // DPI_OrientedNodeReferences, having type OrientedNodeReferencePresModel[]
	    ParameterId["OrientedNodeReferences"] = "orientedNodeReferences";
	    // DPI_SelectionData, having type SelectionDataPresModel
	    ParameterId["SelectionData"] = "selectionData";
	    // DPI_HighlightedData, having type HighlightedDataPresModel
	    ParameterId["HighlightedData"] = "highlightedData";
	    // DPI_Node, having type NodePresModel
	    ParameterId["Node"] = "node";
	    // DPI_Nodes, having type NodePresModel[]
	    ParameterId["Nodes"] = "nodes";
	    // DPI_SelectedNodes, having type NodePresModel[]
	    ParameterId["SelectedNodes"] = "selectedNodes";
	    // DPI_UserAction, having type ActionPresModel
	    ParameterId["UserAction"] = "userAction";
	    // DPI_UserActions, having type ActionPresModel[]
	    ParameterId["UserActions"] = "userActions";
	    // DPI_LinkSpec, having type LinkSpecPresModel
	    ParameterId["LinkSpec"] = "linkSpec";
	    // DPI_ActionSpecificationModel, having type ActionSpecificationPresModel
	    ParameterId["ActionSpecificationModel"] = "actionSpecification";
	    // DPI_LinkSpecification, having type LinkSpecificationPresModel
	    ParameterId["LinkSpecification"] = "linkSpecification";
	    // DPI_ScriptDescription, having type ScriptDescriptionPresModel
	    ParameterId["ScriptDescription"] = "scriptDescription";
	    // DPI_ActionSource, having type ActionSourcePresModel
	    ParameterId["ActionSource"] = "actionSource";
	    // DPI_FieldExprItem, having type FieldExprItemPresModel
	    ParameterId["FieldExprItem"] = "fieldExpressionItem";
	    // DPI_FieldExprVector, having type FieldExprItemPresModel[]
	    ParameterId["FieldExprVector"] = "fieldExpressionVector";
	    // DPI_ActionComboItem, having type ActionComboItemPresModel
	    ParameterId["ActionComboItem"] = "actionComboItem";
	    // DPI_ActionComboVector, having type ActionComboItemPresModel[]
	    ParameterId["ActionComboVector"] = "actionComboVector";
	    // DPI_ActionSourceCombo, having type ActionSourceComboPresModel
	    ParameterId["ActionSourceCombo"] = "actionSourceCombo";
	    // DPI_ActionDestCombo, having type ActionComboPresModel
	    ParameterId["ActionDestCombo"] = "actionDestCombo";
	    // DPI_ActionFieldList, having type ActionFieldListPresModel
	    ParameterId["ActionFieldList"] = "actionFieldList";
	    // DPI_EditBrushAction, having type EditBrushActionPresModel
	    ParameterId["EditBrushAction"] = "editBrushAction";
	    // DPI_UpdateActionSource, having type UpdateActionSourcePresModel
	    ParameterId["UpdateActionSource"] = "updateActionSource";
	    // DPI_UpdateBrushAction, having type UpdateBrushActionPresModel
	    ParameterId["UpdateBrushAction"] = "updateBrushAction";
	    // DPI_ActionWarnings, having type ActionWarningsPresModel
	    ParameterId["ActionWarnings"] = "actionWarnings";
	    // DPI_EditHyperlinkAction, having type EditHyperlinkActionPresModel
	    ParameterId["EditHyperlinkAction"] = "editHyperlinkAction";
	    // DPI_UpdateHyperlinkAction, having type UpdateHyperlinkActionPresModel
	    ParameterId["UpdateHyperlinkAction"] = "updateHyperlinkAction";
	    // DPI_EditSheetLinkAction, having type EditSheetLinkActionPresModel
	    ParameterId["EditSheetLinkAction"] = "editSheetlinkAction";
	    // DPI_UpdateSheetLinkAction, having type UpdateSheetLinkActionPresModel
	    ParameterId["UpdateSheetLinkAction"] = "updateSheetlinkAction";
	    // DPI_ActionItem, having type ActionItemPresModel
	    ParameterId["ActionItem"] = "actionItem";
	    // DPI_ActionItemList, having type ActionItemPresModel[]
	    ParameterId["ActionItemList"] = "actionItemList";
	    // DPI_DataSegment, having type DataSegmentPresModel
	    ParameterId["DataSegment"] = "dataSegment";
	    // DPI_DataSegments, having type Dictionary(of DataSegmentPresModel)
	    ParameterId["DataSegments"] = "dataSegments";
	    // DPI_DataDictionary, having type DataDictionaryPresModel
	    ParameterId["DataDictionary"] = "dataDictionary";
	    // DPI_VizData, having type VizDataPresModel
	    ParameterId["VizData"] = "vizData";
	    // DPI_VizColumn, having type VizColumnPresModel
	    ParameterId["VizColumn"] = "vizColumn";
	    // DPI_VizColumns, having type VizColumnPresModel[]
	    ParameterId["VizColumns"] = "vizColumns";
	    // DPI_VizDataColumn, having type VizDataColumnPresModel
	    ParameterId["VizDataColumn"] = "vizDataColumn";
	    // DPI_VizDataColumns, having type VizDataColumnPresModel[]
	    ParameterId["VizDataColumns"] = "vizDataColumns";
	    // DPI_VizPaneColumn, having type VizPaneColumnPresModel
	    ParameterId["VizPaneColumn"] = "vizPaneColumn";
	    // DPI_VizPaneColumns, having type VizPaneColumnPresModel[]
	    ParameterId["VizPaneColumns"] = "vizPaneColumns";
	    // DPI_PaneColumns, having type PaneColumnsPresModel
	    ParameterId["PaneColumns"] = "paneColumns";
	    // DPI_PaneColumnsList, having type PaneColumnsPresModel[]
	    ParameterId["PaneColumnsList"] = "paneColumnsList";
	    // DPI_PaneColumnsData, having type PaneColumnsDataPresModel
	    ParameterId["PaneColumnsData"] = "paneColumnsData";
	    // DPI_FilterContext, having type FilterContextPresModel
	    ParameterId["FilterContext"] = "filterContext";
	    // DPI_UberTipPaneData, having type UberTipPaneDataPresModel
	    ParameterId["UberTipPaneData"] = "ubertipPaneData";
	    // DPI_UberTipPaneDatas, having type UberTipPaneDataPresModel[]
	    ParameterId["UberTipPaneDatas"] = "ubertipPaneDatas";
	    // DPI_UberTipData, having type UberTipDataPresModel
	    ParameterId["UberTipData"] = "ubertipData";
	    // DPI_RefLineTip, having type RefLineTipPresModel
	    ParameterId["RefLineTip"] = "refLineTip";
	    // DPI_RefLineTips, having type RefLineTipPresModel[]
	    ParameterId["RefLineTips"] = "refLineTips";
	    // DPI_NumericBin, having type NumericBinPresModel
	    ParameterId["NumericBin"] = "numericBin";
	    // DPI_NumericBinDialog, having type NumericBinDialogPresModel
	    ParameterId["NumericBinDialog"] = "numericBinDialog";
	    // DPI_DomainRange, having type DomainRangePresModel
	    ParameterId["DomainRange"] = "domainRange";
	    // DPI_BinSizeInfo, having type BinSizeInfoPresModel
	    ParameterId["BinSizeInfo"] = "binSizeInfo";
	    // DPI_DetailedErrorDialog, having type DetailedErrorPresModel
	    ParameterId["DetailedErrorDialog"] = "detailedErrorDialog";
	    // DPI_DragSourcePosition, having type ShelfDropPositionPresModel
	    ParameterId["DragSourcePosition"] = "shelfDragSourcePosition";
	    // DPI_DropTargetPosition, having type ShelfDropPositionPresModel
	    ParameterId["DropTargetPosition"] = "shelfDropTargetPosition";
	    // DPI_ShelfDropPosition, having type ShelfDropPositionPresModel
	    ParameterId["ShelfDropPosition"] = "shelfDropPosition";
	    // DPI_ShelfDropPositions, having type ShelfDropPositionPresModel[]
	    ParameterId["ShelfDropPositions"] = "shelfDropPositions";
	    // DPI_ShelfDropModel, having type ShelfDropPresModel
	    ParameterId["ShelfDropModel"] = "shelfDropModel";
	    // DPI_ShelfDropModels, having type ShelfDropPresModel[]
	    ParameterId["ShelfDropModels"] = "shelfDropModels";
	    // DPI_Drag, having type DragPresModel
	    ParameterId["Drag"] = "drag";
	    // DPI_SceneElement, having type SceneElementPresModel
	    ParameterId["SceneElement"] = "sceneElement";
	    // DPI_SceneElements, having type SceneElementPresModel[]
	    ParameterId["SceneElements"] = "sceneElements";
	    // DPI_QuickFilterType, having type QuickFilterType
	    ParameterId["QuickFilterType"] = "quickFilterType";
	    // DPI_CatMode, having type QuickFilterCategoricalMode
	    ParameterId["CatMode"] = "categoricalMode";
	    // DPI_CatCtrl, having type QuickFilterCategoricalCtrl
	    ParameterId["CatCtrl"] = "categoricalControl";
	    // DPI_QuantMode, having type QuickFilterQuantitativeMode
	    ParameterId["QuantMode"] = "quantitativeMode";
	    // DPI_QuantCtrl, having type QuickFilterQuantitativeCtrl
	    ParameterId["QuantCtrl"] = "quantitativeControl";
	    // DPI_ZoneCommon, having type ZoneCommonPresModel
	    ParameterId["ZoneCommon"] = "zoneCommon";
	    // DPI_ZoneCommonListItems, having type ZoneCommonPresModel[]
	    ParameterId["ZoneCommonListItems"] = "zoneCommonListItems";
	    // DPI_Zone, having type ZonePresModel
	    ParameterId["Zone"] = "zone";
	    // DPI_Zones, having type Dictionary(of ZonePresModel)
	    ParameterId["Zones"] = "zones";
	    // DPI_ImageZone, having type ImageZonePresModel
	    ParameterId["ImageZone"] = "imageZone";
	    // DPI_WebZone, having type WebZonePresModel
	    ParameterId["WebZone"] = "webZone";
	    // DPI_AddInZone, having type AddInZonePresModel
	    ParameterId["AddInZone"] = "addInZone";
	    // DPI_ButtonZonePresModel, having type ButtonZonePresModel
	    ParameterId["ButtonZonePresModel"] = "buttonZone";
	    // DPI_ButtonConfigDialog, having type ButtonConfigDialogPresModel
	    ParameterId["ButtonConfigDialog"] = "buttonConfigDialog";
	    // DPI_ZoneEdgeMoveType, having type ZoneEdgeMove
	    ParameterId["ZoneEdgeMoveType"] = "zoneEdgeMoveType";
	    // DPI_ZoneSide, having type SideType
	    ParameterId["ZoneSide"] = "zoneSide";
	    // DPI_SnapPoint, having type SnapPointPresModel
	    ParameterId["SnapPoint"] = "snapPoint";
	    // DPI_SnapPoints, having type SnapPointPresModel[]
	    ParameterId["SnapPoints"] = "snapPoints";
	    // DPI_TargetPreviewPair, having type DragDropTargetPreviewPairPresModel
	    ParameterId["TargetPreviewPair"] = "targetPreviewPair";
	    // DPI_TargetPreviewPairs, having type DragDropTargetPreviewPairPresModel[]
	    ParameterId["TargetPreviewPairs"] = "targetPreviewPairs";
	    // DPI_ContainerGuide, having type DragDropContainerGuidePresModel
	    ParameterId["ContainerGuide"] = "containerGuide";
	    // DPI_ContainerGuides, having type DragDropContainerGuidePresModel[]
	    ParameterId["ContainerGuides"] = "containerGuides";
	    // DPI_ZoneBorder, having type DragDropZoneBorderPresModel
	    ParameterId["ZoneBorder"] = "zoneBorder";
	    // DPI_ZoneBorders, having type DragDropZoneBorderPresModel[]
	    ParameterId["ZoneBorders"] = "zoneBorders";
	    // DPI_DashboardDragDrop, having type DashboardDragDropPresModel
	    ParameterId["DashboardDragDrop"] = "zoneDragDrop";
	    // DPI_DragZoneResize, having type DragZoneResizePresModel
	    ParameterId["DragZoneResize"] = "zoneResize";
	    // DPI_DashboardText, having type TextRegionPresModel
	    ParameterId["DashboardText"] = "dashboardText";
	    // DPI_DashboardTitle, having type TextRegionPresModel
	    ParameterId["DashboardTitle"] = "dashboardTitle";
	    // DPI_QuickFilterTitle, having type TextRegionPresModel
	    ParameterId["QuickFilterTitle"] = "quickFilterTitle";
	    // DPI_VisualCaption, having type TextRegionPresModel
	    ParameterId["VisualCaption"] = "visualCaption";
	    // DPI_VisualTitle, having type TextRegionPresModel
	    ParameterId["VisualTitle"] = "visualTitle";
	    // DPI_ZoneTitleRegion, having type TextRegionPresModel
	    ParameterId["ZoneTitleRegion"] = "zoneTitle";
	    // DPI_ForecastOptions, having type ForecastPresModel
	    ParameterId["ForecastOptions"] = "forecastOptions";
	    // DPI_ForecastDescription, having type ForecastDescribePresModel
	    ParameterId["ForecastDescription"] = "forecastDescription";
	    // DPI_WorkgroupPublishObject, having type WorkgroupPublishObjectPresModel
	    ParameterId["WorkgroupPublishObject"] = "publishDataSource";
	    // DPI_PublishPermissionsSummary, having type PublishPermissionsSummaryPresModel
	    ParameterId["PublishPermissionsSummary"] = "publishPermissionsSummary";
	    // DPI_CheckNameResults, having type CheckNameResultsPresModel
	    ParameterId["CheckNameResults"] = "checkNameResults";
	    // DPI_ValidatePublishViewsResult, having type ValidatePublishViewsResultPresModel
	    ParameterId["ValidatePublishViewsResult"] = "validatePublishViewsResult";
	    // DPI_PublishAuthenticationSettings, having type PublishAuthenticationSettingsPresModel
	    ParameterId["PublishAuthenticationSettings"] = "publishAuthenticationSettings";
	    // DPI_ManageDatasources, having type ManageDatasourcesPresModel
	    ParameterId["ManageDatasources"] = "manageDatasources";
	    // DPI_CredentialsAuthSettings, having type CredentialsAuthSettingsPresModel
	    ParameterId["CredentialsAuthSettings"] = "credentialsAuthSettings";
	    // DPI_ConnectionCredentialsAuthSettings, having type ConnectionCredentialsAuthSettingsPresModel
	    ParameterId["ConnectionCredentialsAuthSettings"] = "connectionCredentialsAuthSettings";
	    // DPI_ConnectionCredentialsAuthSettingsList, having type ConnectionCredentialsAuthSettingsPresModel[]
	    ParameterId["ConnectionCredentialsAuthSettingsList"] = "connectionCredentialsAuthSettingsList";
	    // DPI_PublishDatasourceFromWorkbookInfo, having type PublishDatasourceFromWorkbookInfoPresModel
	    ParameterId["PublishDatasourceFromWorkbookInfo"] = "publishDatasourceFromWorkbookInfo";
	    // DPI_PublishDatasourcesFromWorkbookInfo, having type PublishDatasourceFromWorkbookInfoPresModel[]
	    ParameterId["PublishDatasourcesFromWorkbookInfo"] = "publishDatasourcesFromWorkbookInfo";
	    // DPI_PublishSheet, having type PublishSheetPresModel
	    ParameterId["PublishSheet"] = "publishSheet";
	    // DPI_PublishSheets, having type PublishSheetPresModel[]
	    ParameterId["PublishSheets"] = "publishSheets";
	    // DPI_PublishObjectViews, having type PublishObjectViewsPresModel
	    ParameterId["PublishObjectViews"] = "publishObjectViews";
	    // DPI_PublishObjectPublishSheetResults, having type PublishObjectPublishSheetResultsPresModel
	    ParameterId["PublishObjectPublishSheetResults"] = "publishObjectPublishSheetResults";
	    // DPI_RefreshExtractSchedulingSettings, having type RefreshExtractSchedulingSettingsPresModel
	    ParameterId["RefreshExtractSchedulingSettings"] = "refreshExtractSchedulingSettings";
	    // DPI_SetRefreshExtractScheduleResult, having type SetRefreshExtractScheduleResultPresModel
	    ParameterId["SetRefreshExtractScheduleResult"] = "setRefreshExtractScheduleResult";
	    // DPI_CheckPublishObjectNameWarningsResults, having type CheckPublishObjectNameWarningsResultsPresModel
	    ParameterId["CheckPublishObjectNameWarningsResults"] = "checkPublishObjectNameWarningsResults";
	    // DPI_PublishDatasourceOnWorkbookPublishResults, having type PublishDatasourceOnWorkbookPublishResultsPresModel
	    ParameterId["PublishDatasourceOnWorkbookPublishResults"] = "publishDatasourceOnWorkbookPublishResult";
	    // DPI_PublishDataSourceResult, having type PublishDataSourceResultPresModel
	    ParameterId["PublishDataSourceResult"] = "publishDataSourceResult";
	    // DPI_PublishWarningMessage, having type PublishWarningMessagePresModel
	    ParameterId["PublishWarningMessage"] = "publishWarningMessage";
	    // DPI_MustDowngradeToPublishWarningMessagePresModel, having type PublishWarningMessagePresModel
	    ParameterId["MustDowngradeToPublishWarningMessagePresModel"] = "mustDowngradeToPublishWarningMessagePresModel";
	    // DPI_PublishSelectedAttributes, having type PublishSelectedAttributesPresModel
	    ParameterId["PublishSelectedAttributes"] = "publishSelectedAttributes";
	    // DPI_AutosaveFile, having type AutosaveFilePresModel
	    ParameterId["AutosaveFile"] = "autosaveFile";
	    // DPI_AutosaveFiles, having type AutosaveFilePresModel[]
	    ParameterId["AutosaveFiles"] = "autosaveFiles";
	    // DPI_FunctionGroup, having type FunctionGroup
	    ParameterId["FunctionGroup"] = "funcGrp";
	    // DPI_FunctionGroups, having type FunctionGroup[]
	    ParameterId["FunctionGroups"] = "funcGrps";
	    // DPI_FunctionArgType, having type FunctionArgType
	    ParameterId["FunctionArgType"] = "funcArgType";
	    // DPI_FunctionArgTypes, having type FunctionArgType[]
	    ParameterId["FunctionArgTypes"] = "funcArgTypes";
	    // DPI_CalculationStyle, having type CalcStyle
	    ParameterId["CalculationStyle"] = "calculationStyle";
	    // DPI_Calculation, having type CalculationPresModel
	    ParameterId["Calculation"] = "calculation";
	    // DPI_TypeInPill, having type CalculationPresModel
	    ParameterId["TypeInPill"] = "typeInPill";
	    // DPI_CalcErrorInfo, having type CalcErrorInfoPresModel
	    ParameterId["CalcErrorInfo"] = "errorInfo";
	    // DPI_CalcErrorInfos, having type CalcErrorInfoPresModel[]
	    ParameterId["CalcErrorInfos"] = "errorInfoList";
	    // DPI_CalcualtionValidation, having type CalculationValidationPresModel
	    ParameterId["CalcualtionValidation"] = "calculationValidation";
	    // DPI_ExpressionFunction, having type ExpressionFunctionPresModel
	    ParameterId["ExpressionFunction"] = "expressionFunc";
	    // DPI_ExpressionFunctions, having type ExpressionFunctionPresModel[]
	    ParameterId["ExpressionFunctions"] = "expressionFuncList";
	    // DPI_ExpressionFunctionsPM, having type ExpressionFunctionsPresModel
	    ParameterId["ExpressionFunctionsPM"] = "expressionFuncPm";
	    // DPI_StyleToken, having type StyleTokenPresModel
	    ParameterId["StyleToken"] = "styleToken";
	    // DPI_StyleTokens, having type StyleTokenPresModel[]
	    ParameterId["StyleTokens"] = "styleTokenList";
	    // DPI_CalcEditorTextSelection, having type CalcEditorTextSelectionPresModel
	    ParameterId["CalcEditorTextSelection"] = "calcEditorTextSelection";
	    // DPI_AutoCompleteItemType, having type AutoCompleteItemType
	    ParameterId["AutoCompleteItemType"] = "autocompleteType";
	    // DPI_AutoCompleteItem, having type AutoCompleteItemPresModel
	    ParameterId["AutoCompleteItem"] = "autocompleteItem";
	    // DPI_AutoCompleteItems, having type AutoCompleteItemPresModel[]
	    ParameterId["AutoCompleteItems"] = "autocompleteItemList";
	    // DPI_CalculationAutoCompleteContextMenu, having type CalculationAutoCompleteContextMenuPresModel
	    ParameterId["CalculationAutoCompleteContextMenu"] = "calculationAutocompleteContextMenu";
	    // DPI_CalcApplyResult, having type CalcApplyResult
	    ParameterId["CalcApplyResult"] = "calculationApplyResult";
	    // DPI_RampBorderStyledBox, having type StyledBoxPresModel
	    ParameterId["RampBorderStyledBox"] = "rampBorderStyledBox";
	    // DPI_StyledBox, having type StyledBoxPresModel
	    ParameterId["StyledBox"] = "styledBox";
	    // DPI_GlobalStyledBox, having type StyledBoxPresModel
	    ParameterId["GlobalStyledBox"] = "globalStyledBox";
	    // DPI_StyleContext, having type StyleContextPresModel
	    ParameterId["StyleContext"] = "styleContext";
	    // DPI_CurrentTextStyle, having type TextStylePresModel
	    ParameterId["CurrentTextStyle"] = "currentTextStyle";
	    // DPI_LabelTextStyle, having type TextStylePresModel
	    ParameterId["LabelTextStyle"] = "labelTextStyle";
	    // DPI_OriginalTextStyle, having type TextStylePresModel
	    ParameterId["OriginalTextStyle"] = "originalTextStyle";
	    // DPI_SelectedTextStyleModel, having type TextStylePresModel
	    ParameterId["SelectedTextStyleModel"] = "selectedTextStyleModel";
	    // DPI_SwatchTextStyleModel, having type TextStylePresModel
	    ParameterId["SwatchTextStyleModel"] = "swatchTextStyle";
	    // DPI_TextStyleModel, having type TextStylePresModel
	    ParameterId["TextStyleModel"] = "textStyle";
	    // DPI_TitleStyleModel, having type TextStylePresModel
	    ParameterId["TitleStyleModel"] = "titleStyleModel";
	    // DPI_PropertyBag, having type PropertyBagPresModel
	    ParameterId["PropertyBag"] = "propBagWrapper";
	    // DPI_PresModelMap, having type Dictionary(of PropertyBagPresModel)
	    ParameterId["PresModelMap"] = "presModelMap";
	    // DPI_PresentationLayerNotifications, having type PresModelMapPresModel
	    ParameterId["PresentationLayerNotifications"] = "presentationLayerNotifications";
	    // DPI_SecondaryInfo, having type PresModelMapPresModel
	    ParameterId["SecondaryInfo"] = "secondaryInfo";
	    // DPI_ClientDashboardUIMetric, having type ClientDashboardUIMetricPresModel
	    ParameterId["ClientDashboardUIMetric"] = "clientDashboardUiMetric";
	    // DPI_ClientDashboardUIMetrics, having type ClientDashboardUIMetricPresModel[]
	    ParameterId["ClientDashboardUIMetrics"] = "clientDashboardUiMetrics";
	    // DPI_ClientDashboardUIMetricContainer, having type ClientDashboardUIMetricContainerPresModel
	    ParameterId["ClientDashboardUIMetricContainer"] = "clientDashboardUiMetricContainer";
	    // DPI_ExtSvcConfig, having type ExtSvcConfigPresModel
	    ParameterId["ExtSvcConfig"] = "extSvcConfig";
	    // DPI_StoryboardSheetItem, having type StoryboardSheetItemPresModel
	    ParameterId["StoryboardSheetItem"] = "storyboardSheetItem";
	    // DPI_StoryboardSheetItems, having type StoryboardSheetItemPresModel[]
	    ParameterId["StoryboardSheetItems"] = "storyboardSheetItems";
	    // DPI_StoryboardSheetList, having type StoryboardSheetListPresModel
	    ParameterId["StoryboardSheetList"] = "storyboardSheetList";
	    // DPI_FitToStoryBoardOptionItem, having type FitToStoryBoardOptionItemPresModel
	    ParameterId["FitToStoryBoardOptionItem"] = "fitToStoryboardOptionItem";
	    // DPI_FitToStoryBoardOptionItems, having type FitToStoryBoardOptionItemPresModel[]
	    ParameterId["FitToStoryBoardOptionItems"] = "fitToStoryboardOptionItems";
	    // DPI_FitToStoryBoardOptionList, having type FitToStoryBoardOptionListPresModel
	    ParameterId["FitToStoryBoardOptionList"] = "fitToStoryboardOptionList";
	    // DPI_StoryPointNavItem, having type StoryPointNavItemPresModel
	    ParameterId["StoryPointNavItem"] = "storypointNavItem";
	    // DPI_StoryPointNavItems, having type StoryPointNavItemPresModel[]
	    ParameterId["StoryPointNavItems"] = "storypointNavItems";
	    // DPI_FlipboardNav, having type FlipboardNavPresModel
	    ParameterId["FlipboardNav"] = "flipboardNav";
	    // DPI_ScrollBarStyle, having type ScrollBarStylePresModel
	    ParameterId["ScrollBarStyle"] = "scrollBarStyle";
	    // DPI_DashboardZoneLayoutPane, having type DashboardZoneLayoutPanePresModel
	    ParameterId["DashboardZoneLayoutPane"] = "dashboardZoneLayoutPane";
	    // DPI_SelectedStoryPointStyle, having type StoryPointCaptionStylePresModel
	    ParameterId["SelectedStoryPointStyle"] = "selectedStoryPointStyle";
	    // DPI_UnselectedStoryPointStyle, having type StoryPointCaptionStylePresModel
	    ParameterId["UnselectedStoryPointStyle"] = "unselectedStoryPointStyle";
	    // DPI_FlipboardNavStyle, having type FlipboardNavStylePresModel
	    ParameterId["FlipboardNavStyle"] = "flipboardNavStyle";
	    // DPI_StoryPoint, having type StoryPointPresModel
	    ParameterId["StoryPoint"] = "storyPoint";
	    // DPI_StoryPoints, having type Dictionary(of StoryPointPresModel)
	    ParameterId["StoryPoints"] = "storyPoints";
	    // DPI_Flipboard, having type FlipboardPresModel
	    ParameterId["Flipboard"] = "flipboard";
	    // DPI_StoryPair, having type StoryPairPresModel
	    ParameterId["StoryPair"] = "storyPair";
	    // DPI_StoryPairs, having type StoryPairPresModel[]
	    ParameterId["StoryPairs"] = "storyPairs";
	    // DPI_StoryboardPM, having type StoryboardPresModel
	    ParameterId["StoryboardPM"] = "storyboardPm";
	    // DPI_HiDpiIconDictionary, having type ImageCollectionPresModel
	    ParameterId["HiDpiIconDictionary"] = "hiDpiIconDictionary";
	    // DPI_IconDictionary, having type ImageCollectionPresModel
	    ParameterId["IconDictionary"] = "iconDictionary";
	    // DPI_IconResourceDictionary, having type ImageResourceCollectionPresModel
	    ParameterId["IconResourceDictionary"] = "iconResDictionary";
	    // DPI_DataPreviewWindowMessage, having type DataPreviewWindowMessagePresModel
	    ParameterId["DataPreviewWindowMessage"] = "dataPreviewWindowMessage";
	    // DPI_DataSourceData, having type DataSourceDataPresModel
	    ParameterId["DataSourceData"] = "dataSrcData";
	    // DPI_DataSourceSort, having type DataSourceSortPresModel
	    ParameterId["DataSourceSort"] = "dataSrcSort";
	    // DPI_ColumnInfo, having type DSColumnInfoPresModel
	    ParameterId["ColumnInfo"] = "columnInfo";
	    // DPI_ColumnInfos, having type DSColumnInfoPresModel[]
	    ParameterId["ColumnInfos"] = "columnInfos";
	    // DPI_DataFormatter, having type DVFormatter
	    ParameterId["DataFormatter"] = "dataFormatter";
	    // DPI_JoinDescription, having type JoinDescriptionPresModel
	    ParameterId["JoinDescription"] = "joinDescription";
	    // DPI_JoinDescriptions, having type Dictionary(of JoinDescriptionPresModel)
	    ParameterId["JoinDescriptions"] = "joinDescriptions";
	    // DPI_FileTableInfo, having type FileTableInfoPresModel
	    ParameterId["FileTableInfo"] = "fileTableInfo";
	    // DPI_FieldMapping, having type FieldMappingPresModel
	    ParameterId["FieldMapping"] = "fieldMapping";
	    // DPI_FieldMappingData, having type FieldMappingDataPresModel
	    ParameterId["FieldMappingData"] = "fieldMappingData";
	    // DPI_FieldMappingDataVector, having type FieldMappingDataPresModel[]
	    ParameterId["FieldMappingDataVector"] = "fieldMappingDataVector";
	    // DPI_FrameFinder, having type FrameFinderPresModel
	    ParameterId["FrameFinder"] = "frameFinder";
	    // DPI_SheetLinkFieldMapping, having type SheetLinkFieldMappingPresModel
	    ParameterId["SheetLinkFieldMapping"] = "sheetLinkFieldMapping";
	    // DPI_UnionInfo, having type UnionInfoPresModel
	    ParameterId["UnionInfo"] = "unionInfo";
	    // DPI_UnionTableInfo, having type UnionTableInfoPresMode
	    ParameterId["UnionTableInfo"] = "unionTableInfo";
	    // DPI_UnionTableInfos, having type UnionTableInfoPresModel[]
	    ParameterId["UnionTableInfos"] = "unionTableInfos";
	    // DPI_ConnectionPBUnionInfo, having type PBUnionInfoPresModel
	    ParameterId["ConnectionPBUnionInfo"] = "connectionPbunionInfo";
	    // DPI_ConnectionPBUnionInfos, having type PBUnionInfoPresModel[]
	    ParameterId["ConnectionPBUnionInfos"] = "connectionPbunionInfos";
	    // DPI_JoinClause, having type JoinClausePresModel
	    ParameterId["JoinClause"] = "joinClause";
	    // DPI_JoinClauses, having type JoinClausePresModel[]
	    ParameterId["JoinClauses"] = "joinClauses";
	    // DPI_JoinValidationResult, having type JoinValidationResultPresModel
	    ParameterId["JoinValidationResult"] = "joinValidationResult";
	    // DPI_JoinTableInfo, having type JoinTableInfoPresModel
	    ParameterId["JoinTableInfo"] = "joinTableInfo";
	    // DPI_ParameterInfo, having type JoinTableInfoPresModel
	    ParameterId["ParameterInfo"] = "parameterInfo";
	    // DPI_JoinTableInfos, having type JoinTableInfoPresModel[]
	    ParameterId["JoinTableInfos"] = "joinTableInfos";
	    // DPI_JoinOnCalcInfo, having type JoinOnCalcInfoPresModel
	    ParameterId["JoinOnCalcInfo"] = "joinOnCalcInfo";
	    // DPI_ConnectionSummary, having type ConnectionSummaryPresModel
	    ParameterId["ConnectionSummary"] = "connectionSummary";
	    // DPI_ConnectionSummaries, having type ConnectionSummaryPresModel[]
	    ParameterId["ConnectionSummaries"] = "connectionSummaries";
	    // DPI_TopLevelConnectionDescription, having type TopLevelConnectionDescriptionPresModel
	    ParameterId["TopLevelConnectionDescription"] = "topLevelConnectionDescription";
	    // DPI_DataConnectionTableViewMessages, having type DataConnectionTableViewMessagesPresModel
	    ParameterId["DataConnectionTableViewMessages"] = "dataConnectionTableViewMessages";
	    // DPI_TextTransformScript, having type TextTransformScriptPresModel
	    ParameterId["TextTransformScript"] = "textTransformScript";
	    // DPI_CalendarDateOptions, having type CalendarDateOptionsPresModel
	    ParameterId["CalendarDateOptions"] = "calendarDateOptions";
	    // DPI_GoToWorksheetTooltipPresModel, having type GoToWorksheetTooltipPresModel
	    ParameterId["GoToWorksheetTooltipPresModel"] = "goToWorksheetTooltipPresModel";
	    // DPI_TableCleaningPresModel, having type TableCleaningPresModel
	    ParameterId["TableCleaningPresModel"] = "tableCleaningPresModel";
	    // DPI_PivotPresModel, having type PivotPresModel
	    ParameterId["PivotPresModel"] = "pivotPresModel";
	    // DPI_PivotTreeItemPresModel, having type PivotTreeItemPresModel
	    ParameterId["PivotTreeItemPresModel"] = "pivotTreeItemPresModel";
	    // DPI_PivotTreeItems, having type PivotTreeItemPresModel[]
	    ParameterId["PivotTreeItems"] = "pivotTreeItemsPresModel";
	    // DPI_PivotDisplay, having type PivotDisplayPresModel
	    ParameterId["PivotDisplay"] = "pivotDisplay";
	    // DPI_PivotTag, having type NameColumnsPairPresModel
	    ParameterId["PivotTag"] = "pivotTag";
	    // DPI_PivotGroups, having type NameColumnsPairPresModel[]
	    ParameterId["PivotGroups"] = "pivotGroups";
	    // DPI_DataSourceDropdown, having type DataSourceDropdownPresModel
	    ParameterId["DataSourceDropdown"] = "dataSourceDropdown";
	    // DPI_ConnectionDropdown, having type ConnectionDropdownPresModel
	    ParameterId["ConnectionDropdown"] = "connectionDropdown";
	    // DPI_ActivityEvent, having type ActivityEventPresModel
	    ParameterId["ActivityEvent"] = "activityEvent";
	    // DPI_UIAutomation, having type UIAutomationPresModel
	    ParameterId["UIAutomation"] = "uiAutomation";
	    // DPI_UIAutomationIndex, having type UIAutomationIndexPresModel
	    ParameterId["UIAutomationIndex"] = "uiAutomationIndex";
	    // DPI_UIAutomationIndexList, having type UIAutomationIndexPresModel[]
	    ParameterId["UIAutomationIndexList"] = "uiAutomationIndexList";
	    // DPI_UIAutomationComponentInfo, having type UIAutomationComponentInfoPresModel
	    ParameterId["UIAutomationComponentInfo"] = "uiAutomationComponentInfo";
	    // DPI_UIAutomationComponentInfoList, having type UIAutomationComponentInfoPresModel[]
	    ParameterId["UIAutomationComponentInfoList"] = "uiAutomationComponentInfoList";
	    // DPI_Geometry, having type GeometryPresModel
	    ParameterId["Geometry"] = "geometry";
	    // DPI_MultiPoint, having type MultiPointPresModel
	    ParameterId["MultiPoint"] = "multiPoint";
	    // DPI_MultiLine, having type MultiLinePresModel
	    ParameterId["MultiLine"] = "multiLine";
	    // DPI_MultiPolygon, having type MultiPolygonPresModel
	    ParameterId["MultiPolygon"] = "multiPolygon";
	    // DPI_Polygon, having type PolygonPresModel
	    ParameterId["Polygon"] = "polygon";
	    // DPI_PolygonList, having type PolygonPresModel[]
	    ParameterId["PolygonList"] = "polygonList";
	    // DPI_Line, having type LinePresModel
	    ParameterId["Line"] = "line";
	    // DPI_LineList, having type LinePresModel[]
	    ParameterId["LineList"] = "lineList";
	    // DPI_TabbedAuthentication, having type TabbedAuthenticationPresModel
	    ParameterId["TabbedAuthentication"] = "tabbedAuthentication";
	    // DPI_TabbedAuthenticationTabInfo, having type TabbedAuthenticationTabInfoPresModel
	    ParameterId["TabbedAuthenticationTabInfo"] = "tabbedAuthenticationTabInfo";
	    // DPI_TabbedAuthenticationTabInfos, having type TabbedAuthenticationTabInfoPresModel[]
	    ParameterId["TabbedAuthenticationTabInfos"] = "tabbedAuthenticationTabInfos";
	    // DPI_GeographicSearchCandidate, having type GeographicSearchCandidatePresModel
	    ParameterId["GeographicSearchCandidate"] = "geographicSearchCandidate";
	    // DPI_GeographicSearchCandidateList, having type GeographicSearchCandidatePresModel[]
	    ParameterId["GeographicSearchCandidateList"] = "geographicSearchCandidateList";
	    // DPI_GeographicSearchResults, having type GeographicSearchPresModel
	    ParameterId["GeographicSearchResults"] = "geographicSearchResults";
	    // DPI_ParamInfo, having type ParameterInfoPresModel
	    ParameterId["ParamInfo"] = "paramInfo";
	    // DPI_ParamInfos, having type ParameterInfoPresModel[]
	    ParameterId["ParamInfos"] = "paramInfos";
	    // DPI_ParamNamespaceInfo, having type ParameterNamespaceInfoInfoPresModel
	    ParameterId["ParamNamespaceInfo"] = "paramNamespaceInfo";
	    // DPI_ParamNamespaceInfos, having type ParameterNamespaceInfoPresModel[]
	    ParameterId["ParamNamespaceInfos"] = "paramNamespaceInfos";
	    // DPI_ParamRegistryInfo, having type ParameterRegistryInfoPresModel
	    ParameterId["ParamRegistryInfo"] = "paramRegistryInfo";
	    // DPI_DataSourceProperties, having type DataSourcePropertiesPresModel
	    ParameterId["DataSourceProperties"] = "connectionProperties";
	    // DPI_ConnectionTypePresModel, having type ConnectionTypePresModel
	    ParameterId["ConnectionTypePresModel"] = "connectionTypePresModel";
	    // DPI_ConnectionTypes, having type ConnectionTypePresModel[]
	    ParameterId["ConnectionTypes"] = "connectionTypes";
	    // DPI_ConnectionTypeGroupPresModel, having type ConnectionTypeGroupPresModel
	    ParameterId["ConnectionTypeGroupPresModel"] = "connectionTypeGroupPresModel";
	    // DPI_SavedDataSourcePresModel, having type SavedDataSourcePresModel
	    ParameterId["SavedDataSourcePresModel"] = "savedDatasourcePresModel";
	    // DPI_SavedDataSources, having type SavedDataSourcePresModel[]
	    ParameterId["SavedDataSources"] = "savedDatasources";
	    // DPI_SavedDataSourcesPresModel, having type SavedDataSourcesPresModel
	    ParameterId["SavedDataSourcesPresModel"] = "savedDatasourcesPresModel";
	    // DPI_OpenPaneItemPresModel, having type OpenPaneItemPresModel
	    ParameterId["OpenPaneItemPresModel"] = "openPaneItemPresModel";
	    // DPI_OpenPaneItems, having type OpenPaneItemPresModel[]
	    ParameterId["OpenPaneItems"] = "openPaneItems";
	    // DPI_OpenPaneItemsPresModel, having type OpenPaneItemsPresModel
	    ParameterId["OpenPaneItemsPresModel"] = "openPaneItemsPresModel";
	    // DPI_VariableValue, having type VariableValuePresModel
	    ParameterId["VariableValue"] = "variableValue";
	    // DPI_VariableValues, having type VariableValuePresModel[]
	    ParameterId["VariableValues"] = "variableValues";
	    // DPI_ServerVariableValue, having type ServerVariableValuePresModel
	    ParameterId["ServerVariableValue"] = "serverVariableValue";
	    // DPI_EditableVariableValue, having type EditableVariableValuePresModel
	    ParameterId["EditableVariableValue"] = "editableVariableValue";
	    // DPI_ServerVariableMetadata, having type ServerVariableMetadataPresModel
	    ParameterId["ServerVariableMetadata"] = "serverVariableMetadata";
	    // DPI_PromptVariable, having type PromptVariablePresModel
	    ParameterId["PromptVariable"] = "promptVariable";
	    // DPI_PromptVariables, having type PromptVariablePresModel[]
	    ParameterId["PromptVariables"] = "promptVariables";
	    // DPI_VariablePromptDialog, having type VariablePromptDialogPresModel
	    ParameterId["VariablePromptDialog"] = "variablePromptDialog";
	    // DPI_VariableValueOperation, having type VariableValueOperationPresModel
	    ParameterId["VariableValueOperation"] = "variableValueOperation";
	    // DPI_VariableValueOperations, having type VariableValueOperationPresModel[]
	    ParameterId["VariableValueOperations"] = "variableValueOperations";
	    // DPI_TableOptionsPresModel, having type TableOptionsPresModel
	    ParameterId["TableOptionsPresModel"] = "tableOptionsPresModel";
	    // DPI_ClientInfoPresModel, having type ClientInfoPresModel
	    ParameterId["ClientInfoPresModel"] = "clientInfoPresModel";
	    // DPI_TableauFileInfoPresModel, having type TableauFileInfoPresModel
	    ParameterId["TableauFileInfoPresModel"] = "tableauFileInfoPresModel";
	    // DPI_DebuggingInfoPresModel, having type DebuggingInfoPresModel
	    ParameterId["DebuggingInfoPresModel"] = "debuggingInfoPresModel";
	    // DPI_RunningThreadInfoPresModel, having type RunningThreadInfoPresModel
	    ParameterId["RunningThreadInfoPresModel"] = "runningThreadInfoPresModel";
	    // DPI_AboutDialogInfoPresModel, having type AboutDialogInfoPresModel
	    ParameterId["AboutDialogInfoPresModel"] = "aboutDialogInfoPresModel";
	    // DPI_HybridUIShowcasePresModel, having type HybridUIShowcasePresModel
	    ParameterId["HybridUIShowcasePresModel"] = "hybridUiShowcasePresModel";
	    // DPI_MenuConfiguration, having type MenuConfigurationPresModel
	    ParameterId["MenuConfiguration"] = "menuConfiguration";
	    // DPI_MenuItem, having type MenuItemPresModel
	    ParameterId["MenuItem"] = "menuItem";
	    // DPI_MenuItemModels, having type MenuItemPresModel[]
	    ParameterId["MenuItemModels"] = "menuItemModels";
	    // DPI_DefaultTextFormat, having type DefaultTextFormatPresModel
	    ParameterId["DefaultTextFormat"] = "defaultTextFormat";
	    // DPI_MapBoxServerInfoPresModel, having type MapBoxServerInfoPresModel
	    ParameterId["MapBoxServerInfoPresModel"] = "mapboxServerInfoPresModel";
	    // DPI_WMSServerInfoPresModel, having type WMSServerInfoPresModel
	    ParameterId["WMSServerInfoPresModel"] = "wmsServerInfoPresModel";
	    // DPI_MapSourceConflictPresModel, having type MapSourceConflictPresModel
	    ParameterId["MapSourceConflictPresModel"] = "mapSourceConflictPresModel";
	    // DPI_EnumeratedSetDialogPresModel, having type EnumeratedSetDialogPresModel
	    ParameterId["EnumeratedSetDialogPresModel"] = "enumeratedSetDialogPresModel";
	    // DPI_EditAliasesDialog, having type EditAliasesDialogPresModel
	    ParameterId["EditAliasesDialog"] = "editAliasesDialogPresModel";
	    // DPI_AliasesPresModel, having type AliasesPresModel
	    ParameterId["AliasesPresModel"] = "aliasesPresModel";
	    // DPI_ClearAliasesPresModel, having type AliasesPresModel
	    ParameterId["ClearAliasesPresModel"] = "clearAliasesPresModel";
	    // DPI_NewAliasesPresModel, having type NewAliasesPresModel
	    ParameterId["NewAliasesPresModel"] = "newAliasesPresModel";
	    // DPI_AliasPresModel, having type AliasPresModel
	    ParameterId["AliasPresModel"] = "aliasPresModel";
	    // DPI_AliasItem, having type AliasItemPresModel
	    ParameterId["AliasItem"] = "aliasItem";
	    // DPI_DuplicateAliasItem, having type AliasItemPresModel
	    ParameterId["DuplicateAliasItem"] = "duplicateAliasItem";
	    // DPI_AliasList, having type AliasItemPresModel[]
	    ParameterId["AliasList"] = "aliasList";
	    // DPI_AliasResultItem, having type AliasResultItemPresModel
	    ParameterId["AliasResultItem"] = "aliasResultItem";
	    // DPI_AliasResultList, having type AliasResultItemPresModel[]
	    ParameterId["AliasResultList"] = "aliasResultList";
	    // DPI_AliasResults, having type AliasResultsPresModel
	    ParameterId["AliasResults"] = "aliasResults";
	    // DPI_EditSetDialogPresModel, having type EditSetDialogPresModel
	    ParameterId["EditSetDialogPresModel"] = "editSetDialogPresModel";
	    // DPI_ConfirmationPresModel, having type ConfirmationPresModel
	    ParameterId["ConfirmationPresModel"] = "confirmationPresModel";
	    // DPI_NotificationPresModel, having type NotificationPresModel
	    ParameterId["NotificationPresModel"] = "notificationPresModel";
	    // DPI_RetargetDataSourceDialogPresModel, having type RetargetDataSourceDialogPresModel
	    ParameterId["RetargetDataSourceDialogPresModel"] = "retargetDatasourceDialogPresModel";
	    // DPI_SharedFilterPresModel, having type SharedFilterPresModel
	    ParameterId["SharedFilterPresModel"] = "sharedFilterPresModel";
	    // DPI_SharedFilterWorksheetInfo, having type SharedFilterWorksheetInfoPresModel
	    ParameterId["SharedFilterWorksheetInfo"] = "sharedFilterWorksheetInfo";
	    // DPI_SharedFilterWorksheetInfoList, having type SharedFilterWorksheetInfoPresModel[]
	    ParameterId["SharedFilterWorksheetInfoList"] = "sharedFilterWorksheetInfoList";
	    // DPI_FieldPickerTreePresModel, having type FieldPickerTreePresModel
	    ParameterId["FieldPickerTreePresModel"] = "fieldPickerTreePresModel";
	    // DPI_FieldPickerTreePresModelSource, having type FieldPickerTreePresModel
	    ParameterId["FieldPickerTreePresModelSource"] = "fieldPickerTreePresModelSource";
	    // DPI_FieldPickerTreePresModelTarget, having type FieldPickerTreePresModel
	    ParameterId["FieldPickerTreePresModelTarget"] = "fieldPickerTreePresModelTarget";
	    // DPI_ErrorInfo, having type ErrorInfoPresModel
	    ParameterId["ErrorInfo"] = "errorInfoPresModel";
	    // DPI_CustomSplitPresModel, having type CustomSplitPresModel
	    ParameterId["CustomSplitPresModel"] = "customSplitPresModel";
	    // DPI_PageSetup, having type PageSetupPresModel
	    ParameterId["PageSetup"] = "pageSetup";
	    // DPI_ServerConnectStatus, having type ServerConnectionStatus
	    ParameterId["ServerConnectStatus"] = "serverConnectionStatus";
	    // DPI_GetFilterItemsResponse, having type GetFilterItemsResponsePresModel
	    ParameterId["GetFilterItemsResponse"] = "getFilterItemsResponse";
	    // DPI_FilterSearchResponse, having type FilterSearchResponsePresModel
	    ParameterId["FilterSearchResponse"] = "filterSearchResponse";
	    // DPI_FilterSearchWithIndexResponse, having type FilterSearchWithIndexResponsePresModel
	    ParameterId["FilterSearchWithIndexResponse"] = "filterSearchWithIndexResponse";
	    // DPI_FilterShowChildrenResponse, having type FilterShowChildrenResponsePresModel
	    ParameterId["FilterShowChildrenResponse"] = "filterShowChildrenResponse";
	    // DPI_EditDataServerConnection, having type EditDataServerConnectionPresModel
	    ParameterId["EditDataServerConnection"] = "editDataServerConnection";
	    // DPI_ImagesEdit, having type ImagesEditPresModel
	    ParameterId["ImagesEdit"] = "imagesEdit";
	    // DPI_BackgroundImage, having type BackgroundImagePresModel
	    ParameterId["BackgroundImage"] = "backgroundImage";
	    // DPI_BackgroundImages, having type BackgroundImagePresModel[]
	    ParameterId["BackgroundImages"] = "backgroundImages";
	    // DPI_Predicate, having type PredicatePresModel
	    ParameterId["Predicate"] = "predicate";
	    // DPI_Predicates, having type PredicatePresModel[]
	    ParameterId["Predicates"] = "predicates";
	    // DPI_ImagesEditResult, having type ImagesEditResultPresModel
	    ParameterId["ImagesEditResult"] = "imagesEditResult";
	    // DPI_SortDialogPresModel, having type SortDialogPresModel
	    ParameterId["SortDialogPresModel"] = "sortDialogPresModel";
	    // DPI_CompoundTableCalc, having type CompoundTableCalculationPresModel
	    ParameterId["CompoundTableCalc"] = "compoundTableCalculationPresModel";
	    // DPI_TableCalc, having type TableCalculationPresModel
	    ParameterId["TableCalc"] = "tableCalculationPresModel";
	    // DPI_TableCalcs, having type TableCalculationPresModel[]
	    ParameterId["TableCalcs"] = "tableCalculationPresModels";
	    // DPI_TableCalcIdentifier, having type TableCalcIdentifierPresModel
	    ParameterId["TableCalcIdentifier"] = "tableCalcIdentifier";
	    // DPI_NestedTableCalcInfo, having type NestedTableCalcInfoPresModel
	    ParameterId["NestedTableCalcInfo"] = "nestedTableCalcInfo";
	    // DPI_NestedTableCalcInfos, having type NestedTableCalcInfoPresModel[]
	    ParameterId["NestedTableCalcInfos"] = "nestedTableCalcInfos";
	    // DPI_Ordering, having type TableCalcOrderingPresModel
	    ParameterId["Ordering"] = "tableCalcOrderingPresModel";
	    // DPI_Cumulative, having type CumulativeTableCalcPresModel
	    ParameterId["Cumulative"] = "cumulativeTableCalcPresModel";
	    // DPI_ReferenceOptions, having type TableCalcReferenceOptionsPresModel
	    ParameterId["ReferenceOptions"] = "tableCalcReferenceOptionsPresModel";
	    // DPI_Difference, having type DifferenceTableCalcPresModel
	    ParameterId["Difference"] = "differenceTableCalcPresModel";
	    // DPI_Window, having type WindowTableCalcPresModel
	    ParameterId["Window"] = "windowTableCalcPresModel";
	    // DPI_PercentTotal, having type PercentTotalTableCalcPresModel
	    ParameterId["PercentTotal"] = "percentTotalTableCalcPresModel";
	    // DPI_Rank, having type RankTableCalcPresModel
	    ParameterId["Rank"] = "rankTableCalcPresModel";
	    // DPI_Custom, having type CustomTableCalcPresModel
	    ParameterId["Custom"] = "customTableCalcPresModel";
	    // DPI_WebDataUrl, having type WebDataUrlPresModel
	    ParameterId["WebDataUrl"] = "webDataUrl";
	    // DPI_VisitedWebDataConnectors, having type WebDataUrlPresModel[]
	    ParameterId["VisitedWebDataConnectors"] = "visitedWebDataConnectors";
	    // DPI_WebDataSessionUrls, having type WebDataUrlPresModel[]
	    ParameterId["WebDataSessionUrls"] = "webDataSessionUrls";
	    // DPI_WebDataUrls, having type WebDataUrlPresModel[]
	    ParameterId["WebDataUrls"] = "webDataUrls";
	    // DPI_FieldPicker, having type FieldPickerPresModel
	    ParameterId["FieldPicker"] = "fieldPicker";
	    // DPI_DescribeField, having type DescribeFieldPresModel
	    ParameterId["DescribeField"] = "describeField";
	    // DPI_ShowDataPresModel, having type ShowDataPresModel
	    ParameterId["ShowDataPresModel"] = "showDataPresModel";
	    // DPI_DataTablePresModel, having type ShowDataTablePresModel
	    ParameterId["DataTablePresModel"] = "dataTablePresModel";
	    // DPI_DataTablePresModels, having type ShowDataTablePresModel[]
	    ParameterId["DataTablePresModels"] = "dataTablePresModels";
	    // DPI_SummaryTablePresModels, having type ShowDataTablePresModel[]
	    ParameterId["SummaryTablePresModels"] = "summaryTablePresModels";
	    // DPI_RefreshAllExtractsPresModel, having type RefreshAllExtractsPresModel
	    ParameterId["RefreshAllExtractsPresModel"] = "refeshAllExtractsPresModel";
	    // DPI_RefreshExtractDataSourcePresModel, having type RefreshExtractDataSourcePresModel
	    ParameterId["RefreshExtractDataSourcePresModel"] = "refreshExtractDatasourcePresModel";
	    // DPI_RefreshExtractDataSourceList, having type RefreshExtractDataSourcePresModel[]
	    ParameterId["RefreshExtractDataSourceList"] = "refreshExtractDatasourceList";
	    // DPI_ExtractHistoryPresModel, having type ExtractHistoryPresModel
	    ParameterId["ExtractHistoryPresModel"] = "extractHistoryPresModel";
	    // DPI_ExtractHistoryItemPresModel, having type ExtractHistoryItemPresModel
	    ParameterId["ExtractHistoryItemPresModel"] = "extractHistoryItem";
	    // DPI_ExtractHistoryList, having type ExtractHistoryItemPresModel[]
	    ParameterId["ExtractHistoryList"] = "extractHistoryList";
	    // DPI_DataProviderPresModel, having type DataProviderPresModel
	    ParameterId["DataProviderPresModel"] = "dataProviderPresModel";
	    // DPI_FormatItem, having type FormatItemPresModel
	    ParameterId["FormatItem"] = "formatItem";
	    // DPI_FormatItemList, having type FormatItemPresModel[]
	    ParameterId["FormatItemList"] = "formatItemList";
	    // DPI_FormatContainer, having type FormatContainerPresModel
	    ParameterId["FormatContainer"] = "formatContainer";
	    // DPI_FormatPane, having type FormatPanePresModel
	    ParameterId["FormatPane"] = "formatPane";
	    // DPI_FormatSection, having type FormatSectionPresModel
	    ParameterId["FormatSection"] = "formatSection";
	    // DPI_CollapsibleSection, having type CollapsibleSectionPresModel
	    ParameterId["CollapsibleSection"] = "collapsibleSection";
	    // DPI_CompositeContainer, having type CompositeContainerPresModel
	    ParameterId["CompositeContainer"] = "compositeContainer";
	    // DPI_UnitContainer, having type UnitContainerPresModel
	    ParameterId["UnitContainer"] = "unitContainer";
	    // DPI_TabGroup, having type TabGroupPresModel
	    ParameterId["TabGroup"] = "tabGroup";
	    // DPI_Tab, having type TabPresModel
	    ParameterId["Tab"] = "tab";
	    // DPI_FormatControl, having type FormatControlPresModel
	    ParameterId["FormatControl"] = "formatControl";
	    // DPI_TextControl, having type TextControlPresModel
	    ParameterId["TextControl"] = "textControl";
	    // DPI_NumericControl, having type NumericControlPresModel
	    ParameterId["NumericControl"] = "numericControl";
	    // DPI_ColorControl, having type ColorControlPresModel
	    ParameterId["ColorControl"] = "colorControl";
	    // DPI_ToggleControl, having type ToggleControlPresModel
	    ParameterId["ToggleControl"] = "toggleControl";
	    // DPI_SelectorControl, having type SelectorControlPresModel
	    ParameterId["SelectorControl"] = "enumStringStyle";
	    // DPI_StatsAnalyticSpec, having type StatsAnalyticSpecPresModel
	    ParameterId["StatsAnalyticSpec"] = "statsAnalyticSpec";
	    // DPI_ClusterSpec, having type ClusterSpecPresModel
	    ParameterId["ClusterSpec"] = "clusteringSpec";
	    // DPI_ClusterResults, having type ClusterResultsPresModel
	    ParameterId["ClusterResults"] = "clusterResults";
	    // DPI_ClusterUnit, having type ClusterUnitPresModel
	    ParameterId["ClusterUnit"] = "cluster";
	    // DPI_ClusterUnits, having type ClusterUnitPresModel[]
	    ParameterId["ClusterUnits"] = "clusterUnitPresModels";
	    // DPI_ClusterFieldANOVA, having type ClusterFieldANOVAPresModel
	    ParameterId["ClusterFieldANOVA"] = "clusterFieldAnova";
	    // DPI_ClusterFieldANOVATable, having type ClusterFieldANOVAPresModel[]
	    ParameterId["ClusterFieldANOVATable"] = "clusterFieldAnovaTablePresModel";
	    // DPI_ClusterEdit, having type ClusterEditPresModel
	    ParameterId["ClusterEdit"] = "clusterEditPresModel";
	    // DPI_ClusterDescription, having type ClusterDescribePresModel
	    ParameterId["ClusterDescription"] = "clusterDescription";
	    // DPI_OutlierResults, having type OutlierResultsPresModel
	    ParameterId["OutlierResults"] = "outlierResults";
	    // DPI_ConnectToDataServerSourceResult, having type ConnectToDataServerSourceResultPresModel
	    ParameterId["ConnectToDataServerSourceResult"] = "connectToDataServerSourceResult";
	    // DPI_DataServerConnectionReturnStatus, having type ConnectToDataServerSourceResultPresModel
	    ParameterId["DataServerConnectionReturnStatus"] = "dataServerConnectionReturnStatus";
	    // DPI_WebQuantitativeColorDialog, having type WebQuantitativeColorDialogPresModel
	    ParameterId["WebQuantitativeColorDialog"] = "quantitativeColorDialog";
	    // DPI_WebCategoricalColorDialog, having type WebCategoricalColorDialogPresModel
	    ParameterId["WebCategoricalColorDialog"] = "categoricalColorDialog";
	    // DPI_WebSaveDatasourceDialog, having type WebSaveDatasourceDialogPresModel
	    ParameterId["WebSaveDatasourceDialog"] = "saveDatasourceDialog";
	    // DPI_BorderStyleSpec, having type StyleSpecPresModel
	    ParameterId["BorderStyleSpec"] = "borderStyleSpec";
	    // DPI_HaloStyleSpec, having type StyleSpecPresModel
	    ParameterId["HaloStyleSpec"] = "haloStyleSpec";
	    // DPI_MarksColorUberEffects, having type MarksColorUberEffectsPresModel
	    ParameterId["MarksColorUberEffects"] = "marksColorUberEffects";
	    // DPI_CategoricalColorEncoding, having type CategoricalColorEncodingPresModel
	    ParameterId["CategoricalColorEncoding"] = "categoricalColorEncoding";
	    // DPI_CategoricalShapeEncoding, having type CategoricalShapeEncodingPresModel
	    ParameterId["CategoricalShapeEncoding"] = "categoricalShapeEncoding";
	    // DPI_ShapePalettePresModel, having type ShapePalettePresModel
	    ParameterId["ShapePalettePresModel"] = "shapePalettePresModel";
	    // DPI_ShapePalettePresModels, having type ShapePalettePresModel[]
	    ParameterId["ShapePalettePresModels"] = "shapePalettePresModels";
	    // DPI_DataSourceDateProperties, having type DataSourceDatePropertiesPresModel
	    ParameterId["DataSourceDateProperties"] = "datasourceDateProperties";
	    // DPI_DatePropertiesDateFormat, having type DatePropertiesDateFormatPresModel
	    ParameterId["DatePropertiesDateFormat"] = "datePropertiesDateFormat";
	    // DPI_DatePropertiesDateFormats, having type DatePropertiesDateFormatPresModel[]
	    ParameterId["DatePropertiesDateFormats"] = "datePropertiesDateFormats";
	    // DPI_HierarchySelect, having type HierarchySelectModel
	    ParameterId["HierarchySelect"] = "hierarchySelect";
	    // DPI_HierarchySelectMember, having type HierarchySelectMemberPresModel
	    ParameterId["HierarchySelectMember"] = "hierarchySelectMember";
	    // DPI_HierarchySelectMemberList, having type HierarchySelectMemberPresModel[]
	    ParameterId["HierarchySelectMemberList"] = "hierarchySelectMemberList";
	    // DPI_HierarchySetDefaultMember, having type HierarchySetDefaultMemberPresModel
	    ParameterId["HierarchySetDefaultMember"] = "hierarchySetDefaultMember";
	    // DPI_SemiStructSchema, having type SemiStructSchemaPresModel
	    ParameterId["SemiStructSchema"] = "semiStructSchema";
	    // DPI_SemiStructSchemaMember, having type SemiStructSchemaMemberPresModel
	    ParameterId["SemiStructSchemaMember"] = "semiStructSchemaMember";
	    // DPI_SemiStructSchemaMemberList, having type SemiStructSchemaMemberPresModel[]
	    ParameterId["SemiStructSchemaMemberList"] = "semiStructSchemaMemberList";
	    // DPI_ParameterEditInfo, having type ParameterEditInfoPresModel
	    ParameterId["ParameterEditInfo"] = "parameterEditInfo";
	    // DPI_ProductParameterInfo, having type ProductParameterInfoPresModel
	    ParameterId["ProductParameterInfo"] = "productParameterInfo";
	    // DPI_CaptionedDatasourceField, having type CaptionedDatasourceInfoPresModel
	    ParameterId["CaptionedDatasourceField"] = "captionedDatasourceField";
	    // DPI_CaptionedDatasourceFields, having type CaptionedDatasourceInfoPresModel[]
	    ParameterId["CaptionedDatasourceFields"] = "captionedDatasourceFields";
	    // DPI_EditedParameterRangeDomain, having type ParameterRangeDomainPresModel
	    ParameterId["EditedParameterRangeDomain"] = "editedParameterRangeDomain";
	    // DPI_ParameterRangeDomain, having type ParameterRangeDomainPresModel
	    ParameterId["ParameterRangeDomain"] = "parameterRangeDomain";
	    // DPI_ParameterListDomain, having type ParameterListDomainPresModel
	    ParameterId["ParameterListDomain"] = "parameterListDomain";
	    // DPI_ParameterListDomainMember, having type ParameterListDomainMemberPresModel
	    ParameterId["ParameterListDomainMember"] = "parameterListDomainMember";
	    // DPI_ParameterListDomainMembers, having type ParameterListDomainMemberPresModel[]
	    ParameterId["ParameterListDomainMembers"] = "parameterListDomainMembers";
	    // DPI_IndexedDomainMember, having type IndexedDomainMemberPresModel
	    ParameterId["IndexedDomainMember"] = "indexedDomainMember";
	    // DPI_IndexedDomainMembers, having type IndexedDomainMemberPresModel[]
	    ParameterId["IndexedDomainMembers"] = "indexedDomainMembers";
	    // DPI_NewIndexedDomainMembers, having type IndexedDomainMemberPresModel[]
	    ParameterId["NewIndexedDomainMembers"] = "newIndexedDomainMembers";
	    // DPI_ParameterListDomainDiff, having type parameter-list-domain-diff
	    ParameterId["ParameterListDomainDiff"] = "parameterListDomainDiff";
	    // DPI_IndexRange, having type IndexRangePresModel
	    ParameterId["IndexRange"] = "indexRange";
	    // DPI_IndexRanges, having type IndexRangePresModel[]
	    ParameterId["IndexRanges"] = "indexRanges";
	    // DPI_CategoricalFind, having type CategoricalFindPresModel
	    ParameterId["CategoricalFind"] = "categoricalFind";
	    // DPI_CaptionedDataValue, having type CaptionedDataValuePresModel
	    ParameterId["CaptionedDataValue"] = "captionedDataValue";
	    // DPI_SelectedValueCaption, having type CaptionedDataValuePresModel
	    ParameterId["SelectedValueCaption"] = "selectedValueCaption";
	    // DPI_DataValueCaptionList, having type CaptionedDataValuePresModel[]
	    ParameterId["DataValueCaptionList"] = "dataValueCatpionList";
	    // DPI_RangeDataValue, having type RangeDataValuePresModel
	    ParameterId["RangeDataValue"] = "rangeDataValue";
	    // DPI_ParameterRangeDataValue, having type RangeDataValuePresModel
	    ParameterId["ParameterRangeDataValue"] = "parameterRangeDataValue";
	    // DPI_DataValueRangeCaptions, having type DataValueRangeCaptionsPresModel
	    ParameterId["DataValueRangeCaptions"] = "dataValueRangeCaptions";
	    // DPI_IndependentDimension, having type IndependentDimensionPresModel
	    ParameterId["IndependentDimension"] = "independentDimension";
	    // DPI_IndependentDimensions, having type IndependentDimensionPresModel[]
	    ParameterId["IndependentDimensions"] = "independentDimensions";
	    // DPI_AttributePerspective, having type PerspectivePresModel
	    ParameterId["AttributePerspective"] = "attributePerspective";
	    // DPI_CubePerspective, having type PerspectivePresModel
	    ParameterId["CubePerspective"] = "cubePerspective";
	    // DPI_AttributePerspectives, having type PerspectivePresModel[]
	    ParameterId["AttributePerspectives"] = "attributePerspectives";
	    // DPI_CalculatedMembersForEditingPresModel, having type EditCalculatedMembersPresModel
	    ParameterId["CalculatedMembersForEditingPresModel"] = "calculatedMembersForEditingPresmodel";
	    // DPI_CalculatedMember, having type CalculatedMemberPresModel
	    ParameterId["CalculatedMember"] = "calculatedMember";
	    // DPI_NewCalculatedMember, having type CalculatedMemberPresModel
	    ParameterId["NewCalculatedMember"] = "newCalculatedMember";
	    // DPI_UpdatedCalculatedMember, having type CalculatedMemberPresModel
	    ParameterId["UpdatedCalculatedMember"] = "updatedCalculatedMember";
	    // DPI_CalculatedMembersList, having type CalculatedMemberPresModel[]
	    ParameterId["CalculatedMembersList"] = "calculatedMembersList";
	    // DPI_CalculatedMemberHierarchyItem, having type CalculatedMemberHierarchyItemPresModel
	    ParameterId["CalculatedMemberHierarchyItem"] = "calculatedMemberHierarchyItem";
	    // DPI_CalculatedMemberHierarchyList, having type CalculatedMemberHierarchyItemPresModel[]
	    ParameterId["CalculatedMemberHierarchyList"] = "calculatedMemberHierarchyList";
	    // DPI_SummaryCardPresModel, having type SummaryCardPresModel
	    ParameterId["SummaryCardPresModel"] = "summaryCard";
	    // DPI_MeasureSummary, having type MeasureSummaryPresModel
	    ParameterId["MeasureSummary"] = "measureSummary";
	    // DPI_MeasureSummaryList, having type MeasureSummaryPresModel[]
	    ParameterId["MeasureSummaryList"] = "measureSummaryList";
	    // DPI_AnnotationPresModel, having type AnnotationPresModel
	    ParameterId["AnnotationPresModel"] = "annotation";
	    // DPI_AnnotationList, having type AnnotationPresModel[]
	    ParameterId["AnnotationList"] = "annotationList";
	    // DPI_AnnotationShapeStyle, having type AnnotationShapeStylePresModel
	    ParameterId["AnnotationShapeStyle"] = "annotationShapeStyle";
	    // DPI_Telemetry, having type TelemetryPresModel
	    ParameterId["Telemetry"] = "telemetry";
	    // DPI_DataSourceTelemetry, having type DataSourceTelemetryPresModel
	    ParameterId["DataSourceTelemetry"] = "dataSourceTelemetry";
	    // DPI_DataSourceTelemetryList, having type DataSourceTelemetryPresModel[]
	    ParameterId["DataSourceTelemetryList"] = "dataSourceTelemetryList";
	    // DPI_VisualSpecificationTelemetry, having type VisualSpecificationTelemetryPresModel
	    ParameterId["VisualSpecificationTelemetry"] = "visualSpecificationTelemetry";
	    // DPI_VisualSpecificationTelemetryList, having type VisualSpecificationTelemetryPresModel[]
	    ParameterId["VisualSpecificationTelemetryList"] = "visualSpecificationTelemetryList";
	    // DPI_UnderlyingDataTable, having type UnderlyingDataTablePresModel
	    ParameterId["UnderlyingDataTable"] = "underlyingDataTable";
	    // DPI_UnderlyingDataTables, having type UnderlyingDataTablePresModel[]
	    ParameterId["UnderlyingDataTables"] = "underlyingDataTables";
	    // DPI_UnderlyingDataTableColumn, having type UnderlyingDataTableColumnPresModel
	    ParameterId["UnderlyingDataTableColumn"] = "underlyingDataTableColumn";
	    // DPI_UnderlyingDataTableColumns, having type UnderlyingDataTableColumnPresModel[]
	    ParameterId["UnderlyingDataTableColumns"] = "underlyingDataTableColumns";
	    // DPI_PageCacheID, having type PageCacheIDPresModel
	    ParameterId["PageCacheID"] = "pageCacheId";
	    // DPI_RelationalPageCacheID, having type PageCacheIDPresModel
	    ParameterId["RelationalPageCacheID"] = "relationalPageCacheId";
	    // DPI_SearchResultsCacheID, having type PageCacheIDPresModel
	    ParameterId["SearchResultsCacheID"] = "searchResultsCacheId";
	    // DPI_PageInfo, having type PageInfoPresModel
	    ParameterId["PageInfo"] = "pageInfo";
	    // DPI_RowColPair, having type RowColPairPresModel
	    ParameterId["RowColPair"] = "rowColPair";
	    // DPI_TopLeftRowCol, having type RowColPairPresModel
	    ParameterId["TopLeftRowCol"] = "topLeftRowCol";
	    // DPI_BotRightRowCol, having type RowColPairPresModel
	    ParameterId["BotRightRowCol"] = "botRightRowCol";
	    // DPI_RowColPairs, having type RowColPairPresModel[]
	    ParameterId["RowColPairs"] = "rowColPairs";
	    // DPI_TableViewCacheInfo, having type TableViewCachePresModel
	    ParameterId["TableViewCacheInfo"] = "tableViewCacheInfo";
	    // DPI_TableViewInfo, having type tableViewInfoPresModel
	    ParameterId["TableViewInfo"] = "tableViewInfo";
	    // DPI_TableViewColumnInfo, having type TableViewColumnInfoPresModel
	    ParameterId["TableViewColumnInfo"] = "tableViewColumnInfo";
	    // DPI_TableViewColumns, having type TableViewColumnInfoPresModel[]
	    ParameterId["TableViewColumns"] = "tableViewColumns";
	    // DPI_TableViewPageItem, having type TableViewPageItemPresModel
	    ParameterId["TableViewPageItem"] = "tableViewPageItem";
	    // DPI_TableViewPageColumns, having type TableViewPageItemPresModel[]
	    ParameterId["TableViewPageColumns"] = "tableViewPageColumns";
	    // DPI_TableViewPageRow, having type TableViewPageRowPresModel
	    ParameterId["TableViewPageRow"] = "tableViewPageRow";
	    // DPI_TableViewPageRows, having type TableViewPageRowPresModel[]
	    ParameterId["TableViewPageRows"] = "tableViewPageRows";
	    // DPI_TableViewPage, having type TableViewPagePresModel
	    ParameterId["TableViewPage"] = "tableViewPage";
	    // DPI_CategoricalValuePicker, having type CategoricalValuePickerPresModel
	    ParameterId["CategoricalValuePicker"] = "categoricalValuePicker";
	    // DPI_AnnotationShapeBorderStyle, having type LineStylePresModel
	    ParameterId["AnnotationShapeBorderStyle"] = "annotationShapeBorderStyle";
	    // DPI_AnotationShapeStrokeStyle, having type LineStylePresModel
	    ParameterId["AnotationShapeStrokeStyle"] = "annotationShapeStrokeStyle";
	    // DPI_CategoricalBinEditorPresModel, having type CategoricalBinEditorPresModel
	    ParameterId["CategoricalBinEditorPresModel"] = "categoricalBinEditor";
	    // DPI_CategoricalBinItem, having type CategoricalBinItemPresModel
	    ParameterId["CategoricalBinItem"] = "categoricalBinItemPresModel";
	    // DPI_CategoricalBinItems, having type CategoricalBinItemPresModel[]
	    ParameterId["CategoricalBinItems"] = "categoricalBinItemPresModels";
	    // DPI_MeasurePickerFieldInfo, having type MeasurePickerFieldInfoPresModel
	    ParameterId["MeasurePickerFieldInfo"] = "measurePickerFieldInfo";
	    // DPI_MeasurePickerFields, having type MeasurePickerFieldInfoPresModel[]
	    ParameterId["MeasurePickerFields"] = "measurePickerFields";
	    // DPI_MeasureAggregationInfo, having type MeasureAggregationInfoPresModel
	    ParameterId["MeasureAggregationInfo"] = "measureAggregationInfo";
	    // DPI_MeasureAggregations, having type MeasureAggregationInfoPresModel[]
	    ParameterId["MeasureAggregations"] = "measureAggregations";
	    // DPI_TuplePair, having type TuplePairPresModel
	    ParameterId["TuplePair"] = "tuplePair";
	    // DPI_DimensionBound, having type DimensionBoundPresModel
	    ParameterId["DimensionBound"] = "dimensionBound";
	    // DPI_PerspectiveBounds, having type DimensionBoundPresModel[]
	    ParameterId["PerspectiveBounds"] = "perspectiveBounds";
	    // DPI_FilterPerspectiveInfoPresModel, having type FilterPerspectiveInfoPresModel
	    ParameterId["FilterPerspectiveInfoPresModel"] = "filterPerspectiveInfo";
	    // DPI_TableRelevance, having type TableRelevancePresModel
	    ParameterId["TableRelevance"] = "tableRelevance";
	    // DPI_ExtensionRegistrationPresModel, having type ExtensionRegistrationPresModel
	    ParameterId["ExtensionRegistrationPresModel"] = "addInRegistrationPresModel";
	    // DPI_ExtensionRegistrationPresModelList, having type ExtensionRegistrationPresModel[]
	    ParameterId["ExtensionRegistrationPresModelList"] = "addInRegistrationPresModelList";
	    // DPI_AddInDashboardAuthoringWidget, having type AddInDashboardWidgetPresModel
	    ParameterId["AddInDashboardAuthoringWidget"] = "addInDashboardAuthoringWidgetPresModel";
	    // DPI_AddInInstance, having type AddInInstancePresModel
	    ParameterId["AddInInstance"] = "addInInstancePresModel";
	    // DPI_AddInLocator, having type AddInLocatorPresModel
	    ParameterId["AddInLocator"] = "addInLocatorPresModel";
	    // DPI_AddInContext, having type AddInContext
	    ParameterId["AddInContext"] = "addInContext";
	    // DPI_AddInMode, having type AddInMode
	    ParameterId["AddInMode"] = "addInMode";
	    // DPI_SetAxisDataValueResult, having type SetAxisDataValueResult
	    ParameterId["SetAxisDataValueResult"] = "setAxisDataValueResult";
	    // DPI_AxisExtentStartType, having type AxisExtentType
	    ParameterId["AxisExtentStartType"] = "axisExtentStartType";
	    // DPI_AxisExtentEndType, having type AxisExtentType
	    ParameterId["AxisExtentEndType"] = "axisExtentEndType";
	    // DPI_AxisExtentsType, having type AxisExtentType
	    ParameterId["AxisExtentsType"] = "axisExtentsType";
	    // DPI_AddInEnvironment, having type AddInEnvironmentPresModel
	    ParameterId["AddInEnvironment"] = "addInEnvironmentPresModel";
	    // DPI_AddInDashboardInfo, having type AddInDashboardInfoPresModel
	    ParameterId["AddInDashboardInfo"] = "addInDashboardInfoPresModel";
	    // DPI_AddInSettingsInfo, having type AddInSettingsInfoPresModel
	    ParameterId["AddInSettingsInfo"] = "addInSettingsInfo";
	    // DPI_AddInBootstrapInfo, having type AddInBootstrapInfoPresModel
	    ParameterId["AddInBootstrapInfo"] = "addInBootstrapInfo";
	    // DPI_ExtensionDebugSettings, having type ExtensionDebugSettingsPresModel
	    ParameterId["ExtensionDebugSettings"] = "addInDebugSettings";
	    // DPI_NLPInterpretResult, having type NLPInterpretResultPresModel
	    ParameterId["NLPInterpretResult"] = "nlpInterpretResult";
	    // DPI_NLPInterpretResultArray, having type NLPInterpretResultPresModel[]
	    ParameterId["NLPInterpretResultArray"] = "nlpInterpretResultArray";
	    // DPI_RichText, having type RichTextPresModel
	    ParameterId["RichText"] = "richText";
	    // DPI_RichTextKeywordSubList, having type RichTextKeywordSubListPresModel
	    ParameterId["RichTextKeywordSubList"] = "richTextKeywordsSublist";
	    // DPI_RichTextKeywordSubLists, having type RichTextKeywordSubListPresModel[]
	    ParameterId["RichTextKeywordSubLists"] = "richTextKeywordSublists";
	    // DPI_RichTextKeywordList, having type RichTextKeywordListPresModel
	    ParameterId["RichTextKeywordList"] = "richTextKeywordsList";
	    // DPI_RichTextBlockStyle, having type RichTextBlockStylePresModel
	    ParameterId["RichTextBlockStyle"] = "richTextBlockStyle";
	    // DPI_RichTextContentStyle, having type RichTextContentStylePresModel
	    ParameterId["RichTextContentStyle"] = "richTextContentStyle";
	    // DPI_SortIndicatorState, having type SortIndicatorStatePresModel
	    ParameterId["SortIndicatorState"] = "sortIndicatorState";
	})(ParameterId = exports.ParameterId || (exports.ParameterId = {}));


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var CommandIds_1 = __webpack_require__(86);
	var Params_1 = __webpack_require__(84);
	var CommandMappingRegistry_1 = __webpack_require__(87);
	var CommandRegistration_1 = __webpack_require__(88);
	var CommandMappingRegistryFactory = (function () {
	    function CommandMappingRegistryFactory() {
	    }
	    /**
	     * Creates and populates a new CommandMappingRegistry for the specific version number requested
	     *
	     * @static
	     * @param {VersionNumber} versionNumber
	     * @param {boolean} runningInDesktop
	     * @returns {CommandMappingRegistry}
	     * @memberof CommandMappingRegistryFactory
	     */
	    CommandMappingRegistryFactory.createCommandMappingRegistry = function (versionNumber, runningInDesktop) {
	        var result = new CommandMappingRegistry_1.CommandMappingRegistry();
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.InitializeExtension, CommandIds_1.DocCommands.InitializeAddInInstance, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionLocator, Params_1.ParameterId.AddInLocator),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IsExtensionDialog, Params_1.ParameterId.IsExtensionDialog)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionBootstrapInfo, Params_1.ParameterId.AddInBootstrapInfo)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetUnderlyingData, CommandIds_1.DocCommands.GetUnderlyingData, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IgnoreAliases, Params_1.ParameterId.IgnoreAliases),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IgnoreSelection, Params_1.ParameterId.IgnoreSelection),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IncludeAllColumns, Params_1.ParameterId.IncludeAllColumns),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.MaxRows, Params_1.ParameterId.MaxRows),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.UnderlyingDataTable, Params_1.ParameterId.UnderlyingDataTable)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetDataSummaryData, CommandIds_1.DocCommands.GetSummaryData, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IgnoreAliases, Params_1.ParameterId.IgnoreAliases),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IgnoreSelection, Params_1.ParameterId.IgnoreSelection),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.UnderlyingSummaryDataTable, Params_1.ParameterId.UnderlyingDataTable)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetDataSourceData, CommandIds_1.DocCommands.GetDataSourceData, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DataSourceId, Params_1.ParameterId.Datasource),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IgnoreAliases, Params_1.ParameterId.IgnoreAliases),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.MaxRows, Params_1.ParameterId.MaxRows),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ColumnsToInclude, Params_1.ParameterId.FieldDisplayNames)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DataSourceDataTable, Params_1.ParameterId.UnderlyingDataTable)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.ApplyCategoricalFilter, CommandIds_1.DocCommands.CategoricalFilter, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.QualifiedFieldCaption),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FilterValues, Params_1.ParameterId.FilterAliases),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FilterUpdateType, Params_1.ParameterId.FilterUpdateType),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.IsExcludeMode, Params_1.ParameterId.Exclude, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Worksheet),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Dashboard)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.FieldCaption)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.ApplyRangeFilter, CommandIds_1.DocCommands.RangeFilter, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.QualifiedFieldCaption),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FilterRangeMin, Params_1.ParameterId.RangeMin, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FilterRangeMax, Params_1.ParameterId.RangeMax, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FilterRangeNullOption, Params_1.ParameterId.Included, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Worksheet),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Dashboard)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.FieldCaption)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.ClearFilter, CommandIds_1.DocCommands.ResetFilter, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.QualifiedFieldCaption),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Worksheet),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Dashboard)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.FieldCaption)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetSelectedMarks, CommandIds_1.DocCommands.GetSelectionData, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.SelectedData, Params_1.ParameterId.SelectionData)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetHighlightedMarks, CommandIds_1.DocCommands.GetHighlightedData, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.HighlightedData, Params_1.ParameterId.HighlightedData)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.SaveExtensionSettings, CommandIds_1.DocCommands.SaveAddInSettings, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionLocator, Params_1.ParameterId.AddInLocator),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.SettingsValues, Params_1.ParameterId.AddInSettings)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionSettingsInfo, Params_1.ParameterId.AddInSettingsInfo)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetParametersForSheet, CommandIds_1.DocCommands.GetParameterModels, [], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterInfos, Params_1.ParameterId.ParameterCtrls)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.FindParameter, CommandIds_1.DocCommands.FindParameterModel, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterCaption, Params_1.ParameterId.FieldCaption, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterFieldName, Params_1.ParameterId.FieldNameString, true)], 
	        // We might not get a response if the parameter isn't found
	        new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterInfo, Params_1.ParameterId.ParameterCtrl, true)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.ChangeParameterValue, CommandIds_1.DocCommands.SetParameterValue, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterFieldName, Params_1.ParameterId.GlobalFieldName),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterValue, Params_1.ParameterId.ValueStr)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ParameterInfo, Params_1.ParameterId.ParameterCtrl)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.ClearSelectedMarks, CommandIds_1.DocCommands.ClearSelectedMarks, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)]));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.SelectByValue, CommandIds_1.DocCommands.SelectByValue, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.Selection, Params_1.ParameterId.Selection, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.SelectionUpdateType, Params_1.ParameterId.SelectionUpdateType),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.HierValSelectionModels, Params_1.ParameterId.HierValSelectionModels, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DimValSelectionModels, Params_1.ParameterId.DimValSelectionModels, true),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.QuantRangeSelectionModels, Params_1.ParameterId.QuantRangeSelectionModels, true)]));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetDataSources, CommandIds_1.DocCommands.GetSchema, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DataSchema, Params_1.ParameterId.DataSchema)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.RefreshDataSource, (runningInDesktop) ? CommandIds_1.UICommands.RefreshDataSourceUI : CommandIds_1.SrvCommands.RefreshData, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DataSourceId, Params_1.ParameterId.Datasource)], undefined, (runningInDesktop) ? CommandRegistration_1.CommandNamespace.TabUI : CommandRegistration_1.CommandNamespace.TabSrv));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetFilters, CommandIds_1.DocCommands.GetWorksheetFilters, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.WorksheetFilters, Params_1.ParameterId.FiltersInfo)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetCategoricalDomain, CommandIds_1.DocCommands.GetCategoricalDomain, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldId, Params_1.ParameterId.FieldName),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DomainType, Params_1.ParameterId.FilterDomainType)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.CategoricalDomain, Params_1.ParameterId.CategoricalDomain)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetRangeDomain, CommandIds_1.DocCommands.GetQuantitativeDomain, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.FieldId, Params_1.ParameterId.FieldName),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DomainType, Params_1.ParameterId.FilterDomainType)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.QuantitativeDomain, Params_1.ParameterId.QuantitativeDomain)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetJoinDescription, CommandIds_1.DocCommands.GetJoinDescriptionPresModel, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DataSourceId, Params_1.ParameterId.Datasource)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.JoinDescription, Params_1.ParameterId.JoinDescription)));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.DisplayDialog, CommandIds_1.UICommands.DisplayExtensionDialog, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionLocator, Params_1.ParameterId.AddInLocator),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionDialogUrl, Params_1.ParameterId.ExtensionDialogUrl),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionDialogPayload, Params_1.ParameterId.ExtensionDialogPayload, true)], undefined, CommandRegistration_1.CommandNamespace.TabUI));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.CloseDialog, CommandIds_1.UICommands.CloseExtensionDialog, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionLocator, Params_1.ParameterId.AddInLocator),
	            new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ExtensionDialogPayload, Params_1.ParameterId.ExtensionDialogPayload, true)], undefined, CommandRegistration_1.CommandNamespace.TabUI));
	        result.addCommand(new CommandRegistration_1.CommandRegistration(api_internal_contract_1.VerbId.GetConnectionDescriptionSummaries, CommandIds_1.DocCommands.GetConnectionDescriptionSummaryPresModels, [new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.DataSourceId, Params_1.ParameterId.Datasource)], new CommandRegistration_1.CommandParameter(api_internal_contract_1.ParameterId.ConnectionDescriptionSummaries, Params_1.ParameterId.ConnectionDescriptionSummaries)));
	        return result;
	    };
	    return CommandMappingRegistryFactory;
	}());
	exports.CommandMappingRegistryFactory = CommandMappingRegistryFactory;


/***/ },
/* 86 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable */
	// -----------------------------------------------------------------------------
	//
	// This file is the copyrighted property of Tableau Software and is protected
	// by registered patents and other applicable U.S. and international laws and
	// regulations.
	//
	// Unlicensed use of the contents of this file is prohibited. Please refer to
	// the NOTICES.txt file for further details.
	//
	// -----------------------------------------------------------------------------
	// WARNING: Computer generated file.  Do not hand modify.
	// DEPENDS ON: ['../js-api/api-core/node_modules/@tableau/preslayer-codegen-typescript/templates/commands-enum-ts.template', u'../js-api/api-core/temp-pres-layer/all-cmd-wrappers.data']
	Object.defineProperty(exports, "__esModule", { value: true });
	var DocCommands;
	(function (DocCommands) {
	    // Saves the settings for the specified add-in id
	    DocCommands["SaveAddInSettings"] = "save-add-in-settings";
	    // Gets the pres model for an add-in instance.
	    DocCommands["GetAddInInstancePresModel"] = "get-add-in-instance-pres-model";
	    // Gets the pres model for the dashboard authoring widget for add-ins.
	    DocCommands["GetAddInDashboardAuthoringWidgetPresModel"] = "get-add-in-dashboard-authoring-widget-pres-model";
	    // Gets the necessary information for an add-in to initialize itself.
	    DocCommands["InitializeAddInInstance"] = "initialize-add-in-instance";
	    // Enables or disable javascript debugging of an add-in.
	    DocCommands["SetAddInJsDebuggingEnabled"] = "set-add-in-js-debugging-enabled";
	    // Whether or not we should pause before loading. If missing, toggle the value
	    DocCommands["SetPauseBeforeLoadingAddIn"] = "set-pause-before-loading-add-in";
	    // Reloads the Add-In widget and web page.
	    DocCommands["ReloadAddIn"] = "reload-add-in";
	    // Retrieves the context menu for a dashboard add-in.
	    DocCommands["GetAddInZoneContextMenu"] = "get-add-in-zone-context-menu";
	    // Gets the pres model which indicates what the debug settings for add-ins is.
	    DocCommands["GetExtensionDebugSettingsPresModel"] = "get-extension-debug-settings-pres-model";
	    // Primary use is for building context menus
	    DocCommands["IsSelectionAnEditableParameter"] = "is-selection-an-editable-parameter";
	    // Check if selection can be used as base for creating a new parameter. Primary use is for building context menus
	    DocCommands["GetCreateParameterState"] = "get-create-parameter-state";
	    // Uses EditParameter to get and return info about the presmodel without maintaining the controller
	    DocCommands["GetParameterEditInfo"] = "get-parameter-edit-info";
	    // Initialize the controller and its stored parameter then return a populated presmodel
	    DocCommands["CreateParameter"] = "create-parameter";
	    // Same underlying logic as CreateParameter but edits rather than creating a new parameter
	    DocCommands["EditParameter_New"] = "edit-parameter-new";
	    // Add a member of a parameter domain. Changes are applied to intermediate state and saved on commit
	    DocCommands["AddParameterMember"] = "add-parameter-member";
	    // Edit a member of a parameter domain. Changes are applied to intermediate state and saved on commit
	    DocCommands["EditParameterMember"] = "edit-parameter-member";
	    // Delete a series of ranges of members from the parameter list.
	    DocCommands["DeleteParameterMembers"] = "delete-parameter-members";
	    // Copy a series of ranges of members of a parameter list
	    DocCommands["CopyParameterMembers"] = "copy-parameter-members";
	    // Move a series of ranges of members of a parameter list
	    DocCommands["MoveParameterMembers"] = "move-parameter-members";
	    // Change domain of a parameter. Changes are applied to intermediate state and saved on commit
	    DocCommands["EditParameterDomainType"] = "edit-parameter-domain-type";
	    // Change datatype of a parameter. Changes are applied to intermediate state and saved on commit
	    DocCommands["EditParameterDataType"] = "edit-parameter-data-type";
	    // Change display format of a parameter. Changes are applied to intermediate state and saved on commit
	    DocCommands["EditParameterFormat"] = "edit-parameter-format";
	    // Validate changes to a parameter's range domain and apply to intermediate state. Changes are saved on commit
	    DocCommands["EditParameterRange"] = "edit-parameter-range";
	    // Edit the value of a non-list domain parameter
	    DocCommands["EditParameterValue"] = "edit-parameter-value";
	    // Edit the value of a list domain parameter
	    DocCommands["EditParameterValueIndex"] = "edit-parameter-value-index";
	    // Update the parameter caption and description - used to keep backend in sync. No verification/return is requried.
	    DocCommands["EditParameterDisplayInfo"] = "edit-parameter-display-info";
	    // Update the domain of the parameter using a field (column or parameter) as a base
	    DocCommands["UpdateParameterFromField"] = "update-parameter-from-field";
	    // Update the list domain of a parameter from a plain text representation of values
	    DocCommands["ParseParameterListDomain"] = "parse-parameter-list-domain";
	    // Clears the parameter's domain of all members
	    DocCommands["ClearParameterListDomain"] = "clear-parameter-list-domain";
	    // Creates or edits parameter from intermediate state. Takes a few properties that are cached in dialog and applies them pre-commit.
	    DocCommands["CommitParameterEdits"] = "commit-parameter-edits";
	    // Gets the model for a particular parameter or returns an empty response if one is not found.
	    DocCommands["FindParameterModel"] = "find-parameter-model";
	    // Gets the pres model for the show data dialog
	    DocCommands["GetShowDataPresModel"] = "get-show-data-pres-model";
	    // Export underlying data from the ShowDataDialog to a CSV file
	    DocCommands["ShowDataExportToCSV"] = "show-data-export-to-csv";
	    // Gets the summary data for a worksheet
	    DocCommands["GetSummaryData"] = "get-summary-data";
	    // Gets the underlying data for a worksheet
	    DocCommands["GetUnderlyingData"] = "get-underlying-data";
	    // Gets the underlying data for a specific data source.
	    DocCommands["GetDataSourceData"] = "get-data-source-data";
	    // Select all marks that have the tuple's value for the given field .
	    DocCommands["SelectByTupleValue"] = "select-by-tuple-value";
	    // Clear all the selected marks for the given worksheet
	    DocCommands["ClearSelectedMarks"] = "clear-selected-marks";
	    // Creates or updates and existing filter based on the provided updates.
	    DocCommands["ApplyCategoricalFilterUpdates"] = "apply-categorical-filter-updates";
	    // Search filter domain for text and return any matching tuples.
	    DocCommands["CategoricalFilterSearch"] = "categorical-filter-search";
	    // Clear all members from the table of the identified cache.
	    DocCommands["CategoricalFilterClearRelationalCache"] = "categorical-filter-clear-relational-cache";
	    // Create tuples for an existing filter from supplied text.
	    DocCommands["GetCategoricalFilterTuplesFromText"] = "get-categorical-filter-tuples-from-text";
	    // Returns a presmodel backing a categorical filter, initializing a data cache for fast lookup of the filter's member domain.
	    DocCommands["GetCategoricalFilter"] = "get-categorical-filter";
	    // Retrieves a page of data to display in the filter's list domain
	    DocCommands["GetCategoricalFilterDomainPage"] = "get-categorical-filter-domain-page";
	    // Reset filter to committed state
	    DocCommands["ResetCategoricalFilterDeferred"] = "reset-categorical-filter-deferred";
	    // Use uncommitted state to reset the filter's controller
	    DocCommands["RecreateCategoricalFilterController"] = "recreate-categorical-filter-controller";
	    // Validates a Categroical Filter name.
	    DocCommands["ValidateCategoricalFilterName"] = "validate-categorical-filter-name";
	    // Retrieves the field aggregations allowed for the field being filtered.
	    DocCommands["GetFilterFieldAggregations"] = "get-filter-field-aggregations";
	    // Gets a summary of the filter pattern.
	    DocCommands["GetCategoricalFilterPatternSummary"] = "get-categorical-filter-pattern-summary";
	    // Gets a summery of the filter condition.
	    DocCommands["GetCategoricalFilterConditionSummary"] = "get-categorical-filter-condition-summary";
	    // Load the current minimum and maximum data value range for the condition field.
	    DocCommands["LoadCategoricalFilterConditionFieldValueRange"] = "load-categorical-filter-condition-field-value-range";
	    // Validates a Categorical Filter's condition formula and re-writes it.
	    DocCommands["ValidateCategoricalFilterConditionFormula"] = "validate-categorical-filter-condition-formula";
	    // Gets a summery of the filter limit.
	    DocCommands["GetCategoricalFilterLimitSummary"] = "get-categorical-filter-limit-summary";
	    // Validates a Categorical Filter's limit count.
	    DocCommands["ValidateCategoricalFilterLimitCount"] = "validate-categorical-filter-limit-count";
	    // Validates a Categorical Filter's limit formula, and re-writes the formula.
	    DocCommands["ValidateCategoricalFilterLimitFormula"] = "validate-categorical-filter-limit-formula";
	    // Validates a Categorical Filter's limit.
	    DocCommands["ValidateCategoricalFilterLimit"] = "validate-categorical-filter-limit";
	    // Inform cache when a user changes the range
	    DocCommands["CategoricalFilterSetRangeTypeDeferred"] = "categorical-filter-set-range-type-deferred";
	    // Inform cache when a user changes whether the selection is exclusive
	    DocCommands["CategoricalFilterSetSelectionExclusiveDeferred"] = "categorical-filter-set-selection-exclusive-deferred";
	    // Inform cache when a user changes whether an empty selection should be considered a selection of 'All' in a Manual selection mode
	    DocCommands["CategoricalFilterSetUseAllWhenManualIsEmptyDeferred"] = "categorical-filter-set-use-all-when-manual-is-empty-deferred";
	    // Inform cache when a user alters the preset type
	    DocCommands["CategoricalFilterSetPresetTypeDeferred"] = "categorical-filter-set-preset-type-deferred";
	    // Inform cache the user has selected one or more members
	    DocCommands["CategoricalFilterSelectRelationalMembersDeferred"] = "categorical-filter-select-relational-members-deferred";
	    // Inform cache the user has deselected one or more members
	    DocCommands["CategoricalFilterDeselectRelationalMembersDeferred"] = "categorical-filter-deselect-relational-members-deferred";
	    // Inform cache when a user selects everything in the domain
	    DocCommands["CategoricalFilterSelectAllRelationalMembersDeferred"] = "categorical-filter-select-all-relational-members-deferred";
	    // Inform cache when a user deselects everything in the domain
	    DocCommands["CategoricalFilterDeselectAllRelationalMembersDeferred"] = "categorical-filter-deselect-all-relational-members-deferred";
	    // Inform cache the user wants to see a different domain (e.g. relevant values only)
	    DocCommands["CategoricalFilterSetDomainTypeDeferred"] = "categorical-filter-set-domain-type-deferred";
	    // Gets a quantitative filter display presentation model for the specified field.
	    DocCommands["GetQuantitativeFilter"] = "get-quantitative-filter";
	    // Loads the quantitative filter domain values from the data.
	    DocCommands["LoadQuantitativeFilterDomain"] = "load-quantitative-filter-domain";
	    // Loads the quantitative filter domain range values from the data.
	    DocCommands["LoadQuantitativeFilterRange"] = "load-quantitative-filter-range";
	    // Applies the changes to a quantitative filter.
	    DocCommands["ApplyQuantitativeFilterRange"] = "apply-quantitative-filter-range";
	    // Gets a relative date filter display presentation model for the specified field.
	    DocCommands["GetRelativeDateFilter"] = "get-relative-date-filter";
	    // Gets the relative date filter widget labels based on the display presenation model.
	    DocCommands["GetRelativeDateFilterLabels"] = "get-relative-date-filter-labels";
	    // Applies a relative date to a filter.
	    DocCommands["ApplyRelativeDateFilter"] = "apply-relative-date-filter";
	    // Set whether filters apply to totals as well as non-totals table calcs
	    DocCommands["FilterApplyToTotalTableCalcs"] = "filter-apply-to-total-table-calcs";
	    // Gets the list of filters used in a worksheet
	    DocCommands["GetWorksheetFilters"] = "get-worksheet-filters";
	    // Gets the domain for a categorical Filter
	    DocCommands["GetCategoricalDomain"] = "get-categorical-domain";
	    // Gets the domain for a quantitative Filter
	    DocCommands["GetQuantitativeDomain"] = "get-quantitative-domain";
	    // Creates a new filter for a combined field (Group).
	    DocCommands["CreateGroupFilter"] = "create-group-filter";
	    // Creates a datasource filter store and returns a list of the current datasource filters.
	    DocCommands["CreateDatasourceFilterStore"] = "create-datasource-filter-store";
	    // Commits the pending datasource filter changes in the filter store.
	    DocCommands["CommitDatasourceFilterStore"] = "commit-datasource-filter-store";
	    // Gets the list of datasource fields that can be filtered.
	    DocCommands["GetDatasourceFilterFieldPickerModel"] = "get-datasource-filter-field-picker-model";
	    // Get field information needed for creating a datasource filter.
	    DocCommands["GetDatasourceFilterFieldInfo"] = "get-datasource-filter-field-info";
	    // Gets a filter presentation model form a filter store.
	    DocCommands["GetFilterFromStore"] = "get-filter-from-store";
	    // Removes a filter from a filter store.
	    DocCommands["RemoveFilterFromStore"] = "remove-filter-from-store";
	    // Releases a filter store, and its resources, once it is no longer needed.
	    DocCommands["ReleaseFilterStore"] = "release-filter-store";
	    // Returns whether date properties should be enabled
	    DocCommands["GetDataSourceDatePropertiesAreEnabled"] = "get-datasource-date-properties-are-enabled";
	    // Get presmodel to populate date properties dialog
	    DocCommands["GetDataSourceDateProperties"] = "get-datasource-date-properties";
	    // Apply new settings for date properties
	    DocCommands["EditDataSourceDateProperties"] = "edit-datasource-date-properties";
	    // Apply data source delta to data source
	    DocCommands["ApplyDataSourceDelta"] = "apply-datasource-delta";
	    // Generate data source delta from local data source
	    DocCommands["GetDataSourceDelta"] = "get-datasource-delta";
	    // Gets the pres model for the Save Datasource dialog
	    DocCommands["GetWebSaveDatasourceDialog"] = "get-web-save-datasource-dialog";
	    // Creates a dialog in the browser to rename the datasource
	    DocCommands["WebRenameDatasourceDialog"] = "web-rename-datasource-dialog";
	    // Switches the view to the data tab for editing
	    DocCommands["WebEditDataSource"] = "web-edit-data-source";
	    // Toggles joining on null values
	    DocCommands["ToggleINDJoinSemantics"] = "toggle-ind-join-semantics";
	    // Join Null Values to Null Values
	    DocCommands["ToggleINDJoinSemanticsWrapper"] = "toggle-indjoin-semantics-wrapper";
	    // Toggles referential integrity
	    DocCommands["ToggleReferentialIntegrity"] = "toggle-referential-integrity";
	    // Retrieves list of summary objects, one for each connection in a datasource.
	    DocCommands["GetConnectionDescriptionSummaryPresModels"] = "get-connection-description-summary-pres-models";
	    // 
	    DocCommands["GetHighlightedData"] = "get-highlighted-data";
	    // 
	    DocCommands["GetSelectionData"] = "get-selection";
	    // 
	    DocCommands["Select"] = "select";
	    // 
	    DocCommands["SelectAll"] = "select-all";
	    // 
	    DocCommands["SelectByValue"] = "select-by-value";
	    // 
	    DocCommands["SelectNoneIncludingMaster"] = "select-none-including-master";
	    // 
	    DocCommands["AddManualItemsToFilter"] = "add-manual-items-to-filter";
	    // 
	    DocCommands["CategoricalFilter"] = "categorical-filter";
	    // 
	    DocCommands["CategoricalFilterByIndex"] = "categorical-filter-by-index";
	    // 
	    DocCommands["ChangeSharedFilter"] = "change-shared-filter";
	    // 
	    DocCommands["ClearContextFilters"] = "clear-context-filters";
	    // 
	    DocCommands["ClearExistingFilter"] = "clear-existing-filter";
	    // 
	    DocCommands["DefaultFilter"] = "default-filter";
	    // 
	    DocCommands["FilterGeo"] = "filter-geo";
	    // 
	    DocCommands["FilterNeg"] = "filter-neg";
	    // 
	    DocCommands["FilterNulls"] = "filter-nulls";
	    // 
	    DocCommands["FilterTargets"] = "filter-targets";
	    // 
	    DocCommands["GetSharedFilterPresModel"] = "get-shared-filter-pres-model";
	    // 
	    DocCommands["HierarchicalFilter"] = "hierarchical-filter";
	    // 
	    DocCommands["KeepOnlyOrExclude"] = "keep-only-or-exclude";
	    // 
	    DocCommands["RangeFilter"] = "range-filter";
	    // 
	    DocCommands["RelDateFilter"] = "relative-date-filter";
	    // 
	    DocCommands["ResetFilter"] = "reset-filter";
	    // 
	    DocCommands["ShowGeoAtDefault"] = "show-geo-at-default";
	    // 
	    DocCommands["ShowSVAtDefault"] = "show-sv-at-default";
	    // 
	    DocCommands["ToggleLockQuickFilters"] = "toggle-lock-quick-filters";
	    // 
	    DocCommands["AddDataConnection"] = "add-data-connection";
	    // 
	    DocCommands["AddDrillPath"] = "add-drill-path";
	    // 
	    DocCommands["AddCredentialsFromKeychain"] = "add-credentials-from-keychain";
	    // 
	    DocCommands["AddCredentialsFromKeychainFile"] = "add-credentials-from-keychain-file";
	    // 
	    DocCommands["AddFieldFolder"] = "add-field-folder";
	    // 
	    DocCommands["AddSubtotals"] = "add-subtotals";
	    // 
	    DocCommands["AddToDrillPath"] = "add-to-drill-path";
	    // 
	    DocCommands["AddToFieldFolder"] = "add-to-field-folder";
	    // 
	    DocCommands["AggregateMeasuresFlag"] = "aggregate-measures";
	    // 
	    DocCommands["ApplyCalculation"] = "apply-calculation";
	    // 
	    DocCommands["ApplyPageSetupOptions"] = "apply-page-setup-options";
	    // 
	    DocCommands["ApplyTableOptions"] = "apply-table-options";
	    // 
	    DocCommands["ApplyTypeInPill"] = "apply-type-in-pill";
	    // 
	    DocCommands["Assert"] = "assert";
	    // 
	    DocCommands["AttemptConnectDataSourcesOnSheet"] = "attempt-connect-datasources-on-sheet";
	    // 
	    DocCommands["AttemptConnectWorkbook"] = "attempt-connect-workbook";
	    // 
	    DocCommands["AttemptDataSourcesConnection"] = "attempt-datasources-connection";
	    // 
	    DocCommands["AutoUpdates"] = "auto-update";
	    // 
	    DocCommands["Brush"] = "highlight";
	    // 
	    DocCommands["BrushSpecial"] = "highlight-special";
	    // 
	    DocCommands["BuildDataSchemaDataSourceContextMenu"] = "build-data-schema-data-source-context-menu";
	    // 
	    DocCommands["BuildDataSchemaContextMenu"] = "build-data-schema-context-menu";
	    // 
	    DocCommands["BuildDataSchemaFieldContextMenu"] = "build-data-schema-field-context-menu";
	    // 
	    DocCommands["BuildDataSchemaDrillPathContextMenu"] = "build-data-schema-drill-path-context-menu";
	    // 
	    DocCommands["BuildFileTableInfoPresModel"] = "build-file-table-info-pres-model";
	    // 
	    DocCommands["BuildSheetTabContextMenu"] = "build-sheet-tab-context-menu";
	    // 
	    DocCommands["CancelDataSourcePresModel"] = "cancel-datasource-pres-model";
	    // 
	    DocCommands["CatBinMergeSplitLabel"] = "categorical-bin-merge-split";
	    // 
	    DocCommands["CategoricalQuickFilterEdit"] = "categorical-quick-filter-edit";
	    // 
	    DocCommands["CategoricalQuickFilterExcludeValues"] = "categorical-quick-filter-exclude-values";
	    // 
	    DocCommands["CategoricalQuickFilterIncludeAllWhenEmpty"] = "categorical-quick-filter-include-all-when-empty";
	    // 
	    DocCommands["CategoricalQuickFilterMode"] = "categorical-quick-filter-mode";
	    // 
	    DocCommands["CategoricalQuickFilterPattern"] = "categorical-quick-filter-pattern";
	    // 
	    DocCommands["ChangeAggregation"] = "change-aggregation";
	    // 
	    DocCommands["ChangeAlphaLevel"] = "change-alpha-level";
	    // 
	    DocCommands["ChangeBorder"] = "change-border";
	    // 
	    DocCommands["ChangeFieldType"] = "change-field-type";
	    // 
	    DocCommands["ChangeForecastColumnType"] = "change-forecast-column-type";
	    // 
	    DocCommands["ChangeHalo"] = "change-halo";
	    // 
	    DocCommands["ChangeMarkers"] = "change-markers";
	    // 
	    DocCommands["ChangeSize"] = "change-size";
	    // 
	    DocCommands["ChangeSheetTabColor"] = "change-sheet-tab-color";
	    // 
	    DocCommands["ClearAllAxisRanges"] = "clear-axis-ranges";
	    // 
	    DocCommands["ClearCalcModel"] = "clear-calculation-model";
	    // 
	    DocCommands["ClearFilters"] = "clear-filters";
	    // 
	    DocCommands["ClearFormatting"] = "clear-formatting";
	    // 
	    DocCommands["ClearFuture"] = "clear-future";
	    // 
	    DocCommands["ClearLayout"] = "clear-layout";
	    // 
	    DocCommands["ClearQuickFilter"] = "clear-quick-filter";
	    // 
	    DocCommands["ClearSorts"] = "clear-sorts";
	    // 
	    DocCommands["CloseConnection"] = "close-connection";
	    // 
	    DocCommands["CloseDataSource"] = "close-data-source";
	    // 
	    DocCommands["ConnectionAddGoogleAnalyticsDimension"] = "connection-add-google-analytics-dimension";
	    // 
	    DocCommands["ConnectionAddGoogleAnalyticsMeasure"] = "connection-add-google-analytics-measure";
	    // 
	    DocCommands["ConnectionAddNewTable"] = "connection-add-new-table";
	    // 
	    DocCommands["ConnectionAddCoalesce"] = "connection-add-coalesce";
	    // 
	    DocCommands["ConnectionAddPivot"] = "connection-add-pivot";
	    // 
	    DocCommands["ConnectionConvertToUnionAndEdit"] = "connection-convert-to-union-and-edit";
	    // 
	    DocCommands["ConnectionConvertToUnion"] = "connection-convert-to-union";
	    // 
	    DocCommands["ConnectionEditUnion"] = "connection-edit-union";
	    // 
	    DocCommands["ConnectionAddOrEditBatchUnion"] = "connection-add-or-edit-batch-union";
	    // 
	    DocCommands["ConnectionChangeTableProperty"] = "connection-change-table-property";
	    // 
	    DocCommands["ConnectionCountEntity"] = "connection-count-entity";
	    // 
	    DocCommands["ConnectionDataServerFetchMoreDatasources"] = "connection-dataserver-fetch-more-datasources";
	    // 
	    DocCommands["ConnectionDataServerProjectSelect"] = "connection-dataserver-change-selected-project";
	    // 
	    DocCommands["ConnectionDataServerUpdateFetchParameters"] = "connection-dataserver-update-fetch-parameters";
	    // 
	    DocCommands["ConnectionDataServerFlushCache"] = "connection-dataserver-flush-cache";
	    // 
	    DocCommands["ConnectionDeleteAllTables"] = "connection-delete-all-tables";
	    // 
	    DocCommands["ConnectionDeleteTable"] = "connection-delete-table";
	    // 
	    DocCommands["ConnectionEditGoogleAnalyticsAccount"] = "connection-edit-google-analytics-account";
	    // 
	    DocCommands["ConnectionEditGoogleAnalyticsDateRange"] = "connection-edit-google-analytics-date-range";
	    // 
	    DocCommands["ConnectionEditGoogleAnalyticsMeasureGroup"] = "connection-edit-google-analytics-measure-group";
	    // 
	    DocCommands["ConnectionToggleGAQueryPartitioning"] = "connection-toggle-ga-query-partitioning";
	    // 
	    DocCommands["ConnectionEditGoogleAnalyticsProperty"] = "connection-edit-google-analytics-property";
	    // 
	    DocCommands["ConnectionEditGoogleAnalyticsView"] = "connection-edit-google-analytics-view";
	    // 
	    DocCommands["ConnectionEditGoogleAnalyticsSegment"] = "connection-edit-google-analytics-segment";
	    // 
	    DocCommands["ConnectionEditJoinClauses"] = "connection-edit-join-clauses";
	    // 
	    DocCommands["ConnectionEditJoinType"] = "connection-edit-join-type";
	    // 
	    DocCommands["ConnectionEditSQLText"] = "connection-edit-sql-text";
	    // 
	    DocCommands["ConnectionFetchEntity"] = "connection-fetch-entity";
	    // 
	    DocCommands["ConnectionSetForceExtractRefresh"] = "connection-set-force-extract-refresh";
	    // 
	    DocCommands["ConnectionPrepareDataSourceForEdit"] = "connection-prepare-datasource-for-edit";
	    // 
	    DocCommands["ConnectionClearRefreshAttributes"] = "connection-clear-refresh-attributes";
	    // 
	    DocCommands["ConnectionRemoveGoogleAnalyticsDimension"] = "connection-remove-google-analytics-dimension";
	    // 
	    DocCommands["ConnectionRemoveGoogleAnalyticsMeasure"] = "connection-remove-google-analytics-measure";
	    // 
	    DocCommands["ConnectionRemoveCoalesce"] = "connection-remove-coalesce";
	    // 
	    DocCommands["ConnectionRemovePivot"] = "connection-remove-pivot";
	    // 
	    DocCommands["ConnectionAddDateParseFormats"] = "connection-add-date-parse-formats";
	    // 
	    DocCommands["ConnectionRenameTable"] = "connection-rename-table";
	    // 
	    DocCommands["ConnectionReplaceRelationWithSQLText"] = "connection-replace-relation-with-sql-text";
	    // 
	    DocCommands["ConnectionReplaceTable"] = "connection-replace-table";
	    // 
	    DocCommands["ConnectionResetTableAlias"] = "connection-reset-table-alias";
	    // 
	    DocCommands["ConnectionSelectCatalog"] = "connection-select-catalog";
	    // 
	    DocCommands["ConnectionSelectCube"] = "connection-select-cube";
	    // 
	    DocCommands["ConnectionSelectStoredProcedure"] = "connection-select-stored-procedure";
	    // 
	    DocCommands["ConnectionSelectBigQueryLegacySQLCheckBox"] = "connection-select-bigquery-legacy-check";
	    // 
	    DocCommands["ConnectionToggleHasHeaderRow"] = "connection-toggle-has-header-row";
	    // 
	    DocCommands["ConnectionToggleTableCleaning"] = "connection-toggle-table-cleaning";
	    // 
	    DocCommands["ConnectionToggleUseExtract"] = "connection-toggle-use-extract";
	    // 
	    DocCommands["ConnectionViewTableCleaningResults"] = "connection-view-table-cleaning-results";
	    // 
	    DocCommands["ConnectToDataServerSource"] = "connect-data-server-datasource";
	    // 
	    DocCommands["ConsiderZerosEmptyFlag"] = "consider-zeros-empty";
	    // 
	    DocCommands["ConvertUnnamedFields"] = "convert-unnamed-fields";
	    // 
	    DocCommands["Crash"] = "crash";
	    // 
	    DocCommands["CreateAggregateRole"] = "create-aggregate-role";
	    // 
	    DocCommands["CreateConnection"] = "create-connection";
	    // 
	    DocCommands["CreateDefaultQuickFilter"] = "create-default-quick-filter";
	    // 
	    DocCommands["CreateTypeInPill"] = "create-type-in-pill";
	    // 
	    DocCommands["CustomDataGridFieldOrder"] = "custom-datagrid-field-order";
	    // 
	    DocCommands["CustomDateAggregation"] = "custom-date-aggregation";
	    // 
	    DocCommands["CustomSplitField"] = "custom-split-field";
	    // 
	    DocCommands["DebugAssertion"] = "debug-assertion";
	    // 
	    DocCommands["DecrementParameterValue"] = "decr-parameter-value";
	    // 
	    DocCommands["DeleteFields"] = "delete-calculation-fields-command";
	    // 
	    DocCommands["DeleteSheet"] = "delete-sheet";
	    // 
	    DocCommands["DescribeDrillPath"] = "describe-drill-path";
	    // 
	    DocCommands["DescribeSortFilter"] = "describe-sort-filter";
	    // 
	    DocCommands["DismissNullWart"] = "dismiss-null-wart";
	    // 
	    DocCommands["DomainQuickFilter"] = "domain-quick-filter";
	    // 
	    DocCommands["DoubleFreeCrash"] = "double-free";
	    // 
	    DocCommands["DropNowhere"] = "drop-nowhere";
	    // 
	    DocCommands["DropOnSchemaViewer"] = "drop-on-schema-viewer";
	    // 
	    DocCommands["DropOnShelf"] = "drop-on-shelf";
	    // 
	    DocCommands["DropOnCalcEditor"] = "drop-on-calc-editor";
	    // 
	    DocCommands["DropOnShowMe"] = "drop-on-showme";
	    // 
	    DocCommands["DropPrepare"] = "drop-prepare";
	    // 
	    DocCommands["DualAxis"] = "dual-axis";
	    // 
	    DocCommands["DuplicateSheet"] = "duplicate-sheet";
	    // 
	    DocCommands["EditCopyCalc"] = "edit-copy-calc";
	    // 
	    DocCommands["EditDropLines"] = "edit-drop-lines";
	    // 
	    DocCommands["EditEnumeratedGroup"] = "edit-enumerated-group";
	    // 
	    DocCommands["EditNestedGroup"] = "edit-nested-group";
	    // 
	    DocCommands["EditPill"] = "edit-pill";
	    // 
	    DocCommands["EditPrimitiveType"] = "edit-primitive-type";
	    // 
	    DocCommands["EnableAllBrushing"] = "enable-all-highlights";
	    // 
	    DocCommands["EnableQuickFilter"] = "enable-quick-filter";
	    // 
	    DocCommands["EnableSheetBrushing"] = "enable-sheet-highlights";
	    // 
	    DocCommands["EnableThemedBrushing"] = "enable-themed-highlights";
	    // 
	    DocCommands["EnumerateVariables"] = "enumerate-variables";
	    // 
	    DocCommands["EnumerateVariableSelectionValues"] = "enumerate-variable-selection-values";
	    // 
	    DocCommands["EstablishConnection"] = "establish-connection";
	    // 
	    DocCommands["EstablishMatchingConnections"] = "establish-matching-connections";
	    // 
	    DocCommands["ExportDataToText"] = "export-data-to-text";
	    // 
	    DocCommands["ExtSvcConfig"] = "ext-svc-config";
	    // 
	    DocCommands["ExtSvcConfigConnect"] = "ext-svc-config-connect";
	    // 
	    DocCommands["Extract"] = "extract";
	    // 
	    DocCommands["SetDataGridCurrentTable"] = "set-data-grid-current-table";
	    // 
	    DocCommands["FetchTableRelevance"] = "fetch-table-relevance";
	    // 
	    DocCommands["FetchCachedTableRelevance"] = "fetch-cached-table-relevance";
	    // 
	    DocCommands["FlipLabels"] = "flip-labels";
	    // 
	    DocCommands["FloatingToolbar"] = "zoom-controls";
	    // 
	    DocCommands["FloatingToolbarToggle"] = "zoom-controls-toggle";
	    // 
	    DocCommands["ForecastConfig"] = "forecast-config";
	    // 
	    DocCommands["ForecastToggle"] = "forecast-toggle";
	    // 
	    DocCommands["FormatWorkbook"] = "format-workbook";
	    // 
	    DocCommands["GeographicSearchQuery"] = "geographic-search-query";
	    // 
	    DocCommands["GeographicSearchLoadData"] = "geographic-search-load-data";
	    // 
	    DocCommands["GeographicSearchIsDataDoneLoading"] = "geographic-search-data-done-loading";
	    // 
	    DocCommands["GeographicSearchToggleVisibility"] = "geographic-search-toggle-visibility";
	    // 
	    DocCommands["GetEditConnectionPresModel"] = "get-edit-connection-pres-model";
	    // 
	    DocCommands["GetEditEnumeratedGroupPresModel"] = "get-edit-enumerated-group-pres-model";
	    // 
	    DocCommands["GetEditNestedGroupPresModel"] = "get-edit-nested-group-pres-model";
	    // 
	    DocCommands["GetFrameFinderPresModel"] = "get-frame-finder-pres-model";
	    // 
	    DocCommands["GetGoogleSheetsListPresModel"] = "get-google-sheets-list-pres-model";
	    // 
	    DocCommands["GetGoogleSheetPanePresModel"] = "get-google-sheet-pane-pres-model";
	    // 
	    DocCommands["GetInitialSQLPresModel"] = "get-initial-sql-pres-model";
	    // 
	    DocCommands["GetQueryBandingPresModel"] = "get-query-banding-pres-model";
	    // 
	    DocCommands["GetTabbedAuthenticationPresModel"] = "get-tabbed-authentication-pres-model";
	    // 
	    DocCommands["GetActiveSheet"] = "get-active-sheet";
	    // 
	    DocCommands["GetAlphaLevel"] = "get-alpha-level";
	    // 
	    DocCommands["GetAppConfig"] = "get-app-config";
	    // 
	    DocCommands["GetDisabledSecondaryDSFields"] = "get-disabled-secondaryds-fields";
	    // 
	    DocCommands["GetBlendingFields"] = "get-blending-fields";
	    // 
	    DocCommands["GetCalculationPresModel"] = "get-calculation-pres-model";
	    // 
	    DocCommands["GetCategoricalColor"] = "get-categorical-color";
	    // 
	    DocCommands["GetClientInfo"] = "get-client-info";
	    // 
	    DocCommands["GetCommands"] = "get-commands";
	    // 
	    DocCommands["GetConnectionDescriptionPresModel"] = "get-connection-description-pres-model";
	    // 
	    DocCommands["GetDSDropdownPresModel"] = "get-ds-dropdown-pres-model";
	    // 
	    DocCommands["GetDataPreviewWindowMessagePresModel"] = "get-data-preview-window-pres-model";
	    // 
	    DocCommands["GetDataSourcePresModel"] = "get-datasource-pres-model";
	    // 
	    DocCommands["GetDataSourceSortPresModel"] = "get-datasource-sort-pres-model";
	    // 
	    DocCommands["GetDataSourcePropertiesPresModel"] = "get-datasource-properties-pres-model";
	    // 
	    DocCommands["GetConnectionSettingsPresModel"] = "get-connection-settings-pres-model";
	    // 
	    DocCommands["GetDashboard"] = "get-dashboard";
	    // 
	    DocCommands["GetDataPreview"] = "get-data-preview";
	    // 
	    DocCommands["GetDatabaseEnumerationPresModel"] = "get-database-enumeration-pres-model";
	    // 
	    DocCommands["GetDefaultColor"] = "get-default-color";
	    // 
	    DocCommands["GetDefaultShape"] = "get-default-shape";
	    // 
	    DocCommands["GetDragPresModelForText"] = "get-drag-pres-model-for-text";
	    // 
	    DocCommands["GetDropTargetPresModel"] = "get-drop-target-pres-model";
	    // 
	    DocCommands["GetEditDataServerConnectionPresModel"] = "get-edit-data-server-connection-pres-model";
	    // 
	    DocCommands["GetEditDropLinesModel"] = "get-edit-drop-lines-model";
	    // 
	    DocCommands["GetEncodingState"] = "get-encoding-state";
	    // 
	    DocCommands["GetEncodingTypeMenuModel"] = "get-encoding-type-menu";
	    // 
	    DocCommands["GetExtSvcConfig"] = "get-ext-svc-config";
	    // 
	    DocCommands["GetForecastPresModel"] = "get-forecast-pres-model";
	    // 
	    DocCommands["GetJoinDescriptionPresModel"] = "get-join-description-pres-model";
	    // 
	    DocCommands["GetQuickFilter"] = "get-quick-filter";
	    // 
	    DocCommands["GetQuickFilters"] = "get-quick-filters";
	    // 
	    DocCommands["GetReferenceLinePresModel"] = "get-reference-line-pres-model";
	    // 
	    DocCommands["GetParameters"] = "get-parameters";
	    // 
	    DocCommands["GetParameterModels"] = "get-parameter-models";
	    // 
	    DocCommands["GetParametersRegistryInfo"] = "get-params-registry-info";
	    // 
	    DocCommands["GetPivotPresModel"] = "get-pivot-pres-model";
	    // 
	    DocCommands["GetScene"] = "get-scene";
	    // 
	    DocCommands["GetSchemaEnumerationPresModel"] = "get-schema-enumeration-pres-model";
	    // 
	    DocCommands["GetSheetsInfo"] = "get-sheets-info";
	    // 
	    DocCommands["GetShowMe"] = "get-show-me";
	    // 
	    DocCommands["GetStandardConnectionEnumerationPresModel"] = "get-standard-connection-enumeration-pres-model";
	    // 
	    DocCommands["GetStoredProcedureEnumerationPresModel"] = "get-stored-procedure-enumeration-pres-model";
	    // 
	    DocCommands["GetStoredProcedureParametersPresModel"] = "get-stored-procedure-parameters-pres-model";
	    // 
	    DocCommands["GetTableEnumerationPresModel"] = "get-table-enumeration-pres-model";
	    // 
	    DocCommands["GetTableCleaningPresModel"] = "get-table-cleaning-pres-model";
	    // 
	    DocCommands["GetTargetFieldList"] = "get-target-field-list";
	    // 
	    DocCommands["GetTopLevelConnectionDescriptionPresModel"] = "get-top-level-connection-description-pres-model";
	    // 
	    DocCommands["GetTypeInPillPresModel"] = "get-type-in-pill-pres-model";
	    // 
	    DocCommands["GetUberTipPresModel"] = "get-ubertip-pres-model";
	    // 
	    DocCommands["GetUnionInfoPresModel"] = "get-union-info-pres-model";
	    // 
	    DocCommands["GetVisual"] = "get-visual";
	    // 
	    DocCommands["GetVizData"] = "get-viz-data";
	    // 
	    DocCommands["GetWarehouseEnumerationPresModel"] = "get-warehouse-enumeration-pres-model";
	    // 
	    DocCommands["GetWorkbook"] = "get-workbook";
	    // 
	    DocCommands["GetWorldUpdate"] = "get-world-update";
	    // 
	    DocCommands["GoToSheet"] = "goto-sheet";
	    // 
	    DocCommands["HeapCorruptionCrash"] = "corrupt-heap";
	    // 
	    DocCommands["HideColumnFieldLabel"] = "hide-column-field-label";
	    // 
	    DocCommands["HideEmptyColsFlag"] = "hide-empty-cols";
	    // 
	    DocCommands["HideEmptyRowsFlag"] = "hide-empty-rows";
	    // 
	    DocCommands["HideLabel"] = "hide-label";
	    // 
	    DocCommands["HideRowFieldLabel"] = "hide-row-field-label";
	    // 
	    DocCommands["HierarchicalQuickFilterUpdateSetFunction"] = "hierarchical-quick-filter-update-set-function";
	    // 
	    DocCommands["IncludeInTooltip"] = "include-in-tooltip";
	    // 
	    DocCommands["IncludeOtherCategoricalBin"] = "include-other-cat-bin";
	    // 
	    DocCommands["IncrementExtract"] = "increment-extract";
	    // 
	    DocCommands["IncrementParameterValue"] = "incr-parameter-value";
	    // 
	    DocCommands["CreateCalc"] = "create-calc";
	    // 
	    DocCommands["EditCalc"] = "edit-calc";
	    // 
	    DocCommands["InvokeHyperlink"] = "invoke-hyperlink";
	    // 
	    DocCommands["KeepOnlyOrExcludeSelection"] = "keep-only-or-exclude-selection";
	    // 
	    DocCommands["LabelDrill"] = "label-drill";
	    // 
	    DocCommands["LabelDrillCtx"] = "label-drill-ctx";
	    // 
	    DocCommands["LevelDrill"] = "level-drill";
	    // 
	    DocCommands["LoadUrl"] = "load-url";
	    // 
	    DocCommands["ListPublishedDataSources"] = "list-published-datasources";
	    // 
	    DocCommands["MarkLabel"] = "mark-label";
	    // 
	    DocCommands["MarkTrail"] = "mark-trail";
	    // 
	    DocCommands["MemoryDumpObjectCounts"] = "memory-dump-object-counts";
	    // 
	    DocCommands["MemoryLeak"] = "memory-leak";
	    // 
	    DocCommands["Merge"] = "merge-or-split";
	    // 
	    DocCommands["MigrateDataSource"] = "migrate-data-source";
	    // 
	    DocCommands["ModifyMarksInSet"] = "add-or-remove-marks";
	    // 
	    DocCommands["MoveAreaAnnotationText"] = "move-area-annotation-text";
	    // 
	    DocCommands["MoveColumnTotals"] = "move-column-totals";
	    // 
	    DocCommands["MoveMark"] = "move-mark";
	    // 
	    DocCommands["MovePointAnnotation"] = "move-point-annotation";
	    // 
	    DocCommands["MovePointAnnotationTarget"] = "move-point-annotation-target";
	    // 
	    DocCommands["MoveReferenceLine"] = "move-reference-line";
	    // 
	    DocCommands["MoveRowTotals"] = "move-row-totals";
	    // 
	    DocCommands["NavigateToSheet"] = "navigate-to-sheet";
	    // 
	    DocCommands["PostCalcJoinClauseResult"] = "post-calc-join-clause-result";
	    // 
	    DocCommands["NewDocDashboard"] = "new-dashboard";
	    // 
	    DocCommands["NewDocWorksheet"] = "new-worksheet";
	    // 
	    DocCommands["NonRangedRemoveReferenceLine"] = "non-ranged-remove-reference-line";
	    // 
	    DocCommands["OptimizeExtract"] = "optimize-extract";
	    // 
	    DocCommands["OptOutActions"] = "opt-out-actions";
	    // 
	    DocCommands["PageHistorySettings"] = "page-history-settings";
	    // 
	    DocCommands["PageToggleTrails"] = "page-toggle-trails";
	    // 
	    DocCommands["ParseUIName"] = "parse-ui-name";
	    // 
	    DocCommands["Percentages"] = "percentages";
	    // 
	    DocCommands["Perspectives"] = "perspectives";
	    // 
	    DocCommands["PositionPointAnnotation"] = "position-point-annotation";
	    // 
	    DocCommands["ProtocolPoolLog"] = "protocol-pool-log";
	    // 
	    DocCommands["PublishToWorkgroup"] = "publish-to-workgroup";
	    // 
	    DocCommands["PublishDataSource"] = "publish-datasource";
	    // 
	    DocCommands["PublishDataSourceFromData"] = "publish-data-source-from-data";
	    // 
	    DocCommands["PublishDataSourceFromWorkbookData"] = "publish-data-source-from-workbook-data";
	    // 
	    DocCommands["QuantitativeQuickFilterEdit"] = "quantitative-quick-filter-edit";
	    // 
	    DocCommands["QuantitativeModeQuickFilter"] = "quantitative-mode-quick-filter";
	    // 
	    DocCommands["QueryMigrateDataSources"] = "query-migrate-data-sources";
	    // 
	    DocCommands["QuickSort"] = "quick-sort";
	    // 
	    DocCommands["RangedByIndexMerge"] = "ranged-by-index-merge";
	    // 
	    DocCommands["RangedByValueMerge"] = "ranged-by-value-merge";
	    // 
	    DocCommands["Record"] = "record";
	    // 
	    DocCommands["Redo"] = "redo";
	    // 
	    DocCommands["RefreshExtract"] = "refresh-extract";
	    // 
	    DocCommands["RefreshFromSource"] = "refresh-from-source";
	    // 
	    DocCommands["RelativeDateQuickFilterEdit"] = "relative-date-quick-filter-edit";
	    // 
	    DocCommands["RemoveAllReferenceLines"] = "remove-all-reference-lines";
	    // 
	    DocCommands["RemoveDrillPath"] = "remove-drill-path";
	    // 
	    DocCommands["RemoveExtract"] = "remove-extract";
	    // 
	    DocCommands["RemoveFieldFolder"] = "remove-field-folder";
	    // 
	    DocCommands["RemoveFieldLabel"] = "remove-field-label";
	    // 
	    DocCommands["RemoveFields"] = "remove-fields";
	    // 
	    DocCommands["RemoveFieldsFromShelf"] = "remove-fields-from-shelf";
	    // 
	    DocCommands["RemoveFromDrillPath"] = "remove-from-drill-path";
	    // 
	    DocCommands["RemoveFromFieldFolder"] = "remove-from-field-folder";
	    // 
	    DocCommands["RemoveReferenceLine"] = "remove-reference-line";
	    // 
	    DocCommands["RemoveSubtotals"] = "remove-subtotals";
	    // 
	    DocCommands["RenameDataSource"] = "rename-data-source";
	    // 
	    DocCommands["RenameDrillPath"] = "rename-drill-path";
	    // 
	    DocCommands["RenameFieldFolder"] = "rename-field-folder";
	    // 
	    DocCommands["RenameSheet"] = "rename-sheet";
	    // 
	    DocCommands["ReorderLabels"] = "reorder-labels";
	    // 
	    DocCommands["ReportBug"] = "report-bug";
	    // 
	    DocCommands["RequestDataSourcePresModel"] = "request-datasource-pres-model";
	    // 
	    DocCommands["ResetParameterCtrlTitle"] = "reset-parameter-ctrl-title";
	    // 
	    DocCommands["ResetTooltip"] = "reset-tooltip";
	    // 
	    DocCommands["ResizeAreaAnnotationText"] = "resize-area-annotation-text";
	    // 
	    DocCommands["ResizeAxis"] = "resize-axis";
	    // 
	    DocCommands["ResizeCell"] = "resize-cell";
	    // 
	    DocCommands["ResizeHeader"] = "resize-header";
	    // 
	    DocCommands["ResizePointAnnotation"] = "resize-point-annotation";
	    // 
	    DocCommands["Revert"] = "revert";
	    // 
	    DocCommands["RotateFieldLabel"] = "rotate-field-label";
	    // 
	    DocCommands["RotateLabel"] = "rotate-label";
	    // 
	    DocCommands["SplitFieldLabel"] = "split-field-label";
	    // 
	    DocCommands["RunAction"] = "run-action";
	    // 
	    DocCommands["RunScript"] = "run-script";
	    // 
	    DocCommands["RunUpdates"] = "run-update";
	    // 
	    DocCommands["SaveModel"] = "save-model";
	    // 
	    DocCommands["SavePublishedDStoFile"] = "save-published-ds-to-file";
	    // 
	    DocCommands["SelectDataSource"] = "select-data-source";
	    // 
	    DocCommands["SelectFieldsInShelf"] = "select-fields-in-shelf";
	    // 
	    DocCommands["SendDataConnectionTableViewMessage"] = "send-data-connection-tableview-message";
	    // 
	    DocCommands["SetActiveDataSourceName"] = "set-active-data-source-name";
	    // 
	    DocCommands["SetActiveConnectionName"] = "set-active-connection-name";
	    // 
	    DocCommands["SetActiveDataSource"] = "set-active-datasource";
	    // 
	    DocCommands["SetBasePalette"] = "set-base-palette";
	    // 
	    DocCommands["SetCategoricalColor"] = "set-categorical-color";
	    // 
	    DocCommands["SetDataCacheDelta"] = "set-data-cache-delta";
	    // 
	    DocCommands["SetDataPreviewAutoUpdate"] = "set-data-preview-auto-update";
	    // 
	    DocCommands["SetDataPreviewCustomFieldOrder"] = "set-data-preview-custom-field-order";
	    // 
	    DocCommands["SetDefaultColor"] = "set-default-color";
	    // 
	    DocCommands["SetDefaultShape"] = "set-default-shape";
	    // 
	    DocCommands["SetFilterContext"] = "set-filter-context";
	    // 
	    DocCommands["SetFilterShared"] = "set-filter-shared";
	    // 
	    DocCommands["SetInitialSQL"] = "set-initial-sql";
	    // 
	    DocCommands["SetItemColor"] = "set-item-color";
	    // 
	    DocCommands["SetItemColorResetCustomization"] = "set-item-color-reset-customization";
	    // 
	    DocCommands["SetItemEncodingType"] = "set-item-encoding-type";
	    // 
	    DocCommands["SetMarkSize"] = "set-mark-size";
	    // 
	    DocCommands["SetPageNavFlag"] = "set-page-flag";
	    // 
	    DocCommands["SetParameterCtrlDisplayFlags"] = "set-parameter-ctrl-display-flags";
	    // 
	    DocCommands["SetParameterCtrlDisplayMode"] = "set-parameter-ctrl-display-mode";
	    // 
	    DocCommands["SetParameterCtrlTitle"] = "set-parameter-ctrl-title";
	    // 
	    DocCommands["SetParameterValue"] = "set-parameter-value";
	    // 
	    DocCommands["SetPrimitive"] = "set-primitive";
	    // 
	    DocCommands["SetQueryBanding"] = "set-query-banding";
	    // 
	    DocCommands["SetQuickFilterIncludedValues"] = "set-quick-filter-included";
	    // 
	    DocCommands["SetReferenceLineFormula"] = "set-reference-line-formula";
	    // 
	    DocCommands["SetReferenceLineConstantValue"] = "set-reference-line-constant-value";
	    // 
	    DocCommands["SetSheetFormatting"] = "set-sheet-formatting";
	    // 
	    DocCommands["SetSheetSize"] = "set-sheet-size";
	    // 
	    DocCommands["SetTotalsType"] = "set-totals-type";
	    // 
	    DocCommands["SetWorkbookLocale"] = "set-workbook-locale";
	    // 
	    DocCommands["ShowCatCtrlQuickFilter"] = "show-cat-ctrl-quick-filter";
	    // 
	    DocCommands["ShowColFieldNamesFlag"] = "show-col-field-names";
	    // 
	    DocCommands["ShowColTotalsFlag"] = "show-col-totals";
	    // 
	    DocCommands["ShowColumnFieldLabel"] = "show-column-field-label";
	    // 
	    DocCommands["ShowEmptyColsFlag"] = "show-empty-cols";
	    // 
	    DocCommands["ShowEmptyRowsFlag"] = "show-empty-rows";
	    // 
	    DocCommands["ShowForecastEditor"] = "show-forecast-editor";
	    // 
	    DocCommands["ShowFullRange"] = "show-full-range";
	    // 
	    DocCommands["ShowHeader"] = "show-header";
	    // 
	    DocCommands["ShowHiddenData"] = "show-hidden-data";
	    // 
	    DocCommands["ShowMe"] = "show-me";
	    // 
	    DocCommands["ShowQuantCtrlQuickFilter"] = "show-quant-ctrl-quick-filter";
	    // 
	    DocCommands["ShowQuickFilterDoc"] = "show-quickfilter-doc";
	    // 
	    DocCommands["ShowReferenceLineEditor"] = "show-reference-line-editor";
	    // 
	    DocCommands["ShowReferenceLineConstantValueEditor"] = "show-reference-line-constant-value-editor";
	    // 
	    DocCommands["ShowReferenceLineFormatter"] = "show-reference-line-formatter";
	    // 
	    DocCommands["ShowRowFieldLabel"] = "show-row-field-label";
	    // 
	    DocCommands["ShowRowFieldNamesFlag"] = "show-row-field-names";
	    // 
	    DocCommands["ShowRowTotalsFlag"] = "show-row-totals";
	    // 
	    DocCommands["SimpleCommandList"] = "simple-command-list";
	    // 
	    DocCommands["Sleep"] = "sleep";
	    // 
	    DocCommands["SleepBackgroundThread"] = "sleep-background-thread";
	    // 
	    DocCommands["SortDataGridByColumn"] = "sort-datagrid-by-column";
	    // 
	    DocCommands["SortDataGridFields"] = "sort-datagrid-fields";
	    // 
	    DocCommands["SpecialValues"] = "special-values";
	    // 
	    DocCommands["SplitField"] = "split-field";
	    // 
	    DocCommands["StackMarks"] = "stack-marks";
	    // 
	    DocCommands["StackOverflowCrash"] = "stack-overflow";
	    // 
	    DocCommands["SubtotalAggregation"] = "subtotal-aggregation";
	    // 
	    DocCommands["Subtotals"] = "subtotals";
	    // 
	    DocCommands["SwapFields"] = "swap-fields";
	    // 
	    DocCommands["SwapRowsAndColumns"] = "swap-rows-and-columns";
	    // 
	    DocCommands["TableauException"] = "tableau-exception";
	    // 
	    DocCommands["ToggleDropLines"] = "toggle-drop-lines";
	    // 
	    DocCommands["ToggleFieldBlending"] = "toggle-field-blending";
	    // 
	    DocCommands["ToggleMarkLabels"] = "toggle-mark-labels";
	    // 
	    DocCommands["TogglePageTitle"] = "toggle-page-title";
	    // 
	    DocCommands["ToggleParameterCtrlDisplayFlag"] = "toggle-parameter-ctrl-display-flag";
	    // 
	    DocCommands["ToggleParameterCtrlTitle"] = "toggle-parameter-ctrl-title";
	    // 
	    DocCommands["ToggleQuickFilterTitle"] = "toggle-quick-filter-title";
	    // 
	    DocCommands["ToggleVizNavigationSetting"] = "toggle-viz-navigation-setting";
	    // 
	    DocCommands["Undo"] = "undo";
	    // 
	    DocCommands["UnhideData"] = "unhide-data";
	    // 
	    DocCommands["UnhideLabel"] = "unhide-label";
	    // 
	    DocCommands["UpdateAreaAnnotation"] = "update-area-annotation";
	    // 
	    DocCommands["UpdateCalcScopeIsolation"] = "update-scope-isolation-for-calculation";
	    // 
	    DocCommands["UpdateDataServerConnectionInfo"] = "update-data-server-connection-info";
	    // 
	    DocCommands["UpdatePointAnnotationPullback"] = "update-point-annotation-pullback";
	    // 
	    DocCommands["UpdateTableCalcInfo"] = "update-table-calc-infomation";
	    // 
	    DocCommands["UpgradeExtract"] = "upgrade-extract";
	    // 
	    DocCommands["UseExtract"] = "use-extract";
	    // 
	    DocCommands["ValidateDrillPathName"] = "validate-drill-path-name";
	    // 
	    DocCommands["ValidateFormula"] = "validate-formula";
	    // 
	    DocCommands["ValidateInitialSQL"] = "validate-initial-sql";
	    // 
	    DocCommands["ValidateQueryBanding"] = "validate-query-banding";
	    // 
	    DocCommands["ValidateTypeInPill"] = "validate-type-in-pill";
	    // 
	    DocCommands["ViewParameterCtrls"] = "view-param-ctrls";
	    // 
	    DocCommands["ViewQuickFilters"] = "view-quick-filters";
	    // 
	    DocCommands["GetSchema"] = "get-schema";
	    // 
	    DocCommands["GetSchemaViewerDataSchema"] = "get-schema-viewer-data-schema";
	    // 
	    DocCommands["ConvertToDimension"] = "convert-to-dimension";
	    // 
	    DocCommands["ConvertToMeasure"] = "convert-to-measure";
	    // 
	    DocCommands["ConvertToContinuous"] = "convert-to-continuous";
	    // 
	    DocCommands["ConvertToDiscrete"] = "convert-to-discrete";
	    // 
	    DocCommands["RenameField"] = "rename-field";
	    // 
	    DocCommands["HideField"] = "hide-field";
	    // 
	    DocCommands["UnhideField"] = "unhide-field";
	    // 
	    DocCommands["HideUnusedFields"] = "hide-unused-fields";
	    // 
	    DocCommands["DuplicateFields"] = "duplicate-fields";
	    // 
	    DocCommands["CleanValues"] = "clean-values";
	    // 
	    DocCommands["ParseDate"] = "parse-date";
	    // 
	    DocCommands["MakeDate"] = "make-date";
	    // 
	    DocCommands["SetQualifyNames"] = "set-qualify-names";
	    // 
	    DocCommands["CreateMeasureFromColumn"] = "create-measure-from-column";
	    // 
	    DocCommands["RemoveFromSchemaDrillPath"] = "remove-from-schema-drill-path";
	    // 
	    DocCommands["AddToSchemaDrillPath"] = "add-to-schema-drill-path";
	    // 
	    DocCommands["RemoveSchemaDrillPath"] = "remove-schema-drill-path";
	    // 
	    DocCommands["ShowHiddenFields"] = "show-hidden-fields";
	    // 
	    DocCommands["ShowAliases"] = "show-aliases";
	    // 
	    DocCommands["SetRowDisplayCount"] = "set-row-display-count";
	    // 
	    DocCommands["ShowStructure"] = "show-structure";
	    // 
	    DocCommands["GroupByTable"] = "group-by-table";
	    // 
	    DocCommands["ChangeDataType"] = "change-data-type";
	    // 
	    DocCommands["ChangePivotStrategy"] = "change-pivot-strategy";
	    // 
	    DocCommands["ChangeDisplayAlias"] = "change-display-alias";
	    // 
	    DocCommands["SetIncludeSharedMembers"] = "set-include-shared-members";
	    // 
	    DocCommands["SetUtilityDimension"] = "set-utility-dimension";
	    // 
	    DocCommands["SetDefaultHierarchy"] = "set-default-hierarchy";
	    // 
	    DocCommands["DataSourceSortOrder"] = "data-source-sort-order";
	    // 
	    DocCommands["ClearUtilityDimension"] = "clear-utility-dimension";
	    // 
	    DocCommands["ClearDefaultSort"] = "clear-default-sort";
	    // 
	    DocCommands["SetDefaultAggregation"] = "set-default-aggregation";
	    // 
	    DocCommands["SetDefaultVTAggregation"] = "set-default-vtaggregation";
	    // 
	    DocCommands["ChangeFiscalYear"] = "change-fiscal-year";
	    // 
	    DocCommands["ChangeSemanticRole"] = "change-semantic-role";
	    // 
	    DocCommands["AddToSheet"] = "add-to-sheet";
	    // 
	    DocCommands["DropSchemaSelOnShelf"] = "drop-schema-sel-on-shelf";
	    // 
	    DocCommands["AddToSchemaFieldFolder"] = "add-to-schema-field-folder";
	    // 
	    DocCommands["RemoveFromSchemaFieldFolder"] = "remove-from-schema-field-folder";
	    // 
	    DocCommands["RemoveSchemaFieldFolder"] = "remove-schema-field-folder";
	    // 
	    DocCommands["DefaultTextFormat"] = "default-text-format";
	    // 
	    DocCommands["EditSchemaCaption"] = "edit-schema-caption";
	    // 
	    DocCommands["ResetSchemaCaption"] = "reset-schema-caption";
	    // 
	    DocCommands["CreateOutlierSet"] = "create-outlier-set";
	})(DocCommands = exports.DocCommands || (exports.DocCommands = {}));
	var UICommands;
	(function (UICommands) {
	    // Launches a dialog with a given URL that can communicate with parent zone.
	    UICommands["DisplayExtensionDialog"] = "display-extension-dialog";
	    // Closes the dialog.
	    UICommands["CloseExtensionDialog"] = "close-extension-dialog";
	    // 
	    UICommands["About"] = "about";
	    // 
	    UICommands["AddDataServerDataSourceUI"] = "add-data-server-datasource-ui";
	    // 
	    UICommands["SwitchToDocumentAndAddDataServerDataSourceUI"] = "switch-to-document-and-add-data-server-ds-ui";
	    // 
	    UICommands["AddDrillPathUI"] = "add-drillpath-ui";
	    // 
	    UICommands["AddFieldFolderUI"] = "add-field-folder-ui";
	    // 
	    UICommands["AddFileToExtractUI"] = "add-file-to-extract-ui";
	    // 
	    UICommands["AddDataSourceToExtractUI"] = "add-data-source-to-extract-ui";
	    // 
	    UICommands["AddQCToSheetUI"] = "add-qc-to-sheet-ui";
	    // 
	    UICommands["AddReferenceLineUI"] = "add-reference-line-ui";
	    // 
	    UICommands["AddSchemaFieldFolderUI"] = "add-to-schema-field-folder-ui";
	    // 
	    UICommands["AddTableauServerDSConnectionUI"] = "add-tableau-server-ds-connection-ui";
	    // 
	    UICommands["AddToSchemaDrillPathUI"] = "add-to-schema-drillpath-ui";
	    // 
	    UICommands["AddToSheetUI"] = "add-to-sheet-ui";
	    // 
	    UICommands["AnnotateUI"] = "annotate-ui";
	    // 
	    UICommands["AppendDataSourceToRemoteExtractUI"] = "append-data-source-to-remote-extract-ui";
	    // 
	    UICommands["AttemptConnectDataSourcesOnSheetUI"] = "attempt-connect-datasources-on-sheet-ui";
	    // 
	    UICommands["AttemptDataSourceConnectionUI"] = "attempt-datasource-connect-ui";
	    // 
	    UICommands["AutoHideSheet"] = "auto-hide-sheet";
	    // 
	    UICommands["AutomationClickMRUItem"] = "click-mru-item";
	    // 
	    UICommands["CalculatedMembersUI"] = "calculated-members-ui";
	    // 
	    UICommands["ChangeAggregationUI"] = "change-aggregation-ui";
	    // 
	    UICommands["ChangeDataServerLogonUI"] = "change-data-server-logon-ui";
	    // 
	    UICommands["ChangeEssbaseAliasFile"] = "change-essbase-alias-file";
	    // 
	    UICommands["ChangeFieldTypeUI"] = "change-field-type-ui";
	    // 
	    UICommands["ChangeTabColorSheet"] = "change-tab-color-sheet";
	    // 
	    UICommands["CheckForProductUpdates"] = "check-for-product-updates";
	    // 
	    UICommands["ClearDashboardUI"] = "clear-dashboard-ui";
	    // 
	    UICommands["ClearSheetUI"] = "clear-sheet-ui";
	    // 
	    UICommands["ClearStoryUI"] = "clear-story-ui";
	    // 
	    UICommands["ClearVizUI"] = "clear-viz-ui";
	    // 
	    UICommands["CloseCalculationUI"] = "close-calculation-ui";
	    // 
	    UICommands["CloseDataSourceUI"] = "close-datasource-ui";
	    // 
	    UICommands["CloseWorkbook"] = "close-workbook";
	    // 
	    UICommands["ColorLegendEditUI"] = "color-legend-edit-ui";
	    // 
	    UICommands["CommitPillEditUI"] = "commit-pill-edit-ui";
	    // 
	    UICommands["ConnectDataSourceUI"] = "connect-datasource-ui";
	    // 
	    UICommands["ConnectRepromptUI"] = "connect-reprompt-ui";
	    // 
	    UICommands["ConnectVariablePromptUI"] = "connect-variable-prompt-ui";
	    // 
	    UICommands["ConnectVariablePromptMatchingUI"] = "connect-variable-prompt-matching-ui";
	    // 
	    UICommands["ConnectionAddNewCustomSQLUI"] = "connection-add-new-custom-sql-ui";
	    // 
	    UICommands["ConnectionAddNewTableUI"] = "connection-add-new-table-ui";
	    // 
	    UICommands["ConnectionDataGridCopyUI"] = "connection-data-grid-copy-ui";
	    // 
	    UICommands["ConnectionEditCustomSQLUI"] = "connection-custom-sql-ui";
	    // 
	    UICommands["ConnectionEditExtractUI"] = "connection-extract-ui";
	    // 
	    UICommands["ConnectionEditDBVariablesUI"] = "connection-edit-db-variables-ui";
	    // 
	    UICommands["ConnectionEditConnectionUI"] = "connection-edit-connection-ui";
	    // 
	    UICommands["ConnectionFinalizeDataSourceUI"] = "connection-finalize-datasource-ui";
	    // 
	    UICommands["ConnectionFinalizeExtractStatesUI"] = "connection-finalize-extract-states-ui";
	    // 
	    UICommands["ConnectionGetTypeGroupPresModelUI"] = "connection-get-type-group-pres-model-ui";
	    // 
	    UICommands["ConnectionGetSavedDataSourcesPresModelUI"] = "connection-get-saved-ds-pres-model-ui";
	    // 
	    UICommands["ConnectionPartitioningFailureUI"] = "connection-partitioning-failure-ui";
	    // 
	    UICommands["ConnectionReplaceTableUI"] = "connection-replace-table-ui";
	    // 
	    UICommands["ConnectionSearchCatalogUI"] = "connection-search-catalog-ui";
	    // 
	    UICommands["ConnectionSearchCubeUI"] = "connection-search-cube-ui";
	    // 
	    UICommands["ConnectionSelectCatalogUI"] = "connection-select-catalog-ui";
	    // 
	    UICommands["ConnectionSelectCubeUI"] = "connection-select-cube-ui";
	    // 
	    UICommands["ConnectionSelectStandardConnectionUI"] = "connection-select-standard-connection-ui";
	    // 
	    UICommands["ConnectionSelectStoredProcedureUI"] = "connection-select-stored-procedure-ui";
	    // 
	    UICommands["ConnectionShowEditTableDialogUI"] = "connection-show-edit-table-ui";
	    // 
	    UICommands["ConnectionShowPivotDialogUI"] = "conneciton-show-pivot-dialog-ui";
	    // 
	    UICommands["ConnectionSortCatalogUI"] = "connection-sort-catalog-ui";
	    // 
	    UICommands["ConnectionSortCubeUI"] = "connection-sort-cube-ui";
	    // 
	    UICommands["ConnectionValidateCustomSQLUI"] = "connection-validate-custom-sql-ui";
	    // 
	    UICommands["ConnectToCloudFile"] = "connect-to-cloud-file";
	    // 
	    UICommands["ConnectToDataServerSourceUI"] = "connect-data-server-datasource-ui";
	    // 
	    UICommands["ConnectionConvertToSQLUI"] = "connection-convert-to-sql-ui";
	    // 
	    UICommands["ConnectionRenameConnectionUI"] = "connection-rename-connection-ui";
	    // 
	    UICommands["ExportUnderlyingDataToCSVUI"] = "export-to-csv-with-progress-ui";
	    // 
	    UICommands["ConnectODBCUI"] = "connect-odbc-ui";
	    // 
	    UICommands["CopyCrosstab"] = "copy-crosstab";
	    // 
	    UICommands["CopyData"] = "copy-data";
	    // 
	    UICommands["CopyDrillPathFieldsUI"] = "copy-drill-path-fields-ui";
	    // 
	    UICommands["CopyFieldsDefnUI"] = "copy-fields-defn-ui";
	    // 
	    UICommands["CopyImage"] = "copy-image";
	    // 
	    UICommands["CopyImageDashboard"] = "copy-image-dashboard";
	    // 
	    UICommands["CopyImageWorksheet"] = "copy-image-worksheet";
	    // 
	    UICommands["CopyImageStory"] = "copy-image-story";
	    // 
	    UICommands["CopyWorksheetFormatting"] = "copy-formatting";
	    // 
	    UICommands["CreateCalculatedSetUI"] = "create-calculated-set-ui";
	    // 
	    UICommands["CreateCalculationUI"] = "create-calculation-ui";
	    // 
	    UICommands["CreateCombinedFieldUI"] = "create-combined-field-ui";
	    // 
	    UICommands["CreateConnectionUI"] = "create-connection-ui";
	    // 
	    UICommands["CreateDateBinUI"] = "create-Date-bin-ui";
	    // 
	    UICommands["CreateGroupSelectionUI"] = "create-group-selection-ui";
	    // 
	    UICommands["CreateGroupUI"] = "create-group-ui";
	    // 
	    UICommands["CreateIdentitySet"] = "create-user-filter";
	    // 
	    UICommands["CreateLeafConnectionUI"] = "create-leaf-connection-ui";
	    // 
	    UICommands["CreateNumericBinsUI"] = "create-numeric-bins-ui";
	    // 
	    UICommands["CreateSetUI"] = "create-set-ui";
	    // 
	    UICommands["CustomDateAggregationUI"] = "custom-date-aggregation-ui";
	    // 
	    UICommands["CutDrillPathFieldsUI"] = "cut-drill-path-fields-ui";
	    // 
	    UICommands["CutFieldsDefnUI"] = "cut-fields-defn-ui";
	    // 
	    UICommands["DeactivateDashboard"] = "deactivate-dashboard";
	    // 
	    UICommands["DeleteCookies"] = "delete-cookies";
	    // 
	    UICommands["DeleteFieldsUI"] = "delete-fields-ui";
	    // 
	    UICommands["DeleteSheetUI"] = "delete-sheet-ui";
	    // 
	    UICommands["DescribeAdhocClusterUI"] = "describe-adhoc-cluster-ui";
	    // 
	    UICommands["DescribeDrillPathUI"] = "describe-drillpath-ui";
	    // 
	    UICommands["DescribeFieldUI"] = "describe-field-ui";
	    // 
	    UICommands["DescribeForecastUI"] = "describe-forecast-ui";
	    // 
	    UICommands["DescribeSchemaDrillPathUI"] = "describe-schema-drillpath-ui";
	    // 
	    UICommands["DescribeTrendLine"] = "describe-trend-line";
	    // 
	    UICommands["DescribeTrendModel"] = "describe-trend-model";
	    // 
	    UICommands["OpenDiscoverPaneLinks"] = "open-discover-pane-links";
	    // 
	    UICommands["DismissGoToWorksheetTooltipUI"] = "dismiss-go-to-worksheet-tooltip-ui";
	    // 
	    UICommands["DownloadCopyDataSource"] = "download-copy-data-source";
	    // 
	    UICommands["DrilldownUI"] = "drilldown-ui";
	    // 
	    UICommands["DropSchemaSelOnShelfUI"] = "drop-schema-sel-on-shelf-ui";
	    // 
	    UICommands["DropUI"] = "drop-ui";
	    // 
	    UICommands["DuplicateDataSourceUI"] = "duplicate-datasource-ui";
	    // 
	    UICommands["DuplicateSheetAsCrosstab"] = "duplicate-sheet-as-crosstab";
	    // 
	    UICommands["DuplicateSheetOrCrosstabUI"] = "duplicate-sheet-or-crosstab-ui";
	    // 
	    UICommands["DuplicateSheetUI"] = "duplicate-sheet-ui";
	    // 
	    UICommands["EditAliasesUI"] = "edit-aliases-ui";
	    // 
	    UICommands["EditAnnotation"] = "edit-annotation";
	    // 
	    UICommands["EditAxisUI"] = "edit-axis-ui";
	    // 
	    UICommands["EditCalculatedSetUI"] = "edit-calculated-set-ui";
	    // 
	    UICommands["EditCalculationUI"] = "edit-calculation-ui";
	    // 
	    UICommands["EditCaptionUI"] = "edit-caption";
	    // 
	    UICommands["EditCombinedFieldUI"] = "edit-combined-field";
	    // 
	    UICommands["EditCopyFieldUI"] = "edit-copy-field-ui";
	    // 
	    UICommands["EditDataSourceUI"] = "edit-datasource-ui";
	    // 
	    UICommands["EditDataSourceFieldAliases"] = "edit-datasource-field-aliases";
	    // 
	    UICommands["EditDataSourceFiltersUI"] = "edit-datasource-filters-ui";
	    // 
	    UICommands["EditDataSourceSitePathsUI"] = "edit-datasource-site-paths-ui";
	    // 
	    UICommands["EditDateBinUI"] = "edit-date-bin-ui";
	    // 
	    UICommands["EditDefaultSortUI"] = "edit-default-sort-ui";
	    // 
	    UICommands["EditDropLinesUI"] = "edit-drop-lines-ui";
	    // 
	    UICommands["EditDropFieldUI"] = "edit-drop-field-ui";
	    // 
	    UICommands["EditDataSourceRelationshipsUI"] = "edit-datasource-relationships-ui";
	    // 
	    UICommands["EditEnumeratedSetUI"] = "edit-enumerated-set";
	    // 
	    UICommands["EditFilterQuickFilter"] = "edit-filter-quick-filter";
	    // 
	    UICommands["EditFilterUI"] = "edit-filter-ui";
	    // 
	    UICommands["EditForecastUI"] = "edit-forecast-ui";
	    // 
	    UICommands["EditGroupUI"] = "edit-group-ui";
	    // 
	    UICommands["EditGroupValue"] = "edit-group-value";
	    // 
	    UICommands["EditGroupValueLabel"] = "edit-group-value-label";
	    // 
	    UICommands["EditLegendGroupValueUI"] = "edit-group-value-legend";
	    // 
	    UICommands["EditImageUI"] = "edit-image-ui";
	    // 
	    UICommands["EditLegendMemberAliasUI"] = "edit-legend-member-alias-ui";
	    // 
	    UICommands["EditLegendTitleUI"] = "edit-legend-title-ui";
	    // 
	    UICommands["EditMarkColorUI"] = "edit-mark-color-ui";
	    // 
	    UICommands["EditMarkShapeUI"] = "edit-mark-shape-ui";
	    // 
	    UICommands["EditMemberAlias"] = "edit-member-alias";
	    // 
	    UICommands["EditMemberAliasLabel"] = "edit-member-alias-label";
	    // 
	    UICommands["EditPageTitleUI"] = "edit-page-title-ui";
	    // 
	    UICommands["EditParameterCtrlTitle"] = "edit-param-control-title";
	    // 
	    UICommands["EditPdfPageSelectionUI"] = "edit-pdf-page-selection-ui";
	    // 
	    UICommands["EditPrimaryAliasesUI"] = "edit-primary-aliases-ui";
	    // 
	    UICommands["EditReferenceLine"] = "edit-reference-line";
	    // 
	    UICommands["EditSchemaCalculationUI"] = "edit-schema-calculation-ui";
	    // 
	    UICommands["EditSchemaCalculationRangeUI"] = "edit-schema-calculation-range-ui";
	    // 
	    UICommands["EditSchemaCaptionUI"] = "edit-schema-caption-ui";
	    // 
	    UICommands["EditSchemaFieldAliasUI"] = "edit-schema-field-alias-ui";
	    // 
	    UICommands["ResetSchemaCaptionUI"] = "reset-schema-field-alias-ui";
	    // 
	    UICommands["ResetMultipleSchemaCaptionsUI"] = "reset-multiple-schema-field-alias-ui";
	    // 
	    UICommands["EditSchemaNumericBinsUI"] = "edit-schema-numeric-bins-ui";
	    // 
	    UICommands["EditSetUI"] = "edit-set-ui";
	    // 
	    UICommands["EditTitleQuickFilter"] = "edit-title-quick-filter";
	    // 
	    UICommands["EditTitleUI"] = "edit-title";
	    // 
	    UICommands["EditTooltipUI"] = "edit-tooltip";
	    // 
	    UICommands["EditTrendLinesUI"] = "edit-trend-lines-ui";
	    // 
	    UICommands["EditUserDescriptionUI"] = "edit-user-description-ui";
	    // 
	    UICommands["EditWMSMapTileServer"] = "edit-wms-map-tile-server";
	    // 
	    UICommands["EditZoneParam"] = "edit-zone-param";
	    // 
	    UICommands["EditZoneUrl"] = "edit-zone-url";
	    // 
	    UICommands["EstablishConnectionUI"] = "establish-connection-ui";
	    // 
	    UICommands["EstablishTableauServerConnectionUI"] = "establish-tableau-server-connection-ui";
	    // 
	    UICommands["ExecuteUIAutomationButton"] = "execute-ui-button-action";
	    // 
	    UICommands["ExecuteUIAutomationComboBox"] = "execute-ui-combo-box-action";
	    // 
	    UICommands["ExecuteUIAutomationGenericWidget"] = "execute-ui-generic-widget-action";
	    // 
	    UICommands["ExecuteUIAutomationLabel"] = "execute-ui-label-action";
	    // 
	    UICommands["ExecuteUIAutomationMenu"] = "execute-ui-menu-action";
	    // 
	    UICommands["ExecuteUIAutomationItemView"] = "execute-ui-item-view-action";
	    // 
	    UICommands["ExecuteUIAutomationTextBox"] = "execute-ui-text-box-action";
	    // 
	    UICommands["ExecuteUIAutomationToggleButton"] = "execute-ui-toggle-button-action";
	    // 
	    UICommands["ExecuteUIAutomationSlider"] = "execute-ui-slider-action";
	    // 
	    UICommands["ExecuteUIAutomationWindow"] = "execute-ui-window-action";
	    // 
	    UICommands["ExecuteUIAutomationWebView"] = "execute-ui-web-view-action";
	    // 
	    UICommands["ExecuteUIAutomationTab"] = "execute-ui-tab-action";
	    // 
	    UICommands["ExecuteUIAutomationTextBrowser"] = "execute-ui-text-browser-action";
	    // 
	    UICommands["ExitApplication"] = "exit-application";
	    // 
	    UICommands["ExportData"] = "export-data";
	    // 
	    UICommands["ExportDataSourceUI"] = "export-datasource-ui";
	    // 
	    UICommands["ExportPackagedWorkbook"] = "export-packaged";
	    // 
	    UICommands["ExportWorkbookSheetsUI"] = "export-workbook-sheets-ui";
	    // 
	    UICommands["ExtSvcConfigUI"] = "ext-svc-config-ui";
	    // 
	    UICommands["ExtractHistory"] = "extract-history";
	    // 
	    UICommands["ExtractPropertiesUI"] = "extract-properties-ui";
	    // 
	    UICommands["ExtractUI"] = "extract-ui";
	    // 
	    UICommands["FilterFieldLabelUI"] = "filter-field-label-ui";
	    // 
	    UICommands["FormatAnnotation"] = "format-annotation";
	    // 
	    UICommands["FormatAxisUI"] = "format-axis-ui";
	    // 
	    UICommands["FormatCaptionTitleUI"] = "format-caption-title";
	    // 
	    UICommands["FormatField"] = "format-pane";
	    // 
	    UICommands["FormatFieldLabelUI"] = "format-field-label-ui";
	    // 
	    UICommands["FormatLabel"] = "format-label";
	    // 
	    UICommands["FormatLegendsUI"] = "format-legends-ui";
	    // 
	    UICommands["FormatReferenceLine"] = "format-reference-line";
	    // 
	    UICommands["FormatUI"] = "format-ui";
	    // 
	    UICommands["FullScreen"] = "fullscreen";
	    // 
	    UICommands["GetDashboardSidePaneMode"] = "get-dashboard-sidepane-mode";
	    // 
	    UICommands["GetDebuggingInfo"] = "get-debugging-info";
	    // 
	    UICommands["GetIconPathForEncodingType"] = "get-icon-path-for-encoding-type";
	    // 
	    UICommands["GetIconPathForPrimitiveType"] = "get-icon-path-for-primitive-type";
	    // 
	    UICommands["GetTableOptionsPresModel"] = "get-table-options-pres-model";
	    // 
	    UICommands["GetWindowNameUI"] = "get-window-name";
	    // 
	    UICommands["GetWorksheetSidePaneMode"] = "get-worksheet-sidepane-mode";
	    // 
	    UICommands["GetHiddenSheets"] = "get-hidden-sheets";
	    // 
	    UICommands["GetOpenPaneMRUs"] = "get-open-pane-mrus";
	    // 
	    UICommands["GetOpenPaneSampleWorkbooks"] = "get-open-pane-sample-workbooks";
	    // 
	    UICommands["GetRetargetDataSourcePresModelUI"] = "get-retarget-datasource-pres-model-ui";
	    // 
	    UICommands["GetSchemaViewerPresModel"] = "get-schema-viewer-pres-model";
	    // 
	    UICommands["GetSelectedSheets"] = "get-selected-sheets";
	    // 
	    UICommands["GetSheetSorterThumbnail"] = "get-sheet-sorter-thumbnail";
	    // 
	    UICommands["GetSheetTabUIThumbnail"] = "get-sheet-tab-ui-thumbnail";
	    // 
	    UICommands["GetSheetTabUIText"] = "get-sheet-tab-ui-text";
	    // 
	    UICommands["GetVisibleTreeItems"] = "get-visible-tree-items";
	    // 
	    UICommands["GotoSheetRange"] = "goto";
	    // 
	    UICommands["GotoURL"] = "goto-url";
	    // 
	    UICommands["HideCaptionUI"] = "hide-caption";
	    // 
	    UICommands["HideFilmstripUI"] = "hide-filmstrip-ui";
	    // 
	    UICommands["HideTitleUI"] = "hide-title";
	    // 
	    UICommands["HideZoneUI"] = "hide-zone-ui";
	    // 
	    UICommands["HideAllSheetsUI"] = "hide-all-sheets-ui";
	    // 
	    UICommands["UnhideAllSheetsUI"] = "unhide-all-sheets-ui";
	    // 
	    UICommands["ImportLocalDataUI"] = "import-local-data-ui";
	    // 
	    UICommands["ImportMapSource"] = "import-map-source";
	    // 
	    UICommands["ImportMapSourceUI"] = "import-map-source-ui";
	    // 
	    UICommands["ImportWorkbookUI"] = "import-workbook-ui";
	    // 
	    UICommands["LoadDefaultFormattingUI"] = "load-formatting-ui";
	    // 
	    UICommands["LocateFieldUI"] = "locate-field-ui";
	    // 
	    UICommands["LogMemoryUsage"] = "log-memory-usage";
	    // 
	    UICommands["ManageLicensing"] = "manage-licensing";
	    // 
	    UICommands["ManageMapbox"] = "manage-mapbox";
	    // 
	    UICommands["ManagePublicWorkbooks"] = "manage-public";
	    // 
	    UICommands["ManageMapServices"] = "manage-map-services";
	    // 
	    UICommands["MapLayersUI"] = "map-layers-ui";
	    // 
	    UICommands["ManageWMS"] = "manage-wms";
	    // 
	    UICommands["UpgradeDataSourcesUI"] = "upgrade-datasources-ui";
	    // 
	    UICommands["UpgradeDataSourceUI"] = "upgrade-datasource-ui";
	    // 
	    UICommands["MoveRepository"] = "move-repository";
	    // 
	    UICommands["NewSchemaDrillPathUI"] = "new-schema-drill-path-ui";
	    // 
	    UICommands["NewUIDashboard"] = "new-dashboard-ui";
	    // 
	    UICommands["NewUIWorksheet"] = "new-worksheet-ui";
	    // 
	    UICommands["NewUIStoryboard"] = "new-storyboard-ui";
	    // 
	    UICommands["NewWorkbook"] = "new-workbook";
	    // 
	    UICommands["NextSheet"] = "next-sheet";
	    // 
	    UICommands["NonRangedEditReferenceLine"] = "non-ranged-edit-reference-line";
	    // 
	    UICommands["OpenBookmark"] = "open-bookmark";
	    // 
	    UICommands["OpenFromWorkgroup"] = "open-workbook-from-workgroup";
	    // 
	    UICommands["OpenMapSource"] = "open-map-source";
	    // 
	    UICommands["OpenMapSourceUI"] = "open-map-source-ui";
	    // 
	    UICommands["OpenSampleWorkbook"] = "open-sample-workbook";
	    // 
	    UICommands["OpenWorkbook"] = "open-workbook";
	    // 
	    UICommands["OpenRecentWorkbook"] = "open-recent-workbook";
	    // 
	    UICommands["OpenOtherFiles"] = "open-other-files";
	    // 
	    UICommands["OptimizeExtractUI"] = "optimize-extract-ui";
	    // 
	    UICommands["PageSetup"] = "page-setup";
	    // 
	    UICommands["Paste"] = "paste";
	    // 
	    UICommands["PasteFieldsDefnUI"] = "paste-fields-defn-ui";
	    // 
	    UICommands["PasteWorksheetFormatting"] = "paste-formatting";
	    // 
	    UICommands["PDFExport"] = "export-pdf";
	    // 
	    UICommands["PerspectivesUI"] = "perspectives-ui";
	    // 
	    UICommands["PresentationMode"] = "presentation-mode";
	    // 
	    UICommands["Print"] = "print";
	    // 
	    UICommands["PromptScript"] = "prompt-command";
	    // 
	    UICommands["PropertiesDataSourceUI"] = "properties-datasource-ui";
	    // 
	    UICommands["PublishDatasourceToWorkgroup"] = "publish-datasource-to-workgroup";
	    // 
	    UICommands["PublishDatasourceToWorkgroupFromData"] = "publish-datasource-to-workgroup-from-data";
	    // 
	    UICommands["PublishDatasourceToWorkgroupRange"] = "publish-datasource-to-workgroup-range";
	    // 
	    UICommands["PublishWorkbookToWorkgroup"] = "publish-workbook-to-workgroup";
	    // 
	    UICommands["PublishDatasourceToWorkgroupFromWorkbookData"] = "publish-datasource-to-workgroup-from-workbook-data";
	    // 
	    UICommands["PromptForDataSourceFileUI"] = "prompt-for-datasource-file-ui";
	    // 
	    UICommands["PromptUnknownWDCUrlUI"] = "prompt-unknown-wdc-url-ui";
	    // 
	    UICommands["QueryDataSourceUI"] = "query-datasource-ui";
	    // 
	    UICommands["QuickFilterFieldLabelUI"] = "quick-filter-field-label-ui";
	    // 
	    UICommands["QuickTableCalcUI"] = "quick-table-calc-ui";
	    // 
	    UICommands["ReconnectMapSourceUI"] = "reconnect-map-source-ui";
	    // 
	    UICommands["RecordPerformance"] = "record-perf";
	    // 
	    UICommands["RefreshAllExtractsUI"] = "refresh-all-extracts-ui";
	    // 
	    UICommands["RefreshAllThumbnailsUI"] = "refresh-all-thumbnails";
	    // 
	    UICommands["RefreshAutoExtractUI"] = "refresh-auto-extract-ui";
	    // 
	    UICommands["RefreshDataSourceUI"] = "refresh-datasource-ui";
	    // 
	    UICommands["RefreshExtractUI"] = "refresh-extract-ui";
	    // 
	    UICommands["RefreshFromSourceUI"] = "refresh-from-source-ui";
	    // 
	    UICommands["RefreshLocalDataUI"] = "refresh-local-data-ui";
	    // 
	    UICommands["RefreshThumbnailUI"] = "refresh-thumbnail";
	    // 
	    UICommands["ReleaseMemory"] = "release-memory";
	    // 
	    UICommands["RemoveAnnotation"] = "remove-annotation";
	    // 
	    UICommands["RemoveExtractUI"] = "remove-extract-ui";
	    // 
	    UICommands["RemoveMRUItem"] = "remove-mru";
	    // 
	    UICommands["RemoveSavedDataSourceUI"] = "remove-saved-datasource";
	    // 
	    UICommands["RemoveSheetFromDashboardUI"] = "remove-sheet-from-dashboard-ui";
	    // 
	    UICommands["RemoveTableUI"] = "remove-table-ui";
	    // 
	    UICommands["RenameDataSourceUI"] = "rename-datasource-ui";
	    // 
	    UICommands["RenameSchemaFieldFolderUI"] = "rename-field-folder-ui";
	    // 
	    UICommands["RenameSchemaDrillPathUI"] = "rename-schema-drillpath-ui";
	    // 
	    UICommands["RenameSheetUI"] = "rename-sheet-ui";
	    // 
	    UICommands["ReorderSheetsUI"] = "reorder-sheets-ui";
	    // 
	    UICommands["ReplaceDataSourceWithDataServerDataSourceUI"] = "replace-datasource-with-data-server-datasource-ui";
	    // 
	    UICommands["ReplaceFieldUI"] = "replace-field-ui";
	    // 
	    UICommands["ResetCaptionUI"] = "reset-caption-ui";
	    // 
	    UICommands["ResetCards"] = "reset-cards";
	    // 
	    UICommands["ResetLocalDataUI"] = "remove-local-data-ui";
	    // 
	    UICommands["ResetMessages"] = "reset-messages";
	    // 
	    UICommands["StartOnlineSyncClient"] = "start-online-sync-client";
	    // 
	    UICommands["ResetTitleUI"] = "reset-title-ui";
	    // 
	    UICommands["ResetToDefaultsMapCard"] = "reset-map-to-defaults";
	    // 
	    UICommands["ResetWorkbook"] = "revert-workbook-ui";
	    // 
	    UICommands["RetargetDataSource"] = "retarget-datasource";
	    // 
	    UICommands["RetargetDataSourceUI"] = "retarget-datasource-ui";
	    // 
	    UICommands["SaveAsWorkbook"] = "save-as-workbook";
	    // 
	    UICommands["SaveBookmark"] = "save-bookmark";
	    // 
	    UICommands["SaveDebuggingWorkbook"] = "save-debugging-workbook";
	    // 
	    UICommands["SaveDefaultFormattingUI"] = "save-formatting-ui";
	    // 
	    UICommands["SaveWorkbook"] = "save-workbook";
	    // 
	    UICommands["SchemaDefaultMemberUI"] = "schema-default-member-ui";
	    // 
	    UICommands["ScrollSheet"] = "scroll-sheet";
	    // 
	    UICommands["SetAccountsDimension"] = "set-accounts-dimension";
	    // 
	    UICommands["SetActiveConnectionUI"] = "set-active-connection-ui";
	    // 
	    UICommands["SetAnalyticsDropTargetVisibility"] = "set-analytics-drop-target-visibility";
	    // 
	    UICommands["SetDashboardSidePaneMode"] = "set-dashboard-sidepane-mode";
	    // 
	    UICommands["SetDefaultDateFormatUI"] = "set-default-date-format-ui";
	    // 
	    UICommands["SetDefaultLocationUI"] = "set-default-location-ui";
	    // 
	    UICommands["SetDefaultMapSourceUI"] = "set-default-mapsource-ui";
	    // 
	    UICommands["SetDefaultTextFormatUI"] = "set-default-text-format-ui";
	    // 
	    UICommands["SetDefaultUtilityMember"] = "set-default-utility-member";
	    // 
	    UICommands["SetFreeFormDashboardUI"] = "set-free-form-dashboard-ui";
	    // 
	    UICommands["SetFilterSharedUI"] = "set-filter-shared-ui";
	    // 
	    UICommands["SetKey"] = "set-key";
	    // 
	    UICommands["SetProductAutoUpdate"] = "set-auto-update";
	    // 
	    UICommands["SetQueryFailure"] = "set-query-failure";
	    // 
	    UICommands["SetRendering"] = "set-rendering";
	    // 
	    UICommands["SetRuntimeImmediateMode"] = "set-runtime-immediate-mode";
	    // 
	    UICommands["SetUILanguage"] = "set-ui-language";
	    // 
	    UICommands["SetWorkbookLocaleUI"] = "set-workbook-locale-ui";
	    // 
	    UICommands["SetWorksheetSidePaneMode"] = "set-worksheet-sidepane-mode";
	    // 
	    UICommands["SetZoneFixedSizeUI"] = "set-zone-fixed-size-ui";
	    // 
	    UICommands["SetsInOutUI"] = "show-in-out-sets";
	    // 
	    UICommands["ShapeLegendEditUI"] = "shape-legend-edit-ui";
	    // 
	    UICommands["ShowCloudFileOAuthPromptAndSelectionUI"] = "show-cloudfile-oauth-prompt-and-selection-ui";
	    // 
	    UICommands["ShowConnectionAuthUI"] = "show-connection-auth-ui";
	    // 
	    UICommands["ShowConnectionAuthAndEstablishConnectionUI"] = "show-connection-auth-and-establish-connection-ui";
	    // 
	    UICommands["ShowConnectTab"] = "show-connect-tab";
	    // 
	    UICommands["ShowCustomSplitDialogUI"] = "show-custom-split-dialog-ui";
	    // 
	    UICommands["ShowDocument"] = "document";
	    // 
	    UICommands["ShowFeatureFlagDialog"] = "show-feature-flag-dialog";
	    // 
	    UICommands["ShowFieldFormatUI"] = "show-field-format-ui";
	    // 
	    UICommands["ShowFieldInSchemaUI"] = "show-field-in-schema";
	    // 
	    UICommands["ShowFilmstripUI"] = "show-filmstrip-ui";
	    // 
	    UICommands["ShowGoogleSheetsSelectionUI"] = "show-google-sheets-selection-ui";
	    // 
	    UICommands["ShowHelp"] = "show-help";
	    // 
	    UICommands["ShowHideDashboardSheetUI"] = "show-hide-dashboard-sheet-ui";
	    // 
	    UICommands["ShowHideStoryboardSheetUI"] = "show-hide-storyboard-sheet-ui";
	    // 
	    UICommands["ShowGraphicsAPI"] = "show-graphics-api-command";
	    // 
	    UICommands["ShowMapOptionsDialog"] = "show-map-options-dialog";
	    // 
	    UICommands["ShowMeasuresUI"] = "show-measures-ui";
	    // 
	    UICommands["ShowMeCycleUI"] = "show-me-cycle-ui";
	    // 
	    UICommands["ShowMeHideUI"] = "show-me-hide-ui";
	    // 
	    UICommands["ShowMembersUI"] = "show-members-ui";
	    // 
	    UICommands["ShowMeToggleUI"] = "show-me-toggle-ui";
	    // 
	    UICommands["ShowOAuthPromptUI"] = "show-oauth-prompt-ui";
	    // 
	    UICommands["ShowParameterControl"] = "show-parameter-control";
	    // 
	    UICommands["ShowPublicStatusDialog"] = "show-public-status-dialog";
	    // 
	    UICommands["ShowPublicQuotaExceededDialog"] = "show-public-quota-exceeded-dialog";
	    // 
	    UICommands["ShowPublishDatasourceToWorkgroupDialog"] = "show-publish-datasource-to-workgroup-dialog";
	    // 
	    UICommands["ShowQueryBandingAndInitialSQLDialogUI"] = "show-query-banding-and-initial-sql-dialog-ui";
	    // 
	    UICommands["ShowQuickFilter"] = "show-quickfilter";
	    // 
	    UICommands["ShowQuickFilterUI"] = "show-quickfilter-ui";
	    // 
	    UICommands["ShowRuntimeIndicator"] = "show-runtime-indicator";
	    // 
	    UICommands["ShowSheetSorter"] = "sheet-sorter";
	    // 
	    UICommands["ShowTableOptionsDialog"] = "show-table-options-dialog";
	    // 
	    UICommands["ShowWebDataConnectorUI"] = "show-web-data-connector-ui";
	    // 
	    UICommands["ShowWidgetSandboxUI"] = "show-widget-sandbox-ui";
	    // 
	    UICommands["SizeLegendEditUI"] = "size-legend-edit-ui";
	    // 
	    UICommands["SleepUI"] = "sleep-ui";
	    // 
	    UICommands["SortAscendingFieldLabelUI"] = "sort-ascending-field-label-ui";
	    // 
	    UICommands["SortDescendingFieldLabelUI"] = "sort-descending-field-label-ui";
	    // 
	    UICommands["SortFieldLabelUI"] = "sort-field-label-ui";
	    // 
	    UICommands["SortUI"] = "sort-ui";
	    // 
	    UICommands["SplitFieldUI"] = "split-field-ui";
	    // 
	    UICommands["StackMarksUI"] = "stack-marks-ui";
	    // 
	    UICommands["StartFileConnectionUI"] = "start-file-connection-ui";
	    // 
	    UICommands["StartPillEditUI"] = "start-pill-edit-ui";
	    // 
	    UICommands["SwitchToConnectTab"] = "switch-to-connect-tab";
	    // 
	    UICommands["SwitchToDocument"] = "switch-to-document";
	    // 
	    UICommands["SwitchToSheetSorter"] = "switch-to-sheet-sorter";
	    // 
	    UICommands["TableCalcAddressUI"] = "table-calc-address-ui";
	    // 
	    UICommands["TableCalcIgnoreUI"] = "table-calc-ignore-ui";
	    // 
	    UICommands["TableCalcOrderingUI"] = "table-calc-ordering-ui";
	    // 
	    UICommands["TableCalcUI"] = "table-calc-ui";
	    // 
	    UICommands["ToggleConnectPaneUI"] = "toggle-connect-pane";
	    // 
	    UICommands["ToggleFilmstripUI"] = "toggle-filmstrip-ui";
	    // 
	    UICommands["ToggleINDJoinSemanticsUI"] = "toggle-ind-join-semantics-ui";
	    // 
	    UICommands["TogglePinMRUItem"] = "toggle-pin-mru";
	    // 
	    UICommands["ToggleReferentialIntegrityUI"] = "toggle-referential-integrity-ui";
	    // 
	    UICommands["ToggleStartPageUI"] = "toggle-start-page";
	    // 
	    UICommands["TrackMemory"] = "track-memory";
	    // 
	    UICommands["TrendLinesFlagUI"] = "trend-lines-ui";
	    // 
	    UICommands["UpdateDefaultsMapCard"] = "update-map-defaults";
	    // 
	    UICommands["UpgradeExtractsUI"] = "upgrade-extracts-ui";
	    // 
	    UICommands["UpgradeExtractUI"] = "upgrade-extract-ui";
	    // 
	    UICommands["UseExtractUI"] = "use-extract-ui";
	    // 
	    UICommands["UseMemory"] = "use-memory";
	    // 
	    UICommands["UtilityDimensionUI"] = "utility-dimension-ui";
	    // 
	    UICommands["ValidateExtractCredentialsUI"] = "validate-extract-credentials-ui";
	    // 
	    UICommands["ViewCard"] = "view-card";
	    // 
	    UICommands["ViewTitleCard"] = "view-title-card";
	    // 
	    UICommands["ViewSummaryCard"] = "view-summary-card";
	    // 
	    UICommands["ViewCaptionCard"] = "view-caption-card";
	    // 
	    UICommands["ViewColumnsShelf"] = "view-columns-shelf";
	    // 
	    UICommands["ViewRowsShelf"] = "view-rows-shelf";
	    // 
	    UICommands["ViewPagesShelf"] = "view-pages-shelf";
	    // 
	    UICommands["ViewFiltersShelf"] = "view-filters-shelf";
	    // 
	    UICommands["ViewMeasuresShelf"] = "view-measures-shelf";
	    // 
	    UICommands["ViewMarksShelf"] = "view-marks-shelf";
	    // 
	    UICommands["ViewCurrentPageCard"] = "view-current-page-card";
	    // 
	    UICommands["ViewData"] = "view-data";
	    // 
	    UICommands["ViewSQLDataUI"] = "view-sql-data-ui";
	    // 
	    UICommands["ViewDataSourceData"] = "view-datasource-data";
	    // 
	    UICommands["ViewLegend"] = "view-legend";
	    // 
	    UICommands["ViewSidePane"] = "view-side-pane";
	    // 
	    UICommands["ViewStatusBar"] = "view-statusbar";
	    // 
	    UICommands["ViewSummaryDetail"] = "view-summary-detail";
	    // 
	    UICommands["ViewTableData"] = "view-table-data";
	    // 
	    UICommands["ViewToolBar"] = "view-toolbar";
	    // 
	    UICommands["WebViewEnableJavascript"] = "webview-enable-javascript";
	    // 
	    UICommands["WebViewEnablePlugins"] = "webview-enable-plugins";
	    // 
	    UICommands["WebViewBlockPopups"] = "webview-block-popups";
	    // 
	    UICommands["WebViewEnableURLHoverActions"] = "webview-enable-url-hover-actions";
	    // 
	    UICommands["WorkgroupChangeDataserver"] = "workgroup-change-dataserver";
	    // 
	    UICommands["WorkgroupChangeServer"] = "workgroup-change-server";
	    // 
	    UICommands["WorkgroupChangeUser"] = "workgroup-change-user";
	    // 
	    UICommands["WorkgroupRemoveLastServer"] = "workgroup-remove-last-server";
	})(UICommands = exports.UICommands || (exports.UICommands = {}));
	var SrvCommands;
	(function (SrvCommands) {
	    // pings the server to test if the session is expired
	    SrvCommands["PingSession"] = "ping-session";
	    // Applies snapshot from comments to the viz.
	    SrvCommands["ApplyCustomizedView"] = "apply-customized-view";
	    // Refreshes VQLSession Data
	    SrvCommands["RefreshData"] = "refresh-data";
	})(SrvCommands = exports.SrvCommands || (exports.SrvCommands = {}));
	(function (DocCommands) {
	    // Gets the axis options .
	    DocCommands["GetAxisOptions"] = "get-axis-options";
	    // Reset the axis options .
	    DocCommands["ResetAxisOptions"] = "reset-axis-options";
	    // Show axis edit dialog
	    DocCommands["ShowEditAxisDialog"] = "show-edit-axis-dialog";
	    // Sets the axis direction
	    DocCommands["SetAxisReversed"] = "set-axis-reversed";
	    // Sets the axis scale type
	    DocCommands["SetAxisScaleType"] = "set-axis-scale-type";
	    // Sets the main title of a quantitative axis
	    DocCommands["SetAxisTitle"] = "set-axis-title";
	    // Sets the subtitle of a quantitative axis
	    DocCommands["SetAxisSubtitle"] = "set-axis-subtitle";
	    // Sets whether we should use the automatic subtitle for a quantitative axis
	    DocCommands["SetAxisUseAutomaticSubtitle"] = "set-axis-use-automatic-subtitle";
	    // Sets the axis range type of a quantitative axis
	    DocCommands["SetAxisExtentStartType"] = "set-axis-extent-start-type";
	    // Sets the axis range type of a quantitative axis
	    DocCommands["SetAxisExtentEndType"] = "set-axis-extent-end-type";
	    // Sets the axis range type of a quantitative axis
	    DocCommands["SetBothAxisExtentsType"] = "set-both-axis-extents-type";
	    // Sets whether or not to force-include zero on a quantitative axis
	    DocCommands["SetAxisIncludeZero"] = "set-axis-include-zero";
	    // Sets new min/max range endings for axis
	    DocCommands["SetAxisRangeEnd"] = "set-axis-range-end";
	    // Sets new min/max range endings for axis
	    DocCommands["SetAxisRangeStart"] = "set-axis-range-start";
	    // Synchronize dual axes on a folded quantitative axis
	    DocCommands["SetAxisFoldState"] = "set-axis-fold-state";
	    // Set the major tick mark state
	    DocCommands["SetMajorTickMarkState"] = "set-major-tick-mark-state";
	    // Set the minor tick mark state
	    DocCommands["SetMinorTickMarkState"] = "set-minor-tick-mark-state";
	    // Set the major tick mark origin
	    DocCommands["SetMajorTickMarkOrigin"] = "set-major-tick-mark-origin";
	    // Set the minor tick mark origin
	    DocCommands["SetMinorTickMarkOrigin"] = "set-minor-tick-mark-origin";
	    // Set the major tick mark spacing
	    DocCommands["SetMajorTickMarkSpacing"] = "set-major-tick-mark-spacing";
	    // Set the minor tick mark spacing
	    DocCommands["SetMinorTickMarkSpacing"] = "set-minor-tick-mark-spacing";
	    // Set the major tick mark units
	    DocCommands["SetMajorTickMarkUnits"] = "set-major-tick-mark-units";
	    // Set the minor tick mark units
	    DocCommands["SetMinorTickMarkUnits"] = "set-minor-tick-mark-units";
	    // 
	    DocCommands["BoundingBoxPan"] = "bounding-box-pan";
	    // 
	    DocCommands["OnToggleAxisRanges"] = "on-toggle-axis-ranges";
	    // 
	    DocCommands["PanePan"] = "pane-pan";
	    // 
	    DocCommands["PaneZoom"] = "pane-zoom";
	    // 
	    DocCommands["PaneZoomFactor"] = "pane-zoom-factor";
	    // 
	    DocCommands["PaneZoomPan"] = "pane-zoom-pan";
	    // 
	    DocCommands["ReorderFoldedAxes"] = "reorder-folded-axes";
	    // 
	    DocCommands["ResetAxisRange"] = "reset-axis-range";
	    // 
	    DocCommands["SelectAxisTuples"] = "select-axis-tuples";
	    // 
	    DocCommands["SwapReferenceLineFields"] = "swap-reference-line-fields";
	    // 
	    DocCommands["SynchronizeAxis"] = "synchronize-axis";
	    // 
	    DocCommands["ToggleDualAxis"] = "toggle-dual-axis";
	    // 
	    DocCommands["ZoomLevel"] = "zoom-level";
	})(DocCommands = exports.DocCommands || (exports.DocCommands = {}));


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(83);
	/**
	 * Registry which contains mappings from an Api VerbId to a pres-layer command.
	 * This includes the parameters and return values of the command as well
	 *
	 * @export
	 * @class CommandMappingRegistry
	 */
	var CommandMappingRegistry = (function () {
	    /**
	     * Creates an instance of CommandMappingRegistry.
	     * @memberof CommandMappingRegistry
	     */
	    function CommandMappingRegistry() {
	        this._commands = {};
	    }
	    /**
	     * Adds a new command to the registry
	     *
	     * @param {CommandRegistration} command
	     * @memberof CommandMappingRegistry
	     */
	    CommandMappingRegistry.prototype.addCommand = function (command) {
	        this._commands[command.apiVerbId] = command;
	    };
	    /**
	     * Whether or not this registry contains a definition for this ApiVerbId
	     *
	     * @param {ApiVerbId} apiVerbId
	     * @returns {boolean}
	     * @memberof CommandMappingRegistry
	     */
	    CommandMappingRegistry.prototype.hasCommand = function (apiVerbId) {
	        if (!this._commands.hasOwnProperty(apiVerbId)) {
	            return false;
	        }
	        if (!this._commands[apiVerbId]) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Gets the command registration for this command id or throws if it doesn't exist
	     *
	     * @param {ApiVerbId} apiVerbId
	     * @returns {CommandRegistration}
	     * @memberof CommandMappingRegistry
	     */
	    CommandMappingRegistry.prototype.getCommand = function (apiVerbId) {
	        if (!this.hasCommand(apiVerbId)) {
	            throw api_utils_1.TableauException.error(CommandMappingRegistry.UNKNOWN_APIVERB, [apiVerbId]);
	        }
	        return this._commands[apiVerbId];
	    };
	    CommandMappingRegistry.UNKNOWN_APIVERB = 'Unknown ApiVerb: %1';
	    return CommandMappingRegistry;
	}());
	exports.CommandMappingRegistry = CommandMappingRegistry;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var api_utils_1 = __webpack_require__(83);
	/**
	 * This is an enum used only internally by the api-core project.
	 * This enum represents the difference namespaces available for commands.
	 */
	var CommandNamespace;
	(function (CommandNamespace) {
	    CommandNamespace["TabDoc"] = "tabdoc";
	    CommandNamespace["TabSrv"] = "tabsrv";
	    CommandNamespace["TabUI"] = "tabui";
	})(CommandNamespace = exports.CommandNamespace || (exports.CommandNamespace = {}));
	/**
	 * Represents an input or output paramter for a command.
	 *
	 * @export
	 * @class CommandParameter
	 */
	var CommandParameter = (function () {
	    /**
	     * Creates an instance of CommandParameter.
	     * @param {ApiParameterId} apiId
	     * @param {PresLayerParameterId} presLayerId
	     * @param {boolean} [isOptional]
	     * @memberof CommandParameter
	     */
	    function CommandParameter(_apiId, _presLayerId, _isOptional) {
	        this._apiId = _apiId;
	        this._presLayerId = _presLayerId;
	        this._isOptional = _isOptional;
	    }
	    Object.defineProperty(CommandParameter.prototype, "apiId", {
	        /**
	         * The Id of the Api Parameter
	         *
	         * @readonly
	         * @type {ApiParameterId}
	         * @memberof CommandParameter
	         */
	        get: function () {
	            return this._apiId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandParameter.prototype, "presLayerId", {
	        /**
	         * The Id of the Pres Layer Parameter
	         *
	         * @readonly
	         * @type {PresLayerParameterId}
	         * @memberof CommandParameter
	         */
	        get: function () {
	            return this._presLayerId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandParameter.prototype, "isOptional", {
	        /**
	         * Whether or not this is an optional parameter
	         *
	         * @readonly
	         * @type {boolean}
	         * @memberof CommandParameter
	         */
	        get: function () {
	            return !!this._isOptional;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CommandParameter;
	}());
	exports.CommandParameter = CommandParameter;
	/**
	 * Represents a the complete mapping of an ApiCommand to its corresponding pres-layer command
	 * and the conversion of the output value as well
	 *
	 * @export
	 * @class CommandRegistration
	 *
	 * @param {ApiVerbId} _apiVerbId the internal api verb ID of this command.
	 * @param {PresLayerDocCommandId | PresLayerSrvCommandId | PresLayerUICommandId} _commandId
	 *   the pres layer command to execute
	 * @param {Array<CommandParameter>} _inputParameters list of parameters to send with this command to the platform.
	 * @param {CommandParameter} [isOptional] expected return paramters from the platform.
	 * @param {CommandNamespace} [isOptional] namespace of the command (defaults to TabDoc if not provided).
	 */
	var CommandRegistration = (function () {
	    function CommandRegistration(_apiVerbId, _commandId, _inputParameters, _outputParameter, _namespace) {
	        this._apiVerbId = _apiVerbId;
	        this._commandId = _commandId;
	        this._inputParameters = _inputParameters;
	        this._outputParameter = _outputParameter;
	        this._namespace = _namespace;
	    }
	    Object.defineProperty(CommandRegistration.prototype, "apiVerbId", {
	        get: function () {
	            return this._apiVerbId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandRegistration.prototype, "commandId", {
	        get: function () {
	            return this._commandId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandRegistration.prototype, "namespace", {
	        get: function () {
	            return this._namespace || CommandNamespace.TabDoc;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandRegistration.prototype, "inputs", {
	        get: function () {
	            return this._inputParameters || new Array();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandRegistration.prototype, "output", {
	        get: function () {
	            return this._outputParameter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandRegistration.prototype, "needsAddInLocator", {
	        /**
	         * Whether or not this command requires an add-in locator to be injected into it
	         *
	         * @readonly
	         * @type {boolean}
	         * @memberof CommandRegistration
	         */
	        get: function () {
	            for (var _i = 0, _a = this.inputs; _i < _a.length; _i++) {
	                var input = _a[_i];
	                if (input.apiId === api_internal_contract_1.ParameterId.ExtensionLocator) {
	                    return true;
	                }
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a dictionary of pres-layer parameters from the input dictionary
	     * of api parameters.
	     *
	     * @param {ExecuteParameters} parameters - The parameters to convert
	     * @param {ApiToPresLayerMappingRegistry} apiToPresLayer - mapping to determine the conversion
	     * @returns {{ [paramId: string]: object; }} - parameters to send to the pres-layer
	     * @memberof CommandRegistration
	     */
	    CommandRegistration.prototype.createParams = function (parameters, apiToPresLayer) {
	        var result = {};
	        for (var _i = 0, _a = this.inputs; _i < _a.length; _i++) {
	            var inputParam = _a[_i];
	            // First make sure the parameter is there or that it's optional
	            if (!parameters.hasOwnProperty(inputParam.apiId)) {
	                if (inputParam.isOptional) {
	                    continue;
	                }
	                else {
	                    throw api_utils_1.TableauException.missingParameter([inputParam.apiId]);
	                }
	            }
	            // Find the conversion function for this parameter
	            var conversionFn = apiToPresLayer.get(inputParam.apiId, inputParam.presLayerId);
	            // Convert the pres model and insert it into our results object
	            result[inputParam.presLayerId] = conversionFn(parameters[inputParam.apiId]);
	        }
	        return result;
	    };
	    /**
	     * Processes the result received back after executing a pres-layer command
	     *
	     * @param {{ [docParamId: string]: object; }} resultParameters
	     * @param {PresLayerToApiMappingRegistry} presLayerToApi
	     * @returns {Model}
	     * @memberof CommandRegistration
	     */
	    CommandRegistration.prototype.ProcessResult = function (resultParameters, presLayerToApi) {
	        // TODO: Add error handling
	        if (this.output === undefined) {
	            var noOutputModel = {};
	            return noOutputModel;
	        }
	        if (!resultParameters || !resultParameters.hasOwnProperty(this.output.presLayerId)) {
	            // if the output result is marked as optional, we don't consider this an error situation and just return an empty model
	            if (this.output.isOptional) {
	                return {};
	            }
	            throw api_utils_1.TableauException.missingParameter([this.output.presLayerId]);
	        }
	        var conversionFn = presLayerToApi.get(this.output.presLayerId, this.output.apiId);
	        return conversionFn(resultParameters[this.output.presLayerId]);
	    };
	    return CommandRegistration;
	}());
	exports.CommandRegistration = CommandRegistration;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var Events_1 = __webpack_require__(90);
	var PresLayerToApiConverter_1 = __webpack_require__(91);
	/**
	 * Simple wrapper which holds a mapping to go from a pres-layer event to an API event
	 */
	var EventMappingRegistration = (function () {
	    function EventMappingRegistration(_presLayerId, _apiId, _converter) {
	        this._presLayerId = _presLayerId;
	        this._apiId = _apiId;
	        this._converter = _converter;
	    }
	    Object.defineProperty(EventMappingRegistration.prototype, "presLayerId", {
	        get: function () {
	            return this._presLayerId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EventMappingRegistration.prototype, "apiId", {
	        get: function () {
	            return this._apiId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EventMappingRegistration.prototype, "converter", {
	        get: function () {
	            return this._converter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return EventMappingRegistration;
	}());
	exports.EventMappingRegistration = EventMappingRegistration;
	var EventMappingRegistryFactory = (function () {
	    function EventMappingRegistryFactory() {
	    }
	    /**
	     * Creates and populates a new EventMappingRegistry for the specific version number requested
	     *
	     * @param {VersionNumber} versionNumber
	     * @returns {EventMappingRegistry}
	     */
	    EventMappingRegistryFactory.createEventMappingRegistry = function (versionNumber) {
	        var registry = {};
	        registry[Events_1.NotificationId.SelectionChanged] = new EventMappingRegistration(Events_1.NotificationId.SelectionChanged, api_internal_contract_1.NotificationId.SelectedMarksChanged, PresLayerToApiConverter_1.PresLayerToApiConverter.convertVisualId);
	        registry[Events_1.NotificationId.ParameterChanged] = new EventMappingRegistration(Events_1.NotificationId.ParameterChanged, api_internal_contract_1.NotificationId.ParameterChanged, PresLayerToApiConverter_1.PresLayerToApiConverter.convertFieldCaptionPair);
	        registry[Events_1.NotificationId.FilterChanged] = new EventMappingRegistration(Events_1.NotificationId.FilterChanged, api_internal_contract_1.NotificationId.FilterChanged, PresLayerToApiConverter_1.PresLayerToApiConverter.convertFilterEvent);
	        registry[Events_1.NotificationId.ExtensionDialogUpdate] = new EventMappingRegistration(Events_1.NotificationId.ExtensionDialogUpdate, api_internal_contract_1.NotificationId.ExtensionDialogUpdate, PresLayerToApiConverter_1.PresLayerToApiConverter.convertDialogUpdateEvent);
	        return registry;
	    };
	    return EventMappingRegistryFactory;
	}());
	exports.EventMappingRegistryFactory = EventMappingRegistryFactory;


/***/ },
/* 90 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable */
	// -----------------------------------------------------------------------------
	//
	// This file is the copyrighted property of Tableau Software and is protected
	// by registered patents and other applicable U.S. and international laws and
	// regulations.
	//
	// Unlicensed use of the contents of this file is prohibited. Please refer to
	// the NOTICES.txt file for further details.
	//
	// -----------------------------------------------------------------------------
	// WARNING: Computer generated file.  Do not hand modify.
	// DEPENDS ON: ['../js-api/api-core/node_modules/@tableau/preslayer-codegen-typescript/templates/events-ts.template', u'../js-api/api-core/temp-pres-layer/all-events.data', '../js-api/api-core/node_modules/@tableau/preslayer-codegen-typescript/templates/events-common.template']
	Object.defineProperty(exports, "__esModule", { value: true });
	// Events you can register to receive presentation models
	var NotificationId;
	(function (NotificationId) {
	    // Triggered when aliases are to be edited. Used to launch a dialog.
	    NotificationId["EditAliasesDialogNotification"] = "doc:edit-aliases-dialog-notification-event";
	    // for the calculation dialog
	    NotificationId["CalculationDialog"] = "doc:calculation-dialog-event";
	    // update for an adhoc calc in a type in pill
	    NotificationId["TypeInPill"] = "doc:type-in-pill-event";
	    // results of a validation command
	    NotificationId["CommandValidation"] = "doc:command-validation-event";
	    // event for the groups dialog
	    NotificationId["UpdateCategoricalBinEditDialog"] = "doc:update-categorical-bin-edit-dialog-event";
	    // for the categorical color dialog
	    NotificationId["CategoricalColor"] = "doc:categorical-color-event";
	    // update the web categorical color dialog
	    NotificationId["WebCategoricalColorDialog"] = "doc:web-categorical-color-dialog-event";
	    // user invoked action which requires a Data Alert Dialog
	    NotificationId["DataAlertDialog"] = "doc:data-alert-dialog-event";
	    // event to select field(s) in the data schema
	    NotificationId["DataSchemaSelection"] = "doc:data-schema-selection-event";
	    // event for when the data source being edited is updated
	    NotificationId["UpdateDataPreparation"] = "doc:update-data-preparation-event";
	    // event for when the data source data is updated
	    NotificationId["UpdateDataSourceData"] = "doc:update-data-source-data-event";
	    // event for when a client should request new data source or data source data pres models
	    NotificationId["DataSourceUpdateNeeded"] = "doc:data-source-update-needed-event";
	    // event for getting the pres model to update file join table properties
	    NotificationId["TextFileProperties"] = "doc:text-file-properties-event";
	    // notify changes to the state of a filter's relational model
	    NotificationId["FilterRelationalStateChanged"] = "doc:filter-relational-state-changed-event";
	    // notify changes to the size/selection count of a relational domain
	    NotificationId["FilterRelationalDomainChanged"] = "doc:filter-relational-domain-changed-event";
	    // notify when filter cache was requested but not found
	    NotificationId["FilterCacheNotFound"] = "doc:filter-cache-not-found-event";
	    // Hierarchy Select model observable notification.
	    NotificationId["HierarchyNotification"] = "doc:hierarchy-notification-event";
	    // Hierarchy selection change notifications.
	    NotificationId["HierarchySelection"] = "doc:hierarchy-selection-event";
	    // event for the map options dialog
	    NotificationId["MapOptionsDialog"] = "doc:map-options-dialog-event";
	    // notify the Page UI(hide/show states, layout) needs to be updated
	    NotificationId["UpdatePageUINotification"] = "doc:update-page-uinotification-event";
	    // notify to the SceneView has been drawn.
	    NotificationId["SceneViewDrawnNotification"] = "doc:scene-view-drawn-notification-event";
	    // The AnimationControlChange event fires when the user clicks an animation playback button: forward, stop, slow, fast, etc.
	    NotificationId["AnimationControlChange"] = "doc:animation-control-change-event";
	    // notify the sheet has been renamed
	    NotificationId["RenameSheetNotification"] = "doc:rename-sheet-notification-event";
	    // update the web quantitative color dialog
	    NotificationId["WebQuantitativeColorDialog"] = "doc:web-quantitative-color-dialog-event";
	    // update the button config dialog
	    NotificationId["UpdateButtonConfigDialog"] = "doc:update-button-config-dialog-event";
	    // event for the reference line dialog, which is only valid during web authoring
	    NotificationId["UpdateRefLineDialog"] = "doc:update-ref-line-dialog-event";
	    // event to trigger other reference line dialogs to close
	    NotificationId["RefLineDialogOpening"] = "doc:ref-line-dialog-opening-event";
	    // event for the close data source error dialog, which is only valid during web authoring
	    NotificationId["CloseDataSourceErrorDialog"] = "doc:close-data-source-error-dialog-event";
	    // update the web Save Datasource dialog
	    NotificationId["WebSaveDatasourceDialog"] = "doc:web-save-datasource-dialog-event";
	    // warning resulting from WarningMsg
	    NotificationId["WarningMessage"] = "doc:warning-message-event";
	    // event for the table calc dialog, on web, this is only valid during web authoring
	    NotificationId["TableCalcDialog"] = "doc:table-calc-dialog-event";
	    // user invoked action which requires Table Calc Dialog
	    NotificationId["TableCalcActivateDialog"] = "doc:table-calc-activate-dialog-event";
	    // event for the trend line dialog
	    NotificationId["UpdateTrendLineEditDialog"] = "doc:update-trend-line-edit-dialog-event";
	    // The table page cache has been refreshed; pages must be reloaded from the cache.
	    NotificationId["PageCacheRefresh"] = "doc:page-cache-refresh-event";
	    // The table page cache has expired and all resources have been released.
	    NotificationId["PageCacheExpired"] = "doc:page-cache-expired-event";
	    // All pages, identified by row/col, in the provided list have expired and should be reloaded.
	    NotificationId["PageCachePagesExpired"] = "doc:page-cache-pages-expired-event";
	    // All pages betweem the range (inclusive) in the provided list have expired and should be reloaded.
	    NotificationId["PageCachePageRangeExpired"] = "doc:page-cache-page-range-expired-event";
	    // Triggered when the user wants to reload an add-in instance.
	    NotificationId["ReloadAddIn"] = "doc:reload-add-in-event";
	    // Triggered when the selected marks have changed.
	    NotificationId["SelectionChanged"] = "doc:selection-changed-event";
	    // Triggered when the value of a parameter has changed. Emits the name and caption of the parameter
	    NotificationId["ParameterChanged"] = "doc:parameter-changed-event";
	    // Triggered when the filters have changed.
	    NotificationId["FilterChanged"] = "doc:filter-changed-event";
	    // Triggered when state of extension dialog changes.
	    NotificationId["ExtensionDialogUpdate"] = "doc:extension-dialog-update-event";
	    // Triggered when saved cluster needs to be recalculated.
	    NotificationId["ClusterRefitNotification"] = "doc:cluster-refit-notification-event";
	    // event for the detailed error dialog
	    NotificationId["UpdateDetailedErrorDialog"] = "doc:update-detailed-error-dialog-event";
	    // update the axis edit dialog
	    NotificationId["UpdateEditAxisDialog"] = "doc:update-edit-axis-dialog-event";
	    // notification to launch the hybrid UI showcase
	    NotificationId["LaunchHybridUIShowcase"] = "doc:launch-hybrid-uishowcase-event";
	    // notification of new echoed text for HybridUI showcase demo
	    NotificationId["HybridUIShowcaseEcho"] = "doc:hybrid-uishowcase-echo-event";
	    // event for the bin dialog
	    NotificationId["UpdateNumericBinEditDialog"] = "doc:update-numeric-bin-edit-dialog-event";
	    // Update for the rich text editor dialog
	    NotificationId["RichTextEditorDialog"] = "doc:rich-text-editor-dialog-event";
	    // event for the sort dialog
	    NotificationId["UpdateSortDialog"] = "doc:update-sort-dialog-event";
	    // a test event with a pres model
	    NotificationId["TestEventWithModel"] = "doc:test-event-with-model-event";
	    // a test event without a pres model
	    NotificationId["TestEventWithoutModel"] = "doc:test-event-without-model-event";
	})(NotificationId = exports.NotificationId || (exports.NotificationId = {}));


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Api = __webpack_require__(82);
	var api_utils_1 = __webpack_require__(83);
	var EnumMappings_1 = __webpack_require__(92);
	/**
	 * Class containing helper methods for converting from PresLayerPresModels to their ApiPresModels equivalents
	 *
	 * @export
	 * @class PresLayerToApiConverter
	 */
	var PresLayerToApiConverter = (function () {
	    function PresLayerToApiConverter() {
	    }
	    PresLayerToApiConverter.convertSheetPath = function (plSheetPath) {
	        var result = {
	            sheetName: plSheetPath.sheetName,
	            isDashboard: plSheetPath.isDashboard,
	            storyboard: plSheetPath.storyboard,
	            flipboardZoneID: plSheetPath.flipboardZoneId,
	            storyPointID: plSheetPath.storyPointId,
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertVisualId = function (plVisualId) {
	        var result = {
	            worksheet: plVisualId.worksheet,
	            dashboard: plVisualId.dashboard,
	            storyboard: plVisualId.storyboard,
	            flipboardZoneID: plVisualId.flipboardZoneId,
	            storyPointID: plVisualId.storyPointId,
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertExtensionLocator = function (plAddInLocator) {
	        var dashboardPath = undefined;
	        if (plAddInLocator.sheetPath) {
	            dashboardPath = PresLayerToApiConverter.convertSheetPath(plAddInLocator.sheetPath);
	        }
	        var result = {
	            instanceId: plAddInLocator.addInInstanceId,
	            dashboardPath: dashboardPath
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertDashboardInZones = function (plDashboard) {
	        var result = new Array();
	        for (var _i = 0, _a = Object.keys(plDashboard.zones); _i < _a.length; _i++) {
	            var zoneKey = _a[_i];
	            var zone = plDashboard.zones[zoneKey];
	            var apiZone = {
	                name: zone.zoneCommon.name,
	                zoneId: zone.zoneId,
	                zoneType: EnumMappings_1.PresLayerToApiEnumMappings.zoneType.convert(zone.zoneCommon.zoneType),
	                height: zone.zoneCommon.h,
	                width: zone.zoneCommon.w,
	                x: zone.zoneCommon.x,
	                y: zone.zoneCommon.y
	            };
	            result.push(apiZone);
	        }
	        return result;
	    };
	    PresLayerToApiConverter.convertDashboardInfo = function (plDashboardInfo) {
	        var result = {
	            zones: PresLayerToApiConverter.convertDashboardInZones(plDashboardInfo.dashboardPresModel),
	            name: plDashboardInfo.dashboardPresModel.sheetPath.sheetName,
	            extensionZoneId: plDashboardInfo.zoneId,
	            size: plDashboardInfo.dashboardPresModel.viewportSize
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertExtensionInstance = function (plAddInInstance) {
	        var result = {
	            url: plAddInInstance.addInRegistrationPresModel.url,
	            locator: PresLayerToApiConverter.convertExtensionLocator(plAddInInstance.addInLocatorPresModel)
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertExtensionEnivrionment = function (plAddInEnvironment) {
	        var result = {
	            extensionContext: EnumMappings_1.PresLayerToApiEnumMappings.extensionContext.convert(plAddInEnvironment.addInContext),
	            extensionMode: EnumMappings_1.PresLayerToApiEnumMappings.extensionMode.convert(plAddInEnvironment.addInMode),
	            extensionLocale: plAddInEnvironment.addInLocale,
	            extensionLanguage: plAddInEnvironment.addInLanguage,
	            tableauVersion: plAddInEnvironment.tableauVersion,
	            operatingSystem: plAddInEnvironment.operatingSystem,
	            apiVersion: plAddInEnvironment.apiVersion
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertExtensionSettingsInfo = function (plAddInSettings) {
	        var result = {
	            // addInSettings is undefined during bootstrap initialization
	            settingsValues: plAddInSettings.addInSettings || {}
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertExtensionBootstrapInfo = function (plBootstrapInfo) {
	        var result = {
	            extensionDashboardInfo: PresLayerToApiConverter.convertDashboardInfo(plBootstrapInfo.addInDashboardInfoPresModel),
	            extensionEnvironment: PresLayerToApiConverter.convertExtensionEnivrionment(plBootstrapInfo.addInEnvironmentPresModel),
	            extensionInstance: PresLayerToApiConverter.convertExtensionInstance(plBootstrapInfo.addInInstancePresModel),
	            extensionSettingsInfo: PresLayerToApiConverter.convertExtensionSettingsInfo(plBootstrapInfo.addInSettingsInfo)
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertFieldCaptionPair = function (plFieldCaptionPair) {
	        return plFieldCaptionPair.fn;
	    };
	    PresLayerToApiConverter.convertFilterEvent = function (plFilterEvent) {
	        var result = {
	            visualId: PresLayerToApiConverter.convertVisualId(plFilterEvent.visualIdPresModel),
	            fieldName: plFilterEvent.fieldCaption
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertDialogUpdateEvent = function (plDialogUpdateEvent) {
	        var result = {
	            isCloseEvent: plDialogUpdateEvent.isExtensionCloseEvent,
	            closePayload: plDialogUpdateEvent.extensionDialogPayload
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertDataSchema = function (dataSchema) {
	        var apiDataSources = {};
	        api_utils_1.Param.verifyValue(dataSchema, 'dataSchema');
	        api_utils_1.Param.verifyValue(dataSchema.dataSources, 'dataSchema.dataSources');
	        // Convert each pres layer datasource in the schema to an Api datasource
	        Object.keys(dataSchema.dataSources).forEach(function (key) {
	            // Skip the default Parameters datasource we receive from the platform.
	            if (dataSchema.dataSources[key].datasource !== PresLayerToApiConverter.PARAMETERS_DB_NAME) {
	                apiDataSources[key] = PresLayerToApiConverter.convertDataSource(dataSchema.dataSources[key]);
	            }
	        });
	        var schemaMap = PresLayerToApiConverter.convertWorksheetDataSchemaMap(dataSchema.worksheetDataSchemaMap);
	        var result = {
	            dataSources: apiDataSources,
	            worksheetDataSchemaMap: schemaMap,
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertDataSource = function (dataSource) {
	        var extractUpdateTime = (dataSource.extractUpdateTime === '') ? undefined : dataSource.extractUpdateTime;
	        var dataSourceFields = new Array();
	        api_utils_1.Param.verifyValue(dataSource, 'dataSource');
	        api_utils_1.Param.verifyValue(dataSource.fieldList, 'dataSchema.fieldList');
	        dataSource.fieldList.forEach(function (plField) {
	            // If the datasource contains hierarchies or folders, the base field will contain
	            // a list of the fields grouped beneath it, we are interested in those.
	            // Tableau does not support nested folders or hierarchies, so this does not need to be recursive.
	            var hierarchyModel = plField;
	            if (hierarchyModel.columnList) {
	                hierarchyModel.columnList.forEach(function (field) { return dataSourceFields.push(PresLayerToApiConverter.convertField(field)); });
	            }
	            else {
	                // This is a bit brittle for now, but this value is not exposed via the platform FieldType Enum.
	                if (plField.type !== 'field-folder' && plField.type !== 'dimension') {
	                    dataSourceFields.push(PresLayerToApiConverter.convertField(plField));
	                }
	            }
	        });
	        var result = {
	            name: dataSource.datasourceCaption,
	            id: dataSource.datasource,
	            isExtract: (extractUpdateTime !== undefined),
	            extractUpdateTime: extractUpdateTime,
	            fields: dataSourceFields
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertWorksheetDataSchemaMap = function (schemaMap) {
	        var result = {};
	        Object.keys(schemaMap).forEach(function (key) {
	            // We need to remove any references to the "Parameters" datasource.  This is treated as a separate
	            // datasource by the platform, but the Extensions API accesses Parameters directly.
	            var cleanReferencedDataSourceList = schemaMap[key].referencedDataSourceList.filter(function (dsName) {
	                return dsName !== PresLayerToApiConverter.PARAMETERS_DB_NAME;
	            });
	            var worksheetDataSourceInfo = {
	                primaryDataSource: schemaMap[key].primaryDatasource,
	                referencedDataSourceList: cleanReferencedDataSourceList
	            };
	            result[key] = worksheetDataSourceInfo;
	        });
	        return result;
	    };
	    PresLayerToApiConverter.convertField = function (plField) {
	        var fieldColumn = plField;
	        var groupColumn = plField;
	        var aggregation = Api.FieldAggregationType.None;
	        var role = Api.FieldRoleType.Unknown;
	        var isCalculated = false;
	        // We expect that every FieldPresModel we get back from the command that returns FieldPresModels
	        // is actually an instance of the derived FieldColumnPresModel.
	        if (fieldColumn.aggregation && fieldColumn.fieldRole) {
	            aggregation = EnumMappings_1.PresLayerToApiEnumMappings.fieldAggregationType.convert(fieldColumn.aggregation);
	            role = EnumMappings_1.PresLayerToApiEnumMappings.fieldRoleType.convert(fieldColumn.fieldRole);
	            isCalculated = fieldColumn.isCalculated || false;
	        }
	        else {
	            throw new Error('Unexpected Internal Error: field pres model is missing expected properties.');
	        }
	        var result = {
	            name: plField.description,
	            id: plField.name,
	            description: plField.userCaption,
	            aggregation: aggregation,
	            isHidden: !!(plField.isHidden),
	            isGenerated: plField.isGenerated,
	            isCalculatedField: isCalculated,
	            role: role,
	            isCombinedField: !!(groupColumn.isCombinedField)
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertJoinDescription = function (plJoinDescription) {
	        api_utils_1.Param.verifyValue(plJoinDescription, 'plJoinDescription');
	        var apiTables = plJoinDescription.joinTableInfos.map(function (joinTable) {
	            var apiTable = {
	                name: joinTable.tableAlias,
	                id: joinTable.tableName,
	                customSQL: (joinTable.isCustomSql) ? joinTable.sqlQuery : undefined,
	                connectionClassName: joinTable.connectionClassName,
	                connectionId: joinTable.connectionName
	            };
	            return apiTable;
	        });
	        var result = {
	            tables: apiTables
	        };
	        return result;
	    };
	    PresLayerToApiConverter.convertConnectionDescrptionSummaries = function (plConnectionDescription) {
	        return plConnectionDescription.map(function (plSummary) {
	            var apiConnection = {
	                name: plSummary.connectionDescriptionLabel,
	                id: plSummary.connectionName,
	                type: plSummary.connectionTypeLabel,
	                serverURI: plSummary.connectionUri
	            };
	            return apiConnection;
	        });
	    };
	    PresLayerToApiConverter.PARAMETERS_DB_NAME = 'Parameters';
	    return PresLayerToApiConverter;
	}());
	exports.PresLayerToApiConverter = PresLayerToApiConverter;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var api_utils_1 = __webpack_require__(83);
	var Enums = __webpack_require__(93);
	/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
	var PresLayerToApiEnumMappings = (function () {
	    function PresLayerToApiEnumMappings() {
	    }
	    PresLayerToApiEnumMappings.zoneType = new api_utils_1.EnumConverter((_a = {},
	        _a[Enums.ZoneType.ZT_Invalid] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_Viz] = api_internal_contract_1.DashboardObjectType.Worksheet,
	        _a[Enums.ZoneType.ZT_ColorLegend] = api_internal_contract_1.DashboardObjectType.Legend,
	        _a[Enums.ZoneType.ZT_ShapeLegend] = api_internal_contract_1.DashboardObjectType.Legend,
	        _a[Enums.ZoneType.ZT_SizeLegend] = api_internal_contract_1.DashboardObjectType.Legend,
	        _a[Enums.ZoneType.ZT_MapLegend] = api_internal_contract_1.DashboardObjectType.Legend,
	        _a[Enums.ZoneType.ZT_QuickFilter] = api_internal_contract_1.DashboardObjectType.QuickFilter,
	        _a[Enums.ZoneType.ZT_Highlighter] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_CurrPage] = api_internal_contract_1.DashboardObjectType.PageFilter,
	        _a[Enums.ZoneType.ZT_Empty] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_Title] = api_internal_contract_1.DashboardObjectType.Title,
	        _a[Enums.ZoneType.ZT_Text] = api_internal_contract_1.DashboardObjectType.Text,
	        _a[Enums.ZoneType.ZT_Bitmap] = api_internal_contract_1.DashboardObjectType.Image,
	        _a[Enums.ZoneType.ZT_Web] = api_internal_contract_1.DashboardObjectType.WebPage,
	        _a[Enums.ZoneType.ZT_AddIn] = api_internal_contract_1.DashboardObjectType.Extension,
	        _a[Enums.ZoneType.ZT_ParamCtrl] = api_internal_contract_1.DashboardObjectType.ParameterControl,
	        _a[Enums.ZoneType.ZT_FlipboardNav] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_Flipboard] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_LayoutBasic] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_LayoutFlow] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_LayoutFreeForm] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_End] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a[Enums.ZoneType.ZT_DashboardObject] = api_internal_contract_1.DashboardObjectType.Blank,
	        _a), api_internal_contract_1.DashboardObjectType.Blank);
	    PresLayerToApiEnumMappings.extensionContext = new api_utils_1.EnumConverter((_b = {},
	        _b[Enums.AddInContext.Unknown] = api_internal_contract_1.ExtensionContext.Unknown,
	        _b[Enums.AddInContext.Desktop] = api_internal_contract_1.ExtensionContext.Desktop,
	        _b[Enums.AddInContext.Server] = api_internal_contract_1.ExtensionContext.Server,
	        _b));
	    PresLayerToApiEnumMappings.extensionMode = new api_utils_1.EnumConverter((_c = {},
	        _c[Enums.AddInMode.Unknown] = api_internal_contract_1.ExtensionMode.Unknown,
	        _c[Enums.AddInMode.Authoring] = api_internal_contract_1.ExtensionMode.Authoring,
	        _c[Enums.AddInMode.Viewing] = api_internal_contract_1.ExtensionMode.Viewing,
	        _c));
	    PresLayerToApiEnumMappings.dataType = new api_utils_1.EnumConverter((_d = {},
	        _d[Enums.DataType.DT_BOOLEAN] = api_internal_contract_1.DataType.Bool,
	        _d[Enums.DataType.DT_DATE] = api_internal_contract_1.DataType.Date,
	        _d[Enums.DataType.DT_DATETIME] = api_internal_contract_1.DataType.DateTime,
	        _d[Enums.DataType.DT_INTEGER] = api_internal_contract_1.DataType.Int,
	        _d[Enums.DataType.DT_REAL] = api_internal_contract_1.DataType.Float,
	        _d[Enums.DataType.DT_STRING] = api_internal_contract_1.DataType.String,
	        _d[Enums.DataType.DT_SPATIAL] = api_internal_contract_1.DataType.Spatial,
	        _d));
	    PresLayerToApiEnumMappings.fieldAggregationType = new api_utils_1.EnumConverter((_e = {},
	        _e[Enums.AggType.AGG_ATTR] = api_internal_contract_1.FieldAggregationType.Attr,
	        _e[Enums.AggType.AGG_AVG] = api_internal_contract_1.FieldAggregationType.Avg,
	        _e[Enums.AggType.AGG_COUNT] = api_internal_contract_1.FieldAggregationType.Count,
	        _e[Enums.AggType.AGG_COUNTD] = api_internal_contract_1.FieldAggregationType.Countd,
	        _e[Enums.AggType.AGG_DAY] = api_internal_contract_1.FieldAggregationType.Day,
	        _e[Enums.AggType.AGG_END] = api_internal_contract_1.FieldAggregationType.End,
	        _e[Enums.AggType.AGG_HOUR] = api_internal_contract_1.FieldAggregationType.Hour,
	        _e[Enums.AggType.AGG_INOUT] = api_internal_contract_1.FieldAggregationType.InOut,
	        _e[Enums.AggType.AGG_KURTOSIS] = api_internal_contract_1.FieldAggregationType.Kurtosis,
	        _e[Enums.AggType.AGG_MAX] = api_internal_contract_1.FieldAggregationType.Max,
	        _e[Enums.AggType.AGG_MDY] = api_internal_contract_1.FieldAggregationType.Mdy,
	        _e[Enums.AggType.AGG_MEDIAN] = api_internal_contract_1.FieldAggregationType.Median,
	        _e[Enums.AggType.AGG_MIN] = api_internal_contract_1.FieldAggregationType.Min,
	        _e[Enums.AggType.AGG_MINUTE] = api_internal_contract_1.FieldAggregationType.Minute,
	        _e[Enums.AggType.AGG_MONTHYEAR] = api_internal_contract_1.FieldAggregationType.MonthYear,
	        _e[Enums.AggType.AGG_NONE] = api_internal_contract_1.FieldAggregationType.None,
	        _e[Enums.AggType.AGG_QTR] = api_internal_contract_1.FieldAggregationType.Qtr,
	        _e[Enums.AggType.AGG_QUART1] = api_internal_contract_1.FieldAggregationType.Quart1,
	        _e[Enums.AggType.AGG_QUART3] = api_internal_contract_1.FieldAggregationType.Quart3,
	        _e[Enums.AggType.AGG_SECOND] = api_internal_contract_1.FieldAggregationType.Second,
	        _e[Enums.AggType.AGG_SKEWNESS] = api_internal_contract_1.FieldAggregationType.Skewness,
	        _e[Enums.AggType.AGG_STDEV] = api_internal_contract_1.FieldAggregationType.Stdev,
	        _e[Enums.AggType.AGG_STDEVP] = api_internal_contract_1.FieldAggregationType.Stdevp,
	        _e[Enums.AggType.AGG_SUM] = api_internal_contract_1.FieldAggregationType.Sum,
	        _e[Enums.AggType.TRUNC_DAY] = api_internal_contract_1.FieldAggregationType.TruncDay,
	        _e[Enums.AggType.TRUNC_HOUR] = api_internal_contract_1.FieldAggregationType.TruncHour,
	        _e[Enums.AggType.TRUNC_MINUTE] = api_internal_contract_1.FieldAggregationType.TruncMinute,
	        _e[Enums.AggType.TRUNC_MONTH] = api_internal_contract_1.FieldAggregationType.TruncMonth,
	        _e[Enums.AggType.TRUNC_QTR] = api_internal_contract_1.FieldAggregationType.TruncQtr,
	        _e[Enums.AggType.TRUNC_SECOND] = api_internal_contract_1.FieldAggregationType.TruncSecond,
	        _e[Enums.AggType.TRUNC_WEEK] = api_internal_contract_1.FieldAggregationType.TruncWeek,
	        _e[Enums.AggType.TRUNC_YEAR] = api_internal_contract_1.FieldAggregationType.TruncYear,
	        _e[Enums.AggType.AGG_USER] = api_internal_contract_1.FieldAggregationType.User,
	        _e[Enums.AggType.AGG_VAR] = api_internal_contract_1.FieldAggregationType.Var,
	        _e[Enums.AggType.AGG_VARP] = api_internal_contract_1.FieldAggregationType.Varp,
	        _e[Enums.AggType.AGG_WEEK] = api_internal_contract_1.FieldAggregationType.Week,
	        _e[Enums.AggType.AGG_WEEKDAY] = api_internal_contract_1.FieldAggregationType.Weekday,
	        _e[Enums.AggType.AGG_YEAR] = api_internal_contract_1.FieldAggregationType.Year,
	        _e));
	    PresLayerToApiEnumMappings.fieldRoleType = new api_utils_1.EnumConverter((_f = {},
	        _f[Enums.FieldRole.ROLE_DIMENSION] = api_internal_contract_1.FieldRoleType.Dimension,
	        _f[Enums.FieldRole.ROLE_MEASURE] = api_internal_contract_1.FieldRoleType.Measure,
	        _f));
	    PresLayerToApiEnumMappings.parameterTypesDomainType = new api_utils_1.EnumConverter((_g = {},
	        _g[Enums.ParameterTypesDomainType.Domain_Any] = api_internal_contract_1.DomainRestrictionType.All,
	        _g[Enums.ParameterTypesDomainType.Domain_List] = api_internal_contract_1.DomainRestrictionType.List,
	        _g[Enums.ParameterTypesDomainType.Domain_Range] = api_internal_contract_1.DomainRestrictionType.Range,
	        _g));
	    PresLayerToApiEnumMappings.dateStepPeriod = new api_utils_1.EnumConverter((_h = {},
	        _h[Enums.DatePeriodType.PeriodYear] = api_internal_contract_1.DateStepPeriod.Years,
	        _h[Enums.DatePeriodType.PeriodQuarter] = api_internal_contract_1.DateStepPeriod.Quarters,
	        _h[Enums.DatePeriodType.PeriodMonth] = api_internal_contract_1.DateStepPeriod.Months,
	        _h[Enums.DatePeriodType.PeriodWeek] = api_internal_contract_1.DateStepPeriod.Weeks,
	        _h[Enums.DatePeriodType.PeriodDay] = api_internal_contract_1.DateStepPeriod.Days,
	        _h[Enums.DatePeriodType.PeriodHour] = api_internal_contract_1.DateStepPeriod.Hours,
	        _h[Enums.DatePeriodType.PeriodMinute] = api_internal_contract_1.DateStepPeriod.Minutes,
	        _h[Enums.DatePeriodType.PeriodSecond] = api_internal_contract_1.DateStepPeriod.Seconds,
	        _h));
	    PresLayerToApiEnumMappings.dateRangeType = new api_utils_1.EnumConverter((_j = {},
	        _j[Enums.FiltersRelativeDateRangeType.RangeCurrent] = api_internal_contract_1.DateRangeType.Current,
	        _j[Enums.FiltersRelativeDateRangeType.RangeCurrentToDate] = api_internal_contract_1.DateRangeType.ToDate,
	        _j[Enums.FiltersRelativeDateRangeType.RangeLast1] = api_internal_contract_1.DateRangeType.Last,
	        _j[Enums.FiltersRelativeDateRangeType.RangeLastN] = api_internal_contract_1.DateRangeType.LastN,
	        _j[Enums.FiltersRelativeDateRangeType.RangeNext1] = api_internal_contract_1.DateRangeType.Next,
	        _j[Enums.FiltersRelativeDateRangeType.RangeNextN] = api_internal_contract_1.DateRangeType.NextN,
	        _j));
	    PresLayerToApiEnumMappings.filterDomainType = new api_utils_1.EnumConverter((_k = {},
	        _k[Enums.FiltersDomainType.Relevant] = api_internal_contract_1.FilterDomainType.Relevant,
	        _k[Enums.FiltersDomainType.Database] = api_internal_contract_1.FilterDomainType.Database,
	        _k));
	    return PresLayerToApiEnumMappings;
	}());
	exports.PresLayerToApiEnumMappings = PresLayerToApiEnumMappings;
	var ApiToPresLayerEnumMappings = (function () {
	    function ApiToPresLayerEnumMappings() {
	    }
	    ApiToPresLayerEnumMappings.filterUpdateType = new api_utils_1.EnumConverter((_a = {},
	        _a[api_internal_contract_1.FilterUpdateType.Add] = Enums.FilterUpdateType.ADD,
	        _a[api_internal_contract_1.FilterUpdateType.All] = Enums.FilterUpdateType.ALL,
	        _a[api_internal_contract_1.FilterUpdateType.Replace] = Enums.FilterUpdateType.REPLACE,
	        _a[api_internal_contract_1.FilterUpdateType.Remove] = Enums.FilterUpdateType.REMOVE,
	        _a));
	    ApiToPresLayerEnumMappings.nullOption = new api_utils_1.EnumConverter((_b = {},
	        _b[api_internal_contract_1.FilterNullOption.AllValues] = Enums.FiltersQuantitativeIncludedValues.All,
	        _b[api_internal_contract_1.FilterNullOption.NonNullValues] = Enums.FiltersQuantitativeIncludedValues.NonNull,
	        _b[api_internal_contract_1.FilterNullOption.NullValues] = Enums.FiltersQuantitativeIncludedValues.Null,
	        _b));
	    ApiToPresLayerEnumMappings.filterDomainType = new api_utils_1.EnumConverter((_c = {},
	        _c[api_internal_contract_1.FilterDomainType.Relevant] = Enums.FiltersDomainType.Relevant,
	        _c[api_internal_contract_1.FilterDomainType.Database] = Enums.FiltersDomainType.Database,
	        _c));
	    return ApiToPresLayerEnumMappings;
	}());
	exports.ApiToPresLayerEnumMappings = ApiToPresLayerEnumMappings;
	var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _a, _b, _c;
	/* tslint:enable:typedef */


/***/ },
/* 93 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable */
	// -----------------------------------------------------------------------------
	//
	// This file is the copyrighted property of Tableau Software and is protected
	// by registered patents and other applicable U.S. and international laws and
	// regulations.
	//
	// Unlicensed use of the contents of this file is prohibited. Please refer to
	// the NOTICES.txt file for further details.
	//
	// -----------------------------------------------------------------------------
	// WARNING: Computer generated file.  Do not hand modify.
	// DEPENDS ON: ['../js-api/api-core/node_modules/@tableau/preslayer-codegen-typescript/templates/enum-ts.template', u'../js-api/api-core/temp-pres-layer/all-enums.data']
	Object.defineProperty(exports, "__esModule", { value: true });
	// 
	var DataScaling;
	(function (DataScaling) {
	    // 
	    DataScaling["SCALING_NONE"] = "none";
	    // 
	    DataScaling["SCALING_STANDARDIZED"] = "standardized";
	    // 
	    DataScaling["SCALING_NORMALIZED"] = "normalized";
	})(DataScaling = exports.DataScaling || (exports.DataScaling = {}));
	// 
	var ForecastModelType;
	(function (ForecastModelType) {
	    // 
	    ForecastModelType["ForecastModelTypeAutoSeason"] = "auto-season";
	    // 
	    ForecastModelType["ForecastModelTypeAuto"] = "auto";
	    // 
	    ForecastModelType["ForecastModelTypeCustom"] = "custom";
	})(ForecastModelType = exports.ForecastModelType || (exports.ForecastModelType = {}));
	// 
	var ForecastRangeType;
	(function (ForecastRangeType) {
	    // 
	    ForecastRangeType["ForecastRangeTypeAuto"] = "auto";
	    // 
	    ForecastRangeType["ForecastRangeTypeNext"] = "next";
	    // 
	    ForecastRangeType["ForecastRangeTypeEndOf"] = "end-of";
	})(ForecastRangeType = exports.ForecastRangeType || (exports.ForecastRangeType = {}));
	// 
	var ForecastStatus;
	(function (ForecastStatus) {
	    // 
	    ForecastStatus["FS_VALID"] = "fs-valid";
	    // 
	    ForecastStatus["FS_INVALID_DATETIME"] = "fs-invalid-datetime";
	    // 
	    ForecastStatus["FS_INVALID_RESPONSE"] = "fs-invalid-response";
	    // 
	    ForecastStatus["FS_NEED_MORE_DATA"] = "fs-need-more-data";
	    // 
	    ForecastStatus["FS_TIME_SERIES_TOO_SHORT"] = "fs-time-series-too-short";
	    // 
	    ForecastStatus["FS_TIME_SERIES_IRREGULAR"] = "fs-time-series-irregular";
	    // 
	    ForecastStatus["FS_NULL_DATETIME"] = "fs-null-datetime";
	    // 
	    ForecastStatus["FS_NULL_RESPONSE"] = "fs-null-response";
	    // 
	    ForecastStatus["FS_METADATA_INVALID"] = "fs-metadata-invalid";
	    // 
	    ForecastStatus["FS_NO_RESPONSE"] = "fs-no-response";
	    // 
	    ForecastStatus["FS_EXCESS_DATA"] = "fs-excess-data";
	    // 
	    ForecastStatus["FS_EXCESS_PARTITIONS"] = "fs-excess-partitions";
	    // 
	    ForecastStatus["FS_DIMENSION_INVALID"] = "fs-dimension-invalid";
	    // 
	    ForecastStatus["FS_TABLECALC_INVALID"] = "fs-tablecalc-invalid";
	    // 
	    ForecastStatus["FS_TIME_SERIES_TOO_IRREGULAR"] = "fs-time-series-too-irregular";
	    // 
	    ForecastStatus["FS_AGGREGATE_FILTER"] = "fs-aggregate-filter";
	    // 
	    ForecastStatus["FS_DISAGGREGATE_RESPONSE"] = "fs-disaggregate-response";
	    // 
	    ForecastStatus["FS_PERCENTAGE_INVALID"] = "fs-percentage-invalid";
	    // 
	    ForecastStatus["FS_TOTAL_INVALID"] = "fs-total-invalid";
	    // 
	    ForecastStatus["FS_EXCESS_DATETIME"] = "fs-excess-datetime";
	    // 
	    ForecastStatus["FS_DATE_AGG_INCOMPATIBLE"] = "fs-date-agg-incompatible";
	    // 
	    ForecastStatus["FS_TIME_SERIES_NOT_POSITIVE"] = "fs-time-series-not-positive";
	    // 
	    ForecastStatus["FS_REQUESTED_MODEL_INVALID"] = "fs-requested-model-invalid";
	    // 
	    ForecastStatus["FS_TOO_SHORT_FOR_SEASON"] = "fs-too-short-for-season";
	    // 
	    ForecastStatus["FS_REQUESTED_MODEL_UNSTABLE"] = "fs-requested-model-unstable";
	    // 
	    ForecastStatus["FS_UNDEFINED"] = "fs-undefined";
	})(ForecastStatus = exports.ForecastStatus || (exports.ForecastStatus = {}));
	// 
	var StyleAttribute;
	(function (StyleAttribute) {
	    // 
	    StyleAttribute["saAlternateText"] = "saAlternateText";
	    // 
	    StyleAttribute["saAltMarkColor"] = "saAltMarkColor";
	    // 
	    StyleAttribute["saAspect"] = "saAspect";
	    // 
	    StyleAttribute["saAutoSubtitle"] = "saAutoSubtitle";
	    // 
	    StyleAttribute["saBackgroundColor"] = "saBackgroundColor";
	    // 
	    StyleAttribute["saBackgroundTransparency"] = "saBackgroundTransparency";
	    // 
	    StyleAttribute["saBandSize"] = "saBandSize";
	    // 
	    StyleAttribute["saBandColor"] = "saBandColor";
	    // 
	    StyleAttribute["saBandLevel"] = "saBandLevel";
	    // 
	    StyleAttribute["saBodyType"] = "saBodyType";
	    // 
	    StyleAttribute["saBorderColor"] = "saBorderColor";
	    // 
	    StyleAttribute["saBorderColorTop"] = "saBorderColorTop";
	    // 
	    StyleAttribute["saBorderColorRight"] = "saBorderColorRight";
	    // 
	    StyleAttribute["saBorderColorBottom"] = "saBorderColorBottom";
	    // 
	    StyleAttribute["saBorderColorLeft"] = "saBorderColorLeft";
	    // 
	    StyleAttribute["saBorderStyle"] = "saBorderStyle";
	    // 
	    StyleAttribute["saBorderStyleTop"] = "saBorderStyleTop";
	    // 
	    StyleAttribute["saBorderStyleRight"] = "saBorderStyleRight";
	    // 
	    StyleAttribute["saBorderStyleBottom"] = "saBorderStyleBottom";
	    // 
	    StyleAttribute["saBorderStyleLeft"] = "saBorderStyleLeft";
	    // 
	    StyleAttribute["saBorderWidth"] = "saBorderWidth";
	    // 
	    StyleAttribute["saBorderWidthTop"] = "saBorderWidthTop";
	    // 
	    StyleAttribute["saBorderWidthRight"] = "saBorderWidthRight";
	    // 
	    StyleAttribute["saBorderWidthBottom"] = "saBorderWidthBottom";
	    // 
	    StyleAttribute["saBorderWidthLeft"] = "saBorderWidthLeft";
	    // 
	    StyleAttribute["saBoxplotStyle"] = "saBoxplotStyle";
	    // 
	    StyleAttribute["saBreakOnSpecial"] = "saBreakOnSpecial";
	    // 
	    StyleAttribute["saCell"] = "saCell";
	    // 
	    StyleAttribute["saCellW"] = "saCellW";
	    // 
	    StyleAttribute["saCellH"] = "saCellH";
	    // 
	    StyleAttribute["saCellQ"] = "saCellQ";
	    // 
	    StyleAttribute["saCellQMark"] = "saCellQMark";
	    // 
	    StyleAttribute["saColor"] = "saColor";
	    // 
	    StyleAttribute["saColorMode"] = "saColorMode";
	    // 
	    StyleAttribute["saColLevels"] = "saColLevels";
	    // 
	    StyleAttribute["saColVertLevels"] = "saColVertLevels";
	    // 
	    StyleAttribute["saColHorizHeight"] = "saColHorizHeight";
	    // 
	    StyleAttribute["saColVertHeight"] = "saColVertHeight";
	    // Deprecated
	    StyleAttribute["saColHeight"] = "saColHeight";
	    // 
	    StyleAttribute["saColWidth"] = "saColWidth";
	    // 
	    StyleAttribute["saContent"] = "saContent";
	    // 
	    StyleAttribute["saDisplayFieldLabels"] = "saDisplayFieldLabels";
	    // 
	    StyleAttribute["saDisplayHeader"] = "saDisplayHeader";
	    // 
	    StyleAttribute["saDisplayAlternateText"] = "saDisplayAlternateText";
	    // 
	    StyleAttribute["saDivLevel"] = "saDivLevel";
	    // 
	    StyleAttribute["saEnabled"] = "saEnabled";
	    // 
	    StyleAttribute["saFillAboveColor"] = "saFillAboveColor";
	    // 
	    StyleAttribute["saFillBelowColor"] = "saFillBelowColor";
	    // 
	    StyleAttribute["saFillColor"] = "saFillColor";
	    // 
	    StyleAttribute["saFogBGColor"] = "saFogBGColor";
	    // 
	    StyleAttribute["saFogDesaturationWithoutSelection"] = "saFogDesaturationWithoutSelection";
	    // 
	    StyleAttribute["saFogDesaturationWithSelection"] = "saFogDesaturationWithSelection";
	    // 
	    StyleAttribute["saFont"] = "saFont";
	    // 
	    StyleAttribute["saFontFamily"] = "saFontFamily";
	    // 
	    StyleAttribute["saFontSize"] = "saFontSize";
	    // 
	    StyleAttribute["saFontStyle"] = "saFontStyle";
	    // 
	    StyleAttribute["saFontWeight"] = "saFontWeight";
	    // 
	    StyleAttribute["saGeographicAreaType"] = "saGeographicAreaType";
	    // 
	    StyleAttribute["saHAlign"] = "saHAlign";
	    // 
	    StyleAttribute["saHaloColor"] = "saHaloColor";
	    // 
	    StyleAttribute["saHaloColorSelected"] = "saHaloColorSelected";
	    // 
	    StyleAttribute["saHasFill"] = "saHasFill";
	    // 
	    StyleAttribute["saHasHalo"] = "saHasHalo";
	    // Deprecated
	    StyleAttribute["saHasLabel"] = "saHasLabel";
	    // 
	    StyleAttribute["saHasStroke"] = "saHasStroke";
	    // 
	    StyleAttribute["saHeight"] = "saHeight";
	    // 
	    StyleAttribute["saHeightHeader"] = "saHeightHeader";
	    // 
	    StyleAttribute["saHighlightLegend"] = "saHighlightLegend";
	    // 
	    StyleAttribute["saHnaxis"] = "saHnaxis";
	    // 
	    StyleAttribute["saHnlabel"] = "saHnlabel";
	    // 
	    StyleAttribute["saInTooltip"] = "saInTooltip";
	    // 
	    StyleAttribute["saLineEnd"] = "saLineEnd";
	    // 
	    StyleAttribute["saLineEndSize"] = "saLineEndSize";
	    // 
	    StyleAttribute["saLineInterpolation"] = "saLineInterpolation";
	    // 
	    StyleAttribute["saLinePattern"] = "saLinePattern";
	    // 
	    StyleAttribute["saLinePatternOnly"] = "saLinePatternOnly";
	    // 
	    StyleAttribute["saLineVisibility"] = "saLineVisibility";
	    // 
	    StyleAttribute["saMap"] = "saMap";
	    // 
	    StyleAttribute["saMapStyle"] = "saMapStyle";
	    // 
	    StyleAttribute["saMargin"] = "saMargin";
	    // 
	    StyleAttribute["saMarginTop"] = "saMarginTop";
	    // 
	    StyleAttribute["saMarginRight"] = "saMarginRight";
	    // 
	    StyleAttribute["saMarginBottom"] = "saMarginBottom";
	    // 
	    StyleAttribute["saMarginLeft"] = "saMarginLeft";
	    // 
	    StyleAttribute["saMarkColor"] = "saMarkColor";
	    // 
	    StyleAttribute["saMarkTransparency"] = "saMarkTransparency";
	    // 
	    StyleAttribute["saMarkLabelsShow"] = "saMarkLabelsShow";
	    // 
	    StyleAttribute["saRunningOrderLabelsShow"] = "saRunningOrderLabelsShow";
	    // 
	    StyleAttribute["saMarkLabelsMode"] = "saMarkLabelsMode";
	    // 
	    StyleAttribute["saMarkLabelsCull"] = "saMarkLabelsCull";
	    // 
	    StyleAttribute["saMarkLabelsLineEndFirst"] = "saMarkLabelsLineEndFirst";
	    // 
	    StyleAttribute["saMarkLabelsLineEndLast"] = "saMarkLabelsLineEndLast";
	    // 
	    StyleAttribute["saMarkLabelsRangeMin"] = "saMarkLabelsRangeMin";
	    // 
	    StyleAttribute["saMarkLabelsRangeMax"] = "saMarkLabelsRangeMax";
	    // 
	    StyleAttribute["saMarkLabelsRangeScope"] = "saMarkLabelsRangeScope";
	    // 
	    StyleAttribute["saMarkLabelsRangeField"] = "saMarkLabelsRangeField";
	    // 
	    StyleAttribute["saMarkMarkersMode"] = "saMarkMarkersMode";
	    // 
	    StyleAttribute["saMaxHeight"] = "saMaxHeight";
	    // 
	    StyleAttribute["saMaxFontSize"] = "saMaxFontSize";
	    // 
	    StyleAttribute["saMaxStrokeWidth"] = "saMaxStrokeWidth";
	    // 
	    StyleAttribute["saMaxWidth"] = "saMaxWidth";
	    // 
	    StyleAttribute["saMidStrokeWidth"] = "saMidStrokeWidth";
	    // 
	    StyleAttribute["saMinHeight"] = "saMinHeight";
	    // 
	    StyleAttribute["saMinFontSize"] = "saMinFontSize";
	    // 
	    StyleAttribute["saMinLength"] = "saMinLength";
	    // 
	    StyleAttribute["saMinMapSize"] = "saMinMapSize";
	    // 
	    StyleAttribute["saMinSize"] = "saMinSize";
	    // 
	    StyleAttribute["saMinStrokeWidth"] = "saMinStrokeWidth";
	    // 
	    StyleAttribute["saMinWidth"] = "saMinWidth";
	    // 
	    StyleAttribute["saNonhighlightColor"] = "saNonhighlightColor";
	    // 
	    StyleAttribute["saOmitOnSpecial"] = "saOmitOnSpecial";
	    // 
	    StyleAttribute["saOpacity"] = "saOpacity";
	    // 
	    StyleAttribute["saOrientation"] = "saOrientation";
	    // 
	    StyleAttribute["saPadding"] = "saPadding";
	    // 
	    StyleAttribute["saPaddingTop"] = "saPaddingTop";
	    // 
	    StyleAttribute["saPaddingRight"] = "saPaddingRight";
	    // 
	    StyleAttribute["saPaddingBottom"] = "saPaddingBottom";
	    // 
	    StyleAttribute["saPaddingLeft"] = "saPaddingLeft";
	    // 
	    StyleAttribute["saPalette"] = "saPalette";
	    // 
	    StyleAttribute["saRenderFoldReversed"] = "saRenderFoldReversed";
	    // 
	    StyleAttribute["saReversePalette"] = "saReversePalette";
	    // 
	    StyleAttribute["saRounding"] = "saRounding";
	    // 
	    StyleAttribute["saRowHorizLevels"] = "saRowHorizLevels";
	    // 
	    StyleAttribute["saRowHorizWidth"] = "saRowHorizWidth";
	    // 
	    StyleAttribute["saRowLevels"] = "saRowLevels";
	    // 
	    StyleAttribute["saRowVertWidth"] = "saRowVertWidth";
	    // 
	    StyleAttribute["saSeparator"] = "saSeparator";
	    // 
	    StyleAttribute["saShape"] = "saShape";
	    // Deprecated
	    StyleAttribute["saShowLabels"] = "saShowLabels";
	    // 
	    StyleAttribute["saSize"] = "saSize";
	    // 
	    StyleAttribute["saSizeBar"] = "saSizeBar";
	    // 
	    StyleAttribute["saSmartAutoAlignment"] = "saSmartAutoAlignment";
	    // 
	    StyleAttribute["saSpace"] = "saSpace";
	    // 
	    StyleAttribute["saStrokeColor"] = "saStrokeColor";
	    // 
	    StyleAttribute["saStrokeSize"] = "saStrokeSize";
	    // 
	    StyleAttribute["saSubtitle"] = "saSubtitle";
	    // 
	    StyleAttribute["saTextAlign"] = "saTextAlign";
	    // 
	    StyleAttribute["saTextAlignDefault"] = "saTextAlignDefault";
	    // 
	    StyleAttribute["saTextDecoration"] = "saTextDecoration";
	    // 
	    StyleAttribute["saTextIndent"] = "saTextIndent";
	    // 
	    StyleAttribute["saTextOrientation"] = "saTextOrientation";
	    // 
	    StyleAttribute["saTextFormat"] = "saTextFormat";
	    // 
	    StyleAttribute["saTickColor"] = "saTickColor";
	    // 
	    StyleAttribute["saTickLength"] = "saTickLength";
	    // Deprecated
	    StyleAttribute["saTickSpacing"] = "saTickSpacing";
	    // 
	    StyleAttribute["saTitle"] = "saTitle";
	    // 
	    StyleAttribute["saTotalLabel"] = "saTotalLabel";
	    // 
	    StyleAttribute["saVAlign"] = "saVAlign";
	    // 
	    StyleAttribute["saVerticalAlign"] = "saVerticalAlign";
	    // 
	    StyleAttribute["saVerticalAlignDefault"] = "saVerticalAlignDefault";
	    // 
	    StyleAttribute["saVnaxis"] = "saVnaxis";
	    // 
	    StyleAttribute["saVnlabel"] = "saVnlabel";
	    // 
	    StyleAttribute["saWarnOnSpecial"] = "saWarnOnSpecial";
	    // 
	    StyleAttribute["saWashout"] = "saWashout";
	    // 
	    StyleAttribute["saWhiskerEnd"] = "saWhiskerEnd";
	    // 
	    StyleAttribute["saWhiskerStrokeColor"] = "saWhiskerStrokeColor";
	    // 
	    StyleAttribute["saWhiskerStrokeSize"] = "saWhiskerStrokeSize";
	    // 
	    StyleAttribute["saWidth"] = "saWidth";
	    // 
	    StyleAttribute["saWidthHeader"] = "saWidthHeader";
	    // 
	    StyleAttribute["saWrap"] = "saWrap";
	    // 
	    StyleAttribute["saZoom"] = "saZoom";
	    // Special attributes used for matching
	    StyleAttribute["saNone"] = "saNone";
	    // Special attributes used for matching
	    StyleAttribute["saAny"] = "saAny";
	})(StyleAttribute = exports.StyleAttribute || (exports.StyleAttribute = {}));
	// lowest bit of enum value denotes two-tone styles; newly added styles should follow this pattern.
	var BoxplotStyle;
	(function (BoxplotStyle) {
	    // mask for checking if a style is two-tone
	    BoxplotStyle["BoxplotStyleTwoTone"] = "two-tone";
	    // 
	    BoxplotStyle["BoxplotStyleModern"] = "modern";
	    // 
	    BoxplotStyle["BoxplotStyleGlass"] = "glass";
	    // 
	    BoxplotStyle["BoxplotStyleClassic"] = "classic";
	    // 
	    BoxplotStyle["BoxplotStyleClassicTwoTone"] = "classic-two-tone";
	})(BoxplotStyle = exports.BoxplotStyle || (exports.BoxplotStyle = {}));
	// used for boxplots and prediction band whiskers
	var WhiskerEnd;
	(function (WhiskerEnd) {
	    // 
	    WhiskerEnd["WhiskerEndNone"] = "none";
	    // 
	    WhiskerEnd["WhiskerEndSmall"] = "small";
	    // 
	    WhiskerEnd["WhiskerEndLarge"] = "large";
	})(WhiskerEnd = exports.WhiskerEnd || (exports.WhiskerEnd = {}));
	// 
	var StyleElement;
	(function (StyleElement) {
	    // 
	    StyleElement["elementAxis"] = "elementAxis";
	    // 
	    StyleElement["elementCell"] = "elementCell";
	    // 
	    StyleElement["elementDatalabel"] = "elementDatalabel";
	    // 
	    StyleElement["elementDropspot"] = "elementDropspot";
	    // 
	    StyleElement["elementHeader"] = "elementHeader";
	    // 
	    StyleElement["elementFieldLabel"] = "elementFieldLabel";
	    // 
	    StyleElement["elementFieldLabelDecoration"] = "elementFieldLabelDecoration";
	    // 
	    StyleElement["elementFieldLabelSpanner"] = "elementFieldLabelSpanner";
	    // 
	    StyleElement["elementLabel"] = "elementLabel";
	    // 
	    StyleElement["elementMark"] = "elementMark";
	    // 
	    StyleElement["elementPane"] = "elementPane";
	    // 
	    StyleElement["elementTable"] = "elementTable";
	    // 
	    StyleElement["elementWorksheet"] = "elementWorksheet";
	    // 
	    StyleElement["elementBasesheet"] = "elementBasesheet";
	    // 
	    StyleElement["elementDashboard"] = "elementDashboard";
	    // 
	    StyleElement["elementStoryboard"] = "elementStoryboard";
	    // 
	    StyleElement["elementCaption"] = "elementCaption";
	    // 
	    StyleElement["elementDropline"] = "elementDropline";
	    // 
	    StyleElement["elementRefline"] = "elementRefline";
	    // 
	    StyleElement["elementRefBand"] = "elementRefBand";
	    // 
	    StyleElement["elementRefBoxplot"] = "elementRefBoxplot";
	    // 
	    StyleElement["elementGridline"] = "elementGridline";
	    // 
	    StyleElement["elementZeroline"] = "elementZeroline";
	    // 
	    StyleElement["elementTrendline"] = "elementTrendline";
	    // 
	    StyleElement["elementTableDiv"] = "elementTableDiv";
	    // 
	    StyleElement["elementHeaderDiv"] = "elementHeaderDiv";
	    // 
	    StyleElement["elementMappedImage"] = "elementMappedImage";
	    // 
	    StyleElement["elementAction"] = "elementAction";
	    // 
	    StyleElement["elementTitle"] = "elementTitle";
	    // 
	    StyleElement["elementLegend"] = "elementLegend";
	    // 
	    StyleElement["elementLegendTitle"] = "elementLegendTitle";
	    // 
	    StyleElement["elementLegendTitleText"] = "elementLegendTitleText";
	    // 
	    StyleElement["elementAxisTitle"] = "elementAxisTitle";
	    // 
	    StyleElement["elementAnnotation"] = "elementAnnotation";
	    // 
	    StyleElement["elementDashTitle"] = "elementDashTitle";
	    // 
	    StyleElement["elementDashSubtitle"] = "elementDashSubtitle";
	    // 
	    StyleElement["elementDashText"] = "elementDashText";
	    // 
	    StyleElement["elementDashZone"] = "elementDashZone";
	    // 
	    StyleElement["elementDashContainer"] = "elementDashContainer";
	    // 
	    StyleElement["elementScrollbar"] = "elementScrollbar";
	    // Static on/off map layers
	    StyleElement["elementMapLayer"] = "elementMapLayer";
	    // Contains washout
	    StyleElement["elementMap"] = "elementMap";
	    // Initially for UrbanMapping/Claritas data
	    StyleElement["elementMapDataLayer"] = "elementMapDataLayer";
	    // 
	    StyleElement["elementQuickFilter"] = "elementQuickFilter";
	    // 
	    StyleElement["elementQuickFilterTitle"] = "elementQuickFilterTitle";
	    // 
	    StyleElement["elementParameterCtrl"] = "elementParameterCtrl";
	    // 
	    StyleElement["elementParameterCtrlTitle"] = "elementParameterCtrlTitle";
	    // 
	    StyleElement["elementPageCardTitle"] = "elementPageCardTitle";
	    // 
	    StyleElement["elementStoryDescription"] = "elementStoryDescription";
	    // 
	    StyleElement["elementStoryPointCaption"] = "elementStoryPointCaption";
	    // 
	    StyleElement["elementStoryTitle"] = "elementStoryTitle";
	    // 
	    StyleElement["elementTooltip"] = "elementTooltip";
	    // 
	    StyleElement["elementAll"] = "elementAll";
	    // 
	    StyleElement["elementPageCardBody"] = "elementPageCardBody";
	    // 
	    StyleElement["elementDataHighlighter"] = "elementDataHighlighter";
	    // 
	    StyleElement["elementDataHighlighterTitle"] = "elementDataHighlighterTitle";
	    // Special elements used for matching and organization
	    StyleElement["elementNone"] = "elementNone";
	    // Special elements used for matching and organization
	    StyleElement["elementAny"] = "elementAny";
	    // Special elements used for matching and organization
	    StyleElement["elementRoot"] = "elementRoot";
	})(StyleElement = exports.StyleElement || (exports.StyleElement = {}));
	// Do not mess with these values. They are sometimes used as array indexes/bounds
	var StyleDataClass;
	(function (StyleDataClass) {
	    // 
	    StyleDataClass["dcNormal"] = "dcNormal";
	    // 
	    StyleDataClass["dcTotal"] = "dcTotal";
	    // 
	    StyleDataClass["dcSubtotal"] = "dcSubtotal";
	    // 
	    StyleDataClass["dcCOUNT"] = "dcCOUNT";
	})(StyleDataClass = exports.StyleDataClass || (exports.StyleDataClass = {}));
	// 
	var StyleFieldScope;
	(function (StyleFieldScope) {
	    // 
	    StyleFieldScope["fsNone"] = "fsNone";
	    // 
	    StyleFieldScope["fsRows"] = "fsRows";
	    // 
	    StyleFieldScope["fsCols"] = "fsCols";
	})(StyleFieldScope = exports.StyleFieldScope || (exports.StyleFieldScope = {}));
	// 
	var StyleSwatch;
	(function (StyleSwatch) {
	    // 
	    StyleSwatch["ssUnspecified"] = "ssUnspecified";
	    // 
	    StyleSwatch["ssLight"] = "ssLight";
	    // 
	    StyleSwatch["ssDark"] = "ssDark";
	})(StyleSwatch = exports.StyleSwatch || (exports.StyleSwatch = {}));
	// 
	var TableauFontStyle;
	(function (TableauFontStyle) {
	    // 
	    TableauFontStyle["NormalStyle"] = "font-style-normal";
	    // 
	    TableauFontStyle["Italic"] = "font-style-italic";
	})(TableauFontStyle = exports.TableauFontStyle || (exports.TableauFontStyle = {}));
	// Unsupported for Betsy
	var TextDecoration;
	(function (TextDecoration) {
	    // 
	    TextDecoration["NoDecoration"] = "text-decoration-none";
	    // 
	    TextDecoration["Underline"] = "text-decoration-underline";
	    // not yet supported
	    TextDecoration["Overline"] = "text-decoration-overline";
	    // 
	    TextDecoration["Strikethrough"] = "text-decoration-strikethrough";
	})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
	// 
	var FontWeight;
	(function (FontWeight) {
	    // 
	    FontWeight["NormalWeight"] = "font-weight-normal";
	    // 
	    FontWeight["Bold"] = "font-weight-bold";
	})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
	// 
	var TextOrient;
	(function (TextOrient) {
	    // 
	    TextOrient["TO_Auto"] = "text-orient-auto";
	    // 
	    TextOrient["TO_Horz"] = "text-orient-horizontal";
	    // 
	    TextOrient["TO_VertUp"] = "text-orient-vertical-up";
	    // 
	    TextOrient["TO_VertDown"] = "text-orient-vertical-down";
	})(TextOrient = exports.TextOrient || (exports.TextOrient = {}));
	// 
	var TextAlign;
	(function (TextAlign) {
	    // 
	    TextAlign["TA_Start"] = "text-align-start";
	    // 
	    TextAlign["TA_Center"] = "text-align-center";
	    // 
	    TextAlign["TA_End"] = "text-align-end";
	})(TextAlign = exports.TextAlign || (exports.TextAlign = {}));
	// 
	var TextWrapMode;
	(function (TextWrapMode) {
	    // 
	    TextWrapMode["TextWrapOff"] = "text-wrap-off";
	    // 
	    TextWrapMode["TextWrapTruncate"] = "text-wrap-truncate";
	    // 
	    TextWrapMode["TextWrapOn"] = "text-wrap-on";
	    // 
	    TextWrapMode["TextWrapAuto"] = "text-wrap-auto";
	})(TextWrapMode = exports.TextWrapMode || (exports.TextWrapMode = {}));
	// 
	var TextWholeLineMode;
	(function (TextWholeLineMode) {
	    // 
	    TextWholeLineMode["TextWholeLineOff"] = "text-whole-line-off";
	    // 
	    TextWholeLineMode["TextWholeLineOn"] = "text-whole-line-on";
	    // 
	    TextWholeLineMode["TextWholeLineAuto"] = "text-whole-line-auto";
	})(TextWholeLineMode = exports.TextWholeLineMode || (exports.TextWholeLineMode = {}));
	// 
	var TextBreakMode;
	(function (TextBreakMode) {
	    // 
	    TextBreakMode["TextBreakWhitespaceOnly"] = "text-break-ws-only";
	    // 
	    TextBreakMode["TextBreakAuto"] = "text-break-auto";
	})(TextBreakMode = exports.TextBreakMode || (exports.TextBreakMode = {}));
	// type of aggregation
	var AggType;
	(function (AggType) {
	    // 
	    AggType["AGG_SUM"] = "sum";
	    // 
	    AggType["AGG_AVG"] = "average";
	    // 
	    AggType["AGG_MIN"] = "min";
	    // 
	    AggType["AGG_MAX"] = "max";
	    // 
	    AggType["AGG_STDEV"] = "std-dev";
	    // 
	    AggType["AGG_STDEVP"] = "std-dev-p";
	    // 
	    AggType["AGG_VAR"] = "var";
	    // 
	    AggType["AGG_VARP"] = "var-p";
	    // 
	    AggType["AGG_COUNT"] = "count";
	    // 
	    AggType["AGG_COUNTD"] = "count-d";
	    // 
	    AggType["AGG_MEDIAN"] = "median";
	    // 
	    AggType["AGG_ATTR"] = "attr";
	    // 
	    AggType["AGG_NONE"] = "none";
	    // 
	    AggType["AGG_PERCENTILE"] = "percentile";
	    // 
	    AggType["AGG_YEAR"] = "year";
	    // 
	    AggType["AGG_QTR"] = "qtr";
	    // 
	    AggType["AGG_MONTH"] = "month";
	    // 
	    AggType["AGG_DAY"] = "day";
	    // 
	    AggType["AGG_HOUR"] = "hour";
	    // 
	    AggType["AGG_MINUTE"] = "minute";
	    // 
	    AggType["AGG_SECOND"] = "second";
	    // 
	    AggType["AGG_WEEK"] = "week";
	    // 
	    AggType["AGG_WEEKDAY"] = "weekday";
	    // 
	    AggType["AGG_MONTHYEAR"] = "month-year";
	    // 
	    AggType["AGG_MDY"] = "mdy";
	    // 
	    AggType["AGG_END"] = "end";
	    // 
	    AggType["TRUNC_YEAR"] = "trunc-year";
	    // 
	    AggType["TRUNC_QTR"] = "trunc-qtr";
	    // 
	    AggType["TRUNC_MONTH"] = "trunc-month";
	    // 
	    AggType["TRUNC_WEEK"] = "trunc-week";
	    // 
	    AggType["TRUNC_DAY"] = "trunc-day";
	    // 
	    AggType["TRUNC_HOUR"] = "trunc-hour";
	    // 
	    AggType["TRUNC_MINUTE"] = "trunc-minute";
	    // 
	    AggType["TRUNC_SECOND"] = "trunc-second";
	    // 
	    AggType["AGG_QUART1"] = "quart1";
	    // 
	    AggType["AGG_QUART3"] = "quart3";
	    // 
	    AggType["AGG_SKEWNESS"] = "skewness";
	    // 
	    AggType["AGG_KURTOSIS"] = "kurtosis";
	    // 
	    AggType["AGG_INOUT"] = "in-out";
	    // 
	    AggType["AGG_SUM_XSQR"] = "sum-xsqr";
	    // 
	    AggType["AGG_USER"] = "user";
	    // 
	    AggType["AGG_COLLECT"] = "collect";
	    // 
	    AggType["AGG_COVAR"] = "covar";
	    // 
	    AggType["AGG_COVARP"] = "covarp";
	    // 
	    AggType["AGG_CORR"] = "corr";
	})(AggType = exports.AggType || (exports.AggType = {}));
	// DataValueFormatter::DataTypeEncodings has hardcoded values corresponding to following enum members. So any changes here should be done there too
	var DataType;
	(function (DataType) {
	    // 
	    DataType["DT_INTEGER"] = "integer";
	    // 
	    DataType["DT_REAL"] = "real";
	    // 
	    DataType["DT_STRING"] = "cstring";
	    // 
	    DataType["DT_DATETIME"] = "datetime";
	    // 
	    DataType["DT_BOOLEAN"] = "boolean";
	    // 
	    DataType["DT_DATE"] = "date";
	    // 
	    DataType["DT_TUPLE"] = "tuple";
	    // 
	    DataType["DT_SPATIAL"] = "spatial";
	    // 
	    DataType["DT_UNKNOWN"] = "unknown";
	    // 
	    DataType["DT_BINARY"] = "binary";
	    // 
	    DataType["DT_TIME"] = "time";
	})(DataType = exports.DataType || (exports.DataType = {}));
	// 
	var DatePeriodType;
	(function (DatePeriodType) {
	    // 
	    DatePeriodType["PeriodYear"] = "year";
	    // 
	    DatePeriodType["PeriodQuarter"] = "quarter";
	    // 
	    DatePeriodType["PeriodMonth"] = "month";
	    // 
	    DatePeriodType["PeriodWeek"] = "week";
	    // 
	    DatePeriodType["PeriodDay"] = "day";
	    // 
	    DatePeriodType["PeriodHour"] = "hour";
	    // 
	    DatePeriodType["PeriodMinute"] = "minute";
	    // 
	    DatePeriodType["PeriodSecond"] = "second";
	})(DatePeriodType = exports.DatePeriodType || (exports.DatePeriodType = {}));
	// Format prepended to format strings to specify type
	var FormatCode;
	(function (FormatCode) {
	    // 
	    FormatCode["AutoFormat"] = "auto-format";
	    // 
	    FormatCode["SystemLongDate"] = "system-long-date";
	    // 
	    FormatCode["SystemShortDate"] = "system-short-date";
	    // 
	    FormatCode["SystemNumber"] = "system-number";
	    // 
	    FormatCode["SystemCurrency"] = "system-currency";
	    // 
	    FormatCode["SystemTime"] = "system-time";
	    // 
	    FormatCode["Custom"] = "custom";
	    // 
	    FormatCode["CustomICU"] = "custom-icu";
	    // 
	    FormatCode["CustomNumber"] = "custom-number";
	    // 
	    FormatCode["CustomCurrency"] = "custom-currency";
	    // 
	    FormatCode["CustomScientific"] = "custom-scientific";
	    // 
	    FormatCode["CustomPercentage"] = "custom-percentage";
	})(FormatCode = exports.FormatCode || (exports.FormatCode = {}));
	// Units specified in a format string
	var UnitsFormatEnum;
	(function (UnitsFormatEnum) {
	    // 
	    UnitsFormatEnum["UnitsFmtNone"] = "units-none";
	    // 
	    UnitsFormatEnum["UnitsFmtThousands"] = "units-thousands";
	    // 
	    UnitsFormatEnum["UnitsFmtMillions"] = "units-millions";
	    // 
	    UnitsFormatEnum["UnitsFmtBillionsEnglish"] = "units-billions-english";
	    // 
	    UnitsFormatEnum["UnitsFmtBillionsStandard"] = "units-billions-standard";
	})(UnitsFormatEnum = exports.UnitsFormatEnum || (exports.UnitsFormatEnum = {}));
	// 
	var ForecastColumnType;
	(function (ForecastColumnType) {
	    // 
	    ForecastColumnType["FORECAST_NONE"] = "none";
	    // 
	    ForecastColumnType["FORECAST_VALUE"] = "value";
	    // 
	    ForecastColumnType["FORECAST_INDICATOR"] = "indicator";
	    // 
	    ForecastColumnType["FORECAST_PRECISION"] = "precision";
	    // 
	    ForecastColumnType["FORECAST_QUALITY"] = "quality";
	    // 
	    ForecastColumnType["FORECAST_FIT_TREND"] = "fit_trend";
	    // 
	    ForecastColumnType["FORECAST_PRECISION_PERCENT"] = "precision_percent";
	    // 
	    ForecastColumnType["FORECAST_PREDICTION_INTERVAL_UPPER"] = "prediction_upper";
	    // 
	    ForecastColumnType["FORECAST_PREDICTION_INTERVAL_LOWER"] = "prediction_lower";
	})(ForecastColumnType = exports.ForecastColumnType || (exports.ForecastColumnType = {}));
	// 
	var MarkMarkersMode;
	(function (MarkMarkersMode) {
	    // 
	    MarkMarkersMode["MMM_Auto"] = "mmm-auto";
	    // 
	    MarkMarkersMode["MMM_All"] = "mmm_all";
	    // 
	    MarkMarkersMode["MMM_None"] = "mmm_none";
	    // 
	    MarkMarkersMode["MMM_Default"] = "mmm_default";
	})(MarkMarkersMode = exports.MarkMarkersMode || (exports.MarkMarkersMode = {}));
	// 
	var PercentMode;
	(function (PercentMode) {
	    // 
	    PercentMode["PERCENT_CELL_IN_PANE"] = "cell-in-pane";
	    // 
	    PercentMode["PERCENT_ROW_IN_PANE"] = "row-in-pane";
	    // 
	    PercentMode["PERCENT_COLUMN_IN_PANE"] = "column-in-pane";
	    // 
	    PercentMode["PERCENT_PANE"] = "pane";
	    // 
	    PercentMode["PERCENT_ROW"] = "row";
	    // 
	    PercentMode["PERCENT_COLUMN"] = "column";
	    // 
	    PercentMode["PERCENT_TABLE"] = "table";
	})(PercentMode = exports.PercentMode || (exports.PercentMode = {}));
	// 
	var SpecialValuesMode;
	(function (SpecialValuesMode) {
	    // 
	    SpecialValuesMode["SPECIAL_VALUES_HIDE_AND_WARN"] = "hide-and-warn";
	    // 
	    SpecialValuesMode["SPECIAL_VALUES_HIDE"] = "hide";
	    // 
	    SpecialValuesMode["SPECIAL_VALUES_HIDE_BREAK_LINES"] = "hide-break-lines";
	    // 
	    SpecialValuesMode["SPECIAL_VALUES_SHOW"] = "show";
	})(SpecialValuesMode = exports.SpecialValuesMode || (exports.SpecialValuesMode = {}));
	// 
	var LayoutType;
	(function (LayoutType) {
	    // 
	    LayoutType["LAYOUT_CARTESIAN"] = "cartesian";
	    // 
	    LayoutType["LAYOUT_DEFAULT"] = "default";
	})(LayoutType = exports.LayoutType || (exports.LayoutType = {}));
	// 
	var ShelfType;
	(function (ShelfType) {
	    // 
	    ShelfType["ST_NONE"] = "none-shelf";
	    // 
	    ShelfType["ST_COLUMNS_SHELF"] = "columns-shelf";
	    // 
	    ShelfType["ST_ROWS_SHELF"] = "rows-shelf";
	    // 
	    ShelfType["ST_PAGES_SHELF"] = "pages-shelf";
	    // 
	    ShelfType["ST_FILTER_SHELF"] = "filter-shelf";
	    // 
	    ShelfType["ST_IMAGE_SHELF"] = "image-shelf";
	    // 
	    ShelfType["ST_MEASURES_SHELF"] = "measures-shelf";
	    // 
	    ShelfType["ST_SHOWME_SHELF"] = "show-me-shelf";
	    // 
	    ShelfType["ST_ENCODING_SHELF"] = "encoding-shelf";
	    // 
	    ShelfType["ST_CLUSTER_SHELF"] = "cluster-shelf";
	    // 
	    ShelfType["ST_GEOMETRY_SHELF"] = "geometry-shelf";
	    // 
	    ShelfType["ST_END"] = "end-shelf";
	    // 
	    ShelfType["ST_FINAL"] = "final-shelf";
	})(ShelfType = exports.ShelfType || (exports.ShelfType = {}));
	// 
	var RestrictType;
	(function (RestrictType) {
	    // 
	    RestrictType["RT_INTERSECT"] = "rt-intersection";
	    // 
	    RestrictType["RT_UNION"] = "rt-union";
	})(RestrictType = exports.RestrictType || (exports.RestrictType = {}));
	// 
	var TooltipMode;
	(function (TooltipMode) {
	    // 
	    TooltipMode["TM_NONE"] = "none";
	    // 
	    TooltipMode["TM_STICKY"] = "sticky";
	    // 
	    TooltipMode["TM_SMOOTH"] = "smooth";
	})(TooltipMode = exports.TooltipMode || (exports.TooltipMode = {}));
	// 
	var ColumnGroups;
	(function (ColumnGroups) {
	    // 0x01
	    ColumnGroups["COLS_IN_OUTPUT"] = "cols-in-output";
	    // 0x02
	    ColumnGroups["COLS_IN_FILTER_SHELF"] = "cols-in-filter-shelf";
	    // 0x04
	    ColumnGroups["COLS_REF_BY_FILTERS"] = "cols-ref-by-filters";
	    // 0x08
	    ColumnGroups["COLS_REF_BY_OMEASURES"] = "cols-ref-by-omeasures";
	    // 0x10
	    ColumnGroups["COLS_REF_BY_JOIN_LOD"] = "cols-ref-by-join-lod";
	    // 0x20
	    ColumnGroups["COLS_HIDDEN"] = "cols-hidden";
	    // 0x40
	    ColumnGroups["COLS_REF_BY_SORTS"] = "cols-ref-by-sorts";
	    // 
	    ColumnGroups["COLS_REF_BY_FILTERS_OR_SORTS"] = "cols-ref-by-filters-or-sorts";
	    // 
	    ColumnGroups["COLS_ON_SHELVES"] = "cols-on-shelves";
	    // 
	    ColumnGroups["COLS_ALL"] = "cols-all";
	})(ColumnGroups = exports.ColumnGroups || (exports.ColumnGroups = {}));
	// 
	var ButtonsOption;
	(function (ButtonsOption) {
	    // 
	    ButtonsOption["BO_HIDE"] = "buttons-hide";
	})(ButtonsOption = exports.ButtonsOption || (exports.ButtonsOption = {}));
	// 
	var SelectionRelaxationOption;
	(function (SelectionRelaxationOption) {
	    // 
	    SelectionRelaxationOption["SRO_ALLOW"] = "selection-relaxation-allow";
	    // 
	    SelectionRelaxationOption["SRO_DISALLOW"] = "selection-relaxation-disallow";
	})(SelectionRelaxationOption = exports.SelectionRelaxationOption || (exports.SelectionRelaxationOption = {}));
	// 
	var EncodingType;
	(function (EncodingType) {
	    // a text encoding
	    EncodingType["ET_TEXT"] = "text-encoding";
	    // a color encoding
	    EncodingType["ET_COLOR"] = "color-encoding";
	    // a size encoding
	    EncodingType["ET_SIZE"] = "size-encoding";
	    // a shape encoding
	    EncodingType["ET_SHAPE"] = "shape-encoding";
	    // an image encoding
	    EncodingType["ET_IMAGE"] = "image-encoding";
	    // a sort (path) encoding (currently only for line or polygon charts)
	    EncodingType["ET_SORT"] = "sort-encoding";
	    // a wedge size (angle) encoding (currently only for pie charts)
	    EncodingType["ET_WEDGESIZE"] = "wedge-size-encoding";
	    // a geometry encoding
	    EncodingType["ET_GEOMETRY"] = "geometry-encoding";
	    // a level of detail encoding
	    EncodingType["ET_LOD"] = "level-of-detail-encoding";
	    // encoding used for the data highlighter/legend mechanism
	    EncodingType["ET_HIGHLIGHT"] = "highlight-encoding";
	    // a tooltip encoding
	    EncodingType["ET_TOOLTIP"] = "tooltip-encoding";
	    // a temporary label placed above marks for the table calc dialog
	    EncodingType["ET_RUNNINGORDER"] = "runningorder-encoding";
	    // the number of encodings, this is invalid input for an encoding presentation model
	    EncodingType["NUM_ENCODINGS"] = "num-encodings";
	    // an invalid encoding
	    EncodingType["ET_INVALID"] = "invalid-encoding";
	})(EncodingType = exports.EncodingType || (exports.EncodingType = {}));
	// Enumeration of valid horizontal alignments.
	var LabelHAlignment;
	(function (LabelHAlignment) {
	    // 
	    LabelHAlignment["LHA_Left"] = "h-align-left";
	    // 
	    LabelHAlignment["LHA_Center"] = "h-align-center";
	    // 
	    LabelHAlignment["LHA_Right"] = "h-align-right";
	    // 
	    LabelHAlignment["LHA_Automatic"] = "h-align-auto";
	})(LabelHAlignment = exports.LabelHAlignment || (exports.LabelHAlignment = {}));
	// Enumeration of valid vertical alignments.
	var LabelVAlignment;
	(function (LabelVAlignment) {
	    // 
	    LabelVAlignment["LVA_Bottom"] = "v-align-bottom";
	    // 
	    LabelVAlignment["LVA_Center"] = "v-align-center";
	    // 
	    LabelVAlignment["LVA_Top"] = "v-align-top";
	    // 
	    LabelVAlignment["LVA_Automatic"] = "v-align-auto";
	})(LabelVAlignment = exports.LabelVAlignment || (exports.LabelVAlignment = {}));
	// Enumeration of valid label positions.
	var LabelPosition;
	(function (LabelPosition) {
	    // Position each text run relative to the center of the original bbox.  Use the original bbox as the height and width of the text mark.  Used for non-stacked OO text marks.
	    LabelPosition["CenterInOriginalBbox"] = "label-position-center-in-original-box";
	    // Position each text run relative to the bottom left corner of the measured bbox. Use the measured bbox as the width and height of the label. Used for labels
	    LabelPosition["OriginAtLowerLeft"] = "label-position-origin-at-lower-left";
	    // Position each text run relative to the center of the measured bbox. Use the measured bbox as the width and height of the text mark. Used for most text marks.
	    LabelPosition["OriginAtCenter"] = "label-position-origin-at-center";
	})(LabelPosition = exports.LabelPosition || (exports.LabelPosition = {}));
	// Enumeration of ways to use color.  Values can be or'ed together to make a mask for allowed options
	var ColorMode;
	(function (ColorMode) {
	    // Color user specified
	    ColorMode["CLRM_User"] = "clrm-user";
	    // Color selected automatically
	    ColorMode["CLRM_Auto"] = "clrm-auto";
	    // Color matches mark color
	    ColorMode["CLRM_Match"] = "clrm-match";
	    // No color (transparent or not drawn)
	    ColorMode["CLRM_None"] = "clrm-none";
	})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));
	// 
	var MarkLabelsMode;
	(function (MarkLabelsMode) {
	    // 
	    MarkLabelsMode["MLM_All"] = "mlm-all";
	    // 
	    MarkLabelsMode["MLM_Selection"] = "mlm-selection";
	    // 
	    MarkLabelsMode["MLM_Highlight"] = "mlm-highlight";
	    // 
	    MarkLabelsMode["MLM_LineEnds"] = "mlm-line-ends";
	    // min/max setting
	    MarkLabelsMode["MLM_Range"] = "mlm-range";
	    // most recent (only relevant when date field is in play)
	    MarkLabelsMode["MLM_MostRecent"] = "mlm-most-recent";
	    // ...this is " virtual " (runtime only, not saved, not shown as a user setting
	    MarkLabelsMode["MLM_MultipleValues"] = "mlm-multiple-values";
	    // 
	    MarkLabelsMode["MLM_Default"] = "mlm-default";
	})(MarkLabelsMode = exports.MarkLabelsMode || (exports.MarkLabelsMode = {}));
	// 
	var MarkLabelsScope;
	(function (MarkLabelsScope) {
	    // 
	    MarkLabelsScope["MLS_Table"] = "mls-table";
	    // 
	    MarkLabelsScope["MLS_Pane"] = "mls-pane";
	    // 
	    MarkLabelsScope["MLS_Cell"] = "mls-cell";
	    // 
	    MarkLabelsScope["MLS_MultiMark"] = "mls-multimark";
	    // ...this is " virtual " (runtime only, not saved, not shown as a user setting)
	    MarkLabelsScope["MLS_MultipleValues"] = "mls-multiple-values";
	    // 
	    MarkLabelsScope["MLS_Default"] = "mls-default";
	})(MarkLabelsScope = exports.MarkLabelsScope || (exports.MarkLabelsScope = {}));
	// 
	var MarkLabelsVisibility;
	(function (MarkLabelsVisibility) {
	    // 
	    MarkLabelsVisibility["MLV_Hidden"] = "mlv-hidden";
	    // 
	    MarkLabelsVisibility["MLV_Visible"] = "mlv-visible";
	    // 
	    MarkLabelsVisibility["MLV_UseCurrent"] = "mlv-use-current";
	})(MarkLabelsVisibility = exports.MarkLabelsVisibility || (exports.MarkLabelsVisibility = {}));
	// 
	var StackingMode;
	(function (StackingMode) {
	    // 
	    StackingMode["StackingOff"] = "off";
	    // 
	    StackingMode["StackingOn"] = "on";
	    // 
	    StackingMode["StackingAuto"] = "auto";
	})(StackingMode = exports.StackingMode || (exports.StackingMode = {}));
	// 
	var MarkAlignment;
	(function (MarkAlignment) {
	    // 
	    MarkAlignment["MarkAlignmentLeft"] = "mark-alignment-left";
	    // 
	    MarkAlignment["MarkAlignmentRight"] = "mark-alignment-right";
	    // 
	    MarkAlignment["MarkAlignmentCenter"] = "mark-alignment-center";
	})(MarkAlignment = exports.MarkAlignment || (exports.MarkAlignment = {}));
	// 
	var PaneLabelComposition;
	(function (PaneLabelComposition) {
	    // 
	    PaneLabelComposition["PLC_None"] = "pane-label-composition-none";
	    // 
	    PaneLabelComposition["PLC_Mixed"] = "pane-label-composition-mixed";
	    // 
	    PaneLabelComposition["PLC_All"] = "pane-label-composition-all";
	})(PaneLabelComposition = exports.PaneLabelComposition || (exports.PaneLabelComposition = {}));
	// The user-specified mark type on the Marks Card
	var PrimitiveType;
	(function (PrimitiveType) {
	    // 
	    PrimitiveType["PT_AUTOMATIC"] = "automatic";
	    // 
	    PrimitiveType["PT_TEXT"] = "text";
	    // 
	    PrimitiveType["PT_IMAGE"] = "image";
	    // 
	    PrimitiveType["PT_SHAPE"] = "shape";
	    // 
	    PrimitiveType["PT_RECTANGLE"] = "rectangle";
	    // 
	    PrimitiveType["PT_BAR"] = "bar";
	    // 
	    PrimitiveType["PT_GANTT"] = "gantt";
	    // 
	    PrimitiveType["PT_SQUARE"] = "square";
	    // 
	    PrimitiveType["PT_CIRCLE"] = "circle";
	    // 
	    PrimitiveType["PT_POLYLINE"] = "polyline";
	    // line chart
	    PrimitiveType["PT_LINE"] = "line";
	    // 
	    PrimitiveType["PT_POLYGON"] = "polygon";
	    // area chart
	    PrimitiveType["PT_AREA"] = "area";
	    // 
	    PrimitiveType["PT_PIE"] = "pie";
	    // 
	    PrimitiveType["PT_MULTIPOLYGON"] = "multipolygon";
	    // Not an actual primitive type. This is just used to flag the UI that multiple types are in play.
	    PrimitiveType["PT_MULTIPLE"] = "multiple";
	    // used for looping over all values
	    PrimitiveType["NUM_PRIMITIVES"] = "count";
	    // used to flag an unset or invalid state
	    PrimitiveType["PT_INVALID"] = "invalid";
	})(PrimitiveType = exports.PrimitiveType || (exports.PrimitiveType = {}));
	// Defines the way a given primitive behaves on a viz - for instance, a PT_CIRCLE is treated as a point, while a PT_POLYGON would be treated as an area.
	var MarkType;
	(function (MarkType) {
	    // 
	    MarkType["MT_POINT"] = "point";
	    // 
	    MarkType["MT_LINE"] = "line";
	    // 
	    MarkType["MT_AREA"] = "area";
	    // 
	    MarkType["MT_INVALID"] = "invalid";
	})(MarkType = exports.MarkType || (exports.MarkType = {}));
	// PaneAxis is used to describe which axis of a pane is the independent axis.
	var PaneAxis;
	(function (PaneAxis) {
	    // The independent axis is inferred from other properties of the pane.
	    PaneAxis["AXIS_AUTO"] = "auto";
	    // 
	    PaneAxis["AXIS_X"] = "x";
	    // 
	    PaneAxis["AXIS_Y"] = "y";
	})(PaneAxis = exports.PaneAxis || (exports.PaneAxis = {}));
	// 
	var Rounding;
	(function (Rounding) {
	    // 
	    Rounding["Rounding_None"] = "none";
	    // 
	    Rounding["Rounding_Small"] = "small";
	    // 
	    Rounding["Rounding_Medium"] = "medium";
	    // 
	    Rounding["Rounding_Large"] = "large";
	})(Rounding = exports.Rounding || (exports.Rounding = {}));
	// 
	var LineEnd;
	(function (LineEnd) {
	    // 
	    LineEnd["LineEnd_None"] = "none";
	    // 
	    LineEnd["LineEnd_Arrow"] = "arrow";
	    // 
	    LineEnd["LineEnd_OpenArrow"] = "open-arrow";
	    // 
	    LineEnd["LineEnd_Dot"] = "dot";
	})(LineEnd = exports.LineEnd || (exports.LineEnd = {}));
	// 
	var LineEndSize;
	(function (LineEndSize) {
	    // 
	    LineEndSize["LineEndSize_Smallest"] = "smallest";
	    // 
	    LineEndSize["LineEndSize_Smaller"] = "smaller";
	    // 
	    LineEndSize["LineEndSize_Small"] = "small";
	    // 
	    LineEndSize["LineEndSize_Medium"] = "medium";
	    // 
	    LineEndSize["LineEndSize_Large"] = "large";
	    // 
	    LineEndSize["LineEndSize_Larger"] = "larger";
	    // 
	    LineEndSize["LineEndSize_Largest"] = "largest";
	})(LineEndSize = exports.LineEndSize || (exports.LineEndSize = {}));
	// 
	var BodyType;
	(function (BodyType) {
	    // 
	    BodyType["BodyType_None"] = "none";
	    // 
	    BodyType["BodyType_Box"] = "box";
	    // 
	    BodyType["BodyType_Edge"] = "edge";
	})(BodyType = exports.BodyType || (exports.BodyType = {}));
	// 
	var StyleTheme;
	(function (StyleTheme) {
	    // 
	    StyleTheme["themeClassic"] = "classic";
	    // 
	    StyleTheme["themeModern"] = "modern";
	    // 
	    StyleTheme["themeClean"] = "clean";
	    // 
	    StyleTheme["themeSmooth"] = "smooth";
	    // 
	    StyleTheme["themeCustom"] = "custom";
	})(StyleTheme = exports.StyleTheme || (exports.StyleTheme = {}));
	// 
	var AxisFoldState;
	(function (AxisFoldState) {
	    // 
	    AxisFoldState["afNone"] = "none";
	    // 
	    AxisFoldState["afFolded"] = "folded";
	    // 
	    AxisFoldState["afSynchronized"] = "synchronized";
	})(AxisFoldState = exports.AxisFoldState || (exports.AxisFoldState = {}));
	// 
	var LinePattern;
	(function (LinePattern) {
	    // 
	    LinePattern["LinePatternNone"] = "none";
	    // 
	    LinePattern["LinePatternSolid"] = "solid";
	    // 
	    LinePattern["LinePatternDashed"] = "dashed";
	    // 
	    LinePattern["LinePatternDotted"] = "dotted";
	})(LinePattern = exports.LinePattern || (exports.LinePattern = {}));
	// 
	var LineVisibility;
	(function (LineVisibility) {
	    // 
	    LineVisibility["LineVisibilityAuto"] = "automatic";
	    // 
	    LineVisibility["LineVisibilityOn"] = "on";
	    // 
	    LineVisibility["LineVisibilityOff"] = "off";
	})(LineVisibility = exports.LineVisibility || (exports.LineVisibility = {}));
	// 
	var StylesLinePattern;
	(function (StylesLinePattern) {
	    // 
	    StylesLinePattern["StylesLinePatternSolid"] = "solid";
	    // 
	    StylesLinePattern["StylesLinePatternDashed"] = "dashed";
	    // 
	    StylesLinePattern["StylesLinePatternDotted"] = "dotted";
	})(StylesLinePattern = exports.StylesLinePattern || (exports.StylesLinePattern = {}));
	// 
	var LineCap;
	(function (LineCap) {
	    // 
	    LineCap["LineCapFlat"] = "flat";
	    // 
	    LineCap["LineCapSquare"] = "square";
	    // 
	    LineCap["LineCapRound"] = "round";
	    // 
	    LineCap["LineCapTriangle"] = "triangle";
	})(LineCap = exports.LineCap || (exports.LineCap = {}));
	// 
	var LineJoin;
	(function (LineJoin) {
	    // 
	    LineJoin["BevelJoin"] = "bevel";
	    // 
	    LineJoin["MiterJoin"] = "miter";
	    // 
	    LineJoin["RoundJoin"] = "round";
	})(LineJoin = exports.LineJoin || (exports.LineJoin = {}));
	// 
	var LineAlignment;
	(function (LineAlignment) {
	    // 
	    LineAlignment["AlignmentCenter"] = "center";
	    // 
	    LineAlignment["AlignmentInset"] = "inset";
	})(LineAlignment = exports.LineAlignment || (exports.LineAlignment = {}));
	// 
	var FillMode;
	(function (FillMode) {
	    // 
	    FillMode["FillEvenOdd"] = "even-odd";
	    // 
	    FillMode["FillWinding"] = "winding";
	})(FillMode = exports.FillMode || (exports.FillMode = {}));
	// 
	var BorderStyle;
	(function (BorderStyle) {
	    // none
	    BorderStyle["BorderStyleNone"] = "bs-none";
	    // hidden
	    BorderStyle["BorderStyleHidden"] = "bs-hidden";
	    // dotted
	    BorderStyle["BorderStyleDotted"] = "bs-dotted";
	    // dashed
	    BorderStyle["BorderStyleDashed"] = "bs-dashed";
	    // solid
	    BorderStyle["BorderStyleSolid"] = "bs-solid";
	    // double
	    BorderStyle["BorderStyleDouble"] = "bs-double";
	    // groove
	    BorderStyle["BorderStyleGroove"] = "bs-groove";
	    // ridge
	    BorderStyle["BorderStyleRidge"] = "bs-ridge";
	    // inset
	    BorderStyle["BorderStyleInset"] = "bs-inset";
	    // outset
	    BorderStyle["BorderStyleOutset"] = "bs-outset";
	    // invalid
	    BorderStyle["BorderStyleInvalid"] = "bs-invalid";
	})(BorderStyle = exports.BorderStyle || (exports.BorderStyle = {}));
	// 
	var ColorPaletteType;
	(function (ColorPaletteType) {
	    // 
	    ColorPaletteType["ColorPaletteRegular"] = "color-palette-regular";
	    // 
	    ColorPaletteType["ColorPaletteOrderedDiverging"] = "palette-ordered-diverging";
	    // 
	    ColorPaletteType["ColorPaletteOrderedLinear"] = "palette-ordered-linear";
	})(ColorPaletteType = exports.ColorPaletteType || (exports.ColorPaletteType = {}));
	// 
	var PaletteFlags;
	(function (PaletteFlags) {
	    // 
	    PaletteFlags["PaletteFlagNone"] = "palette-flag-none";
	    // 
	    PaletteFlags["PaletteFlagCustom"] = "palette-flag-custom";
	    // 
	    PaletteFlags["PaletteFlagNotQuantitative"] = "palette-flag-not-quantitative";
	    // 
	    PaletteFlags["PaletteFlagNotCategorical"] = "palette-flag-not-categorical";
	    // 
	    PaletteFlags["PaletteFlagNotReferenceBand"] = "palette-flag-not-reference-band";
	    // 
	    PaletteFlags["PaletteFlagNotBoxplot"] = "palette-flag-not-boxplot";
	    // 
	    PaletteFlags["PaletteFlagNotFilledMapLight"] = "palette-flag-not-filled-map-light";
	    // 
	    PaletteFlags["PaletteFlagNotFilledMapDark"] = "palette-flag-not-filled-map-dark";
	    // 
	    PaletteFlags["PaletteFlagLegacy"] = "palette-flag-legacy";
	})(PaletteFlags = exports.PaletteFlags || (exports.PaletteFlags = {}));
	// 
	var DefaultPaletteType;
	(function (DefaultPaletteType) {
	    // 
	    DefaultPaletteType["SmallNominal"] = "palette-default-small-nominal";
	    // 
	    DefaultPaletteType["LargeNominal"] = "palette-default-large-nominal";
	    // 
	    DefaultPaletteType["Ordinal"] = "palette-default-ordinal";
	    // 
	    DefaultPaletteType["QuantitativePositive"] = "palette-default-quant-pos";
	    // 
	    DefaultPaletteType["QuantitativeNegative"] = "palette-default-quant-neg";
	    // 
	    DefaultPaletteType["QuantitativeDiverging"] = "palette-default-quant-div";
	    // 
	    DefaultPaletteType["QuantitativePositiveLight"] = "palette-default-quant-pos-light";
	    // 
	    DefaultPaletteType["QuantitativeNegativeLight"] = "palette-default-quant-neg-light";
	    // 
	    DefaultPaletteType["QuantitativeDivergingLight"] = "palette-default-quant-div-light";
	    // 
	    DefaultPaletteType["QuantitativePositiveArea"] = "palette-default-quant-pos-area";
	    // 
	    DefaultPaletteType["QuantitativeNegativeArea"] = "palette-default-quant-neg-area";
	    // 
	    DefaultPaletteType["QuantitativeDivergingArea"] = "palette-default-quant-div-area";
	})(DefaultPaletteType = exports.DefaultPaletteType || (exports.DefaultPaletteType = {}));
	// 
	var ShowBounds;
	(function (ShowBounds) {
	    // 
	    ShowBounds["Both"] = "show-both";
	    // 
	    ShowBounds["Upper"] = "show-upper";
	    // 
	    ShowBounds["Lower"] = "show-lower";
	})(ShowBounds = exports.ShowBounds || (exports.ShowBounds = {}));
	// Sample vs. population standard deviation
	var StDevType;
	(function (StDevType) {
	    // 
	    StDevType["Sample"] = "stdev-sample";
	    // 
	    StDevType["Population"] = "stdev-population";
	})(StDevType = exports.StDevType || (exports.StDevType = {}));
	// 
	var ReferenceLineFormulaGroup;
	(function (ReferenceLineFormulaGroup) {
	    // 
	    ReferenceLineFormulaGroup["None"] = "none";
	    // 
	    ReferenceLineFormulaGroup["Line"] = "line";
	    // 
	    ReferenceLineFormulaGroup["Band"] = "band";
	    // 
	    ReferenceLineFormulaGroup["Distribution"] = "distribution";
	    // 
	    ReferenceLineFormulaGroup["Boxplot"] = "boxplot";
	})(ReferenceLineFormulaGroup = exports.ReferenceLineFormulaGroup || (exports.ReferenceLineFormulaGroup = {}));
	// 
	var ReferenceLineScopeType;
	(function (ReferenceLineScopeType) {
	    // 
	    ReferenceLineScopeType["PerCell"] = "per-cell";
	    // 
	    ReferenceLineScopeType["PerPane"] = "per-pane";
	    // 
	    ReferenceLineScopeType["PerTable"] = "per-table";
	})(ReferenceLineScopeType = exports.ReferenceLineScopeType || (exports.ReferenceLineScopeType = {}));
	// how should the line be labeled
	var ReferenceLineLabelType;
	(function (ReferenceLineLabelType) {
	    // no label
	    ReferenceLineLabelType["None"] = "none";
	    // an automatically generated label
	    ReferenceLineLabelType["Automatic"] = "automatic";
	    // 
	    ReferenceLineLabelType["Value"] = "value";
	    // 
	    ReferenceLineLabelType["Computation"] = "computation";
	    // a user defined label
	    ReferenceLineLabelType["Custom"] = "custom";
	})(ReferenceLineLabelType = exports.ReferenceLineLabelType || (exports.ReferenceLineLabelType = {}));
	// how should the line be computed
	var ReferenceLineFormulaType;
	(function (ReferenceLineFormulaType) {
	    // a user specified constant value
	    ReferenceLineFormulaType["Constant"] = "constant";
	    // 
	    ReferenceLineFormulaType["Total"] = "total";
	    // total of all values at the given scope <- is this correct? looks like comment from FormulaTotal
	    ReferenceLineFormulaType["Sum"] = "sum";
	    // minimum value in the scope
	    ReferenceLineFormulaType["Min"] = "min";
	    // maximum value in the scope
	    ReferenceLineFormulaType["Max"] = "max";
	    // average value in the scope
	    ReferenceLineFormulaType["Average"] = "average";
	    // median value in the scope
	    ReferenceLineFormulaType["Median"] = "median";
	    // the n quantiles values in the scope
	    ReferenceLineFormulaType["Quantiles"] = "quantiles";
	    // a given percentile in the scope
	    ReferenceLineFormulaType["Percentile"] = "percentile";
	    // mean +- standard deviation
	    ReferenceLineFormulaType["StandardDeviation"] = "standard-deviation";
	    // a given confidence interval around the mean
	    ReferenceLineFormulaType["ConfidenceInterval"] = "confidence-interval";
	    // 
	    ReferenceLineFormulaType["MedianConfidenceInterval"] = "median-confidence-interval";
	})(ReferenceLineFormulaType = exports.ReferenceLineFormulaType || (exports.ReferenceLineFormulaType = {}));
	// Line or confidence interval or both
	var ReferenceLineConfidenceIntervalState;
	(function (ReferenceLineConfidenceIntervalState) {
	    // display line only
	    ReferenceLineConfidenceIntervalState["LineOnly"] = "line-only";
	    // display the line and a confidence interval
	    ReferenceLineConfidenceIntervalState["LineAndConfidenceInterval"] = "line-and-interval";
	    // display confidence interval only
	    ReferenceLineConfidenceIntervalState["ConfidenceIntervalOnly"] = "interval-only";
	})(ReferenceLineConfidenceIntervalState = exports.ReferenceLineConfidenceIntervalState || (exports.ReferenceLineConfidenceIntervalState = {}));
	// type of distribution. i.e. Percentage, Percentile, Quantile, and Standard Deviation
	var ReferenceLineDistributionType;
	(function (ReferenceLineDistributionType) {
	    // distribution type percentage
	    ReferenceLineDistributionType["Percentages"] = "percentages";
	    // distribution type percentile
	    ReferenceLineDistributionType["Percentiles"] = "percentiles";
	    // distribution type quantile
	    ReferenceLineDistributionType["Quantiles"] = "quantiles";
	    // distribution type standard deviation
	    ReferenceLineDistributionType["StandardDeviation"] = "standard-deviation";
	})(ReferenceLineDistributionType = exports.ReferenceLineDistributionType || (exports.ReferenceLineDistributionType = {}));
	// the kind of LOD calc to use for a given reference line
	var ReferenceLineLODCalcType;
	(function (ReferenceLineLODCalcType) {
	    // Create a formula using a FIXED-like level-of-detail calculation, to which sheet filters apply, that will go onto a specific sheet
	    ReferenceLineLODCalcType["MeasureFormula"] = "measure-formula";
	    // Create a boolean formula that can be used as a filter
	    ReferenceLineLODCalcType["BooleanFilter"] = "boolean-filter";
	})(ReferenceLineLODCalcType = exports.ReferenceLineLODCalcType || (exports.ReferenceLineLODCalcType = {}));
	// 
	var BoxplotWhiskerType;
	(function (BoxplotWhiskerType) {
	    // 
	    BoxplotWhiskerType["Standard"] = "standard";
	    // 
	    BoxplotWhiskerType["Minmax"] = "minmax";
	})(BoxplotWhiskerType = exports.BoxplotWhiskerType || (exports.BoxplotWhiskerType = {}));
	// categories of connection types displayed by the connection UI
	var ConnectionTypeCategory;
	(function (ConnectionTypeCategory) {
	    // standard database
	    ConnectionTypeCategory["CTC_Database"] = "database";
	    // 'More Items ...' meta item
	    ConnectionTypeCategory["CTC_More"] = "more";
	    // Other file types
	    ConnectionTypeCategory["CTC_Other"] = "other";
	    // invalid connection category
	    ConnectionTypeCategory["CTC_Invalid"] = "invalid";
	})(ConnectionTypeCategory = exports.ConnectionTypeCategory || (exports.ConnectionTypeCategory = {}));
	// a logical grouping of connection types displayed by the connection UI
	var ConnectionTypeGroup;
	(function (ConnectionTypeGroup) {
	    // in a file
	    ConnectionTypeGroup["CTG_File"] = "file";
	    // on a server
	    ConnectionTypeGroup["CTG_Server"] = "server";
	    // on a recent server
	    ConnectionTypeGroup["CTG_MruServer"] = "mru-server";
	    // invalid group
	    ConnectionTypeGroup["CTG_Invalid"] = "invalid";
	})(ConnectionTypeGroup = exports.ConnectionTypeGroup || (exports.ConnectionTypeGroup = {}));
	// The type of metadata a column contains
	var CubeMetadataCategory;
	(function (CubeMetadataCategory) {
	    // cube's name
	    CubeMetadataCategory["CMC_Name"] = "name";
	    // cube's description
	    CubeMetadataCategory["CMC_Description"] = "description";
	    // cube's last updated timestamp
	    CubeMetadataCategory["CMC_LastUpdated"] = "last-updated";
	    // invalid
	    CubeMetadataCategory["CMC_Invalid"] = "invalid";
	})(CubeMetadataCategory = exports.CubeMetadataCategory || (exports.CubeMetadataCategory = {}));
	// The type of widget to display to the user when they are specifying connection info
	var ConnectionWidgetType;
	(function (ConnectionWidgetType) {
	    // show the join area
	    ConnectionWidgetType["CWT_JoinArea"] = "join-area";
	    // show the cube selection ui
	    ConnectionWidgetType["CWT_CubeSelection"] = "cube-selection";
	    // show the google analytics ui
	    ConnectionWidgetType["CWT_GoogleAnalytics"] = "google-analytics";
	    // show the tableau server ui
	    ConnectionWidgetType["CWT_TableauServer"] = "tableau-server";
	    // do not show any connection widget
	    ConnectionWidgetType["CWT_NoWidget"] = "no-widget";
	    // invalid
	    ConnectionWidgetType["CWT_Invalid"] = "invalid";
	})(ConnectionWidgetType = exports.ConnectionWidgetType || (exports.ConnectionWidgetType = {}));
	// The type of google analytics basic info
	var GoogleBasicInfoType;
	(function (GoogleBasicInfoType) {
	    // google analytics account
	    GoogleBasicInfoType["GA_Account"] = "ga-account";
	    // google analytics property
	    GoogleBasicInfoType["GA_Property"] = "ga-property";
	    // google analytics view
	    GoogleBasicInfoType["GA_View"] = "ga-view";
	    // invalid
	    GoogleBasicInfoType["GA_Invalid"] = "invalid";
	})(GoogleBasicInfoType = exports.GoogleBasicInfoType || (exports.GoogleBasicInfoType = {}));
	// The way in which a piece of connection information is specified
	var ConnectionSpecificationType;
	(function (ConnectionSpecificationType) {
	    // Uses a combo box
	    ConnectionSpecificationType["CST_ComboBox"] = "combo-box";
	    // Uses a line edit
	    ConnectionSpecificationType["CST_LineEdit"] = "line-edit";
	    // Uses a line edit with a browse button next to it
	    ConnectionSpecificationType["CST_LineEditBrowse"] = "line-edit-browse";
	    // invalid
	    ConnectionSpecificationType["CST_Invalid"] = "invalid";
	})(ConnectionSpecificationType = exports.ConnectionSpecificationType || (exports.ConnectionSpecificationType = {}));
	// GA Date Range
	var DateRange;
	(function (DateRange) {
	    // 
	    DateRange["DateRangeFirst"] = "date-range-first";
	    // 
	    DateRange["DateRangeLast30Days"] = "date-range-last30";
	    // 
	    DateRange["DateRangeToday"] = "date-range-today";
	    // 
	    DateRange["DateRangeYesterday"] = "date-range-yesterday";
	    // 
	    DateRange["DateRangeLastWeek"] = "date-range-last-week";
	    // 
	    DateRange["DateRangeLastMonth"] = "date-range-last-month";
	    // 
	    DateRange["DateRangeLastYear"] = "date-range-last-year";
	    // 
	    DateRange["DateRangeThisWeekToYesterday"] = "date-range-this-week-to-yesterday";
	    // 
	    DateRange["DateRangeThisMonthToYesterday"] = "date-range-this-month-to-yesterday";
	    // 
	    DateRange["DateRangeThisYearToYesterday"] = "date-range-this-year-to-yesterday";
	    // 
	    DateRange["DateRangeLastWeekToYesterday"] = "date-range-last-week-to-yesterday";
	    // 
	    DateRange["DateRangeLastMonthToYesterday"] = "date-range-last-month-to-yesterday";
	    // 
	    DateRange["DateRangeLastYearToYesterday"] = "date-range-last-year-to-yesterday";
	    // 
	    DateRange["DateRangeFixedRange"] = "date-range-fixed-range";
	    // 
	    DateRange["DateRangeFixedStart"] = "date-range-fixed-start";
	    // 
	    DateRange["DateRangeCount"] = "date-range-count";
	})(DateRange = exports.DateRange || (exports.DateRange = {}));
	// Specifies the type of widget to show in ConnectServerWidget
	var ConnectServerWidgetType;
	(function (ConnectServerWidgetType) {
	    // invalid
	    ConnectServerWidgetType["CSWT_Invalid"] = "invalid";
	    // microsoft access
	    ConnectServerWidgetType["CSWT_Access"] = "access";
	    // generic odbc
	    ConnectServerWidgetType["CSWT_ODBC"] = "odbc";
	    // cubes
	    ConnectServerWidgetType["CSWT_Cube"] = "cube";
	    // relational data sources
	    ConnectServerWidgetType["CSWT_Relational"] = "relational";
	})(ConnectServerWidgetType = exports.ConnectServerWidgetType || (exports.ConnectServerWidgetType = {}));
	// 
	var AuthenticationEnumsMode;
	(function (AuthenticationEnumsMode) {
	    // no authentication widget
	    AuthenticationEnumsMode["AuthModeNone"] = "auth-mode-none";
	    // username and password
	    AuthenticationEnumsMode["AuthModeBasic"] = "auth-mode-basic";
	    // username and password can be blank
	    AuthenticationEnumsMode["AuthModeBasicNoValidateFields"] = "auth-mode-basic-no-validate-fields";
	    // only username
	    AuthenticationEnumsMode["AuthModeBasicUserNameOnly"] = "auth-mode-basic-username-only";
	    // aws access key and secret ID
	    AuthenticationEnumsMode["AuthModeBasicAWS"] = "auth-mode-basic-aws";
	    // username, password, and a list of AuthOptions with radio buttons
	    AuthenticationEnumsMode["AuthModeRadio"] = "auth-mode-radio";
	    // Like AuthModeRadio, but enable username/password even for integrated auth
	    AuthenticationEnumsMode["AuthModeRadioUnindented"] = "auth-mode-radio-unindented";
	    // username, password, and a list of AuthOptions with a combobox
	    AuthenticationEnumsMode["AuthModeComboBox"] = "auth-mode-combobox";
	    // Like AuthModeCombobox, but with option not requiring username/password
	    AuthenticationEnumsMode["AuthModeComboBoxIntegrated"] = "auth-mode-combobox-integrated";
	    // driver, authentication, username, realm, etc
	    AuthenticationEnumsMode["AuthModeHive"] = "auth-mode-hive";
	    // none, azure marketplace account, explicit
	    AuthenticationEnumsMode["AuthModeOData"] = "auth-mode-odata";
	    // edition, authentication, sso domain, etc
	    AuthenticationEnumsMode["AuthModeSharePoint"] = "auth-mode-sharepoint";
	    // username, password, client, & language
	    AuthenticationEnumsMode["AuthModeSAPBW"] = "auth-mode-sapbw";
	    // Ability to switch between two different auth modes each in their own modal dialogs (basic and oauth)
	    AuthenticationEnumsMode["AuthModeSwitchModal"] = "auth-mode-switch-modal";
	})(AuthenticationEnumsMode = exports.AuthenticationEnumsMode || (exports.AuthenticationEnumsMode = {}));
	// 
	var AuthenticationEnumsReconnectMode;
	(function (AuthenticationEnumsReconnectMode) {
	    // Auth not needed for reconnect
	    AuthenticationEnumsReconnectMode["ReconnectModeNone"] = "reconnect-mode-none";
	    // Username and password
	    AuthenticationEnumsReconnectMode["ReconnectModeBasic"] = "reconnect-mode-basic";
	    // Access file
	    AuthenticationEnumsReconnectMode["ReconnectModeAccess"] = "reconnect-mode-access";
	    // Microsoft Azure Data Market (OData)
	    AuthenticationEnumsReconnectMode["ReconnectModeDataMarket"] = "reconnect-mode-data-market";
	    // Google OAuth
	    AuthenticationEnumsReconnectMode["ReconnectModeGoogleOAuth"] = "reconnect-mode-google-oauth";
	    // SalesforceOAuth, with the option of username/password auth
	    AuthenticationEnumsReconnectMode["ReconnectModeSalesforceOAuth"] = "reconnect-mode-salesforce-oauth";
	    // Web data connector
	    AuthenticationEnumsReconnectMode["ReconnectModeWebData"] = "reconnect-mode-web-data";
	})(AuthenticationEnumsReconnectMode = exports.AuthenticationEnumsReconnectMode || (exports.AuthenticationEnumsReconnectMode = {}));
	// 
	var AuthenticationEnumsAuthOption;
	(function (AuthenticationEnumsAuthOption) {
	    // FIRST
	    AuthenticationEnumsAuthOption["AuthExplicit"] = "auth-option-explicit";
	    // 
	    AuthenticationEnumsAuthOption["AuthExplicitUnindented"] = "auth-option-explicit-unindented";
	    // 
	    AuthenticationEnumsAuthOption["AuthUseWindows"] = "auth-option-use-windows";
	    // 
	    AuthenticationEnumsAuthOption["AuthUseWindowsPreferred"] = "auth-option-windows-preferred";
	    // 
	    AuthenticationEnumsAuthOption["AuthTeradata"] = "auth-option-teradata";
	    // 
	    AuthenticationEnumsAuthOption["AuthLDAP"] = "auth-option-ldap";
	    // 
	    AuthenticationEnumsAuthOption["AuthVirtualNode"] = "auth-option-virtual-node";
	    // 
	    AuthenticationEnumsAuthOption["AuthODataAccount"] = "auth-option-odata";
	    // 
	    AuthenticationEnumsAuthOption["AuthNone"] = "auth-option-none";
	    // 
	    AuthenticationEnumsAuthOption["AuthKerberos"] = "auth-option-kerberos";
	    // Introduced for Kerberos with fallback, recognizing that the db may or may not be on Windows
	    AuthenticationEnumsAuthOption["AuthIntegrated"] = "auth-option-integrated";
	    // 
	    AuthenticationEnumsAuthOption["AuthUsername"] = "auth-option-username";
	    // 
	    AuthenticationEnumsAuthOption["AuthUsernameAndPassword"] = "auth-option-username-and-password";
	    // 
	    AuthenticationEnumsAuthOption["AuthSSL"] = "auth-option-ssl";
	    // 
	    AuthenticationEnumsAuthOption["AuthHDIEmulator"] = "auth-hdi-emulator";
	    // 
	    AuthenticationEnumsAuthOption["AuthHDIService"] = "auth-hdi-service";
	    // 
	    AuthenticationEnumsAuthOption["AuthHTTP"] = "auth-http";
	    // 
	    AuthenticationEnumsAuthOption["AuthHTTPS"] = "auth-https";
	    // 
	    AuthenticationEnumsAuthOption["AuthAccessNoSecurity"] = "auth-option-access-no";
	    // 
	    AuthenticationEnumsAuthOption["AuthAccessYesSecurity"] = "auth-option-access-yes";
	    // 
	    AuthenticationEnumsAuthOption["AuthOAuth"] = "auth-oauth";
	    // 
	    AuthenticationEnumsAuthOption["AuthForms"] = "auth-forms";
	    // 
	    AuthenticationEnumsAuthOption["AuthThirdPartySSO"] = "auth-third-party-SSO";
	    // LAST
	    AuthenticationEnumsAuthOption["AuthInvalid"] = "auth-option-invalid";
	    // 
	    AuthenticationEnumsAuthOption["AuthSAMLIdP"] = "auth-option-saml-idp";
	})(AuthenticationEnumsAuthOption = exports.AuthenticationEnumsAuthOption || (exports.AuthenticationEnumsAuthOption = {}));
	// data source validation modes
	var DataSourceParserValidationMode;
	(function (DataSourceParserValidationMode) {
	    // 
	    DataSourceParserValidationMode["WorkbookLoadValidation"] = "workbook-load-validation";
	    // 
	    DataSourceParserValidationMode["AutoValidation"] = "auto-validation";
	    // 
	    DataSourceParserValidationMode["ForceValidation"] = "force-validation";
	    // 
	    DataSourceParserValidationMode["PreventValidation"] = "prevent-validation";
	    // 
	    DataSourceParserValidationMode["PreventValidationAndThrow"] = "prevent-validation-and-throw";
	})(DataSourceParserValidationMode = exports.DataSourceParserValidationMode || (exports.DataSourceParserValidationMode = {}));
	// Enum for DataGrid/MetadataGrid fields reordering
	var FieldOrderType;
	(function (FieldOrderType) {
	    // 
	    FieldOrderType["DATASOURCE_ORDER"] = "datasource-order";
	    // 
	    FieldOrderType["ALPHA_PER_TABLE"] = "alpha-per-table";
	    // 
	    FieldOrderType["ALPHABETICAL_ORDER"] = "alphabetical-order";
	    // 
	    FieldOrderType["CUSTOM_ORDER"] = "custom-order";
	})(FieldOrderType = exports.FieldOrderType || (exports.FieldOrderType = {}));
	// 
	var LineInterpolationMode;
	(function (LineInterpolationMode) {
	    // 
	    LineInterpolationMode["LIM_Linear"] = "lim-linear";
	    // 
	    LineInterpolationMode["LIM_Step"] = "lim-step";
	    // 
	    LineInterpolationMode["LIM_Jump"] = "lim-jump";
	})(LineInterpolationMode = exports.LineInterpolationMode || (exports.LineInterpolationMode = {}));
	// 
	var FolderRole;
	(function (FolderRole) {
	    // 
	    FolderRole["FOLDER_DIMENSIONS"] = "dimensions";
	    // 
	    FolderRole["FOLDER_MEASURES"] = "measure";
	    // 
	    FolderRole["FOLDER_GROUPS"] = "groups";
	    // 
	    FolderRole["FOLDER_PARAMETERS"] = "parameters";
	})(FolderRole = exports.FolderRole || (exports.FolderRole = {}));
	// 
	var FieldTypeIconSet;
	(function (FieldTypeIconSet) {
	    // 
	    FieldTypeIconSet["FT_SET_ALL"] = "all";
	    // 
	    FieldTypeIconSet["FT_SET_CUBE_MEASURES"] = "cube-measures";
	    // 
	    FieldTypeIconSet["FT_SET_CUBE_DIMENSIONS"] = "cube-dimensions";
	})(FieldTypeIconSet = exports.FieldTypeIconSet || (exports.FieldTypeIconSet = {}));
	// 
	var FieldPivotStrategy;
	(function (FieldPivotStrategy) {
	    // 
	    FieldPivotStrategy["PIVOT_ON_KEY"] = "pivot-on-key";
	    // 
	    FieldPivotStrategy["PIVOT_ON_ALIAS"] = "pivot-on-alias";
	})(FieldPivotStrategy = exports.FieldPivotStrategy || (exports.FieldPivotStrategy = {}));
	// 
	var AliasType;
	(function (AliasType) {
	    // 
	    AliasType["ALIAS_NOTSET"] = "alias-not-set";
	    // 
	    AliasType["ALIAS_BEGIN"] = "alias-begin";
	    // 
	    AliasType["ALIAS_KEY"] = "alias-key";
	    // 
	    AliasType["ALIAS_KEY_NAME"] = "alias-key-name";
	    // 
	    AliasType["ALIAS_KEY_MEDNAME"] = "alias-key-medname";
	    // 
	    AliasType["ALIAS_KEY_LONGNAME"] = "alias-key-longname";
	    // 
	    AliasType["ALIAS_NAME"] = "alias-name";
	    // 
	    AliasType["ALIAS_NAME_KEY"] = "alias-name-key";
	    // 
	    AliasType["ALIAS_MEDNAME"] = "alias-medname";
	    // 
	    AliasType["ALIAS_MEDNAME_KEY"] = "alias-medname-key";
	    // 
	    AliasType["ALIAS_LONGNAME"] = "alias-longname";
	    // 
	    AliasType["ALIAS_LONGNAME_KEY"] = "alias-longname-key";
	    // 
	    AliasType["ALIAS_END"] = "alias-end";
	})(AliasType = exports.AliasType || (exports.AliasType = {}));
	// 
	var AliasTypes;
	(function (AliasTypes) {
	    // 
	    AliasTypes["MASK_ALIAS_KEY"] = "mask-alias-key";
	    // 
	    AliasTypes["MASK_ALIAS_NAME"] = "mask-alias-name";
	    // 
	    AliasTypes["MASK_ALIAS_MEDNAME"] = "mask-alias-medname";
	    // 
	    AliasTypes["MASK_ALIAS_LONGNAME"] = "mask-alias-longname";
	})(AliasTypes = exports.AliasTypes || (exports.AliasTypes = {}));
	// 
	var FieldRole;
	(function (FieldRole) {
	    // 
	    FieldRole["ROLE_DIMENSION"] = "dimension";
	    // 
	    FieldRole["ROLE_MEASURE"] = "measure";
	    // 
	    FieldRole["ROLE_UNKNOWN"] = "unknown";
	})(FieldRole = exports.FieldRole || (exports.FieldRole = {}));
	// 
	var FieldType;
	(function (FieldType) {
	    // 
	    FieldType["TYPE_QUANTITATIVE"] = "quantitative";
	    // 
	    FieldType["TYPE_ORDINAL"] = "ordinal";
	    // 
	    FieldType["TYPE_NOMINAL"] = "nominal";
	    // 
	    FieldType["TYPE_UNKNOWN"] = "unknown";
	})(FieldType = exports.FieldType || (exports.FieldType = {}));
	// 
	var DataSourceOrder;
	(function (DataSourceOrder) {
	    // 
	    DataSourceOrder["DSO_ALPHABETIC"] = "dso-alphabetic";
	    // 
	    DataSourceOrder["DSO_ORDINAL"] = "dso-ordinal";
	})(DataSourceOrder = exports.DataSourceOrder || (exports.DataSourceOrder = {}));
	// Where the column comes from
	var ColumnClass;
	(function (ColumnClass) {
	    // A metadata column (O or Q Measures)
	    ColumnClass["COL_METADATA"] = "col-metadata";
	    // A physical column on the database
	    ColumnClass["COL_DATABASE"] = "col-database";
	    // A numberic bin (a special kind of calculated column)
	    ColumnClass["COL_NUMERICBIN"] = "col-numericbin";
	    // A Categorical bin (group)
	    ColumnClass["COL_CATEGORICALBIN"] = "col-categoricalbin";
	    // A column instance
	    ColumnClass["COL_INSTANCE"] = "col-instance";
	    // A (raw) mdx calculated column
	    ColumnClass["COL_MDXCALC"] = "col-mdxcalc";
	    // A user-defined calculated column, Tableau expression syntax
	    ColumnClass["COL_USERCALC"] = "col-usercalc";
	    // A column that would have been COL_DATABASE, but the underlying database column does not exist
	    ColumnClass["COL_DANGLING"] = "col-dangling";
	    // A column that contains local supplied data (e.g. Latitude)
	    ColumnClass["COL_LOCALDATA"] = "col-localdata";
	    // A column that contains a visual model attribute (e.g. PaneIndex, Color, ...)
	    ColumnClass["COL_VISUALDATA"] = "col-visualdata";
	    // A column that's a Group (a " Set " in UI terminology)
	    ColumnClass["COL_GROUP"] = "col-group";
	})(ColumnClass = exports.ColumnClass || (exports.ColumnClass = {}));
	// 
	var VTAggType;
	(function (VTAggType) {
	    // 
	    VTAggType["VTAGG_SUM"] = "sum";
	    // 
	    VTAggType["VTAGG_AVG"] = "avg";
	    // 
	    VTAggType["VTAGG_MIN"] = "min";
	    // 
	    VTAggType["VTAGG_MAX"] = "max";
	    // 
	    VTAggType["VTAGG_SERVER"] = "server";
	    // 
	    VTAggType["VTAGG_NONE"] = "none";
	    // 
	    VTAggType["VTAGG_DEFAULT"] = "default";
	})(VTAggType = exports.VTAggType || (exports.VTAggType = {}));
	// 
	var EntityType;
	(function (EntityType) {
	    // 
	    EntityType["NoEnumerationEntity"] = "no-enumeration-entity";
	    // 
	    EntityType["DatabaseEntity"] = "database-entity";
	    // 
	    EntityType["SchemaEntity"] = "schema-entity";
	    // 
	    EntityType["TableEntity"] = "table-entity";
	})(EntityType = exports.EntityType || (exports.EntityType = {}));
	// 
	var PickEntitySearchType;
	(function (PickEntitySearchType) {
	    // 
	    PickEntitySearchType["PickEntitySearchType_StartsWith"] = "starts-with";
	    // 
	    PickEntitySearchType["PickEntitySearchType_Contains"] = "contains";
	    // 
	    PickEntitySearchType["PickEntitySearchType_ExactMatch"] = "exact-match";
	    // 
	    PickEntitySearchType["PickEntitySearchType_DEFAULT"] = "default";
	})(PickEntitySearchType = exports.PickEntitySearchType || (exports.PickEntitySearchType = {}));
	// Parsing methods and structures.
	var ExpressionOp;
	(function (ExpressionOp) {
	    // 
	    ExpressionOp["LogicalOr"] = "op-logical-or";
	    // 
	    ExpressionOp["LogicalAnd"] = "op-logical-and";
	    // 
	    ExpressionOp["LogicalNot"] = "op-logical-not";
	    // 
	    ExpressionOp["BitwiseXOr"] = "op-bitwise-xor";
	    // 
	    ExpressionOp["BitwiseOr"] = "op-bitwise-or";
	    // 
	    ExpressionOp["Equals"] = "op-equals";
	    // 
	    ExpressionOp["Greater"] = "op-greater";
	    // 
	    ExpressionOp["Less"] = "op-less";
	    // 
	    ExpressionOp["GEqual"] = "op-gequal";
	    // 
	    ExpressionOp["LEqual"] = "op-lequal";
	    // 
	    ExpressionOp["NEqual"] = "op-nequal";
	    // 
	    ExpressionOp["Plus"] = "op-plus";
	    // 
	    ExpressionOp["Minus"] = "op-minus";
	    // 
	    ExpressionOp["BitwiseAnd"] = "op-bitwise-and";
	    // 
	    ExpressionOp["Multiply"] = "op-multiply";
	    // 
	    ExpressionOp["Divide"] = "op-divide";
	    // 
	    ExpressionOp["Modulo"] = "op-modulo";
	    // 
	    ExpressionOp["Power"] = "op-power";
	    // 
	    ExpressionOp["Positive"] = "op-positive";
	    // 
	    ExpressionOp["Negative"] = "op-negative";
	    // 
	    ExpressionOp["BitwiseNot"] = "op-bitwise-not";
	    // 
	    ExpressionOp["Column"] = "op-column";
	    // 
	    ExpressionOp["String"] = "op-string";
	    // 
	    ExpressionOp["Number"] = "op-number";
	    // 
	    ExpressionOp["Date"] = "op-date";
	    // 
	    ExpressionOp["Boolean"] = "op-boolean";
	    // 
	    ExpressionOp["Funcall"] = "op-funcall";
	    // 
	    ExpressionOp["LParen"] = "op-lparen";
	    // 
	    ExpressionOp["RParen"] = "op-rparen";
	    // 
	    ExpressionOp["Comma"] = "op-comma";
	    // 
	    ExpressionOp["Ident"] = "op-ident";
	    // 
	    ExpressionOp["Null"] = "op-null";
	    // 
	    ExpressionOp["If"] = "op-if";
	    // 
	    ExpressionOp["Elseif"] = "op-elseif";
	    // 
	    ExpressionOp["Case"] = "op-case";
	    // 
	    ExpressionOp["When"] = "op-when";
	    // 
	    ExpressionOp["Then"] = "op-then";
	    // 
	    ExpressionOp["Else"] = "op-else";
	    // 
	    ExpressionOp["EndExpr"] = "op-endexpr";
	    // 
	    ExpressionOp["Whitespace"] = "op-whitespace";
	    // 
	    ExpressionOp["Comment"] = "op-comment";
	    // 
	    ExpressionOp["LBrace"] = "op-lbrace";
	    // 
	    ExpressionOp["RBrace"] = "op-rbrace";
	    // 
	    ExpressionOp["Colon"] = "op-colon";
	    // 
	    ExpressionOp["Bar"] = "op-bar";
	    // 
	    ExpressionOp["Txtype"] = "op-txtype";
	    // 
	    ExpressionOp["End"] = "op-end";
	    // 
	    ExpressionOp["RBrackets"] = "op-rbrackets";
	    // used to represent invalid tokens
	    ExpressionOp["Invalid"] = "op-invalid";
	})(ExpressionOp = exports.ExpressionOp || (exports.ExpressionOp = {}));
	// tri-state bool
	var TriBool;
	(function (TriBool) {
	    // 
	    TriBool["TB_Invalid"] = "tribool-invalid";
	    // 
	    TriBool["TB_False"] = "tribool-false";
	    // 
	    TriBool["TB_True"] = "tribool-true";
	})(TriBool = exports.TriBool || (exports.TriBool = {}));
	// table calc reference options set
	var ReferenceOptionsSet;
	(function (ReferenceOptionsSet) {
	    // 
	    ReferenceOptionsSet["ROS_Relative"] = "reference-options-set-relative";
	    // 
	    ReferenceOptionsSet["ROS_Fixed"] = "reference-options-set-fixed";
	    // 
	    ReferenceOptionsSet["ROS_Parameter"] = "reference-options-set-parameter";
	    // 
	    ReferenceOptionsSet["ROS_None"] = "reference-options-set-none";
	})(ReferenceOptionsSet = exports.ReferenceOptionsSet || (exports.ReferenceOptionsSet = {}));
	// widget state
	var WidgetState;
	(function (WidgetState) {
	    // 
	    WidgetState["Hidden"] = "widget-state-hidden";
	    // 
	    WidgetState["Disabled"] = "widget-state-disabled";
	    // 
	    WidgetState["Enabled"] = "widget-state-enabled";
	})(WidgetState = exports.WidgetState || (exports.WidgetState = {}));
	// rank type
	var RankType;
	(function (RankType) {
	    // 
	    RankType["Competition"] = "rank-type-competition";
	    // 
	    RankType["ModifiedCompetition"] = "rank-type-modified-competition";
	    // 
	    RankType["Dense"] = "rank-type-dense";
	    // 
	    RankType["Unique"] = "rank-type-unique";
	})(RankType = exports.RankType || (exports.RankType = {}));
	// 
	var TableCalcCommandType;
	(function (TableCalcCommandType) {
	    // 
	    TableCalcCommandType["TableCalcCommandClear"] = "clear";
	})(TableCalcCommandType = exports.TableCalcCommandType || (exports.TableCalcCommandType = {}));
	// 
	var CalcNestingLevel;
	(function (CalcNestingLevel) {
	    // 
	    CalcNestingLevel["Primary"] = "primary";
	    // used only for type != TC_CUSTOM
	    CalcNestingLevel["Secondary"] = "secondary";
	    // used only for type == TC_CUSTOM
	    CalcNestingLevel["Nested"] = "nested";
	})(CalcNestingLevel = exports.CalcNestingLevel || (exports.CalcNestingLevel = {}));
	// 
	var DecimalMode;
	(function (DecimalMode) {
	    // 
	    DecimalMode["DecimalModeAutomatic"] = "automatic";
	    // 
	    DecimalMode["DecimalModeManual"] = "manual";
	})(DecimalMode = exports.DecimalMode || (exports.DecimalMode = {}));
	// 
	var TableCalcOrderingType;
	(function (TableCalcOrderingType) {
	    // Advanced...
	    TableCalcOrderingType["OTField"] = "field";
	    // Table (Across)
	    TableCalcOrderingType["OTRows"] = "rows";
	    // Table (Down)
	    TableCalcOrderingType["OTColumns"] = "columns";
	    // Table (Across then Down)
	    TableCalcOrderingType["OTTable"] = "table";
	    // Table (Down then Across)
	    TableCalcOrderingType["OTTableColumnPrecedence"] = "table-column-precedence";
	    // Pane Across
	    TableCalcOrderingType["OTRowInPane"] = "row-in-pane";
	    // Pane (Down)
	    TableCalcOrderingType["OTColumnInPane"] = "column-in-pane";
	    // Pane (Across then Down)
	    TableCalcOrderingType["OTPane"] = "pane";
	    // Pane (Down then Across)
	    TableCalcOrderingType["OTPaneColumnPrecedence"] = "pane-column-precedence";
	    // Cell
	    TableCalcOrderingType["OTCellInPane"] = "cell-in-pane";
	})(TableCalcOrderingType = exports.TableCalcOrderingType || (exports.TableCalcOrderingType = {}));
	// 
	var TableCalcSortMode;
	(function (TableCalcSortMode) {
	    // 
	    TableCalcSortMode["SM_Automatic"] = "sort-mode-automatic";
	    // 
	    TableCalcSortMode["SM_Custom"] = "sort-mode-custom";
	})(TableCalcSortMode = exports.TableCalcSortMode || (exports.TableCalcSortMode = {}));
	// 
	var TableCalcTableCalcType;
	(function (TableCalcTableCalcType) {
	    // none (used to initialize variables)
	    TableCalcTableCalcType["TC_NONE"] = "none";
	    // Running Total
	    TableCalcTableCalcType["TC_CUMULATIVE"] = "cumulative";
	    // Moving Calculation
	    TableCalcTableCalcType["TC_WINDOW"] = "window";
	    // Difference From
	    TableCalcTableCalcType["TC_DIFF"] = "diff";
	    // Percent Difference From
	    TableCalcTableCalcType["TC_PCTDIFF"] = "pct-diff";
	    // Percent From
	    TableCalcTableCalcType["TC_PCTVALUE"] = "pct-value";
	    // Percent Of Total
	    TableCalcTableCalcType["TC_PCTTOTAL"] = "pct-total";
	    // Rank
	    TableCalcTableCalcType["TC_RANK"] = "rank";
	    // Percentile
	    TableCalcTableCalcType["TC_PCTRANK"] = "pct-rank";
	    // Custom
	    TableCalcTableCalcType["TC_CUSTOM"] = "custom";
	})(TableCalcTableCalcType = exports.TableCalcTableCalcType || (exports.TableCalcTableCalcType = {}));
	// 
	var QuickTableCalcCommandType;
	(function (QuickTableCalcCommandType) {
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandRunTotal"] = "run-total";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandDifference"] = "difference";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandPctDiff"] = "pct-diff";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandPctTotal"] = "pct-total";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandRank"] = "rank";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandPctRank"] = "pct-rank";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandMovingAvg"] = "moving-avg";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandYtd"] = "ytd";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandCgr"] = "cgr";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandYOverY"] = "y-over-y";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandYtdGrowth"] = "ytd-growth";
	    // 
	    QuickTableCalcCommandType["QuickTableCalcCommandCustom"] = "custom";
	})(QuickTableCalcCommandType = exports.QuickTableCalcCommandType || (exports.QuickTableCalcCommandType = {}));
	// 
	var TableCalcAddressCommandType;
	(function (TableCalcAddressCommandType) {
	    // 
	    TableCalcAddressCommandType["TableCalcAddressCommandRel"] = "rel";
	    // 
	    TableCalcAddressCommandType["TableCalcAddressCommandAbs"] = "abs";
	    // 
	    TableCalcAddressCommandType["TableCalcAddressCommandParam"] = "param";
	    // 
	    TableCalcAddressCommandType["TableCalcAddressCommandMore"] = "more";
	})(TableCalcAddressCommandType = exports.TableCalcAddressCommandType || (exports.TableCalcAddressCommandType = {}));
	// relative addressing
	var TableCalcRelativeAddress;
	(function (TableCalcRelativeAddress) {
	    // 
	    TableCalcRelativeAddress["RelAddrFirst"] = "relative-address-first";
	    // 
	    TableCalcRelativeAddress["RelAddrPrevious"] = "relative-address-previous";
	    // 
	    TableCalcRelativeAddress["RelAddrNext"] = "relative-address-next";
	    // 
	    TableCalcRelativeAddress["RelAddrLast"] = "relative-address-last";
	})(TableCalcRelativeAddress = exports.TableCalcRelativeAddress || (exports.TableCalcRelativeAddress = {}));
	// 
	var CategoricalBinItemType;
	(function (CategoricalBinItemType) {
	    // 
	    CategoricalBinItemType["Unbinned"] = "unbinned";
	    // 
	    CategoricalBinItemType["BinMember"] = "categorical-bin-member";
	    // 
	    CategoricalBinItemType["Bin"] = "categorical-bin";
	})(CategoricalBinItemType = exports.CategoricalBinItemType || (exports.CategoricalBinItemType = {}));
	// The class properties
	var CredentialTypePropertiesFlag;
	(function (CredentialTypePropertiesFlag) {
	    // 
	    CredentialTypePropertiesFlag["None"] = "none";
	    // 
	    CredentialTypePropertiesFlag["GenericAuthClass"] = "generic-auth-class";
	    // 
	    CredentialTypePropertiesFlag["ProviderClass"] = "provider-class";
	    // 
	    CredentialTypePropertiesFlag["DataConnectionClass"] = "data-connection-class";
	})(CredentialTypePropertiesFlag = exports.CredentialTypePropertiesFlag || (exports.CredentialTypePropertiesFlag = {}));
	// The connector type
	var ConnectorType;
	(function (ConnectorType) {
	    // 
	    ConnectorType["Invalid"] = "invalid";
	    // 
	    ConnectorType["WebDataConnector"] = "web-data-connector";
	    // 
	    ConnectorType["CloudFileConnector"] = "cloud-file-connector";
	    // 
	    ConnectorType["LegacyConnector"] = "legacy-connector";
	})(ConnectorType = exports.ConnectorType || (exports.ConnectorType = {}));
	// 
	var TablePillIcon;
	(function (TablePillIcon) {
	    // 
	    TablePillIcon["ListItem"] = "list-item";
	    // 
	    TablePillIcon["Sheet"] = "sheet";
	    // 
	    TablePillIcon["FoundTable"] = "found-table";
	    // 
	    TablePillIcon["NamedRange"] = "named-range";
	    // 
	    TablePillIcon["StoredProcedure"] = "stored-procedure";
	})(TablePillIcon = exports.TablePillIcon || (exports.TablePillIcon = {}));
	// 
	var JoinValidationError;
	(function (JoinValidationError) {
	    // 
	    JoinValidationError["JVE_NoError"] = "no-error";
	    // 
	    JoinValidationError["JVE_EmptyClause"] = "empty-clause";
	    // 
	    JoinValidationError["JVE_TypeMismatch"] = "type-mismatch";
	    // 
	    JoinValidationError["JVE_InvalidField"] = "invalid-field";
	    // 
	    JoinValidationError["JVE_BadClause"] = "bad-clause";
	    // 
	    JoinValidationError["JVE_BadInputRelation"] = "bad-input-relation";
	    // 
	    JoinValidationError["JVE_RepeatedFieldReferences"] = "repeated-field-references";
	    // 
	    JoinValidationError["JVE_UnsupportedJoinType"] = "unsupported-join-type";
	    // 
	    JoinValidationError["JVE_InvalidCalculation"] = "invalid-calculation";
	    // 
	    JoinValidationError["JVE_NonSpatialType"] = "non-spatial-type";
	    // 
	    JoinValidationError["JVE_NonSpatialComparison"] = "non-spatial-comp";
	    // 
	    JoinValidationError["JVE_Unknown"] = "unknown";
	})(JoinValidationError = exports.JoinValidationError || (exports.JoinValidationError = {}));
	// 
	var ConnectionTypeEnum;
	(function (ConnectionTypeEnum) {
	    // -d-s is used to force the enum generator to generate DS with capital letters in .cs just like the .cpp
	    ConnectionTypeEnum["InvalidDS"] = "invalid-d-s";
	    // 
	    ConnectionTypeEnum["FileDS"] = "file-d-s";
	    // 
	    ConnectionTypeEnum["ServerDS"] = "server-d-s";
	    // 
	    ConnectionTypeEnum["InternetDS"] = "internet-d-s";
	    // 
	    ConnectionTypeEnum["TableauServerDS"] = "tableau-server-d-s";
	})(ConnectionTypeEnum = exports.ConnectionTypeEnum || (exports.ConnectionTypeEnum = {}));
	// 
	var ConnectionErrorStage;
	(function (ConnectionErrorStage) {
	    // 
	    ConnectionErrorStage["Unknown"] = "unknown";
	    // 
	    ConnectionErrorStage["CreateProtocolFailed"] = "create-protocol-failed";
	    // 
	    ConnectionErrorStage["LoadMetadataFailed"] = "load-metadata-failed";
	})(ConnectionErrorStage = exports.ConnectionErrorStage || (exports.ConnectionErrorStage = {}));
	// 
	var SortDirection;
	(function (SortDirection) {
	    // ascending
	    SortDirection["ST_ASC"] = "asc";
	    // descending
	    SortDirection["ST_DESC"] = "desc";
	})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
	// 
	var SortType;
	(function (SortType) {
	    // Use the defined ordering
	    SortType["ST_NATURAL"] = "data-source-order";
	    // Alphabetic/numeric ordering of data
	    SortType["ST_ALPHABETIC"] = "alpha";
	    // Specify a secondary field
	    SortType["ST_COMPUTED"] = "field";
	    // Manually defined ordering
	    SortType["ST_MANUAL"] = "manual";
	})(SortType = exports.SortType || (exports.SortType = {}));
	// 
	var SortPartitioning;
	(function (SortPartitioning) {
	    // Compute a single sort order, ignoring the partitions that the dimension being sorted is enclosed within.
	    SortPartitioning["None"] = "none";
	    // Compute a separate sort order for each partition that the dimension being sorted is enclosed within.
	    SortPartitioning["Nested"] = "nested";
	})(SortPartitioning = exports.SortPartitioning || (exports.SortPartitioning = {}));
	// 
	var SortEnd;
	(function (SortEnd) {
	    // 
	    SortEnd["ST_TOP"] = "top";
	    // 
	    SortEnd["ST_BOTTOM"] = "bottom";
	})(SortEnd = exports.SortEnd || (exports.SortEnd = {}));
	// Enumeration for the type of join connecting two tables
	var SQLJoinType;
	(function (SQLJoinType) {
	    // 
	    SQLJoinType["SQL_InnerJoin"] = "sql-inner-join";
	    // 
	    SQLJoinType["SQL_LeftJoin"] = "sql-left-join";
	    // 
	    SQLJoinType["SQL_RightJoin"] = "sql-right-join";
	    // 
	    SQLJoinType["SQL_FullJoin"] = "sql-full-join";
	    // 
	    SQLJoinType["SQL_CrossJoin"] = "sql-cross-join";
	})(SQLJoinType = exports.SQLJoinType || (exports.SQLJoinType = {}));
	// The result of parsing and setting a data value for a property of a quantitative axis.
	var SetAxisDataValueResult;
	(function (SetAxisDataValueResult) {
	    // 
	    SetAxisDataValueResult["Success"] = "set-axis-data-value-result-success";
	    // 
	    SetAxisDataValueResult["ParseFailure"] = "set-axis-data-value-result-parse-failure";
	    // 
	    SetAxisDataValueResult["ValueFailure"] = "set-axis-data-value-result-value-failure";
	})(SetAxisDataValueResult = exports.SetAxisDataValueResult || (exports.SetAxisDataValueResult = {}));
	// The type of an axis' extent
	var AxisExtentType;
	(function (AxisExtentType) {
	    // 
	    AxisExtentType["Automatic"] = "axis-extent-automatic";
	    // 
	    AxisExtentType["Uniform"] = "axis-extent-uniform";
	    // 
	    AxisExtentType["Independent"] = "axis-extent-independent";
	    // 
	    AxisExtentType["Fixed"] = "axis-extent-fixed";
	})(AxisExtentType = exports.AxisExtentType || (exports.AxisExtentType = {}));
	// Enumeration of units tick spacing can take
	var TickSpacingUnits;
	(function (TickSpacingUnits) {
	    // 
	    TickSpacingUnits["NoUnits"] = "no-units";
	    // 
	    TickSpacingUnits["Years"] = "years";
	    // 
	    TickSpacingUnits["Quarters"] = "quarters";
	    // 
	    TickSpacingUnits["Months"] = "months";
	    // 
	    TickSpacingUnits["Weeks"] = "weeks";
	    // 
	    TickSpacingUnits["Days"] = "days";
	    // 
	    TickSpacingUnits["Hours"] = "hours";
	    // 
	    TickSpacingUnits["Minutes"] = "minutes";
	    // 
	    TickSpacingUnits["Seconds"] = "seconds";
	})(TickSpacingUnits = exports.TickSpacingUnits || (exports.TickSpacingUnits = {}));
	// Enumeration of whether totals are included in or excluded from the color encoding
	var TotalsInclusion;
	(function (TotalsInclusion) {
	    // Totals included in color encoding
	    TotalsInclusion["IncludeTotals"] = "include-totals";
	    // Totals excluded from color encoding
	    TotalsInclusion["ExcludeTotals"] = "exclude-totals";
	})(TotalsInclusion = exports.TotalsInclusion || (exports.TotalsInclusion = {}));
	// How tick marks are being calculated
	var TickMarkState;
	(function (TickMarkState) {
	    // 
	    TickMarkState["TicksAutomatic"] = "ticks-automatic";
	    // 
	    TickMarkState["TicksManual"] = "ticks-manual";
	    // 
	    TickMarkState["TicksNone"] = "ticks-None";
	})(TickMarkState = exports.TickMarkState || (exports.TickMarkState = {}));
	// Setting for type of axis range
	var AxisRangeType;
	(function (AxisRangeType) {
	    // 
	    AxisRangeType["AutomaticRange"] = "automatic-range";
	    // 
	    AxisRangeType["UniformRange"] = "uniform-range";
	    // 
	    AxisRangeType["IndependentRange"] = "independent-range";
	    // 
	    AxisRangeType["FixedRange"] = "fixed-range";
	    // 
	    AxisRangeType["FixedMin"] = "fixed-min";
	    // 
	    AxisRangeType["FixedMax"] = "fixed-max";
	    // 
	    AxisRangeType["FixedMinUniformMax"] = "fixed-min-uniform-max";
	    // 
	    AxisRangeType["FixedMinIndependentMax"] = "fixed-min-independent-max";
	    // 
	    AxisRangeType["FixedMaxUniformMin"] = "fixed-max-uniform-min";
	    // 
	    AxisRangeType["FixedMaxIndependentMin"] = "fixed-max-independent-min";
	    // 
	    AxisRangeType["FixedRangeOrdinal"] = "fixed-range-ordinal";
	})(AxisRangeType = exports.AxisRangeType || (exports.AxisRangeType = {}));
	// represents type of widget on the toolbar of rich text editor
	var RichTextEditorWidgetKey;
	(function (RichTextEditorWidgetKey) {
	    // 
	    RichTextEditorWidgetKey["None"] = "none";
	    // 
	    RichTextEditorWidgetKey["FontSize"] = "fontsize";
	    // 
	    RichTextEditorWidgetKey["FontName"] = "fontname";
	    // 
	    RichTextEditorWidgetKey["FontColor"] = "color";
	    // 
	    RichTextEditorWidgetKey["Bold"] = "bold";
	    // 
	    RichTextEditorWidgetKey["Italic"] = "italic";
	    // 
	    RichTextEditorWidgetKey["Underline"] = "underline";
	    // 
	    RichTextEditorWidgetKey["AlignLeft"] = "justifyleft";
	    // 
	    RichTextEditorWidgetKey["AlignCenter"] = "justifycenter";
	    // 
	    RichTextEditorWidgetKey["AlignRight"] = "justifyright";
	    // 
	    RichTextEditorWidgetKey["ClearFormatting"] = "clearformatting";
	    // 
	    RichTextEditorWidgetKey["TableauKeywords"] = "tableaukeywords";
	})(RichTextEditorWidgetKey = exports.RichTextEditorWidgetKey || (exports.RichTextEditorWidgetKey = {}));
	// 
	var CellSizeChange;
	(function (CellSizeChange) {
	    // 
	    CellSizeChange["CSC_Taller"] = "taller";
	    // 
	    CellSizeChange["CSC_Shorter"] = "shorter";
	    // 
	    CellSizeChange["CSC_Wider"] = "wider";
	    // 
	    CellSizeChange["CSC_Narrower"] = "narrower";
	    // 
	    CellSizeChange["CSC_Bigger"] = "bigger";
	    // 
	    CellSizeChange["CSC_Smaller"] = "smaller";
	})(CellSizeChange = exports.CellSizeChange || (exports.CellSizeChange = {}));
	// 
	var CellTypeEnum;
	(function (CellTypeEnum) {
	    // 
	    CellTypeEnum["CLT_Square"] = "square";
	    // 
	    CellTypeEnum["CLT_Text"] = "text";
	})(CellTypeEnum = exports.CellTypeEnum || (exports.CellTypeEnum = {}));
	// represents type of formatting pres model
	var TypeOfFormatItem;
	(function (TypeOfFormatItem) {
	    // 
	    TypeOfFormatItem["FT_FormatItem"] = "formatItem";
	    // 
	    TypeOfFormatItem["FT_FormatContainer"] = "formatContainer";
	    // 
	    TypeOfFormatItem["FT_FormatControl"] = "formatControl";
	})(TypeOfFormatItem = exports.TypeOfFormatItem || (exports.TypeOfFormatItem = {}));
	// represents type of formatting container
	var TypeOfFormatContainer;
	(function (TypeOfFormatContainer) {
	    // 
	    TypeOfFormatContainer["FT_FormatPane"] = "formatPane";
	    // 
	    TypeOfFormatContainer["FT_FormatSection"] = "formatSection";
	    // 
	    TypeOfFormatContainer["FT_CollapsibleSection"] = "collapsibleSection";
	    // 
	    TypeOfFormatContainer["FT_CompositeContainer"] = "compositeContainer";
	    // 
	    TypeOfFormatContainer["FT_UnitContainer"] = "unitContainer";
	    // 
	    TypeOfFormatContainer["FT_Tab"] = "tab";
	    // 
	    TypeOfFormatContainer["FT_TabGroup"] = "tabGroup";
	})(TypeOfFormatContainer = exports.TypeOfFormatContainer || (exports.TypeOfFormatContainer = {}));
	// represents type of formatting control
	var TypeOfFormatControl;
	(function (TypeOfFormatControl) {
	    // 
	    TypeOfFormatControl["FT_None"] = "none";
	    // 
	    TypeOfFormatControl["FT_NumericControl"] = "numeric-control";
	    // 
	    TypeOfFormatControl["FT_TextControl"] = "text-control";
	    // 
	    TypeOfFormatControl["FT_ColorControl"] = "color-control";
	    // 
	    TypeOfFormatControl["FT_SelectorControl"] = "selector-control";
	    // 
	    TypeOfFormatControl["FT_ToggleControl"] = "toggle-control";
	})(TypeOfFormatControl = exports.TypeOfFormatControl || (exports.TypeOfFormatControl = {}));
	// represents type of formatting widget
	var FormatWidgetKey;
	(function (FormatWidgetKey) {
	    // 
	    FormatWidgetKey["FWK_None"] = "none";
	    // 
	    FormatWidgetKey["FWK_FontFamily"] = "fontFamily";
	    // 
	    FormatWidgetKey["FWK_FontSize"] = "fontSize";
	    // 
	    FormatWidgetKey["FWK_ColorSwatch"] = "colorSwatch";
	    // 
	    FormatWidgetKey["FWK_Bold"] = "bold";
	    // 
	    FormatWidgetKey["FWK_Italics"] = "italics";
	    // 
	    FormatWidgetKey["FWK_Underline"] = "underline";
	    // 
	    FormatWidgetKey["FWK_LineVisibility"] = "lineVisibility";
	    // 
	    FormatWidgetKey["FWK_LinePattern"] = "linePattern";
	    // 
	    FormatWidgetKey["FWK_LineSize"] = "lineSize";
	    // 
	    FormatWidgetKey["FWK_NumberType"] = "numericType";
	    // 
	    FormatWidgetKey["FWK_DecimalPlaces"] = "decimalPlaces";
	    // 
	    FormatWidgetKey["FWK_ThousandsSeparator"] = "thousandsSeparator";
	    // 
	    FormatWidgetKey["FWK_NumericUnits"] = "numericUnits";
	})(FormatWidgetKey = exports.FormatWidgetKey || (exports.FormatWidgetKey = {}));
	// represents identifier for each node in format pane
	var FormatNodeIdentifier;
	(function (FormatNodeIdentifier) {
	    // 
	    FormatNodeIdentifier["Format_None_Key"] = "none";
	    // 
	    FormatNodeIdentifier["Format_Workbook_Key"] = "workbook";
	    // 
	    FormatNodeIdentifier["Format_Font_Key"] = "font";
	    // 
	    FormatNodeIdentifier["Format_Color_Key"] = "color";
	    // 
	    FormatNodeIdentifier["Format_Lines_Key"] = "lines";
	    // 
	    FormatNodeIdentifier["Format_FontAll_Key"] = "font-all";
	    // 
	    FormatNodeIdentifier["Format_FontAllControls_Key"] = "font-all-controls";
	    // 
	    FormatNodeIdentifier["Format_FontMore_Key"] = "font-more";
	    // 
	    FormatNodeIdentifier["Format_FontWorksheetTitles_Key"] = "worksheet-titles";
	    // 
	    FormatNodeIdentifier["Format_FontToolTip_Key"] = "font-tooltip";
	    // 
	    FormatNodeIdentifier["Format_FontWorksheet_Key"] = "font-worksheet";
	    // 
	    FormatNodeIdentifier["Format_FontDashTitles_Key"] = "dash-titles";
	    // 
	    FormatNodeIdentifier["Format_FontStoryTitles_Key"] = "story-titles";
	    // 
	    FormatNodeIdentifier["Format_FontTitlesControls_Key"] = "titles-controls";
	    // 
	    FormatNodeIdentifier["Format_FontTooltipControls_Key"] = "tooltip-controls";
	    // 
	    FormatNodeIdentifier["Format_FontWorksheetControls_Key"] = "worksheet-controls";
	    // 
	    FormatNodeIdentifier["Format_LineMore_Key"] = "line-more";
	    // 
	    FormatNodeIdentifier["Format_LineGrid_Key"] = "line-grid";
	    // 
	    FormatNodeIdentifier["Format_LineGridTabs_Key"] = "line-grid-tabs";
	    // 
	    FormatNodeIdentifier["Format_LineZero_Key"] = "line-zero";
	    // 
	    FormatNodeIdentifier["Format_LineZeroTabs_Key"] = "line-zero-tabs";
	    // 
	    FormatNodeIdentifier["Format_LineAxisTick_Key"] = "line-axis-tick";
	    // 
	    FormatNodeIdentifier["Format_LineAxisTickTabs_Key"] = "line-axis-tick-tabs";
	    // 
	    FormatNodeIdentifier["Format_LineAxisRuler_Key"] = "line-axis-ruler";
	    // 
	    FormatNodeIdentifier["Format_LineAxisRulerTabs_Key"] = "line-axis-ruler-tabs";
	    // 
	    FormatNodeIdentifier["Format_LineHeaderDivider_Key"] = "line-header-divider";
	    // 
	    FormatNodeIdentifier["Format_LineHeaderDividerTabs_Key"] = "line-header-divider-tabs";
	    // 
	    FormatNodeIdentifier["Format_LinePaneDivider_Key"] = "line-paneDivider";
	    // 
	    FormatNodeIdentifier["Format_LinePaneDividerTabs_Key"] = "line-paneDivider-tabs";
	    // 
	    FormatNodeIdentifier["Format_LineGridAll_Key"] = "line-grid-all";
	    // 
	    FormatNodeIdentifier["Format_LineGridRow_Key"] = "line-grid-row";
	    // 
	    FormatNodeIdentifier["Format_LineGridColumn_Key"] = "line-grid-column";
	    // 
	    FormatNodeIdentifier["Format_LineZeroAll_Key"] = "line-zero-all";
	    // 
	    FormatNodeIdentifier["Format_LineZeroRow_Key"] = "line-zero-row";
	    // 
	    FormatNodeIdentifier["Format_LineZeroColumn_Key"] = "line-zero-column";
	    // 
	    FormatNodeIdentifier["Format_LineAxisTickAll_Key"] = "line-axis-tick-all";
	    // 
	    FormatNodeIdentifier["Format_LineAxisTickRow_Key"] = "line-axis-tick-row";
	    // 
	    FormatNodeIdentifier["Format_LineAxisTickColumn_Key"] = "line-axis-tick-column";
	    // 
	    FormatNodeIdentifier["Format_LineAxisRulerAll_Key"] = "line-axis-ruler-all";
	    // 
	    FormatNodeIdentifier["Format_LineAxisRulerRow_Key"] = "line-axis-ruler-row";
	    // 
	    FormatNodeIdentifier["Format_LineAxisRulerColumn_Key"] = "line-axis-ruler-column";
	    // 
	    FormatNodeIdentifier["Format_LineReference_Key"] = "line-reference";
	    // 
	    FormatNodeIdentifier["Format_LineDrop_Key"] = "line-drop";
	    // 
	    FormatNodeIdentifier["Format_LineTrend_Key"] = "line-trend";
	    // 
	    FormatNodeIdentifier["Format_LineVisibility_Key"] = "line-visibility";
	    // 
	    FormatNodeIdentifier["Format_LinePattern_Key"] = "line-pattern";
	    // 
	    FormatNodeIdentifier["Format_LineWidth_Key"] = "line-width";
	    // 
	    FormatNodeIdentifier["Format_LineColor_Key"] = "line-color";
	    // 
	    FormatNodeIdentifier["Format_TickColor_Key"] = "tick-color";
	    // 
	    FormatNodeIdentifier["Format_BorderPattern_Key"] = "border-pattern";
	    // 
	    FormatNodeIdentifier["Format_BorderColor_Key"] = "border-color";
	    // 
	    FormatNodeIdentifier["Format_DividerColor_Key"] = "divider-color";
	    // 
	    FormatNodeIdentifier["Format_FontFamily_Key"] = "font-family-key";
	    // 
	    FormatNodeIdentifier["Format_FontSize_Key"] = "font-size-key";
	    // 
	    FormatNodeIdentifier["Format_Bold_Key"] = "bold-key";
	    // 
	    FormatNodeIdentifier["Format_Italics_Key"] = "italics-key";
	    // 
	    FormatNodeIdentifier["Format_Underline_Key"] = "underline-key";
	    // 
	    FormatNodeIdentifier["Format_FontColor_Key"] = "font-color-key";
	    // 
	    FormatNodeIdentifier["Format_Number_Container_Key"] = "number-container";
	    // 
	    FormatNodeIdentifier["Format_Number_Type_Key"] = "number-container-type";
	    // 
	    FormatNodeIdentifier["Format_Number_Units_Key"] = "number-container-units";
	    // 
	    FormatNodeIdentifier["Format_Number_Decimal_Key"] = "number-container-decimal";
	    // 
	    FormatNodeIdentifier["Format_Number_Thousands_Separator_Key"] = "number-container-thousands-separator";
	    // 
	    FormatNodeIdentifier["Format_FontPickerMinimal_Key"] = "font-picker-minimal";
	    // 
	    FormatNodeIdentifier["Format_FontPickerDefault_Key"] = "font-picker-default";
	    // 
	    FormatNodeIdentifier["Format_LinePickerDefault_Key"] = "line-picker-default";
	    // 
	    FormatNodeIdentifier["Format_LinePickerNoVis_Key"] = "line-picker-no-visibility";
	    // 
	    FormatNodeIdentifier["Format_LineAxisTickPicker_Key"] = "line-axis-tick-picker";
	})(FormatNodeIdentifier = exports.FormatNodeIdentifier || (exports.FormatNodeIdentifier = {}));
	// represents the color swatch that will be used in the ColorControlPresModel
	var ColorSwatchType;
	(function (ColorSwatchType) {
	    // 
	    ColorSwatchType["CST_Dark"] = "dark-swatch";
	    // 
	    ColorSwatchType["CST_Light"] = "light-swatch";
	})(ColorSwatchType = exports.ColorSwatchType || (exports.ColorSwatchType = {}));
	// represents the type of a style picker, affecting the preview rendering and, possibly, the layout
	var PickerType;
	(function (PickerType) {
	    // 
	    PickerType["PT_None"] = "none";
	    // 
	    PickerType["PT_Font"] = "font";
	    // 
	    PickerType["PT_Line"] = "line";
	    // 
	    PickerType["PT_Number"] = "number";
	})(PickerType = exports.PickerType || (exports.PickerType = {}));
	// 
	var UpdateScope;
	(function (UpdateScope) {
	    // 
	    UpdateScope["US_Worksheet"] = "worksheet";
	    // 
	    UpdateScope["US_Dashboard"] = "dashboard";
	    // 
	    UpdateScope["US_QuickFilters"] = "quick-filters";
	    // 
	    UpdateScope["US_Story"] = "story";
	})(UpdateScope = exports.UpdateScope || (exports.UpdateScope = {}));
	// 
	var ParameterCtrlTypesDisplayMode;
	(function (ParameterCtrlTypesDisplayMode) {
	    // 
	    ParameterCtrlTypesDisplayMode["MODE_TYPE_IN"] = "type_in";
	    // 
	    ParameterCtrlTypesDisplayMode["MODE_COMPACT_LIST"] = "compact";
	    // 
	    ParameterCtrlTypesDisplayMode["MODE_LIST"] = "list";
	    // 
	    ParameterCtrlTypesDisplayMode["MODE_SLIDER"] = "slider";
	    // 
	    ParameterCtrlTypesDisplayMode["MODE_DATETIME"] = "datetime";
	})(ParameterCtrlTypesDisplayMode = exports.ParameterCtrlTypesDisplayMode || (exports.ParameterCtrlTypesDisplayMode = {}));
	// flags for display options
	var ParameterCtrlTypesDisplayFlag;
	(function (ParameterCtrlTypesDisplayFlag) {
	    // 
	    ParameterCtrlTypesDisplayFlag["DISPLAY_CUSTOM_TITLE"] = "custom_title";
	    // 
	    ParameterCtrlTypesDisplayFlag["DISPLAY_HIDE_SLIDER_SLIDER"] = "hide_slider_slider";
	    // 
	    ParameterCtrlTypesDisplayFlag["DISPLAY_HIDE_SLIDER_READOUT"] = "hide_slider_readout";
	    // 
	    ParameterCtrlTypesDisplayFlag["DISPLAY_HIDE_SLIDER_BUTTONS"] = "hide_slider_buttons";
	})(ParameterCtrlTypesDisplayFlag = exports.ParameterCtrlTypesDisplayFlag || (exports.ParameterCtrlTypesDisplayFlag = {}));
	// The follow supports 1024 custom palettes, each with 4m shapes. Encoding is palette &lt;&lt; PaletteShift | shape.
	var ShapeEncodeConstants;
	(function (ShapeEncodeConstants) {
	    // Shift value for palette
	    ShapeEncodeConstants["EncodePaletteShift"] = "paletteShift";
	    // Mask for getting palette from encoded value. (Then shift down)
	    ShapeEncodeConstants["EncodePaletteMask"] = "paletteMask";
	    // Mask for getting shape from encoded value
	    ShapeEncodeConstants["EncodeShapeMask"] = "shapeMask";
	})(ShapeEncodeConstants = exports.ShapeEncodeConstants || (exports.ShapeEncodeConstants = {}));
	// 
	var ShapeType;
	(function (ShapeType) {
	    // 
	    ShapeType["ShapeCircle"] = "circle";
	    // 
	    ShapeType["ShapeSquare"] = "square";
	    // 
	    ShapeType["ShapePlus"] = "plus";
	    // 
	    ShapeType["ShapeTimes"] = "times";
	    // 
	    ShapeType["ShapeAsterisk"] = "asterisk";
	    // 
	    ShapeType["ShapeDiamond"] = "diamond";
	    // 
	    ShapeType["ShapeTriangle"] = "triangle";
	    // 
	    ShapeType["ShapeDownTriangle"] = "down-triangle";
	    // 
	    ShapeType["ShapeLeftTriangle"] = "left-triangle";
	    // 
	    ShapeType["ShapeRightTriangle"] = "right-triangle";
	    // 
	    ShapeType["MaxAllShapes"] = "invalid";
	})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));
	// 
	var ShapePalette;
	(function (ShapePalette) {
	    // built-in palette
	    ShapePalette["ShapePaletteFilled"] = "filled";
	    // custom palettes
	    ShapePalette["ShapePaletteCustom1"] = "custom1";
	    // 
	    ShapePalette["ShapePaletteCustom2"] = "custom2";
	    // 
	    ShapePalette["ShapePaletteCustom3"] = "custom3";
	    // 
	    ShapePalette["ShapePaletteCustom4"] = "custom4";
	    // 
	    ShapePalette["ShapePaletteCustom5"] = "custom5";
	    // 
	    ShapePalette["ShapePaletteCustom6"] = "custom6";
	    // 
	    ShapePalette["ShapePaletteCustom7"] = "custom7";
	    // 
	    ShapePalette["ShapePaletteCustom8"] = "custom8";
	    // 
	    ShapePalette["ShapePaletteCustom9"] = "custom9";
	    // 
	    ShapePalette["ShapePaletteCustom10"] = "custom10";
	    // 
	    ShapePalette["ShapePaletteCustom11"] = "custom11";
	    // and so on...
	    ShapePalette["ShapePaletteCustom12"] = "custom12";
	    // 
	    ShapePalette["ShapePaletteHidden"] = "hidden";
	})(ShapePalette = exports.ShapePalette || (exports.ShapePalette = {}));
	// ShapeType and palette mapped into a single value. This enum depends on ShapeType and the implementation of ShapeManager::IntEncode.
	var ShapeID;
	(function (ShapeID) {
	    // 
	    ShapeID["ShapeIDCircle"] = "shapeIDCircle";
	    // 
	    ShapeID["ShapeIDSquare"] = "shapeIDSquare";
	    // 
	    ShapeID["ShapeIDPlus"] = "shapeIDPlus";
	    // 
	    ShapeID["ShapeIDTimes"] = "shapeIDTimes";
	    // 
	    ShapeID["ShapeIDAsterisk"] = "shapeIDAsterisk";
	    // 
	    ShapeID["ShapeIDDiamond"] = "shapeIDDiamond";
	    // 
	    ShapeID["ShapeIDTriangle"] = "shapeIDTriangle";
	    // 
	    ShapeID["ShapeIDDownTriangle"] = "shapeIDDownTriangle";
	    // 
	    ShapeID["ShapeIDLeftTriangle"] = "shapeIDLeftTriangle";
	    // 
	    ShapeID["ShapeIDRightTriangle"] = "shapeIDRightTriangle";
	    // 
	    ShapeID["ShapeIDFilledCircle"] = "shapeIDFilledCircle";
	    // 
	    ShapeID["ShapeIDFilledSquare"] = "shapeIDFilledSquare";
	    // 
	    ShapeID["ShapeIDFilledPlus"] = "shapeIDFilledPlus";
	    // 
	    ShapeID["ShapeIDFilledTimes"] = "shapeIDFilledTimes";
	    // 
	    ShapeID["ShapeIDFilledStar"] = "shapeIDFilledStar";
	    // 
	    ShapeID["ShapeIDFilledDiamond"] = "shapeIDFilledDiamond";
	    // 
	    ShapeID["ShapeIDFilledTriangle"] = "shapeIDFilledTriangle";
	    // 
	    ShapeID["ShapeIDFilledDownTriangle"] = "shapeIDFilledDownTriangle";
	    // 
	    ShapeID["ShapeIDFilledLeftTriangle"] = "shapeIDFilledLeftTriangle";
	    // 
	    ShapeID["ShapeIDFilledRightTriangle"] = "shapeIDFilledRightTriangle";
	    // 0+(ShapePaletteHidden<<EncodePaletteShift)
	    ShapeID["ShapeIDUnscaledFilledCircle"] = "shapeIDUnscaledFilledCircle";
	})(ShapeID = exports.ShapeID || (exports.ShapeID = {}));
	// 
	var LegendTypeEnum;
	(function (LegendTypeEnum) {
	    // 
	    LegendTypeEnum["Color"] = "color";
	    // 
	    LegendTypeEnum["Shape"] = "shape";
	    // 
	    LegendTypeEnum["Size"] = "size";
	    // 
	    LegendTypeEnum["HighlightLegend"] = "highlight";
	    // 
	    LegendTypeEnum["Map"] = "map";
	})(LegendTypeEnum = exports.LegendTypeEnum || (exports.LegendTypeEnum = {}));
	// 
	var BrushSpecialFields;
	(function (BrushSpecialFields) {
	    // 
	    BrushSpecialFields["BSF_Invalid"] = "invalid";
	    // 
	    BrushSpecialFields["BSF_AllFields"] = "all";
	    // 
	    BrushSpecialFields["BSF_DatesAndTimes"] = "date-time";
	    // 
	    BrushSpecialFields["BSF_Trails"] = "trails";
	    // 
	    BrushSpecialFields["BSF_EntireTable"] = "table";
	})(BrushSpecialFields = exports.BrushSpecialFields || (exports.BrushSpecialFields = {}));
	// what kind of curve will be fit to the data given response variable Y and a single quantitative factor X
	var TrendLineFitType;
	(function (TrendLineFitType) {
	    // equation = Y ~ X + 1
	    TrendLineFitType["TrendLineFitType__LinearFit"] = "linear";
	    // equation = Y ~ X^2 + X + 1
	    TrendLineFitType["TrendLineFitType__PolynomialFit"] = "polynomial";
	    // equation = Y ~ log(X)
	    TrendLineFitType["TrendLineFitType__LogFit"] = "log";
	    // equation = Y ~ exp(X)
	    TrendLineFitType["TrendLineFitType__ExpFit"] = "exp";
	    // equation = Y ~ X^b
	    TrendLineFitType["TrendLineFitType__PowerFit"] = "power";
	})(TrendLineFitType = exports.TrendLineFitType || (exports.TrendLineFitType = {}));
	// type for components of a command presentation model
	var CommandsEnumItemType;
	(function (CommandsEnumItemType) {
	    // item with text and an associated command
	    CommandsEnumItemType["Item"] = "item";
	    // dynamic range of items generated by an associated command
	    CommandsEnumItemType["ItemRange"] = "range";
	    // list of subcommands
	    CommandsEnumItemType["SubCommandsItem"] = "subcommands";
	    // logical separation between groups of commands
	    CommandsEnumItemType["SeparatorItem"] = "separator";
	})(CommandsEnumItemType = exports.CommandsEnumItemType || (exports.CommandsEnumItemType = {}));
	// 
	var ParameterTypesDomainType;
	(function (ParameterTypesDomainType) {
	    // 
	    ParameterTypesDomainType["Domain_Any"] = "any";
	    // 
	    ParameterTypesDomainType["Domain_List"] = "list";
	    // 
	    ParameterTypesDomainType["Domain_Range"] = "range";
	})(ParameterTypesDomainType = exports.ParameterTypesDomainType || (exports.ParameterTypesDomainType = {}));
	// Categorical filter type usage.
	var FiltersCategoricalFilterType;
	(function (FiltersCategoricalFilterType) {
	    // 
	    FiltersCategoricalFilterType["Visual"] = "visual";
	    // 
	    FiltersCategoricalFilterType["Extract"] = "extract";
	    // 
	    FiltersCategoricalFilterType["Group"] = "group";
	})(FiltersCategoricalFilterType = exports.FiltersCategoricalFilterType || (exports.FiltersCategoricalFilterType = {}));
	// Quantitative filter type usage.
	var FiltersQuantitativeFilterType;
	(function (FiltersQuantitativeFilterType) {
	    // 
	    FiltersQuantitativeFilterType["Visual"] = "visual";
	    // 
	    FiltersQuantitativeFilterType["DataSource"] = "datasource";
	    // 
	    FiltersQuantitativeFilterType["Extract"] = "extract";
	})(FiltersQuantitativeFilterType = exports.FiltersQuantitativeFilterType || (exports.FiltersQuantitativeFilterType = {}));
	// Filter context domains
	var FiltersDomainType;
	(function (FiltersDomainType) {
	    // 
	    FiltersDomainType["Relevant"] = "relevant";
	    // 
	    FiltersDomainType["Cascading"] = "cascading";
	    // 
	    FiltersDomainType["CascadingContext"] = "cascading-context";
	    // 
	    FiltersDomainType["Context"] = "context";
	    // 
	    FiltersDomainType["Database"] = "all";
	})(FiltersDomainType = exports.FiltersDomainType || (exports.FiltersDomainType = {}));
	// Selection (relational only) - Range type
	var FiltersRangeType;
	(function (FiltersRangeType) {
	    // 
	    FiltersRangeType["All"] = "all";
	    // 
	    FiltersRangeType["Selected"] = "selected";
	    // 
	    FiltersRangeType["Manual"] = "manual";
	})(FiltersRangeType = exports.FiltersRangeType || (exports.FiltersRangeType = {}));
	// Pattern based filtering
	var FiltersPatternType;
	(function (FiltersPatternType) {
	    // starts with the specified pattern text
	    FiltersPatternType["StartsWith"] = "starts-with";
	    // ends with the specified pattern text
	    FiltersPatternType["EndsWith"] = "ends-with";
	    // contains the specified pattern text
	    FiltersPatternType["Contains"] = "contains";
	    // exactly matches the specified pattern text
	    FiltersPatternType["ExactMatch"] = "exact-match";
	})(FiltersPatternType = exports.FiltersPatternType || (exports.FiltersPatternType = {}));
	// 
	var FiltersLimitType;
	(function (FiltersLimitType) {
	    // 
	    FiltersLimitType["None"] = "none";
	    // 
	    FiltersLimitType["ByField"] = "by-field";
	    // 
	    FiltersLimitType["Formula"] = "formula";
	})(FiltersLimitType = exports.FiltersLimitType || (exports.FiltersLimitType = {}));
	// 
	var FiltersConditionType;
	(function (FiltersConditionType) {
	    // 
	    FiltersConditionType["None"] = "none";
	    // 
	    FiltersConditionType["ByField"] = "by-field";
	    // 
	    FiltersConditionType["Formula"] = "formula";
	})(FiltersConditionType = exports.FiltersConditionType || (exports.FiltersConditionType = {}));
	// Higher level intepretation of a relative date filter's range
	var FiltersRelativeDateRangeType;
	(function (FiltersRelativeDateRangeType) {
	    // 
	    FiltersRelativeDateRangeType["RangeCurrent"] = "curr";
	    // 
	    FiltersRelativeDateRangeType["RangeCurrentToDate"] = "todate";
	    // 
	    FiltersRelativeDateRangeType["RangeLast1"] = "last";
	    // 
	    FiltersRelativeDateRangeType["RangeNext1"] = "next";
	    // 
	    FiltersRelativeDateRangeType["RangeLastN"] = "lastn";
	    // 
	    FiltersRelativeDateRangeType["RangeNextN"] = "nextn";
	    // 
	    FiltersRelativeDateRangeType["RangeOther1"] = "other";
	    // 
	    FiltersRelativeDateRangeType["RangeOtherN"] = "othern";
	    // 
	    FiltersRelativeDateRangeType["RangeInvalid"] = "invalid";
	})(FiltersRelativeDateRangeType = exports.FiltersRelativeDateRangeType || (exports.FiltersRelativeDateRangeType = {}));
	// 
	var FiltersFilterMode;
	(function (FiltersFilterMode) {
	    // 
	    FiltersFilterMode["Local"] = "local";
	    // 
	    FiltersFilterMode["Global"] = "global";
	    // 
	    FiltersFilterMode["Shared"] = "shared";
	    // 
	    FiltersFilterMode["MappedGlobal"] = "mapped-global";
	})(FiltersFilterMode = exports.FiltersFilterMode || (exports.FiltersFilterMode = {}));
	// How uncommitted selection state is being tracked
	var FiltersSelectionTracking;
	(function (FiltersSelectionTracking) {
	    // Passed members have been updated: each included members' selection state should be flipped from its initial state.
	    FiltersSelectionTracking["DifferencesFromBase"] = "differences";
	    // Passed members should be unconditionally selected
	    FiltersSelectionTracking["SelectedValues"] = "selected";
	    // Don't save any selection state. This saves memory at the cost of not being recoverable if the controller is gone.
	    FiltersSelectionTracking["None"] = "dont-track-selection-state";
	})(FiltersSelectionTracking = exports.FiltersSelectionTracking || (exports.FiltersSelectionTracking = {}));
	// filter update options
	var FilterUpdateType;
	(function (FilterUpdateType) {
	    // select all values in filter
	    FilterUpdateType["ALL"] = "filter-all";
	    // add items to existing filter
	    FilterUpdateType["ADD"] = "filter-add";
	    // remove items from existing filter
	    FilterUpdateType["REMOVE"] = "filter-remove";
	    // replace existing filter with given options
	    FilterUpdateType["REPLACE"] = "filter-replace";
	    // mixture of add + removal
	    FilterUpdateType["DELTA"] = "filter-delta";
	    // clear the filter
	    FilterUpdateType["CLEAR"] = "filter-clear";
	    // each value in the filter, but individually selected
	    FilterUpdateType["EACH"] = "filter-each";
	})(FilterUpdateType = exports.FilterUpdateType || (exports.FilterUpdateType = {}));
	// additional context needed to perform a filter update correctly
	var FilterUpdateQualifierType;
	(function (FilterUpdateQualifierType) {
	    // the filter's domain is a manually typed in or selected subset of the full domain
	    FilterUpdateQualifierType["CUSTOM_DOMAIN"] = "filter-update-custom-domain";
	    // no qualifications to the filter-update are specified
	    FilterUpdateQualifierType["NO_QUALIFICATIONS"] = "filter-update-no-qual";
	})(FilterUpdateQualifierType = exports.FilterUpdateQualifierType || (exports.FilterUpdateQualifierType = {}));
	// 
	var FiltersPresetType;
	(function (FiltersPresetType) {
	    // keep the selection chosen by the user
	    FiltersPresetType["None"] = "none";
	    // update to the latest values in the database
	    FiltersPresetType["LastValues"] = "last-values";
	    // 
	    FiltersPresetType["CurrentValues"] = "current-values";
	})(FiltersPresetType = exports.FiltersPresetType || (exports.FiltersPresetType = {}));
	// Note: an empty range (both endpoints NULL) is defined to mean 'all non-NULL values', by symmetry with what a single-ended range means, so an empty range and InRange really means NonNull, and an empty range and nRangeOrNull really means All
	var FiltersQuantitativeIncludedValues;
	(function (FiltersQuantitativeIncludedValues) {
	    // the identity filter (everything is included)
	    FiltersQuantitativeIncludedValues["All"] = "include-all";
	    // all values which are non-nullptr
	    FiltersQuantitativeIncludedValues["NonNull"] = "include-non-null";
	    // all values which are nullptr
	    FiltersQuantitativeIncludedValues["Null"] = "include-null";
	    // only values within the range and which are non null
	    FiltersQuantitativeIncludedValues["InRange"] = "include-range";
	    // values within the range or which are nullptr
	    FiltersQuantitativeIncludedValues["InRangeOrNull"] = "include-range-or-null";
	    // all values are filtered out. User cannot create this type of filter directly; is only created when two filters intersect and their includedValues conflict so they will include nothing (e.g., NonNull with Null)
	    FiltersQuantitativeIncludedValues["None"] = "include-none";
	})(FiltersQuantitativeIncludedValues = exports.FiltersQuantitativeIncludedValues || (exports.FiltersQuantitativeIncludedValues = {}));
	// Fiscal Year Starting Month
	var FYSValues;
	(function (FYSValues) {
	    // 
	    FYSValues["FYSValues__FYS_JANUARY"] = "fys-january";
	    // 
	    FYSValues["FYSValues__FYS_FEBRUARY"] = "fys-february";
	    // 
	    FYSValues["FYSValues__FYS_MARCH"] = "fys-march";
	    // 
	    FYSValues["FYSValues__FYS_APRIL"] = "fys-april";
	    // 
	    FYSValues["FYSValues__FYS_MAY"] = "fys-may";
	    // 
	    FYSValues["FYSValues__FYS_JUNE"] = "fys-june";
	    // 
	    FYSValues["FYSValues__FYS_JULY"] = "fys-july";
	    // 
	    FYSValues["FYSValues__FYS_AUGUST"] = "fys-august";
	    // 
	    FYSValues["FYSValues__FYS_SEPTEMBER"] = "fys-september";
	    // 
	    FYSValues["FYSValues__FYS_OCTOBER"] = "fys-october";
	    // 
	    FYSValues["FYSValues__FYS_NOVEMBER"] = "fys-november";
	    // 
	    FYSValues["FYSValues__FYS_DECEMBER"] = "fys-december";
	})(FYSValues = exports.FYSValues || (exports.FYSValues = {}));
	// 
	var PageNavFlagsFlags;
	(function (PageNavFlagsFlags) {
	    // 
	    PageNavFlagsFlags["None"] = "none";
	    // 
	    PageNavFlagsFlags["LoopedPlayback"] = "looped-playback";
	    // 
	    PageNavFlagsFlags["ShowDropdown"] = "show-dropdown";
	    // 
	    PageNavFlagsFlags["ShowSlider"] = "show-slider";
	    // 
	    PageNavFlagsFlags["ShowPlayCtrls"] = "show-play-controls";
	    // 
	    PageNavFlagsFlags["ShowTrailCtrls"] = "show-trail-controls";
	    // 
	    PageNavFlagsFlags["Synchronized"] = "synchronized";
	})(PageNavFlagsFlags = exports.PageNavFlagsFlags || (exports.PageNavFlagsFlags = {}));
	// 
	var PageTrailEnumsMarksToTrail;
	(function (PageTrailEnumsMarksToTrail) {
	    // 
	    PageTrailEnumsMarksToTrail["Manual"] = "manual";
	    // 
	    PageTrailEnumsMarksToTrail["All"] = "all";
	    // 
	    PageTrailEnumsMarksToTrail["Selected"] = "selected";
	    // 
	    PageTrailEnumsMarksToTrail["Highlighted"] = "highlighted";
	})(PageTrailEnumsMarksToTrail = exports.PageTrailEnumsMarksToTrail || (exports.PageTrailEnumsMarksToTrail = {}));
	// 
	var PageTrailEnumsTrailType;
	(function (PageTrailEnumsTrailType) {
	    // 
	    PageTrailEnumsTrailType["Marks"] = "marks";
	    // 
	    PageTrailEnumsTrailType["Trails"] = "trails";
	    // 
	    PageTrailEnumsTrailType["Both"] = "both";
	})(PageTrailEnumsTrailType = exports.PageTrailEnumsTrailType || (exports.PageTrailEnumsTrailType = {}));
	// 
	var PageTrailEnumsTrailEffect;
	(function (PageTrailEnumsTrailEffect) {
	    // 
	    PageTrailEnumsTrailEffect["None"] = "none";
	    // 
	    PageTrailEnumsTrailEffect["Transparency"] = "transparency";
	})(PageTrailEnumsTrailEffect = exports.PageTrailEnumsTrailEffect || (exports.PageTrailEnumsTrailEffect = {}));
	// 
	var PageTrailEnumsTrailFlags;
	(function (PageTrailEnumsTrailFlags) {
	    // 
	    PageTrailEnumsTrailFlags["NoFlags"] = "no-flags";
	    // 
	    PageTrailEnumsTrailFlags["DrawIfHighlighted"] = "draw-if-highlighted";
	    // 
	    PageTrailEnumsTrailFlags["DrawIfSelected"] = "draw-if-selected";
	    // 
	    PageTrailEnumsTrailFlags["DrawAlways"] = "draw-always";
	    // 
	    PageTrailEnumsTrailFlags["LinesEnabled"] = "lines-enabled";
	})(PageTrailEnumsTrailFlags = exports.PageTrailEnumsTrailFlags || (exports.PageTrailEnumsTrailFlags = {}));
	// simple page change commands
	var ChangePageChangeType;
	(function (ChangePageChangeType) {
	    // 
	    ChangePageChangeType["ToFirst"] = "first";
	    // 
	    ChangePageChangeType["ToNext"] = "next";
	    // 
	    ChangePageChangeType["ToPrev"] = "previous";
	    // 
	    ChangePageChangeType["ToLast"] = "last";
	})(ChangePageChangeType = exports.ChangePageChangeType || (exports.ChangePageChangeType = {}));
	// Stop, start in a direction, or set speed of page animation
	var ChangePagePageAnimationControl;
	(function (ChangePagePageAnimationControl) {
	    // 
	    ChangePagePageAnimationControl["Stop"] = "stop";
	    // 
	    ChangePagePageAnimationControl["Forward"] = "forward";
	    // 
	    ChangePagePageAnimationControl["Backward"] = "backward";
	    // 
	    ChangePagePageAnimationControl["SlowSpeed"] = "slow-speed";
	    // 
	    ChangePagePageAnimationControl["NormalSpeed"] = "normal-speed";
	    // 
	    ChangePagePageAnimationControl["FastSpeed"] = "fast-speed";
	    // 
	    ChangePagePageAnimationControl["ToggleForward"] = "toggle-forward";
	    // 
	    ChangePagePageAnimationControl["ToggleBackward"] = "toggle-backward";
	})(ChangePagePageAnimationControl = exports.ChangePagePageAnimationControl || (exports.ChangePagePageAnimationControl = {}));
	// 
	var LegendItemLayout;
	(function (LegendItemLayout) {
	    // 
	    LegendItemLayout["LegendItemLayout__LegendItemLayoutVert"] = "vertical";
	    // 
	    LegendItemLayout["LegendItemLayout__LegendItemLayoutHorz"] = "horizontal";
	    // 
	    LegendItemLayout["LegendItemLayout__LegendItemLayoutGrid"] = "grid";
	    // 
	    LegendItemLayout["LegendItemLayout__LegendItemLayoutAuto"] = "auto";
	})(LegendItemLayout = exports.LegendItemLayout || (exports.LegendItemLayout = {}));
	// 
	var LegendItemOrder;
	(function (LegendItemOrder) {
	    // 
	    LegendItemOrder["LegendItemOrder__LegendItemOrderNormal"] = "normal";
	    // 
	    LegendItemOrder["LegendItemOrder__LegendItemOrderReversed"] = "reversed";
	    // 
	    LegendItemOrder["LegendItemOrder__LegendItemOrderAuto"] = "auto";
	})(LegendItemOrder = exports.LegendItemOrder || (exports.LegendItemOrder = {}));
	// 
	var SizeMode;
	(function (SizeMode) {
	    // 
	    SizeMode["SizeModeAuto"] = "size-mode-auto";
	    // 
	    SizeMode["SizeModeFixed"] = "size-mode-fixed";
	    // 
	    SizeMode["SizeModeMin"] = "size-mode-min";
	    // 
	    SizeMode["SizeModeMax"] = "size-mode-max";
	    // 
	    SizeMode["SizeModeRange"] = "size-mode-range";
	    // 
	    SizeMode["SizeModeFitWidth"] = "size-mode-fit-width";
	    // 
	    SizeMode["SizeModeFitHeight"] = "size-mode-height";
	    // 
	    SizeMode["SizeModeScrollHeight"] = "size-mode-scroll-height";
	})(SizeMode = exports.SizeMode || (exports.SizeMode = {}));
	// 
	var ShowMeCommandType;
	(function (ShowMeCommandType) {
	    // 
	    ShowMeCommandType["SHOWME_TEXT"] = "text";
	    // 
	    ShowMeCommandType["SHOWME_HEAT"] = "heat";
	    // 
	    ShowMeCommandType["SHOWME_SPOTTABLE"] = "spot-table";
	    // 
	    ShowMeCommandType["SHOWME_BARHORIZ"] = "bar-horiz";
	    // 
	    ShowMeCommandType["SHOWME_BARSTACK"] = "bar-stack";
	    // 
	    ShowMeCommandType["SHOWME_BARSIDE"] = "bar-side";
	    // 
	    ShowMeCommandType["SHOWME_BARMEASURE"] = "bar-measure";
	    // 
	    ShowMeCommandType["SHOWME_OLINE"] = "o-line";
	    // 
	    ShowMeCommandType["SHOWME_QILINE"] = "qi-line";
	    // 
	    ShowMeCommandType["SHOWME_OAREA"] = "o-area";
	    // 
	    ShowMeCommandType["SHOWME_QIAREA"] = "qi-area";
	    // 
	    ShowMeCommandType["SHOWME_CIRCLE"] = "circle";
	    // 
	    ShowMeCommandType["SHOWME_CIRCLESIDE"] = "circle-side";
	    // 
	    ShowMeCommandType["SHOWME_GANTT"] = "gantt";
	    // 
	    ShowMeCommandType["SHOWME_SCATTER"] = "scatter";
	    // 
	    ShowMeCommandType["SHOWME_SCATTERMATRIX"] = "scatter-matrix";
	    // 
	    ShowMeCommandType["SHOWME_HISTOGRAM"] = "histogram";
	    // 
	    ShowMeCommandType["SHOWME_MAPS"] = "maps";
	    // 
	    ShowMeCommandType["SHOWME_FILLEDMAPS"] = "filled-maps";
	    // 
	    ShowMeCommandType["SHOWME_PIES"] = "pies";
	    // 
	    ShowMeCommandType["SHOWME_DUALBARLINE"] = "dual-bar-line";
	    // 
	    ShowMeCommandType["SHOWME_DUALLINE"] = "dual-line";
	    // 
	    ShowMeCommandType["SHOWME_BULLET"] = "bullet";
	    // 
	    ShowMeCommandType["SHOWME_TREEMAP"] = "treemap";
	    // 
	    ShowMeCommandType["SHOWME_BUBBLE"] = "bubble";
	    // 
	    ShowMeCommandType["SHOWME_BOXPLOT"] = "box-plot";
	})(ShowMeCommandType = exports.ShowMeCommandType || (exports.ShowMeCommandType = {}));
	// icon to display for an item on a shelf
	var ShelfIconType;
	(function (ShelfIconType) {
	    // not set
	    ShelfIconType["SIT_None"] = "none";
	    // incompatible field
	    ShelfIconType["SIT_IncompatibleField"] = "incompatible-field";
	    // remote
	    ShelfIconType["SIT_Remote"] = "remote";
	    // group
	    ShelfIconType["SIT_Group"] = "group";
	    // table calc
	    ShelfIconType["SIT_TableCalc"] = "table-calc";
	    // item comes from a secondary datasource
	    ShelfIconType["SIT_SecondaryDatasource"] = "secondary-datasource";
	    // table calc from a secondary datasource
	    ShelfIconType["SIT_TableCalcSecondary"] = "table-calc-secondary";
	    // forecast
	    ShelfIconType["SIT_Forecast"] = "forecast";
	    // ascending sort
	    ShelfIconType["SIT_SortAsc"] = "sort-asc";
	    // descending sort
	    ShelfIconType["SIT_SortDesc"] = "sort-desc";
	    // alphabetic ascending sort
	    ShelfIconType["SIT_SortAlphabeticAsc"] = "sort-alphabetic-asc";
	    // alphabetic descending sort
	    ShelfIconType["SIT_SortAlphabeticDesc"] = "sort-alphabetic-desc";
	})(ShelfIconType = exports.ShelfIconType || (exports.ShelfIconType = {}));
	// icon to display for an item on the filters shelf
	var FilterIconType;
	(function (FilterIconType) {
	    // a global filter icon
	    FilterIconType["FIT_Global"] = "global-filter";
	    // a shared filter icon
	    FilterIconType["FIT_Shared"] = "shared-filter";
	    // a mapped shared source filter icon
	    FilterIconType["FIT_MappedSharedSource"] = "mapped-shared-source-filter";
	    // a mapped shared target filter icon
	    FilterIconType["FIT_MappedSharedTarget"] = "mapped-shared-target-filter";
	    // a slicing filter icon
	    FilterIconType["FIT_Slice"] = "slice-filter";
	    // a local filter icon
	    FilterIconType["FIT_Local"] = "local-filter";
	    // a mapped global source filter icon
	    FilterIconType["FIT_MappedGlobalSource"] = "mapped-global-source-filter";
	    // a mapped global target filter icon
	    FilterIconType["FIT_MappedGlobalTarget"] = "mapped-global-target-filter";
	    // not a filter
	    FilterIconType["FIT_None"] = "no-filter";
	})(FilterIconType = exports.FilterIconType || (exports.FilterIconType = {}));
	// used to indicate if a field is part of a dual axis
	var ItemDrawStyle;
	(function (ItemDrawStyle) {
	    // not part of a dual axis
	    ItemDrawStyle["ITEM_DRAWSTYLE_NORMAL"] = "normal";
	    // first item on dual axis
	    ItemDrawStyle["ITEM_DRAWSTYLE_OPENED"] = "opened";
	    // second item on dual axis
	    ItemDrawStyle["ITEM_DRAWSTYLE_CLOSED"] = "closed";
	    // middle item in a set of layers
	    ItemDrawStyle["ITEM_DRAWSTYLE_MIDDLE"] = "middle";
	})(ItemDrawStyle = exports.ItemDrawStyle || (exports.ItemDrawStyle = {}));
	// indicates the size of page for a sheet
	var PageSizeOption;
	(function (PageSizeOption) {
	    // 
	    PageSizeOption["PAGESIZE_LETTER"] = "letter";
	    // 
	    PageSizeOption["PAGESIZE_LEGAL"] = "legal";
	    // 
	    PageSizeOption["PAGESIZE_NOTE"] = "note";
	    // 
	    PageSizeOption["PAGESIZE_FOLIO"] = "folio";
	    // 
	    PageSizeOption["PAGESIZE_TABLOID"] = "tabloid";
	    // 
	    PageSizeOption["PAGESIZE_LEDGER"] = "ledger";
	    // 
	    PageSizeOption["PAGESIZE_STATEMENT"] = "statement";
	    // 
	    PageSizeOption["PAGESIZE_EXECUTIVE"] = "executive";
	    // 
	    PageSizeOption["PAGESIZE_A3"] = "a3";
	    // 
	    PageSizeOption["PAGESIZE_A4"] = "a4";
	    // 
	    PageSizeOption["PAGESIZE_A5"] = "a5";
	    // 
	    PageSizeOption["PAGESIZE_B4"] = "b4";
	    // 
	    PageSizeOption["PAGESIZE_B5"] = "b5";
	    // 
	    PageSizeOption["PAGESIZE_QUARTO"] = "quarto";
	    // 
	    PageSizeOption["PAGESIZE_UNSPECIFIED"] = "unspecified";
	})(PageSizeOption = exports.PageSizeOption || (exports.PageSizeOption = {}));
	// Indicates the layout of page for a sheet
	var PageOrientation;
	(function (PageOrientation) {
	    // 
	    PageOrientation["OrientationPrinter"] = "printer";
	    // 
	    PageOrientation["OrientationPortrait"] = "portrait";
	    // 
	    PageOrientation["OrientationLandscape"] = "landscape";
	})(PageOrientation = exports.PageOrientation || (exports.PageOrientation = {}));
	// Indicates the manner of scaling of page for a sheet
	var ScaleMode;
	(function (ScaleMode) {
	    // 
	    ScaleMode["ScaleAuto"] = "auto";
	    // 
	    ScaleMode["ScalePercentage"] = "percent";
	    // 
	    ScaleMode["ScaleFitPages"] = "fit-pages";
	})(ScaleMode = exports.ScaleMode || (exports.ScaleMode = {}));
	// Indicates the default/selectable scaling of page for a sheet
	var PageScalingOption;
	(function (PageScalingOption) {
	    // 
	    PageScalingOption["ScalePctAuto"] = "auto";
	    // 
	    PageScalingOption["ScalePct400"] = "pct400";
	    // 
	    PageScalingOption["ScalePct200"] = "pct200";
	    // 
	    PageScalingOption["ScalePct100"] = "pct100";
	    // 
	    PageScalingOption["ScalePct90"] = "pct90";
	    // 
	    PageScalingOption["ScalePct80"] = "pct80";
	    // 
	    PageScalingOption["ScalePct75"] = "pct75";
	    // 
	    PageScalingOption["ScalePct60"] = "pct60";
	    // 
	    PageScalingOption["ScalePct50"] = "pct50";
	    // 
	    PageScalingOption["ScalePct25"] = "pct25";
	})(PageScalingOption = exports.PageScalingOption || (exports.PageScalingOption = {}));
	// 
	var SheetRange;
	(function (SheetRange) {
	    // 
	    SheetRange["SheetRangeAll"] = "all";
	    // 
	    SheetRange["SheetRangeActive"] = "active";
	    // 
	    SheetRange["SheetRangeSelected"] = "selected";
	})(SheetRange = exports.SheetRange || (exports.SheetRange = {}));
	// sheet type
	var SheetType;
	(function (SheetType) {
	    // 
	    SheetType["TYPE_WORKSHEET"] = "worksheet";
	    // 
	    SheetType["TYPE_DASHBOARD"] = "dashboard";
	    // 
	    SheetType["TYPE_STORY"] = "story";
	})(SheetType = exports.SheetType || (exports.SheetType = {}));
	// a dashboard image metric's type
	var ClientUIMetricType;
	(function (ClientUIMetricType) {
	    // 
	    ClientUIMetricType["UIMT_ScrollbarMetric"] = "scrollbar-metric";
	    // 
	    ClientUIMetricType["UIMT_QFilterFixedMetric"] = "q-filter-fixed-metric";
	    // 
	    ClientUIMetricType["UIMT_QFilterSliderMetric"] = "q-filter-slider-metric";
	    // 
	    ClientUIMetricType["UIMT_QFilterReadoutMetric"] = "q-filter-readout-metric";
	    // 
	    ClientUIMetricType["UIMT_CFilterFixedMetric"] = "c-filter-fixed-metric";
	    // minimum check/radiolist item size
	    ClientUIMetricType["UIMT_CFilterItemMetric"] = "c-filter-item-metric";
	    // 
	    ClientUIMetricType["UIMT_HFilterFixedMetric"] = "h-filter-fixed-metric";
	    // minimum hierarchical item size
	    ClientUIMetricType["UIMT_HFilterItemMetric"] = "h-filter-item-metric";
	    // 
	    ClientUIMetricType["UIMT_CmSliderFilterMetric"] = "cm-slider-filter-metric";
	    // 
	    ClientUIMetricType["UIMT_CmDropdownFilterMetric"] = "cm-dropdown-filter-metric";
	    // 
	    ClientUIMetricType["UIMT_CmPatternFilterMetric"] = "cm-pattern-filter-metric";
	    // 
	    ClientUIMetricType["UIMT_RDateFilterMetric"] = "r-date-filter-metric";
	    // 
	    ClientUIMetricType["UIMT_RDatePFilterMetric"] = "r-date-p-filter-metric";
	    // 
	    ClientUIMetricType["UIMT_ParamTypeInMetric"] = "param-type-in-metric";
	    // 
	    ClientUIMetricType["UIMT_ParamCompactListMetric"] = "param-compact-list-metric";
	    // 
	    ClientUIMetricType["UIMT_ParamListMetric"] = "param-list-metric";
	    // 
	    ClientUIMetricType["UIMT_ParamSliderMetric"] = "param-slider-metric";
	    // 
	    ClientUIMetricType["UIMT_ParamDateTimeMetric"] = "param-date-time-metric";
	    // 
	    ClientUIMetricType["UIMT_CFilterApplyMetric"] = "c-filter-apply-metric";
	    // 
	    ClientUIMetricType["UIMT_CmTypeInSearchMetric"] = "cm-type-in-search-metric";
	    // minimum custom list item size
	    ClientUIMetricType["UIMT_CFilterCustomItemMetric"] = "c-filter-custom-item-metric";
	})(ClientUIMetricType = exports.ClientUIMetricType || (exports.ClientUIMetricType = {}));
	// a region of a viz where sort indicators may appear
	var SortRegionType;
	(function (SortRegionType) {
	    // 
	    SortRegionType["SRT_LABELS_X"] = "xheader";
	    // 
	    SortRegionType["SRT_LABELS_Y"] = "yheader";
	    // 
	    SortRegionType["SRT_LABELS_FIELD"] = "uleft";
	    // 
	    SortRegionType["SRT_AXIS_LEFT"] = "leftaxis";
	    // 
	    SortRegionType["SRT_AXIS_BOTTOM"] = "bottomaxis";
	    // 
	    SortRegionType["SRT_AXIS_RIGHT"] = "rightaxis";
	    // 
	    SortRegionType["SRT_AXIS_TOP"] = "topaxis";
	})(SortRegionType = exports.SortRegionType || (exports.SortRegionType = {}));
	// 
	var QtCursorShape;
	(function (QtCursorShape) {
	    // 
	    QtCursorShape["ArrowCursor"] = "arrow";
	    // 
	    QtCursorShape["UpArrowCursor"] = "up-arrow";
	    // 
	    QtCursorShape["CrossCursor"] = "cross";
	    // 
	    QtCursorShape["WaitCursor"] = "wait";
	    // 
	    QtCursorShape["IBeamCursor"] = "ibeam";
	    // 
	    QtCursorShape["SizeVerCursor"] = "size-ver";
	    // 
	    QtCursorShape["SizeHorCursor"] = "size-hor";
	    // 
	    QtCursorShape["SizeBDiagCursor"] = "size-bdiag";
	    // 
	    QtCursorShape["SizeFDiagCursor"] = "size-fdiag";
	    // 
	    QtCursorShape["SizeAllCursor"] = "size-all";
	    // 
	    QtCursorShape["BlankCursor"] = "blank";
	    // 
	    QtCursorShape["SplitVCursor"] = "split-v";
	    // 
	    QtCursorShape["SplitHCursor"] = "split-h";
	    // 
	    QtCursorShape["PointingHandCursor"] = "pointing-hand";
	    // 
	    QtCursorShape["ForbiddenCursor"] = "forbidden";
	    // 
	    QtCursorShape["WhatsThisCursor"] = "whats-this";
	    // 
	    QtCursorShape["BusyCursor"] = "busy";
	    // 
	    QtCursorShape["OpenHandCursor"] = "open-hand";
	    // 
	    QtCursorShape["ClosedHandCursor"] = "closed-hand";
	    // 
	    QtCursorShape["DragCopyCursor"] = "drag-copy";
	    // 
	    QtCursorShape["DragMoveCursor"] = "drag-move";
	    // 
	    QtCursorShape["DragLinkCursor"] = "drag-link";
	})(QtCursorShape = exports.QtCursorShape || (exports.QtCursorShape = {}));
	// specifies various components of a viz that are rendered as images
	var VizImageRegion;
	(function (VizImageRegion) {
	    // the main viz area
	    VizImageRegion["VIZ_REGION_TABLE"] = "viz";
	    // y axis items
	    VizImageRegion["VIZ_REGION_ROWHEADERS"] = "yheader";
	    // 
	    VizImageRegion["VIZ_REGION_LEFTAXIS"] = "leftaxis";
	    // 
	    VizImageRegion["VIZ_REGION_RIGHTAXIS"] = "rightaxis";
	    // x axis items
	    VizImageRegion["VIZ_REGION_COLUMNHEADERS"] = "xheader";
	    // 
	    VizImageRegion["VIZ_REGION_BOTTOMAXIS"] = "bottomaxis";
	    // 
	    VizImageRegion["VIZ_REGION_TOPAXIS"] = "topaxis";
	    // spacing areas
	    VizImageRegion["VIZ_REGION_UPPERLEFT"] = "uleft";
	    // 
	    VizImageRegion["VIZ_REGION_UPPERRIGHT"] = "uright";
	    // 
	    VizImageRegion["VIZ_REGION_LOWERLEFT"] = "lleft";
	    // 
	    VizImageRegion["VIZ_REGION_LOWERRIGHT"] = "lright";
	    // labelling areas
	    VizImageRegion["VIZ_REGION_TITLE"] = "title";
	    // 
	    VizImageRegion["VIZ_REGION_CAPTION"] = "caption";
	    // legend areas
	    VizImageRegion["VIZ_REGION_COLORLEGEND"] = "color";
	    // 
	    VizImageRegion["VIZ_REGION_SHAPELEGEND"] = "shape";
	    // 
	    VizImageRegion["VIZ_REGION_SIZELEGEND"] = "size";
	    // 
	    VizImageRegion["VIZ_REGION_HIGHLIGHTLEGEND"] = "highlight-legend";
	    // 
	    VizImageRegion["VIZ_REGION_MAPLEGEND"] = "map";
	    // legend titles
	    VizImageRegion["VIZ_REGION_COLORLEGENDTITLE"] = "color-title";
	    // 
	    VizImageRegion["VIZ_REGION_SHAPELEGENDTITLE"] = "shape-title";
	    // 
	    VizImageRegion["VIZ_REGION_SIZELEGENDTITLE"] = "size-title";
	    // 
	    VizImageRegion["VIZ_REGION_HIGHLIGHTLEGENDTITLE"] = "highlight-legend-title";
	    // 
	    VizImageRegion["VIZ_REGION_MAPLEGENDTITLE"] = "map-title";
	    // legend bodies
	    VizImageRegion["VIZ_REGION_COLORLEGENDBODY"] = "color-body";
	    // 
	    VizImageRegion["VIZ_REGION_SHAPELEGENDBODY"] = "shape-body";
	    // 
	    VizImageRegion["VIZ_REGION_SIZELEGENDBODY"] = "size-body";
	    // 
	    VizImageRegion["VIZ_REGION_HIGHLIGHTLEGENDBODY"] = "highlight-legend-body";
	    // 
	    VizImageRegion["VIZ_REGION_MAPLEGENDBODY"] = "map-body";
	    // These are region names (ranges of other enums)
	    VizImageRegion["VIZ_REGION_END"] = "end";
	})(VizImageRegion = exports.VizImageRegion || (exports.VizImageRegion = {}));
	// names of legacy menu items
	var LegacyMenuName;
	(function (LegacyMenuName) {
	    // view underlying data
	    LegacyMenuName["LM_NAME_VIEWDATA"] = "viewdata";
	    // export image
	    LegacyMenuName["LM_NAME_EXPORTIMAGE"] = "exportimage";
	    // export data
	    LegacyMenuName["LM_NAME_EXPORTDATA"] = "exportdata";
	    // export as crosstab
	    LegacyMenuName["LM_NAME_EXPORTCROSSTAB"] = "exportcrosstab";
	    // print to pdf
	    LegacyMenuName["LM_NAME_PRINT"] = "print";
	})(LegacyMenuName = exports.LegacyMenuName || (exports.LegacyMenuName = {}));
	// states of legacy menu items
	var LegacyMenuState;
	(function (LegacyMenuState) {
	    // visible state
	    LegacyMenuState["LM_STATE_VISIBLE"] = "visible";
	    // checked state
	    LegacyMenuState["LM_STATE_CHECKED"] = "checked";
	    // grayed state
	    LegacyMenuState["LM_STATE_GRAYED"] = "grayed";
	    // radio state
	    LegacyMenuState["LM_STATE_RADIO"] = "radio";
	})(LegacyMenuState = exports.LegacyMenuState || (exports.LegacyMenuState = {}));
	// 
	var MemberUniquenessType;
	(function (MemberUniquenessType) {
	    // 
	    MemberUniquenessType["UniqueWithinCube"] = "cube-unique";
	    // 
	    MemberUniquenessType["UniqueWithinHierarchy"] = "hierarchy-unique";
	    // 
	    MemberUniquenessType["UniqueWithinLevel"] = "level-unique";
	    // 
	    MemberUniquenessType["UniqueWithinParent"] = "parent-unique";
	})(MemberUniquenessType = exports.MemberUniquenessType || (exports.MemberUniquenessType = {}));
	// 
	var DimensionType;
	(function (DimensionType) {
	    // just a regular dimension, no special semantics
	    DimensionType["RegularDimension"] = "regular-dimension";
	    // the measures dimension, which we don't model as such
	    DimensionType["MeasureDimension"] = "measure-dimension";
	    // a time dimension
	    DimensionType["TimeDimension"] = "time-dimension";
	})(DimensionType = exports.DimensionType || (exports.DimensionType = {}));
	// 
	var SchemaViewerDataSourceType;
	(function (SchemaViewerDataSourceType) {
	    // 
	    SchemaViewerDataSourceType["SVT_DS_NORMAL"] = "datasource";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_NORMAL_PRIMARY"] = "datasource-primary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_NORMAL_SECONDARY"] = "datasource-secondary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_EXTRACT"] = "extract";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_EXTRACT_PRIMARY"] = "extract-primary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_EXTRACT_SECONDARY"] = "extract-secondary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_CUBE"] = "cube";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_CUBE_PRIMARY"] = "cube-primary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_CUBE_SECONDARY"] = "cube-secondary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_SERVER"] = "server";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_SERVER_PRIMARY"] = "server-primary";
	    // 
	    SchemaViewerDataSourceType["SVT_DS_SERVER_SECONDARY"] = "server-secondary";
	})(SchemaViewerDataSourceType = exports.SchemaViewerDataSourceType || (exports.SchemaViewerDataSourceType = {}));
	// 
	var SchemaItemType;
	(function (SchemaItemType) {
	    // 
	    SchemaItemType["IT_DIMENSION"] = "dimension";
	    // 
	    SchemaItemType["IT_HIERARCHY"] = "hierarchy";
	    // 
	    SchemaItemType["IT_LEVEL"] = "level";
	    // 
	    SchemaItemType["IT_CATEGORICAL"] = "categorical";
	    // 
	    SchemaItemType["IT_MEASURE"] = "measure";
	    // 
	    SchemaItemType["IT_VALUE"] = "value";
	    // 
	    SchemaItemType["IT_GROUP"] = "group";
	    // 
	    SchemaItemType["IT_FOLDER"] = "folder";
	    // 
	    SchemaItemType["IT_TABLE"] = "table";
	    // 
	    SchemaItemType["IT_DRILLPATH"] = "drillpath";
	    // 
	    SchemaItemType["IT_PARAMETER"] = "parameter";
	    // 
	    SchemaItemType["IT_HEADER"] = "header";
	})(SchemaItemType = exports.SchemaItemType || (exports.SchemaItemType = {}));
	// 
	var SchemaViewerFieldAllType;
	(function (SchemaViewerFieldAllType) {
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_BLANK"] = "blank";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_RELATIONAL"] = "relational";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_CUBE"] = "cube";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_DATETIME"] = "datetime";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_DATE"] = "date";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_TIME"] = "time";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_TEXT"] = "text";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_NUMBER"] = "number";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_CURRENCY"] = "currency";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_BOOL"] = "bool";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_HIERARCHY"] = "hierarchy";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_LEVEL"] = "level";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_ATTRIBUTE"] = "attribute";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_FOLDER_CLOSED"] = "folder-closed";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_FOLDER_OPEN"] = "folder-open";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_GROUP"] = "grp";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_GROUP"] = "invalid-grp";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_SVR_GRP"] = "svr-grp";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_SVR_GRP"] = "invalid-svr-grp";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_NUMERIC_BIN_O"] = "numeric-bin-o";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_NUMERIC_BIN_Q"] = "numeric-bin-q";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_NUMERIC_BIN"] = "invalid-numeric-bin";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_DRILLPATH"] = "drillpath";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_VALID_SYSGRP"] = "valid-sysgrp";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_SYSGRP"] = "invalid-sysgrp";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_CAT_BIN"] = "cat-bin";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_CAT_BIN_GEOGAPHIC_O"] = "cat-bin-geogaphic-o";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_CAT_BIN_GEOGAPHIC_Q"] = "cat-bin-geogaphic-q";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_CAT_BIN"] = "invalid-cat-bin";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_CAT_BIN_GEOGAPHIC_O"] = "invalid-cat-bin-geogaphic-o";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_CAT_BIN_GEOGAPHIC_Q"] = "invalid-cat-bin-geogaphic-q";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_GEOGRAPHIC"] = "geographic";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_GEOGRAPHIC_O"] = "invalid-geographic-o";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_GEOGRAPHIC_Q"] = "invalid-geographic-q";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_IDENT_SET"] = "ident-set";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_INVALID_IDENT_SET"] = "invalid-ident-set";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_TABLE"] = "table";
	    // 
	    SchemaViewerFieldAllType["SchemaViewerFieldAllType__SVT_ALL_NONE"] = "none";
	})(SchemaViewerFieldAllType = exports.SchemaViewerFieldAllType || (exports.SchemaViewerFieldAllType = {}));
	// 
	var SchemaViewerFieldCubeMeasureType;
	(function (SchemaViewerFieldCubeMeasureType) {
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_BLANK"] = "cube-m-blank";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_FOLDER_CLOSED"] = "cube-m-folder-closed";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_FOLDER_OPEN"] = "cube-m-folder-open";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_DATETIME"] = "cube-m-datetime";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_DATE"] = "cube-m-date";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_TIME"] = "cube-m-time";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_TEXT"] = "cube-m-text";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_NUMBER"] = "cube-m-number";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_CURRENCY"] = "cube-m-currency";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_BOOLEAN"] = "cube-m-boolean";
	    // 
	    SchemaViewerFieldCubeMeasureType["SchemaViewerFieldCubeMeasureType__SVT_CUBE_M_GEOGRAPHIC"] = "cube-m-geographic";
	})(SchemaViewerFieldCubeMeasureType = exports.SchemaViewerFieldCubeMeasureType || (exports.SchemaViewerFieldCubeMeasureType = {}));
	// 
	var SchemaViewerFieldCubeDimensionType;
	(function (SchemaViewerFieldCubeDimensionType) {
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_BLANK"] = "cube-d-blank";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_HIERARCHY"] = "cube-d-hierarchy";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_LEVEL"] = "cube-d-level";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_HIER_CALC"] = "cube-d-hier-calc";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_LVL_CALC"] = "cube-d-lvl-calc";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_HIER_GEO"] = "cube-d-hier-geo";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_HIER_GEO_CUSTOM"] = "cube-d-hier-geo-custom";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_FOLDER_CLOSED"] = "cube-d-folder-closed";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_FOLDER_OPEN"] = "cube-d-folder-open";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_ATTRIBUTE"] = "cube-d-attribute";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_TEXT"] = "cube-d-text";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_DATETIME"] = "cube-d-datetime";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_DATETIME_INVALID"] = "cube-d-datetime-invalid";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_DATE"] = "cube-d-date";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_DATE_INVALID"] = "cube-d-date-invalid";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_GEOGRAPHIC"] = "cube-d-geographic";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_GEOGRAPHIC_INVALID"] = "cube-d-geographic-invalid";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_GEOGRAPHIC_CUSTOM"] = "cube-d-geographic-custom";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_GEOGRAPHIC_CUSTOM_INVALID"] = "cube-d-geographic-custom-invalid";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_VARYING"] = "cube-d-varying";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_UDA"] = "cube-d-uda";
	    // 
	    SchemaViewerFieldCubeDimensionType["SchemaViewerFieldCubeDimensionType__SVT_CUBE_D_NUMBER"] = "cube-d-number";
	})(SchemaViewerFieldCubeDimensionType = exports.SchemaViewerFieldCubeDimensionType || (exports.SchemaViewerFieldCubeDimensionType = {}));
	// Schema viewer menu types
	var SchemaViewerMenuType;
	(function (SchemaViewerMenuType) {
	    // 
	    SchemaViewerMenuType["Header"] = "header";
	    // 
	    SchemaViewerMenuType["Field"] = "field";
	    // 
	    SchemaViewerMenuType["Level"] = "level";
	    // 
	    SchemaViewerMenuType["Hierarchy"] = "hierarchy";
	    // 
	    SchemaViewerMenuType["Dimension"] = "dimension";
	    // 
	    SchemaViewerMenuType["DrillPath"] = "drill-path";
	    // 
	    SchemaViewerMenuType["Group"] = "group";
	    // 
	    SchemaViewerMenuType["UDA"] = "uda";
	    // 
	    SchemaViewerMenuType["RelationalTable"] = "relational-table";
	})(SchemaViewerMenuType = exports.SchemaViewerMenuType || (exports.SchemaViewerMenuType = {}));
	// Indicates the selection mode: Single | Multiple.
	var HSMSelectionMode;
	(function (HSMSelectionMode) {
	    // 
	    HSMSelectionMode["Single"] = "selection-mode-single";
	    // 
	    HSMSelectionMode["Multiple"] = "selection-mode-multiple";
	})(HSMSelectionMode = exports.HSMSelectionMode || (exports.HSMSelectionMode = {}));
	// Indicates what default member to use for a hierarchical field.
	var HSMDefaultMemberType;
	(function (HSMDefaultMemberType) {
	    // 
	    HSMDefaultMemberType["UseDefaultMember"] = "use-default-member";
	    // 
	    HSMDefaultMemberType["UseAllMember"] = "use-all-member";
	    // 
	    HSMDefaultMemberType["UseSelectedMember"] = "use-selected-member";
	})(HSMDefaultMemberType = exports.HSMDefaultMemberType || (exports.HSMDefaultMemberType = {}));
	// Hierarchical select model presentation layer notification.
	var HSMNotificationType;
	(function (HSMNotificationType) {
	    // 
	    HSMNotificationType["Updated"] = "hsm-notification-updated";
	    // 
	    HSMNotificationType["MissingMembers"] = "hsm-notification-missing-members";
	})(HSMNotificationType = exports.HSMNotificationType || (exports.HSMNotificationType = {}));
	// Type of hierarchy command selection to be performed.
	var HSMSelectionRequestType;
	(function (HSMSelectionRequestType) {
	    // 
	    HSMSelectionRequestType["SelectMode"] = "hsm-selection-request-select-mode";
	    // 
	    HSMSelectionRequestType["MemberDescendantsState"] = "hsm-selection-request-descendants-state";
	    // 
	    HSMSelectionRequestType["SelectedMemberTuple"] = "hsm-selection-request-selected-member-tuple";
	    // 
	    HSMSelectionRequestType["SelectedMemberCaption"] = "hsm-selection-request-selected-member-caption";
	})(HSMSelectionRequestType = exports.HSMSelectionRequestType || (exports.HSMSelectionRequestType = {}));
	// Type of hierarchy member selection to be performed.
	var HSMMemberSelectRequestType;
	(function (HSMMemberSelectRequestType) {
	    // 
	    HSMMemberSelectRequestType["SelectMember"] = "hsm-member-request-select-member";
	    // 
	    HSMMemberSelectRequestType["SelectSubtree"] = "hsm-member-request-select-subtree";
	    // 
	    HSMMemberSelectRequestType["SelectLevel"] = "hsm-member-request-select-level";
	    // 
	    HSMMemberSelectRequestType["MemberSelect"] = "hsm-member-request-member-select";
	    // 
	    HSMMemberSelectRequestType["MemberLevel"] = "hsm-member-request-member-level";
	})(HSMMemberSelectRequestType = exports.HSMMemberSelectRequestType || (exports.HSMMemberSelectRequestType = {}));
	// Hierarchy level selection state.
	var HSMLevelSelectionState;
	(function (HSMLevelSelectionState) {
	    // 
	    HSMLevelSelectionState["AllSelected"] = "hsm-all-selected";
	    // 
	    HSMLevelSelectionState["NoneSelected"] = "hsm-none-selected";
	    // 
	    HSMLevelSelectionState["SomeSelected"] = "hsm-some-selected";
	    // Used when a query is made of levels that don't exist in the given subtree. We need to distinguish that from none selected which implies that members exist but are not selected.
	    HSMLevelSelectionState["UnknownSelected"] = "hsm-unknown-selected";
	})(HSMLevelSelectionState = exports.HSMLevelSelectionState || (exports.HSMLevelSelectionState = {}));
	// 
	var HSMMemberLoadState;
	(function (HSMMemberLoadState) {
	    // 
	    HSMMemberLoadState["AllLoaded"] = "hsm-all-loaded";
	    // 
	    HSMMemberLoadState["NoneLoaded"] = "hsm-none-loaded";
	    // 
	    HSMMemberLoadState["SomeLoaded"] = "hsm-some-loaded";
	})(HSMMemberLoadState = exports.HSMMemberLoadState || (exports.HSMMemberLoadState = {}));
	// Return value from ConnectionStateController connect methods
	var ConnectionAttemptResult;
	(function (ConnectionAttemptResult) {
	    // All data sources requested are connected.
	    ConnectionAttemptResult["CAR_Connected"] = "connected";
	    // Not all data sources are connected.
	    ConnectionAttemptResult["CAR_NotConnected"] = "not-connected";
	    // The user interrupted the connection flow to edit a connection.
	    ConnectionAttemptResult["CAR_UserEditConnection"] = "user-edit-connection";
	    // The connection is not supported on the current platform.
	    ConnectionAttemptResult["CAR_ConnectionNotSupported"] = "connection-not-supported";
	})(ConnectionAttemptResult = exports.ConnectionAttemptResult || (exports.ConnectionAttemptResult = {}));
	// Return value from ConnectToDataServerSourceCommand::Do
	var DataServerConnectionResult;
	(function (DataServerConnectionResult) {
	    // The data source has been successfully added.
	    DataServerConnectionResult["DSCR_Success"] = "success";
	    // Error that was handled. There's no more to do (ex. cancel, or an exception that the command just printed to the error dialog).
	    DataServerConnectionResult["DSCR_Failure"] = "failure";
	    // Try again after making a new workbook.
	    DataServerConnectionResult["DSCR_RequiresWorkbookDoc"] = "requires-workbook";
	    // Try again after logging back on to Tableau server.
	    DataServerConnectionResult["DSCR_RequiresAuthentication"] = "requires-authentication";
	    // Try again after getting database credentials from the user. Pass them in through the DPI_DatasourceUsername and the DPI_DatasourcePassword parameters.
	    DataServerConnectionResult["DSCR_RequiresDBCredentials"] = "requires-db-credentials";
	    // Try again after associating an OAuth key from the user keychain with the data source.
	    DataServerConnectionResult["DSCR_RequiresOAuthKeyAssociation"] = "requires-oauth-key-association";
	    // The OAuth credentials used to connect to the datasource are not valid.
	    DataServerConnectionResult["DSCR_RequiresValidOAuthKey"] = "requires-valid-oauth-key";
	    // Multiple leaf connections within a federated data source contain errors (e.g., multiple leafs might need credentials).
	    DataServerConnectionResult["DSCR_FederatedError"] = "federated-error";
	})(DataServerConnectionResult = exports.DataServerConnectionResult || (exports.DataServerConnectionResult = {}));
	// Type of error encountered while attempting to connect.
	var ConnectionErrorType;
	(function (ConnectionErrorType) {
	    // Authentication credentials are needed in order to connect.
	    ConnectionErrorType["CET_NeedsAuthentication"] = "needs-authentication";
	    // The data source is provided by Data Server, but no Data Server connection is present.
	    ConnectionErrorType["CET_DataServerDisconnected"] = "data-server-disconnected";
	    // An exception occurred while connecting.  This could be caused by a bad password, or wrong path/url.
	    ConnectionErrorType["CET_ExceptionWhileConnecting"] = "exception-while-connecting";
	    // An exception occurred while trying to connect the data source as a whole.
	    ConnectionErrorType["CET_ExceptionWhileConnectingDataSource"] = "exception-while-connecting-data-source";
	    // The connection is not supported.
	    ConnectionErrorType["CET_ConnectionNotSupported"] = "connection-not-supported";
	    // An unexpected exception occurred.
	    ConnectionErrorType["CET_UnexpectedException"] = "unexpected-exception";
	})(ConnectionErrorType = exports.ConnectionErrorType || (exports.ConnectionErrorType = {}));
	// identifies the piece of the visual
	var VisualPart;
	(function (VisualPart) {
	    // default bucket if type isn't specified
	    VisualPart["VP_Misc"] = "misc";
	    // 
	    VisualPart["VP_Annotations"] = "annotations";
	    // 
	    VisualPart["VP_AxisRules"] = "axis-rules";
	    // 
	    VisualPart["VP_TopAxis"] = "top-axis";
	    // 
	    VisualPart["VP_BottomAxis"] = "bottom-axis";
	    // 
	    VisualPart["VP_LeftAxis"] = "left-axis";
	    // 
	    VisualPart["VP_RightAxis"] = "right-axis";
	    // 
	    VisualPart["VP_Background"] = "background";
	    // 
	    VisualPart["VP_Borders"] = "borders";
	    // 
	    VisualPart["VP_Caption"] = "caption";
	    // 
	    VisualPart["VP_CellBorders"] = "cell-borders";
	    // 
	    VisualPart["VP_Decoration"] = "decoration";
	    // 
	    VisualPart["VP_DropLines"] = "drop-lines";
	    // 
	    VisualPart["VP_XLabels"] = "x-labels";
	    // 
	    VisualPart["VP_YLabels"] = "y-labels";
	    // 
	    VisualPart["VP_Legends"] = "legends";
	    // 
	    VisualPart["VP_Marks"] = "marks";
	    // 
	    VisualPart["VP_MarkLabels"] = "mark-labels";
	    // 
	    VisualPart["VP_MarkTrails"] = "mark-trails";
	    // 
	    VisualPart["VP_ReferenceBands"] = "ref-bands";
	    // 
	    VisualPart["VP_ReferenceLines"] = "ref-lines";
	    // 
	    VisualPart["VP_PaneBorders"] = "pane-borders";
	    // 
	    VisualPart["VP_ScrollBars"] = "scroll-bars";
	    // 
	    VisualPart["VP_Title"] = "title";
	    // 
	    VisualPart["VP_TrendLines"] = "trend-lines";
	    // 
	    VisualPart["VP_UpperMapLayers"] = "upper-map-layers";
	})(VisualPart = exports.VisualPart || (exports.VisualPart = {}));
	// Details of the part within an ElementId
	var SceneModelTypesDetail;
	(function (SceneModelTypesDetail) {
	    // 
	    SceneModelTypesDetail["NoDetail"] = "no-detail";
	    // 
	    SceneModelTypesDetail["MarkDetail"] = "mark-detail";
	    // 
	    SceneModelTypesDetail["LabelDetail"] = "label-detail";
	    // 
	    SceneModelTypesDetail["LabelHandleDetail"] = "label-handle-detail";
	    // 
	    SceneModelTypesDetail["TopLeftHandleDetail"] = "top-left-handle-detail";
	    // 
	    SceneModelTypesDetail["TopMidHandleDetail"] = "top-mid-handle-detail";
	    // 
	    SceneModelTypesDetail["TopRightHandleDetail"] = "top-right-handle-detail";
	    // 
	    SceneModelTypesDetail["RightMidHandleDetail"] = "right-mid-handle-detail";
	    // 
	    SceneModelTypesDetail["BottomRightHandleDetail"] = "bottom-right-handle-detail";
	    // 
	    SceneModelTypesDetail["BottomMidHandleDetail"] = "bottom-mid-handle-detail";
	    // 
	    SceneModelTypesDetail["BottomLeftHandleDetail"] = "bottom-left-handle-detail";
	    // 
	    SceneModelTypesDetail["LeftMidHandleDetail"] = "left-mid-handle-detail";
	    // 
	    SceneModelTypesDetail["LineDetail"] = "line-detail";
	    // 
	    SceneModelTypesDetail["ArrowHandleDetail"] = "arrow-handle-detail";
	    // 
	    SceneModelTypesDetail["TextCenterHandleDetail"] = "text-center-handle-detail";
	    // 
	    SceneModelTypesDetail["TextBoxHandleDetail"] = "text-box-handle-detail";
	    // 
	    SceneModelTypesDetail["MarkArrowHandleDetail"] = "mark-arrow-handle-detail";
	    // 
	    SceneModelTypesDetail["MarkMovableHandleDetail"] = "mark-movable-handle-detail";
	    // 
	    SceneModelTypesDetail["MarkAnchorDetail"] = "mark-anchor-detail";
	})(SceneModelTypesDetail = exports.SceneModelTypesDetail || (exports.SceneModelTypesDetail = {}));
	// 
	var SceneModelTypesHitType;
	(function (SceneModelTypesHitType) {
	    // 
	    SceneModelTypesHitType["NoHit"] = "no-hit";
	    // 
	    SceneModelTypesHitType["AreaHit"] = "area-hit";
	    // 
	    SceneModelTypesHitType["NearHit"] = "near-hit";
	    // 
	    SceneModelTypesHitType["ExactHit"] = "exact-hit";
	})(SceneModelTypesHitType = exports.SceneModelTypesHitType || (exports.SceneModelTypesHitType = {}));
	// 
	var SceneModelTypesHitTestStyle;
	(function (SceneModelTypesHitTestStyle) {
	    // 
	    SceneModelTypesHitTestStyle["BoundsTest"] = "bounds-test";
	    // 
	    SceneModelTypesHitTestStyle["ExactTest"] = "exact-test";
	    // 
	    SceneModelTypesHitTestStyle["RadialDistanceTest"] = "radial-distance-test";
	    // 
	    SceneModelTypesHitTestStyle["LabelTest"] = "label-test";
	})(SceneModelTypesHitTestStyle = exports.SceneModelTypesHitTestStyle || (exports.SceneModelTypesHitTestStyle = {}));
	// 
	var SceneModelTypesHitTestFlags;
	(function (SceneModelTypesHitTestFlags) {
	    // 
	    SceneModelTypesHitTestFlags["HitTestAll"] = "hit-test-all";
	    // 
	    SceneModelTypesHitTestFlags["HitTestIgnoreLabels"] = "hit-test-ignore-labels";
	    // 
	    SceneModelTypesHitTestFlags["HitTestIgnoreAnnotations"] = "hit-test-ignore-annotations";
	    // 
	    SceneModelTypesHitTestFlags["HitTestForOverlay"] = "hit-test-for-overlay";
	})(SceneModelTypesHitTestFlags = exports.SceneModelTypesHitTestFlags || (exports.SceneModelTypesHitTestFlags = {}));
	// 
	var AnnotateEnum;
	(function (AnnotateEnum) {
	    // 
	    AnnotateEnum["AE_Mark"] = "mark";
	    // 
	    AnnotateEnum["AE_Point"] = "point";
	    // 
	    AnnotateEnum["AE_Area"] = "area";
	})(AnnotateEnum = exports.AnnotateEnum || (exports.AnnotateEnum = {}));
	// 
	var MarkEnum;
	(function (MarkEnum) {
	    // 
	    MarkEnum["ME_Auto"] = "auto";
	    // 
	    MarkEnum["ME_On"] = "on";
	    // 
	    MarkEnum["ME_Off"] = "off";
	    // 
	    MarkEnum["ME_Clear"] = "clear";
	})(MarkEnum = exports.MarkEnum || (exports.MarkEnum = {}));
	// 
	var ZoomLevel;
	(function (ZoomLevel) {
	    // 
	    ZoomLevel["ZOOM_ENTIRE_VIEW"] = "zoom-entire-view";
	    // 
	    ZoomLevel["ZOOM_FIT_WIDTH"] = "zoom-fit-width";
	    // 
	    ZoomLevel["ZOOM_FIT_HEIGHT"] = "zoom-fit-height";
	})(ZoomLevel = exports.ZoomLevel || (exports.ZoomLevel = {}));
	// 
	var ActionType;
	(function (ActionType) {
	    // 
	    ActionType["AT_Unknown"] = "unknown";
	    // 
	    ActionType["AT_Brush"] = "brush";
	    // 
	    ActionType["AT_Filter"] = "filter";
	    // 
	    ActionType["AT_URL"] = "url";
	})(ActionType = exports.ActionType || (exports.ActionType = {}));
	// 
	var ShelfDropAction;
	(function (ShelfDropAction) {
	    // 
	    ShelfDropAction["SdaReplace"] = "replace";
	    // 
	    ShelfDropAction["SdaCombine"] = "combine";
	    // 
	    ShelfDropAction["SdaInsert"] = "insert";
	    // 
	    ShelfDropAction["SdaSwap"] = "swap";
	    // 
	    ShelfDropAction["SdaReplaceAll"] = "replace-all";
	})(ShelfDropAction = exports.ShelfDropAction || (exports.ShelfDropAction = {}));
	// 
	var ShelfDropContext;
	(function (ShelfDropContext) {
	    // 
	    ShelfDropContext["ShelfDropContext_None"] = "none";
	    // 
	    ShelfDropContext["ShelfDropContext_Categorical"] = "categorical";
	    // 
	    ShelfDropContext["ShelfDropContext_Quantitative"] = "quantitative";
	})(ShelfDropContext = exports.ShelfDropContext || (exports.ShelfDropContext = {}));
	// Drag/Drop source and target
	var DragDropType;
	(function (DragDropType) {
	    // drag from or drop onto viz
	    DragDropType["DragDrop_Viz"] = "drag-drop-viz";
	    // drag from or drop onto shelf
	    DragDropType["DragDrop_Shelf"] = "drag-drop-shelf";
	    // drag from or drop onto schema
	    DragDropType["DragDrop_Schema"] = "drag-drop-schema";
	    // drag from or drop onto nowhere
	    DragDropType["DragDrop_None"] = "drag-drop-none";
	    // drag from or drop onto calculation editor
	    DragDropType["DragDrop_CalculationEditor"] = "drag-drop-calculation-editor";
	    // drag from pivot window
	    DragDropType["DragDrop_Pivot"] = "drag-drop-pivot";
	})(DragDropType = exports.DragDropType || (exports.DragDropType = {}));
	// Dialog type related to redirect action required by UI
	var CommandRedirectType;
	(function (CommandRedirectType) {
	    // add new data connection dialog
	    CommandRedirectType["CommandRedirect_AddDataConnection"] = "command-redirect-add-data-connection";
	    // create drill path dialog
	    CommandRedirectType["CommandRedirect_AddDrillPath"] = "command-redirect-add-drill-path";
	    // confirmation dialog
	    CommandRedirectType["CommandRedirect_Confirmation"] = "command-redirect-confirmation";
	    // shows the format workbook pane
	    CommandRedirectType["CommandRedirect_FormatWorkbook"] = "command-redirect-format-workbook";
	    // notification dialog
	    CommandRedirectType["CommandRedirect_Notification"] = "command-redirect-notification";
	    // show number formatting dialog
	    CommandRedirectType["CommandRedirect_NumberFormat"] = "command-redirect-number-format";
	    // full-featured editor
	    CommandRedirectType["CommandRedirect_Edit"] = "command-redirect-edit";
	    // quick editor
	    CommandRedirectType["CommandRedirect_QuickEdit"] = "command-redirect-quick-edit";
	    // inline rename field
	    CommandRedirectType["CommandRedirect_RenameField"] = "command-redirect-rename-field";
	    // rename drill path dialog
	    CommandRedirectType["CommandRedirect_RenameDrillPath"] = "command-redirect-rename-drill-path";
	    // rename sheet dialog
	    CommandRedirectType["CommandRedirect_RenameSheet"] = "command-redirect-rename-sheet";
	    // edit web zone url
	    CommandRedirectType["CommandRedirect_EditWebZoneUrl"] = "command-redirect-edit-web-zone-url";
	    // edit formatting
	    CommandRedirectType["CommandRedirect_EditFormatting"] = "command-redirect-edit-formatting";
	    // categorical bin edit dialog
	    CommandRedirectType["CommandRedirect_CategoricalBinEdit"] = "command-redirect-categorical-bin-edit";
	    // numeric bin edit dialog
	    CommandRedirectType["CommandRedirect_NumericBinEdit"] = "command-redirect-numeric-bin-edit";
	    // rich text dialog
	    CommandRedirectType["CommandRedirect_RichText"] = "command-redirect-rich-text";
	    // delete sheet dialog
	    CommandRedirectType["CommandRedirect_DeleteSheet"] = "command-redirect-delete-sheet";
	    // No redirect required
	    CommandRedirectType["CommandRedirect_None"] = "command-redirect-none";
	})(CommandRedirectType = exports.CommandRedirectType || (exports.CommandRedirectType = {}));
	// Directives for heuristically interpreting user intent of command
	var HeuristicCommandReinterpretation;
	(function (HeuristicCommandReinterpretation) {
	    // Directs Tableau to not reinterpret specifics of the command
	    HeuristicCommandReinterpretation["DoNotReinterpretCommand"] = "do-not-reinterpret-command";
	    // Directs Tableau to guess that when the user selected all items in a filter, the intent was actually to select ALL
	    HeuristicCommandReinterpretation["CategoricalFilter_InferAllWhenEverythingSelected"] = "categorical-filter-infer-all-when-everything-selected";
	})(HeuristicCommandReinterpretation = exports.HeuristicCommandReinterpretation || (exports.HeuristicCommandReinterpretation = {}));
	// filter types
	var FilterType;
	(function (FilterType) {
	    // Quantitative
	    FilterType["FLTR_Quantitative"] = "Quantitative";
	    // Categorical
	    FilterType["FLTR_Categorical"] = "Categorical";
	    // Hierarchical
	    FilterType["FLTR_Hierarchical"] = "Hierarchical";
	    // Relative Date
	    FilterType["FLTR_RelativeDate"] = "RelativeDate";
	    // RelativeDatePick
	    FilterType["FLTR_RelativeDatePick"] = "RelativeDatePick";
	    // NotSpecified
	    FilterType["FLTR_Default"] = "FilterDefault";
	})(FilterType = exports.FilterType || (exports.FilterType = {}));
	// Parameter errors
	var ParameterError;
	(function (ParameterError) {
	    // field aggregation is invalid
	    ParameterError["InvalidAggFields"] = "invalid-agg-fields";
	    // field is invalid
	    ParameterError["InvalidFields"] = "invalid-fields";
	    // filter values are invalid
	    ParameterError["InvalidFilterValues"] = "invalid-filter-values";
	    // date value is invalid
	    ParameterError["InvalidDates"] = "invalid-dates";
	})(ParameterError = exports.ParameterError || (exports.ParameterError = {}));
	// 
	var SelectionType;
	(function (SelectionType) {
	    // 
	    SelectionType["ST_Tuples"] = "tuples";
	    // 
	    SelectionType["ST_Nodes"] = "nodes";
	    // 
	    SelectionType["ST_TrendLines"] = "trend-lines";
	    // 
	    SelectionType["ST_LegendItems"] = "legend-items";
	    // 
	    SelectionType["ST_RefLines"] = "ref-lines";
	    // 
	    SelectionType["ST_Annotations"] = "annotations";
	    // 
	    SelectionType["ST_OrientedNodes"] = "oriented-nodes";
	    // 
	    SelectionType["ST_ShelfFields"] = "shelf-fields";
	})(SelectionType = exports.SelectionType || (exports.SelectionType = {}));
	// 
	var SelectionUpdateType;
	(function (SelectionUpdateType) {
	    // 
	    SelectionUpdateType["SU_ADD"] = "select-add";
	    // 
	    SelectionUpdateType["SU_REMOVE"] = "select-remove";
	    // 
	    SelectionUpdateType["SU_REPLACE"] = "select-replace";
	})(SelectionUpdateType = exports.SelectionUpdateType || (exports.SelectionUpdateType = {}));
	// 
	var SelectOptions;
	(function (SelectOptions) {
	    // No key down
	    SelectOptions["SelectOptionsSimple"] = "select-options-simple";
	    // Ctrl key down
	    SelectOptions["SelectOptionsToggle"] = "select-options-toggle";
	    // Shift key down
	    SelectOptions["SelectOptionsRange"] = "select-options-range";
	    // Usually triggered by right click
	    SelectOptions["SelectOptionsMouseMenu"] = "select-options-menu";
	    // An attempt to select via search
	    SelectOptions["SelectOptionsSearchMatch"] = "select-options-search";
	})(SelectOptions = exports.SelectOptions || (exports.SelectOptions = {}));
	// 
	var WhitespaceSelectionBehavior;
	(function (WhitespaceSelectionBehavior) {
	    // Clear selection over whitespace based on default factors (i.e., are we in append mode?)
	    WhitespaceSelectionBehavior["Default"] = "default";
	    // Always clear selection over whitespace
	    WhitespaceSelectionBehavior["AlwaysClear"] = "always-clear";
	    // Never clear selection over whitespace
	    WhitespaceSelectionBehavior["NeverClear"] = "never-clear";
	})(WhitespaceSelectionBehavior = exports.WhitespaceSelectionBehavior || (exports.WhitespaceSelectionBehavior = {}));
	// 
	var Orientation;
	(function (Orientation) {
	    // 
	    Orientation["Vertical"] = "o-vert";
	    // 
	    Orientation["Horizontal"] = "o-horiz";
	    // 
	    Orientation["OAutomatic"] = "o-auto";
	})(Orientation = exports.Orientation || (exports.Orientation = {}));
	// 
	var ScaleType;
	(function (ScaleType) {
	    // 
	    ScaleType["Log"] = "log";
	    // 
	    ScaleType["Linear"] = "linear";
	})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));
	// type of object action applies to
	var SourceType;
	(function (SourceType) {
	    // all sheets in the workbook
	    SourceType["ST_All"] = "all";
	    // all sheets referencing a given datasource
	    SourceType["ST_Datasource"] = "datasource";
	    // worksheet or dashboard
	    SourceType["ST_Sheet"] = "sheet";
	})(SourceType = exports.SourceType || (exports.SourceType = {}));
	// how an action gets activated
	var ActivationMethod;
	(function (ActivationMethod) {
	    // e.g. by picking an option from a context menu
	    ActivationMethod["AM_Explicit"] = "explicitly";
	    // auto activated when marks are selected
	    ActivationMethod["AM_OnSelect"] = "on-select";
	    // auto activated when the user moves the mouse over a mark
	    ActivationMethod["AM_OnHover"] = "on-hover";
	})(ActivationMethod = exports.ActivationMethod || (exports.ActivationMethod = {}));
	// whether an action should be run when selection is cleared
	var OnClear;
	(function (OnClear) {
	    // do nothing, e.g. leave filter in place
	    OnClear["OC_Nothing"] = "nothing";
	    // show all values
	    OnClear["OC_ShowAll"] = "show-all";
	    // exclude everything
	    OnClear["OC_ExcludeAll"] = "exclude-all";
	})(OnClear = exports.OnClear || (exports.OnClear = {}));
	// 
	var MergeOrSplit;
	(function (MergeOrSplit) {
	    // 
	    MergeOrSplit["MOS_MERGE"] = "merge";
	    // 
	    MergeOrSplit["MOS_SPLIT"] = "split";
	})(MergeOrSplit = exports.MergeOrSplit || (exports.MergeOrSplit = {}));
	// 
	var MarkLayoutPrimitive;
	(function (MarkLayoutPrimitive) {
	    // 
	    MarkLayoutPrimitive["ShapePrimitive"] = "shape";
	    // 
	    MarkLayoutPrimitive["LinePrimitive"] = "line";
	    // 
	    MarkLayoutPrimitive["BarPrimitive"] = "bar";
	    // 
	    MarkLayoutPrimitive["PolarBarPrimitive"] = "polar-bar";
	    // 
	    MarkLayoutPrimitive["TextPrimitive"] = "text";
	    // 
	    MarkLayoutPrimitive["LabelPrimitive"] = "label";
	    // 
	    MarkLayoutPrimitive["PiePrimitive"] = "pie";
	    // 
	    MarkLayoutPrimitive["AreaPrimitive"] = "area";
	    // 
	    MarkLayoutPrimitive["PolygonPrimitive"] = "polygon";
	    // 
	    MarkLayoutPrimitive["MultipolygonPrimitive"] = "multipolygon";
	    // 
	    MarkLayoutPrimitive["SquarePrimitive"] = "square";
	})(MarkLayoutPrimitive = exports.MarkLayoutPrimitive || (exports.MarkLayoutPrimitive = {}));
	// Does the PaneType/PrimitiveType/LayoutType triplet result in very specific layout rules?
	var MarkLayoutVizType;
	(function (MarkLayoutVizType) {
	    // No special rules
	    MarkLayoutVizType["Standard"] = "standard";
	    // Generic OO Stacked rules
	    MarkLayoutVizType["OOStacked"] = "oo-stacked";
	    // OO Gantt Stacked rules
	    MarkLayoutVizType["GanttStacked"] = "gantt-stacked";
	    // Treemap
	    MarkLayoutVizType["Treemap"] = "treemap";
	    // Bubble Chart -- OO Packed circles or shapes
	    MarkLayoutVizType["Bubble"] = "bubble";
	    // Wordle
	    MarkLayoutVizType["Wordle"] = "wordle";
	    // Highlight Table
	    MarkLayoutVizType["Highlight"] = "highlight";
	})(MarkLayoutVizType = exports.MarkLayoutVizType || (exports.MarkLayoutVizType = {}));
	// 
	var MarkLayoutHandleSpecials;
	(function (MarkLayoutHandleSpecials) {
	    // 
	    MarkLayoutHandleSpecials["CategoricalAxis"] = "categorical-axis";
	    // 
	    MarkLayoutHandleSpecials["ShowSpecials"] = "show-specials";
	    // 
	    MarkLayoutHandleSpecials["OmitSpecials"] = "omit-specials";
	    // 
	    MarkLayoutHandleSpecials["BreakOnSpecials"] = "break-on-specials";
	})(MarkLayoutHandleSpecials = exports.MarkLayoutHandleSpecials || (exports.MarkLayoutHandleSpecials = {}));
	// 
	var MarkLayoutMarkFlag;
	(function (MarkLayoutMarkFlag) {
	    // mark does not connect to the next mark
	    MarkLayoutMarkFlag["End"] = "end";
	    // last mark in a multi-primitive
	    MarkLayoutMarkFlag["EndPrimitive"] = "endprimitive";
	    // last mark has an edge connector to first mark
	    MarkLayoutMarkFlag["ClosedPrimitive"] = "closedprimitive";
	    // visual marker should be displayed
	    MarkLayoutMarkFlag["Marked"] = "marked";
	    // visual marker should be displayed if labelled
	    MarkLayoutMarkFlag["MarkedIfLabel"] = "markediflabel";
	    // display debug information
	    MarkLayoutMarkFlag["Debug"] = "debug";
	    // user flags can begin here
	    MarkLayoutMarkFlag["User"] = "user";
	})(MarkLayoutMarkFlag = exports.MarkLayoutMarkFlag || (exports.MarkLayoutMarkFlag = {}));
	// 
	var MarkLayoutPaneFlag;
	(function (MarkLayoutPaneFlag) {
	    // Allows scene to be panned in the X direction
	    MarkLayoutPaneFlag["EnablePanX"] = "enable-pan-x";
	    // Allows scene to be panned in the Y direction
	    MarkLayoutPaneFlag["EnablePanY"] = "enable-pan-y";
	    // Allows the positions of marks to be scaled in the X direction as the view is zoomed
	    MarkLayoutPaneFlag["EnableZoomX"] = "enable-zoom-x";
	    // Allows the positions of marks to be scaled in the Y direction as the view is zoomed
	    MarkLayoutPaneFlag["EnableZoomY"] = "enable-zoom-y";
	    // Allows the size of marks to be scaled in the X direction as the view is zoomed; requires width in domain coordinates
	    MarkLayoutPaneFlag["EnableScaleX"] = "enable-scale-x";
	    // Allows the size of marks to be scaled in the Y direction as the view is zoomed; requires height in domain coordinates
	    MarkLayoutPaneFlag["EnableScaleY"] = "enable-scale-y";
	    // Clip to cell borders in the x direction
	    MarkLayoutPaneFlag["ClipToCellX"] = "clip-to-cell-x";
	    // Clip to cell borders in the y direction
	    MarkLayoutPaneFlag["ClipToCellY"] = "clip-to-cell-y";
	    // Use cell clipping for selection
	    MarkLayoutPaneFlag["ClipToCellForSelection"] = "clip-to-cell-for-selection";
	    // The x-axis is on top of pane
	    MarkLayoutPaneFlag["XAxisOnTop"] = "x-axis-on-top";
	    // The y-axis is on the right of pane
	    MarkLayoutPaneFlag["YAxisOnRight"] = "y-axis-on-right";
	    // The pane has cells in the x axis
	    MarkLayoutPaneFlag["HasCellsX"] = "has-cells-x";
	    // The pane has cells in the y axis
	    MarkLayoutPaneFlag["HasCellsY"] = "has-cells-y";
	})(MarkLayoutPaneFlag = exports.MarkLayoutPaneFlag || (exports.MarkLayoutPaneFlag = {}));
	// 
	var MarkLayoutDropLineFlag;
	(function (MarkLayoutDropLineFlag) {
	    // Show drop lines on selected mark
	    MarkLayoutDropLineFlag["DropLineShowSelected"] = "dropline-show-selected";
	    // Show drop lines on all marks
	    MarkLayoutDropLineFlag["DropLineShowAll"] = "dropline-show-all";
	    // Drop line to x-axis
	    MarkLayoutDropLineFlag["DropLineX"] = "dropline-x";
	    // Drop line to y-axis
	    MarkLayoutDropLineFlag["DropLineY"] = "dropline-y";
	    // Show labels on drop lines
	    MarkLayoutDropLineFlag["DropLineLabels"] = "dropline-labels";
	})(MarkLayoutDropLineFlag = exports.MarkLayoutDropLineFlag || (exports.MarkLayoutDropLineFlag = {}));
	// Identifies the offset for a particular table in the array of tables in PDMarksPresModel
	var MarkLayoutDataTableID;
	(function (MarkLayoutDataTableID) {
	    // The table that contains the mark information
	    MarkLayoutDataTableID["MarkTable"] = "mark-table";
	    // The table that contains text runs for text marks and labels
	    MarkLayoutDataTableID["TextRunTable"] = "text-run-table";
	    // The table that contains text styles for each text run.
	    MarkLayoutDataTableID["TextStyleTable"] = "text-style-table";
	})(MarkLayoutDataTableID = exports.MarkLayoutDataTableID || (exports.MarkLayoutDataTableID = {}));
	// Which labeling algorithm should be used?  Closely related to MarkLayout::VizType
	var LabelLayoutType;
	(function (LabelLayoutType) {
	    // No labels
	    LabelLayoutType["LABEL_LAYOUT_NONE"] = "unlabeled";
	    // Treemap - labels inside the rectangles
	    LabelLayoutType["LABEL_LAYOUT_TREEMAP"] = "treemap-labels";
	    // Bubble Chart - labels inside the shapes
	    LabelLayoutType["LABEL_LAYOUT_BUBBLECHART"] = "bubble-labels";
	    // Scatterplot - dynamic best-fit labels
	    LabelLayoutType["LABEL_LAYOUT_SCATTERPLOT"] = "scatterplot-labels";
	    // Standard labeling
	    LabelLayoutType["LABEL_LAYOUT_STANDARD"] = "standard-labels";
	    // Highlight table
	    LabelLayoutType["LABEL_LAYOUT_HIGHLIGHT_TABLE"] = "highlight-table-labels";
	})(LabelLayoutType = exports.LabelLayoutType || (exports.LabelLayoutType = {}));
	// MarkLayer represents the layers of a mark given the various states
	var MarkLayer;
	(function (MarkLayer) {
	    // 
	    MarkLayer["NormalUnder"] = "normalUnder";
	    // 
	    MarkLayer["NormalOn"] = "normalOn";
	    // 
	    MarkLayer["SelectedUnder"] = "selectedUnder";
	    // 
	    MarkLayer["SelectedOn"] = "selectedOn";
	    // 
	    MarkLayer["HighlightedUnder"] = "highlightedUnder";
	    // 
	    MarkLayer["HighlightedOn"] = "highlightedOn";
	    // 
	    MarkLayer["EdgeUnder"] = "edgeUnder";
	    // 
	    MarkLayer["EdgeOn"] = "edgeOn";
	    // 
	    MarkLayer["Border"] = "border";
	    // 
	    MarkLayer["SelectedUnder1"] = "selectedUnder1";
	    // 
	    MarkLayer["SelectedOn1"] = "selectedOn1";
	    // 
	    MarkLayer["UnSelectedCustomShape"] = "unSelectedCustomShape";
	    // 
	    MarkLayer["NormalAlphaMask"] = "normalAlphaMask";
	    // 
	    MarkLayer["HaloAlphaMask"] = "haloAlphaMask";
	    // 
	    MarkLayer["HighlightedUnder1"] = "highlightedUnder1";
	    // 
	    MarkLayer["HighlightedOn1"] = "highlightedOn1";
	    // 
	    MarkLayer["SelectedEdgeUnder"] = "selectedEdgeUnder";
	    // 
	    MarkLayer["BlobUnder"] = "blobUnder";
	    // 
	    MarkLayer["BlobOn"] = "blobOn";
	    // 
	    MarkLayer["HoverOverlay"] = "hoverOverlay";
	    // 
	    MarkLayer["PressedOverlay"] = "pressedOverlay";
	})(MarkLayer = exports.MarkLayer || (exports.MarkLayer = {}));
	// ColorOverrideMode represents the different ways in which mark colors may be modified.
	var ColorOverrideMode;
	(function (ColorOverrideMode) {
	    // 
	    ColorOverrideMode["ColorOverrideNone"] = "colorOverrideNone";
	    // 
	    ColorOverrideMode["ColorOverrideFog"] = "colorOverrideFog";
	    // 
	    ColorOverrideMode["ColorOverrideOpaque"] = "colorOverrideOpaque";
	    // 
	    ColorOverrideMode["ColorOverrideReplaceAlpha"] = "colorOverrideReplaceAlpha";
	    // 
	    ColorOverrideMode["ColorOverrideCount"] = "colorOverrideCount";
	})(ColorOverrideMode = exports.ColorOverrideMode || (exports.ColorOverrideMode = {}));
	// ColorTransformMode represents the different ways in which mark colors may be modified.
	var ColorTransformMode;
	(function (ColorTransformMode) {
	    // 
	    ColorTransformMode["ColorTransformNone"] = "colorTransformNone";
	    // 
	    ColorTransformMode["ColorTransformFog"] = "colorTransformFog";
	    // 
	    ColorTransformMode["ColorTransformOpaque"] = "colorTransformOpaque";
	    // 
	    ColorTransformMode["ColorTransformOverrideColor"] = "colorTransformOverrideColor";
	    // 
	    ColorTransformMode["ColorTransformOverrideAlpha"] = "colorTransformOverrideAlpha";
	})(ColorTransformMode = exports.ColorTransformMode || (exports.ColorTransformMode = {}));
	// MarkState represents valid states for a mark.
	var MarkState;
	(function (MarkState) {
	    // 
	    MarkState["MarkStateNormal"] = "markStateNormal";
	    // 
	    MarkState["MarkStateHighlighted"] = "markStateHighlighted";
	    // 
	    MarkState["MarkStateSelected"] = "markStateSelected";
	    // 
	    MarkState["MarkStateInvisible"] = "markStateInvisible";
	})(MarkState = exports.MarkState || (exports.MarkState = {}));
	// LineState represents valid states for a line multi-mark.
	var LineState;
	(function (LineState) {
	    // 
	    LineState["LineStateNormal"] = "lineStateNormal";
	    // 
	    LineState["LineStateHighlighted"] = "lineStateHighlighted";
	    // 
	    LineState["LineStateSelected"] = "lineStateSelected";
	})(LineState = exports.LineState || (exports.LineState = {}));
	// RenderPass represents each pass over the scene elements as each layer is rendered.
	var RenderPass;
	(function (RenderPass) {
	    // 
	    RenderPass["NormalUnderPass"] = "normalUnderPass";
	    // 
	    RenderPass["NormalOnPass"] = "normalOnPass";
	    // 
	    RenderPass["HighlightedUnderPass"] = "highlightedUnderPass";
	    // 
	    RenderPass["HighlightedOnPass"] = "highlightedOnPass";
	    // 
	    RenderPass["SelectedUnderPass"] = "selectedUnderPass";
	    // 
	    RenderPass["SelectedOnPass"] = "selectedOnPass";
	    // 
	    RenderPass["RenderPassCount"] = "renderPassCount";
	})(RenderPass = exports.RenderPass || (exports.RenderPass = {}));
	// The role associated with a scene element. This allows the draw ordering to be more efficient.
	var ElementRole;
	(function (ElementRole) {
	    // 
	    ElementRole["ModelContainerRole"] = "modelContainerRole";
	    // 
	    ElementRole["BackgroundRole"] = "backgroundRole";
	    // 
	    ElementRole["UnderMarkRole"] = "underMarkRole";
	    // 
	    ElementRole["MarkRole"] = "markRole";
	    // 
	    ElementRole["UnderLabelRole"] = "underLabelRole";
	    // 
	    ElementRole["LabelRole"] = "labelRole";
	    // 
	    ElementRole["ForegroundRole"] = "foregroundRole";
	})(ElementRole = exports.ElementRole || (exports.ElementRole = {}));
	// 
	var PathElement;
	(function (PathElement) {
	    // 
	    PathElement["PathMoveTo"] = "moveto";
	    // 
	    PathElement["PathLineTo"] = "lineto";
	    // 
	    PathElement["PathCurveTo"] = "curveto";
	})(PathElement = exports.PathElement || (exports.PathElement = {}));
	// The serialization is still duplicated in JsonUtils::ZoneUtils::ZoneNames and types.js
	var ZoneType;
	(function (ZoneType) {
	    // 
	    ZoneType["ZT_Invalid"] = "invalid";
	    // section: name = worksheet name
	    ZoneType["ZT_Viz"] = "viz";
	    // 
	    ZoneType["ZT_ColorLegend"] = "color";
	    // 
	    ZoneType["ZT_ShapeLegend"] = "shape";
	    // 
	    ZoneType["ZT_SizeLegend"] = "size";
	    // 
	    ZoneType["ZT_MapLegend"] = "map";
	    // param = field name
	    ZoneType["ZT_QuickFilter"] = "filter";
	    // param = field name
	    ZoneType["ZT_Highlighter"] = "highlighter";
	    // 
	    ZoneType["ZT_CurrPage"] = "current-page";
	    // section: name unused
	    ZoneType["ZT_Empty"] = "empty";
	    // param = title
	    ZoneType["ZT_Title"] = "title";
	    // param = text
	    ZoneType["ZT_Text"] = "text";
	    // param = file name
	    ZoneType["ZT_Bitmap"] = "bitmap";
	    // param = URL
	    ZoneType["ZT_Web"] = "web";
	    // param = add-in id
	    ZoneType["ZT_AddIn"] = "add-in";
	    // 
	    ZoneType["ZT_DashboardObject"] = "dashboard-object";
	    // param = field name
	    ZoneType["ZT_ParamCtrl"] = "paramctrl";
	    // 
	    ZoneType["ZT_FlipboardNav"] = "flipboard-nav";
	    // 
	    ZoneType["ZT_Flipboard"] = "flipboard";
	    // section: layout
	    ZoneType["ZT_LayoutBasic"] = "layout-basic";
	    // 
	    ZoneType["ZT_LayoutFlow"] = "layout-flow";
	    // 
	    ZoneType["ZT_LayoutFreeForm"] = "layout-free-form";
	    // used only for enum iteration
	    ZoneType["ZT_End"] = "end";
	})(ZoneType = exports.ZoneType || (exports.ZoneType = {}));
	// The serialization is still duplicated in JsonUtils::ZoneUtils::DocDashboardObjectNames and types.js
	var DocDashboardObjectTypes;
	(function (DocDashboardObjectTypes) {
	    // 
	    DocDashboardObjectTypes["DBO_Invalid"] = "invalid";
	    // 
	    DocDashboardObjectTypes["DBO_Button"] = "button";
	})(DocDashboardObjectTypes = exports.DocDashboardObjectTypes || (exports.DocDashboardObjectTypes = {}));
	// 
	var ContentType;
	(function (ContentType) {
	    // section: name = worksheet name
	    ContentType["CT_Viz"] = "viz";
	    // 
	    ContentType["CT_ColorLegend"] = "color";
	    // 
	    ContentType["CT_ShapeLegend"] = "shape";
	    // 
	    ContentType["CT_SizeLegend"] = "size";
	    // 
	    ContentType["CT_MapLegend"] = "map";
	    // param = field name
	    ContentType["CT_QuickFilter"] = "filter";
	    // param = field name
	    ContentType["CT_Highlighter"] = "highlighter";
	    // 
	    ContentType["CT_CurrPage"] = "current-page";
	    // param = field name
	    ContentType["CT_ParamCtrl"] = "paramctrl";
	    // param = title
	    ContentType["CT_Title"] = "title";
	    // param = text
	    ContentType["CT_Text"] = "text";
	    // param = file name
	    ContentType["CT_Bitmap"] = "bitmap";
	    // param = URL
	    ContentType["CT_Web"] = "web";
	    // param = add-in id
	    ContentType["CT_AddIn"] = "add-in";
	    // 
	    ContentType["CT_DashboardObject"] = "dashboard-object";
	    // 
	    ContentType["CT_FlipboardNav"] = "flipboard-nav";
	    // 
	    ContentType["CT_Flipboard"] = "flipboard";
	    // Denotes that this zone has no content and therefore has a meaningful layout type
	    ContentType["CT_None"] = "content-none";
	})(ContentType = exports.ContentType || (exports.ContentType = {}));
	// 
	var ZoneLayoutType;
	(function (ZoneLayoutType) {
	    // section: layout
	    ZoneLayoutType["ZLT_Basic"] = "basic";
	    // 
	    ZoneLayoutType["ZLT_FreeForm"] = "free-form";
	    // 
	    ZoneLayoutType["ZLT_Flow"] = "flow";
	    // 
	    ZoneLayoutType["ZLT_DistributeEvenly"] = "distribute-evenly";
	    // 
	    ZoneLayoutType["ZLT_Trivial"] = "trivial";
	})(ZoneLayoutType = exports.ZoneLayoutType || (exports.ZoneLayoutType = {}));
	// Rectanlges in the box model
	var BoxType;
	(function (BoxType) {
	    // bounding rectangle in the box model
	    BoxType["BT_Bounding"] = "bounding";
	    // border rectangle in the box model excluding margins
	    BoxType["BT_Border"] = "border";
	    // content reactnage in the box model excluding margins plus borders and paddings
	    BoxType["BT_Content"] = "content";
	})(BoxType = exports.BoxType || (exports.BoxType = {}));
	// Represents the type of command to be performed on the z-order of a zone
	var ModifyZoneZOrderCommandType;
	(function (ModifyZoneZOrderCommandType) {
	    // 
	    ModifyZoneZOrderCommandType["ModifyZoneZOrderCommandFront"] = "front";
	    // 
	    ModifyZoneZOrderCommandType["ModifyZoneZOrderCommandBack"] = "back";
	    // 
	    ModifyZoneZOrderCommandType["ModifyZoneZOrderCommandRelativePos"] = "rel-pos";
	})(ModifyZoneZOrderCommandType = exports.ModifyZoneZOrderCommandType || (exports.ModifyZoneZOrderCommandType = {}));
	// Enumeration of valid horizontal alignments for text regions.
	var TextRegionHAlign;
	(function (TextRegionHAlign) {
	    // 
	    TextRegionHAlign["THA_Left"] = "h-align-left";
	    // 
	    TextRegionHAlign["THA_Center"] = "h-align-center";
	    // 
	    TextRegionHAlign["THA_Right"] = "h-align-right";
	    // 
	    TextRegionHAlign["THA_Automatic"] = "h-align-auto";
	})(TextRegionHAlign = exports.TextRegionHAlign || (exports.TextRegionHAlign = {}));
	// Enumeration of valid vertical alignments for text regions.
	var TextRegionVAlign;
	(function (TextRegionVAlign) {
	    // 
	    TextRegionVAlign["TVA_Bottom"] = "v-align-bottom";
	    // 
	    TextRegionVAlign["TVA_Center"] = "v-align-center";
	    // 
	    TextRegionVAlign["TVA_Top"] = "v-align-top";
	    // 
	    TextRegionVAlign["TVA_Automatic"] = "v-align-auto";
	})(TextRegionVAlign = exports.TextRegionVAlign || (exports.TextRegionVAlign = {}));
	// 
	var AutoCompleteItemType;
	(function (AutoCompleteItemType) {
	    // 
	    AutoCompleteItemType["ACIT_Invalid"] = "invalid";
	    // 
	    AutoCompleteItemType["ACIT_Field"] = "field";
	    // 
	    AutoCompleteItemType["ACIT_Function"] = "func";
	    // 
	    AutoCompleteItemType["ACIT_Separator"] = "separator";
	    // 
	    AutoCompleteItemType["ACIT_Header"] = "header";
	})(AutoCompleteItemType = exports.AutoCompleteItemType || (exports.AutoCompleteItemType = {}));
	// 
	var CalculationContext;
	(function (CalculationContext) {
	    // 
	    CalculationContext["CC_CalculationDialog"] = "calculation-dialog";
	    // 
	    CalculationContext["CC_TypeInPill"] = "type-in-pill";
	    // 
	    CalculationContext["CC_FilterTop"] = "filter-top";
	    // 
	    CalculationContext["CC_FilterCondition"] = "filter-condition";
	    // 
	    CalculationContext["CC_JoinCalcDialog"] = "join-calc-dialog";
	})(CalculationContext = exports.CalculationContext || (exports.CalculationContext = {}));
	// 
	var ForecastComponentType;
	(function (ForecastComponentType) {
	    // 
	    ForecastComponentType["ForecastComponentType__ETS_NONE"] = "ets-none";
	    // 
	    ForecastComponentType["ForecastComponentType__ETS_ADDITIVE"] = "ets-additive";
	    // 
	    ForecastComponentType["ForecastComponentType__ETS_MULTIPLICATIVE"] = "ets-multiplicative";
	})(ForecastComponentType = exports.ForecastComponentType || (exports.ForecastComponentType = {}));
	// 
	var PredictionIntervalAxis;
	(function (PredictionIntervalAxis) {
	    // 
	    PredictionIntervalAxis["PI_AXIS_NONE"] = "none";
	    // 
	    PredictionIntervalAxis["PI_AXIS_X"] = "axis-x";
	    // 
	    PredictionIntervalAxis["PI_AXIS_Y"] = "axis-y";
	})(PredictionIntervalAxis = exports.PredictionIntervalAxis || (exports.PredictionIntervalAxis = {}));
	// Indicates the type of quick filter
	var QuickFilterType;
	(function (QuickFilterType) {
	    // 
	    QuickFilterType["QFT_Unknown"] = "unknown";
	    // 
	    QuickFilterType["QFT_Quantitative"] = "quantitative";
	    // 
	    QuickFilterType["QFT_RelativeDate"] = "relative-date";
	    // 
	    QuickFilterType["QFT_Hierarchy"] = "hierarchy";
	    // 
	    QuickFilterType["QFT_Categorical"] = "categorical";
	})(QuickFilterType = exports.QuickFilterType || (exports.QuickFilterType = {}));
	// Indicates a categorical UI control
	var QuickFilterCategoricalCtrl;
	(function (QuickFilterCategoricalCtrl) {
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Readout"] = "readout";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Slider"] = "slider";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_StepBtns"] = "step-buttons";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_AllBtn"] = "all-buttons";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_FilterState"] = "filterstate-button";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Search"] = "search";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Domain"] = "domain";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_MoreFewerButton"] = "morefewer-button";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Exclude"] = "exclude";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Mode"] = "mode";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_Levels"] = "levels";
	    // 
	    QuickFilterCategoricalCtrl["QuickFilterCategoricalCtrl__QFCC_ApplyButton"] = "apply-button";
	})(QuickFilterCategoricalCtrl = exports.QuickFilterCategoricalCtrl || (exports.QuickFilterCategoricalCtrl = {}));
	// Indicates a categorical mode
	var QuickFilterCategoricalMode;
	(function (QuickFilterCategoricalMode) {
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_CheckList"] = "check-list";
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_RadioList"] = "radio-list";
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_Dropdown"] = "dropdown";
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_Slider"] = "slider";
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_Pattern"] = "pattern";
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_TypeInList"] = "type-in-list";
	    // 
	    QuickFilterCategoricalMode["QuickFilterCategoricalMode__QFCM_CheckDropdown"] = "check-dropdown";
	})(QuickFilterCategoricalMode = exports.QuickFilterCategoricalMode || (exports.QuickFilterCategoricalMode = {}));
	// Indicates a quantitative UI control
	var QuickFilterQuantitativeCtrl;
	(function (QuickFilterQuantitativeCtrl) {
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_Readouts"] = "readouts";
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_Slider"] = "slider";
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_NullCtrls"] = "null-controls";
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_ReldatePicker"] = "rel-date-picker";
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_Domain"] = "domain";
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_MoreFewerButton"] = "morefewer-button";
	    // 
	    QuickFilterQuantitativeCtrl["QuickFilterQuantitativeCtrl__QFQC_FilterState"] = "filterstate-button";
	})(QuickFilterQuantitativeCtrl = exports.QuickFilterQuantitativeCtrl || (exports.QuickFilterQuantitativeCtrl = {}));
	// Indicates a quantitative mode
	var QuickFilterQuantitativeMode;
	(function (QuickFilterQuantitativeMode) {
	    // 
	    QuickFilterQuantitativeMode["QuickFilterQuantitativeMode__QFQM_MinMax"] = "min-max";
	    // 
	    QuickFilterQuantitativeMode["QuickFilterQuantitativeMode__QFQM_MinOnly"] = "min-only";
	    // 
	    QuickFilterQuantitativeMode["QuickFilterQuantitativeMode__QFQM_MaxOnly"] = "max-only";
	    // 
	    QuickFilterQuantitativeMode["QuickFilterQuantitativeMode__QFQM_RelDate"] = "rel-date";
	    // 
	    QuickFilterQuantitativeMode["QuickFilterQuantitativeMode__QFQM_RelPick"] = "rel-pick";
	})(QuickFilterQuantitativeMode = exports.QuickFilterQuantitativeMode || (exports.QuickFilterQuantitativeMode = {}));
	// Where is rendering happening - client or server
	var RenderMode;
	(function (RenderMode) {
	    // 
	    RenderMode["RenderModeServer"] = "render-mode-server";
	    // 
	    RenderMode["RenderModeClient"] = "render-mode-client";
	})(RenderMode = exports.RenderMode || (exports.RenderMode = {}));
	// 
	var AddOrRemoveMarks;
	(function (AddOrRemoveMarks) {
	    // 
	    AddOrRemoveMarks["AORM_ADD"] = "add";
	    // 
	    AddOrRemoveMarks["AORM_REMOVE"] = "remove";
	})(AddOrRemoveMarks = exports.AddOrRemoveMarks || (exports.AddOrRemoveMarks = {}));
	// 
	var VisualDocEnumsGeoSearchVisibility;
	(function (VisualDocEnumsGeoSearchVisibility) {
	    // 
	    VisualDocEnumsGeoSearchVisibility["GSV_On"] = "on";
	    // 
	    VisualDocEnumsGeoSearchVisibility["GSV_Off"] = "off";
	})(VisualDocEnumsGeoSearchVisibility = exports.VisualDocEnumsGeoSearchVisibility || (exports.VisualDocEnumsGeoSearchVisibility = {}));
	// 
	var VisualDocEnumsMapScaleVisibility;
	(function (VisualDocEnumsMapScaleVisibility) {
	    // 
	    VisualDocEnumsMapScaleVisibility["MSV_On"] = "on";
	    // 
	    VisualDocEnumsMapScaleVisibility["MSV_Off"] = "off";
	})(VisualDocEnumsMapScaleVisibility = exports.VisualDocEnumsMapScaleVisibility || (exports.VisualDocEnumsMapScaleVisibility = {}));
	// 
	var VisualDocEnumsAutoDrillVisibility;
	(function (VisualDocEnumsAutoDrillVisibility) {
	    // 
	    VisualDocEnumsAutoDrillVisibility["ADV_On"] = "on";
	    // 
	    VisualDocEnumsAutoDrillVisibility["ADV_Off"] = "off";
	})(VisualDocEnumsAutoDrillVisibility = exports.VisualDocEnumsAutoDrillVisibility || (exports.VisualDocEnumsAutoDrillVisibility = {}));
	// 
	var VisualDocEnumsMapToolSelection;
	(function (VisualDocEnumsMapToolSelection) {
	    // 
	    VisualDocEnumsMapToolSelection["MT_Pan_Map"] = "pan-map";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Rectangular_Selection"] = "rectangular-selection";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Radial_Selection"] = "radial-selection";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Zoom_In"] = "zoom-in";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Zoom_Out"] = "zoom-out";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Single_Selection"] = "single-selection";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Lasso_Selection"] = "lasso-selection";
	    // 
	    VisualDocEnumsMapToolSelection["MT_All_Selection_Tools"] = "all-selection-tools";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Area_Zoom"] = "area-zoom";
	    // 
	    VisualDocEnumsMapToolSelection["MT_No_Tools"] = "no-tools";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Advanced_Selection_Tools"] = "advanced-selection-tools";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Map_Tools"] = "map-tools";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Non_Map_Tools"] = "non-map-tools";
	    // 
	    VisualDocEnumsMapToolSelection["MT_Tool_Mask"] = "tool-mask";
	})(VisualDocEnumsMapToolSelection = exports.VisualDocEnumsMapToolSelection || (exports.VisualDocEnumsMapToolSelection = {}));
	// 
	var VisualDocEnumsFloatingToolbarVisibility;
	(function (VisualDocEnumsFloatingToolbarVisibility) {
	    // 
	    VisualDocEnumsFloatingToolbarVisibility["FTV_Auto"] = "auto";
	    // 
	    VisualDocEnumsFloatingToolbarVisibility["FTV_Show"] = "show";
	    // 
	    VisualDocEnumsFloatingToolbarVisibility["FTV_Hide"] = "hide";
	})(VisualDocEnumsFloatingToolbarVisibility = exports.VisualDocEnumsFloatingToolbarVisibility || (exports.VisualDocEnumsFloatingToolbarVisibility = {}));
	// 
	var VisualDocEnumsVizNavigationSetting;
	(function (VisualDocEnumsVizNavigationSetting) {
	    // 
	    VisualDocEnumsVizNavigationSetting["NAV_Auto"] = "auto";
	    // 
	    VisualDocEnumsVizNavigationSetting["NAV_Fixed"] = "fixed";
	})(VisualDocEnumsVizNavigationSetting = exports.VisualDocEnumsVizNavigationSetting || (exports.VisualDocEnumsVizNavigationSetting = {}));
	// 
	var VisualDocEnumsZoomType;
	(function (VisualDocEnumsZoomType) {
	    // 
	    VisualDocEnumsZoomType["Percent"] = "percent";
	    // 
	    VisualDocEnumsZoomType["EntireView"] = "entire-view";
	    // 
	    VisualDocEnumsZoomType["FitWidth"] = "fit-width";
	    // 
	    VisualDocEnumsZoomType["FitHeight"] = "fit-height";
	})(VisualDocEnumsZoomType = exports.VisualDocEnumsZoomType || (exports.VisualDocEnumsZoomType = {}));
	// 
	var SheetScrollDirection;
	(function (SheetScrollDirection) {
	    // scroll-first
	    SheetScrollDirection["SheetScrollFirst"] = "scroll-first";
	    // scroll-prev
	    SheetScrollDirection["SheetScrollPrev"] = "scroll-prev";
	    // scroll-next
	    SheetScrollDirection["SheetScrollNext"] = "scroll-next";
	    // scroll-last
	    SheetScrollDirection["SheetScrollLast"] = "scroll-last";
	})(SheetScrollDirection = exports.SheetScrollDirection || (exports.SheetScrollDirection = {}));
	// aggregation type for perspectives
	var PerspectiveUtilsAggregateType;
	(function (PerspectiveUtilsAggregateType) {
	    // 
	    PerspectiveUtilsAggregateType["REALITY"] = "reality";
	    // 
	    PerspectiveUtilsAggregateType["FIRST"] = "first-time-in-cube";
	    // 
	    PerspectiveUtilsAggregateType["LAST"] = "latest-time-in-cube";
	    // 
	    PerspectiveUtilsAggregateType["CUSTOM_FOR_CUBE"] = "custom-for-cube";
	    // 
	    PerspectiveUtilsAggregateType["CUSTOM_PER_ATTRIBUTE"] = "custom-per-attribute";
	})(PerspectiveUtilsAggregateType = exports.PerspectiveUtilsAggregateType || (exports.PerspectiveUtilsAggregateType = {}));
	// 
	var ZoneEdgeMove;
	(function (ZoneEdgeMove) {
	    // 
	    ZoneEdgeMove["EdgeDrag"] = "edge-drag";
	    // 
	    ZoneEdgeMove["EdgeSnapAlign"] = "edge-snap-align";
	    // 
	    ZoneEdgeMove["EdgeSnapPosition"] = "edge-snap-position";
	})(ZoneEdgeMove = exports.ZoneEdgeMove || (exports.ZoneEdgeMove = {}));
	// 
	var FormatControlType;
	(function (FormatControlType) {
	    // 
	    FormatControlType["FCT_NONE"] = "fct-none";
	    // 
	    FormatControlType["FCT_Color"] = "fct-color";
	    // 
	    FormatControlType["FCT_Font"] = "fct-font";
	    // 
	    FormatControlType["FCT_Border"] = "fct-border";
	    // 
	    FormatControlType["FCT_Stroke"] = "fct-stroke";
	    // 
	    FormatControlType["FCT_Number"] = "fct-number";
	    // 
	    FormatControlType["FCT_Layout"] = "fct-layout";
	    // 
	    FormatControlType["FCT_Text"] = "fct-text";
	    // 
	    FormatControlType["FCT_OptColor"] = "fct-optcolor";
	    // 
	    FormatControlType["FCT_BandColor"] = "fct-bandcolor";
	    // 
	    FormatControlType["FCT_BandSize"] = "fct-bandsize";
	    // 
	    FormatControlType["FCT_BandLevel"] = "fct-bandlevel";
	    // 
	    FormatControlType["FCT_DivLevel"] = "fct-divlevel";
	    // 
	    FormatControlType["FCT_SpecValsText"] = "fct-specvalstext";
	    // 
	    FormatControlType["FCT_SpecValsGraph"] = "fct-specvalsgraph";
	    // 
	    FormatControlType["FCT_HAlign"] = "fct-halign";
	    // 
	    FormatControlType["FCT_Orient"] = "fct-orient";
	    // 
	    FormatControlType["FCT_Rounding"] = "fct-rounding";
	    // 
	    FormatControlType["FCT_LineEnd"] = "fct-lineend";
	    // 
	    FormatControlType["FCT_LineEndSize"] = "fct-lineendsize";
	    // 
	    FormatControlType["FCT_BodyType"] = "fct-bodytype";
	    // 
	    FormatControlType["FCT_AlphaLevel"] = "fct-alphalevel";
	    // 
	    FormatControlType["FCT_LineInterpolation"] = "fct-line-interpolation";
	    // 
	    FormatControlType["FCT_MarkBorder"] = "fct-markborder";
	    // 
	    FormatControlType["FCT_MarkHalo"] = "fct-markhalo";
	    // 
	    FormatControlType["FCT_MarkMarkers"] = "fct-markmarkers";
	    // 
	    FormatControlType["FCT_RefLinePalette"] = "fct-reflinepalette";
	    // 
	    FormatControlType["FCT_Reverse"] = "fct-reverse";
	    // 
	    FormatControlType["FCT_Whiskers"] = "fct-whiskers";
	    // 
	    FormatControlType["FCT_BoxplotPalette"] = "fct-boxplotpalette";
	    // 
	    FormatControlType["FCT_SolidStroke"] = "fct-solidstroke";
	    // 
	    FormatControlType["FCT_BoxplotStyle"] = "fct-boxplotstyle";
	    // 
	    FormatControlType["FCT_BoxplotCompoundFill"] = "fct-boxplotcompoundfill";
	})(FormatControlType = exports.FormatControlType || (exports.FormatControlType = {}));
	// 
	var FormatControlFlag;
	(function (FormatControlFlag) {
	    // 
	    FormatControlFlag["FCF_VisualStylesheet"] = "fcf_visualstylesheet";
	    // 
	    FormatControlFlag["FCF_PaneStylesheet"] = "fcf_panestylesheet";
	    // 
	    FormatControlFlag["FCF_FixedScope"] = "fcf_fixedscope";
	    // 
	    FormatControlFlag["FCF_AllowTransparency"] = "fcf_allowtransparency";
	})(FormatControlFlag = exports.FormatControlFlag || (exports.FormatControlFlag = {}));
	// 
	var AppConfigEnum;
	(function (AppConfigEnum) {
	    // default directory where Tableau finds data sources, logs, shapes, etc.
	    AppConfigEnum["ACS_RepositoryDir"] = "repository-dir";
	    // application directory
	    AppConfigEnum["ACS_ApplicationDir"] = "application-dir";
	    // sample workbooks directory
	    AppConfigEnum["ACS_SamplesDir"] = "samples-dir";
	})(AppConfigEnum = exports.AppConfigEnum || (exports.AppConfigEnum = {}));
	// 
	var DeltaType;
	(function (DeltaType) {
	    // 
	    DeltaType["DELTA_NONE"] = "none";
	    // 
	    DeltaType["DELTA_ADDED"] = "added";
	    // 
	    DeltaType["DELTA_EDITED"] = "edited";
	    // 
	    DeltaType["DELTA_REMOVED"] = "removed";
	})(DeltaType = exports.DeltaType || (exports.DeltaType = {}));
	// 
	var ExtractType;
	(function (ExtractType) {
	    // 
	    ExtractType["ExtractType_All"] = "extract-type-all";
	    // 
	    ExtractType["ExtractType_Some"] = "extract-type-some";
	    // 
	    ExtractType["ExtractType_None"] = "extract-type-none";
	})(ExtractType = exports.ExtractType || (exports.ExtractType = {}));
	// 
	var ExtractRefreshStatus;
	(function (ExtractRefreshStatus) {
	    // 
	    ExtractRefreshStatus["ExtractRefresh_None"] = "extract-refresh-none";
	    // 
	    ExtractRefreshStatus["ExtractRefresh_Pending"] = "extract-refresh-pending";
	    // 
	    ExtractRefreshStatus["ExtractRefresh_InProgress"] = "extract-refresh-inprogress";
	    // 
	    ExtractRefreshStatus["ExtractRefresh_Done"] = "extract-refresh-done";
	    // 
	    ExtractRefreshStatus["ExtractRefresh_Error"] = "extract-refresh-error";
	    // 
	    ExtractRefreshStatus["ExtractRefresh_Canceled"] = "extract-refresh-canceled";
	})(ExtractRefreshStatus = exports.ExtractRefreshStatus || (exports.ExtractRefreshStatus = {}));
	// 
	var MapUnitSelectionEnum;
	(function (MapUnitSelectionEnum) {
	    // 
	    MapUnitSelectionEnum["MUS_Automatic"] = "automatic";
	    // 
	    MapUnitSelectionEnum["MUS_Metric"] = "metric";
	    // 
	    MapUnitSelectionEnum["MUS_US"] = "us";
	})(MapUnitSelectionEnum = exports.MapUnitSelectionEnum || (exports.MapUnitSelectionEnum = {}));
	// 
	var DataConnectionHistoryRefreshType;
	(function (DataConnectionHistoryRefreshType) {
	    // 
	    DataConnectionHistoryRefreshType["RT_FULL"] = "full";
	    // 
	    DataConnectionHistoryRefreshType["RT_INCREMENT"] = "increment";
	    // 
	    DataConnectionHistoryRefreshType["RT_APPEND_FROM_DATA_SOURCE"] = "append-from-data-source";
	    // 
	    DataConnectionHistoryRefreshType["RT_APPEND_FROM_FILE"] = "append-from-file";
	})(DataConnectionHistoryRefreshType = exports.DataConnectionHistoryRefreshType || (exports.DataConnectionHistoryRefreshType = {}));
	// 
	var CalcStyle;
	(function (CalcStyle) {
	    // 
	    CalcStyle["SCE_STYLE_DEFAULT"] = "style_default";
	    // 
	    CalcStyle["SCE_STYLE_PRIMARY_FIELD"] = "style_prim_field";
	    // 
	    CalcStyle["SCE_STYLE_SECONDARY_FIELD"] = "style_sec_field";
	    // 
	    CalcStyle["SCE_STYLE_LOCAL_FUNCTION"] = "style_local_func";
	    // 
	    CalcStyle["SCE_STYLE_REMOTE_FUNCTION"] = "style_remote_func";
	    // 
	    CalcStyle["SCE_STYLE_PARAMETER"] = "style_param";
	    // 
	    CalcStyle["SCE_STYLE_COMMENT"] = "style_comment";
	    // 
	    CalcStyle["SCE_STYLE_INVALID_FIELD"] = "style_invalid_field";
	    // 
	    CalcStyle["SCE_STYLE_TABLE_EXPR"] = "style_table_expr";
	    // 
	    CalcStyle["SCE_STYLE_STRING"] = "style_string";
	    // 
	    CalcStyle["SCE_STYLE_DISABLED"] = "style_disabled";
	    // 
	    CalcStyle["SCE_STYLE_DRAG_OVER_FIELD"] = "style_drag_over_field";
	    // 
	    CalcStyle["SCE_STYLE_DRAG_OVER_SEL"] = "style_drag_over_sel";
	    // 
	    CalcStyle["SCE_STYLE_SELECTION"] = "style_selection";
	})(CalcStyle = exports.CalcStyle || (exports.CalcStyle = {}));
	// 
	var FunctionGroup;
	(function (FunctionGroup) {
	    // 
	    FunctionGroup["FG_NUMERIC"] = "num";
	    // 
	    FunctionGroup["FG_STRING"] = "str";
	    // 
	    FunctionGroup["FG_DATE"] = "date";
	    // 
	    FunctionGroup["FG_CAST"] = "cast";
	    // 
	    FunctionGroup["FG_LOGICAL"] = "logic";
	    // 
	    FunctionGroup["FG_AGGREGATE"] = "agg";
	    // 
	    FunctionGroup["FG_OPERATOR"] = "oper";
	    // 
	    FunctionGroup["FG_SYSTEM"] = "sys";
	    // 
	    FunctionGroup["FG_PASSTHRU"] = "pass";
	    // 
	    FunctionGroup["FG_SPECIAL"] = "spec";
	    // 
	    FunctionGroup["FG_USER"] = "user";
	    // 
	    FunctionGroup["FG_TABLECALC"] = "table";
	})(FunctionGroup = exports.FunctionGroup || (exports.FunctionGroup = {}));
	// 
	var FunctionArgType;
	(function (FunctionArgType) {
	    // 
	    FunctionArgType["FAT_NONE"] = "none";
	    // 
	    FunctionArgType["FAT_BOOL"] = "boolean";
	    // 
	    FunctionArgType["FAT_REAL"] = "real";
	    // 
	    FunctionArgType["FAT_INT"] = "integer";
	    // 
	    FunctionArgType["FAT_STR"] = "str";
	    // 
	    FunctionArgType["FAT_DATETIME"] = "datetime";
	    // 
	    FunctionArgType["FAT_DATE"] = "date";
	    // 
	    FunctionArgType["FAT_LOCALSTR"] = "locstr";
	    // 
	    FunctionArgType["FAT_NULL"] = "nil";
	    // 
	    FunctionArgType["FAT_ERROR"] = "err";
	    // 
	    FunctionArgType["FAT_ANY"] = "any";
	    // 
	    FunctionArgType["FAT_BIN"] = "bin";
	    // 
	    FunctionArgType["FAT_TUPLE"] = "tup";
	    // 
	    FunctionArgType["FAT_LOCALREAL"] = "locreal";
	    // 
	    FunctionArgType["FAT_LOCALINT"] = "locint";
	    // 
	    FunctionArgType["FAT_SPATIAL"] = "spatial";
	})(FunctionArgType = exports.FunctionArgType || (exports.FunctionArgType = {}));
	// logical position of activity such as Began or Ended
	var ActivityDisposition;
	(function (ActivityDisposition) {
	    // no activity
	    ActivityDisposition["NoDisposition"] = "no-disposition";
	    // activity has began
	    ActivityDisposition["Began"] = "began";
	    // activity has ended
	    ActivityDisposition["Ended"] = "ended";
	    // activity has occurred but neither began nor ended is known
	    ActivityDisposition["Occurred"] = "occurred";
	    // indefinite activity is executing
	    ActivityDisposition["Active"] = "active";
	    // indefinite activity has yielded (e.g., idle, waiting, sleeping, quiesce)
	    ActivityDisposition["Idle"] = "idle";
	})(ActivityDisposition = exports.ActivityDisposition || (exports.ActivityDisposition = {}));
	// result of activity such as Success and Failure
	var ActivityResult;
	(function (ActivityResult) {
	    // activity has no result
	    ActivityResult["NoResult"] = "no-result";
	    // activity ended with success
	    ActivityResult["Succeeded"] = "succeeded";
	    // activity ended with failure
	    ActivityResult["Failed"] = "failure";
	    // activity ended with thrown exception
	    ActivityResult["ThrewException"] = "threw-exception";
	    // activity ended due to a timeout
	    ActivityResult["TimedOut"] = "timed-out";
	    // activity was canceled
	    ActivityResult["Canceled"] = "canceled";
	    // activity has unknown result
	    ActivityResult["UnknownResult"] = "unknown-result";
	})(ActivityResult = exports.ActivityResult || (exports.ActivityResult = {}));
	// type of analytics object
	var AnalyticsObjectType;
	(function (AnalyticsObjectType) {
	    // 
	    AnalyticsObjectType["ConstantReferenceLine"] = "constant-reference-line";
	    // 
	    AnalyticsObjectType["AverageReferenceLine"] = "average-reference-line";
	    // 
	    AnalyticsObjectType["CustomReferenceLine"] = "custom-reference-line";
	    // 
	    AnalyticsObjectType["CustomReferenceBand"] = "custom-reference-band";
	    // 
	    AnalyticsObjectType["AverageAndNinetyFive"] = "average-and-ninety-five";
	    // 
	    AnalyticsObjectType["MedianAndNinetyFive"] = "median-and-ninety-five";
	    // 
	    AnalyticsObjectType["CustomDistributionBand"] = "custom-distribution-band";
	    // 
	    AnalyticsObjectType["Boxplot"] = "boxplot";
	    // 
	    AnalyticsObjectType["CustomBoxplot"] = "custom-boxplot";
	    // 
	    AnalyticsObjectType["Totals"] = "totals";
	    // 
	    AnalyticsObjectType["TrendLineObject"] = "trend-line-object";
	    // 
	    AnalyticsObjectType["Forecast"] = "forecast";
	    // 
	    AnalyticsObjectType["Cluster"] = "cluster";
	    // 
	    AnalyticsObjectType["Outlier"] = "outlier";
	    // 
	    AnalyticsObjectType["MedianAndQuartiles"] = "median-and-quartiles";
	    // 
	    AnalyticsObjectType["Unknown"] = "unknown";
	})(AnalyticsObjectType = exports.AnalyticsObjectType || (exports.AnalyticsObjectType = {}));
	// target where an analytics object may be dropped
	var AnalyticsObjectDropTarget;
	(function (AnalyticsObjectDropTarget) {
	    // 
	    AnalyticsObjectDropTarget["TargetCell"] = "target-cell";
	    // 
	    AnalyticsObjectDropTarget["TargetPane"] = "target-pane";
	    // 
	    AnalyticsObjectDropTarget["TargetTable"] = "target-table";
	    // 
	    AnalyticsObjectDropTarget["TargetLinear"] = "target-linear";
	    // 
	    AnalyticsObjectDropTarget["TargetLog"] = "target-log";
	    // 
	    AnalyticsObjectDropTarget["TargetExponential"] = "target-exponential";
	    // 
	    AnalyticsObjectDropTarget["TargetPolynomial"] = "target-polynomial";
	    // 
	    AnalyticsObjectDropTarget["TargetPower"] = "target-power";
	    // 
	    AnalyticsObjectDropTarget["TargetForecast"] = "target-forecast";
	    // 
	    AnalyticsObjectDropTarget["TargetCluster"] = "target-cluster";
	    // 
	    AnalyticsObjectDropTarget["TargetOutlier"] = "target-outlier";
	    // 
	    AnalyticsObjectDropTarget["TargetSubtotals"] = "target-subtotals";
	    // 
	    AnalyticsObjectDropTarget["TargetColumnTotals"] = "target-column-totals";
	    // 
	    AnalyticsObjectDropTarget["TargetRowTotals"] = "target-row-totals";
	})(AnalyticsObjectDropTarget = exports.AnalyticsObjectDropTarget || (exports.AnalyticsObjectDropTarget = {}));
	// 
	var CalcApplyResult;
	(function (CalcApplyResult) {
	    // caption for new calculation is invalid
	    CalcApplyResult["INVALID_CAPTION"] = "invalid-caption-for-new-calc";
	    // formula is invalid
	    CalcApplyResult["INVALID_FORMULA"] = "invalid-formula";
	    // successfully applied
	    CalcApplyResult["SUCCEED"] = "succeed";
	})(CalcApplyResult = exports.CalcApplyResult || (exports.CalcApplyResult = {}));
	// 
	var UIAutomationCommandStatus;
	(function (UIAutomationCommandStatus) {
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_Success"] = "success";
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_UnsupportedControlTypeError"] = "unsupported-control-type-error";
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_UnsupportedActionError"] = "unsupported-action-error";
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_ComponentNotFoundError"] = "component-not-found-error";
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_UnknownError"] = "unknown-error";
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_SaveError"] = "save-error";
	    // 
	    UIAutomationCommandStatus["UIAutomationCommandStatus_BadInputError"] = "bad-input-error";
	})(UIAutomationCommandStatus = exports.UIAutomationCommandStatus || (exports.UIAutomationCommandStatus = {}));
	// 
	var DropWhen;
	(function (DropWhen) {
	    // 
	    DropWhen["DropWhenNever"] = "never";
	    // 
	    DropWhen["DropWhenAlways"] = "always";
	    // 
	    DropWhen["DropWhenSelected"] = "when-selected";
	})(DropWhen = exports.DropWhen || (exports.DropWhen = {}));
	// 
	var ValueDomainType;
	(function (ValueDomainType) {
	    // invalid domain
	    ValueDomainType["DOMAIN_INVALID"] = "domain-invalid";
	    // user can type in any value they please" 1
	    ValueDomainType["DOMAIN_FREE_ENTRY"] = "domain-free-entry";
	    // user must select a value from the list
	    ValueDomainType["DOMAIN_LIST"] = "domain-list";
	    // user can freely enter values as long as they are above min value
	    ValueDomainType["DOMAIN_MIN"] = "domain-min";
	    // user can freely enter values as long as they are below max value
	    ValueDomainType["DOMAIN_MAX"] = "domain-max";
	})(ValueDomainType = exports.ValueDomainType || (exports.ValueDomainType = {}));
	// 
	var OperationType;
	(function (OperationType) {
	    // 
	    OperationType["Equals"] = "equals";
	    // 
	    OperationType["NotEquals"] = "not-equals";
	    // 
	    OperationType["LessThan"] = "less-than";
	    // 
	    OperationType["LessThanEqual"] = "less-than-equal";
	    // 
	    OperationType["GreaterThan"] = "greater-than";
	    // 
	    OperationType["GreaterThanEqual"] = "greater-than-equal";
	    // 
	    OperationType["RangeInclusive"] = "range-inclusive";
	})(OperationType = exports.OperationType || (exports.OperationType = {}));
	// 
	var DropFieldResult;
	(function (DropFieldResult) {
	    // 
	    DropFieldResult["DropFieldNo"] = "no";
	    // 
	    DropFieldResult["DropFieldYes"] = "yes";
	    // 
	    DropFieldResult["DropFieldLock"] = "lock";
	    // 
	    DropFieldResult["DropFieldFilter"] = "filter";
	    // 
	    DropFieldResult["DropFieldDisaggregate"] = "disaggregate";
	})(DropFieldResult = exports.DropFieldResult || (exports.DropFieldResult = {}));
	// resolution type for a name conflict
	var NameConflictResolution;
	(function (NameConflictResolution) {
	    // 
	    NameConflictResolution["NRC_UseOld"] = "use-old";
	    // 
	    NameConflictResolution["NRC_UseNew"] = "use-new";
	    // 
	    NameConflictResolution["NRC_RenameNew"] = "rename-new";
	})(NameConflictResolution = exports.NameConflictResolution || (exports.NameConflictResolution = {}));
	// use either a string separator or a set number of characters
	var SeparatorType;
	(function (SeparatorType) {
	    // 
	    SeparatorType["SeparatorType__StringSeparator"] = "string-separator";
	    // 
	    SeparatorType["SeparatorType__CharacterCountSeparator"] = "character-count-separator";
	})(SeparatorType = exports.SeparatorType || (exports.SeparatorType = {}));
	// split globally or only on the first occurrence or only on the last occurrence
	var SplitMode;
	(function (SplitMode) {
	    // 
	    SplitMode["SplitMode__CS_ALL"] = "split-all";
	    // 
	    SplitMode["SplitMode__CS_FIRST"] = "split-first";
	    // 
	    SplitMode["SplitMode__CS_LAST"] = "split-last";
	})(SplitMode = exports.SplitMode || (exports.SplitMode = {}));
	// 
	var NodeSelectionType;
	(function (NodeSelectionType) {
	    // 
	    NodeSelectionType["NodeSelection_None"] = "none";
	    // 
	    NodeSelectionType["NodeSelection_SingleRow"] = "single-row";
	    // 
	    NodeSelectionType["NodeSelection_MultiRow"] = "multi-row";
	    // 
	    NodeSelectionType["NodeSelection_SingleColumn"] = "single-column";
	    // 
	    NodeSelectionType["NodeSelection_MultiColumn"] = "multi-column";
	    // 
	    NodeSelectionType["NodeSelection_Mixed"] = "mixed";
	})(NodeSelectionType = exports.NodeSelectionType || (exports.NodeSelectionType = {}));
	// icons for Action{Source/Dest}Combo
	var SourceDestIcon;
	(function (SourceDestIcon) {
	    // 
	    SourceDestIcon["SDI_DataSource"] = "data-source";
	    // 
	    SourceDestIcon["SDI_Worksheet"] = "worksheet";
	    // 
	    SourceDestIcon["SDI_Dashboard"] = "dashboard";
	    // 
	    SourceDestIcon["SDI_All"] = "all";
	})(SourceDestIcon = exports.SourceDestIcon || (exports.SourceDestIcon = {}));
	// position and orientation of legends on a sheet
	var LegendLayout;
	(function (LegendLayout) {
	    // 
	    LegendLayout["LL_RightVertical"] = "right-vertical";
	    // 
	    LegendLayout["LL_RightHorizontal"] = "right-horizontal";
	    // 
	    LegendLayout["LL_BottomVertical"] = "bottom-vertical";
	    // 
	    LegendLayout["LL_BottomHorizontal"] = "bottom-horizontal";
	})(LegendLayout = exports.LegendLayout || (exports.LegendLayout = {}));
	// 
	var GetJsonResponseEnum;
	(function (GetJsonResponseEnum) {
	    // the json reponse exists and is valid
	    GetJsonResponseEnum["JSON_OK"] = "ok";
	    // the sheet specified is not valid
	    GetJsonResponseEnum["JSON_NO_SHEET"] = "no-sheet";
	    // the field id is invalid for this filter
	    GetJsonResponseEnum["JSON_INVALID_FIELD"] = "invalid-field";
	})(GetJsonResponseEnum = exports.GetJsonResponseEnum || (exports.GetJsonResponseEnum = {}));
	// client metric descriptions
	var ClientMetric;
	(function (ClientMetric) {
	    // Unknown Metric
	    ClientMetric["CM_Unknown"] = "UNKNWN";
	    // Bootstrap Request
	    ClientMetric["CM_BootstrapRequest"] = "BTSTRP";
	    // Process Primary Payload
	    ClientMetric["CM_ProcessPrimaryPayload"] = "PROPRI";
	    // Process Secondary Payload
	    ClientMetric["CM_ProcessSecondaryPayload"] = "PROSEC";
	    // Initialize Models
	    ClientMetric["CM_InitializeModels"] = "MDLINI";
	    // Handle Model Events
	    ClientMetric["CM_HandleModelEvents"] = "MDLEVT";
	    // Execute Local Command
	    ClientMetric["CM_ExecuteLocalCommand"] = "EXELOC";
	    // Execute Remote Command
	    ClientMetric["CM_ExecuteRemoteCommand"] = "EXEREM";
	    // Process Local Command Response
	    ClientMetric["CM_ProcessLocalResponse"] = "PROLOC";
	    // Process Remote Command Response
	    ClientMetric["CM_ProcessRemoteResponse"] = "PROREM";
	    // Render Panetable
	    ClientMetric["CM_RenderPanetable"] = "RNDRPT";
	    // Render Region
	    ClientMetric["CM_RenderRegion"] = "RNDRRG";
	    // Runtime model presmodel conversion
	    ClientMetric["CM_RuntimeConversion"] = "RTCONV";
	    // Client Loaded
	    ClientMetric["CM_ClientLoaded"] = "CLNTLD";
	    // Application Startup
	    ClientMetric["CM_ApplicationStartup"] = "APPSTR";
	    // Application Interactive
	    ClientMetric["CM_ApplicationInteractive"] = "APPINT";
	    // All Zones Loaded
	    ClientMetric["CM_AllZonesLoaded"] = "ALLZNS";
	    // Toolbar Layout
	    ClientMetric["CM_ToolbarLayout"] = "TBRLAY";
	    // Toolbar HandleNewToolbar
	    ClientMetric["CM_ToolbarHandleNewToolbar"] = "TBRHNT";
	    // Toolbar AddToolbar
	    ClientMetric["CM_ToolbarAddToolbar"] = "TBRADD";
	    // Toolbar HandleResize
	    ClientMetric["CM_ToolbarHandleResize"] = "TBRHRE";
	    // JavaScript Module loaded asynchronously
	    ClientMetric["CM_ModuleLoaded"] = "MDLOAD";
	    // Emscripten method onRuntimeInitialized called, and initial payload ready
	    ClientMetric["CM_RuntimeLoaded"] = "RTLOAD";
	    // Initial payload executed in the runtime
	    ClientMetric["CM_RuntimeFirstRun"] = "RTFRUN";
	})(ClientMetric = exports.ClientMetric || (exports.ClientMetric = {}));
	// result code for images edit operation
	var ImagesEditResultCode;
	(function (ImagesEditResultCode) {
	    // 
	    ImagesEditResultCode["IER_Success"] = "success";
	    // 
	    ImagesEditResultCode["IER_EmptyCaption"] = "empty-caption";
	    // 
	    ImagesEditResultCode["IER_DuplicateCaption"] = "duplicate-caption";
	    // 
	    ImagesEditResultCode["IER_FailedValidation"] = "failed-validation";
	    // 
	    ImagesEditResultCode["IER_InvalidURL"] = "invalid-url";
	    // 
	    ImagesEditResultCode["IER_EmptyXRange"] = "empty-x-range";
	    // 
	    ImagesEditResultCode["IER_EmptyYRange"] = "empty-y-range";
	    // 
	    ImagesEditResultCode["IER_NoImagePreview"] = "no-image-preview";
	    // 
	    ImagesEditResultCode["IER_RenderException"] = "render-exception";
	    // 
	    ImagesEditResultCode["IER_TableauException"] = "tableau-exception";
	})(ImagesEditResultCode = exports.ImagesEditResultCode || (exports.ImagesEditResultCode = {}));
	// the source of the underlying data used by the data provider
	var DataProviderType;
	(function (DataProviderType) {
	    // 
	    DataProviderType["DP_Datasource"] = "datasource";
	    // 
	    DataProviderType["DP_Selection"] = "selection";
	    // 
	    DataProviderType["DP_Table"] = "table";
	    // 
	    DataProviderType["DP_SQLQuery"] = "sql-query";
	})(DataProviderType = exports.DataProviderType || (exports.DataProviderType = {}));
	// 
	var DashboardDeviceLayout;
	(function (DashboardDeviceLayout) {
	    // 
	    DashboardDeviceLayout["DashboardDeviceLayout_Default"] = "default";
	    // 
	    DashboardDeviceLayout["DashboardDeviceLayout_Desktop"] = "desktop";
	    // 
	    DashboardDeviceLayout["DashboardDeviceLayout_Tablet"] = "tablet";
	    // 
	    DashboardDeviceLayout["DashboardDeviceLayout_Phone"] = "phone";
	})(DashboardDeviceLayout = exports.DashboardDeviceLayout || (exports.DashboardDeviceLayout = {}));
	// who is calling the device detection logic
	var DeviceSource;
	(function (DeviceSource) {
	    // Nothing special about the caller to the detection logic. This means it is the web browser.
	    DeviceSource["DeviceSource_Unknown"] = "unknown";
	    // the snapshot service for the mobile app
	    DeviceSource["DeviceSource_SnapshotService"] = "snapshot-srv";
	    // the :device url parameter
	    DeviceSource["DeviceSource_UrlParam"] = "url-param";
	})(DeviceSource = exports.DeviceSource || (exports.DeviceSource = {}));
	// 
	var DashboardSizingDimension;
	(function (DashboardSizingDimension) {
	    // 
	    DashboardSizingDimension["NoDimension"] = "no";
	    // 
	    DashboardSizingDimension["MinWidthDimension"] = "minwidth";
	    // 
	    DashboardSizingDimension["MinHeightDimension"] = "minheight";
	    // 
	    DashboardSizingDimension["MaxWidthDimension"] = "maxwidth";
	    // 
	    DashboardSizingDimension["MaxHeightDimension"] = "maxheight";
	    // 
	    DashboardSizingDimension["FixedWidthDimension"] = "fixedwidth";
	    // 
	    DashboardSizingDimension["FixedHeightDimension"] = "fixedheight";
	    // 
	    DashboardSizingDimension["ScrollableHeightDimension"] = "scrollableheight";
	    // 
	    DashboardSizingDimension["MinDimensions"] = "mins";
	    // 
	    DashboardSizingDimension["MaxDimensions"] = "maxs";
	})(DashboardSizingDimension = exports.DashboardSizingDimension || (exports.DashboardSizingDimension = {}));
	// 
	var FlipboardNavType;
	(function (FlipboardNavType) {
	    // 
	    FlipboardNavType["Caption"] = "caption";
	    // 
	    FlipboardNavType["Number"] = "number";
	    // 
	    FlipboardNavType["Dot"] = "dot";
	    // 
	    FlipboardNavType["ArrowOnly"] = "arrowonly";
	})(FlipboardNavType = exports.FlipboardNavType || (exports.FlipboardNavType = {}));
	// 
	var DashboardSizingMode;
	(function (DashboardSizingMode) {
	    // 
	    DashboardSizingMode["UnspecifiedSizing"] = "unspecified";
	    // 
	    DashboardSizingMode["AutomaticSizing"] = "automatic";
	    // 
	    DashboardSizingMode["FixedSizing"] = "fixed";
	    // 
	    DashboardSizingMode["RangeSizing"] = "range";
	    // 
	    DashboardSizingMode["VScrollSizing"] = "vscroll";
	})(DashboardSizingMode = exports.DashboardSizingMode || (exports.DashboardSizingMode = {}));
	// 
	var GridOverlayMode;
	(function (GridOverlayMode) {
	    // 
	    GridOverlayMode["GOM_Automatic"] = "gom-automatic";
	    // 
	    GridOverlayMode["GOM_On"] = "gom-on";
	    // 
	    GridOverlayMode["GOM_Off"] = "gom-off";
	})(GridOverlayMode = exports.GridOverlayMode || (exports.GridOverlayMode = {}));
	// 
	var FieldPickerDialogUseCase;
	(function (FieldPickerDialogUseCase) {
	    // 
	    FieldPickerDialogUseCase["FieldPickerDialogUseCase_ReplaceField"] = "replace-field-use-case";
	    // 
	    FieldPickerDialogUseCase["FieldPickerDialogUseCase_CreateIdentitySet"] = "create-identity-set";
	    // 
	    FieldPickerDialogUseCase["FieldPickerDialogUseCase_EditDatasrouceAliases"] = "edit-datasource-aliases-use-case";
	    // 
	    FieldPickerDialogUseCase["FieldPickerDialogUseCase_EditFilters"] = "edit-filters-use-case";
	    // 
	    FieldPickerDialogUseCase["FieldPickerDialogUseCase_ExtractFilter"] = "incremental-extract-use-case";
	})(FieldPickerDialogUseCase = exports.FieldPickerDialogUseCase || (exports.FieldPickerDialogUseCase = {}));
	// 
	var SideType;
	(function (SideType) {
	    // 
	    SideType["ST_Top"] = "top";
	    // 
	    SideType["ST_Right"] = "right";
	    // 
	    SideType["ST_Bottom"] = "bottom";
	    // 
	    SideType["ST_Left"] = "left";
	})(SideType = exports.SideType || (exports.SideType = {}));
	// 
	var WorkgroupPublishErrorType;
	(function (WorkgroupPublishErrorType) {
	    // 
	    WorkgroupPublishErrorType["EA_None"] = "ea-none";
	    // 
	    WorkgroupPublishErrorType["EA_Warning"] = "ea-warning";
	    // 
	    WorkgroupPublishErrorType["EA_Prompt"] = "ea-prompt";
	    // 
	    WorkgroupPublishErrorType["EA_Info"] = "ea-info";
	    // 
	    WorkgroupPublishErrorType["EA_Server"] = "ea-server";
	})(WorkgroupPublishErrorType = exports.WorkgroupPublishErrorType || (exports.WorkgroupPublishErrorType = {}));
	// Indicates whether the user has signed in or is signed into a server
	var ServerConnectionStatus;
	(function (ServerConnectionStatus) {
	    // The user has never signed in
	    ServerConnectionStatus["NeverSignedIn"] = "server-connection-status-never-signed-in";
	    // The user has signed in at least once
	    ServerConnectionStatus["HasSignedIn"] = "server-connection_status-has-signed-in";
	    // Auto sign in will be attempted
	    ServerConnectionStatus["WillAutoSignIn"] = "server-connection_status-will-auto-sign-in";
	    // The user is signed in
	    ServerConnectionStatus["SignedIn"] = "server-connection_status-signed-in";
	})(ServerConnectionStatus = exports.ServerConnectionStatus || (exports.ServerConnectionStatus = {}));
	// Start of Week (Starting Day)
	var SOWValue;
	(function (SOWValue) {
	    // 
	    SOWValue["SOWValue__SOW_SYSTEMDEFAULT"] = "sow-system-default";
	    // 
	    SOWValue["SOWValue__SOW_7DAYPERIOD"] = "sow-7-day-period";
	    // 
	    SOWValue["SOWValue__SOW_SUNDAY"] = "sow-sunday";
	    // 
	    SOWValue["SOWValue__SOW_MONDAY"] = "sow-monday";
	    // 
	    SOWValue["SOWValue__SOW_TUESDAY"] = "sow-tuesday";
	    // 
	    SOWValue["SOWValue__SOW_WEDNESDAY"] = "sow-wednesday";
	    // 
	    SOWValue["SOWValue__SOW_THURSDAY"] = "sow-thursday";
	    // 
	    SOWValue["SOWValue__SOW_FRIDAY"] = "sow-friday";
	    // 
	    SOWValue["SOWValue__SOW_SATURDAY"] = "sow-saturday";
	    // 
	    SOWValue["SOWValue__SOW_ISO8601WEEK"] = "sow-iso8601-week";
	})(SOWValue = exports.SOWValue || (exports.SOWValue = {}));
	// Type of Find to perform
	var FindType;
	(function (FindType) {
	    // Starts With
	    FindType["FindType_Starts"] = "findtype-starts";
	    // Ends With
	    FindType["FindType_Ends"] = "findtype-ends";
	    // Contains
	    FindType["FindType_Contains"] = "findtype-contains";
	    // Exact
	    FindType["FindType_Exact"] = "findtype-exact";
	})(FindType = exports.FindType || (exports.FindType = {}));
	// PerspectiveType of a given PerspectivePresModel
	var PerspectiveEnumPerspectiveType;
	(function (PerspectiveEnumPerspectiveType) {
	    // Reality
	    PerspectiveEnumPerspectiveType["PerspectiveType_Reality"] = "perspectivetype-reality";
	    // First
	    PerspectiveEnumPerspectiveType["PerspectiveType_First"] = "perspectivetype-first";
	    // Last
	    PerspectiveEnumPerspectiveType["PerspectiveType_Last"] = "perspectivetype-last";
	    // Custom
	    PerspectiveEnumPerspectiveType["PerspectiveType_Custom"] = "perspectivetype-custom";
	})(PerspectiveEnumPerspectiveType = exports.PerspectiveEnumPerspectiveType || (exports.PerspectiveEnumPerspectiveType = {}));
	// List of options for what to write out from get-runtime-info
	var RuntimeInfoRuntimeOutput;
	(function (RuntimeInfoRuntimeOutput) {
	    // output the VTL from the producers
	    RuntimeInfoRuntimeOutput["RawVTL"] = "raw-vtl";
	    // output the data store from the producers
	    RuntimeInfoRuntimeOutput["RawStore"] = "raw-store";
	    // output the graph and compiled VTL
	    RuntimeInfoRuntimeOutput["PayloadVTL"] = "payload-vtl";
	    // output the final data store after transforms are run
	    RuntimeInfoRuntimeOutput["FinalStore"] = "final-store";
	    // output the VTL and data store from the producers
	    RuntimeInfoRuntimeOutput["Input"] = "input";
	    // output the final VTL and data store after compilation and running
	    RuntimeInfoRuntimeOutput["Output"] = "output";
	})(RuntimeInfoRuntimeOutput = exports.RuntimeInfoRuntimeOutput || (exports.RuntimeInfoRuntimeOutput = {}));
	// 
	var GeometryType;
	(function (GeometryType) {
	    // 
	    GeometryType["Empty"] = "empty";
	    // 
	    GeometryType["MultiPolygon"] = "multiPolygon";
	    // 
	    GeometryType["MultiPoint"] = "multiPoint";
	    // 
	    GeometryType["MultiLineString"] = "multiLineString";
	})(GeometryType = exports.GeometryType || (exports.GeometryType = {}));
	// 
	var MarkSizingSetting;
	(function (MarkSizingSetting) {
	    // 
	    MarkSizingSetting["MarksScalingAutomatic"] = "marks-scaling-automatic";
	    // 
	    MarkSizingSetting["MarksScalingOn"] = "marks-scaling-on";
	    // 
	    MarkSizingSetting["MarksScalingOff"] = "marks-scaling-off";
	})(MarkSizingSetting = exports.MarkSizingSetting || (exports.MarkSizingSetting = {}));
	// Enumeration for card type on worksheets.
	var CardType;
	(function (CardType) {
	    // CardManager treats zero specially, so we can't start at zero.
	    CardType["Columns"] = "cardtype-columns";
	    // 
	    CardType["Rows"] = "cardtype-rows";
	    // 
	    CardType["Pages"] = "cardtype-pages";
	    // 
	    CardType["CurrentPage"] = "cardtype-currentPage";
	    // 
	    CardType["Filters"] = "cardtype-filters";
	    // 
	    CardType["Marks"] = "cardtype-marks";
	    // 
	    CardType["Measures"] = "cardtype-measures";
	    // 
	    CardType["ColorLegend"] = "cardtype-colorLegend";
	    // 
	    CardType["ShapeLegend"] = "cardtype-shapeLegend";
	    // 
	    CardType["SizeLegend"] = "cardtype-sizeLegend";
	    // 
	    CardType["MapLegend"] = "cardtype-mapLegend";
	    // 
	    CardType["Title"] = "cardtype-title";
	    // 
	    CardType["Caption"] = "cardtype-caption";
	    // 
	    CardType["Summary"] = "cardtype-summary";
	    // 
	    CardType["Parameter"] = "cardtype-parameter";
	    // 
	    CardType["QuickFilter"] = "cardtype-quickFilter";
	    // 
	    CardType["Highlighter"] = "cardtype-highlighter";
	})(CardType = exports.CardType || (exports.CardType = {}));
	// Indicates the type of table data to be displayed.
	var TableViewDataType;
	(function (TableViewDataType) {
	    // Table view with each column is specified by FieldName. DPI_Columns is required.
	    TableViewDataType["TableViewFieldData"] = "table-view-field-data";
	    // Table view where the columns are defined by a group. DPI_FieldName is required.
	    TableViewDataType["TableViewGroupData"] = "table-view-group-data";
	})(TableViewDataType = exports.TableViewDataType || (exports.TableViewDataType = {}));
	// 
	var WarningType;
	(function (WarningType) {
	    // 
	    WarningType["LINK_ERROR"] = "linkerror";
	    // 
	    WarningType["OVERLAP_TEXT"] = "WarnOverlappingText";
	    // 
	    WarningType["INVALID_WORKSHEET"] = "WarnInvalidWorksheet";
	    // 
	    WarningType["OPEN_BOOK"] = "openbook";
	    // 
	    WarningType["OPEN_DATASOURCE"] = "opendatasource";
	    // 
	    WarningType["OPEN_SHEET"] = "opensheet";
	    // 
	    WarningType["LOCALDATA_AMBIGUITY"] = "LocalDataAmbiguity";
	    // 
	    WarningType["LOCALDATA_MISMATCH"] = "LocalDataMismatch";
	    // 
	    WarningType["MISSING_LOCAL_TILE"] = "MissingLocalTiles";
	    // 
	    WarningType["MAP_TILE_DOWNLOAD"] = "MapTileDownloadError";
	    // 
	    WarningType["MAP_TILE_INTERMITTENT"] = "MapTileIntermittent";
	    // 
	    WarningType["MAP_TILE_REGION"] = "MapTileRegion";
	    // 
	    WarningType["MAP_SERVER_FORBIDDEN"] = "MapServerForbidden";
	    // 
	    WarningType["DM_CANNOT_SCORE"] = "DMCannotScore";
	    // 
	    WarningType["DM_SCORING_NOT_REC"] = "DMScoringNotRecommended";
	    // 
	    WarningType["LOCAL_DATA_LIBRARY_MISSING"] = "LocalDataLibraryMissing";
	    // 
	    WarningType["DM_MISSING_MODEL"] = "DMMissingModel";
	    // 
	    WarningType["DI_NO_LINK"] = "DINoLink";
	    // 
	    WarningType["LOCALDATA_NO_GEOMETRY"] = "LocalDataNoGeometry";
	    // 
	    WarningType["LOCALDATA_NO_GEOMETRY_UPGRADE"] = "LocalDataNoGeometryUpgrade";
	    // 
	    WarningType["DI_NO_RELATIONSHIPS"] = "DINoRelationships";
	})(WarningType = exports.WarningType || (exports.WarningType = {}));
	// 
	var WorkbookUIMode;
	(function (WorkbookUIMode) {
	    // 
	    WorkbookUIMode["DataTab"] = "data-tab";
	    // 
	    WorkbookUIMode["Document"] = "document";
	    // 
	    WorkbookUIMode["SheetSorter"] = "sheet-sorter";
	})(WorkbookUIMode = exports.WorkbookUIMode || (exports.WorkbookUIMode = {}));
	// 
	var TopLevelMenuItem;
	(function (TopLevelMenuItem) {
	    // 
	    TopLevelMenuItem["File"] = "file";
	    // 
	    TopLevelMenuItem["Data"] = "data";
	    // 
	    TopLevelMenuItem["Worksheet"] = "worksheet";
	    // 
	    TopLevelMenuItem["Dashboard"] = "dashboard";
	    // 
	    TopLevelMenuItem["Analysis"] = "analysis";
	    // 
	    TopLevelMenuItem["Format"] = "format";
	    // 
	    TopLevelMenuItem["Map"] = "map";
	    // 
	    TopLevelMenuItem["Help"] = "help";
	})(TopLevelMenuItem = exports.TopLevelMenuItem || (exports.TopLevelMenuItem = {}));
	// Enumeration for different types of AddIns (Project Frelard)
	var AddInType;
	(function (AddInType) {
	    // 
	    AddInType["Invalid"] = "invalid";
	    // 
	    AddInType["Dashboard"] = "dashboard";
	})(AddInType = exports.AddInType || (exports.AddInType = {}));
	// Enumeration of different contexts an add-in can run in
	var AddInContext;
	(function (AddInContext) {
	    // 
	    AddInContext["Unknown"] = "unknown";
	    // 
	    AddInContext["Desktop"] = "desktop";
	    // 
	    AddInContext["Server"] = "server";
	})(AddInContext = exports.AddInContext || (exports.AddInContext = {}));
	// Enumeration of different modes an add-in can run in
	var AddInMode;
	(function (AddInMode) {
	    // 
	    AddInMode["Unknown"] = "unknown";
	    // 
	    AddInMode["Authoring"] = "authoring";
	    // 
	    AddInMode["Viewing"] = "viewing";
	})(AddInMode = exports.AddInMode || (exports.AddInMode = {}));
	// Markers for array-of-float encoding of geometry
	var LinearFloatGeometryMarker;
	(function (LinearFloatGeometryMarker) {
	    // 
	    LinearFloatGeometryMarker["LFG_Invalid"] = "invalid";
	    // 
	    LinearFloatGeometryMarker["LFG_MultiPolygon"] = "multiPolygon";
	    // 
	    LinearFloatGeometryMarker["LFG_MultiLine"] = "multiLine";
	    // 
	    LinearFloatGeometryMarker["LFG_MultiPoint"] = "multiPoint";
	    // 
	    LinearFloatGeometryMarker["LFG_StartObject"] = "startObject";
	    // 
	    LinearFloatGeometryMarker["LFG_StartPolygon"] = "startPolygon";
	    // 
	    LinearFloatGeometryMarker["LFG_StartLine"] = "startLine";
	    // 
	    LinearFloatGeometryMarker["LFG_EndGeometry"] = "endGeometry";
	})(LinearFloatGeometryMarker = exports.LinearFloatGeometryMarker || (exports.LinearFloatGeometryMarker = {}));
	// Values for type of user initiated navigation. Used to determine the need to clone a new session on request for bootstrap
	var NavigationType;
	(function (NavigationType) {
	    // Navigation started by clicking a link, entering URL in address bar, form submission, script operations other than Reload/BackForward listed below
	    NavigationType["Navigate"] = "Nav";
	    // Navigation due to reload operation from UI or location.reload from script
	    NavigationType["Reload"] = "Reload";
	    // Navigation due to history traversal operation by user or script
	    NavigationType["BackForward"] = "BackFwd";
	    // Reserved value indicating navigation types not defined by values above
	    NavigationType["Reserved"] = "Reserved";
	})(NavigationType = exports.NavigationType || (exports.NavigationType = {}));
	// Source of the Navigation type - important for telemetry
	var NavigationSource;
	(function (NavigationSource) {
	    // Navigation type was provided in viz create options.
	    NavigationSource["CreateOptions"] = "Opt";
	    // Navigation type was omitted in viz create options and captured while parsing viz parameters. Webpage reload by user may be coming as navigate due to script navigation.
	    NavigationSource["ParameterParse"] = "Parse";
	    // Navigation type was captured at bootstrap time while embedded. Should not happen when viz is embedded via vizportal or using JS API, but the web can be unpredictable!
	    NavigationSource["Bootstrap"] = "Boot";
	    // Navigation type was determined from viz itself as the top level web page.
	    NavigationSource["TopLevelViz"] = "Top";
	})(NavigationSource = exports.NavigationSource || (exports.NavigationSource = {}));
	// Enumeration of the different sort indicator icons that can appear
	var SortIndicatorType;
	(function (SortIndicatorType) {
	    // alphabetic sort
	    SortIndicatorType["Alphabetic"] = "alphabetic";
	    // sort that uses the generic sort icon, such as a computed or manual sort
	    SortIndicatorType["Generic"] = "generic";
	    // nested computed sort
	    SortIndicatorType["Nested"] = "nested";
	})(SortIndicatorType = exports.SortIndicatorType || (exports.SortIndicatorType = {}));
	// Enumeration for data alert types.
	var DataAlertType;
	(function (DataAlertType) {
	    // 
	    DataAlertType["DataPresent"] = "data-present";
	    // 
	    DataAlertType["ConstComparison"] = "const-comparison";
	})(DataAlertType = exports.DataAlertType || (exports.DataAlertType = {}));
	// Enumeration for valid operations in data alert conditions
	var DataAlertConditionOperationType;
	(function (DataAlertConditionOperationType) {
	    // 
	    DataAlertConditionOperationType["GreaterThan"] = "greater-than";
	    // 
	    DataAlertConditionOperationType["GreaterThanEqual"] = "greater-than-equal";
	    // 
	    DataAlertConditionOperationType["Equals"] = "equals";
	    // 
	    DataAlertConditionOperationType["LessThan"] = "less-than";
	    // 
	    DataAlertConditionOperationType["LessThanEqual"] = "less-than-equal";
	})(DataAlertConditionOperationType = exports.DataAlertConditionOperationType || (exports.DataAlertConditionOperationType = {}));
	// Enumeration for modes the data alert dialog could be in
	var DataAlertDialogMode;
	(function (DataAlertDialogMode) {
	    // 
	    DataAlertDialogMode["Create"] = "create";
	    // 
	    DataAlertDialogMode["Edit"] = "edit";
	})(DataAlertDialogMode = exports.DataAlertDialogMode || (exports.DataAlertDialogMode = {}));


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var Params_1 = __webpack_require__(84);
	var ActiveMarksDataConverter_1 = __webpack_require__(95);
	var ApiToPresLayerConverter_1 = __webpack_require__(97);
	var FiltersConverter_1 = __webpack_require__(98);
	var MappingRegistry_1 = __webpack_require__(99);
	var ParametersDataConverter_1 = __webpack_require__(100);
	var PresLayerToApiConverter_1 = __webpack_require__(91);
	var UnderlyingDataConverter_1 = __webpack_require__(96);
	/*tslint:disable-next-line */
	var id = function (inParam) { return inParam; };
	/**
	 * Factory class for creating parameters mappings based on the VersionNumber of the Api
	 *
	 * @export
	 * @class ParameterMappingRegistryFactory
	 */
	var ParameterMappingRegistryFactory = (function () {
	    function ParameterMappingRegistryFactory() {
	    }
	    ParameterMappingRegistryFactory.createPresLayerToApiParamRegistry = function (versionNumber) {
	        var result = new PresLayerToApiMappingRegistry();
	        // TODO - check the version number and construct appropriate conversions
	        result.addRegistration(Params_1.ParameterId.AddInLocator, api_internal_contract_1.ParameterId.ExtensionLocator, PresLayerToApiConverter_1.PresLayerToApiConverter.convertExtensionLocator);
	        result.addRegistration(Params_1.ParameterId.AddInBootstrapInfo, api_internal_contract_1.ParameterId.ExtensionBootstrapInfo, PresLayerToApiConverter_1.PresLayerToApiConverter.convertExtensionBootstrapInfo);
	        result.addRegistration(Params_1.ParameterId.UnderlyingDataTable, api_internal_contract_1.ParameterId.UnderlyingDataTable, UnderlyingDataConverter_1.UnderlyingDataConverter.buildUnderlyingDataTable.bind(undefined, false));
	        result.addRegistration(Params_1.ParameterId.UnderlyingDataTable, api_internal_contract_1.ParameterId.UnderlyingSummaryDataTable, UnderlyingDataConverter_1.UnderlyingDataConverter.buildUnderlyingDataTable.bind(undefined, true));
	        result.addRegistration(Params_1.ParameterId.UnderlyingDataTable, api_internal_contract_1.ParameterId.DataSourceDataTable, UnderlyingDataConverter_1.UnderlyingDataConverter.buildUnderlyingDataTable.bind(undefined, true));
	        result.addRegistration(Params_1.ParameterId.FieldCaption, api_internal_contract_1.ParameterId.FieldName, id);
	        result.addRegistration(Params_1.ParameterId.SelectionData, api_internal_contract_1.ParameterId.SelectedData, ActiveMarksDataConverter_1.ActiveMarksDataConverter.buildSelectedDataTable);
	        result.addRegistration(Params_1.ParameterId.HighlightedData, api_internal_contract_1.ParameterId.HighlightedData, ActiveMarksDataConverter_1.ActiveMarksDataConverter.buildHighlightedDataTable);
	        result.addRegistration(Params_1.ParameterId.AddInSettingsInfo, api_internal_contract_1.ParameterId.ExtensionSettingsInfo, PresLayerToApiConverter_1.PresLayerToApiConverter.convertExtensionSettingsInfo);
	        result.addRegistration(Params_1.ParameterId.Worksheet, api_internal_contract_1.ParameterId.WorksheetName, id);
	        result.addRegistration(Params_1.ParameterId.ParameterCtrls, api_internal_contract_1.ParameterId.ParameterInfos, ParametersDataConverter_1.ParametersDataConverter.convertParameterList);
	        result.addRegistration(Params_1.ParameterId.ParameterCtrl, api_internal_contract_1.ParameterId.ParameterInfo, ParametersDataConverter_1.ParametersDataConverter.convertParameter);
	        result.addRegistration(Params_1.ParameterId.DataSchema, api_internal_contract_1.ParameterId.DataSchema, PresLayerToApiConverter_1.PresLayerToApiConverter.convertDataSchema);
	        result.addRegistration(Params_1.ParameterId.FiltersInfo, api_internal_contract_1.ParameterId.WorksheetFilters, FiltersConverter_1.FiltersConverter.convertFiltersPresModel);
	        result.addRegistration(Params_1.ParameterId.CategoricalDomain, api_internal_contract_1.ParameterId.CategoricalDomain, FiltersConverter_1.FiltersConverter.convertCategoricalDomain);
	        result.addRegistration(Params_1.ParameterId.QuantitativeDomain, api_internal_contract_1.ParameterId.QuantitativeDomain, FiltersConverter_1.FiltersConverter.convertQuantitativeDomain);
	        result.addRegistration(Params_1.ParameterId.JoinDescription, api_internal_contract_1.ParameterId.JoinDescription, PresLayerToApiConverter_1.PresLayerToApiConverter.convertJoinDescription);
	        result.addRegistration(Params_1.ParameterId.ConnectionDescriptionSummaries, api_internal_contract_1.ParameterId.ConnectionDescriptionSummaries, PresLayerToApiConverter_1.PresLayerToApiConverter.convertConnectionDescrptionSummaries);
	        result.addRegistration(Params_1.ParameterId.ExtensionDialogPayload, api_internal_contract_1.ParameterId.ExtensionDialogPayload, id);
	        return result;
	    };
	    ParameterMappingRegistryFactory.createApiToPresLayerParamRegistry = function (versionNumber) {
	        var result = new ApiToPresLayerMappingRegistry();
	        // TODO - check the version number and construct appropriate conversions
	        result.addRegistration(api_internal_contract_1.ParameterId.ExtensionLocator, Params_1.ParameterId.AddInLocator, ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertExtensionLocator);
	        result.addRegistration(api_internal_contract_1.ParameterId.SettingsValues, Params_1.ParameterId.AddInSettings, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.IgnoreAliases, Params_1.ParameterId.IgnoreAliases, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.IgnoreSelection, Params_1.ParameterId.IgnoreSelection, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.IncludeAllColumns, Params_1.ParameterId.IncludeAllColumns, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.MaxRows, Params_1.ParameterId.MaxRows, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.VisualIDPM, ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertVisualId);
	        result.addRegistration(api_internal_contract_1.ParameterId.ColumnsToInclude, Params_1.ParameterId.FieldDisplayNames, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.FieldName, Params_1.ParameterId.QualifiedFieldCaption, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.FilterValues, Params_1.ParameterId.FilterAliases, ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertFilterValues);
	        result.addRegistration(api_internal_contract_1.ParameterId.FilterUpdateType, Params_1.ParameterId.FilterUpdateType, ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertFilterType);
	        result.addRegistration(api_internal_contract_1.ParameterId.IsExcludeMode, Params_1.ParameterId.Exclude, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.FilterRangeMin, Params_1.ParameterId.RangeMin, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.FilterRangeMax, Params_1.ParameterId.RangeMax, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.FilterRangeNullOption, Params_1.ParameterId.Included, ApiToPresLayerConverter_1.ApiToPresLayerConverter.ConvertNullOption);
	        result.addRegistration(api_internal_contract_1.ParameterId.FieldId, Params_1.ParameterId.FieldName, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.DomainType, Params_1.ParameterId.FilterDomainType, ApiToPresLayerConverter_1.ApiToPresLayerConverter.ConvertFilterDomainType);
	        result.addRegistration(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Worksheet, ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertVisualIdToWorksheet);
	        result.addRegistration(api_internal_contract_1.ParameterId.VisualId, Params_1.ParameterId.Dashboard, ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertVisualIdToDashboard);
	        result.addRegistration(api_internal_contract_1.ParameterId.ParameterCaption, Params_1.ParameterId.FieldCaption, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.ParameterFieldName, Params_1.ParameterId.FieldNameString, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.ParameterFieldName, Params_1.ParameterId.GlobalFieldName, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.ParameterValue, Params_1.ParameterId.ValueStr, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.SheetPath, Params_1.ParameterId.SheetPathPM, function (pm) { return ApiToPresLayerConverter_1.ApiToPresLayerConverter.convertSheetPath(pm); });
	        result.addRegistration(api_internal_contract_1.ParameterId.Selection, Params_1.ParameterId.Selection, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.SelectionUpdateType, Params_1.ParameterId.SelectionUpdateType, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.HierValSelectionModels, Params_1.ParameterId.HierValSelectionModels, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.QuantRangeSelectionModels, Params_1.ParameterId.QuantRangeSelectionModels, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.DimValSelectionModels, Params_1.ParameterId.DimValSelectionModels, id);
	        // The param PL.Datasource is the ID string for a specific datasource, not to be confused
	        // with the param PL.DataSource, which is the full pres model for a data source.
	        result.addRegistration(api_internal_contract_1.ParameterId.DataSourceId, Params_1.ParameterId.Datasource, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.ExtensionDialogUrl, Params_1.ParameterId.ExtensionDialogUrl, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.ExtensionDialogPayload, Params_1.ParameterId.ExtensionDialogPayload, id);
	        result.addRegistration(api_internal_contract_1.ParameterId.IsExtensionDialog, Params_1.ParameterId.IsExtensionDialog, id);
	        return result;
	    };
	    return ParameterMappingRegistryFactory;
	}());
	exports.ParameterMappingRegistryFactory = ParameterMappingRegistryFactory;
	var ApiToPresLayerMappingRegistry = (function (_super) {
	    __extends(ApiToPresLayerMappingRegistry, _super);
	    function ApiToPresLayerMappingRegistry() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return ApiToPresLayerMappingRegistry;
	}(MappingRegistry_1.MappingRegistry));
	exports.ApiToPresLayerMappingRegistry = ApiToPresLayerMappingRegistry;
	var PresLayerToApiMappingRegistry = (function (_super) {
	    __extends(PresLayerToApiMappingRegistry, _super);
	    function PresLayerToApiMappingRegistry() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return PresLayerToApiMappingRegistry;
	}(MappingRegistry_1.MappingRegistry));
	exports.PresLayerToApiMappingRegistry = PresLayerToApiMappingRegistry;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var api_utils_1 = __webpack_require__(83);
	var EnumMappings_1 = __webpack_require__(92);
	var UnderlyingDataConverter_1 = __webpack_require__(96);
	/**
	 * Contains logic for converting the active marks on a viz into the API pres models.
	 * In the original project, most of this was in the ProcessActiveMarks function
	 */
	var ActiveMarksDataConverter = (function () {
	    function ActiveMarksDataConverter() {
	    }
	    ActiveMarksDataConverter.buildSelectedDataTable = function (selectedData) {
	        return {
	            data: ActiveMarksDataConverter.buildActiveMarksList(selectedData.dataDictionary, selectedData.vizData)
	        };
	    };
	    ActiveMarksDataConverter.buildHighlightedDataTable = function (highlightedData) {
	        return {
	            data: ActiveMarksDataConverter.buildActiveMarksList(highlightedData.dataDictionary, highlightedData.vizData)
	        };
	    };
	    ActiveMarksDataConverter.buildActiveMarksList = function (dataDictionary, vizData) {
	        var result = new Array();
	        var _loop_1 = function (i) {
	            // Need to filter to find all the columns which are in this pane
	            var columns = vizData.paneColumnsData.vizDataColumns.filter(function (vizDataColumn) {
	                // We know this column matters for the current pane if this pane's index is in paneIndices
	                return vizDataColumn.paneIndices.indexOf(i) > -1;
	            });
	            // Create a mapping of which index in the data dictionary our columns are in
	            var columnIndices = columns.map(function (vizDataColumn) {
	                // The columnIndex is in the same position as the paneIndex
	                var paneIndex = vizDataColumn.paneIndices.indexOf(i);
	                var columnIndex = vizDataColumn.columnIndices[paneIndex];
	                return columnIndex;
	            });
	            // Get the data for the pane we are processing
	            var vizPane = vizData.paneColumnsData.paneColumnsList[i];
	            if (vizPane.vizPaneColumns.length !== columns.length) {
	                throw api_utils_1.TableauException.error(ActiveMarksDataConverter.MALFORMED_DATA);
	            }
	            var headers = new Array();
	            var rows = new Array();
	            // Column 0 will be the tuple id column. We can use this as a counter for how many rows we have
	            var tupleIds = vizPane.vizPaneColumns[0].tupleIds;
	            var marks = new Array();
	            for (var tupleIndex = 0; tupleIndex < tupleIds.length; tupleIndex++) {
	                // TODO Need to revaluate the place of this logic. If it turns out that we need a separate command
	                // call to get the marks info, then this logic should not be here but instead in a layer above somewhere
	                var mark = {
	                    type: api_internal_contract_1.MarkType.Bar,
	                    color: 'red',
	                    tupleId: tupleIds[tupleIndex],
	                };
	                marks.push(mark);
	                // We will have 1 less value in this row since there's the tupleId column
	                var cells = new Array(vizPane.vizPaneColumns.length - 1);
	                for (var j = 1 /* skip the first which is tuple ids */; j < vizPane.vizPaneColumns.length; j++) {
	                    // Next, we need to figure out which column we are reading data for
	                    var column = columns[columnIndices[j]];
	                    var vizPaneColumnData = vizPane.vizPaneColumns[j];
	                    // Define the header when we are processing the first row
	                    if (tupleIndex === 0) {
	                        var header = {
	                            dataType: EnumMappings_1.PresLayerToApiEnumMappings.dataType.convert(column.dataType),
	                            fieldName: column.fn,
	                            isReferenced: true,
	                            index: j - 1,
	                            fieldCaption: column.fieldCaption
	                        };
	                        headers.push(header);
	                    }
	                    var value = UnderlyingDataConverter_1.UnderlyingDataConverter.lookupValueFromDictionary(dataDictionary, column.dataType, vizPaneColumnData.valueIndices[tupleIndex]);
	                    var aliasValue = UnderlyingDataConverter_1.UnderlyingDataConverter.lookupValueFromDictionary(dataDictionary, column.dataType, vizPaneColumnData.aliasIndices[tupleIndex]) || '';
	                    var formattedValue = aliasValue; // TODO - Figure out how to use the formatStrings
	                    var dataCell = {
	                        value: value,
	                        formattedValue: formattedValue,
	                        aliasedValue: aliasValue
	                    };
	                    // Add our cell to this row
	                    cells[j - 1] = dataCell;
	                }
	                rows.push(cells);
	            }
	            var dataTable = {
	                dataTable: rows,
	                headers: headers,
	                marks: marks
	            };
	            result.push(dataTable);
	        };
	        // The data model for the VizDataPresModel is a little strange, so this parsing takes some time to figure out.
	        // There can be multiple panes of data, so we must go through them one at a time to create data tables
	        for (var i = 0; i < vizData.paneColumnsData.paneColumnsList.length; i++) {
	            _loop_1(i);
	        }
	        return result;
	    };
	    ActiveMarksDataConverter.MALFORMED_DATA = 'Malformed data table';
	    return ActiveMarksDataConverter;
	}());
	exports.ActiveMarksDataConverter = ActiveMarksDataConverter;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Enums = __webpack_require__(93);
	var EnumMappings_1 = __webpack_require__(92);
	var api_utils_1 = __webpack_require__(83);
	/**
	 * Contains static helper methods for converting from an underlying data pres model into the api representation.
	 * Most of the code is a direct port from ApiUnderlyingDataHandler.cs
	 * https://opengrok/source/xref/teams_near/workgroup/vqlweb/scriptsharp/src/UI/Api/ApiUnderlyingDataHandler.cs
	 */
	var UnderlyingDataConverter = (function () {
	    function UnderlyingDataConverter() {
	    }
	    UnderlyingDataConverter.lookupValueFromDictionary = function (dataDictionary, dt, index) {
	        if (index < 0) {
	            // per cl 280396 / bugzid 81197 negative data value index means that it is special
	            dt = Enums.DataType.DT_STRING;
	            index = -index - 1;
	        }
	        var result = null;
	        var rawValue = UnderlyingDataConverter.getRawValue(dataDictionary, dt, index);
	        if (rawValue !== null) {
	            result = rawValue.toString();
	        }
	        return result;
	    };
	    /* tslint:disable-next-line:no-any */
	    UnderlyingDataConverter.getRawValue = function (dataDictionary, dt, index) {
	        if (!dataDictionary.dataSegments) {
	            return null;
	        }
	        for (var _i = 0, _a = Object.keys(dataDictionary.dataSegments); _i < _a.length; _i++) {
	            var key = _a[_i];
	            var dataSegment = dataDictionary.dataSegments[key];
	            for (var _b = 0, _c = dataSegment.dataColumns; _b < _c.length; _b++) {
	                var dataColumn = _c[_b];
	                if (!dataColumn || dataColumn.dataType !== dt) {
	                    continue;
	                }
	                if (index < dataColumn.dataValues.length) {
	                    return dataColumn.dataValues[index];
	                }
	                index -= dataColumn.dataValues.length;
	                break;
	            }
	        }
	        return null;
	    };
	    UnderlyingDataConverter.buildDataTable = function (dataDictionary, columns) {
	        var result = {
	            dataTable: UnderlyingDataConverter.buildTable(dataDictionary, columns),
	            headers: columns.map(function (c, i) { return UnderlyingDataConverter.buildColumnModel(c, i); })
	        };
	        return result;
	    };
	    UnderlyingDataConverter.buildUnderlyingDataTable = function (isSummary, underlyingDataTable) {
	        var result = {
	            data: UnderlyingDataConverter.buildDataTable(underlyingDataTable.dataDictionary, underlyingDataTable.underlyingDataTableColumns),
	            isSummary: isSummary
	        };
	        return result;
	    };
	    UnderlyingDataConverter.buildActiveMarksTable = function (dataDictionary, vizData) {
	        throw api_utils_1.TableauException.apiNotImplemented(['buildActiveMarksTable']);
	    };
	    UnderlyingDataConverter.buildColumnModel = function (column, index) {
	        return {
	            dataType: EnumMappings_1.PresLayerToApiEnumMappings.dataType.convert(column.dataType),
	            fieldName: column.fn,
	            fieldCaption: column.fieldCaption,
	            isReferenced: !!column.isReferenced,
	            index: index
	        };
	    };
	    UnderlyingDataConverter.buildTable = function (dataDictionary, columns) {
	        if (columns.length === 0) {
	            return new Array();
	        }
	        var rowCount = columns[0].formatValIdxs.length;
	        var columnCount = columns.length;
	        var result = new Array(rowCount);
	        // Initialize all of our rows
	        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	            result[rowIndex] = new Array(columnCount);
	        }
	        // Go through column-by-column and convert the values
	        for (var columnIndex = 0; columnIndex < columnCount; columnIndex++) {
	            var column = columns[columnIndex];
	            for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	                var formattedValue = UnderlyingDataConverter.lookupValueFromDictionary(dataDictionary, Enums.DataType.DT_STRING, column.formatValIdxs[rowIndex]);
	                if (formattedValue === null) {
	                    throw api_utils_1.TableauException.isNull(['formattedValue']);
	                }
	                var value = {
	                    value: UnderlyingDataConverter.lookupValueFromDictionary(dataDictionary, column.dataType, column.valueIndices[rowIndex]),
	                    formattedValue: formattedValue,
	                    aliasedValue: formattedValue
	                };
	                result[rowIndex][columnIndex] = value;
	            }
	        }
	        return result;
	    };
	    return UnderlyingDataConverter;
	}());
	exports.UnderlyingDataConverter = UnderlyingDataConverter;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(83);
	var EnumMappings_1 = __webpack_require__(92);
	/**
	 * Class containing helper methods for converting from ApiPresModels to their PresLayer equivalents
	 *
	 * @export
	 * @class ApiToPresLayerConverter
	 */
	var ApiToPresLayerConverter = (function () {
	    function ApiToPresLayerConverter() {
	    }
	    ApiToPresLayerConverter.convertSheetPath = function (apiSheetPath) {
	        if (!apiSheetPath) {
	            throw api_utils_1.TableauException.isUndefined(['sheetPath']);
	        }
	        var result = {
	            sheetName: apiSheetPath.sheetName,
	            isDashboard: apiSheetPath.isDashboard,
	            storyboard: apiSheetPath.storyboard || '',
	            flipboardZoneId: apiSheetPath.flipboardZoneID || 0,
	            storyPointId: apiSheetPath.storyPointID || 0,
	        };
	        return result;
	    };
	    ApiToPresLayerConverter.convertExtensionLocator = function (apiExtensionLocator) {
	        var result = {
	            addInInstanceId: apiExtensionLocator.instanceId,
	            sheetPath: ApiToPresLayerConverter.convertSheetPath(apiExtensionLocator.dashboardPath)
	        };
	        return result;
	    };
	    ApiToPresLayerConverter.convertVisualId = function (apiVisualid) {
	        var result = {
	            worksheet: apiVisualid.worksheet,
	            dashboard: apiVisualid.dashboard,
	            storyboard: apiVisualid.storyboard,
	            storyPointId: apiVisualid.storyPointID,
	            flipboardZoneId: apiVisualid.flipboardZoneID
	        };
	        return result;
	    };
	    ApiToPresLayerConverter.convertVisualIdToWorksheet = function (apiVisualId) {
	        return apiVisualId.worksheet;
	    };
	    ApiToPresLayerConverter.convertVisualIdToDashboard = function (apiVisualId) {
	        return apiVisualId.dashboard || '';
	    };
	    ApiToPresLayerConverter.convertFilterValues = function (filterValues) {
	        if (filterValues.length === 0) {
	            // platform code expects an empty string for clearing filter values
	            return [''];
	        }
	        return filterValues;
	    };
	    ApiToPresLayerConverter.convertFilterType = function (filterUpdateType) {
	        return EnumMappings_1.ApiToPresLayerEnumMappings.filterUpdateType.convert(filterUpdateType);
	    };
	    ApiToPresLayerConverter.ConvertNullOption = function (nullOption) {
	        return EnumMappings_1.ApiToPresLayerEnumMappings.nullOption.convert(nullOption);
	    };
	    ApiToPresLayerConverter.ConvertFilterDomainType = function (filterDomainType) {
	        return EnumMappings_1.ApiToPresLayerEnumMappings.filterDomainType.convert(filterDomainType);
	    };
	    return ApiToPresLayerConverter;
	}());
	exports.ApiToPresLayerConverter = ApiToPresLayerConverter;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var Enums_1 = __webpack_require__(93);
	var EnumMappings_1 = __webpack_require__(92);
	var PresLayerToApiConverter_1 = __webpack_require__(91);
	var FiltersConverter = (function () {
	    function FiltersConverter() {
	    }
	    FiltersConverter.convertFiltersPresModel = function (filterPms) {
	        var filters = [];
	        filterPms.forEach(function (filterPm) {
	            switch (filterPm.filterType) {
	                case Enums_1.FilterType.FLTR_Categorical: {
	                    filters.push(FiltersConverter.convertCategoricalFilterPresModel(filterPm));
	                    break;
	                }
	                case Enums_1.FilterType.FLTR_Quantitative: {
	                    filters.push(FiltersConverter.convertQuantitativeFilterPresModel(filterPm));
	                    break;
	                }
	                case Enums_1.FilterType.FLTR_RelativeDate: {
	                    filters.push(FiltersConverter.convertRelativeDateFilterPresModel(filterPm));
	                    break;
	                }
	                default:
	                    return;
	            }
	        });
	        return filters;
	    };
	    FiltersConverter.convertCategoricalFilterPresModel = function (filterPm) {
	        var selectedValues = filterPm.categoricalFilterInfo.captionedFilterValueList.map(function (filterValue) {
	            return FiltersConverter.convertFilterValuePresModel(filterValue);
	        });
	        var filter = {
	            values: selectedValues,
	            isExclude: filterPm.categoricalFilterInfo.exclude,
	            filterType: api_internal_contract_1.FilterType.Categorical,
	            fieldCaption: filterPm.fieldCaption,
	            fieldName: filterPm.fn,
	            visualId: PresLayerToApiConverter_1.PresLayerToApiConverter.convertVisualId(filterPm.visualIdPresModel)
	        };
	        return filter;
	    };
	    FiltersConverter.convertQuantitativeFilterPresModel = function (filterPm) {
	        var minValue = FiltersConverter.convertFilterValuePresModel(filterPm.quantitativeFilterInfo.captionedRangeMin);
	        var maxValue = FiltersConverter.convertFilterValuePresModel(filterPm.quantitativeFilterInfo.captionedRangeMax);
	        var filter = {
	            filterType: api_internal_contract_1.FilterType.Range,
	            fieldCaption: filterPm.fieldCaption,
	            fieldName: filterPm.fn,
	            visualId: PresLayerToApiConverter_1.PresLayerToApiConverter.convertVisualId(filterPm.visualIdPresModel),
	            min: minValue,
	            max: maxValue,
	            includeNullValues: FiltersConverter.convertIncludedNullValues(filterPm.quantitativeFilterInfo.included)
	        };
	        return filter;
	    };
	    FiltersConverter.convertRelativeDateFilterPresModel = function (filterPm) {
	        var anchorDateValue = FiltersConverter.convertFilterValuePresModel(filterPm.relativeDateFilterInfo.captionedAnchorDate);
	        var filter = {
	            filterType: api_internal_contract_1.FilterType.RelativeDate,
	            fieldCaption: filterPm.fieldCaption,
	            fieldName: filterPm.fn,
	            visualId: PresLayerToApiConverter_1.PresLayerToApiConverter.convertVisualId(filterPm.visualIdPresModel),
	            anchorDate: anchorDateValue,
	            periodType: EnumMappings_1.PresLayerToApiEnumMappings.dateStepPeriod.convert(filterPm.relativeDateFilterInfo.datePeriodType),
	            rangeType: EnumMappings_1.PresLayerToApiEnumMappings.dateRangeType.convert(filterPm.relativeDateFilterInfo.dateRangeType),
	            rangeN: filterPm.relativeDateFilterInfo.rangeN
	        };
	        return filter;
	    };
	    FiltersConverter.convertCategoricalDomain = function (domainPm) {
	        var domainValues = domainPm.captionedFilterValueList.map(function (filterValue) {
	            return FiltersConverter.convertFilterValuePresModel(filterValue);
	        });
	        return { values: domainValues };
	    };
	    FiltersConverter.convertQuantitativeDomain = function (domainPm) {
	        var minValue = FiltersConverter.convertFilterValuePresModel(domainPm.captionedRangeMin);
	        var maxValue = FiltersConverter.convertFilterValuePresModel(domainPm.captionedRangeMax);
	        return {
	            max: maxValue,
	            min: minValue
	        };
	    };
	    FiltersConverter.convertFilterValuePresModel = function (dvPM) {
	        /*tslint:disable-next-line:no-any */
	        var value;
	        switch (dvPM.dataType) {
	            case Enums_1.DataType.DT_BOOLEAN: {
	                value = Boolean(dvPM.dataValueStr);
	                break;
	            }
	            case Enums_1.DataType.DT_DATE: {
	                value = new Date(dvPM.dataValueStr);
	                break;
	            }
	            case Enums_1.DataType.DT_DATETIME: {
	                value = new Date(dvPM.dataValueStr);
	                break;
	            }
	            case Enums_1.DataType.DT_INTEGER: {
	                value = Number.parseInt(dvPM.dataValueStr);
	                break;
	            }
	            case Enums_1.DataType.DT_REAL: {
	                value = Number.parseFloat(dvPM.dataValueStr);
	                break;
	            }
	            // default to string
	            default: {
	                value = dvPM.dataValueStr;
	                break;
	            }
	        }
	        return {
	            value: value,
	            // TODO: no easy way of getting back aliased value from platform, will need to investigate further
	            aliasedValue: '',
	            formattedValue: dvPM.dataValueDisplayString
	        };
	    };
	    FiltersConverter.convertIncludedNullValues = function (includeNull) {
	        return (includeNull === Enums_1.FiltersQuantitativeIncludedValues.InRangeOrNull ||
	            includeNull === Enums_1.FiltersQuantitativeIncludedValues.All ||
	            includeNull === Enums_1.FiltersQuantitativeIncludedValues.Null);
	    };
	    return FiltersConverter;
	}());
	exports.FiltersConverter = FiltersConverter;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_utils_1 = __webpack_require__(83);
	/**
	 * Simple registry class which creates a mapping based on two keys.
	 *
	 * @export
	 * @class MappingRegistry
	 * @template TInputEnumType
	 * @template TOutputEnumType
	 * @template TMappingStorageType
	 */
	var MappingRegistry = (function () {
	    function MappingRegistry() {
	        this._registry = {};
	    }
	    MappingRegistry.prototype.has = function (inputType, outputType) {
	        var key = this.makeKey(inputType, outputType);
	        if (!this._registry.hasOwnProperty(key)) {
	            return false;
	        }
	        if (!this._registry[key]) {
	            return false;
	        }
	        return true;
	    };
	    MappingRegistry.prototype.get = function (inputType, outputType) {
	        if (!this.has(inputType, outputType)) {
	            throw api_utils_1.TableauException.error(MappingRegistry.MISSING_REQUESTED_MAPPING, [inputType, outputType]);
	        }
	        var key = this.makeKey(inputType, outputType);
	        return this._registry[key];
	    };
	    MappingRegistry.prototype.addRegistration = function (inputType, outputType, storageItem) {
	        var key = this.makeKey(inputType, outputType);
	        // Add this item
	        this._registry[key] = storageItem;
	    };
	    /**
	     * Combines the two keys into a unique string
	     *
	     * @private
	     * @param {TInputEnumType} inputType
	     * @param {TOutputEnumType} outputType
	     * @returns {string}
	     * @memberof MappingRegistry
	     */
	    MappingRegistry.prototype.makeKey = function (inputType, outputType) {
	        var keyObj = { input: inputType, output: outputType };
	        return JSON.stringify(keyObj);
	    };
	    MappingRegistry.MISSING_REQUESTED_MAPPING = 'Missing requested mapping: %1 to %2';
	    return MappingRegistry;
	}());
	exports.MappingRegistry = MappingRegistry;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var api_internal_contract_1 = __webpack_require__(82);
	var api_utils_1 = __webpack_require__(83);
	var EnumMappings_1 = __webpack_require__(92);
	/**
	 * Contains logic for converting Parameter models into their equivalent Api versions
	 */
	var ParametersDataConverter = (function () {
	    function ParametersDataConverter() {
	    }
	    ParametersDataConverter.convertParameterList = function (parameters) {
	        return parameters.map(ParametersDataConverter.convertParameter);
	    };
	    // Converts a single parameter.
	    // Rough port of https://opengrok/source/xref/dev_nessie/workgroup/vqlweb/scriptsharp/src/UI/Api/ApiParameterHandler.cs#95
	    ParametersDataConverter.convertParameter = function (param) {
	        var currentValue = ParametersDataConverter.convertAliasedDataValue(param.valueAlias, param.formattedValue);
	        var allowableValuesType = EnumMappings_1.PresLayerToApiEnumMappings.parameterTypesDomainType.convert(param.parameterDomainType);
	        var result = {
	            name: param.fieldCaption,
	            fieldName: param.parameterName,
	            dataType: EnumMappings_1.PresLayerToApiEnumMappings.dataType.convert(param.dataType),
	            currentValue: currentValue,
	            allowableValuesType: allowableValuesType
	        };
	        if (allowableValuesType === api_internal_contract_1.DomainRestrictionType.List) {
	            var allowableValues = new Array();
	            for (var i = 0; i < param.valuesAliases.length; i++) {
	                var adv = param.valuesAliases[i];
	                var formattedValue = param.formattedValues[i];
	                allowableValues.push(ParametersDataConverter.convertAliasedDataValue(adv, formattedValue));
	            }
	            result.allowableValues = allowableValues;
	        }
	        else if (allowableValuesType === api_internal_contract_1.DomainRestrictionType.Range) {
	            result.minValue = ParametersDataConverter.makeDataValue(param.valueMin, param.formattedMin);
	            result.maxValue = ParametersDataConverter.makeDataValue(param.valueMax, param.formattedMax);
	            result.stepSize = ParametersDataConverter.convertNumber(result.dataType, param.valueInc);
	            result.dateStepPeriod = EnumMappings_1.PresLayerToApiEnumMappings.dateStepPeriod.convert(param.datePeriodType, false);
	        }
	        else {
	            // Nothing to do in the case that all values are allowed
	        }
	        return result;
	    };
	    ParametersDataConverter.convertNumber = function (dataType, value) {
	        if (value) {
	            if (dataType === api_internal_contract_1.DataType.Int || dataType === api_internal_contract_1.DataType.Date || dataType === api_internal_contract_1.DataType.DateTime) {
	                return parseInt(value, 10);
	            }
	            else if (dataType === api_internal_contract_1.DataType.Float) {
	                return parseFloat(value);
	            }
	        }
	        return undefined;
	    };
	    /*tslint:disable-next-line:no-any */
	    ParametersDataConverter.makeDataValue = function (value, formattedValue, alias) {
	        var result = {
	            value: value,
	            formattedValue: formattedValue,
	            aliasedValue: alias || formattedValue
	        };
	        return result;
	    };
	    /*tslint:disable-next-line:no-any */
	    ParametersDataConverter.convertAliasedDataValue = function (adv, formattedValue) {
	        // AliasedDataValues are serialized in kind of a strange way from the platform code. They are output
	        // as an array of 2 values. The first is the actual value, the second is the alias. See AliasedDataValueSerializer::ToSerializer
	        if (!adv || !(adv instanceof Array)) {
	            throw api_utils_1.TableauException.invalid(['aliased data value']);
	        }
	        var value = adv[0];
	        var alias = adv.length < 2 ? undefined : adv[1];
	        return ParametersDataConverter.makeDataValue(value, formattedValue, alias);
	    };
	    return ParametersDataConverter;
	}());
	exports.ParametersDataConverter = ParametersDataConverter;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(4));
	__export(__webpack_require__(5));
	__export(__webpack_require__(6));
	__export(__webpack_require__(7));
	__export(__webpack_require__(8));


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * This is your main. This is where you re-export everything you want to be publicly available.
	 *
	 * The build enforces that the file has the same name as the global variable that is exported.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var EnumConverter_1 = __webpack_require__(14);
	exports.EnumConverter = EnumConverter_1.EnumConverter;
	var Param_1 = __webpack_require__(16);
	exports.Param = Param_1.Param;
	var TableauException_1 = __webpack_require__(15);
	exports.TableauException = TableauException_1.TableauException;


/***/ },
/* 103 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implemenation of the PresentationLayer contract with a bit of extra information
	 * added to work with add-ins. Most work is delegated down to the interopObject which
	 * communicates directly with the c++ layer via QWebChannel
	 *
	 * @class AddInApiPresLayerImpl
	 * @implements {contract.PresentationLayer}
	 */
	var AddInApiPresLayerImpl = (function () {
	    function AddInApiPresLayerImpl(_interopObject) {
	        var _this = this;
	        this._interopObject = _interopObject;
	        this._notificationHandlers = {};
	        if (_interopObject && _interopObject.OnNotification) {
	            _interopObject.OnNotification.connect(function (notification) {
	                _this.dispatchNotification(notification);
	            });
	        }
	    }
	    Object.defineProperty(AddInApiPresLayerImpl.prototype, "AddInInstanceInfo", {
	        /**
	         * Gets the instance info for this particular add-in from the c++ code
	         *
	         * @readonly
	         * @type {AddInInstancePresModel}
	         * @memberof AddInApiPresLayerImpl
	         */
	        get: function () {
	            return this._interopObject.addInInstanceInfo;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Invokes a command using the pres-layer interop
	     *
	     * @template T - The expected return type
	     * @param {string} commandNamespace
	     * @param {string} commandName
	     * @param {object} params
	     * @returns {Promise<T>}
	     * @memberof AddInApiPresLayerImpl
	     */
	    AddInApiPresLayerImpl.prototype.invokeCommand = function (commandNamespace, commandName, params) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            try {
	                commandNamespace = commandNamespace || 'tabdoc';
	                _this._interopObject.ExecuteCommand(commandNamespace, commandName, params, function (response) {
	                    if (!response.Success) {
	                        var msg = 'ExecuteCommand failed, with result:' + JSON.stringify(response.Result);
	                        reject(new Error(msg));
	                    }
	                    else {
	                        resolve(response.Result);
	                    }
	                });
	            }
	            catch (err) {
	                reject(err);
	            }
	        });
	    };
	    // This implementation will registration a single instance of a notification handler with the Native C++ object,
	    // and implement multi-dispatch to the web objects from h.ere
	    AddInApiPresLayerImpl.prototype.registerNotificationHandler = function (eventId, handler) {
	        var _this = this;
	        if (eventId in this._notificationHandlers) {
	            this._notificationHandlers[eventId].push(handler);
	        }
	        else {
	            this._notificationHandlers[eventId] = [handler];
	            try {
	                this._interopObject.RegisterNotificationHandler(eventId);
	            }
	            catch (err) {
	                // console.log('RegisterNotificationHandler failed: ' + err);
	            }
	        }
	        return function () { return _this.removeNotificationHandler(eventId, handler); };
	    };
	    AddInApiPresLayerImpl.prototype.removeNotificationHandler = function (eventId, handler) {
	        var handlerList = this._notificationHandlers[eventId];
	        if (!handlerList) {
	            return;
	        }
	        var foundIndex = handlerList.indexOf(handler);
	        if (foundIndex >= 0) {
	            handlerList.splice(foundIndex, 1);
	        }
	        if (handlerList.length === 0) {
	            delete this._notificationHandlers[eventId];
	        }
	    };
	    AddInApiPresLayerImpl.prototype.dispatchNotification = function (notification) {
	        // console.log('received notification: ' + JSON.stringify(notification));
	        var eventId = notification.eventId;
	        var presModel = notification.presModel;
	        if (eventId in this._notificationHandlers) {
	            var handlers = this._notificationHandlers[eventId];
	            for (var i = handlers.length - 1; i >= 0; i--) {
	                handlers[i](presModel);
	            }
	        }
	    };
	    return AddInApiPresLayerImpl;
	}());
	exports.AddInApiPresLayerImpl = AddInApiPresLayerImpl;


/***/ },
/* 104 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Implementation of the InternalApiDispatcher for desktop. Since this will run in the same
	 * frame as the ApiEventHandler, this class mostly just marshalls down to that implementation
	 *
	 * @export
	 * @class DesktopApiDispatcher
	 * @implements {InternalApiDispatcher}
	 */
	var DesktopApiDispatcher = (function () {
	    function DesktopApiDispatcher(_apiEventHandler) {
	        var _this = this;
	        this._apiEventHandler = _apiEventHandler;
	        this._notificationHandlers = [];
	        this._apiEventHandler.setEventHandler(function (notificationId, model) {
	            _this._notificationHandlers.forEach(function (handler) { return handler({
	                notificationId: notificationId,
	                data: model
	            }); });
	        });
	    }
	    DesktopApiDispatcher.prototype.setVersionNumber = function (versionNumber) {
	        this._apiEventHandler.setVersionNumber(versionNumber);
	    };
	    DesktopApiDispatcher.prototype.execute = function (verb, parameters) {
	        // Just pass this right through to the ApiEventHandler
	        return this._apiEventHandler.execute(verb, parameters);
	    };
	    DesktopApiDispatcher.prototype.registerNotificationHandler = function (handler) {
	        this._notificationHandlers.push(handler);
	    };
	    DesktopApiDispatcher.prototype.unregisterNotificationHandler = function (handler) {
	        this._notificationHandlers = this._notificationHandlers.filter(function (h) { return h !== handler; });
	    };
	    return DesktopApiDispatcher;
	}());
	exports.DesktopApiDispatcher = DesktopApiDispatcher;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	__webpack_require__(106);
	var qwebchannel_1 = __webpack_require__(107);
	/**
	 * Initializes the QWebChannel contract and returns the pres layer interop object
	 *
	 * @returns {Promise<AddInApiPresLayerInteropObject>}
	 */
	function initializeWebChannelPresLayer() {
	    return new Promise(function (resolve, reject) {
	        try {
	            // tslint:disable-next-line
	            new qwebchannel_1.QWebChannel(qt.webChannelTransport, function (channel) {
	                // tslint:disable-next-line
	                var addInPresLayer = channel.objects['addInPresLayer'];
	                resolve(addInPresLayer);
	            });
	        }
	        catch (e) {
	            reject(e);
	        }
	    });
	}
	exports.initializeWebChannelPresLayer = initializeWebChannelPresLayer;
	function hasQt() {
	    return typeof qt === 'object';
	}
	exports.hasQt = hasQt;


/***/ },
/* 106 */
/***/ function(module, exports) {



/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/****************************************************************************
	**
	** Copyright (C) 2015 The Qt Company Ltd.
	** Copyright (C) 2014 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff <milian.wolff@kdab.com>
	** Contact: http://www.qt.io/licensing/
	**
	** This file is part of the QtWebChannel module of the Qt Toolkit.
	**
	** $QT_BEGIN_LICENSE:LGPL21$
	** Commercial License Usage
	** Licensees holding valid commercial Qt licenses may use this file in
	** accordance with the commercial license agreement provided with the
	** Software or, alternatively, in accordance with the terms contained in
	** a written agreement between you and The Qt Company. For licensing terms
	** and conditions see http://www.qt.io/terms-conditions. For further
	** information use the contact form at http://www.qt.io/contact-us.
	**
	** GNU Lesser General Public License Usage
	** Alternatively, this file may be used under the terms of the GNU Lesser
	** General Public License version 2.1 or version 3 as published by the Free
	** Software Foundation and appearing in the file LICENSE.LGPLv21 and
	** LICENSE.LGPLv3 included in the packaging of this file. Please review the
	** following information to ensure the GNU Lesser General Public License
	** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
	** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
	**
	** As a special exception, The Qt Company gives you certain additional
	** rights. These rights are described in The Qt Company LGPL Exception
	** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
	**
	** $QT_END_LICENSE$
	**
	****************************************************************************/
	
	"use strict";
	
	var QWebChannelMessageTypes = {
	    signal: 1,
	    propertyUpdate: 2,
	    init: 3,
	    idle: 4,
	    debug: 5,
	    invokeMethod: 6,
	    connectToSignal: 7,
	    disconnectFromSignal: 8,
	    setProperty: 9,
	    response: 10,
	};
	
	var QWebChannel = function(transport, initCallback)
	{
	    if (typeof transport !== "object" || typeof transport.send !== "function") {
	        console.error("The QWebChannel expects a transport object with a send function and onmessage callback property." +
	                      " Given is: transport: " + typeof(transport) + ", transport.send: " + typeof(transport.send));
	        return;
	    }
	
	    var channel = this;
	    this.transport = transport;
	
	    this.send = function(data)
	    {
	        if (typeof(data) !== "string") {
	            data = JSON.stringify(data);
	        }
	        channel.transport.send(data);
	    }
	
	    this.transport.onmessage = function(message)
	    {
	        var data = message.data;
	        if (typeof data === "string") {
	            data = JSON.parse(data);
	        }
	        switch (data.type) {
	            case QWebChannelMessageTypes.signal:
	                channel.handleSignal(data);
	                break;
	            case QWebChannelMessageTypes.response:
	                channel.handleResponse(data);
	                break;
	            case QWebChannelMessageTypes.propertyUpdate:
	                channel.handlePropertyUpdate(data);
	                break;
	            default:
	                console.error("invalid message received:", message.data);
	                break;
	        }
	    }
	
	    this.execCallbacks = {};
	    this.execId = 0;
	    this.exec = function(data, callback)
	    {
	        if (!callback) {
	            // if no callback is given, send directly
	            channel.send(data);
	            return;
	        }
	        if (channel.execId === Number.MAX_VALUE) {
	            // wrap
	            channel.execId = Number.MIN_VALUE;
	        }
	        if (data.hasOwnProperty("id")) {
	            console.error("Cannot exec message with property id: " + JSON.stringify(data));
	            return;
	        }
	        data.id = channel.execId++;
	        channel.execCallbacks[data.id] = callback;
	        channel.send(data);
	    };
	
	    this.objects = {};
	
	    this.handleSignal = function(message)
	    {
	        var object = channel.objects[message.object];
	        if (object) {
	            object.signalEmitted(message.signal, message.args);
	        } else {
	            console.warn("Unhandled signal: " + message.object + "::" + message.signal);
	        }
	    }
	
	    this.handleResponse = function(message)
	    {
	        if (!message.hasOwnProperty("id")) {
	            console.error("Invalid response message received: ", JSON.stringify(message));
	            return;
	        }
	        channel.execCallbacks[message.id](message.data);
	        delete channel.execCallbacks[message.id];
	    }
	
	    this.handlePropertyUpdate = function(message)
	    {
	        for (var i in message.data) {
	            var data = message.data[i];
	            var object = channel.objects[data.object];
	            if (object) {
	                object.propertyUpdate(data.signals, data.properties);
	            } else {
	                console.warn("Unhandled property update: " + data.object + "::" + data.signal);
	            }
	        }
	        channel.exec({type: QWebChannelMessageTypes.idle});
	    }
	
	    this.debug = function(message)
	    {
	        channel.send({type: QWebChannelMessageTypes.debug, data: message});
	    };
	
	    channel.exec({type: QWebChannelMessageTypes.init}, function(data) {
	        for (var objectName in data) {
	            var object = new QObject(objectName, data[objectName], channel);
	        }
	        // now unwrap properties, which might reference other registered objects
	        for (var objectName in channel.objects) {
	            channel.objects[objectName].unwrapProperties();
	        }
	        if (initCallback) {
	            initCallback(channel);
	        }
	        channel.exec({type: QWebChannelMessageTypes.idle});
	    });
	};
	
	function QObject(name, data, webChannel)
	{
	    this.__id__ = name;
	    webChannel.objects[name] = this;
	
	    // List of callbacks that get invoked upon signal emission
	    this.__objectSignals__ = {};
	
	    // Cache of all properties, updated when a notify signal is emitted
	    this.__propertyCache__ = {};
	
	    var object = this;
	
	    // ----------------------------------------------------------------------
	
	    this.unwrapQObject = function(response)
	    {
	        if (response instanceof Array) {
	            // support list of objects
	            var ret = new Array(response.length);
	            for (var i = 0; i < response.length; ++i) {
	                ret[i] = object.unwrapQObject(response[i]);
	            }
	            return ret;
	        }
	        if (!response
	            || !response["__QObject*__"]
	            || response["id"] === undefined) {
	            return response;
	        }
	
	        var objectId = response.id;
	        if (webChannel.objects[objectId])
	            return webChannel.objects[objectId];
	
	        if (!response.data) {
	            console.error("Cannot unwrap unknown QObject " + objectId + " without data.");
	            return;
	        }
	
	        var qObject = new QObject( objectId, response.data, webChannel );
	        qObject.destroyed.connect(function() {
	            if (webChannel.objects[objectId] === qObject) {
	                delete webChannel.objects[objectId];
	                // reset the now deleted QObject to an empty {} object
	                // just assigning {} though would not have the desired effect, but the
	                // below also ensures all external references will see the empty map
	                // NOTE: this detour is necessary to workaround QTBUG-40021
	                var propertyNames = [];
	                for (var propertyName in qObject) {
	                    propertyNames.push(propertyName);
	                }
	                for (var idx in propertyNames) {
	                    delete qObject[propertyNames[idx]];
	                }
	            }
	        });
	        // here we are already initialized, and thus must directly unwrap the properties
	        qObject.unwrapProperties();
	        return qObject;
	    }
	
	    this.unwrapProperties = function()
	    {
	        for (var propertyIdx in object.__propertyCache__) {
	            object.__propertyCache__[propertyIdx] = object.unwrapQObject(object.__propertyCache__[propertyIdx]);
	        }
	    }
	
	    function addSignal(signalData, isPropertyNotifySignal)
	    {
	        var signalName = signalData[0];
	        var signalIndex = signalData[1];
	        object[signalName] = {
	            connect: function(callback) {
	                if (typeof(callback) !== "function") {
	                    console.error("Bad callback given to connect to signal " + signalName);
	                    return;
	                }
	
	                object.__objectSignals__[signalIndex] = object.__objectSignals__[signalIndex] || [];
	                object.__objectSignals__[signalIndex].push(callback);
	
	                if (!isPropertyNotifySignal && signalName !== "destroyed") {
	                    // only required for "pure" signals, handled separately for properties in propertyUpdate
	                    // also note that we always get notified about the destroyed signal
	                    webChannel.exec({
	                        type: QWebChannelMessageTypes.connectToSignal,
	                        object: object.__id__,
	                        signal: signalIndex
	                    });
	                }
	            },
	            disconnect: function(callback) {
	                if (typeof(callback) !== "function") {
	                    console.error("Bad callback given to disconnect from signal " + signalName);
	                    return;
	                }
	                object.__objectSignals__[signalIndex] = object.__objectSignals__[signalIndex] || [];
	                var idx = object.__objectSignals__[signalIndex].indexOf(callback);
	                if (idx === -1) {
	                    console.error("Cannot find connection of signal " + signalName + " to " + callback.name);
	                    return;
	                }
	                object.__objectSignals__[signalIndex].splice(idx, 1);
	                if (!isPropertyNotifySignal && object.__objectSignals__[signalIndex].length === 0) {
	                    // only required for "pure" signals, handled separately for properties in propertyUpdate
	                    webChannel.exec({
	                        type: QWebChannelMessageTypes.disconnectFromSignal,
	                        object: object.__id__,
	                        signal: signalIndex
	                    });
	                }
	            }
	        };
	    }
	
	    /**
	     * Invokes all callbacks for the given signalname. Also works for property notify callbacks.
	     */
	    function invokeSignalCallbacks(signalName, signalArgs)
	    {
	        var connections = object.__objectSignals__[signalName];
	        if (connections) {
	            connections.forEach(function(callback) {
	                callback.apply(callback, signalArgs);
	            });
	        }
	    }
	
	    this.propertyUpdate = function(signals, propertyMap)
	    {
	        // update property cache
	        for (var propertyIndex in propertyMap) {
	            var propertyValue = propertyMap[propertyIndex];
	            object.__propertyCache__[propertyIndex] = propertyValue;
	        }
	
	        for (var signalName in signals) {
	            // Invoke all callbacks, as signalEmitted() does not. This ensures the
	            // property cache is updated before the callbacks are invoked.
	            invokeSignalCallbacks(signalName, signals[signalName]);
	        }
	    }
	
	    this.signalEmitted = function(signalName, signalArgs)
	    {
	        invokeSignalCallbacks(signalName, signalArgs);
	    }
	
	    function addMethod(methodData)
	    {
	        var methodName = methodData[0];
	        var methodIdx = methodData[1];
	        object[methodName] = function() {
	            var args = [];
	            var callback;
	            for (var i = 0; i < arguments.length; ++i) {
	                if (typeof arguments[i] === "function")
	                    callback = arguments[i];
	                else
	                    args.push(arguments[i]);
	            }
	
	            webChannel.exec({
	                "type": QWebChannelMessageTypes.invokeMethod,
	                "object": object.__id__,
	                "method": methodIdx,
	                "args": args
	            }, function(response) {
	                if (response !== undefined) {
	                    var result = object.unwrapQObject(response);
	                    if (callback) {
	                        (callback)(result);
	                    }
	                }
	            });
	        };
	    }
	
	    function bindGetterSetter(propertyInfo)
	    {
	        var propertyIndex = propertyInfo[0];
	        var propertyName = propertyInfo[1];
	        var notifySignalData = propertyInfo[2];
	        // initialize property cache with current value
	        // NOTE: if this is an object, it is not directly unwrapped as it might
	        // reference other QObject that we do not know yet
	        object.__propertyCache__[propertyIndex] = propertyInfo[3];
	
	        if (notifySignalData) {
	            if (notifySignalData[0] === 1) {
	                // signal name is optimized away, reconstruct the actual name
	                notifySignalData[0] = propertyName + "Changed";
	            }
	            addSignal(notifySignalData, true);
	        }
	
	        Object.defineProperty(object, propertyName, {
	            get: function () {
	                var propertyValue = object.__propertyCache__[propertyIndex];
	                if (propertyValue === undefined) {
	                    // This shouldn't happen
	                    console.warn("Undefined value in property cache for property \"" + propertyName + "\" in object " + object.__id__);
	                }
	
	                return propertyValue;
	            },
	            set: function(value) {
	                if (value === undefined) {
	                    console.warn("Property setter for " + propertyName + " called with undefined value!");
	                    return;
	                }
	                object.__propertyCache__[propertyIndex] = value;
	                webChannel.exec({
	                    "type": QWebChannelMessageTypes.setProperty,
	                    "object": object.__id__,
	                    "property": propertyIndex,
	                    "value": value
	                });
	            }
	        });
	
	    }
	
	    // ----------------------------------------------------------------------
	
	    data.methods.forEach(addMethod);
	
	    data.properties.forEach(bindGetterSetter);
	
	    data.signals.forEach(function(signal) { addSignal(signal, false); });
	
	    for (var name in data.enums) {
	        object[name] = data.enums[name];
	    }
	}
	
	//required for use with nodejs
	if (true) {
	    module.exports = {
	        QWebChannel: QWebChannel
	    };
	}


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA5YjdkMzE4NDUzNGE5YWM2Nzk3ZSIsIndlYnBhY2s6Ly8vLi4vc3JjL01haW4udHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL0V4dGVuc2lvbnNBcGkudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL0ltcGwvRXh0ZW5zaW9uc0ltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLWludGVybmFsLWNvbnRyYWN0L3NyYy9BcGlJbnRlcm5hbENvbnRyYWN0LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1pbnRlcm5hbC1jb250cmFjdC9zcmMvaW50ZXJmYWNlL0VudW1zLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1pbnRlcm5hbC1jb250cmFjdC9zcmMvaW50ZXJmYWNlL0ludGVybmFsQXBpRGlzcGF0Y2hlci50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktaW50ZXJuYWwtY29udHJhY3Qvc3JjL2ludGVyZmFjZS9Ob3RpZmljYXRpb25zLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1pbnRlcm5hbC1jb250cmFjdC9zcmMvaW50ZXJmYWNlL1BhcmFtZXRlcnMudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLWludGVybmFsLWNvbnRyYWN0L3NyYy9pbnRlcmZhY2UvVmVyYnMudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvQXBpU2hhcmVkLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0Rhc2hib2FyZC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TaGVldC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9FdmVudExpc3RlbmVyTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktdXRpbHMvc3JjL0FwaVV0aWxzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS11dGlscy9zcmMvRW51bUNvbnZlcnRlci50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktdXRpbHMvc3JjL1RhYmxlYXVFeGNlcHRpb24udHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXV0aWxzL3NyYy9QYXJhbS50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9WZXJzaW9uTnVtYmVyLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0ltcGwvRGFzaGJvYXJkSW1wbC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktZXh0ZXJuYWwtY29udHJhY3Qvc3JjL0FwaUV4dGVybmFsQ29udHJhY3QudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLWV4dGVybmFsLWNvbnRyYWN0L3NyYy9FbnVtcy50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9EYXNoYm9hcmRPYmplY3QudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRW51bU1hcHBpbmdzL0ludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncy50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Qb2ludC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TaXplLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1dvcmtzaGVldC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9JbXBsL1NoZWV0SW1wbC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TZXJ2aWNlcy9TZXJ2aWNlUmVnaXN0cnkudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9TaGVldEluZm9JbXBsLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0ltcGwvV29ya3NoZWV0SW1wbC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9EYXRhU291cmNlLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0ltcGwvRGF0YVNvdXJjZUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9GaWVsZEltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvQ29ubmVjdGlvblN1bW1hcnkudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRmllbGQudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvVGFibGVTdW1tYXJ5LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0ltcGwvU2luZ2xlRXZlbnRNYW5hZ2VySW1wbC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9FdmVudHMvRmlsdGVyQ2hhbmdlZEV2ZW50LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0V2ZW50cy9UYWJsZWF1V29ya3NoZWV0RXZlbnQudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRXZlbnRzL1RhYmxlYXVTaGVldEV2ZW50LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0V2ZW50cy9UYWJsZWF1RXZlbnQudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRXZlbnRzL01hcmtzU2VsZWN0ZWRFdmVudC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TZXJ2aWNlcy9HZXREYXRhU2VydmljZS50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TZXJ2aWNlcy9SZWdpc3RlckFsbFNoYXJlZFNlcnZpY2VzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL2ltcGwvRGF0YVNvdXJjZVNlcnZpY2VJbXBsLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL2ltcGwvRmlsdGVyU2VydmljZUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRW51bU1hcHBpbmdzL0V4dGVybmFsVG9JbnRlcm5hbEVudW1NYXBwaW5ncy50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Nb2RlbHMvRmlsdGVyTW9kZWxzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL01vZGVscy9HZXREYXRhTW9kZWxzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL2ltcGwvR2V0RGF0YVNlcnZpY2VJbXBsLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL2ltcGwvTm90aWZpY2F0aW9uU2VydmljZUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvU2VydmljZXMvaW1wbC9QYXJhbWV0ZXJzU2VydmljZUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9QYXJhbWV0ZXJJbXBsLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0V2ZW50cy9QYXJhbWV0ZXJDaGFuZ2VkRXZlbnQudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvUGFyYW1ldGVyLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL2ltcGwvU2VsZWN0aW9uU2VydmljZUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvTW9kZWxzL1NlbGVjdGlvbk1vZGVscy50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Dcm9zc0ZyYW1lL0Nyb3NzRnJhbWVCb290c3RyYXAudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLW1lc3NhZ2luZy9zcmMvQXBpTWVzc2FnaW5nLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1tZXNzYWdpbmcvc3JjL0Nyb3NzRnJhbWVNZXNzZW5nZXIudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9HdWlkLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1tZXNzYWdpbmcvc3JjL0Nyb3NzRnJhbWVQcmVwYXJlZE1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLW1lc3NhZ2luZy9zcmMvaW50ZXJmYWNlL01lc3NhZ2VUeXBlcy50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktbWVzc2FnaW5nL3NyYy9NZXNzYWdlVHlwZUNoZWNrcy50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Dcm9zc0ZyYW1lL0Nyb3NzRnJhbWVEaXNwYXRjaGVyLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9OYW1lc3BhY2VzL0Rhc2hib2FyZENvbnRlbnQudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL05hbWVzcGFjZXMvRW52aXJvbm1lbnQudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL05hbWVzcGFjZXMvU2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL05hbWVzcGFjZXMvVUkudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL1NlcnZpY2VzL1JlZ2lzdGVyQWxsRXh0ZW5zaW9uc1NlcnZpY2VzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9TZXJ2aWNlcy9JbXBsL0luaXRpYWxpemF0aW9uU2VydmljZUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL1NlcnZpY2VzL0ltcGwvU2V0dGluZ3NTZXJ2aWNlSW1wbC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9leHRlbnNpb25zLWFwaS9zcmMvU2VydmljZXMvSW1wbC9VSVNlcnZpY2VJbXBsLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9JbXBsL1NldHRpbmdzSW1wbC50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9leHRlbnNpb25zLWFwaS9zcmMvSW1wbC9VSUltcGwudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL05hbWVzcGFjZXMvRXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL0ZyZWxhcmREZXNrdG9wQm9vdHN0cmFwLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9BcGlDb3JlLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9BcGlFdmVudEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLWNvcmUvZ2VuLXNyYy9wcmVzbGF5ZXIvUGFyYW1zLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9Db21tYW5kTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktY29yZS9nZW4tc3JjL3ByZXNsYXllci9Db21tYW5kSWRzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9Db21tYW5kTWFwcGluZ1JlZ2lzdHJ5LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9Db21tYW5kUmVnaXN0cmF0aW9uLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9FdmVudE1hcHBpbmdSZWdpc3RyeUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLWNvcmUvZ2VuLXNyYy9wcmVzbGF5ZXIvRXZlbnRzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9QcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvRW51bU1hcHBpbmdzLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL2dlbi1zcmMvcHJlc2xheWVyL0VudW1zLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9QYXJhbWV0ZXJNYXBwaW5nUmVnaXN0cnlGYWN0b3J5LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9BY3RpdmVNYXJrc0RhdGFDb252ZXJ0ZXIudHMiLCJ3ZWJwYWNrOi8vL0Q6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL1VuZGVybHlpbmdEYXRhQ29udmVydGVyLnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9BcGlUb1ByZXNMYXllckNvbnZlcnRlci50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvRmlsdGVyc0NvbnZlcnRlci50cyIsIndlYnBhY2s6Ly8vRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvTWFwcGluZ1JlZ2lzdHJ5LnRzIiwid2VicGFjazovLy9EOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9QYXJhbWV0ZXJzRGF0YUNvbnZlcnRlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL0FkZEluQXBpUHJlc0xheWVySW1wbC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL0Rlc2t0b3BBcGlEaXNwYXRjaGVyLnRzIiwid2VicGFjazovLy8uLi9zcmMvUXRXZWJDaGFubmVsSW1wbC50cyIsIndlYnBhY2s6Ly8vLi4vfi9xd2ViY2hhbm5lbC9xd2ViY2hhbm5lbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTztBQ1ZBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3RDQSxzQ0FBbUQ7QUFFbkQseURBQXdEO0FBRXhELHFGQUFvRjtBQUNwRix5REFBd0Q7QUFDeEQsc0NBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFDO0tBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEdBQUcsQ0FBQyxDQUFD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SUFBRyw0Q0FBNEIsQ0FBQyxHQUFHO1NBQ3BFLEdBQUMsNENBQTRCLENBQUMsS0FBSyxJQUFHLDRDQUE0QixDQUFDLEtBQUs7U0FDeEUsR0FBQyw0Q0FBNEIsQ0FBQyxNQUFNLElBQUcsNENBQTRCLENBQUMsTUFBTTtTQUMxRSxHQUFDLDRDQUE0QixDQUFDLEdBQUcsSUFBRyw0Q0FBNEIsQ0FBQyxHQUFHO1NBQ3BFLEdBQUMsNENBQTRCLENBQUMsR0FBRyxJQUFHLDRDQUE0QixDQUFDLEdBQUc7U0FDcEUsR0FBQyw0Q0FBNEIsQ0FBQyxJQUFJLElBQUcsNENBQTRCLENBQUMsSUFBSTtTQUN0RSxHQUFDLDRDQUE0QixDQUFDLEtBQUssSUFBRyw0Q0FBNEIsQ0FBQyxLQUFLO1NBQ3hFLEdBQUMsNENBQTRCLENBQUMsUUFBUSxJQUFHLDRDQUE0QixDQUFDLFFBQVE7U0FDOUUsR0FBQyw0Q0FBNEIsQ0FBQyxHQUFHLElBQUcsNENBQTRCLENBQUMsR0FBRztTQUNwRSxHQUFDLDRDQUE0QixDQUFDLEdBQUcsSUFBRyw0Q0FBNEIsQ0FBQyxHQUFHO1NBQ3BFLEdBQUMsNENBQTRCLENBQUMsTUFBTSxJQUFHLDRDQUE0QixDQUFDLE1BQU07U0FDMUUsR0FBQyw0Q0FBNEIsQ0FBQyxHQUFHLElBQUcsNENBQTRCLENBQUMsR0FBRztTQUNwRSxHQUFDLDRDQUE0QixDQUFDLE1BQU0sSUFBRyw0Q0FBNEIsQ0FBQyxNQUFNO1NBQzFFLEdBQUMsNENBQTRCLENBQUMsU0FBUyxJQUFHLDRDQUE0QixDQUFDLFNBQVM7U0FDaEYsR0FBQyw0Q0FBNEIsQ0FBQyxJQUFJLElBQUcsNENBQTRCLENBQUMsSUFBSTtTQUN0RSxHQUFDLDRDQUE0QixDQUFDLEdBQUcsSUFBRyw0Q0FBNEIsQ0FBQyxHQUFHO1NBQ3BFLEdBQUMsNENBQTRCLENBQUMsTUFBTSxJQUFHLDRDQUE0QixDQUFDLE1BQU07U0FDMUUsR0FBQyw0Q0FBNEIsQ0FBQyxNQUFNLElBQUcsNENBQTRCLENBQUMsTUFBTTtTQUMxRSxHQUFDLDRDQUE0QixDQUFDLE1BQU0s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Q0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx1QkFBc0IsbUNBQW1DO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQSx1QkFBc0IsbURBQW1EO0FBQ3pFOztBQUVBLG1CQUFrQixtQ0FBbUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBc0IsbUNBQW1DO0FBQ3pELE1BQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUErRDtBQUMvRCxxQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBcUI7QUFDckI7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUEyQixzQkFBc0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCO0FBQ0EsVUFBUzs7QUFFVDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSw0Q0FBMkMsMEJBQTBCLEVBQUU7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJmcmVsYXJkLWRlc2t0b3AtYm9vdHN0cmFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiTWFpblwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJNYWluXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2Rpc3QvXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCA5YjdkMzE4NDUzNGE5YWM2Nzk3ZVxuICoqLyIsImltcG9ydCAqIGFzIHRhYmxlYXUgZnJvbSAnQHRhYmxlYXUvZXh0ZW5zaW9ucy1hcGknO1xyXG5cclxuaW1wb3J0IHsgZG9Cb290c3RyYXAgfSBmcm9tICcuL0ZyZWxhcmREZXNrdG9wQm9vdHN0cmFwJztcclxuXHJcbi8vIFRoaXMgTWFpbiBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhpcyBtb2R1bGUgaXMgbG9hZGVkLiBBdHRlbXB0IHRvIGRvIG91clxyXG4vLyBib290c3RyYXBwaW5nIHdpdGggcXQgYW5kIGxvZyBhbnkgZXJyb3JzIHdlIGVuY291bnRlclxyXG5kb0Jvb3RzdHJhcCgpLmNhdGNoKGUgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdEZXNrdG9wIGJvb3RzdHJhcHBpbmcgZmFpbGVkOiAnICsgZSk7XHJcbn0pO1xyXG5cclxuLy8gRGVjbGFyZSB0aGUgaW1wb3J0ZWQgdGFibGVhdSBvYmplY3Qgb24gdGhlIGdsb2JhbCBuYW1lc3BhY2VcclxuLy8gKFRoaXMgbXVzdCBnbyBhd2F5IG9uY2Ugd2UgZG9uJ3QgaW1wb3J0IGF0IHRoZSBBUEkgb3Vyc2VsdmVzKVxyXG5kZWNsYXJlIGdsb2JhbCAge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgLyp0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXHJcbiAgICB0YWJsZWF1OiBhbnk7XHJcbiAgfVxyXG59XHJcblxyXG53aW5kb3cudGFibGVhdSA9IHRhYmxlYXU7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4uL3NyYy9NYWluLnRzXG4gKiovIiwiLyoqXHJcbiAqIFRoaXMgaXMgeW91ciBtYWluLiBUaGlzIGlzIHdoZXJlIHlvdSByZS1leHBvcnQgZXZlcnl0aGluZyB5b3Ugd2FudCB0byBiZSBwdWJsaWNseSBhdmFpbGFibGUuXHJcbiAqXHJcbiAqIFRoZSBidWlsZCBlbmZvcmNlcyB0aGF0IHRoZSBmaWxlIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHRoZSBnbG9iYWwgdmFyaWFibGUgdGhhdCBpcyBleHBvcnRlZC5cclxuICovXHJcblxyXG4vLyBEdWUgdG8gdGhlIHdheSB3ZSBjb25maWd1cmVkIHdlYnBhY2ssIHdlIHNob3VsZCBiZSBleHBvcnRpbmcgdGhpbmdzIHdoaWNoIHdpbGwgYmUgdW5kZXJcclxuLy8gYSBnbG9iYWwgdmFyaWFibGUgY2FsbGVkIFwidGFibGVhdVwiLiBFeHBvcnQgZXZlcnl0aGluZyB3ZSB3YW50IHRvIGJlIHZpc2libGUgdW5kZXIgdGFibGVhdVxyXG4vLyBmcm9tIHRoaXMgZmlsZS5cclxuXHJcbmltcG9ydCB7IEV4dGVuc2lvbnNJbXBsIH0gZnJvbSAnLi9JbXBsL0V4dGVuc2lvbnNJbXBsJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9ucyB9IGZyb20gJy4vTmFtZXNwYWNlcy9FeHRlbnNpb25zJztcclxuXHJcbmltcG9ydCB7IFZlcnNpb25OdW1iZXIgfSBmcm9tICdAdGFibGVhdS9hcGktc2hhcmVkJztcclxuXHJcbmRlY2xhcmUgdmFyIEVYVEVOU0lPTl9BUElfVkVSU0lPTl9OVU1CRVI6IHN0cmluZztcclxuVmVyc2lvbk51bWJlci5TZXRWZXJzaW9uTnVtYmVyKEVYVEVOU0lPTl9BUElfVkVSU0lPTl9OVU1CRVIpO1xyXG5cclxuY29uc3QgZXh0ZW5zaW9uSW1wbCA9IG5ldyBFeHRlbnNpb25zSW1wbCgpO1xyXG5leHBvcnQgY29uc3QgZXh0ZW5zaW9ucyA9IG5ldyBFeHRlbnNpb25zKGV4dGVuc2lvbkltcGwpO1xyXG5cclxuLy8gRXhwb3J0IEVudW1zXHJcbi8vIFRoZXNlIHNob3cgdXAgdW5kZXIgdGhlIHRhYmxlYXUgb2JqZWN0LiBJLmUuIHRhYmxlYXUuRXh0ZW5zaW9uQ29udGV4dC5TZXJ2ZXJcclxuZXhwb3J0IHtcclxuICBFeHRlbnNpb25Db250ZXh0LFxyXG4gIEV4dGVuc2lvbk1vZGUsXHJcbiAgQW5hbHl0aWNzT2JqZWN0VHlwZSxcclxuICBDb2x1bW5UeXBlLFxyXG4gIERhc2hib2FyZE9iamVjdFR5cGUsXHJcbiAgRGF0YVR5cGUsXHJcbiAgRGF0ZVJhbmdlVHlwZSxcclxuICBFbmNvZGluZ1R5cGUsXHJcbiAgRXJyb3JDb2RlcyxcclxuICBGaWVsZEFnZ3JlZ2F0aW9uVHlwZSxcclxuICBGaWVsZFJvbGVUeXBlLFxyXG4gIEZpbHRlckRvbWFpblR5cGUsXHJcbiAgRmlsdGVyVHlwZSxcclxuICBGaWx0ZXJVcGRhdGVUeXBlLFxyXG4gIEZpbHRlck51bGxPcHRpb24sXHJcbiAgTWFya1R5cGUsXHJcbiAgUGFyYW1ldGVyVmFsdWVUeXBlLFxyXG4gIFBlcmlvZFR5cGUsXHJcbiAgUXVpY2tUYWJsZUNhbGNUeXBlLFxyXG4gIFNlbGVjdGlvblVwZGF0ZVR5cGUsXHJcbiAgU2hlZXRUeXBlLFxyXG4gIFNvcnREaXJlY3Rpb24sXHJcbiAgVGFibGVhdUV2ZW50VHlwZSxcclxuICBUcmVuZExpbmVNb2RlbFR5cGVcclxufSBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9FeHRlbnNpb25zQXBpLnRzXG4gKiovIiwiaW1wb3J0IHtcclxuICBFeHRlbnNpb25EYXNoYm9hcmRJbmZvLFxyXG4gIEV4dGVuc2lvblNldHRpbmdzSW5mbyxcclxuICBJbnRlcm5hbEFwaURpc3BhdGNoZXIsXHJcbiAgSW50ZXJuYWxBcGlEaXNwYXRjaGVySG9sZGVyLFxyXG4gIFNoZWV0UGF0aCxcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHtcclxuICBBcGlTZXJ2aWNlUmVnaXN0cnksXHJcbiAgRGFzaGJvYXJkLFxyXG4gIERhc2hib2FyZEltcGwsXHJcbiAgZG9Dcm9zc0ZyYW1lQm9vdHN0cmFwLFxyXG4gIHJlZ2lzdGVyQWxsU2hhcmVkU2VydmljZXMsXHJcbiAgVmVyc2lvbk51bWJlclxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1zaGFyZWQnO1xyXG5cclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQgeyBEYXNoYm9hcmRDb250ZW50IH0gZnJvbSAnLi4vTmFtZXNwYWNlcy9EYXNoYm9hcmRDb250ZW50JztcclxuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi9OYW1lc3BhY2VzL0Vudmlyb25tZW50JztcclxuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tICcuLi9OYW1lc3BhY2VzL1NldHRpbmdzJztcclxuaW1wb3J0IHsgVUkgfSBmcm9tICcuLi9OYW1lc3BhY2VzL1VJJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uc1NlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VzL0V4dGVuc2lvbnNTZXJ2aWNlTmFtZXMnO1xyXG5pbXBvcnQgeyBJbml0aWFsaXphdGlvblNlcnZpY2UgfSBmcm9tICcuLi9TZXJ2aWNlcy9Jbml0aWFsaXphdGlvblNlcnZpY2UnO1xyXG5pbXBvcnQgeyByZWdpc3RlckFsbEV4dGVuc2lvbnNTZXJ2aWNlcyB9IGZyb20gJy4uL1NlcnZpY2VzL1JlZ2lzdGVyQWxsRXh0ZW5zaW9uc1NlcnZpY2VzJztcclxuaW1wb3J0IHsgU2V0dGluZ3NJbXBsIH0gZnJvbSAnLi9TZXR0aW5nc0ltcGwnO1xyXG5pbXBvcnQgeyBVSUltcGwgfSBmcm9tICcuL1VJSW1wbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRXh0ZW5zaW9uc0ltcGwge1xyXG4gIHByaXZhdGUgX2luaXRpYWxpemF0aW9uUHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcclxuXHJcbiAgcHVibGljIGRhc2hib2FyZENvbnRlbnQ6IERhc2hib2FyZENvbnRlbnQ7XHJcbiAgcHVibGljIGVudmlyb25tZW50OiBFbnZpcm9ubWVudDtcclxuICBwdWJsaWMgc2V0dGluZ3M6IFNldHRpbmdzO1xyXG4gIHB1YmxpYyB1aTogVUk7XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplQXN5bmMoaXNFeHRlbnNpb25EaWFsb2c6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmICghdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlKSB7XHJcbiAgICAgIHRoaXMuX2luaXRpYWxpemF0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAvLyBGaXJzdCB0aGluZyB3ZSB3YW50IHRvIGRvIGlzIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBhIGRlc2t0b3AgZGlzcGF0Y2hlciBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yIHVzXHJcbiAgICAgICAgaWYgKEludGVybmFsQXBpRGlzcGF0Y2hlckhvbGRlci5oYXNEZXNrdG9wQXBpRGlzcGF0Y2hlclByb21pc2UoKSkge1xyXG4gICAgICAgICAgLy8gUnVubmluZyBpbiBkZXNrdG9wLCB1c2UgdGhpcyBwcm9taXNlXHJcbiAgICAgICAgICBjb25zdCBkZXNrdG9wRGlzcGF0Y2hlclByb21pc2UgPSBJbnRlcm5hbEFwaURpc3BhdGNoZXJIb2xkZXIuZ2V0RGVza3RvcERpc3BhdGNoZXJQcm9taXNlKCk7XHJcbiAgICAgICAgICBkZXNrdG9wRGlzcGF0Y2hlclByb21pc2UudGhlbigoZGlwYXRjaGVyKSA9PiB0aGlzLm9uRGlzcGF0Y2hlclJlY2VpdmVkKGRpcGF0Y2hlciwgaXNFeHRlbnNpb25EaWFsb2cpKS50aGVuKCgpID0+IHsgcmVzb2x2ZSgpOyB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gV2UgbXVzdCBiZSBydW5uaW5nIGluIHNlcnZlciwgc28gd2Ugc2hvdWxkIHRyeSB0byBraWNrIG9mIHRoZSBzZXJ2ZXIgZGlzcGF0Y2hlciBib290c3RyYXBwaW5nXHJcbiAgICAgICAgICBkb0Nyb3NzRnJhbWVCb290c3RyYXAod2luZG93LCBWZXJzaW9uTnVtYmVyLkluc3RhbmNlKS50aGVuKHRoaXMub25EaXNwYXRjaGVyUmVjZWl2ZWQuYmluZCh0aGlzKSkudGhlbigoKSA9PiB7IHJlc29sdmUoKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbkRpc3BhdGNoZXJSZWNlaXZlZChkaXNwYXRjaGVyOiBJbnRlcm5hbEFwaURpc3BhdGNoZXIsIGlzRXh0ZW5zaW9uRGlhbG9nOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBkaXNwYXRjaGVyLnNldFZlcnNpb25OdW1iZXIoVmVyc2lvbk51bWJlci5JbnN0YW5jZSk7XHJcblxyXG4gICAgLy8gQ2FsbCB0byByZWdpc3RlciBhbGwgdGhlIHNlcnZpY2VzIHdoaWNoIHdpbGwgdXNlIHRoZSBuZXdseSBpbml0aWFsaXplZCBkaXNwYXRjaGVyXHJcbiAgICByZWdpc3RlckFsbFNoYXJlZFNlcnZpY2VzKGRpc3BhdGNoZXIpO1xyXG4gICAgcmVnaXN0ZXJBbGxFeHRlbnNpb25zU2VydmljZXMoZGlzcGF0Y2hlcik7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBpbml0aWFsaXphdGlvbiBzZXJ2aWNlIGFuZCBpbml0aWFsaXplIHRoaXMgZXh0ZW5zaW9uXHJcbiAgICBjb25zdCBpbml0aWFsaXphdGlvblNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxJbml0aWFsaXphdGlvblNlcnZpY2U+KFxyXG4gICAgICBFeHRlbnNpb25zU2VydmljZU5hbWVzLkluaXRpYWxpemF0aW9uU2VydmljZSk7XHJcblxyXG4gICAgcmV0dXJuIGluaXRpYWxpemF0aW9uU2VydmljZS5pbml0aWFsaXplRGFzaGJvYXJkRXh0ZW5zaW9uc0FzeW5jKGlzRXh0ZW5zaW9uRGlhbG9nKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgIGlmICghcmVzdWx0LmV4dGVuc2lvbkluc3RhbmNlLmxvY2F0b3IuZGFzaGJvYXJkUGF0aCkge1xyXG4gICAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uaXNVbmRlZmluZWQoWydEYXNoYm9hcmRQYXRoJ10pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmRhc2hib2FyZENvbnRlbnQgPSB0aGlzLmluaXRpYWxpemVEYXNoYm9hcmRDb250ZW50KHJlc3VsdC5leHRlbnNpb25EYXNoYm9hcmRJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5leHRlbnNpb25JbnN0YW5jZS5sb2NhdG9yLmRhc2hib2FyZFBhdGgpO1xyXG4gICAgICB0aGlzLmVudmlyb25tZW50ID0gbmV3IEVudmlyb25tZW50KHJlc3VsdC5leHRlbnNpb25FbnZpcm9ubWVudCk7XHJcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSB0aGlzLmluaXRpYWxpemVTZXR0aW5ncyhyZXN1bHQuZXh0ZW5zaW9uU2V0dGluZ3NJbmZvKTtcclxuICAgICAgdGhpcy51aSA9IG5ldyBVSShuZXcgVUlJbXBsKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRpYWxpemVEYXNoYm9hcmRDb250ZW50KGluZm86IEV4dGVuc2lvbkRhc2hib2FyZEluZm8sIHNoZWV0UGF0aDogU2hlZXRQYXRoKTogRGFzaGJvYXJkQ29udGVudCB7XHJcbiAgICBjb25zdCBkYXNoYm9hcmRJbXBsID0gbmV3IERhc2hib2FyZEltcGwoaW5mbywgc2hlZXRQYXRoKTtcclxuICAgIGNvbnN0IGRhc2hib2FyZCA9IG5ldyBEYXNoYm9hcmQoZGFzaGJvYXJkSW1wbCk7XHJcbiAgICByZXR1cm4gbmV3IERhc2hib2FyZENvbnRlbnQoZGFzaGJvYXJkKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVNldHRpbmdzKHNldHRpbmdzSW5mbzogRXh0ZW5zaW9uU2V0dGluZ3NJbmZvKTogU2V0dGluZ3Mge1xyXG4gICAgY29uc3Qgc2V0dGluZ3NJbXBsID0gbmV3IFNldHRpbmdzSW1wbChzZXR0aW5nc0luZm8pO1xyXG4gICAgcmV0dXJuIG5ldyBTZXR0aW5ncyhzZXR0aW5nc0ltcGwpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9JbXBsL0V4dGVuc2lvbnNJbXBsLnRzXG4gKiovIiwiLyoqXHJcbiAqIFRoaXMgaXMgeW91ciBtYWluLiBUaGlzIGlzIHdoZXJlIHlvdSByZS1leHBvcnQgZXZlcnl0aGluZyB5b3Ugd2FudCB0byBiZSBwdWJsaWNseSBhdmFpbGFibGUuXHJcbiAqXHJcbiAqIFRoZSBidWlsZCBlbmZvcmNlcyB0aGF0IHRoZSBmaWxlIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHRoZSBnbG9iYWwgdmFyaWFibGUgdGhhdCBpcyBleHBvcnRlZC5cclxuICovXHJcblxyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZS9FbnVtcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL0ludGVybmFsQXBpRGlzcGF0Y2hlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL01vZGVscyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL05vdGlmaWNhdGlvbnMnO1xyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZS9QYXJhbWV0ZXJzJztcclxuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2UvVmVyYnMnO1xyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZS9WZXJzaW9uTnVtYmVyJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktaW50ZXJuYWwtY29udHJhY3Qvc3JjL0FwaUludGVybmFsQ29udHJhY3QudHNcbiAqKi8iLCJleHBvcnQgZW51bSBFeHRlbnNpb25Db250ZXh0IHtcclxuICBEZXNrdG9wID0gJ2Rlc2t0b3AnLFxyXG4gIFNlcnZlciA9ICdzZXJ2ZXInLFxyXG4gIFVua25vd24gPSAndW5rbm93bidcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRXh0ZW5zaW9uTW9kZSB7XHJcbiAgQXV0aG9yaW5nID0gJ2F1dGhvcmluZycsXHJcbiAgVmlld2luZyA9ICd2aWV3aW5nJyxcclxuICBVbmtub3duID0gJ3Vua25vd24nXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENvbHVtblR5cGUge1xyXG4gIERpc2NyZXRlID0gJ2Rpc2NyZXRlJyxcclxuICBDb250aW51b3VzID0gJ2NvbnRpbnVvdXMnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIERhc2hib2FyZE9iamVjdFR5cGUge1xyXG4gIEJsYW5rID0gJ2JsYW5rJyxcclxuICBXb3Jrc2hlZXQgPSAnd29ya3NoZWV0JyxcclxuICBRdWlja0ZpbHRlciA9ICdxdWljay1maWx0ZXInLFxyXG4gIFBhcmFtZXRlckNvbnRyb2wgPSAncGFyYW1ldGVyLWNvbnRyb2wnLFxyXG4gIFBhZ2VGaWx0ZXIgPSAncGFnZS1maWx0ZXInLFxyXG4gIExlZ2VuZCA9ICdsZWdlbmQnLFxyXG4gIFRpdGxlID0gJ3RpdGxlJyxcclxuICBUZXh0ID0gJ3RleHQnLFxyXG4gIEltYWdlID0gJ2ltYWdlJyxcclxuICBXZWJQYWdlID0gJ3dlYi1wYWdlJyxcclxuICBFeHRlbnNpb24gPSAnZXh0ZW5zaW9uJ1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBEYXRhVHlwZSB7XHJcbiAgU3RyaW5nID0gJ3N0cmluZycsXHJcbiAgSW50ID0gJ2ludCcsXHJcbiAgRmxvYXQgPSAnZmxvYXQnLFxyXG4gIEJvb2wgPSAnYm9vbCcsXHJcbiAgRGF0ZSA9ICdkYXRlJyxcclxuICBEYXRlVGltZSA9ICdkYXRlLXRpbWUnLFxyXG4gIFNwYXRpYWwgPSAnc3BhdGlhbCdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRW5jb2RlZERhdGFUeXBlIHtcclxuICBOdW1iZXIgPSAnbnVtYmVyJyxcclxuICBTdHJpbmcgPSAnc3RyaW5nJyxcclxuICBEYXRlID0gJ2RhdGUnLFxyXG4gIEJvb2xlYW4gPSAnYm9vbGVhbidcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRXJyb3JDb2RlIHtcclxuICBTZXJ2ZXJFcnJvciA9ICdzZXJ2ZXItZXJyb3InLFxyXG4gIEludmFsaWRBZ2dyZWdhdGlvbkZpZWxkTmFtZSA9ICdpbnZhbGlkLWFnZ3JlZ2F0aW9uLWZpZWxkLW5hbWUnLFxyXG4gIEludmFsaWRGaWx0ZXJGaWVsZE5hbWUgPSAnaW52YWxpZC1maWx0ZXItZmllbGRuYW1lJyxcclxuICBJbnZhbGlkRmlsdGVyRmllbGRWYWx1ZSA9ICdpbnZhbGlkLWZpbHRlci1maWVsZC12YWx1ZSdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRmllbGRBZ2dyZWdhdGlvblR5cGUge1xyXG4gIFN1bSA9ICdzdW0nLFxyXG4gIEF2ZyA9ICdhdmcnLFxyXG4gIE1pbiA9ICdtaW4nLFxyXG4gIE1heCA9ICdtYXgnLFxyXG4gIFN0ZGV2ID0gJ3N0ZGV2JyxcclxuICBTdGRldnAgPSAnc3RkZXZwJyxcclxuICBWYXIgPSAndmFyJyxcclxuICBWYXJwID0gJ3ZhcnAnLFxyXG4gIENvdW50ID0gJ2NvdW50JyxcclxuICBDb3VudGQgPSAnY291bnRkJyxcclxuICBNZWRpYW4gPSAnbWVkaWFuJyxcclxuICBBdHRyID0gJ2F0dHInLFxyXG4gIE5vbmUgPSAnbm9uZScsXHJcbiAgWWVhciA9ICd5ZWFyJyxcclxuICBRdHIgPSAncXRyJyxcclxuICBNb250aCA9ICdtb250aCcsXHJcbiAgRGF5ID0gJ2RheScsXHJcbiAgSG91ciA9ICdob3VyJyxcclxuICBNaW51dGUgPSAnbWludXRlJyxcclxuICBTZWNvbmQgPSAnc2Vjb25kJyxcclxuICBXZWVrID0gJ3dlZWsnLFxyXG4gIFdlZWtkYXkgPSAnd2Vla2RheScsXHJcbiAgTW9udGhZZWFyID0gJ21vbnRoLXllYXInLFxyXG4gIE1keSA9ICdtZHknLFxyXG4gIEVuZCA9ICdlbmQnLFxyXG4gIFRydW5jWWVhciA9ICd0cnVuYy15ZWFyJyxcclxuICBUcnVuY1F0ciA9ICd0cnVuYy1xdHInLFxyXG4gIFRydW5jTW9udGggPSAndHJ1bmMtbW9udGgnLFxyXG4gIFRydW5jV2VlayA9ICd0cnVuYy13ZWVrJyxcclxuICBUcnVuY0RheSA9ICd0cnVuYy1kYXknLFxyXG4gIFRydW5jSG91ciA9ICd0cnVuYy1ob3VyJyxcclxuICBUcnVuY01pbnV0ZSA9ICd0cnVuYy1taW51dGUnLFxyXG4gIFRydW5jU2Vjb25kID0gJ3RydW5jLXNlY29uZCcsXHJcbiAgUXVhcnQxID0gJ3F1YXJ0MScsXHJcbiAgUXVhcnQzID0gJ3F1YXJ0MycsXHJcbiAgU2tld25lc3MgPSAnc2tld25lc3MnLFxyXG4gIEt1cnRvc2lzID0gJ2t1cnRvc2lzJyxcclxuICBJbk91dCA9ICdpbi1vdXQnLFxyXG4gIFVzZXIgPSAndXNlcidcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRmllbGRSb2xlVHlwZSB7XHJcbiAgRGltZW5zaW9uID0gJ2RpbWVuc2lvbicsXHJcbiAgTWVhc3VyZSA9ICdtZWFzdXJlJyxcclxuICBVbmtub3duID0gJ3Vua25vd24nXHJcbn1cclxuXHJcbi8qKlxyXG4gKiAgVGhlIGRpZmZlcmVudCB1cGRhdGUgdHlwZXMgZm9yIGFwcGx5aW5nIGZpbHRlci5cclxuICovXHJcbmV4cG9ydCBlbnVtIEZpbHRlclVwZGF0ZVR5cGUge1xyXG4gIEFkZCA9ICdhZGQnLFxyXG4gIEFsbCA9ICdhbGwnLFxyXG4gIFJlcGxhY2UgPSAncmVwbGFjZScsXHJcbiAgUmVtb3ZlID0gJ3JlbW92ZSdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU2hlZXRUeXBlIHtcclxuICBEYXNoYm9hcmQgPSAnZGFzaGJvYXJkJyxcclxuICBTdG9yeSA9ICdzdG9yeScsXHJcbiAgV29ya3NoZWV0ID0gJ3dvcmtzaGVldCdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRG9tYWluUmVzdHJpY3Rpb25UeXBlIHtcclxuICBBbGwgPSAnYWxsJyxcclxuICBMaXN0ID0gJ2xpc3QnLFxyXG4gIFJhbmdlID0gJ3JhbmdlJ1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBEYXRlU3RlcFBlcmlvZCB7XHJcbiAgWWVhcnMgPSAneWVhcnMnLFxyXG4gIFF1YXJ0ZXJzID0gJ3F1YXJ0ZXJzJyxcclxuICBNb250aHMgPSAnbW9udGhzJyxcclxuICBXZWVrcyA9ICd3ZWVrcycsXHJcbiAgRGF5cyA9ICdkYXlzJyxcclxuICBIb3VycyA9ICdob3VycycsXHJcbiAgTWludXRlcyA9ICdtaW51dGVzJyxcclxuICBTZWNvbmRzID0gJ3NlY29uZHMnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgb3B0aW9uIGZvciBzcGVjaWZ5aW5nIHdoaWNoIHZhbHVlcyB0byBpbmNsdWRlIGZvciBmaWx0ZXJpbmcuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBGaWx0ZXJOdWxsT3B0aW9uIHtcclxuICBOdWxsVmFsdWVzID0gJ251bGx2YWx1ZXMnLFxyXG4gIE5vbk51bGxWYWx1ZXMgPSAnbm9ubnVsbHZhbHVlcycsXHJcbiAgQWxsVmFsdWVzID0gJ2FsbHZhbHVlcydcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIGZpbHRlciBkb21haW5cclxuICovXHJcbmV4cG9ydCBlbnVtIEZpbHRlckRvbWFpblR5cGUge1xyXG4gIFJlbGV2YW50ID0gJ3JlbGV2YW50JyxcclxuICBEYXRhYmFzZSA9ICdkYXRhYmFzZSdcclxufVxyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIGVudW0gZm9yIHNwZWNpZnlpbmcgdGhlIHNlbGVjdGlvbiB0eXBlIGZvciBzZWxlY3QgbWFya3MgYXBpLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gU2VsZWN0aW9uVXBkYXRlVHlwZSB7XHJcbiAgUmVwbGFjZSA9ICdzZWxlY3QtcmVwbGFjZScsXHJcbiAgQWRkID0gJ3NlbGVjdC1hZGQnLFxyXG4gIFJlbW92ZSA9ICdzZWxlY3QtcmVtb3ZlJ1xyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgZW51bSBmb3Igc3BlY2lmeWluZyB0aGUgaW5jbHVkZWQgdmFsdWVzIHR5cGUgZm9yIHJhbmdlIHNlbGVjdGlvbi5cclxuICovXHJcbmV4cG9ydCBlbnVtIFF1YW50aXRhdGl2ZUluY2x1ZGVkVmFsdWVzIHtcclxuICBJbmNsdWRlTnVsbCA9ICdpbmNsdWRlLW51bGwnLFxyXG4gIEluY2x1ZGVOb25OdWxsID0gJ2luY2x1ZGUtbm9uLW51bGwnLFxyXG4gIEluY2x1ZGVBbGwgPSAnaW5jbHVkZS1hbGwnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUeXBlIG9mIG1hcmsgZm9yIGEgZ2l2ZW4gbWFya3MgY2FyZCBpbiBhIHZpei5cclxuICovXHJcbmV4cG9ydCBlbnVtIE1hcmtUeXBlIHtcclxuICAgIEJhciA9ICdiYXInLFxyXG4gICAgTGluZSA9ICdsaW5lJyxcclxuICAgIEFyZWEgPSAnYXJlYScsXHJcbiAgICBTcXVhcmUgPSAnc3F1YXJlJyxcclxuICAgIENpcmNsZSA9ICdjaXJjbGUnLFxyXG4gICAgU2hhcGUgPSAnc2hhcGUnLFxyXG4gICAgVGV4dCA9ICd0ZXh0JyxcclxuICAgIE1hcCA9ICdtYXAnLFxyXG4gICAgUGllID0gJ3BpZScsXHJcbiAgICBHYW50dEJhciA9ICdnYW50dC1iYXInLFxyXG4gICAgUG9seWdvbiA9ICdwb2x5Z29uJyxcclxufVxyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIGVudW0gZm9yIHNwZWNpZnlpbmcgdGhlIHR5cGUgb2YgZmlsdGVyXHJcbiAqL1xyXG5leHBvcnQgZW51bSBGaWx0ZXJUeXBlIHtcclxuICBDYXRlZ29yaWNhbCA9ICdjYXRlZ29yaWNhbCcsXHJcbiAgUmFuZ2UgPSAncmFuZ2UnLFxyXG4gIFJlbGF0aXZlRGF0ZSA9ICdyZWxhdGl2ZURhdGUnLFxyXG4gIEhpZXJhcmNoaWNhbCA9ICdoaWVyYXJjaGljYWwnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBlbnVtIGZvciBzcGVjaWZ5aW5nIHRoZSBEYXRlUmFuZ2VUeXBlIG9mIGEgcmVsYXRpdmUgZGF0ZSBmaWx0ZXJcclxuICovXHJcbmV4cG9ydCBlbnVtIERhdGVSYW5nZVR5cGUge1xyXG4gIC8qKlxyXG4gICAqIFJlZmVycyB0byB0aGUgbGFzdCBkYXksIHdlZWssIG1vbnRoLCBldGMuIG9mIHRoZSBkYXRlIHBlcmlvZC5cclxuICAgKi9cclxuICBMYXN0ID0gJ2xhc3QnLFxyXG4gIC8qKlxyXG4gICAqIFJlZmVycyB0byB0aGUgbGFzdCBOIGRheXMsIHdlZWtzLCBtb250aHMsIGV0Yy4gb2YgdGhlIGRhdGUgcGVyaW9kLlxyXG4gICAqL1xyXG4gIExhc3ROID0gJ2xhc3ROJyxcclxuICAvKipcclxuICAgKiBSZWZlcnMgdG8gdGhlIG5leHQgZGF5LCB3ZWVrLCBtb250aCwgZXRjLiBvZiB0aGUgZGF0ZSBwZXJpb2QuXHJcbiAgICovXHJcbiAgTmV4dCA9ICduZXh0JyxcclxuICAvKipcclxuICAgKiBSZWZlcnMgdG8gdGhlIG5leHQgTiBkYXlzLCB3ZWVrcywgbW9udGhzLCBldGMuIG9mIHRoZSBkYXRlIHBlcmlvZC5cclxuICAgKi9cclxuICBOZXh0TiA9ICduZXh0TicsXHJcbiAgLyoqXHJcbiAgICogUmVmZXJzIHRvIHRoZSBjdXJyZW50IGRheSwgd2VlaywgbW9udGgsIGV0Yy4gb2YgdGhlIGRhdGUgcGVyaW9kLlxyXG4gICAqL1xyXG4gIEN1cnJlbnQgPSAnY3VycmVudCcsXHJcbiAgLyoqXHJcbiAgICogUmVmZXJzIHRvIGV2ZXJ5dGhpbmcgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgY3VycmVudCBkYXksIHdlZWssIG1vbnRoLCBldGMuIG9mIHRoZSBkYXRlIHBlcmlvZC5cclxuICAgKi9cclxuICBUb0RhdGUgPSAndG9EYXRlJ1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWludGVybmFsLWNvbnRyYWN0L3NyYy9pbnRlcmZhY2UvRW51bXMudHNcbiAqKi8iLCJpbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4vTW9kZWxzJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uSWQgfSBmcm9tICcuL05vdGlmaWNhdGlvbnMnO1xyXG5pbXBvcnQgeyBWZXJiSWQgfSBmcm9tICcuL1ZlcmJzJztcclxuaW1wb3J0IHsgVmVyc2lvbk51bWJlciB9IGZyb20gJy4vVmVyc2lvbk51bWJlcic7XHJcblxyXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb25IYW5kbGVyID0gKG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFeGVjdXRlUGFyYW1ldGVycyB7XHJcbiAgW2tleTogc3RyaW5nXTogTW9kZWw7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXhlY3V0ZVJlc3BvbnNlIHtcclxuICByZXN1bHQ6IE1vZGVsO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbiB7XHJcbiAgbm90aWZpY2F0aW9uSWQ6IE5vdGlmaWNhdGlvbklkO1xyXG4gIGRhdGE6IE1vZGVsO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEludGVybmFsQXBpRGlzcGF0Y2hlciB7XHJcbiAgc2V0VmVyc2lvbk51bWJlcih2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uTnVtYmVyKTogdm9pZDtcclxuICBleGVjdXRlKHZlcmI6IFZlcmJJZCwgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMpOiBQcm9taXNlPEV4ZWN1dGVSZXNwb25zZT47XHJcbiAgcmVnaXN0ZXJOb3RpZmljYXRpb25IYW5kbGVyKGhhbmRsZXI6IE5vdGlmaWNhdGlvbkhhbmRsZXIpOiB2b2lkO1xyXG4gIHVucmVnaXN0ZXJOb3RpZmljYXRpb25IYW5kbGVyKGhhbmRsZXI6IE5vdGlmaWNhdGlvbkhhbmRsZXIpOiB2b2lkO1xyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IF9fdGFibGVhdURlc2t0b3BEaXNwYXRjaGVyOiBQcm9taXNlPEludGVybmFsQXBpRGlzcGF0Y2hlcj47IH1cclxufVxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBJbnRlcm5hbEFwaURpc3BhdGNoZXJIb2xkZXIge1xyXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXREZXNrdG9wRGlzcGF0Y2hlclByb21pc2UoKTogUHJvbWlzZTxJbnRlcm5hbEFwaURpc3BhdGNoZXI+IHtcclxuICAgIHJldHVybiB3aW5kb3cuX190YWJsZWF1RGVza3RvcERpc3BhdGNoZXI7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gaGFzRGVza3RvcEFwaURpc3BhdGNoZXJQcm9taXNlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICEhSW50ZXJuYWxBcGlEaXNwYXRjaGVySG9sZGVyLmdldERlc2t0b3BEaXNwYXRjaGVyUHJvbWlzZSgpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHNldERlc2t0b3BEaXNwYXRjaGVyUHJvbWlzZShkaXNwYXRjaGVyOiBQcm9taXNlPEludGVybmFsQXBpRGlzcGF0Y2hlcj4pOiB2b2lkIHtcclxuICAgIHdpbmRvdy5fX3RhYmxlYXVEZXNrdG9wRGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWludGVybmFsLWNvbnRyYWN0L3NyYy9pbnRlcmZhY2UvSW50ZXJuYWxBcGlEaXNwYXRjaGVyLnRzXG4gKiovIiwiZXhwb3J0IGVudW0gTm90aWZpY2F0aW9uSWQge1xyXG4gIFNlbGVjdGVkTWFya3NDaGFuZ2VkID0gJ3NlbGVjdGVkLW1hcmtzLWNoYW5nZWQnLFxyXG4gIFBhcmFtZXRlckNoYW5nZWQgPSAncGFyYW1ldGVyLWNoYW5nZWQnLFxyXG4gIEZpbHRlckNoYW5nZWQgPSAnZmlsdGVyLWNoYW5nZWQnLFxyXG4gIEV4dGVuc2lvbkRpYWxvZ1VwZGF0ZSA9ICdleHRlbnNpb24tZGlhbG9nLXVwZGF0ZScsXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktaW50ZXJuYWwtY29udHJhY3Qvc3JjL2ludGVyZmFjZS9Ob3RpZmljYXRpb25zLnRzXG4gKiovIiwiZXhwb3J0IGVudW0gUGFyYW1ldGVySWQge1xyXG4gIEV4dGVuc2lvbkxvY2F0b3IgPSAnZXh0ZW5zaW9uLWxvY2F0b3InLFxyXG4gIEV4dGVuc2lvbkJvb3RzdHJhcEluZm8gPSAnZXh0ZW5zaW9uLWJvb3RzdHJhcC1pbmZvJyxcclxuICBFeHRlbnNpb25TZXR0aW5nc0luZm8gPSAnZXh0ZW5zaW9uLXNldHRpbmdzLWluZm8nLFxyXG4gIFZpc3VhbElkID0gJ3Zpc3VhbC1pZCcsXHJcbiAgU2hlZXRQYXRoID0gJ3NoZWV0LXBhdGgnLFxyXG4gIElnbm9yZUFsaWFzZXMgPSAnaWdub3JlLWFsaWFzZXMnLFxyXG4gIElnbm9yZVNlbGVjdGlvbiA9ICdpZ25vcmUtc2VsZWN0aW9uJyxcclxuICBJbmNsdWRlQWxsQ29sdW1ucyA9ICdpbmNsdWRlLWFsbC1jb2x1bW5zJyxcclxuICBNYXhSb3dzID0gJ21heC1yb3dzJyxcclxuICBVbmRlcmx5aW5nRGF0YVRhYmxlID0gJ3VuZGVybHlpbmctZGF0YS10YWJsZScsXHJcbiAgVW5kZXJseWluZ1N1bW1hcnlEYXRhVGFibGUgPSAndW5kZXJseWluZy1zdW1tYXJ5LWRhdGEtdGFibGUnLFxyXG4gIERhdGFTb3VyY2VEYXRhVGFibGUgPSAnZGF0YS1zb3VyY2UtZGF0YS10YWJsZScsXHJcbiAgU2V0dGluZ3NWYWx1ZXMgPSAnc2V0dGluZ3MtdmFsdWVzJyxcclxuICBTZWxlY3RlZERhdGEgPSAnc2VsZWN0ZWQtZGF0YScsXHJcbiAgSGlnaGxpZ2h0ZWREYXRhID0gJ2hpZ2hsaWdodGVkLWRhdGEnLFxyXG5cclxuICAgLy8gRmlsdGVyIFBhcmFtc1xyXG4gIEZpZWxkTmFtZSA9ICdmaWVsZC1uYW1lJyxcclxuICBGaWx0ZXJWYWx1ZXMgPSAnZmlsdGVyLXZhbHVlcycsXHJcbiAgRmlsdGVyVXBkYXRlVHlwZSA9ICdmaWx0ZXItdXBkYXRlLXR5cGUnLFxyXG4gIElzRXhjbHVkZU1vZGUgPSAnaXMtZXhjbHVkZScsXHJcbiAgRmlsdGVyUmFuZ2VNaW4gPSAnZmlsdGVyLXJhbmdlLW1pbicsXHJcbiAgRmlsdGVyUmFuZ2VNYXggPSAnZmlsdGVyLXJhbmdlLW1heCcsXHJcbiAgRmlsdGVyUmFuZ2VOdWxsT3B0aW9uID0gJ2ZpbHRlci1yYW5nZS1udWxsLW9wdGlvbicsXHJcbiAgV29ya3NoZWV0RmlsdGVycyA9ICd3b3Jrc2hlZXQtZmlsdGVycycsXHJcbiAgRmllbGRJZCA9ICdmaWVsZC1pZCcsXHJcbiAgRG9tYWluVHlwZSA9ICdkb21haW4tdHlwZScsXHJcbiAgQ2F0ZWdvcmljYWxEb21haW4gPSAnY2F0ZWdvcmljYWwtZG9tYWluJyxcclxuICBRdWFudGl0YXRpdmVEb21haW4gPSAncXVhbnRpdGF0aXZlLWRtYWluJyxcclxuXHJcbiAgV29ya3NoZWV0TmFtZSA9ICd3b3Jrc2hlZXQtbmFtZScsXHJcbiAgRGFzaGJvYXJkTmFtZSA9ICdkYXNoYm9hcmQnLFxyXG5cclxuICBQYXJhbWV0ZXJJbmZvID0gJ3BhcmFtZXRlci1pbmZvJyxcclxuICBQYXJhbWV0ZXJJbmZvcyA9ICdwYXJhbWV0ZXItaW5mb3MnLFxyXG4gIFBhcmFtZXRlckNhcHRpb24gPSAncGFyZW1ldGVyLWNhcHRpb24nLFxyXG4gIFBhcmFtZXRlckZpZWxkTmFtZSA9ICdwYXJhbWV0ZXItZmllbGQtbmFtZScsXHJcbiAgUGFyYW1ldGVyVmFsdWUgPSAncGFyYW1ldGVyLXZhbHVlJyxcclxuICBTZWxlY3Rpb24gPSAnc2VsZWN0aW9uJyxcclxuICBTZWxlY3Rpb25VcGRhdGVUeXBlID0gJ3NlbGVjdGlvblVwZGF0ZVR5cGUnLFxyXG4gIEhpZXJWYWxTZWxlY3Rpb25Nb2RlbHMgPSAnaGllcmFyY2hpY2FsVmFsdWVTZWxlY3Rpb25Nb2RlbHMnLFxyXG4gIFF1YW50UmFuZ2VTZWxlY3Rpb25Nb2RlbHMgPSAncXVhbnRhdGl2ZVJhbmdlU2VsZWN0aW9uTW9kZWxzJyxcclxuICBEaW1WYWxTZWxlY3Rpb25Nb2RlbHMgPSAnZGltZW5zaW9uVmFsdWVTZWxlY3Rpb25Nb2RlbHMnLFxyXG5cclxuICBEYXRhU291cmNlSWQgPSAnZGF0YS1zb3VyY2UtaWQnLFxyXG4gIERhdGFTY2hlbWEgPSAnZGF0YS1zY2hlbWEnLFxyXG4gIERhdGFTb3VyY2VOYW1lID0gJ2RhdGEtc291cmNlLW5hbWUnLFxyXG4gIENvbHVtbnNUb0luY2x1ZGUgPSAnY29sdW1ucy10by1pbmNsdWRlJyxcclxuICBKb2luRGVzY3JpcHRpb24gPSAnam9pbi1kZXNjcmlwdGlvbicsXHJcbiAgQ29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyaWVzID0gJ2Nvbm5lY3Rpb24tZGVzY3JpcHRpb24tc3VtbWFyaWVzJyxcclxuXHJcbiAgRXh0ZW5zaW9uRGlhbG9nVXJsID0gJ2V4dGVuc2lvbi1kaWFsb2ctdXJsJyxcclxuICBFeHRlbnNpb25EaWFsb2dQYXlsb2FkID0gJ2V4dGVuc2lvbi1kaWFsb2ctcGF5bG9hZCcsXHJcbiAgSXNFeHRlbnNpb25EaWFsb2cgPSAnaXMtZXh0ZW5zaW9uLWRpYWxvZycsXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktaW50ZXJuYWwtY29udHJhY3Qvc3JjL2ludGVyZmFjZS9QYXJhbWV0ZXJzLnRzXG4gKiovIiwiLy8gRGVjbGFyZSB0aGlzIGtleSB0eXBlIGFuZCBleHBvcnQgdGhlIE5vdGlmaWNhdGlvbklkIHRvIG1ha2UgdGhpcyBiZWhhdmUgbGlrZSBhIHN0cmluZyBlbnVtXHJcbmV4cG9ydCBlbnVtIFZlcmJJZCB7XHJcbiAgQXBwbHlDYXRlZ29yaWNhbEZpbHRlciA9ICdjYXRlZ29yaWNhbC1maWx0ZXInLFxyXG4gIEFwcGx5UmFuZ2VGaWx0ZXIgPSAncmFuZ2UtZmlsdGVyJyxcclxuICBDbGVhckZpbHRlciA9ICdjbGVhci1maWx0ZXInLFxyXG4gIEluaXRpYWxpemVFeHRlbnNpb24gPSAnaW5pdGlhbGl6ZS1leHRlbnNpb24nLFxyXG4gIEdldERhdGFTdW1tYXJ5RGF0YSA9ICdnZXQtc3VtbWFyeS1kYXRhJyxcclxuICBHZXRVbmRlcmx5aW5nRGF0YSA9ICdnZXQtdW5kZXJseWluZy1kYXRhJyxcclxuICBHZXREYXRhU291cmNlRGF0YSA9ICdnZXQtZGF0YXNvdXJjZS1kYXRhJyxcclxuICBTYXZlRXh0ZW5zaW9uU2V0dGluZ3MgPSAnc2F2ZS1leHRlbnNpb24tc2V0dGluZ3MnLFxyXG4gIEdldFNlbGVjdGVkTWFya3MgPSAnZ2V0LXNlbGVjdGVkLW1hcmtzJyxcclxuICBHZXRIaWdobGlnaHRlZE1hcmtzID0gJ2dldC1oaWdobGlnaHRlZC1tYXJrcycsXHJcbiAgR2V0UGFyYW1ldGVyc0ZvclNoZWV0ID0gJ2dldC1wYXJhbWV0ZXJzLWZvci1zaGVldCcsXHJcbiAgRmluZFBhcmFtZXRlciA9ICdmaW5kLXBhcmFtZXRlcicsXHJcbiAgQ2hhbmdlUGFyYW1ldGVyVmFsdWUgPSAnY2hhbmdlLXBhcmFtZXRlci12YWx1ZScsXHJcbiAgQ2xlYXJTZWxlY3RlZE1hcmtzID0gJ2NsZWFyLXNlbGVjdGVkLW1hcmtzJyxcclxuICBTZWxlY3RCeVZhbHVlID0gJ3NlbGVjdC1ieS12YWx1ZScsXHJcbiAgR2V0RGF0YVNvdXJjZXMgPSAnZ2V0LWRhdGEtc291cmNlcycsXHJcbiAgUmVmcmVzaERhdGFTb3VyY2UgPSAncmVmcmVzaC1kYXRhLXNvdXJjZScsXHJcbiAgR2V0RmlsdGVycyA9ICdnZXQtZmlsdGVycycsXHJcbiAgR2V0Q2F0ZWdvcmljYWxEb21haW4gPSAnZ2V0LWNhdGVnb3JpY2FsLWRvbWFpbicsXHJcbiAgR2V0UmFuZ2VEb21haW4gPSAnZ2V0LXJhbmdlLWRvbWFpbicsXHJcbiAgR2V0Sm9pbkRlc2NyaXB0aW9uID0gJ2dldC1qb2luLWRlc2NyaXB0aW9uJyxcclxuICBHZXRDb25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJpZXMgPSAnZ2V0LWNvbm5lY3Rpb24tZGVzY3JpcHRpb24tc3VtbWFyaWVzJyxcclxuICBEaXNwbGF5RGlhbG9nID0gJ2Rpc3BsYXktZGlhbG9nJyxcclxuICBDbG9zZURpYWxvZyA9ICdjbG9zZS1kaWFsb2cnLFxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWludGVybmFsLWNvbnRyYWN0L3NyYy9pbnRlcmZhY2UvVmVyYnMudHNcbiAqKi8iLCIvKipcclxuICogVGhpcyBpcyB5b3VyIG1haW4uIFRoaXMgaXMgd2hlcmUgeW91IHJlLWV4cG9ydCBldmVyeXRoaW5nIHlvdSB3YW50IHRvIGJlIHB1YmxpY2x5IGF2YWlsYWJsZS5cclxuICpcclxuICogVGhlIGJ1aWxkIGVuZm9yY2VzIHRoYXQgdGhlIGZpbGUgaGFzIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGdsb2JhbCB2YXJpYWJsZSB0aGF0IGlzIGV4cG9ydGVkLlxyXG4gKi9cclxuXHJcbmV4cG9ydCB7IERhc2hib2FyZCB9IGZyb20gJy4vRGFzaGJvYXJkJztcclxuZXhwb3J0IHsgVmVyc2lvbk51bWJlciB9IGZyb20gJy4vVmVyc2lvbk51bWJlcic7XHJcblxyXG5leHBvcnQgeyBEYXNoYm9hcmRJbXBsIH0gZnJvbSAnLi9JbXBsL0Rhc2hib2FyZEltcGwnO1xyXG5cclxuZXhwb3J0IHsgRXZlbnRMaXN0ZW5lck1hbmFnZXIgfSBmcm9tICcuL0V2ZW50TGlzdGVuZXJNYW5hZ2VyJztcclxuXHJcbmV4cG9ydCB7IEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncyB9IGZyb20gJy4vRW51bU1hcHBpbmdzL0ludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncyc7XHJcblxyXG5leHBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9TZXJ2aWNlcy9Ob3RpZmljYXRpb25TZXJ2aWNlJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vU2VydmljZXMvUmVnaXN0ZXJBbGxTaGFyZWRTZXJ2aWNlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vU2VydmljZXMvU2VydmljZVJlZ2lzdHJ5JztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vQ3Jvc3NGcmFtZS9Dcm9zc0ZyYW1lQm9vdHN0cmFwJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9BcGlTaGFyZWQudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgRGFzaGJvYXJkSW1wbCB9IGZyb20gJy4vSW1wbC9EYXNoYm9hcmRJbXBsJztcclxuaW1wb3J0IHsgU2hlZXQgfSBmcm9tICcuL1NoZWV0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBTaGVldCBpbXBsZW1lbnRzIENvbnRyYWN0LkRhc2hib2FyZCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2Rhc2hib2FyZEltcGw6IERhc2hib2FyZEltcGwpIHtcclxuICAgIHN1cGVyKF9kYXNoYm9hcmRJbXBsKTtcclxuICAgIF9kYXNoYm9hcmRJbXBsLmluaXRpYWxpemVXaXRoUHVibGljSW50ZXJmYWNlcyh0aGlzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgd29ya3NoZWV0cygpOiBBcnJheTxDb250cmFjdC5Xb3Jrc2hlZXQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9kYXNoYm9hcmRJbXBsLndvcmtzaGVldHM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG9iamVjdHMoKTogQXJyYXk8Q29udHJhY3QuRGFzaGJvYXJkT2JqZWN0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGFzaGJvYXJkSW1wbC5vYmplY3RzO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0Rhc2hib2FyZC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBFdmVudExpc3RlbmVyTWFuYWdlciB9IGZyb20gJy4vRXZlbnRMaXN0ZW5lck1hbmFnZXInO1xyXG5cclxuaW1wb3J0IHsgU2hlZXRJbXBsIH0gZnJvbSAnLi9JbXBsL1NoZWV0SW1wbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hlZXQgZXh0ZW5kcyBFdmVudExpc3RlbmVyTWFuYWdlciBpbXBsZW1lbnRzIENvbnRyYWN0LlNoZWV0IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfc2hlZXRJbXBsOiBTaGVldEltcGwpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9zaGVldEltcGwubmFtZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2hlZXRUeXBlKCk6IENvbnRyYWN0LlNoZWV0VHlwZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2hlZXRJbXBsLnNoZWV0VHlwZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2l6ZSgpOiBDb250cmFjdC5TaXplIHtcclxuICAgIHJldHVybiB0aGlzLl9zaGVldEltcGwuc2l6ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmaW5kUGFyYW1ldGVyQXN5bmMocGFyYW1ldGVyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxDb250cmFjdC5QYXJhbWV0ZXIgfCB1bmRlZmluZWQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9zaGVldEltcGwuZmluZFBhcmFtZXRlckFzeW5jKHBhcmFtZXRlck5hbWUsIHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFBhcmFtZXRlcnNBc3luYygpOiBQcm9taXNlPEFycmF5PENvbnRyYWN0LlBhcmFtZXRlcj4+IHtcclxuICAgIHJldHVybiB0aGlzLl9zaGVldEltcGwuZ2V0UGFyYW1ldGVyc0FzeW5jKHRoaXMpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NoZWV0LnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQgeyBTaW5nbGVFdmVudE1hbmFnZXIgfSBmcm9tICcuL1NpbmdsZUV2ZW50TWFuYWdlcic7XHJcblxyXG4vKipcclxuICogQ2xhc3MgZGVzaWduZWQgdG8gcmVnaXN0ZXIgYW5kIHVucmVnaXN0ZXIgaGFuZGxlcnMgZnJvbSBhIHVzZXIuIE9ubHkgdGhvc2UgZXZlbnRzXHJcbiAqIHdoaWNoIGFyZSBhZGRlZCB2aWEgQWRkTmV3RXZlbnRUeXBlIHdpbGwgYmUgc3VwcG9ydGVkIGJ5IHRoaXMgaW5zdGFuY2VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFdmVudExpc3RlbmVyTWFuYWdlciBpbXBsZW1lbnRzICBDb250cmFjdC5FdmVudExpc3RlbmVyTWFuYWdlciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgVU5TVVBQT1JURURfRVZFTlQ6IHN0cmluZyA9ICdVbnN1cHBvcnRlZCBldmVudCB0eXBlIDogJTEnO1xyXG4gIHByaXZhdGUgX2V2ZW50TGlzdGVuZXJNYW5hZ2VyczogeyBbdGFibGVhdUV2ZW50VHlwZTogc3RyaW5nXTogU2luZ2xlRXZlbnRNYW5hZ2VyOyB9O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9ldmVudExpc3RlbmVyTWFuYWdlcnMgPSB7fTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZTogQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBDb250cmFjdC5UYWJsZWF1RXZlbnRIYW5kbGVyRm4pOiBDb250cmFjdC5UYWJsZWF1RXZlbnRVbnJlZ2lzdGVyRm4ge1xyXG4gICAgaWYgKCF0aGlzLl9ldmVudExpc3RlbmVyTWFuYWdlcnMuaGFzT3duUHJvcGVydHkoZXZlbnRUeXBlKSkge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmVycm9yKEV2ZW50TGlzdGVuZXJNYW5hZ2VyLlVOU1VQUE9SVEVEX0VWRU5ULCBbZXZlbnRUeXBlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50TGlzdGVuZXJNYW5hZ2Vyc1tldmVudFR5cGVdLmFkZEV2ZW50TGlzdGVuZXIoaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGU6IENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUsIGhhbmRsZXI6IENvbnRyYWN0LlRhYmxlYXVFdmVudEhhbmRsZXJGbik6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0aGlzLl9ldmVudExpc3RlbmVyTWFuYWdlcnMuaGFzT3duUHJvcGVydHkoZXZlbnRUeXBlKSkge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmVycm9yKEV2ZW50TGlzdGVuZXJNYW5hZ2VyLlVOU1VQUE9SVEVEX0VWRU5ULCBbZXZlbnRUeXBlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50TGlzdGVuZXJNYW5hZ2Vyc1tldmVudFR5cGVdLnJlbW92ZUV2ZW50TGlzdGVuZXIoaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYWRkTmV3RXZlbnRUeXBlKGV2ZW50TWFuYWdlcjogU2luZ2xlRXZlbnRNYW5hZ2VyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9ldmVudExpc3RlbmVyTWFuYWdlcnNbZXZlbnRNYW5hZ2VyLmV2ZW50VHlwZV0gPSBldmVudE1hbmFnZXI7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRXZlbnRMaXN0ZW5lck1hbmFnZXIudHNcbiAqKi8iLCIvKipcclxuICogVGhpcyBpcyB5b3VyIG1haW4uIFRoaXMgaXMgd2hlcmUgeW91IHJlLWV4cG9ydCBldmVyeXRoaW5nIHlvdSB3YW50IHRvIGJlIHB1YmxpY2x5IGF2YWlsYWJsZS5cclxuICpcclxuICogVGhlIGJ1aWxkIGVuZm9yY2VzIHRoYXQgdGhlIGZpbGUgaGFzIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGdsb2JhbCB2YXJpYWJsZSB0aGF0IGlzIGV4cG9ydGVkLlxyXG4gKi9cclxuXHJcbmV4cG9ydCB7IEVudW1Db252ZXJ0ZXIgfSBmcm9tICcuL0VudW1Db252ZXJ0ZXInO1xyXG5leHBvcnQgeyBQYXJhbSB9IGZyb20gJy4vUGFyYW0nO1xyXG5leHBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnLi9UYWJsZWF1RXhjZXB0aW9uJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktdXRpbHMvc3JjL0FwaVV0aWxzLnRzXG4gKiovIiwiaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJy4vVGFibGVhdUV4Y2VwdGlvbic7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGNvbnZlcnRzIGZyb20gYSBzb3VyY2UgZW51bSB2YWx1ZSB0byBkZXN0aW5hdGlvbiBlbnVtXHJcbiAqIHZhbHVlIGdpdmVuIGEgbWFwcGluZyBmcm9tIHNvdXJjZSB0byBkZXN0aW5hdGlvbiB3aGVuIGNvbnN0cnVjdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVudW1Db252ZXJ0ZXI8VFNvdXJjZVR5cGUgZXh0ZW5kcyBzdHJpbmcsIFREZXN0aW5hdGlvblR5cGU+IHtcclxuICBwcml2YXRlIHN0YXRpYyBNQVBQSU5HX05PVF9GT1VORDogc3RyaW5nID0gJ01hcHBpbmcgbm90IGZvdW5kIGZvciAlMSc7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfbWFwcGluZ3M6IHsgW2VudW1WYWw6IHN0cmluZ106IFREZXN0aW5hdGlvblR5cGU7IH0sXHJcbiAgICBwcml2YXRlIF9kZWZhdWx0VmFsPzogVERlc3RpbmF0aW9uVHlwZSkgeyB9XHJcblxyXG4gIHB1YmxpYyBjb252ZXJ0KGVudW1WYWw6IFRTb3VyY2VUeXBlLCB0aHJvd0lmTWlzc2luZz86IGJvb2xlYW4pOiBURGVzdGluYXRpb25UeXBlIHtcclxuICAgIGlmICh0aGlzLl9tYXBwaW5ncy5oYXNPd25Qcm9wZXJ0eShlbnVtVmFsKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbWFwcGluZ3NbZW51bVZhbCBhcyBzdHJpbmddO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9kZWZhdWx0VmFsICE9PSB1bmRlZmluZWQgJiYgIXRocm93SWZNaXNzaW5nKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0VmFsO1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uZXJyb3IoRW51bUNvbnZlcnRlci5NQVBQSU5HX05PVF9GT1VORCwgW2VudW1WYWxdKTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktdXRpbHMvc3JjL0VudW1Db252ZXJ0ZXIudHNcbiAqKi8iLCJleHBvcnQgY2xhc3MgVGFibGVhdUV4Y2VwdGlvbiB7XHJcbiAgcHVibGljIHN0YXRpYyBBUElfTk9UX0lNUExFTUVOVEVEOiBzdHJpbmcgPSAnJTEgQVBJIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJztcclxuICBwdWJsaWMgc3RhdGljIFVOREVGSU5FRDogc3RyaW5nID0gJyUxIGlzIHVuZGVmaW5lZC4nO1xyXG4gIHB1YmxpYyBzdGF0aWMgSU5WQUxJRF9QQVJBTUVURVJfVkFMVUU6IHN0cmluZyA9ICdJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXI6ICUxLiAlMic7XHJcbiAgcHVibGljIHN0YXRpYyBJTlZBTElEX1BBUkFNRVRFUl9UWVBFOiBzdHJpbmcgPSAnSW52YWxpZCB0eXBlIGZvciBwYXJhbWV0ZXI6ICUxLiAlMic7XHJcbiAgcHVibGljIHN0YXRpYyBNSVNTSU5HX1BBUkFNRVRFUjogc3RyaW5nID0gJ01pc3NpbmcgUGFyYW1ldGVyOiAlMS4nO1xyXG4gIHB1YmxpYyBzdGF0aWMgVU5LTk9XTl9FUlJPUjogc3RyaW5nID0gJ1Vua25vd24gZXJyb3IuJztcclxuICBwdWJsaWMgc3RhdGljIElOVEVSTkFMX0VSUk9SOiBzdHJpbmcgPSAnSW50ZXJuYWwgZXJyb3I6ICUxLic7XHJcbiAgcHVibGljIHN0YXRpYyBJTlZBTElEOiBzdHJpbmcgPSAnSW52YWxpZDogJTEuICUyJztcclxuICBwdWJsaWMgc3RhdGljIElTX05VTEw6IHN0cmluZyA9ICclMSBpcyBudWxsLic7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXBpTm90SW1wbGVtZW50ZWQgKHBhcmFtczogQXJyYXk8c3RyaW5nPik6IEVycm9yIHtcclxuICAgIGxldCBtZXNzYWdlOiBzdHJpbmcgPSBUYWJsZWF1RXhjZXB0aW9uLmZvcm1hdChUYWJsZWF1RXhjZXB0aW9uLkFQSV9OT1RfSU1QTEVNRU5URUQsIHBhcmFtcyk7XHJcbiAgICByZXR1cm4gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBpc1VuZGVmaW5lZCAocGFyYW1zOiBBcnJheTxzdHJpbmc+KTogRXJyb3Ige1xyXG4gICAgbGV0IG1lc3NhZ2U6IHN0cmluZyA9IFRhYmxlYXVFeGNlcHRpb24uZm9ybWF0KFRhYmxlYXVFeGNlcHRpb24uVU5ERUZJTkVELCBwYXJhbXMpO1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgaXNOdWxsIChwYXJhbXM6IEFycmF5PHN0cmluZz4pOiBFcnJvciB7XHJcbiAgICBsZXQgbWVzc2FnZTogc3RyaW5nID0gVGFibGVhdUV4Y2VwdGlvbi5mb3JtYXQoVGFibGVhdUV4Y2VwdGlvbi5JU19OVUxMLCBwYXJhbXMpO1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgaW52YWxpZFBhcmFtVmFsdWUgKHBhcmFtczogQXJyYXk8c3RyaW5nPik6IEVycm9yIHtcclxuICAgIGxldCBtZXNzYWdlOiBzdHJpbmcgPSBUYWJsZWF1RXhjZXB0aW9uLmZvcm1hdChUYWJsZWF1RXhjZXB0aW9uLklOVkFMSURfUEFSQU1FVEVSX1ZBTFVFLCBwYXJhbXMpO1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgaW52YWxpZFBhcmFtVHlwZSAocGFyYW1zOiBBcnJheTxzdHJpbmc+KTogRXJyb3Ige1xyXG4gICAgbGV0IG1lc3NhZ2U6IHN0cmluZyA9IFRhYmxlYXVFeGNlcHRpb24uZm9ybWF0KFRhYmxlYXVFeGNlcHRpb24uSU5WQUxJRF9QQVJBTUVURVJfVFlQRSwgcGFyYW1zKTtcclxuICAgIHJldHVybiBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIG1pc3NpbmdQYXJhbWV0ZXIgKHBhcmFtczogQXJyYXk8c3RyaW5nPik6IEVycm9yIHtcclxuICAgIGxldCBtZXNzYWdlOiBzdHJpbmcgPSBUYWJsZWF1RXhjZXB0aW9uLmZvcm1hdChUYWJsZWF1RXhjZXB0aW9uLk1JU1NJTkdfUEFSQU1FVEVSLCBwYXJhbXMpO1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgaW52YWxpZCAocGFyYW1zOiBBcnJheTxzdHJpbmc+KTogRXJyb3Ige1xyXG4gICAgbGV0IG1lc3NhZ2U6IHN0cmluZyA9IFRhYmxlYXVFeGNlcHRpb24uZm9ybWF0KFRhYmxlYXVFeGNlcHRpb24uSU5WQUxJRCwgcGFyYW1zKTtcclxuICAgIHJldHVybiBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGludGVybmFsRXJyb3IgKHBhcmFtczogQXJyYXk8c3RyaW5nPik6IEVycm9yIHtcclxuICAgIGxldCBtZXNzYWdlOiBzdHJpbmcgPSBUYWJsZWF1RXhjZXB0aW9uLmZvcm1hdChUYWJsZWF1RXhjZXB0aW9uLklOVEVSTkFMX0VSUk9SLCBwYXJhbXMpO1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZXJyb3IgKG1lc3NhZ2U6IHN0cmluZywgcGFyYW1zPzogQXJyYXk8c3RyaW5nPik6IEVycm9yIHtcclxuICAgIGxldCByZXN1bHQ6IHN0cmluZztcclxuICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgcmVzdWx0ID0gVGFibGVhdUV4Y2VwdGlvbi5mb3JtYXQobWVzc2FnZSwgcGFyYW1zKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc3VsdCA9IG1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IEVycm9yKHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGZvcm1hdCAobWVzc2FnZTogc3RyaW5nLCBwYXJhbXM6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IG1hdGNoOiBzdHJpbmcgPSAnJScgKyAoaSArIDEpO1xyXG4gICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKG5ldyBSZWdFeHAobWF0Y2gsICdnJyksIHBhcmFtc1tpXSk7XHJcbiAgICB9XHJcbiAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyVbMC05XSsnLCAnZycpLCAnJyk7XHJcbiAgICBtZXNzYWdlID0gbWVzc2FnZS50cmltKCk7XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktdXRpbHMvc3JjL1RhYmxlYXVFeGNlcHRpb24udHNcbiAqKi8iLCJpbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnLi9UYWJsZWF1RXhjZXB0aW9uJztcclxuZXhwb3J0IGNsYXNzIFBhcmFtIHtcclxuICAvKipcclxuICAgKiBWZXJpZmllcyB0aGF0IGFuIGluY29taW5nIHBhcmFtZXRlciBpcyAndHJ1dGh5JyBhbmQgdGhyb3dzXHJcbiAgICogYW4gZXJyb3IgaWYgaXQncyBub3QuIFRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgdmFsdWVcclxuICAgKiBpcyBudWxsLCB1bmRlZmluZWQsIE5hTiwgdGhlIGVtcHR5IHN0cmluZywgMCwgb3IgZmFsc2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYXJndW1lbnRWYWx1ZSB2YWx1ZSB0byB2ZXJpZnlcclxuICAgKiBAcGFyYW0gYXJndW1lbnROYW1lIG5hbWUgb2YgYXJndW1lbnQgdG8gdmVyaWZ5XHJcbiAgICovXHJcbiAgLyp0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cclxuICBwdWJsaWMgc3RhdGljIHZlcmlmeVZhbHVlKGFyZ3VtZW50VmFsdWU6IGFueSwgYXJndW1lbnROYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICghYXJndW1lbnRWYWx1ZSkge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmludmFsaWRQYXJhbVZhbHVlKFthcmd1bWVudE5hbWVdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWVzIHRoYXQgYSBzdHJpbmcgaXMgdmFsaWQuICBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHN0cmluZyBpc1xyXG4gICAqIG51bGwsIHVuZGVmaW5lZCwgb3IgTmFOLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGFyZ3VtZW50VmFsdWUgdmFsdWUgdG8gdmVyaWZ5XHJcbiAgICogQHBhcmFtIGFyZ3VtZW50TmFtZSBuYW1lIG9mIGFyZ3VtZW50IHRvIHZlcmlmeVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgdmVyaWZ5U3RyaW5nKGFyZ3VtZW50VmFsdWU6IHN0cmluZywgYXJndW1lbnROYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmIChhcmd1bWVudFZhbHVlID09PSBudWxsIHx8IGFyZ3VtZW50VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmludmFsaWRQYXJhbVZhbHVlKFthcmd1bWVudE5hbWVdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWVzIHRoZSB2YWx1ZSBpcyBwYXJ0IG9mIHRoZSBFbnVtXHJcbiAgICpcclxuICAgKiBTdHJpbmcgZW51bXMgYXJlIHtzdHJpbmcgOiBzdHJpbmd9IGRpY3Rpb25hcmllcyB3aGljaCBhcmUgbm90IHJldmVyc2UgbWFwcGFibGVcclxuICAgKiBUaGlzIGlzIGFuIHVnbHkgd29ya2Fyb3VuZFxyXG4gICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byB2ZXJpZnlcclxuICAgKiBAcGFyYW0gZW51bVR5cGUgZW51bSB0byB2ZXJpZnkgYWdhaW5zdFxyXG4gICAqL1xyXG4gIC8qIHRzbGludDpkaXNhYmxlOm5vLWFueSAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaXNWYWxpZEVudW1WYWx1ZTxFbnVtVHlwZT4odmFsdWU6IEVudW1UeXBlLCBlbnVtVHlwZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBsZXQgaXNWYWxpZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgT2JqZWN0LmtleXMoZW51bVR5cGUpLmZvckVhY2goKGVudW1LZXkpID0+IHtcclxuICAgICAgaWYgKGVudW1UeXBlW2VudW1LZXldID09PSB2YWx1ZS50b1N0cmluZygpKSB7XHJcbiAgICAgICAgaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgfVxyXG4gIC8qIHRzbGludDplbmFibGU6bm8tYW55ICovXHJcblxyXG4gIC8qKlxyXG4gICAqIHNlcmlhbGl6ZXMgdGhlIGRhdGUgaW50byB0aGUgZm9ybWF0IHRoYXQgdGhlIHNlcnZlciBleHBlY3RzLlxyXG4gICAqIEBwYXJhbSBkYXRlIHRoZSBkYXRlIHRvIHNlcmlhbGl6ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgc2VyaWFsaXplRGF0ZUZvclBsYXRmb3JtKGRhdGU6IERhdGUpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeWVhcjogbnVtYmVyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xyXG4gICAgY29uc3QgbW9udGg6IG51bWJlciA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDE7XHJcbiAgICBjb25zdCBkYXk6IG51bWJlciA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xyXG4gICAgY29uc3QgaGg6IG51bWJlciA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcclxuICAgIGNvbnN0IG1tOiBudW1iZXIgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcclxuICAgIGNvbnN0IHNlYzogbnVtYmVyID0gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XHJcbiAgICByZXR1cm4geWVhciArICctJyArIG1vbnRoICsgJy0nICsgZGF5ICsgJyAnICsgaGggKyAnOicgKyBtbSArICc6JyArIHNlYztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgc2VyaWFsaXplQm9vbGVhbkZvclBsYXRmb3JtKGJvb2w6IGJvb2xlYW4pOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGJvb2wgPyAndHJ1ZScgOiAnZmFsc2UnO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBzZXJpYWxpemVOdW1iZXJGb3JQbGF0Zm9ybShudW06IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gbnVtLnRvU3RyaW5nKDEwKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWVzIHRoZSBwYXJhbXMgbWluIGFuZCBtYXggZm9yIGFwcGx5aW5nIHJhbmdlIGZpbHRlclxyXG4gICAqIEBwYXJhbSBtaW4gcmFuZ2UgbWluXHJcbiAgICogQHBhcmFtIG1heCByYW5nZSBtYXhcclxuICAgKi9cclxuICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1hbnkgKi9cclxuICBwdWJsaWMgc3RhdGljIHZlcmlmeVJhbmdlUGFyYW1UeXBlKG1pbjogYW55LCBtYXg6IGFueSk6IHZvaWQge1xyXG4gIC8qIHRzbGludDplbmFibGU6bm8tYW55ICovXHJcbiAgICBpZiAoIW1pbiAmJiAhbWF4KSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uaW52YWxpZFBhcmFtVmFsdWUoWydSYW5nZSBwYXJhbWV0ZXJzJywgJ0F0IGxlYXN0IG9uZSBvZiBtaW4gb3IgbWF4IGlzIHJlcXVpcmVkLiddKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIVBhcmFtLmlzVHlwZU51bWJlcihtaW4pICYmICFQYXJhbS5pc1R5cGVEYXRlKG1pbikpIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkUGFyYW1UeXBlKFsnUmFuZ2UgcGFyYW1ldGVycycsICdPbmx5IERhdGUgYW5kIG51bWJlciBhcmUgYWxsb3dlZCBmb3IgcGFyYW1ldGVyIG1pbi4nXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFQYXJhbS5pc1R5cGVOdW1iZXIobWF4KSAmJiAhUGFyYW0uaXNUeXBlRGF0ZShtYXgpKSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uaW52YWxpZFBhcmFtVHlwZShbJ1JhbmdlIHBhcmFtZXRlcnMnLCAnT25seSBEYXRlIGFuZCBudW1iZXIgYXJlIGFsbG93ZWQgZm9yIHBhcmFtZXRlciBtYXguJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YobWluKSAhPT0gdHlwZW9mKG1heCkpIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkUGFyYW1UeXBlKFsnUmFuZ2UgcGFyYW1ldGVycycsICdQYXJhbWV0ZXJzIG1pbiBhbmQgbWF4IHNob3VsZCBiZSBvZiB0aGUgc2FtZSB0eXBlLiddKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWVzIHRoZSBpbnB1dCBpcyBhIG51bWJlclxyXG4gICAqL1xyXG4gIC8qIHRzbGludDpkaXNhYmxlOm5vLWFueSAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaXNUeXBlTnVtYmVyKGlucHV0OiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlb2YoaW5wdXQpID09PSAnbnVtYmVyJyB8fCBpbnB1dCBpbnN0YW5jZW9mIE51bWJlcjtcclxuICB9XHJcbiAgLyogdHNsaW50OmVuYWJsZTpuby1hbnkgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogVmVyaWZpZXMgdGhlIGlucHV0IGlzIGEgRGF0ZVxyXG4gICAqL1xyXG4gIC8qIHRzbGludDpkaXNhYmxlOm5vLWFueSAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaXNUeXBlRGF0ZShpbnB1dDogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlO1xyXG4gIH1cclxuICAvKiB0c2xpbnQ6ZW5hYmxlOm5vLWFueSAqL1xyXG5cclxuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXHJcbiAgcHVibGljIHN0YXRpYyBpc1R5cGVTdHJpbmcoaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHR5cGVvZihpbnB1dCkgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xyXG4gIH1cclxuXHJcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaXNUeXBlQm9vbChpbnB1dDogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHlwZW9mKGlucHV0KSA9PT0gJ2Jvb2xlYW4nIHx8IGlucHV0IGluc3RhbmNlb2YgQm9vbGVhbjtcclxuICB9XHJcblxyXG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cclxuICBwdWJsaWMgc3RhdGljIHNlcmlhbGl6ZVBhcmFtdGVyVmFsdWUodmFsdWU6IGFueSk6IHN0cmluZyB7XHJcbiAgICBpZiAoUGFyYW0uaXNUeXBlTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICByZXR1cm4gUGFyYW0uc2VyaWFsaXplTnVtYmVyRm9yUGxhdGZvcm0odmFsdWUgYXMgbnVtYmVyKTtcclxuICAgIH0gZWxzZSBpZiAoUGFyYW0uaXNUeXBlRGF0ZSh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIFBhcmFtLnNlcmlhbGl6ZURhdGVGb3JQbGF0Zm9ybSh2YWx1ZSBhcyBEYXRlKTtcclxuICAgIH0gZWxzZSBpZiAoUGFyYW0uaXNUeXBlQm9vbCh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIFBhcmFtLnNlcmlhbGl6ZUJvb2xlYW5Gb3JQbGF0Zm9ybSh2YWx1ZSBhcyBib29sZWFuKTtcclxuICAgIH0gZWxzZSBpZiAoUGFyYW0uaXNUeXBlU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmludmFsaWRQYXJhbVZhbHVlKFsndmFsdWUnXSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXV0aWxzL3NyYy9QYXJhbS50c1xuICoqLyIsImltcG9ydCB7IFZlcnNpb25OdW1iZXIgYXMgVmVyc2lvbk51bWJlckNvbnRyYWN0IH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBleHRlbnNpb25zIGxpYnJhcnlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWZXJzaW9uTnVtYmVyIGltcGxlbWVudHMgVmVyc2lvbk51bWJlckNvbnRyYWN0IHtcclxuXHJcbiAgLy8gVXNpbmcgc29tZSB3ZWJwYWNrIHRyaWNrcywgd2UgY2FuIGluamVjdCB0aGlzIHZlcnNpb24gaW50byBvdXIgY29kZSAoa2luZGEgbGlrZSBjKysgcHJlcHJvY2Vzc29yIHN0dWZmKVxyXG4gIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogVmVyc2lvbk51bWJlcjtcclxuICBwcml2YXRlIHN0YXRpYyBJTlZBTElEX1ZFUlNJT05fTlVNQkVSOiBzdHJpbmcgPSAnSW52YWxpZCB2ZXJzaW9uIG51bWJlcjogJztcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSB2ZXJzaW9uIG51bWJlci5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpOiBWZXJzaW9uTnVtYmVyIHtcclxuICAgIHJldHVybiBWZXJzaW9uTnVtYmVyLl9pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgU2V0VmVyc2lvbk51bWJlcihudW1TdHJpbmc6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgVmVyc2lvbk51bWJlci5faW5zdGFuY2UgPSBuZXcgVmVyc2lvbk51bWJlcihudW1TdHJpbmcpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IG1ham9yOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1pbm9yOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGZpeDogbnVtYmVyO1xyXG5cclxuICAvLyBwcml2YXRlIGNvbnN0cnVjdG9yIHNvIGV2ZXJ5b25lIHVzZXMgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZVxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IodmVyc2lvblN0cmluZzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBwYXJ0cyA9IHZlcnNpb25TdHJpbmcuc3BsaXQoJy4nKS5tYXAocCA9PiBwYXJzZUludChwLCAxMCkpO1xyXG4gICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmVycm9yKFZlcnNpb25OdW1iZXIuSU5WQUxJRF9WRVJTSU9OX05VTUJFUiwgW3ZlcnNpb25TdHJpbmddKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1ham9yID0gcGFydHNbMF07XHJcbiAgICB0aGlzLm1pbm9yID0gcGFydHNbMV07XHJcbiAgICB0aGlzLmZpeCA9IHBhcnRzWzJdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmb3JtYXR0ZWRWYWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMubWFqb3J9LiR7dGhpcy5taW5vcn0uJHt0aGlzLmZpeH1gO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1ZlcnNpb25OdW1iZXIudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBEYXNoYm9hcmRPYmplY3RUeXBlLCBFeHRlbnNpb25EYXNoYm9hcmRJbmZvLCBTaGVldFBhdGgsIFZpc3VhbElkIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IERhc2hib2FyZE9iamVjdCB9IGZyb20gJy4uL0Rhc2hib2FyZE9iamVjdCc7XHJcbmltcG9ydCB7IEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncyB9IGZyb20gJy4uL0VudW1NYXBwaW5ncy9JbnRlcm5hbFRvRXh0ZXJuYWxFbnVtTWFwcGluZ3MnO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL1BvaW50JztcclxuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4uL1NpemUnO1xyXG5pbXBvcnQgeyBXb3Jrc2hlZXQgfSBmcm9tICcuLi9Xb3Jrc2hlZXQnO1xyXG5cclxuaW1wb3J0IHsgU2hlZXRJbXBsIH0gZnJvbSAnLi9TaGVldEltcGwnO1xyXG5pbXBvcnQgeyBTaGVldEluZm9JbXBsIH0gZnJvbSAnLi9TaGVldEluZm9JbXBsJztcclxuaW1wb3J0IHsgV29ya3NoZWV0SW1wbCB9IGZyb20gJy4vV29ya3NoZWV0SW1wbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGFzaGJvYXJkSW1wbCBleHRlbmRzIFNoZWV0SW1wbCB7XHJcbiAgcHJpdmF0ZSBfd29ya3NoZWV0czogQXJyYXk8Q29udHJhY3QuV29ya3NoZWV0PjtcclxuICBwcml2YXRlIF9vYmplY3RzOiBBcnJheTxDb250cmFjdC5EYXNoYm9hcmRPYmplY3Q+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfaW5mbzogRXh0ZW5zaW9uRGFzaGJvYXJkSW5mbywgcHJpdmF0ZSBfc2hlZXRQYXRoOiBTaGVldFBhdGgpIHtcclxuICAgIHN1cGVyKG5ldyBTaGVldEluZm9JbXBsKF9pbmZvLm5hbWUsIENvbnRyYWN0LlNoZWV0VHlwZS5EYXNoYm9hcmQsIG5ldyBTaXplKF9pbmZvLnNpemUuaCwgX2luZm8uc2l6ZS53KSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB3b3Jrc2hlZXRzKCk6IEFycmF5PENvbnRyYWN0LldvcmtzaGVldD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldHM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG9iamVjdHMoKTogQXJyYXk8Q29udHJhY3QuRGFzaGJvYXJkT2JqZWN0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5fb2JqZWN0cztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplV2l0aFB1YmxpY0ludGVyZmFjZXMoZGFzaGJvYXJkOiBDb250cmFjdC5EYXNoYm9hcmQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3dvcmtzaGVldHMgPSBuZXcgQXJyYXk8V29ya3NoZWV0PigpO1xyXG4gICAgdGhpcy5fb2JqZWN0cyA9IG5ldyBBcnJheTxDb250cmFjdC5EYXNoYm9hcmRPYmplY3Q+KCk7XHJcblxyXG4gICAgLy8gUHJvY2VzcyBhbGwgdGhlIHpvbmVzIHdoaWNoIGFyZSBjb250YWluZWQgaW4gdGhpcyBkYXNoYm9hcmRcclxuICAgIGZvciAoY29uc3Qgem9uZSBvZiB0aGlzLl9pbmZvLnpvbmVzKSB7XHJcbiAgICAgIGxldCB3b3Jrc2hlZXQ6IFdvcmtzaGVldCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgIGNvbnN0IHpvbmVTaXplID0gbmV3IFNpemUoem9uZS5oZWlnaHQsIHpvbmUud2lkdGgpO1xyXG5cclxuICAgICAgaWYgKHpvbmUuem9uZVR5cGUgPT09IERhc2hib2FyZE9iamVjdFR5cGUuV29ya3NoZWV0KSB7XHJcbiAgICAgICAgY29uc3Qgc2hlZXRJbmZvID0gbmV3IFNoZWV0SW5mb0ltcGwoem9uZS5uYW1lLCBDb250cmFjdC5TaGVldFR5cGUuV29ya3NoZWV0LCB6b25lU2l6ZSk7XHJcbiAgICAgICAgY29uc3Qgdml6SWQ6IFZpc3VhbElkID0ge1xyXG4gICAgICAgICAgd29ya3NoZWV0OiB6b25lLm5hbWUsXHJcbiAgICAgICAgICBkYXNoYm9hcmQ6IHRoaXMuX2luZm8ubmFtZSxcclxuICAgICAgICAgIHN0b3J5Ym9hcmQ6IHRoaXMuX3NoZWV0UGF0aC5zdG9yeWJvYXJkLFxyXG4gICAgICAgICAgZmxpcGJvYXJkWm9uZUlEOiB0aGlzLl9zaGVldFBhdGguZmxpcGJvYXJkWm9uZUlELFxyXG4gICAgICAgICAgc3RvcnlQb2ludElEOiB0aGlzLl9zaGVldFBhdGguc3RvcnlQb2ludElEXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgd29ya3NoZWV0SW1wbCA9IG5ldyBXb3Jrc2hlZXRJbXBsKHNoZWV0SW5mbywgdml6SWQsIGRhc2hib2FyZCk7XHJcbiAgICAgICAgd29ya3NoZWV0ID0gbmV3IFdvcmtzaGVldCh3b3Jrc2hlZXRJbXBsKTtcclxuICAgICAgICB0aGlzLl93b3Jrc2hlZXRzLnB1c2god29ya3NoZWV0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgem9uZVBvaW50ID0gbmV3IFBvaW50KHpvbmUueCwgem9uZS55KTtcclxuXHJcbiAgICAgIGNvbnN0IGRhc2hib2FyZE9iamVjdCA9IG5ldyBEYXNoYm9hcmRPYmplY3QoXHJcbiAgICAgICAgZGFzaGJvYXJkLFxyXG4gICAgICAgIEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncy5kYXNoYm9hcmRPYmplY3RUeXBlLmNvbnZlcnQoem9uZS56b25lVHlwZSksXHJcbiAgICAgICAgem9uZVBvaW50LFxyXG4gICAgICAgIHpvbmVTaXplLFxyXG4gICAgICAgIHdvcmtzaGVldFxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5fb2JqZWN0cy5wdXNoKGRhc2hib2FyZE9iamVjdCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9EYXNoYm9hcmRJbXBsLnRzXG4gKiovIiwiLyoqXHJcbiAqIFRoaXMgaXMgeW91ciBtYWluLiBUaGlzIGlzIHdoZXJlIHlvdSByZS1leHBvcnQgZXZlcnl0aGluZyB5b3Ugd2FudCB0byBiZSBwdWJsaWNseSBhdmFpbGFibGUuXHJcbiAqXHJcbiAqIFRoZSBidWlsZCBlbmZvcmNlcyB0aGF0IHRoZSBmaWxlIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHRoZSBnbG9iYWwgdmFyaWFibGUgdGhhdCBpcyBleHBvcnRlZC5cclxuICovXHJcblxyXG5leHBvcnQgKiBmcm9tICcuL0FuYWx5dGljc0ludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL0RhdGFTb3VyY2VJbnRlcmZhY2VzJztcclxuZXhwb3J0ICogZnJvbSAnLi9EYXRhVGFibGVJbnRlcmZhY2VzJztcclxuZXhwb3J0ICogZnJvbSAnLi9FbmNvZGluZ0ludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL0VudW1zJztcclxuZXhwb3J0ICogZnJvbSAnLi9FdmVudEludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL0ZpbHRlckludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1NlbGVjdGlvbkludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1BhcmFtZXRlckludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1NlbGVjdGlvbkludGVyZmFjZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1NoZWV0SW50ZXJmYWNlcyc7XHJcblxyXG5leHBvcnQgeyBFeHRlbnNpb25zIH0gZnJvbSAnLi9OYW1lc3BhY2VzL0V4dGVuc2lvbnMnO1xyXG5leHBvcnQgeyBEYXNoYm9hcmRDb250ZW50IH0gZnJvbSAnLi9OYW1lc3BhY2VzL0Rhc2hib2FyZENvbnRlbnQnO1xyXG5leHBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4vTmFtZXNwYWNlcy9FbnZpcm9ubWVudCc7XHJcbmV4cG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi9OYW1lc3BhY2VzL1NldHRpbmdzJztcclxuZXhwb3J0ICogZnJvbSAnLi9OYW1lc3BhY2VzL1VJJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktZXh0ZXJuYWwtY29udHJhY3Qvc3JjL0FwaUV4dGVybmFsQ29udHJhY3QudHNcbiAqKi8iLCIvLyBBbGwgZW51bSB2YWx1ZXMgbWFkZSBhdmFpbGFibGUgdG8gRXh0ZW5zaW9ucyBkZXZlbG9wZXJzLlxyXG4vLyBFbnVtcyBzaG91bGQgYmUga2VwdCBpbiBhbHBoYWJldGljYWwgb3JkZXIuXHJcblxyXG4vKipcclxuICogVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIEV4dGVuc2lvbnMgaXMgY3VycmVudGx5IHJ1bm5pbmcuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBFeHRlbnNpb25Db250ZXh0IHtcclxuICBEZXNrdG9wID0gJ2Rlc2t0b3AnLFxyXG4gIFNlcnZlciA9ICdzZXJ2ZXInXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbW9kZSBpbiB3aGljaCB0aGUgRXh0ZW5zaW9ucyBpcyBjdXJyZW50bHkgcnVubmluZy5cclxuICovXHJcbmV4cG9ydCBlbnVtIEV4dGVuc2lvbk1vZGUge1xyXG4gIEF1dGhvcmluZyA9ICdhdXRob3JpbmcnLFxyXG4gIFZpZXdpbmcgPSAndmlld2luZydcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQW5hbHl0aWNzT2JqZWN0VHlwZSB7XHJcbiAgQ2x1c3RlciA9ICdjbHVzdGVyJyxcclxuICBGb3JlY2FzdCA9ICdmb3JlY2FzdCcsXHJcbiAgVHJlbmRMaW5lID0gJ3RyZW5kLWxpbmUnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENvbHVtblR5cGUge1xyXG4gIERpc2NyZXRlID0gJ2Rpc2NyZXRlJyxcclxuICBDb250aW51b3VzID0gJ2NvbnRpbnVvdXMnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXaGF0IHRoZSBvYmplY3QgcmVwcmVzZW50cyBpbiBhIGRhc2hib2FyZC5cclxuICovXHJcbmV4cG9ydCBlbnVtIERhc2hib2FyZE9iamVjdFR5cGUge1xyXG4gIEJsYW5rID0gJ2JsYW5rJyxcclxuICBXb3Jrc2hlZXQgPSAnd29ya3NoZWV0JyxcclxuICBRdWlja0ZpbHRlciA9ICdxdWljay1maWx0ZXInLFxyXG4gIFBhcmFtZXRlckNvbnRyb2wgPSAncGFyYW1ldGVyLWNvbnRyb2wnLFxyXG4gIFBhZ2VGaWx0ZXIgPSAncGFnZS1maWx0ZXInLFxyXG4gIExlZ2VuZCA9ICdsZWdlbmQnLFxyXG4gIFRpdGxlID0gJ3RpdGxlJyxcclxuICBUZXh0ID0gJ3RleHQnLFxyXG4gIEltYWdlID0gJ2ltYWdlJyxcclxuICBXZWJQYWdlID0gJ3dlYi1wYWdlJyxcclxuICBFeHRlbnNpb24gPSAnZXh0ZW5zaW9uJ1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGRpZmZlcmVudCB0eXBlcyBvZiBkYXRhIGEgdmFsdWUgY2FuIGhhdmVcclxuICovXHJcbmV4cG9ydCBlbnVtIERhdGFUeXBlIHtcclxuICBTdHJpbmcgPSAnc3RyaW5nJyxcclxuICBJbnQgPSAnaW50JyxcclxuICBGbG9hdCA9ICdmbG9hdCcsXHJcbiAgQm9vbCA9ICdib29sJyxcclxuICBEYXRlID0gJ2RhdGUnLFxyXG4gIERhdGVUaW1lID0gJ2RhdGUtdGltZScsXHJcbiAgU3BhdGlhbCA9ICdzcGF0aWFsJ1xyXG59XHJcblxyXG4vKipcclxuICogVmFsaWQgZGF0ZSByYW5nZXMgZm9yIGEgcmVsYXRpdmUgZGF0ZSBmaWx0ZXIuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBEYXRlUmFuZ2VUeXBlIHtcclxuICBMYXN0ID0gJ2xhc3QnLFxyXG4gIExhc3ROID0gJ2xhc3QtbicsXHJcbiAgTmV4dCA9ICduZXh0JyxcclxuICBOZXh0TiA9ICduZXh0LW4nLFxyXG4gIEN1cnJlbnQgPSAnY3VycmVudCcsXHJcbiAgVG9EYXRlID0gJ3RvLWRhdGUnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEVuY29kaW5nVHlwZSB7XHJcbiAgQ29sdW1uID0gJ2NvbHVtbicsXHJcbiAgUm93ID0gJ3JvdycsXHJcbiAgUGFnZSA9ICdwYWdlJyxcclxuICBGaWx0ZXIgPSAnZmlsdGVyJyxcclxuICBNYXJrc1R5cGUgPSAnbWFya3MtdHlwZScsXHJcbiAgTWVhc3VyZVZhbHVlcyA9ICdtZWFzdXJlLXZhbHVlcycsXHJcbiAgQ29sb3IgPSAnY29sb3InLFxyXG4gIFNpemUgPSAnc2l6ZScsXHJcbiAgTGFiZWwgPSAnbGFiZWwnLFxyXG4gIERldGFpbCA9ICdkZXRhaWwnLFxyXG4gIFRvb2x0aXAgPSAndG9vbHRpcCcsXHJcbiAgU2hhcGUgPSAnc2hhcGUnLFxyXG4gIFBhdGggPSAncGF0aCcsXHJcbiAgQW5nbGUgPSAnYW5nbGUnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbGwgZXJyb3IgY29kZXMgdXNlZCBieSB0aGUgRXh0ZW5zaW9ucyBBUEkuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBFcnJvckNvZGVzIHtcclxuICAvKipcclxuICAgKiBPbmx5IG9uZSBkaWFsb2cgY2FuIGJlIG9wZW5lZCBhdCB0aW1lIHdpdGggdGhlIFVJIG5hbWVzcGFjZSBmdW5jdGlvbmFsaXR5LlxyXG4gICAqL1xyXG4gIERpYWxvZ0FscmVhZHlPcGVuID0gJ2RpYWxvZy1hbHJlYWR5LW9wZW4nLFxyXG4gIC8qKlxyXG4gICAqIFRoZSBvcGVuIGRpYWxvZyB3YXMgY2xvc2VkIGJ5IHRoZSB1c2VyLlxyXG4gICAqL1xyXG4gIERpYWxvZ0Nsb3NlZEJ5VXNlciA9ICdkaWFsb2ctY2xvc2VkLWJ5LXVzZXInLFxyXG4gIC8qKlxyXG4gICAqIEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gcGVyZm9ybSBhIGZpbHRlciBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgRmlsdGVyQ2Fubm90QmVQZXJmb3JtZWQgPSAnZmlsdGVyLWNhbm5vdC1iZS1wZXJmb3JtZWQnLFxyXG4gIC8qKlxyXG4gICAqIEFuIGVycm9yIG9jY3VycmVkIHdpdGhpbiB0aGUgVGFibGVhdSBFeHRlbnNpb25zIEFQSS4gQ29udGFjdCBUYWJsZWF1IFN1cHBvcnQuXHJcbiAgICovXHJcbiAgSW50ZXJuYWxFcnJvciA9ICdpbnRlcm5hbC1lcnJvcicsXHJcbiAgLyoqXHJcbiAgICogQW4gaW52YWxpZCBhZ2dyZWdhdGlvbiB3YXMgc3BlY2lmaWVkIGZvciB0aGUgZmlsdGVyLCBzdWNoIGFzIHNldHRpbmcgYSByYW5nZSBmaWx0ZXIgdG8gXCJTVU0oU2FsZXMpXCIgaW5zdGVhZCBvZiBcIlNhbGVzXCIuXHJcbiAgICovXHJcbiAgSW52YWxpZEFnZ3JlZ2F0aW9uRmllbGROYW1lID0gJ2ludmFsaWQtYWdncmVnYXRpb24tZmllbGQtbmFtZScsXHJcbiAgLyoqXHJcbiAgICogQSBkaWFsb2cgbXVzdCBmaXJzdCBsYXVuY2ggdG8sIGFuZCBzZW5kIG1lc3NhZ2VzIGZyb20sIHRoZSBzYW1lIGRvbWFpbiBhcyB0aGUgcGFyZW50IEV4dGVuc2lvbnMuXHJcbiAgICovXHJcbiAgSW52YWxpZERvbWFpbkRpYWxvZyA9ICdpbnZhbGlkLWRpYWxvZy1kb21haW4nLFxyXG4gIC8qKlxyXG4gICAqIEFuIGludmFsaWQgZGF0ZSB3YXMgc3BlY2lmaWVkIGluIGEgbWV0aG9kIHRoYXQgcmVxdWlyZWQgYSBkYXRlIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBJbnZhbGlkRGF0ZVBhcmFtZXRlciA9ICdpbnZhbGlkLWRhdGUtcGFyYW1ldGVyJyxcclxuICAvKipcclxuICAgKiBBIGZpbHRlciBvcGVyYXRpb24gd2FzIGF0dGVtcHRlZCBvbiBhIGZpZWxkIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGRhdGEgc291cmNlLlxyXG4gICAqL1xyXG4gIEludmFsaWRGaWx0ZXJGaWVsZE5hbWUgPSAnaW52YWxpZC1maWx0ZXItZmllbGQtbmFtZScsXHJcbiAgLyoqXHJcbiAgICogQSBmaWx0ZXIgb3BlcmF0aW9uIHdhcyBhdHRlbXB0ZWQgdXNpbmcgYSB2YWx1ZSB0aGF0IGlzIHRoZSB3cm9uZyBkYXRhIHR5cGUgb3IgZm9ybWF0LlxyXG4gICAqL1xyXG4gIEludmFsaWRGaWx0ZXJGaWVsZFZhbHVlID0gJ2ludmFsaWQtZmlsdGVyLWZpZWxkLXZhbHVlJyxcclxuICAvKipcclxuICAgKiBBIHBhcmFtZXRlciBpcyBub3QgdGhlIGNvcnJlY3QgZGF0YSB0eXBlIG9yIGZvcm1hdC4gVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciBpcyBzcGVjaWZpZWQgaW4gdGhlIEVycm9yLm1lc3NhZ2UgZmllbGQuXHJcbiAgICovXHJcbiAgSW52YWxpZFBhcmFtZXRlciA9ICdpbnZhbGlkLXBhcmFtZXRlcicsXHJcbiAgLyoqXHJcbiAgICogQW4gaW52YWxpZCBkYXRlIHZhbHVlIHdhcyBzcGVjaWZpZWQgaW4gYSBTaGVldC5zZWxlY3RNYXJrc0FzeW5jKCkgY2FsbCBmb3IgYSBkYXRlIGZpZWxkLlxyXG4gICAqL1xyXG4gIEludmFsaWRTZWxlY3Rpb25EYXRlID0gJ2ludmFsaWQtc2VsZWN0aW9uLWRhdGUnLFxyXG4gIC8qKlxyXG4gICAqIEEgZmllbGQgd2FzIHNwZWNpZmllZCBpbiBhIFNoZWV0LnNlbGVjdE1hcmtzQXN5bmMoKSBjYWxsIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGRhdGEgc291cmNlLlxyXG4gICAqL1xyXG4gIEludmFsaWRTZWxlY3Rpb25GaWVsZE5hbWUgPSAnaW52YWxpZC1zZWxlY3Rpb24tZmllbGQtbmFtZScsXHJcbiAgLyoqXHJcbiAgICogQW4gaW52YWxpZCB2YWx1ZSB3YXMgc3BlY2lmaWVkIGluIGEgU2hlZXQuc2VsZWN0TWFya3NBc3luYygpIGNhbGwuXHJcbiAgICovXHJcbiAgSW52YWxpZFNlbGVjdGlvblZhbHVlID0gJ2ludmFsaWQtc2VsZWN0aW9uLXZhbHVlJyxcclxuICAvKipcclxuICAgKiBBIHJlcXVpcmVkIHBhcmFtZXRlciB3YXMgbm90IHNwZWNpZmllZCwgbnVsbCwgb3IgYW4gZW1wdHkgc3RyaW5nL2FycmF5LlxyXG4gICAqL1xyXG4gIE51bGxPckVtcHR5UGFyYW1ldGVyID0gJ251bGwtb3ItZW1wdHktcGFyYW1ldGVyJyxcclxuICAvKipcclxuICAgKiBBbiB1bmtub3duIGV2ZW50IG5hbWUgd2FzIHNwZWNpZmllZCBpbiB0aGUgY2FsbCB0byBWaXouYWRkRXZlbnRMaXN0ZW5lcm9yIFZpei5yZW1vdmVFdmVudExpc3RlbmVyLlxyXG4gICAqL1xyXG4gIFVuc3VwcG9ydGVkRXZlbnROYW1lID0gJ3Vuc3VwcG9ydGVkLWV2ZW50LW5hbWUnLFxyXG4gIC8qKlxyXG4gICAqIEEgbWV0aG9kIHdhcyB1c2VkIGZvciBhIHR5cGUgb2YgZGF0YXNvdXJjZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCB0aGF0IG1ldGhvZCAoc2VlIGdldEFjdGl2ZVRhYmxlc0FzeW5jIGZvciBhbiBleGFtcGxlKVxyXG4gICAqL1xyXG4gIFVuc3VwcG9ydGVkTWV0aG9kRm9yRGF0YVNvdXJjZVR5cGUgPSAndW5zdXBwb3J0ZWQtbWV0aG9kLWZvci1kYXRhLXNvdXJjZS10eXBlJ1xyXG59XHJcblxyXG4vKipcclxuICogIFR5cGUgb2YgYWdncmVnYXRpb24gb24gYSBmaWVsZC5cclxuICovXHJcbmV4cG9ydCBlbnVtIEZpZWxkQWdncmVnYXRpb25UeXBlIHtcclxuICBTdW0gPSAnc3VtJyxcclxuICBBdmcgPSAnYXZnJyxcclxuICBNaW4gPSAnbWluJyxcclxuICBNYXggPSAnbWF4JyxcclxuICBTdGRldiA9ICdzdGRldicsXHJcbiAgU3RkZXZwID0gJ3N0ZGV2cCcsXHJcbiAgVmFyID0gJ3ZhcicsXHJcbiAgVmFycCA9ICd2YXJwJyxcclxuICBDb3VudCA9ICdjb3VudCcsXHJcbiAgQ291bnRkID0gJ2NvdW50ZCcsXHJcbiAgTWVkaWFuID0gJ21lZGlhbicsXHJcbiAgQXR0ciA9ICdhdHRyJyxcclxuICBOb25lID0gJ25vbmUnLFxyXG4gIFllYXIgPSAneWVhcicsXHJcbiAgUXRyID0gJ3F0cicsXHJcbiAgTW9udGggPSAnbW9udGgnLFxyXG4gIERheSA9ICdkYXknLFxyXG4gIEhvdXIgPSAnaG91cicsXHJcbiAgTWludXRlID0gJ21pbnV0ZScsXHJcbiAgU2Vjb25kID0gJ3NlY29uZCcsXHJcbiAgV2VlayA9ICd3ZWVrJyxcclxuICBXZWVrZGF5ID0gJ3dlZWtkYXknLFxyXG4gIE1vbnRoWWVhciA9ICdtb250aC15ZWFyJyxcclxuICBNZHkgPSAnbWR5JyxcclxuICBFbmQgPSAnZW5kJyxcclxuICBUcnVuY1llYXIgPSAndHJ1bmMteWVhcicsXHJcbiAgVHJ1bmNRdHIgPSAndHJ1bmMtcXRyJyxcclxuICBUcnVuY01vbnRoID0gJ3RydW5jLW1vbnRoJyxcclxuICBUcnVuY1dlZWsgPSAndHJ1bmMtd2VlaycsXHJcbiAgVHJ1bmNEYXkgPSAndHJ1bmMtZGF5JyxcclxuICBUcnVuY0hvdXIgPSAndHJ1bmMtaG91cicsXHJcbiAgVHJ1bmNNaW51dGUgPSAndHJ1bmMtbWludXRlJyxcclxuICBUcnVuY1NlY29uZCA9ICd0cnVuYy1zZWNvbmQnLFxyXG4gIFF1YXJ0MSA9ICdxdWFydDEnLFxyXG4gIFF1YXJ0MyA9ICdxdWFydDMnLFxyXG4gIFNrZXduZXNzID0gJ3NrZXduZXNzJyxcclxuICBLdXJ0b3NpcyA9ICdrdXJ0b3NpcycsXHJcbiAgSW5PdXQgPSAnaW4tb3V0JyxcclxuICBVc2VyID0gJ3VzZXInXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb2xlIG9mIGEgZmllbGQuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBGaWVsZFJvbGVUeXBlIHtcclxuICBEaW1lbnNpb24gPSAnZGltZW5zaW9uJyxcclxuICBNZWFzdXJlID0gJ21lYXN1cmUnLFxyXG4gIFVua25vd24gPSAndW5rbm93bidcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHRoZSB2YWxpZCB0eXBlcyBvZiBmaWx0ZXJzIHRoYXQgY2FuIGJlIGFwcGxpZWQuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBGaWx0ZXJUeXBlIHtcclxuICBDYXRlZ29yaWNhbCA9ICdjYXRlZ29yaWNhbCcsXHJcbiAgUmFuZ2UgPSAncmFuZ2UnLFxyXG4gIEhpZXJhcmNoaWNhbCA9ICdoaWVyYXJjaGljYWwnLFxyXG4gIFJlbGF0aXZlRGF0ZSA9ICdyZWxhdGl2ZS1kYXRlJ1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGRpZmZlcmVudCB1cGRhdGUgdHlwZXMgZm9yIGFwcGx5aW5nIGZpbHRlclxyXG4gKi9cclxuZXhwb3J0IGVudW0gRmlsdGVyVXBkYXRlVHlwZSB7XHJcbiAgQWRkID0gJ2FkZCcsXHJcbiAgQWxsID0gJ2FsbCcsXHJcbiAgUmVwbGFjZSA9ICdyZXBsYWNlJyxcclxuICBSZW1vdmUgPSAncmVtb3ZlJ1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGRvbWFpbiB0eXBlIGZvciBhIGZpbHRlclxyXG4gKi9cclxuZXhwb3J0IGVudW0gRmlsdGVyRG9tYWluVHlwZSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRvbWFpbiB2YWx1ZXMgdGhhdCBhcmUgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmllZCBmaWx0ZXJcclxuICAgKiBpLmUuIHRoZSBkb21haW4gaXMgcmVzdHJpY3RlZCBieSBhIHByZXZpb3VzIGZpbHRlclxyXG4gICAqL1xyXG4gIFJlbGV2YW50ID0gJ3JlbGV2YW50JyxcclxuICAvKipcclxuICAgKiBsaXN0IG9mIGFsbCBwb3NzaWJsZSBkb21haW4gdmFsdWVzIGZyb20gZGF0YWJhc2VcclxuICAgKi9cclxuICBEYXRhYmFzZSA9ICdkYXRhYmFzZSdcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBvcHRpb24gZm9yIHNwZWNpZnlpbmcgd2hpY2ggdmFsdWVzIHRvIGluY2x1ZGUgZm9yIGZpbHRlcmluZ1xyXG4gKiBJbmRpY2F0ZXMgd2hhdCB0byBkbyB3aXRoIG51bGwgdmFsdWVzIGZvciBhIGdpdmVuIGZpbHRlciBvciBtYXJrIHNlbGVjdGlvbiBjYWxsLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gRmlsdGVyTnVsbE9wdGlvbiB7XHJcbiAgTnVsbFZhbHVlcyA9ICdudWxsLXZhbHVlcycsXHJcbiAgTm9uTnVsbFZhbHVlcyA9ICdub24tbnVsbC12YWx1ZXMnLFxyXG4gIEFsbFZhbHVlcyA9ICdhbGwtdmFsdWVzJ1xyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBvZiBtYXJrIGZvciBhIGdpdmVuIG1hcmtzIGNhcmQgaW4gYSB2aXouXHJcbiAqL1xyXG5leHBvcnQgZW51bSBNYXJrVHlwZSB7XHJcbiAgQmFyID0gJ2JhcicsXHJcbiAgTGluZSA9ICdsaW5lJyxcclxuICBBcmVhID0gJ2FyZWEnLFxyXG4gIFNxdWFyZSA9ICdzcXVhcmUnLFxyXG4gIENpcmNsZSA9ICdjaXJjbGUnLFxyXG4gIFNoYXBlID0gJ3NoYXBlJyxcclxuICBUZXh0ID0gJ3RleHQnLFxyXG4gIE1hcCA9ICdtYXAnLFxyXG4gIFBpZSA9ICdwaWUnLFxyXG4gIEdhbnR0QmFyID0gJ2dhbnR0LWJhcicsXHJcbiAgUG9seWdvbiA9ICdwb2x5Z29uJ1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZW51bWVyYXRpb24gZGVzY3JpYmluZyB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGFsbG93YWJsZSB2YWx1ZXMuXHJcbiAqIFRoaXMgaXMgdXNlZCBmb3IgcmVzdHJpY3RpbmcgdGhlIGRvbWFpbiBvZiBhIHBhcmFtZXRlclxyXG4gKi9cclxuZXhwb3J0IGVudW0gUGFyYW1ldGVyVmFsdWVUeXBlIHtcclxuICBBbGwgPSAnYWxsJyxcclxuICBMaXN0ID0gJ2xpc3QnLFxyXG4gIFJhbmdlID0gJ3JhbmdlJ1xyXG59XHJcblxyXG4vKipcclxuICogRGF0ZSBwZXJpb2QgdXNlZCBpbiBmaWx0ZXJzIGFuZCBpbiBwYXJhbWV0ZXJzLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gUGVyaW9kVHlwZSB7XHJcbiAgWWVhcnMgPSAneWVhcnMnLFxyXG4gIFF1YXJ0ZXJzID0gJ3F1YXJ0ZXJzJyxcclxuICBNb250aHMgPSAnbW9udGhzJyxcclxuICBXZWVrcyA9ICd3ZWVrcycsXHJcbiAgRGF5cyA9ICdkYXlzJyxcclxuICBIb3VycyA9ICdob3VycycsXHJcbiAgTWludXRlcyA9ICdtaW51dGVzJyxcclxuICBTZWNvbmRzID0gJ3NlY29uZHMnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFF1aWNrVGFibGVDYWxjVHlwZSB7XHJcbiAgUnVubmluZ1RvdGFsID0gJ3J1bm5pbmctdG90YWwnLFxyXG4gIERpZmZlcmVuY2UgPSAnZGlmZmVyZW5jZScsXHJcbiAgUGVyY2VudERpZmZlcmVuY2UgPSAncGVyY2VudC1kaWZmZXJlbmNlJyxcclxuICBQZXJjZW50T2ZUb3RhbCA9ICdwZXJjZW50LW9mLXRvdGFsJyxcclxuICBSYW5rID0gJ3JhbmsnLFxyXG4gIFBlcmNlbnRpbGUgPSAncGVyY2VudGlsZScsXHJcbiAgTW92aW5nQXZlcmFnZSA9ICdtb3ZpbmctYXZlcmFnZScsXHJcbiAgWVREVG90YWwgPSAneXRkLXRvdGFsJyxcclxuICBDb21wb3VuZEdyb3d0aFJhdGUgPSAnY29tcG91bmQtZ3Jvd3RoLXJhdGUnLFxyXG4gIFllYXJPdmVyWWVhckdyb3d0aCA9ICd5ZWFyLW92ZXIteWVhci1ncm93dGgnLFxyXG4gIFlUREdyb3d0aCA9ICd5dGQtZ3Jvd3RoJyxcclxuICBVbmRlZmluZWQgPSAndW5kZWZpbmVkJ1xyXG59XHJcblxyXG4vKipcclxuICogRW51bSBmb3Igc3BlY2lmeWluZyB0aGUgc2VsZWN0aW9uIHR5cGUgZm9yIHNlbGVjdCBtYXJrcyBhcGkuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBTZWxlY3Rpb25VcGRhdGVUeXBlIHtcclxuICBSZXBsYWNlID0gJ3NlbGVjdC1yZXBsYWNlJyxcclxuICBBZGQgPSAnc2VsZWN0LWFkZCcsXHJcbiAgUmVtb3ZlID0gJ3NlbGVjdC1yZW1vdmUnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBzaGVldCBhIFNoZWV0IG9iamVjdCByZXByZXNlbnRzXHJcbiAqL1xyXG5leHBvcnQgZW51bSBTaGVldFR5cGUge1xyXG4gIERhc2hib2FyZCA9ICdkYXNoYm9hcmQnLFxyXG4gIFN0b3J5ID0gJ3N0b3J5JyxcclxuICBXb3Jrc2hlZXQgPSAnd29ya3NoZWV0J1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBTb3J0RGlyZWN0aW9uIHtcclxuICBJbmNyZWFzaW5nID0gJ2luY3JlYXNpbmcnLFxyXG4gIERlY3JlYXNpbmcgPSAnZGVjcmVhc2luZydcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjZXJ0YWluIHR5cGUgb2YgZXZlbnQgd2hpY2ggY2FuIGJlIGxpc3RlbmVkIGZvclxyXG4gKi9cclxuZXhwb3J0IGVudW0gVGFibGVhdUV2ZW50VHlwZSB7XHJcbiAgLyoqIFJhaXNlZCB3aGVuIGFueSBmaWx0ZXIgaGFzIGNoYW5nZWQgc3RhdGUuKi9cclxuICBGaWx0ZXJDaGFuZ2VkID0gJ2ZpbHRlci1jaGFuZ2VkJyxcclxuXHJcbiAgLyoqIFRoZSBzZWxlY3RlZCBtYXJrcyBvbiBhIHZpc3VhbGl6YXRpb24gaGFzIGNoYW5nZWQgKi9cclxuICBNYXJrU2VsZWN0aW9uQ2hhbmdlZCA9ICdtYXJrLXNlbGVjdGlvbi1jaGFuZ2VkJyxcclxuXHJcbiAgLyoqIEEgcGFyYW1ldGVyIGhhcyBoYWQgaXRzIHZhbHVlIG1vZGlmaWVkICovXHJcbiAgUGFyYW1ldGVyQ2hhbmdlZCA9ICdwYXJhbWV0ZXItY2hhbmdlZCcsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRyZW5kTGluZU1vZGVsVHlwZSB7XHJcbiAgTGluZWFyID0gJ2xpbmVhcicsXHJcbiAgTG9nYXJpdGhtaWMgPSAnbG9nYXJpdGhtaWMnLFxyXG4gIEV4cG9uZW50aWFsID0gJ2V4cG9uZW50aWFsJyxcclxuICBQb2x5bm9taWFsID0gJ3BvbHlub21pYWwnXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktZXh0ZXJuYWwtY29udHJhY3Qvc3JjL0VudW1zLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGFzaGJvYXJkIG9iamVjdHMgLSB0aGUgem9uZXMgaW4gYSBkYXNoYm9hcmQuXHJcbiAqIFRoaXMgZG9lcyBub3QgZm9sbG93IHRoZSBJbXBsIHBhdHRlcm4gYXMgaXQgaXMganVzdCBhIHByb3BlcnR5IGJhZy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRPYmplY3QgaW1wbGVtZW50cyBDb250cmFjdC5EYXNoYm9hcmRPYmplY3Qge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX2Rhc2hib2FyZDogQ29udHJhY3QuRGFzaGJvYXJkLFxyXG4gICAgcHJpdmF0ZSBfdHlwZTogQ29udHJhY3QuRGFzaGJvYXJkT2JqZWN0VHlwZSxcclxuICAgIHByaXZhdGUgX3Bvc2l0aW9uOiBDb250cmFjdC5Qb2ludCxcclxuICAgIHByaXZhdGUgX3NpemU6IENvbnRyYWN0LlNpemUsXHJcbiAgICBwcml2YXRlIF93b3Jrc2hlZXQ6IENvbnRyYWN0LldvcmtzaGVldCB8IHVuZGVmaW5lZFxyXG4gICkgeyB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZGFzaGJvYXJkKCk6IENvbnRyYWN0LkRhc2hib2FyZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGFzaGJvYXJkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB0eXBlKCk6IENvbnRyYWN0LkRhc2hib2FyZE9iamVjdFR5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBvc2l0aW9uKCk6IENvbnRyYWN0LlBvaW50IHtcclxuICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2l6ZSgpOiBDb250cmFjdC5TaXplIHtcclxuICAgIHJldHVybiB0aGlzLl9zaXplO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB3b3Jrc2hlZXQoKTogQ29udHJhY3QuV29ya3NoZWV0IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXQ7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRGFzaGJvYXJkT2JqZWN0LnRzXG4gKiovIiwiaW1wb3J0IHtcclxuICBDb2x1bW5UeXBlIGFzIEV4dGVybmFsQ29sdW1uVHlwZSxcclxuICBEYXNoYm9hcmRPYmplY3RUeXBlIGFzIEV4dGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZSxcclxuICBEYXRhVHlwZSBhcyBFeHRlcm5hbERhdGFUeXBlLFxyXG4gIERhdGVSYW5nZVR5cGUgYXMgRXh0ZXJuYWxEYXRlUmFuZ2VUeXBlLFxyXG4gIEV4dGVuc2lvbkNvbnRleHQgYXMgRXh0ZXJuYWxFeHRlbnNpb25zQ29udGV4dCxcclxuICBFeHRlbnNpb25Nb2RlIGFzIEV4dGVybmFsRXh0ZW5zaW9uc01vZGUsXHJcbiAgRmllbGRBZ2dyZWdhdGlvblR5cGUgYXMgRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZSxcclxuICBGaWVsZFJvbGVUeXBlIGFzIEV4dGVybmFsRmllbGRSb2xlVHlwZSxcclxuICBGaWx0ZXJUeXBlIGFzIEV4dGVybmFsRmlsdGVyVHlwZSxcclxuICBGaWx0ZXJVcGRhdGVUeXBlIGFzIEV4dGVybmFsRmlsdGVyVXBkYXRlVHlwZSxcclxuICBQYXJhbWV0ZXJWYWx1ZVR5cGUgYXMgRXh0ZXJuYWxQYXJhbWV0ZXJWYWx1ZVR5cGUsXHJcbiAgUGVyaW9kVHlwZSBhcyBFeHRlcm5hbERhdGVQZXJpb2QsXHJcbiAgU2hlZXRUeXBlIGFzIEV4dGVybmFsU2hlZXRUeXBlLFxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIENvbHVtblR5cGUgYXMgSW50ZXJuYWxDb2x1bW5UeXBlLFxyXG4gIERhc2hib2FyZE9iamVjdFR5cGUgYXMgSW50ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLFxyXG4gIERhdGFUeXBlIGFzIEludGVybmFsRGF0YVR5cGUsXHJcbiAgRGF0ZVJhbmdlVHlwZSBhcyBJbnRlcm5hbERhdGVSYW5nZVR5cGUsXHJcbiAgRGF0ZVN0ZXBQZXJpb2QgYXMgSW50ZXJuYWxEYXRlU3RlcFBlcmlvZCxcclxuICBEb21haW5SZXN0cmljdGlvblR5cGUgYXMgSW50ZXJuYWxEb21haW5SZXN0cmljdGlvblR5cGUsXHJcbiAgRXh0ZW5zaW9uQ29udGV4dCBhcyBJbnRlcm5hbEV4dGVuc2lvbnNDb250ZXh0LFxyXG4gIEV4dGVuc2lvbk1vZGUgYXMgSW50ZXJuYWxFeHRlbnNpb25zTW9kZSxcclxuICBGaWVsZEFnZ3JlZ2F0aW9uVHlwZSBhcyBJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLFxyXG4gIEZpZWxkUm9sZVR5cGUgYXMgSW50ZXJuYWxGaWVsZFJvbGVUeXBlLFxyXG4gIEZpbHRlclR5cGUgYXMgSW50ZXJuYWxGaWx0ZXJUeXBlLFxyXG4gIEZpbHRlclVwZGF0ZVR5cGUgYXMgSW50ZXJuYWxGaWx0ZXJVcGRhdGVUeXBlLFxyXG4gIFNoZWV0VHlwZSBhcyBJbnRlcm5hbFNoZWV0VHlwZSxcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgRW51bUNvbnZlcnRlciB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp0eXBlZGVmIC0gRGlzYWJsZSB0aGlzIHRvIG1ha2UgZGVjbGFyaW5nIHRoZXNlIGNsYXNzZXMgYSBiaXQgZWFzaWVyICovXHJcbi8qKlxyXG4gKiBNYXBzIGVudW1zIHVzZWQgYnkgdGhlIGludGVybmFsLWFwaS1jb250cmFjdCB0byB0aGUgZW51bXMgdXNlZFxyXG4gKiBpbiB0aGUgZXh0ZXJuYWwtYXBpLWNvbnRyYWN0LCB3aGljaCBkZXZlbG9wZXJzIGNvZGUgYWdhaW5zdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFRvRXh0ZXJuYWxFbnVtTWFwcGluZ3Mge1xyXG4gIHB1YmxpYyBzdGF0aWMgZXh0ZW5zaW9uQ29udGV4dCA9IG5ldyBFbnVtQ29udmVydGVyPEludGVybmFsRXh0ZW5zaW9uc0NvbnRleHQsIEV4dGVybmFsRXh0ZW5zaW9uc0NvbnRleHQ+KHtcclxuICAgIFtJbnRlcm5hbEV4dGVuc2lvbnNDb250ZXh0LkRlc2t0b3BdOiBFeHRlcm5hbEV4dGVuc2lvbnNDb250ZXh0LkRlc2t0b3AsXHJcbiAgICBbSW50ZXJuYWxFeHRlbnNpb25zQ29udGV4dC5TZXJ2ZXJdOiBFeHRlcm5hbEV4dGVuc2lvbnNDb250ZXh0LlNlcnZlclxyXG4gIH0pO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIGV4dGVuc2lvbk1vZGUgPSBuZXcgRW51bUNvbnZlcnRlcjxJbnRlcm5hbEV4dGVuc2lvbnNNb2RlLCBFeHRlcm5hbEV4dGVuc2lvbnNNb2RlPih7XHJcbiAgICBbSW50ZXJuYWxFeHRlbnNpb25zTW9kZS5BdXRob3JpbmddOiBFeHRlcm5hbEV4dGVuc2lvbnNNb2RlLkF1dGhvcmluZyxcclxuICAgIFtJbnRlcm5hbEV4dGVuc2lvbnNNb2RlLlZpZXdpbmddOiBFeHRlcm5hbEV4dGVuc2lvbnNNb2RlLlZpZXdpbmdcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb2x1bW5UeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8SW50ZXJuYWxDb2x1bW5UeXBlLCBFeHRlcm5hbENvbHVtblR5cGU+KHtcclxuICAgIFtJbnRlcm5hbENvbHVtblR5cGUuQ29udGludW91c106IEV4dGVybmFsQ29sdW1uVHlwZS5Db250aW51b3VzLFxyXG4gICAgW0ludGVybmFsQ29sdW1uVHlwZS5EaXNjcmV0ZV06IEV4dGVybmFsQ29sdW1uVHlwZS5EaXNjcmV0ZVxyXG4gIH0pO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIGZpZWxkQWdncmVnYXRpb25UeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8SW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZSwgRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZT4oe1xyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuQXR0cl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuQXR0cixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLkF2Z106IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuQXZnLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuQ291bnRdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLkNvdW50LFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuQ291bnRkXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Db3VudGQsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5EYXldOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLkRheSxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLkVuZF06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuRW5kLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuSG91cl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuSG91cixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLkluT3V0XTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Jbk91dCxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLkt1cnRvc2lzXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5LdXJ0b3NpcyxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLk1heF06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuTWF4LFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuTWR5XTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5NZHksXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5NZWRpYW5dOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLk1lZGlhbixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLk1pbl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuTWluLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuTWludXRlXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5NaW51dGUsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Nb250aFllYXJdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLk1vbnRoWWVhcixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLk5vbmVdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLk5vbmUsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5RdHJdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlF0cixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlF1YXJ0MV06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuUXVhcnQxLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuUXVhcnQzXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5RdWFydDMsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5TZWNvbmRdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlNlY29uZCxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlNrZXduZXNzXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Ta2V3bmVzcyxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlN0ZGV2XTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5TdGRldixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlN0ZGV2cF06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuU3RkZXZwLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuU3VtXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5TdW0sXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY0RheV06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVHJ1bmNEYXksXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY0hvdXJdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jSG91cixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jTWludXRlXTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY01pbnV0ZSxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jTW9udGhdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jTW9udGgsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY1F0cl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVHJ1bmNRdHIsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY1NlY29uZF06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVHJ1bmNTZWNvbmQsXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY1dlZWtdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jV2VlayxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jWWVhcl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVHJ1bmNZZWFyLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVXNlcl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVXNlcixcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLlZhcl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVmFyLFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVmFycF06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuVmFycCxcclxuICAgIFtJbnRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLldlZWtdOiBFeHRlcm5hbEZpZWxkQWdncmVnYXRpb25UeXBlLldlZWssXHJcbiAgICBbSW50ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5XZWVrZGF5XTogRXh0ZXJuYWxGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5XZWVrZGF5LFxyXG4gICAgW0ludGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuWWVhcl06IEV4dGVybmFsRmllbGRBZ2dyZWdhdGlvblR5cGUuWWVhcixcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBmaWVsZFJvbGVUeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8SW50ZXJuYWxGaWVsZFJvbGVUeXBlLCBFeHRlcm5hbEZpZWxkUm9sZVR5cGU+KHtcclxuICAgIFtJbnRlcm5hbEZpZWxkUm9sZVR5cGUuRGltZW5zaW9uXTogRXh0ZXJuYWxGaWVsZFJvbGVUeXBlLkRpbWVuc2lvbixcclxuICAgIFtJbnRlcm5hbEZpZWxkUm9sZVR5cGUuTWVhc3VyZV06IEV4dGVybmFsRmllbGRSb2xlVHlwZS5NZWFzdXJlLFxyXG4gICAgW0ludGVybmFsRmllbGRSb2xlVHlwZS5Vbmtub3duXTogRXh0ZXJuYWxGaWVsZFJvbGVUeXBlLlVua25vd24sXHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgc2hlZXRUeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8SW50ZXJuYWxTaGVldFR5cGUsIEV4dGVybmFsU2hlZXRUeXBlPih7XHJcbiAgICBbSW50ZXJuYWxTaGVldFR5cGUuRGFzaGJvYXJkXTogRXh0ZXJuYWxTaGVldFR5cGUuRGFzaGJvYXJkLFxyXG4gICAgW0ludGVybmFsU2hlZXRUeXBlLlN0b3J5XTogRXh0ZXJuYWxTaGVldFR5cGUuU3RvcnksXHJcbiAgICBbSW50ZXJuYWxTaGVldFR5cGUuV29ya3NoZWV0XTogRXh0ZXJuYWxTaGVldFR5cGUuV29ya3NoZWV0XHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZGFzaGJvYXJkT2JqZWN0VHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEludGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZSwgRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlPih7XHJcbiAgICBbSW50ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLkV4dGVuc2lvbl06IEV4dGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5FeHRlbnNpb24sXHJcbiAgICBbSW50ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLkJsYW5rXTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLkJsYW5rLFxyXG4gICAgW0ludGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5JbWFnZV06IEV4dGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5JbWFnZSxcclxuICAgIFtJbnRlcm5hbERhc2hib2FyZE9iamVjdFR5cGUuTGVnZW5kXTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLkxlZ2VuZCxcclxuICAgIFtJbnRlcm5hbERhc2hib2FyZE9iamVjdFR5cGUuUGFnZUZpbHRlcl06IEV4dGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5QYWdlRmlsdGVyLFxyXG4gICAgW0ludGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5QYXJhbWV0ZXJDb250cm9sXTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLlBhcmFtZXRlckNvbnRyb2wsXHJcbiAgICBbSW50ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLlF1aWNrRmlsdGVyXTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLlF1aWNrRmlsdGVyLFxyXG4gICAgW0ludGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5UZXh0XTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLlRleHQsXHJcbiAgICBbSW50ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLlRpdGxlXTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLlRpdGxlLFxyXG4gICAgW0ludGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5XZWJQYWdlXTogRXh0ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLldlYlBhZ2UsXHJcbiAgICBbSW50ZXJuYWxEYXNoYm9hcmRPYmplY3RUeXBlLldvcmtzaGVldF06IEV4dGVybmFsRGFzaGJvYXJkT2JqZWN0VHlwZS5Xb3Jrc2hlZXRcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBkYXRhVHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEludGVybmFsRGF0YVR5cGUsIEV4dGVybmFsRGF0YVR5cGU+KHtcclxuICAgIFtJbnRlcm5hbERhdGFUeXBlLkJvb2xdOiBFeHRlcm5hbERhdGFUeXBlLkJvb2wsXHJcbiAgICBbSW50ZXJuYWxEYXRhVHlwZS5EYXRlXTogRXh0ZXJuYWxEYXRhVHlwZS5EYXRlLFxyXG4gICAgW0ludGVybmFsRGF0YVR5cGUuRGF0ZVRpbWVdOiBFeHRlcm5hbERhdGFUeXBlLkRhdGVUaW1lLFxyXG4gICAgW0ludGVybmFsRGF0YVR5cGUuRmxvYXRdOiBFeHRlcm5hbERhdGFUeXBlLkZsb2F0LFxyXG4gICAgW0ludGVybmFsRGF0YVR5cGUuSW50XTogRXh0ZXJuYWxEYXRhVHlwZS5JbnQsXHJcbiAgICBbSW50ZXJuYWxEYXRhVHlwZS5TdHJpbmddOiBFeHRlcm5hbERhdGFUeXBlLlN0cmluZ1xyXG4gIH0pO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIGZpbHRlclVwZGF0ZVR5cGUgPSBuZXcgRW51bUNvbnZlcnRlcjxJbnRlcm5hbEZpbHRlclVwZGF0ZVR5cGUsIEV4dGVybmFsRmlsdGVyVXBkYXRlVHlwZT4oe1xyXG4gICAgW0ludGVybmFsRmlsdGVyVXBkYXRlVHlwZS5BZGRdOiBFeHRlcm5hbEZpbHRlclVwZGF0ZVR5cGUuQWRkLFxyXG4gICAgW0ludGVybmFsRmlsdGVyVXBkYXRlVHlwZS5BbGxdOiBFeHRlcm5hbEZpbHRlclVwZGF0ZVR5cGUuQWxsLFxyXG4gICAgW0ludGVybmFsRmlsdGVyVXBkYXRlVHlwZS5SZW1vdmVdOiBFeHRlcm5hbEZpbHRlclVwZGF0ZVR5cGUuUmVtb3ZlLFxyXG4gICAgW0ludGVybmFsRmlsdGVyVXBkYXRlVHlwZS5SZXBsYWNlXTogRXh0ZXJuYWxGaWx0ZXJVcGRhdGVUeXBlLlJlcGxhY2VcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBhbGxvd2FibGVWYWx1ZXMgPSBuZXcgRW51bUNvbnZlcnRlcjxJbnRlcm5hbERvbWFpblJlc3RyaWN0aW9uVHlwZSwgRXh0ZXJuYWxQYXJhbWV0ZXJWYWx1ZVR5cGU+KHtcclxuICAgIFtJbnRlcm5hbERvbWFpblJlc3RyaWN0aW9uVHlwZS5BbGxdOiBFeHRlcm5hbFBhcmFtZXRlclZhbHVlVHlwZS5BbGwsXHJcbiAgICBbSW50ZXJuYWxEb21haW5SZXN0cmljdGlvblR5cGUuTGlzdF06IEV4dGVybmFsUGFyYW1ldGVyVmFsdWVUeXBlLkxpc3QsXHJcbiAgICBbSW50ZXJuYWxEb21haW5SZXN0cmljdGlvblR5cGUuUmFuZ2VdOiBFeHRlcm5hbFBhcmFtZXRlclZhbHVlVHlwZS5SYW5nZVxyXG4gIH0pO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIGRhdGVTdGVwUGVyaW9kID0gbmV3IEVudW1Db252ZXJ0ZXI8SW50ZXJuYWxEYXRlU3RlcFBlcmlvZCwgRXh0ZXJuYWxEYXRlUGVyaW9kPih7XHJcbiAgICBbSW50ZXJuYWxEYXRlU3RlcFBlcmlvZC5ZZWFyc106IEV4dGVybmFsRGF0ZVBlcmlvZC5ZZWFycyxcclxuICAgIFtJbnRlcm5hbERhdGVTdGVwUGVyaW9kLlF1YXJ0ZXJzXTogRXh0ZXJuYWxEYXRlUGVyaW9kLlF1YXJ0ZXJzLFxyXG4gICAgW0ludGVybmFsRGF0ZVN0ZXBQZXJpb2QuTW9udGhzXTogRXh0ZXJuYWxEYXRlUGVyaW9kLk1vbnRocyxcclxuICAgIFtJbnRlcm5hbERhdGVTdGVwUGVyaW9kLldlZWtzXTogRXh0ZXJuYWxEYXRlUGVyaW9kLldlZWtzLFxyXG4gICAgW0ludGVybmFsRGF0ZVN0ZXBQZXJpb2QuRGF5c106IEV4dGVybmFsRGF0ZVBlcmlvZC5EYXlzLFxyXG4gICAgW0ludGVybmFsRGF0ZVN0ZXBQZXJpb2QuSG91cnNdOiBFeHRlcm5hbERhdGVQZXJpb2QuSG91cnMsXHJcbiAgICBbSW50ZXJuYWxEYXRlU3RlcFBlcmlvZC5NaW51dGVzXTogRXh0ZXJuYWxEYXRlUGVyaW9kLk1pbnV0ZXMsXHJcbiAgICBbSW50ZXJuYWxEYXRlU3RlcFBlcmlvZC5TZWNvbmRzXTogRXh0ZXJuYWxEYXRlUGVyaW9kLlNlY29uZHNcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBkYXRlUmFuZ2VUeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8SW50ZXJuYWxEYXRlUmFuZ2VUeXBlLCBFeHRlcm5hbERhdGVSYW5nZVR5cGU+KHtcclxuICAgIFtJbnRlcm5hbERhdGVSYW5nZVR5cGUuQ3VycmVudF06IEV4dGVybmFsRGF0ZVJhbmdlVHlwZS5DdXJyZW50LFxyXG4gICAgW0ludGVybmFsRGF0ZVJhbmdlVHlwZS5MYXN0XTogRXh0ZXJuYWxEYXRlUmFuZ2VUeXBlLkxhc3QsXHJcbiAgICBbSW50ZXJuYWxEYXRlUmFuZ2VUeXBlLkxhc3ROXTogRXh0ZXJuYWxEYXRlUmFuZ2VUeXBlLkxhc3ROLFxyXG4gICAgW0ludGVybmFsRGF0ZVJhbmdlVHlwZS5OZXh0XTogRXh0ZXJuYWxEYXRlUmFuZ2VUeXBlLk5leHQsXHJcbiAgICBbSW50ZXJuYWxEYXRlUmFuZ2VUeXBlLk5leHROXTogRXh0ZXJuYWxEYXRlUmFuZ2VUeXBlLk5leHROLFxyXG4gICAgW0ludGVybmFsRGF0ZVJhbmdlVHlwZS5Ub0RhdGVdOiBFeHRlcm5hbERhdGVSYW5nZVR5cGUuVG9EYXRlXHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZmlsdGVyVHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEludGVybmFsRmlsdGVyVHlwZSwgRXh0ZXJuYWxGaWx0ZXJUeXBlPih7XHJcbiAgICBbSW50ZXJuYWxGaWx0ZXJUeXBlLkNhdGVnb3JpY2FsXTogRXh0ZXJuYWxGaWx0ZXJUeXBlLkNhdGVnb3JpY2FsLFxyXG4gICAgW0ludGVybmFsRmlsdGVyVHlwZS5SYW5nZV0gOiBFeHRlcm5hbEZpbHRlclR5cGUuUmFuZ2UsXHJcbiAgICBbSW50ZXJuYWxGaWx0ZXJUeXBlLlJlbGF0aXZlRGF0ZV06IEV4dGVybmFsRmlsdGVyVHlwZS5SZWxhdGl2ZURhdGUsXHJcbiAgICBbSW50ZXJuYWxGaWx0ZXJUeXBlLkhpZXJhcmNoaWNhbF06IEV4dGVybmFsRmlsdGVyVHlwZS5IaWVyYXJjaGljYWxcclxuICB9KTtcclxufVxyXG4vKiB0c2xpbnQ6ZW5hYmxlOnR5cGVkZWYgKi9cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9FbnVtTWFwcGluZ3MvSW50ZXJuYWxUb0V4dGVybmFsRW51bU1hcHBpbmdzLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBQb2ludCBpbXBsZW1lbnRzIENvbnRyYWN0LlBvaW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfeDogbnVtYmVyLCBwcml2YXRlIF95OiBudW1iZXIpIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl94O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5feTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Qb2ludC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2l6ZSBpbXBsZW1lbnRzIENvbnRyYWN0LlNpemUge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9oZWlnaHQ6IG51bWJlciwgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcikgeyB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NpemUudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuXHJcbmltcG9ydCB7IFNoZWV0IH0gZnJvbSAnLi9TaGVldCc7XHJcblxyXG5pbXBvcnQgeyBXb3Jrc2hlZXRJbXBsIH0gZnJvbSAnLi9JbXBsL1dvcmtzaGVldEltcGwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdvcmtzaGVldCBleHRlbmRzIFNoZWV0IGltcGxlbWVudHMgQ29udHJhY3QuV29ya3NoZWV0IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfd29ya3NoZWV0SW1wbDogV29ya3NoZWV0SW1wbCkge1xyXG4gICAgc3VwZXIoX3dvcmtzaGVldEltcGwpO1xyXG5cclxuICAgIC8vIENhbGwgdG8gaW5pdGlhbGl6ZSBldmVudHMgYW5kIHRoZW4gY2FsbCBkb3duIHRvIHRoZSBldmVudCBsaXN0ZW5lciBtYW5hZ2VyIHRvIGhhbmRsZSB0aGluZ3NcclxuICAgIHRoaXMuX3dvcmtzaGVldEltcGwuaW5pdGlhbGl6ZUV2ZW50cyh0aGlzKS5mb3JFYWNoKGUgPT4gdGhpcy5hZGROZXdFdmVudFR5cGUoZSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwYXJlbnREYXNoYm9hcmQoKTogQ29udHJhY3QuRGFzaGJvYXJkIHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLnBhcmVudERhc2hib2FyZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhcHBseUZpbHRlckFzeW5jKFxyXG4gICAgZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlczogQXJyYXk8c3RyaW5nPiwgdXBkYXRlVHlwZTogQ29udHJhY3QuRmlsdGVyVXBkYXRlVHlwZSwgb3B0aW9uczogQ29udHJhY3QuRmlsdGVyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLmFwcGx5RmlsdGVyQXN5bmMoZmllbGROYW1lLCB2YWx1ZXMsIHVwZGF0ZVR5cGUsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFwcGx5UmFuZ2VGaWx0ZXJBc3luYyhmaWVsZE5hbWU6IHN0cmluZywgZmlsdGVyT3B0aW9uczogQ29udHJhY3QuUmFuZ2VGaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLmFwcGx5UmFuZ2VGaWx0ZXJBc3luYyhmaWVsZE5hbWUsIGZpbHRlck9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsZWFyRmlsdGVyQXN5bmMoZmllbGROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldEltcGwuY2xlYXJGaWx0ZXJBc3luYyhmaWVsZE5hbWUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFuYWx5dGljT2JqZWN0c0FzeW5jKCk6IFByb21pc2U8QXJyYXk8Q29udHJhY3QuQW5hbHl0aWNzT2JqZWN0Pj4ge1xyXG4gICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5hcGlOb3RJbXBsZW1lbnRlZChbJ2dldEFuYWx5dGljT2JqZWN0c0FzeW5jJ10pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldERhdGFTb3VyY2VzQXN5bmMoKTogUHJvbWlzZTxBcnJheTxDb250cmFjdC5EYXRhU291cmNlPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldEltcGwuZ2V0RGF0YVNvdXJjZXNBc3luYygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEVuY29kaW5nc0FzeW5jKCk6IFByb21pc2U8QXJyYXk8Q29udHJhY3QuRW5jb2Rpbmc+PiB7XHJcbiAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmFwaU5vdEltcGxlbWVudGVkKFsnZ2V0RW5jb2RpbmdzQXN5bmMnXSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RmlsdGVyc0FzeW5jKCk6IFByb21pc2U8QXJyYXk8Q29udHJhY3QuRmlsdGVyPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldEltcGwuZ2V0RmlsdGVyc0FzeW5jKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0U2VsZWN0ZWRNYXJrc0FzeW5jKCk6IFByb21pc2U8Q29udHJhY3QuTWFya3NDb2xsZWN0aW9uPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fd29ya3NoZWV0SW1wbC5nZXRTZWxlY3RlZE1hcmtzQXN5bmMoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRIaWdobGlnaHRlZE1hcmtzQXN5bmMoKTogUHJvbWlzZTxDb250cmFjdC5NYXJrc0NvbGxlY3Rpb24+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLmdldEhpZ2hsaWdodGVkTWFya3NBc3luYygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN1bW1hcnlEYXRhQXN5bmMob3B0aW9uczogQ29udHJhY3QuR2V0U3VtbWFyeURhdGFPcHRpb25zKTogUHJvbWlzZTxDb250cmFjdC5EYXRhVGFibGU+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLmdldFN1bW1hcnlEYXRhQXN5bmMob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhvcHRpb25zOiBDb250cmFjdC5HZXRVbmRlcmx5aW5nRGF0YU9wdGlvbnMpOiBQcm9taXNlPENvbnRyYWN0LkRhdGFUYWJsZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldEltcGwuZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhclNlbGVjdGVkTWFya3NBc3luYygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLmNsZWFyU2VsZWN0ZWRNYXJrc0FzeW5jKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2VsZWN0TWFya3NCeUlEQXN5bmMobWFya3NJbmZvOiBBcnJheTxDb250cmFjdC5NYXJrSW5mbz4sIHVwZGF0ZVR5cGU6IENvbnRyYWN0LlNlbGVjdGlvblVwZGF0ZVR5cGUpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLnNlbGVjdE1hcmtzQnlJZEFzeW5jKG1hcmtzSW5mbywgdXBkYXRlVHlwZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2VsZWN0TWFya3NCeVZhbHVlQXN5bmMoc2VsZWN0aW9uczogQXJyYXk8Q29udHJhY3QuU2VsZWN0aW9uQ3JpdGVyaWE+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25VcGRhdGVUeXBlOiBDb250cmFjdC5TZWxlY3Rpb25VcGRhdGVUeXBlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fd29ya3NoZWV0SW1wbC5zZWxlY3RNYXJrc0J5VmFsdWVBc3luYyhzZWxlY3Rpb25zLCBzZWxlY3Rpb25VcGRhdGVUeXBlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZWxlY3RNYXJrc0J5SWRBc3luYyhzZWxlY3Rpb25zOiBBcnJheTxDb250cmFjdC5NYXJrSW5mbz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblVwZGF0ZVR5cGU6IENvbnRyYWN0LlNlbGVjdGlvblVwZGF0ZVR5cGUpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRJbXBsLnNlbGVjdE1hcmtzQnlJZEFzeW5jKHNlbGVjdGlvbnMsIHNlbGVjdGlvblVwZGF0ZVR5cGUpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1dvcmtzaGVldC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFNoZWV0UGF0aCB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBTaGVldEluZm9JbXBsIH0gZnJvbSAnLi9TaGVldEluZm9JbXBsJztcclxuXHJcbmltcG9ydCB7IFBhcmFtZXRlcnNTZXJ2aWNlIH0gZnJvbSAnLi4vU2VydmljZXMvUGFyYW1ldGVyc1NlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlUmVnaXN0cnksIFNlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VzL1NlcnZpY2VSZWdpc3RyeSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hlZXRJbXBsIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfc2hlZXRJbmZvSW1wbDogU2hlZXRJbmZvSW1wbCkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2hlZXRJbmZvSW1wbC5uYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBzaGVldFR5cGUoKTogQ29udHJhY3QuU2hlZXRUeXBlIHtcclxuICAgIHJldHVybiB0aGlzLl9zaGVldEluZm9JbXBsLnNoZWV0VHlwZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2hlZXRQYXRoKCk6IFNoZWV0UGF0aCB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2hlZXRJbmZvSW1wbC5zaGVldFBhdGg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNpemUoKTogQ29udHJhY3QuU2l6ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2hlZXRJbmZvSW1wbC5zaGVldFNpemU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZmluZFBhcmFtZXRlckFzeW5jKHBhcmFtZXRlck5hbWU6IHN0cmluZywgc2hlZXQ6IENvbnRyYWN0LlNoZWV0KTogUHJvbWlzZTxDb250cmFjdC5QYXJhbWV0ZXIgfCB1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxQYXJhbWV0ZXJzU2VydmljZT4oU2VydmljZU5hbWVzLlBhcmFtZXRlcnMpO1xyXG4gICAgcmV0dXJuIHNlcnZpY2UuZmluZFBhcmFtZXRlckJ5TmFtZUFzeW5jKHBhcmFtZXRlck5hbWUsIHNoZWV0KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJzQXN5bmMoc2hlZXQ6IENvbnRyYWN0LlNoZWV0KTogUHJvbWlzZTxBcnJheTxDb250cmFjdC5QYXJhbWV0ZXI+PiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8UGFyYW1ldGVyc1NlcnZpY2U+KFNlcnZpY2VOYW1lcy5QYXJhbWV0ZXJzKTtcclxuICAgIHJldHVybiBzZXJ2aWNlLmdldFBhcmFtZXRlcnNGb3JTaGVldEFzeW5jKHRoaXMuc2hlZXRQYXRoLCBzaGVldCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9TaGVldEltcGwudHNcbiAqKi8iLCJpbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuLyoqXHJcbiAqIEJhc2UgaW50ZXJmYWNlIGZvciBhbiBhcGkgc2VydmljZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBcGlTZXJ2aWNlIHtcclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBuYW1lIGZvciB0aGlzIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgc2VydmljZU5hbWU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbGxlY3Rpb24gb2Ygc2VydmljZSBuYW1lIHdoaWNoIHdpbGwgYmUgcmVnaXN0ZXJlZCBpbiB0aGUgYXBpLXNoYXJlZCBwcm9qZWN0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBTZXJ2aWNlTmFtZXMge1xyXG4gIERhdGFTb3VyY2VTZXJ2aWNlID0gJ2RhdGEtc291cmNlLXNlcnZpY2UnLFxyXG4gIEdldERhdGEgPSAnZ2V0LWRhdGEtc2VydmljZScsXHJcbiAgRmlsdGVyID0gJ2ZpbHRlci1zZXJ2aWNlJyxcclxuICBOb3RpZmljYXRpb24gPSAnbm90aWZpY2F0aW9uLXNlcnZpY2UnLFxyXG4gIFBhcmFtZXRlcnMgPSAncGFyYW1ldGVycy1zZXJ2aWNlJyxcclxuICBTZWxlY3Rpb24gPSAnc2VsZWN0aW9uLXNlcnZpY2UnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEbyBzb21lIGdsb2JhYmwgZGVjbGFyYXRpb25zIHNvIHdlIGNhbiBjcmVhdGUgYSBzaW5nbGV0b24gb24gdGhlIHdpbmRvdyBvYmplY3RcclxuICovXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICBpbnRlcmZhY2UgV2luZG93IHsgX190YWJsZWF1QXBpU2VydmljZVJlZ2lzdHJ5OiBTZXJ2aWNlUmVnaXN0cnkgfCB1bmRlZmluZWQ7IH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZXJ2aWNlUmVnaXN0cnkge1xyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBzZXJ2aWNlIGludG8gdGhlIHNlcnZpY2UgcmVnaXN0cnkuIEFueSBleGlzdGluZyBvbmUgd2lsbFxyXG4gICAqIGJlIG92ZXJ3cml0dGVuLiB0aGUgc2VydmljZSBpcyByZWdpc3RlcmVkIHVuZGVyIHNlcnZpY2Uuc2VydmljZU5hbWVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXBpU2VydmljZX0gc2VydmljZSBUaGUgc2Vydml2ZSB0byByZWdpc3RlclxyXG4gICAqL1xyXG4gIHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlOiBBcGlTZXJ2aWNlKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIHRoZSBnaXZlbiBzZXJ2aWNlIGZyb20gdGhlIHJlZ2lzdHJ5LiBJZiB0aGVyZSBpcyBub3QgYVxyXG4gICAqIHNlcnZpY2UgcmVnaXN0ZXJlZCB1bmRlciB0aGF0IG5hbWUsIHRocm93cyBhbmQgZXJyb3JcclxuICAgKlxyXG4gICAqIEB0ZW1wbGF0ZSBUIFRoZSB0eXBlIG9mIHRoZSBzZXJ2aWNlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlLlxyXG4gICAqIEByZXR1cm5zIHtUfSBUaGUgcmVxdWVzdGVkIHNlcnZpY2VcclxuICAgKi9cclxuICBnZXRTZXJ2aWNlPFQgZXh0ZW5kcyBBcGlTZXJ2aWNlPihzZXJ2aWNlTmFtZTogc3RyaW5nKTogVDtcclxufVxyXG5cclxuY2xhc3MgU2VydmljZVJlZ2lzdHJ5SW1wbCBpbXBsZW1lbnRzIFNlcnZpY2VSZWdpc3RyeSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgU0VSVklDRV9OT1RfUkVHSVNURVJFRDogc3RyaW5nID0gJ05vIFNlcnZpY2UgJTEgaXMgcmVnaXN0ZXJlZCc7XHJcbiAgcHJpdmF0ZSBfc2VydmljZXM6IHsgW3NlcnZpY2VOYW1lOiBzdHJpbmddOiBBcGlTZXJ2aWNlOyB9O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9zZXJ2aWNlcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlOiBBcGlTZXJ2aWNlKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXJ2aWNlc1tzZXJ2aWNlLnNlcnZpY2VOYW1lXSA9IHNlcnZpY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0U2VydmljZTxUIGV4dGVuZHMgQXBpU2VydmljZT4oc2VydmljZU5hbWU6IHN0cmluZyk6IFQge1xyXG4gICAgaWYgKCF0aGlzLl9zZXJ2aWNlcy5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5lcnJvcihTZXJ2aWNlUmVnaXN0cnlJbXBsLlNFUlZJQ0VfTk9UX1JFR0lTVEVSRUQsIFtzZXJ2aWNlTmFtZV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlc1tzZXJ2aWNlTmFtZV0gYXMgVDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBzdGF0aWMgY2xhc3MgdXNlZCBmb3IgZ2V0dGluZyBhY2Nlc3MgdG8gdGhlIHNpbmdsZSBpbnN0YW5jZVxyXG4gKiBvZiB0aGUgQXBpU2VydmljZVJlZ2lzdHJ5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZVJlZ2lzdHJ5IHtcclxuICBwcml2YXRlIHN0YXRpYyBTRVJWSUNFX1JFR0lTVFJZX0ZBSUxFRDogc3RyaW5nID0gJ0Fzc2lnbmluZyBzZXJ2aWNlIHJlZ2lzdHJ5IGZhaWxlZCc7XHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBTZXJ2aWNlUmVnaXN0cnlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBTZXJ2aWNlUmVnaXN0cnkge1xyXG4gICAgaWYgKCF3aW5kb3cuX190YWJsZWF1QXBpU2VydmljZVJlZ2lzdHJ5KSB7XHJcbiAgICAgIEFwaVNlcnZpY2VSZWdpc3RyeS5zZXRJbnN0YW5jZShuZXcgU2VydmljZVJlZ2lzdHJ5SW1wbCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXdpbmRvdy5fX3RhYmxlYXVBcGlTZXJ2aWNlUmVnaXN0cnkpIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5lcnJvcihBcGlTZXJ2aWNlUmVnaXN0cnkuU0VSVklDRV9SRUdJU1RSWV9GQUlMRUQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB3aW5kb3cuX190YWJsZWF1QXBpU2VydmljZVJlZ2lzdHJ5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGVscGVyIG1ldGhvZCB0byBvdmVycmlkZSB0aGUgcmVnaXN0cnkgaW5zdGFuY2UuIENhbiBiZSB1c2VkIGJ5IHVuaXQgdGVzdHNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U2VydmljZVJlZ2lzdHJ5fSBzZXJ2aWNlUmVnaXN0cnkgVGhlIG5ldyByZWdpc3RyeVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgc2V0SW5zdGFuY2Uoc2VydmljZVJlZ2lzdHJ5PzogU2VydmljZVJlZ2lzdHJ5KTogdm9pZCB7XHJcbiAgICB3aW5kb3cuX190YWJsZWF1QXBpU2VydmljZVJlZ2lzdHJ5ID0gc2VydmljZVJlZ2lzdHJ5O1xyXG4gIH1cclxuXHJcbiAgLy8gUHJpdmF0ZSB0byBhdm9pZCBhbnlvbmUgY29uc3RydWN0aW5nIHRoaXNcclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL1NlcnZpY2VSZWdpc3RyeS50c1xuICoqLyIsImltcG9ydCB7IFNoZWV0VHlwZSwgU2l6ZSB9IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFNoZWV0UGF0aCB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hlZXRJbmZvSW1wbCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSBfc2hlZXRUeXBlOiBTaGVldFR5cGUsXHJcbiAgICBwcml2YXRlIF9zaGVldFNpemU6IFNpemVcclxuICApIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBzaGVldFNpemUoKTogU2l6ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2hlZXRTaXplO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBzaGVldFR5cGUoKTogU2hlZXRUeXBlIHtcclxuICAgIHJldHVybiB0aGlzLl9zaGVldFR5cGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNoZWV0UGF0aCgpOiBTaGVldFBhdGgge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2hlZXROYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgIGlzRGFzaGJvYXJkOiB0aGlzLnNoZWV0VHlwZSA9PT0gU2hlZXRUeXBlLkRhc2hib2FyZFxyXG4gICAgICAvLyBUT0RPIC0gU3Rvcmllc1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9JbXBsL1NoZWV0SW5mb0ltcGwudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIERhdGFTY2hlbWEsXHJcbiAgRGF0YVNvdXJjZSBhcyBEYXRhU291cmNlSW5mbyxcclxuICBGaWx0ZXJFdmVudCwgTm90aWZpY2F0aW9uSWQsXHJcbiAgVmlzdWFsSWQsXHJcbiAgV29ya3NoZWV0RGF0YVNvdXJjZUluZm9cclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJy4uL0RhdGFTb3VyY2UnO1xyXG5pbXBvcnQgeyBXb3Jrc2hlZXQgfSBmcm9tICcuLi9Xb3Jrc2hlZXQnO1xyXG5cclxuaW1wb3J0IHsgRGF0YVNvdXJjZUltcGwgfSBmcm9tICcuL0RhdGFTb3VyY2VJbXBsJztcclxuaW1wb3J0IHsgU2hlZXRJbXBsIH0gZnJvbSAnLi9TaGVldEltcGwnO1xyXG5pbXBvcnQgeyBTaGVldEluZm9JbXBsIH0gZnJvbSAnLi9TaGVldEluZm9JbXBsJztcclxuaW1wb3J0IHsgU2luZ2xlRXZlbnRNYW5hZ2VySW1wbCB9IGZyb20gJy4vU2luZ2xlRXZlbnRNYW5hZ2VySW1wbCc7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJDaGFuZ2VkRXZlbnQgfSBmcm9tICcuLi9FdmVudHMvRmlsdGVyQ2hhbmdlZEV2ZW50JztcclxuaW1wb3J0IHsgTWFya3NTZWxlY3RlZEV2ZW50IH0gZnJvbSAnLi4vRXZlbnRzL01hcmtzU2VsZWN0ZWRFdmVudCc7XHJcbmltcG9ydCB7IFNpbmdsZUV2ZW50TWFuYWdlciB9IGZyb20gJy4uL1NpbmdsZUV2ZW50TWFuYWdlcic7XHJcblxyXG5pbXBvcnQgeyBEYXRhU291cmNlU2VydmljZSB9IGZyb20gJy4uL1NlcnZpY2VzL0RhdGFTb3VyY2VTZXJ2aWNlJztcclxuaW1wb3J0IHsgRmlsdGVyU2VydmljZSB9IGZyb20gJy4uL1NlcnZpY2VzL0ZpbHRlclNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHZXREYXRhU2VydmljZSwgR2V0RGF0YVR5cGUgfSBmcm9tICcuLi9TZXJ2aWNlcy9HZXREYXRhU2VydmljZSc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9TZXJ2aWNlcy9Ob3RpZmljYXRpb25TZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL1NlcnZpY2VzL1NlbGVjdGlvblNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlUmVnaXN0cnksIFNlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VzL1NlcnZpY2VSZWdpc3RyeSc7XHJcblxyXG5jb25zdCB2aXN1YWxJZHNBcmVFcXVhbCA9IGZ1bmN0aW9uKGE6IFZpc3VhbElkLCBiOiBWaXN1YWxJZCk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBhICYmIGIgJiZcclxuICAgIGEud29ya3NoZWV0ID09PSBiLndvcmtzaGVldCAmJlxyXG4gICAgYS5kYXNoYm9hcmQgPT09IGIuZGFzaGJvYXJkICYmXHJcbiAgICBhLnN0b3J5Ym9hcmQgPT09IGIuc3Rvcnlib2FyZCAmJlxyXG4gICAgYS5zdG9yeVBvaW50SUQgPT09IGIuc3RvcnlQb2ludElEICYmXHJcbiAgICBhLmZsaXBib2FyZFpvbmVJRCA9PT0gYi5mbGlwYm9hcmRab25lSUQ7XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgV29ya3NoZWV0SW1wbCBleHRlbmRzIFNoZWV0SW1wbCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHNoZWV0SW5mb0ltcGw6IFNoZWV0SW5mb0ltcGwsXHJcbiAgICAgICAgICAgICAgICAgICAgIHByaXZhdGUgX3Zpc3VhbElkOiBWaXN1YWxJZCxcclxuICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBfcGFyZW50RGFzaGJvYXJkOiBDb250cmFjdC5EYXNoYm9hcmQpIHtcclxuICAgIHN1cGVyKHNoZWV0SW5mb0ltcGwpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwYXJlbnREYXNoYm9hcmQoKTogQ29udHJhY3QuRGFzaGJvYXJkIHtcclxuICAgIHJldHVybiB0aGlzLl9wYXJlbnREYXNoYm9hcmQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWxwZXIgbWV0aG9kIHdoaWNoIGdvZXMgdGhyb3VnaCBhbmQgcmVnaXN0ZXJzIGVhY2ggZXZlbnQgdHlwZSB0aGlzIGltcGwga25vd3MgYWJvdXRcclxuICAgKiB3aXRoIHRoZSBOb3RpZmljYXRpb25TZXJ2aWNlLiBJdCByZXR1cm5zIGFuIGFycmF5IG9mIFNpbmdsZUV2ZW50TWFuYWdlciBvYmplY3RzIHdoaWNoXHJcbiAgICogY2FuIHRoZW4gYmUgcGFzc2VkIHRvIGFuIEV2ZW50TGlzdGVuZXJNYW5hZ2VyIHRvIGhhbmRsZSB1c2VyIHJlZ2lzdHJhdGlvbiAvIHVucmVnaXN0cmF0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtXb3Jrc2hlZXR9IHdvcmtzaGVldCBUaGUgd29ya3NoZWV0IG9iamVjdCB3aGljaCB3aWxsIGJlIGluY2x1ZGVkIHdpdGggdGhlIGV2ZW50IG5vdGlmaWNhdGlvbnNcclxuICAgKiBAcmV0dXJucyB7QXJyYXk8U2luZ2xlRXZlbnRNYW5hZ2VyPn0gQ29sbGVjdGlvbiBvZiBldmVudCBtYW5hZ2VycyB0byBwYXNzIHRvIGFuIEV2ZW50TGlzdGVuZXJNYW5hZ2VyXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemVFdmVudHMod29ya3NoZWV0OiBXb3Jrc2hlZXQpOiBBcnJheTxTaW5nbGVFdmVudE1hbmFnZXI+IHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXk8U2luZ2xlRXZlbnRNYW5hZ2VyPigpO1xyXG4gICAgbGV0IG5vdGlmaWNhdGlvblNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2U7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgbm90aWZpY2F0aW9uU2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPE5vdGlmaWNhdGlvblNlcnZpY2U+KFNlcnZpY2VOYW1lcy5Ob3RpZmljYXRpb24pO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIHRoaXMgc2VydmljZSByZWdpc3RlcmVkLCBqdXN0IHJldHVyblxyXG4gICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIGFsbCBvZiB0aGUgZXZlbnQgbWFuYWdlcnMgd2UnbGwgbmVlZCAob25lIGZvciBlYWNoIGV2ZW50IHR5cGUpXHJcbiAgICBjb25zdCBtYXJrc0V2ZW50ID0gbmV3IFNpbmdsZUV2ZW50TWFuYWdlckltcGw8TWFya3NTZWxlY3RlZEV2ZW50PihDb250cmFjdC5UYWJsZWF1RXZlbnRUeXBlLk1hcmtTZWxlY3Rpb25DaGFuZ2VkKTtcclxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2UucmVnaXN0ZXJIYW5kbGVyKE5vdGlmaWNhdGlvbklkLlNlbGVjdGVkTWFya3NDaGFuZ2VkLCAobW9kZWwpID0+IHtcclxuICAgICAgY29uc3QgdmlzdWFsSWQgPSBtb2RlbCBhcyBWaXN1YWxJZDtcclxuICAgICAgcmV0dXJuIHZpc3VhbElkc0FyZUVxdWFsKHZpc3VhbElkLCB0aGlzLnZpc3VhbElkKTtcclxuICAgIH0sICh2aXo6IFZpc3VhbElkKSA9PiB7XHJcbiAgICAgIG1hcmtzRXZlbnQudHJpZ2dlckV2ZW50KCgpID0+IG5ldyBNYXJrc1NlbGVjdGVkRXZlbnQod29ya3NoZWV0KSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBmaWx0ZXJFdmVudCA9IG5ldyBTaW5nbGVFdmVudE1hbmFnZXJJbXBsPEZpbHRlckNoYW5nZWRFdmVudD4oQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZS5GaWx0ZXJDaGFuZ2VkKTtcclxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2UucmVnaXN0ZXJIYW5kbGVyKE5vdGlmaWNhdGlvbklkLkZpbHRlckNoYW5nZWQsIChtb2RlbCkgPT4ge1xyXG4gICAgICBjb25zdCBmaWx0ZXJFdmVudFJlc3BvbnNlID0gbW9kZWwgYXMgRmlsdGVyRXZlbnQ7XHJcbiAgICAgIHJldHVybiB0aGlzLnZpc3VhbElkLndvcmtzaGVldCA9PT0gZmlsdGVyRXZlbnRSZXNwb25zZS52aXN1YWxJZC53b3Jrc2hlZXQ7XHJcbiAgICB9LCAoZXZlbnQ6IEZpbHRlckV2ZW50KSA9PiB7XHJcbiAgICAgIGZpbHRlckV2ZW50LnRyaWdnZXJFdmVudCgoKSA9PiBuZXcgRmlsdGVyQ2hhbmdlZEV2ZW50KHdvcmtzaGVldCwgZXZlbnQuZmllbGROYW1lKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXN1bHRzLnB1c2gobWFya3NFdmVudCk7XHJcbiAgICByZXN1bHRzLnB1c2goZmlsdGVyRXZlbnQpO1xyXG5cclxuICAgIC8vIFRPRE8gLSBvdGhlciBldmVudCB0eXBlc1xyXG5cclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB2aXN1YWxJZCgpOiBWaXN1YWxJZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmlzdWFsSWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXBwbHlGaWx0ZXJBc3luYyhcclxuICAgIGZpZWxkTmFtZTogc3RyaW5nLCB2YWx1ZXM6IEFycmF5PHN0cmluZz4sIHVwZGF0ZVR5cGU6IENvbnRyYWN0LkZpbHRlclVwZGF0ZVR5cGUsIG9wdGlvbnM6IENvbnRyYWN0LkZpbHRlck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8RmlsdGVyU2VydmljZT4oU2VydmljZU5hbWVzLkZpbHRlcik7XHJcbiAgICAgIHJldHVybiBzZXJ2aWNlLmFwcGx5RmlsdGVyQXN5bmModGhpcy52aXN1YWxJZCwgZmllbGROYW1lLCB2YWx1ZXMsIHVwZGF0ZVR5cGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICBwdWJsaWMgYXBwbHlSYW5nZUZpbHRlckFzeW5jKGZpZWxkTmFtZTogc3RyaW5nLCBmaWx0ZXJPcHRpb25zOiBDb250cmFjdC5SYW5nZUZpbHRlck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgY29uc3Qgc2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPEZpbHRlclNlcnZpY2U+KFNlcnZpY2VOYW1lcy5GaWx0ZXIpO1xyXG4gICAgcmV0dXJuIHNlcnZpY2UuYXBwbHlSYW5nZUZpbHRlckFzeW5jKHRoaXMudmlzdWFsSWQsIGZpZWxkTmFtZSwgZmlsdGVyT3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXJGaWx0ZXJBc3luYyhmaWVsZE5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8RmlsdGVyU2VydmljZT4oU2VydmljZU5hbWVzLkZpbHRlcik7XHJcbiAgICByZXR1cm4gc2VydmljZS5jbGVhckZpbHRlckFzeW5jKHRoaXMudmlzdWFsSWQsIGZpZWxkTmFtZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGF0YVNvdXJjZXNBc3luYygpOiBQcm9taXNlPEFycmF5PENvbnRyYWN0LkRhdGFTb3VyY2U+PiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8RGF0YVNvdXJjZVNlcnZpY2U+KFNlcnZpY2VOYW1lcy5EYXRhU291cmNlU2VydmljZSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0RGF0YVNvdXJjZXNBc3luYyh0aGlzLnZpc3VhbElkKS50aGVuPEFycmF5PENvbnRyYWN0LkRhdGFTb3VyY2U+PihyZXN1bHQgPT4ge1xyXG4gICAgICBjb25zdCBkYXRhU2NoZW1hOiBEYXRhU2NoZW1hID0gcmVzdWx0IGFzIERhdGFTY2hlbWE7XHJcbiAgICAgIGNvbnN0IHdvcmtzaGVldERhdGFTb3VyY2VJbmZvOiBXb3Jrc2hlZXREYXRhU291cmNlSW5mbyA9IGRhdGFTY2hlbWEud29ya3NoZWV0RGF0YVNjaGVtYU1hcFt0aGlzLm5hbWVdO1xyXG5cclxuICAgICAgbGV0IGRhdGFTb3VyY2VzOiBBcnJheTxDb250cmFjdC5EYXRhU291cmNlPiA9IFtdO1xyXG5cclxuICAgICAgLy8gRmlyc3QsIGFkZCB0aGUgcHJpbWFyeSBkYXRhc291cmNlLiAgQnkgY29udmVudGlvbiwgaXQgY29tZXMgZmlyc3QgaW4gdGhlIHJldHVybmVkIGFycmF5LlxyXG4gICAgICBsZXQgcHJpbWFyeUlkOiBzdHJpbmcgPSB3b3Jrc2hlZXREYXRhU291cmNlSW5mby5wcmltYXJ5RGF0YVNvdXJjZTtcclxuICAgICAgZGF0YVNvdXJjZXMucHVzaCh0aGlzLmNyZWF0ZURhdGFTb3VyY2VGcm9tSW5mbyhkYXRhU2NoZW1hLmRhdGFTb3VyY2VzW3ByaW1hcnlJZF0pKTtcclxuXHJcbiAgICAgIC8vIFRoZW4sIGxvb3AgdGhyb3VnaCBhbnkgc2Vjb25kYXJ5IGRhdGEgc291cmNlcyBhbmQgYWRkIHRoZW0uXHJcbiAgICAgIGZvciAobGV0IHNlY29uZGFyeUlkIG9mIHdvcmtzaGVldERhdGFTb3VyY2VJbmZvLnJlZmVyZW5jZWREYXRhU291cmNlTGlzdCkge1xyXG4gICAgICAgIGlmIChzZWNvbmRhcnlJZCAhPT0gcHJpbWFyeUlkKSB7XHJcbiAgICAgICAgICBkYXRhU291cmNlcy5wdXNoKHRoaXMuY3JlYXRlRGF0YVNvdXJjZUZyb21JbmZvKGRhdGFTY2hlbWEuZGF0YVNvdXJjZXNbc2Vjb25kYXJ5SWRdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZGF0YVNvdXJjZXM7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRGaWx0ZXJzQXN5bmMoKTogUHJvbWlzZTxBcnJheTxDb250cmFjdC5GaWx0ZXI+PiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8RmlsdGVyU2VydmljZT4oU2VydmljZU5hbWVzLkZpbHRlcik7XHJcbiAgICByZXR1cm4gc2VydmljZS5nZXRGaWx0ZXJzQXN5bmModGhpcy52aXN1YWxJZCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0U2VsZWN0ZWRNYXJrc0FzeW5jKCk6IFByb21pc2U8Q29udHJhY3QuTWFya3NDb2xsZWN0aW9uPiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8R2V0RGF0YVNlcnZpY2U+KFNlcnZpY2VOYW1lcy5HZXREYXRhKTtcclxuICAgIHJldHVybiBzZXJ2aWNlLmdldFNlbGVjdGVkTWFya3NBc3luYyh0aGlzLnZpc3VhbElkKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRIaWdobGlnaHRlZE1hcmtzQXN5bmMoKTogUHJvbWlzZTxDb250cmFjdC5NYXJrc0NvbGxlY3Rpb24+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxHZXREYXRhU2VydmljZT4oU2VydmljZU5hbWVzLkdldERhdGEpO1xyXG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0SGlnaGxpZ2h0ZWRNYXJrc0FzeW5jKHRoaXMudmlzdWFsSWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN1bW1hcnlEYXRhQXN5bmMob3B0aW9uczogQ29udHJhY3QuR2V0U3VtbWFyeURhdGFPcHRpb25zKTogUHJvbWlzZTxDb250cmFjdC5EYXRhVGFibGU+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxHZXREYXRhU2VydmljZT4oU2VydmljZU5hbWVzLkdldERhdGEpO1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhcclxuICAgICAgdGhpcy52aXN1YWxJZCwgR2V0RGF0YVR5cGUuU3VtbWFyeSwgISFvcHRpb25zLmlnbm9yZUFsaWFzZXMsICEhb3B0aW9ucy5pZ25vcmVTZWxlY3Rpb24sIHRydWUsIDApO1xyXG4gICAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhvcHRpb25zOiBDb250cmFjdC5HZXRVbmRlcmx5aW5nRGF0YU9wdGlvbnMpOiBQcm9taXNlPENvbnRyYWN0LkRhdGFUYWJsZT4ge1xyXG4gICAgY29uc3Qgc2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPEdldERhdGFTZXJ2aWNlPihTZXJ2aWNlTmFtZXMuR2V0RGF0YSk7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHJldHVybiBzZXJ2aWNlLmdldFVuZGVybHlpbmdEYXRhQXN5bmMoXHJcbiAgICAgIHRoaXMudmlzdWFsSWQsXHJcbiAgICAgIEdldERhdGFUeXBlLlVuZGVybHlpbmcsXHJcbiAgICAgICEhb3B0aW9ucy5pZ25vcmVBbGlhc2VzLFxyXG4gICAgICAhIW9wdGlvbnMuaWdub3JlU2VsZWN0aW9uLFxyXG4gICAgICAhIW9wdGlvbnMuaW5jbHVkZUFsbENvbHVtbnMsXHJcbiAgICAgIG9wdGlvbnMubWF4Um93cyB8fCAwKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhclNlbGVjdGVkTWFya3NBc3luYygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxTZWxlY3Rpb25TZXJ2aWNlPihTZXJ2aWNlTmFtZXMuU2VsZWN0aW9uKTtcclxuICAgIHJldHVybiBzZXJ2aWNlLmNsZWFyU2VsZWN0ZWRNYXJrc0FzeW5jKHRoaXMudmlzdWFsSWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNlbGVjdE1hcmtzQnlWYWx1ZUFzeW5jKHNlbGVjdGlvbnM6IEFycmF5PENvbnRyYWN0LlNlbGVjdGlvbkNyaXRlcmlhPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uVXBkYXRlVHlwZTogQ29udHJhY3QuU2VsZWN0aW9uVXBkYXRlVHlwZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3Qgc2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPFNlbGVjdGlvblNlcnZpY2U+KFNlcnZpY2VOYW1lcy5TZWxlY3Rpb24pO1xyXG4gICAgcmV0dXJuIHNlcnZpY2Uuc2VsZWN0TWFya3NCeVZhbHVlQXN5bmModGhpcy52aXN1YWxJZCwgc2VsZWN0aW9ucywgc2VsZWN0aW9uVXBkYXRlVHlwZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2VsZWN0TWFya3NCeUlkQXN5bmMoc2VsZWN0aW9uczogQXJyYXk8Q29udHJhY3QuTWFya0luZm8+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25VcGRhdGVUeXBlOiBDb250cmFjdC5TZWxlY3Rpb25VcGRhdGVUeXBlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8U2VsZWN0aW9uU2VydmljZT4oU2VydmljZU5hbWVzLlNlbGVjdGlvbik7XHJcbiAgICByZXR1cm4gc2VydmljZS5zZWxlY3RNYXJrc0J5SWRBc3luYyh0aGlzLnZpc3VhbElkLCBzZWxlY3Rpb25zLCBzZWxlY3Rpb25VcGRhdGVUeXBlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRGF0YVNvdXJjZUZyb21JbmZvKGRhdGFTb3VyY2VJbmZvOiBEYXRhU291cmNlSW5mbyk6IENvbnRyYWN0LkRhdGFTb3VyY2Uge1xyXG4gICAgY29uc3QgZGF0YVNvdXJjZUltcGwgPSBuZXcgRGF0YVNvdXJjZUltcGwoZGF0YVNvdXJjZUluZm8pO1xyXG4gICAgY29uc3QgZGF0YVNvdXJjZSA9IG5ldyBEYXRhU291cmNlKGRhdGFTb3VyY2VJbXBsKTtcclxuICAgIGRhdGFTb3VyY2VJbXBsLmluaXRpYWxpemVXaXRoUHVibGljSW50ZXJmYWNlcyhkYXRhU291cmNlKTtcclxuICAgIHJldHVybiBkYXRhU291cmNlO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0ltcGwvV29ya3NoZWV0SW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBEYXRhU291cmNlSW1wbCB9IGZyb20gJy4vSW1wbC9EYXRhU291cmNlSW1wbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YVNvdXJjZSBpbXBsZW1lbnRzIENvbnRyYWN0LkRhdGFTb3VyY2Uge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kYXRhU291cmNlSW1wbDogRGF0YVNvdXJjZUltcGwpIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlSW1wbC5uYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VJbXBsLmlkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmaWVsZHMoKTogQXJyYXk8Q29udHJhY3QuRmllbGQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlSW1wbC5maWVsZHM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGV4dHJhY3RVcGRhdGVUaW1lKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZUltcGwuZXh0cmFjdFVwZGF0ZVRpbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzRXh0cmFjdCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlSW1wbC5pc0V4dHJhY3Q7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVmcmVzaEFzeW5jKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VJbXBsLnJlZnJlc2hBc3luYygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFjdGl2ZVRhYmxlc0FzeW5jKCk6IFByb21pc2U8QXJyYXk8Q29udHJhY3QuVGFibGVTdW1tYXJ5Pj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VJbXBsLmdldEFjdGl2ZVRhYmxlc0FzeW5jKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29ubmVjdGlvblN1bW1hcmllc0FzeW5jKCk6IFByb21pc2U8QXJyYXk8Q29udHJhY3QuQ29ubmVjdGlvblN1bW1hcnk+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZUltcGwuZ2V0Q29ubmVjdGlvblN1bW1hcmllc0FzeW5jKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhvcHRpb25zPzogQ29udHJhY3QuRGF0YVNvdXJjZVVuZGVybHlpbmdEYXRhT3B0aW9ucyk6XHJcbiAgICBQcm9taXNlPENvbnRyYWN0LkRhdGFUYWJsZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VJbXBsLmdldFVuZGVybHlpbmdEYXRhQXN5bmMob3B0aW9ucyk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRGF0YVNvdXJjZS50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCAqIGFzIEludGVybmFsQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IEZpZWxkSW1wbCB9IGZyb20gJy4vRmllbGRJbXBsJztcclxuXHJcbmltcG9ydCB7IENvbm5lY3Rpb25TdW1tYXJ5IH0gZnJvbSAnLi4vQ29ubmVjdGlvblN1bW1hcnknO1xyXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL0ZpZWxkJztcclxuaW1wb3J0IHsgVGFibGVTdW1tYXJ5IH0gZnJvbSAnLi4vVGFibGVTdW1tYXJ5JztcclxuXHJcbmltcG9ydCB7IERhdGFTb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vU2VydmljZXMvRGF0YVNvdXJjZVNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHZXREYXRhU2VydmljZSB9IGZyb20gJy4uL1NlcnZpY2VzL0dldERhdGFTZXJ2aWNlJztcclxuaW1wb3J0IHsgQXBpU2VydmljZVJlZ2lzdHJ5LCBTZXJ2aWNlTmFtZXMgfSBmcm9tICcuLi9TZXJ2aWNlcy9TZXJ2aWNlUmVnaXN0cnknO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFTb3VyY2VJbXBsIHtcclxuICBwcml2YXRlIF9maWVsZHM6IEFycmF5PEZpZWxkPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2RhdGFTb3VyY2VJbmZvOiBJbnRlcm5hbENvbnRyYWN0LkRhdGFTb3VyY2UpIHtcclxuICAgIHRoaXMuX2ZpZWxkcyA9IF9kYXRhU291cmNlSW5mby5maWVsZHMubWFwKGZpZWxkTW9kZWwgPT4ge1xyXG4gICAgICBjb25zdCBmaWVsZEltcGwgPSBuZXcgRmllbGRJbXBsKGZpZWxkTW9kZWwsIHRoaXMpO1xyXG4gICAgICByZXR1cm4gbmV3IEZpZWxkKGZpZWxkSW1wbCk7XHJcbiAgICB9KTtcclxuICAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlSW5mby5uYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VJbmZvLmlkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBleHRyYWN0VXBkYXRlVGltZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VJbmZvLmV4dHJhY3RVcGRhdGVUaW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmaWVsZHMoKTogQXJyYXk8Q29udHJhY3QuRmllbGQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZHM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzRXh0cmFjdCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlSW5mby5pc0V4dHJhY3Q7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVmcmVzaEFzeW5jKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZGF0YVNvdXJjZVNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxEYXRhU291cmNlU2VydmljZT4oXHJcbiAgICAgIFNlcnZpY2VOYW1lcy5EYXRhU291cmNlU2VydmljZSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGFTb3VyY2VTZXJ2aWNlLnJlZnJlc2hBc3luYyh0aGlzLl9kYXRhU291cmNlSW5mby5pZCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29ubmVjdGlvblN1bW1hcmllc0FzeW5jKCk6IFByb21pc2U8Q29udHJhY3QuQ29ubmVjdGlvblN1bW1hcnlbXT4ge1xyXG4gICAgY29uc3QgZGF0YVNvdXJjZVNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxEYXRhU291cmNlU2VydmljZT4oXHJcbiAgICAgIFNlcnZpY2VOYW1lcy5EYXRhU291cmNlU2VydmljZSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGFTb3VyY2VTZXJ2aWNlLmdldENvbm5lY3Rpb25TdW1tYXJpZXNBc3luYyh0aGlzLl9kYXRhU291cmNlSW5mby5pZCkudGhlbjxDb250cmFjdC5Db25uZWN0aW9uU3VtbWFyeVtdPihzdW1tYXJpZXMgPT4ge1xyXG4gICAgICByZXR1cm4gc3VtbWFyaWVzLm1hcChzdW1tYXJ5ID0+IG5ldyBDb25uZWN0aW9uU3VtbWFyeShzdW1tYXJ5KSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRBY3RpdmVUYWJsZXNBc3luYygpOiBQcm9taXNlPEFycmF5PENvbnRyYWN0LlRhYmxlU3VtbWFyeT4+IHtcclxuICAgIGNvbnN0IGRhdGFTb3VyY2VTZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8RGF0YVNvdXJjZVNlcnZpY2U+KFxyXG4gICAgICBTZXJ2aWNlTmFtZXMuRGF0YVNvdXJjZVNlcnZpY2UpO1xyXG5cclxuICAgIHJldHVybiBkYXRhU291cmNlU2VydmljZS5nZXRBY3RpdmVUYWJsZXNBc3luYyh0aGlzLl9kYXRhU291cmNlSW5mby5pZCkudGhlbjxBcnJheTxDb250cmFjdC5UYWJsZVN1bW1hcnk+Pih0YWJsZUluZm9zID0+IHtcclxuICAgICAgcmV0dXJuIHRhYmxlSW5mb3MubWFwKHRhYmxlSW5mbyA9PiBuZXcgVGFibGVTdW1tYXJ5KHRhYmxlSW5mbykpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhvcHRpb25zPzogQ29udHJhY3QuRGF0YVNvdXJjZVVuZGVybHlpbmdEYXRhT3B0aW9ucyk6XHJcbiAgICBQcm9taXNlPENvbnRyYWN0LkRhdGFUYWJsZT4ge1xyXG4gICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICAgIGlnbm9yZUFsaWFzZXM6IGZhbHNlLFxyXG4gICAgICAgICAgbWF4Um93czogMTAwMDAsXHJcbiAgICAgICAgICBjb2x1bW5zVG9JbmNsdWRlOiBbXSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgY29uc3QgZ2V0RGF0YVNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxHZXREYXRhU2VydmljZT4oU2VydmljZU5hbWVzLkdldERhdGEpO1xyXG4gICAgICByZXR1cm4gZ2V0RGF0YVNlcnZpY2UuZ2V0RGF0YVNvdXJjZURhdGFBc3luYyhcclxuICAgICAgICB0aGlzLmlkLFxyXG4gICAgICAgICEhb3B0aW9ucy5pZ25vcmVBbGlhc2VzLFxyXG4gICAgICAgIG9wdGlvbnMubWF4Um93cyB8fCBkZWZhdWx0T3B0aW9ucy5tYXhSb3dzLFxyXG4gICAgICAgIG9wdGlvbnMuY29sdW1uc1RvSW5jbHVkZSB8fCBkZWZhdWx0T3B0aW9ucy5jb2x1bW5zVG9JbmNsdWRlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplV2l0aFB1YmxpY0ludGVyZmFjZXMoZGF0YVNvdXJjZTogQ29udHJhY3QuRGF0YVNvdXJjZSk6IHZvaWQge1xyXG4gICAgdGhpcy5fZmllbGRzID0gdGhpcy5fZGF0YVNvdXJjZUluZm8uZmllbGRzLm1hcChmaWVsZE1vZGVsID0+IHtcclxuICAgICAgY29uc3QgZmllbGRJbXBsID0gbmV3IEZpZWxkSW1wbChmaWVsZE1vZGVsLCBkYXRhU291cmNlKTtcclxuICAgICAgcmV0dXJuIG5ldyBGaWVsZChmaWVsZEltcGwpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9EYXRhU291cmNlSW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCAqIGFzIEludGVybmFsQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncyB9IGZyb20gJy4uL0VudW1NYXBwaW5ncy9JbnRlcm5hbFRvRXh0ZXJuYWxFbnVtTWFwcGluZ3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpZWxkSW1wbCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2ZpZWxkSW5mbzogSW50ZXJuYWxDb250cmFjdC5GaWVsZCxcclxuICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBfcGFyZW50RGF0YVNvdXJjZTogQ29udHJhY3QuRGF0YVNvdXJjZSkgeyAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEluZm8ubmFtZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEluZm8uaWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbmZvLmRlc2NyaXB0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBhZ2dyZWdhdGlvbigpOiBDb250cmFjdC5GaWVsZEFnZ3JlZ2F0aW9uVHlwZSB7XHJcbiAgICByZXR1cm4gSW50ZXJuYWxUb0V4dGVybmFsRW51bU1hcHBpbmdzLmZpZWxkQWdncmVnYXRpb25UeXBlLmNvbnZlcnQodGhpcy5fZmllbGRJbmZvLmFnZ3JlZ2F0aW9uKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZGF0YVNvdXJjZSgpOiBDb250cmFjdC5EYXRhU291cmNlIHtcclxuICAgIHJldHVybiB0aGlzLl9wYXJlbnREYXRhU291cmNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCByb2xlKCk6IENvbnRyYWN0LkZpZWxkUm9sZVR5cGUge1xyXG4gICAgcmV0dXJuIEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncy5maWVsZFJvbGVUeXBlLmNvbnZlcnQodGhpcy5fZmllbGRJbmZvLnJvbGUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc0hpZGRlbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEluZm8uaXNIaWRkZW47XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzR2VuZXJhdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkSW5mby5pc0dlbmVyYXRlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNDYWxjdWxhdGVkRmllbGQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbmZvLmlzQ2FsY3VsYXRlZEZpZWxkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc0NvbWJpbmVkRmllbGQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbmZvLmlzQ29tYmluZWRGaWVsZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDYWxjdWxhdGVkRmllbGRBc3luYygpOiBQcm9taXNlPENvbnRyYWN0LkNhbGN1bGF0ZWRGaWVsZCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaWVsZCBnZXRDYWxjdWxhdGVkRmllbGRBc3luYyBtZXRob2Qgbm90IHlldCBpbXBsZW1lbnRlZC4nKTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9JbXBsL0ZpZWxkSW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnkgfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudGF0aW9uIG9mIGEgY29ubmVjdGlvbiBzdW1tYXJ5LlxyXG4gKiBUaGlzIGRvZXMgbm90IGZvbGxvdyB0aGUgSW1wbCBwYXR0ZXJuIGFzIGl0IGlzIGp1c3QgYSBwcm9wZXJ0eSBiYWcuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvblN1bW1hcnkgaW1wbGVtZW50cyBDb250cmFjdC5Db25uZWN0aW9uU3VtbWFyeSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2Nvbm5lY3Rpb25JbmZvOiBDb25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJ5KSB7IH1cclxuXHJcbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbkluZm8ubmFtZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uSW5mby5pZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2VydmVyVVJJKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbkluZm8uc2VydmVyVVJJO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB0eXBlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbkluZm8udHlwZTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Db25uZWN0aW9uU3VtbWFyeS50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5pbXBvcnQgeyBGaWVsZEltcGwgfSBmcm9tICcuL0ltcGwvRmllbGRJbXBsJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWVsZCBpbXBsZW1lbnRzIENvbnRyYWN0LkZpZWxkIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfZmllbGRJbXBsOiBGaWVsZEltcGwpIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEltcGwubmFtZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEltcGwuaWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbXBsLmRlc2NyaXB0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBhZ2dyZWdhdGlvbigpOiBDb250cmFjdC5GaWVsZEFnZ3JlZ2F0aW9uVHlwZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbXBsLmFnZ3JlZ2F0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkYXRhU291cmNlKCk6IENvbnRyYWN0LkRhdGFTb3VyY2Uge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkSW1wbC5kYXRhU291cmNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCByb2xlKCk6IENvbnRyYWN0LkZpZWxkUm9sZVR5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkSW1wbC5yb2xlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc0hpZGRlbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEltcGwuaXNIaWRkZW47XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzR2VuZXJhdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkSW1wbC5pc0dlbmVyYXRlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNDYWxjdWxhdGVkRmllbGQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbXBsLmlzQ2FsY3VsYXRlZEZpZWxkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjb2x1bW5UeXBlKCk6IENvbnRyYWN0LkNvbHVtblR5cGUge1xyXG4gICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5hcGlOb3RJbXBsZW1lbnRlZChbJ0ZpZWxkLmNvbHVtblR5cGUnXSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzQ29tYmluZWRGaWVsZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZEltcGwuaXNDb21iaW5lZEZpZWxkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENhbGN1bGF0ZWRGaWVsZEFzeW5jKCk6IFByb21pc2U8Q29udHJhY3QuQ2FsY3VsYXRlZEZpZWxkIHwgdW5kZWZpbmVkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmllbGRJbXBsLmdldENhbGN1bGF0ZWRGaWVsZEFzeW5jKCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRmllbGQudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZUluZm8gfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudGF0aW9uIG9mIGEgdGFibGUgc3VtbWFyeS5cclxuICogVGhpcyBkb2VzIG5vdCBmb2xsb3cgdGhlIEltcGwgcGF0dGVybiBhcyBpdCBpcyBqdXN0IGEgcHJvcGVydHkgYmFnLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRhYmxlU3VtbWFyeSBpbXBsZW1lbnRzIENvbnRyYWN0LlRhYmxlU3VtbWFyeSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX3RhYmxlSW5mbzogVGFibGVJbmZvKSB7IH1cclxuXHJcbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdGFibGVJbmZvLm5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdGFibGVJbmZvLmlkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjb25uZWN0aW9uSWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl90YWJsZUluZm8uY29ubmVjdGlvbklkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjdXN0b21TUUwoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl90YWJsZUluZm8uY3VzdG9tU1FMO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1RhYmxlU3VtbWFyeS50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBTaW5nbGVFdmVudE1hbmFnZXIgfSBmcm9tICcuLi9TaW5nbGVFdmVudE1hbmFnZXInO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgaW1wbGVtZW50cyB0aGUgU2luZ2xlRXZlbnRNYW5hZ2VyIGludGVyZmFjZSBmb3IgYSBzaW5nbGUgdHlwZSBvZiBUYWJsZWF1IGV2ZW50XHJcbiAqXHJcbiAqIEB0ZW1wbGF0ZSBURXZlbnRUeXBlIFRoZSBUYWJsZWF1IGV2ZW50IHR5cGUgdGhpcyBjbGFzcyBzcGVjaWFsaXplc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNpbmdsZUV2ZW50TWFuYWdlckltcGw8VEV2ZW50VHlwZSBleHRlbmRzIENvbnRyYWN0LlRhYmxlYXVFdmVudD4gaW1wbGVtZW50cyBTaW5nbGVFdmVudE1hbmFnZXIge1xyXG4gIHByaXZhdGUgX2V2ZW50VHlwZTogQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZTtcclxuICBwcml2YXRlIF9oYW5kbGVyczogQXJyYXk8KGV2ZW50T2JqOiBURXZlbnRUeXBlKSA9PiB2b2lkPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGV2ZW50VHlwZTogQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZSkge1xyXG4gICAgdGhpcy5fZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xyXG4gICAgdGhpcy5faGFuZGxlcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZXZlbnRUeXBlKCk6IENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50VHlwZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKGhhbmRsZXI6IChldmVudE9iajogVEV2ZW50VHlwZSkgPT4gdm9pZCk6IENvbnRyYWN0LlRhYmxlYXVFdmVudFVucmVnaXN0ZXJGbiB7XHJcbiAgICB0aGlzLl9oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuICgpID0+IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyKGhhbmRsZXI6IChldmVudE9iajogVEV2ZW50VHlwZSkgPT4gdm9pZCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgYmVmb3JlQ291bnQgPSB0aGlzLl9oYW5kbGVycy5sZW5ndGg7XHJcbiAgICB0aGlzLl9oYW5kbGVycyA9IHRoaXMuX2hhbmRsZXJzLmZpbHRlcihoID0+IGggIT09IGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuIGJlZm9yZUNvdW50ID4gdGhpcy5faGFuZGxlcnMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRyaWdnZXJFdmVudChldmVudEdlbmVyYXRvcjogKCkgPT4gVEV2ZW50VHlwZSk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX2hhbmRsZXJzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnRNb2RlbCA9IGV2ZW50R2VuZXJhdG9yKCk7XHJcbiAgICAgICAgaGFuZGxlcihldmVudE1vZGVsKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFNpbmNlIHRoaXMgaGFuZGxlciBjb3VsZCBiZSBvdXRzaWRlIG91ciBjb250cm9sLCBqdXN0IGNhdGNoIGFueXRoaW5nIGl0IHRocm93cyBhbmQgY29udGludWUgb25cclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0ltcGwvU2luZ2xlRXZlbnRNYW5hZ2VySW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgVGFibGVhdVdvcmtzaGVldEV2ZW50IH0gZnJvbSAnLi9UYWJsZWF1V29ya3NoZWV0RXZlbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlckNoYW5nZWRFdmVudCBleHRlbmRzIFRhYmxlYXVXb3Jrc2hlZXRFdmVudCBpbXBsZW1lbnRzIENvbnRyYWN0LkZpbHRlckNoYW5nZWRFdmVudCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHdvcmtzaGVldDogQ29udHJhY3QuV29ya3NoZWV0LCBwcml2YXRlIF9maWVsZE5hbWU6IHN0cmluZykge1xyXG4gICAgc3VwZXIoQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZS5GaWx0ZXJDaGFuZ2VkLCB3b3Jrc2hlZXQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmaWVsZE5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZE5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RmlsdGVyQXN5bmMoKTogUHJvbWlzZTxDb250cmFjdC5GaWx0ZXI+IHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXQuZ2V0RmlsdGVyc0FzeW5jKCkudGhlbjxDb250cmFjdC5GaWx0ZXI+KGZpbHRlcnMgPT4ge1xyXG4gICAgICAvLyBUT0RPOiBGaWx0ZXJpbmcgb2YgdGhlIGZpbHRlcnMgc2hvdWxkIGV2ZW50dWFsbHkgYmUgZG9uZSBwbGF0Zm9ybSBzaWRlLlxyXG4gICAgICBjb25zdCBldmVudGVkRmlsdGVyID0gZmlsdGVycy5maW5kKChmaWx0ZXIpID0+IChmaWx0ZXIuZmllbGROYW1lID09PSB0aGlzLl9maWVsZE5hbWUpKTtcclxuXHJcbiAgICAgIGlmICghZXZlbnRlZEZpbHRlcikge1xyXG4gICAgICAgIC8vIFdlIHNob3VsZG4ndCBoaXQgdGhpcyB1bmxlc3MgdGhlIGZpbHRlciB3YXMgcmVtb3ZlZCBmcm9tIHRoZSB3b3Jrc2hlZXRcclxuICAgICAgICAvLyBhZnRlciB0aGUgZXZlbnQgd2FzIHJhaXNlZC5cclxuICAgICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmludGVybmFsRXJyb3IoWydGaWx0ZXIgbm8gbG9uZ2VyIGZvdW5kIGluIHdvcmtzaGVldC4nXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBldmVudGVkRmlsdGVyO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRXZlbnRzL0ZpbHRlckNoYW5nZWRFdmVudC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBUYWJsZWF1U2hlZXRFdmVudCB9IGZyb20gJy4vVGFibGVhdVNoZWV0RXZlbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlYXVXb3Jrc2hlZXRFdmVudCBleHRlbmRzIFRhYmxlYXVTaGVldEV2ZW50IGltcGxlbWVudHMgQ29udHJhY3QuVGFibGVhdVdvcmtzaGVldEV2ZW50IHtcclxuICBwdWJsaWMgZ2V0IHdvcmtzaGVldCgpOiBDb250cmFjdC5Xb3Jrc2hlZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0eXBlOiBDb250cmFjdC5UYWJsZWF1RXZlbnRUeXBlLCBwcm90ZWN0ZWQgX3dvcmtzaGVldDogQ29udHJhY3QuV29ya3NoZWV0KSB7XHJcbiAgICBzdXBlcih0eXBlLCBfd29ya3NoZWV0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9FdmVudHMvVGFibGVhdVdvcmtzaGVldEV2ZW50LnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IFRhYmxlYXVFdmVudCB9IGZyb20gJy4vVGFibGVhdUV2ZW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBUYWJsZWF1U2hlZXRFdmVudCBleHRlbmRzIFRhYmxlYXVFdmVudCBpbXBsZW1lbnRzIENvbnRyYWN0LlRhYmxlYXVTaGVldEV2ZW50IHtcclxuICBwcml2YXRlIF9zaGVldDogQ29udHJhY3QuU2hlZXQ7XHJcblxyXG4gIHB1YmxpYyBnZXQgc2hlZXQoKTogQ29udHJhY3QuU2hlZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NoZWV0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHR5cGU6IENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUsIHNoZWV0OiBDb250cmFjdC5TaGVldCkge1xyXG4gICAgc3VwZXIodHlwZSk7XHJcblxyXG4gICAgdGhpcy5fc2hlZXQgPSBzaGVldDtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9FdmVudHMvVGFibGVhdVNoZWV0RXZlbnQudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlYXVFdmVudCBpbXBsZW1lbnRzIENvbnRyYWN0LlRhYmxlYXVFdmVudCB7XHJcbiAgcHJpdmF0ZSBfdHlwZTogQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHR5cGU6IENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUpIHtcclxuICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB0eXBlKCk6IENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRXZlbnRzL1RhYmxlYXVFdmVudC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBUYWJsZWF1V29ya3NoZWV0RXZlbnQgfSBmcm9tICcuL1RhYmxlYXVXb3Jrc2hlZXRFdmVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFya3NTZWxlY3RlZEV2ZW50IGV4dGVuZHMgVGFibGVhdVdvcmtzaGVldEV2ZW50IGltcGxlbWVudHMgQ29udHJhY3QuTWFya3NTZWxlY3RlZEV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iod29ya3NoZWV0OiBDb250cmFjdC5Xb3Jrc2hlZXQpIHtcclxuICAgIHN1cGVyKENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUuTWFya1NlbGVjdGlvbkNoYW5nZWQsIHdvcmtzaGVldCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TWFya3NBc3luYygpOiBQcm9taXNlPENvbnRyYWN0Lk1hcmtzQ29sbGVjdGlvbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMud29ya3NoZWV0LmdldFNlbGVjdGVkTWFya3NBc3luYygpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL0V2ZW50cy9NYXJrc1NlbGVjdGVkRXZlbnQudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBWaXN1YWxJZCB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi9TZXJ2aWNlUmVnaXN0cnknO1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgd2hpY2ggdHlwZSBvZiBnZXREYXRhIGNhbGwgdG8gbWFrZS5cclxuICovXHJcbmV4cG9ydCBlbnVtIEdldERhdGFUeXBlIHtcclxuICBTdW1tYXJ5ID0gJ3N1bW1hcnknLFxyXG4gIFVuZGVybHlpbmcgPSAndW5kZXJseWluZydcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgZm9yIGltcGxlbWVudGluZyB0aGUgbG9naWMgZm9yIHZhcmlvdXMgZ2V0RGF0YSBjYWxsc1xyXG4gKlxyXG4gKiBAaW50ZXJmYWNlIEdldERhdGFTZXJ2aWNlXHJcbiAqIEBleHRlbmRzIHtBcGlTZXJ2aWNlfVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBHZXREYXRhU2VydmljZSBleHRlbmRzIEFwaVNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIHVuZGVybHlpbmcgZGF0YSBmb3IgYSBwYXJ0aWN1bGFyIHZpc3VhbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtWaXN1YWxJZH0gdmlzdWFsSWQgIFRoZSB2aXN1YWwgdG8gZ2V0IGRhdGEgZm9yXHJcbiAgICogQHBhcmFtIHtHZXREYXRhVHlwZX0gZ2V0VHlwZSAgVGhlIHR5cGUgb2YgZ2V0RGF0YSBjYWxsIHRvIG1ha2VcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlnbm9yZUFsaWFzZXMgIFdoZXRoZXIgb3Igbm90IGFsaWFzZXMgc2hvdWxkIGJlIGlnbm9yZWRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlnbm9yZVNlbGVjdGlvbiAgV2hldGhlciBvciBub3Qgc2VsZWN0aW9uIHNob3VsZCBiZSBpZ25vcmVkXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlQWxsQ29sdW1ucyAgU2hvdWxkIGFsbCBjb2x1bW5zIGJlIGluY2x1ZGVkXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFJvd3MgIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gcmV0dXJuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Q29udHJhY3QuRGF0YVRhYmxlPn0gIERhdGEgdGFibGUgd2l0aCB0aGUgcmVxdWVzdGVkIGRhdGFcclxuICAgKi9cclxuICAgIGdldFVuZGVybHlpbmdEYXRhQXN5bmMoXHJcbiAgICAgIHZpc3VhbElkOiBWaXN1YWxJZCxcclxuICAgICAgZ2V0VHlwZTogR2V0RGF0YVR5cGUsXHJcbiAgICAgIGlnbm9yZUFsaWFzZXM6IGJvb2xlYW4sXHJcbiAgICAgIGlnbm9yZVNlbGVjdGlvbjogYm9vbGVhbixcclxuICAgICAgaW5jbHVkZUFsbENvbHVtbnM6IGJvb2xlYW4sXHJcbiAgICAgIG1heFJvd3M6IG51bWJlcik6IFByb21pc2U8Q29udHJhY3QuRGF0YVRhYmxlPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBtYXJrcyBmb3IgYSBnaXZlbiB2aXN1YWxcclxuICAgICAqXHJcbiAgICAqIEBwYXJhbSB7VmlzdWFsSWR9IHZpc3VhbElkICBUaGUgdmlzdWFsIHRvIGdldCBkYXRhIGZvclxyXG4gICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBY3RpdmVNYXJrcz59ICBDb2xsZWN0aW9uIG9mIGRhdGEgdGFibGVzIHdpdGggdGhlIGFjdGl2ZSBtYXJrc1xyXG4gICAgKi9cclxuICAgIGdldFNlbGVjdGVkTWFya3NBc3luYyh2aXN1YWxJZDogVmlzdWFsSWQpOiBQcm9taXNlPENvbnRyYWN0Lk1hcmtzQ29sbGVjdGlvbj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgbWFya3MgZm9yIGEgZ2l2ZW4gdmlzdWFsXHJcbiAgICAgKlxyXG4gICAgKiBAcGFyYW0ge1Zpc3VhbElkfSB2aXN1YWxJZCAgVGhlIHZpc3VhbCB0byBnZXQgZGF0YSBmb3JcclxuICAgICogQHJldHVybnMge1Byb21pc2U8QWN0aXZlTWFya3M+fSAgQ29sbGVjdGlvbiBvZiBkYXRhIHRhYmxlcyB3aXRoIHRoZSBhY3RpdmUgbWFya3NcclxuICAgICovXHJcbiAgICBnZXRIaWdobGlnaHRlZE1hcmtzQXN5bmModmlzdWFsSWQ6IFZpc3VhbElkKTogUHJvbWlzZTxDb250cmFjdC5NYXJrc0NvbGxlY3Rpb24+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFzb3VyY2VJZCAgVGhlIGlkIG9mIHRoZSBkYXRhc291cmNlIHRvIGdldCBkYXRhIGZvclxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpZ25vcmVBbGlhc2VzICBXaGV0aGVyIGFsaWFzIHZhbHVlcyBzaG91bGQgYmUgaWdub3JlZCBpbiB0aGUgcmV0dXJuZWQgZGF0YVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFJvd3MgVGhlIG1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gcmV0cmlldmVcclxuICAgICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gY29sdW1uc1RvSW5jbHVkZSAgQ29sbGVjdGlvbiBvZiBjb2x1bW4gY2FwdGlvbnMgd2hpY2ggc2hvdWxkIGJlIHJldHVybmVkLiBFbXB0eSBtZWFucyBhbGwgY29sdW1uc1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Q29udHJhY3QuRGF0YVRhYmxlPn0gIERhdGEgdGFibGUgd2l0aCB0aGUgcmVxdWVzdGVkIGRhdGFcclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YVNvdXJjZURhdGFBc3luYyhcclxuICAgICAgZGF0YXNvdXJjZUlkOiBzdHJpbmcsXHJcbiAgICAgIGlnbm9yZUFsaWFzZXM6IGJvb2xlYW4sXHJcbiAgICAgIG1heFJvd3M6IG51bWJlcixcclxuICAgICAgY29sdW1uc1RvSW5jbHVkZTogQXJyYXk8c3RyaW5nPik6IFByb21pc2U8Q29udHJhY3QuRGF0YVRhYmxlPjtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL0dldERhdGFTZXJ2aWNlLnRzXG4gKiovIiwiaW1wb3J0IHsgSW50ZXJuYWxBcGlEaXNwYXRjaGVyIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IERhdGFTb3VyY2VTZXJ2aWNlSW1wbCB9IGZyb20gJy4vaW1wbC9EYXRhU291cmNlU2VydmljZUltcGwnO1xyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlSW1wbCB9IGZyb20gJy4vaW1wbC9GaWx0ZXJTZXJ2aWNlSW1wbCc7XHJcbmltcG9ydCB7IEdldERhdGFTZXJ2aWNlSW1wbCB9IGZyb20gJy4vaW1wbC9HZXREYXRhU2VydmljZUltcGwnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlSW1wbCB9IGZyb20gJy4vaW1wbC9Ob3RpZmljYXRpb25TZXJ2aWNlSW1wbCc7XHJcbmltcG9ydCB7IFBhcmFtZXRlcnNTZXJ2aWNlSW1wbCB9IGZyb20gJy4vaW1wbC9QYXJhbWV0ZXJzU2VydmljZUltcGwnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb25TZXJ2aWNlSW1wbCB9IGZyb20gJy4vaW1wbC9TZWxlY3Rpb25TZXJ2aWNlSW1wbCc7XHJcbmltcG9ydCB7IEFwaVNlcnZpY2VSZWdpc3RyeSB9IGZyb20gJy4vU2VydmljZVJlZ2lzdHJ5JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckFsbFNoYXJlZFNlcnZpY2VzKGRpc3BhdGNoZXI6IEludGVybmFsQXBpRGlzcGF0Y2hlcik6IHZvaWQge1xyXG4gIEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5yZWdpc3RlclNlcnZpY2UobmV3IERhdGFTb3VyY2VTZXJ2aWNlSW1wbChkaXNwYXRjaGVyKSk7XHJcbiAgQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLnJlZ2lzdGVyU2VydmljZShuZXcgR2V0RGF0YVNlcnZpY2VJbXBsKGRpc3BhdGNoZXIpKTtcclxuICBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UucmVnaXN0ZXJTZXJ2aWNlKG5ldyBGaWx0ZXJTZXJ2aWNlSW1wbChkaXNwYXRjaGVyKSk7XHJcbiAgQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLnJlZ2lzdGVyU2VydmljZShuZXcgTm90aWZpY2F0aW9uU2VydmljZUltcGwoZGlzcGF0Y2hlcikpO1xyXG4gIEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5yZWdpc3RlclNlcnZpY2UobmV3IFBhcmFtZXRlcnNTZXJ2aWNlSW1wbChkaXNwYXRjaGVyKSk7XHJcbiAgQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLnJlZ2lzdGVyU2VydmljZShuZXcgU2VsZWN0aW9uU2VydmljZUltcGwoZGlzcGF0Y2hlcikpO1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvU2VydmljZXMvUmVnaXN0ZXJBbGxTaGFyZWRTZXJ2aWNlcy50c1xuICoqLyIsImltcG9ydCB7IEVycm9yQ29kZXMgfSBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnksXHJcbiAgRGF0YVNjaGVtYSxcclxuICBFeGVjdXRlUGFyYW1ldGVycyxcclxuICBJbnRlcm5hbEFwaURpc3BhdGNoZXIsXHJcbiAgSm9pbkRlc2NyaXB0aW9uLFxyXG4gIFBhcmFtZXRlcklkLFxyXG4gIFRhYmxlSW5mbyxcclxuICBWZXJiSWQsXHJcbiAgVmlzdWFsSWRcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQgeyBEYXRhU291cmNlU2VydmljZSB9IGZyb20gJy4uL0RhdGFTb3VyY2VTZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vU2VydmljZVJlZ2lzdHJ5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhU291cmNlU2VydmljZUltcGwgaW1wbGVtZW50cyBEYXRhU291cmNlU2VydmljZSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2Rpc3BhdGNoZXI6IEludGVybmFsQXBpRGlzcGF0Y2hlcikgeyB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2VydmljZU5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBTZXJ2aWNlTmFtZXMuRGF0YVNvdXJjZVNlcnZpY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVmcmVzaEFzeW5jKGRhdGFTb3VyY2VJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHtbUGFyYW1ldGVySWQuRGF0YVNvdXJjZUlkXTogZGF0YVNvdXJjZUlkfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5SZWZyZXNoRGF0YVNvdXJjZSwgcGFyYW1ldGVycykudGhlbjx2b2lkPihyZXNwb25zZSA9PiB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFjdGl2ZVRhYmxlc0FzeW5jKGRhdGFTb3VyY2VJZDogc3RyaW5nKTogUHJvbWlzZTxBcnJheTxUYWJsZUluZm8+PiB7XHJcbiAgICBjb25zdCBqb2luUGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7W1BhcmFtZXRlcklkLkRhdGFTb3VyY2VJZF06IGRhdGFTb3VyY2VJZH07XHJcblxyXG4gICAgLy8gR2V0IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGFibGVzIHVzZWQgYnkgdGhpcyBjb25uZWN0aW9uXHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5HZXRKb2luRGVzY3JpcHRpb24sIGpvaW5QYXJhbWV0ZXJzKS50aGVuPEFycmF5PFRhYmxlSW5mbz4+KGpvaW5SZXNwb25zZSA9PiB7XHJcbiAgICAgIGNvbnN0IGpvaW5EZXNjcmlwdGlvbiA9IGpvaW5SZXNwb25zZS5yZXN1bHQgYXMgSm9pbkRlc2NyaXB0aW9uO1xyXG5cclxuICAgICAgLy8gZ2V0QWN0aXZlVGFibGVzIGlzIHVuc3VwcG9ydGVkIGZvciBjdWJlcyBhbmQgR0EuIFdlIGRvIG5vdCBoYXZlIGEgY29ubmVjdGlvbiB0eXBlIHByb3BlcnR5XHJcbiAgICAgIC8vIGF2YWlsYWJsZSBmcm9tIHRoZSBwbGF0Zm9ybSAoaW50ZW50aW9uYWxseSwgdG8gcmVkdWNlIGNvZGUgY2h1cm4gYXMgbmV3IGNvbm5lY3Rpb25zIGFyZSBhZGRlZCkuXHJcbiAgICAgIC8vIEluc3RlYWQsanVzdCBjaGVjayBpZiBhbnkgdGFibGVzIGFyZSByZXR1cm5lZC4gVGhpcyBhcnJheSB3aWxsIGJlIGVtcHR5IGZvciBhbnkgbm9uLXRhYmxlIGJhc2VkIGRhdGFzb3VyY2UuXHJcbiAgICAgIGlmIChqb2luRGVzY3JpcHRpb24udGFibGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uZXJyb3IoJ2dldEFjdGl2ZVRhYmxlc0FzeW5jIGlzIHVuc3VwcG9ydGVkIGZvciBEYXRhU291cmNlLicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0Vycm9yQ29kZXMuVW5zdXBwb3J0ZWRNZXRob2RGb3JEYXRhU291cmNlVHlwZV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gam9pbkRlc2NyaXB0aW9uLnRhYmxlcztcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldERhdGFTb3VyY2VzQXN5bmModmlzdWFsSWQ6IFZpc3VhbElkKTogUHJvbWlzZTxEYXRhU2NoZW1hPiB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHtbUGFyYW1ldGVySWQuVmlzdWFsSWRdOiB2aXN1YWxJZH07XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5HZXREYXRhU291cmNlcywgcGFyYW1ldGVycykudGhlbjxEYXRhU2NoZW1hPihyZXNwb25zZSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGFTY2hlbWEgPSByZXNwb25zZS5yZXN1bHQgYXMgRGF0YVNjaGVtYTtcclxuICAgICAgcmV0dXJuIGRhdGFTY2hlbWE7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDb25uZWN0aW9uU3VtbWFyaWVzQXN5bmMoZGF0YVNvdXJjZUlkOiBzdHJpbmcpOiBQcm9taXNlPENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnlbXT4ge1xyXG4gICAgY29uc3QgcGFyYW1zOiBFeGVjdXRlUGFyYW1ldGVycyA9IHtbUGFyYW1ldGVySWQuRGF0YVNvdXJjZUlkXTogZGF0YVNvdXJjZUlkfTtcclxuXHJcbiAgICAvLyBHZXQgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0YWJsZXMgdXNlZCBieSB0aGlzIGNvbm5lY3Rpb25cclxuICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaGVyLmV4ZWN1dGUoVmVyYklkLkdldENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcmllcywgcGFyYW1zKS50aGVuPENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnlbXT4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICBjb25zdCBkZXNjcmlwdGlvblN1bW1hcmllcyA9IHJlc3BvbnNlLnJlc3VsdCBhcyBDb25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJ5W107XHJcbiAgICAgIHJldHVybiBkZXNjcmlwdGlvblN1bW1hcmllcztcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL1NlcnZpY2VzL2ltcGwvRGF0YVNvdXJjZVNlcnZpY2VJbXBsLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0ICogYXMgSW50ZXJuYWxDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIENvbW1hbmRFcnJvcixcclxuICBFeGVjdXRlUGFyYW1ldGVycyxcclxuICBGaWx0ZXJUeXBlLFxyXG4gIEludGVybmFsQXBpRGlzcGF0Y2hlcixcclxuICBQYXJhbWV0ZXJJZCxcclxuICBWZXJiSWQsXHJcbiAgVmlzdWFsSWRcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBQYXJhbSwgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQgeyBFeHRlcm5hbFRvSW50ZXJuYWxFbnVtTWFwcGluZ3MgYXMgRXh0ZXJuYWxFbnVtQ29udmVydGVyIH0gZnJvbSAnLi4vLi4vRW51bU1hcHBpbmdzL0V4dGVybmFsVG9JbnRlcm5hbEVudW1NYXBwaW5ncyc7XHJcbmltcG9ydCB7IEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncyBhcyBJbnRlcm5hbEVudW1Db252ZXJ0ZXIgfSBmcm9tICcuLi8uLi9FbnVtTWFwcGluZ3MvSW50ZXJuYWxUb0V4dGVybmFsRW51bU1hcHBpbmdzJztcclxuaW1wb3J0IHtcclxuICBDYXRlZ29yaWNhbERvbWFpbixcclxuICBDYXRlZ29yaWNhbEZpbHRlcixcclxuICBSYW5nZURvbWFpbixcclxuICBSYW5nZUZpbHRlcixcclxuICBSZWxhdGl2ZURhdGVGaWx0ZXJcclxufSBmcm9tICcuLi8uLi9Nb2RlbHMvRmlsdGVyTW9kZWxzJztcclxuaW1wb3J0IHsgRGF0YVZhbHVlIH0gZnJvbSAnLi4vLi4vTW9kZWxzL0dldERhdGFNb2RlbHMnO1xyXG5cclxuaW1wb3J0IHsgRmlsdGVyU2VydmljZSB9IGZyb20gJy4uL0ZpbHRlclNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZXJ2aWNlTmFtZXMgfSBmcm9tICcuLi9TZXJ2aWNlUmVnaXN0cnknO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlclNlcnZpY2VJbXBsIGltcGxlbWVudHMgRmlsdGVyU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgRklMVEVSX0VSUk9SOiBzdHJpbmcgPSAnRXJyb3IgQXBwbHlpbmcgRmlsdGVyOiAlMSc7XHJcbiAgcHJpdmF0ZSBfZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKSB7XHJcbiAgICB0aGlzLl9kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2VydmljZU5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBTZXJ2aWNlTmFtZXMuRmlsdGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFwcGx5RmlsdGVyQXN5bmMoXHJcbiAgICB2aXN1YWxJZDogVmlzdWFsSWQsXHJcbiAgICBmaWVsZE5hbWU6IHN0cmluZyxcclxuICAgIHZhbHVlczogQXJyYXk8c3RyaW5nPixcclxuICAgIHVwZGF0ZVR5cGU6IENvbnRyYWN0LkZpbHRlclVwZGF0ZVR5cGUsXHJcbiAgICBmaWx0ZXJPcHRpb25zOiBDb250cmFjdC5GaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgaWYgKCFQYXJhbS5pc1ZhbGlkRW51bVZhbHVlPENvbnRyYWN0LkZpbHRlclVwZGF0ZVR5cGU+KHVwZGF0ZVR5cGUsIENvbnRyYWN0LkZpbHRlclVwZGF0ZVR5cGUpKSB7XHJcbiAgICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkUGFyYW1WYWx1ZShbJ0ZpbHRlclVwZGF0ZVR5cGUnXSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdmVyYiA9IFZlcmJJZC5BcHBseUNhdGVnb3JpY2FsRmlsdGVyO1xyXG4gICAgICBjb25zdCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHt9O1xyXG4gICAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLlZpc3VhbElkXSA9IHZpc3VhbElkO1xyXG4gICAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLkZpZWxkTmFtZV0gPSBmaWVsZE5hbWU7XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuRmlsdGVyVmFsdWVzXSA9IHZhbHVlcztcclxuICAgICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5GaWx0ZXJVcGRhdGVUeXBlXSA9IHVwZGF0ZVR5cGU7XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuSXNFeGNsdWRlTW9kZV0gPVxyXG4gICAgICAgIChmaWx0ZXJPcHRpb25zID09PSB1bmRlZmluZWQgfHwgZmlsdGVyT3B0aW9ucy5pc0V4Y2x1ZGVNb2RlID09PSB1bmRlZmluZWQpID8gZmFsc2UgOiBmaWx0ZXJPcHRpb25zLmlzRXhjbHVkZU1vZGU7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKHZlcmIsIHBhcmFtZXRlcnMpLnRoZW48c3RyaW5nPihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSByZXNwb25zZS5yZXN1bHQgYXMgQ29tbWFuZEVycm9yO1xyXG4gICAgICAgIGlmICghKGVycm9yLmVycm9yQ29kZSA9PT0gbnVsbCB8fCBlcnJvci5lcnJvckNvZGUgPT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgIC8vIFRPRE86IGNvbWUgYmFjayBhbmQgaW1wbGVtZW50IGVycm9yIGhhbmRsaW5nIGxvZ2ljXHJcbiAgICAgICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmVycm9yKEZpbHRlclNlcnZpY2VJbXBsLkZJTFRFUl9FUlJPUiwgW2Vycm9yLmVycm9yQ29kZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmllbGROYW1lO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgcHVibGljIGFwcGx5UmFuZ2VGaWx0ZXJBc3luYyh2aXN1YWxJZDogVmlzdWFsSWQsIGZpZWxkTmFtZTogc3RyaW5nLCBmaWx0ZXJPcHRpb25zOiBDb250cmFjdC5SYW5nZUZpbHRlck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgaWYgKCFmaWx0ZXJPcHRpb25zKSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24ubWlzc2luZ1BhcmFtZXRlcihbJ1JhbmdlRmlsdGVyT3B0aW9ucyddKTtcclxuICAgIH1cclxuICAgIFBhcmFtLnZlcmlmeVJhbmdlUGFyYW1UeXBlKGZpbHRlck9wdGlvbnMubWluLCBmaWx0ZXJPcHRpb25zLm1heCk7XHJcblxyXG4gICAgY29uc3QgdmVyYiA9IFZlcmJJZC5BcHBseVJhbmdlRmlsdGVyO1xyXG4gICAgY29uc3QgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7fTtcclxuXHJcbiAgICBpZiAoZmlsdGVyT3B0aW9ucy5taW4pIHtcclxuICAgICAgbGV0IG1pbjogc3RyaW5nIHwgbnVtYmVyO1xyXG4gICAgICBpZiAoZmlsdGVyT3B0aW9ucy5taW4gaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgbWluID0gUGFyYW0uc2VyaWFsaXplRGF0ZUZvclBsYXRmb3JtKGZpbHRlck9wdGlvbnMubWluKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtaW4gPSBmaWx0ZXJPcHRpb25zLm1pbjtcclxuICAgICAgfVxyXG4gICAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLkZpbHRlclJhbmdlTWluXSA9IG1pbjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZmlsdGVyT3B0aW9ucy5tYXgpIHtcclxuICAgICAgbGV0IG1heDogc3RyaW5nIHwgbnVtYmVyO1xyXG4gICAgICBpZiAoZmlsdGVyT3B0aW9ucy5tYXggaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgbWF4ID0gUGFyYW0uc2VyaWFsaXplRGF0ZUZvclBsYXRmb3JtKGZpbHRlck9wdGlvbnMubWF4KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtYXggPSBmaWx0ZXJPcHRpb25zLm1heDtcclxuICAgICAgfVxyXG4gICAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLkZpbHRlclJhbmdlTWF4XSA9IG1heDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZmlsdGVyT3B0aW9ucy5udWxsT3B0aW9uKSB7XHJcbiAgICAgIGlmICghUGFyYW0uaXNWYWxpZEVudW1WYWx1ZTxDb250cmFjdC5GaWx0ZXJOdWxsT3B0aW9uPihmaWx0ZXJPcHRpb25zLm51bGxPcHRpb24sIENvbnRyYWN0LkZpbHRlck51bGxPcHRpb24pKSB7XHJcbiAgICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkUGFyYW1WYWx1ZShbJ051bGxPcHRpb24nXSk7XHJcbiAgICAgIH1cclxuICAgICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5GaWx0ZXJSYW5nZU51bGxPcHRpb25dID0gRXh0ZXJuYWxFbnVtQ29udmVydGVyLm51bGxPcHRpb25zLmNvbnZlcnQoZmlsdGVyT3B0aW9ucy5udWxsT3B0aW9uKTtcclxuICAgIH1cclxuICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuRmllbGROYW1lXSA9IGZpZWxkTmFtZTtcclxuICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuVmlzdWFsSWRdID0gdmlzdWFsSWQ7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoZXIuZXhlY3V0ZSh2ZXJiLCBwYXJhbWV0ZXJzKS50aGVuPHN0cmluZz4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICByZXR1cm4gZmllbGROYW1lO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXJGaWx0ZXJBc3luYyh2aXN1YWxJZDogVmlzdWFsSWQsIGZpZWxkTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHZlcmIgPSBWZXJiSWQuQ2xlYXJGaWx0ZXI7XHJcbiAgICBsZXQgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7fTtcclxuICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuVmlzdWFsSWRdID0gdmlzdWFsSWQ7XHJcbiAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLkZpZWxkTmFtZV0gPSBmaWVsZE5hbWU7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKHZlcmIsIHBhcmFtZXRlcnMpLnRoZW48c3RyaW5nPihyZXNwb3NuZSA9PiB7XHJcbiAgICAgIHJldHVybiBmaWVsZE5hbWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRGaWx0ZXJzQXN5bmModmlzdWFsSWQ6IFZpc3VhbElkKTogUHJvbWlzZTxBcnJheTxDb250cmFjdC5GaWx0ZXI+PiB7XHJcbiAgICBjb25zdCB2ZXJiID0gVmVyYklkLkdldEZpbHRlcnM7XHJcbiAgICBsZXQgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7fTtcclxuICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuVmlzdWFsSWRdID0gdmlzdWFsSWQ7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKHZlcmIsIHBhcmFtZXRlcnMpLnRoZW48QXJyYXk8Q29udHJhY3QuRmlsdGVyPj4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICBsZXQgZmlsdGVycyA9IHJlc3BvbnNlLnJlc3VsdCBhcyBBcnJheTxJbnRlcm5hbENvbnRyYWN0LkZpbHRlcj47XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbnZlcnREb21haW5GaWx0ZXJzKGZpbHRlcnMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q2F0ZWdvcmljYWxEb21haW5Bc3luYyhcclxuICAgIHdvcmtzaGVldE5hbWU6IHN0cmluZyxcclxuICAgIGZpZWxkSWQ6IHN0cmluZyxcclxuICAgIGRvbWFpblR5cGU6IENvbnRyYWN0LkZpbHRlckRvbWFpblR5cGUpOiBQcm9taXNlPENvbnRyYWN0LkNhdGVnb3JpY2FsRG9tYWluPiB7XHJcbiAgICBpZiAoIVBhcmFtLmlzVmFsaWRFbnVtVmFsdWU8Q29udHJhY3QuRmlsdGVyRG9tYWluVHlwZT4oZG9tYWluVHlwZSwgQ29udHJhY3QuRmlsdGVyRG9tYWluVHlwZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgRmlsdGVyRG9tYWluVHlwZScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmVyYiA9IFZlcmJJZC5HZXRDYXRlZ29yaWNhbERvbWFpbjtcclxuICAgIGxldCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHt9O1xyXG4gICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5WaXN1YWxJZF0gPSB7XHJcbiAgICAgIHdvcmtzaGVldDogd29ya3NoZWV0TmFtZVxyXG4gICAgfTtcclxuICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuRmllbGRJZF0gPSBmaWVsZElkO1xyXG4gICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5Eb21haW5UeXBlXSA9IGRvbWFpblR5cGU7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKHZlcmIsIHBhcmFtZXRlcnMpLnRoZW48Q29udHJhY3QuQ2F0ZWdvcmljYWxEb21haW4+KHJlc3BvbnNlID0+IHtcclxuICAgICAgbGV0IGRvbWFpbiA9IHJlc3BvbnNlLnJlc3VsdCBhcyBJbnRlcm5hbENvbnRyYWN0LkNhdGVnb3JpY2FsRG9tYWluO1xyXG4gICAgICByZXR1cm4gdGhpcy5jb252ZXJ0Q2F0ZWdvcmljYWxEb21haW4oZG9tYWluLCBkb21haW5UeXBlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFJhbmdlRG9tYWluQXN5bmMod29ya3NoZWV0TmFtZTogc3RyaW5nLCBmaWVsZElkOiBzdHJpbmcsIGRvbWFpblR5cGU6IENvbnRyYWN0LkZpbHRlckRvbWFpblR5cGUpOiBQcm9taXNlPENvbnRyYWN0LlJhbmdlRG9tYWluPiB7XHJcbiAgICBpZiAoIVBhcmFtLmlzVmFsaWRFbnVtVmFsdWU8Q29udHJhY3QuRmlsdGVyRG9tYWluVHlwZT4oZG9tYWluVHlwZSwgQ29udHJhY3QuRmlsdGVyRG9tYWluVHlwZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgRmlsdGVyRG9tYWluVHlwZScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmVyYiA9IFZlcmJJZC5HZXRSYW5nZURvbWFpbjtcclxuICAgIGxldCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHt9O1xyXG4gICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5WaXN1YWxJZF0gPSB7XHJcbiAgICAgIHdvcmtzaGVldDogd29ya3NoZWV0TmFtZVxyXG4gICAgfTtcclxuICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuRmllbGRJZF0gPSBmaWVsZElkO1xyXG4gICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5Eb21haW5UeXBlXSA9IEV4dGVybmFsRW51bUNvbnZlcnRlci5maWx0ZXJEb21haW5UeXBlLmNvbnZlcnQoZG9tYWluVHlwZSk7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKHZlcmIsIHBhcmFtZXRlcnMpLnRoZW48Q29udHJhY3QuUmFuZ2VEb21haW4+KHJlc3BvbnNlID0+IHtcclxuICAgICAgbGV0IGRvbWFpbiA9IHJlc3BvbnNlLnJlc3VsdCBhcyBJbnRlcm5hbENvbnRyYWN0LlJhbmdlRG9tYWluO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuY29udmVydFJhbmdlRG9tYWluKGRvbWFpbiwgZG9tYWluVHlwZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIEhlbHBlciBNZXRob2RzXHJcbiAgcHJpdmF0ZSBjb252ZXJ0RG9tYWluRmlsdGVycyhkb21haW5GaWx0ZXJzOiBBcnJheTxJbnRlcm5hbENvbnRyYWN0LkZpbHRlcj4pOiBBcnJheTxDb250cmFjdC5GaWx0ZXI+IHtcclxuICAgIGxldCBmaWx0ZXJzOiBBcnJheTxDb250cmFjdC5GaWx0ZXI+ID0gW107XHJcbiAgICBkb21haW5GaWx0ZXJzLmZvckVhY2goZG9tYWluRmlsdGVyID0+IHtcclxuICAgICAgc3dpdGNoIChkb21haW5GaWx0ZXIuZmlsdGVyVHlwZSkge1xyXG4gICAgICAgIGNhc2UgRmlsdGVyVHlwZS5DYXRlZ29yaWNhbDoge1xyXG4gICAgICAgICAgbGV0IGZpbHRlciA9IGRvbWFpbkZpbHRlciBhcyBJbnRlcm5hbENvbnRyYWN0LkNhdGVnb3JpY2FsRmlsdGVyO1xyXG4gICAgICAgICAgaWYgKGZpbHRlcikge1xyXG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2godGhpcy5jb252ZXJ0Q2F0ZWdvcmljYWxGaWx0ZXIoZmlsdGVyKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQ2F0ZWdvcmljYWwgRmlsdGVyJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgRmlsdGVyVHlwZS5SYW5nZToge1xyXG4gICAgICAgICAgbGV0IGZpbHRlciA9IGRvbWFpbkZpbHRlciBhcyBJbnRlcm5hbENvbnRyYWN0LlJhbmdlRmlsdGVyO1xyXG4gICAgICAgICAgaWYgKGZpbHRlcikge1xyXG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2godGhpcy5jb252ZXJ0UmFuZ2VGaWx0ZXIoZmlsdGVyKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUmFuZ2UgRmlsdGVyJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgRmlsdGVyVHlwZS5SZWxhdGl2ZURhdGU6IHtcclxuICAgICAgICAgIGxldCBmaWx0ZXIgPSBkb21haW5GaWx0ZXIgYXMgSW50ZXJuYWxDb250cmFjdC5SZWxhdGl2ZURhdGVGaWx0ZXI7XHJcbiAgICAgICAgICBpZiAoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGZpbHRlcnMucHVzaCh0aGlzLmNvbnZlcnRSZWxhdGl2ZURhdGVGaWx0ZXIoZmlsdGVyKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUmVsYXRpdmUgRGF0ZSBGaWx0ZXInKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmaWx0ZXJzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb252ZXJ0Q2F0ZWdvcmljYWxGaWx0ZXIoZG9tYWluRmlsdGVyOiBJbnRlcm5hbENvbnRyYWN0LkNhdGVnb3JpY2FsRmlsdGVyKTogQ29udHJhY3QuQ2F0ZWdvcmljYWxGaWx0ZXIge1xyXG4gICAgbGV0IGFwcGxpZWRWYWx1ZXM6IEFycmF5PENvbnRyYWN0LkRhdGFWYWx1ZT4gPSBkb21haW5GaWx0ZXIudmFsdWVzLm1hcChkdiA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgRGF0YVZhbHVlKGR2LnZhbHVlLCBkdi5mb3JtYXR0ZWRWYWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IENhdGVnb3JpY2FsRmlsdGVyKFxyXG4gICAgICBkb21haW5GaWx0ZXIudmlzdWFsSWQud29ya3NoZWV0LFxyXG4gICAgICBkb21haW5GaWx0ZXIuZmllbGRDYXB0aW9uLFxyXG4gICAgICBkb21haW5GaWx0ZXIuZmllbGROYW1lLFxyXG4gICAgICBDb250cmFjdC5GaWx0ZXJUeXBlLkNhdGVnb3JpY2FsLFxyXG4gICAgICBhcHBsaWVkVmFsdWVzLFxyXG4gICAgICBkb21haW5GaWx0ZXIuaXNFeGNsdWRlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFJhbmdlRmlsdGVyKGRvbWFpbkZpbHRlcjogSW50ZXJuYWxDb250cmFjdC5SYW5nZUZpbHRlcik6IENvbnRyYWN0LlJhbmdlRmlsdGVyIHtcclxuICAgIGxldCBtaW5WYWx1ZTogRGF0YVZhbHVlID0gbmV3IERhdGFWYWx1ZShkb21haW5GaWx0ZXIubWluLnZhbHVlLCBkb21haW5GaWx0ZXIubWluLmZvcm1hdHRlZFZhbHVlKTtcclxuICAgIGxldCBtYXhWYWx1ZTogRGF0YVZhbHVlID0gbmV3IERhdGFWYWx1ZShkb21haW5GaWx0ZXIubWF4LnZhbHVlLCBkb21haW5GaWx0ZXIubWF4LmZvcm1hdHRlZFZhbHVlKTtcclxuICAgIHJldHVybiBuZXcgUmFuZ2VGaWx0ZXIoXHJcbiAgICAgIGRvbWFpbkZpbHRlci52aXN1YWxJZC53b3Jrc2hlZXQsXHJcbiAgICAgIGRvbWFpbkZpbHRlci5maWVsZENhcHRpb24sXHJcbiAgICAgIGRvbWFpbkZpbHRlci5maWVsZE5hbWUsXHJcbiAgICAgIENvbnRyYWN0LkZpbHRlclR5cGUuUmFuZ2UsXHJcbiAgICAgIG1pblZhbHVlLFxyXG4gICAgICBtYXhWYWx1ZSxcclxuICAgICAgZG9tYWluRmlsdGVyLmluY2x1ZGVOdWxsVmFsdWVzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb252ZXJ0UmVsYXRpdmVEYXRlRmlsdGVyKGRvbWFpbkZpbHRlcjogSW50ZXJuYWxDb250cmFjdC5SZWxhdGl2ZURhdGVGaWx0ZXIpOiBDb250cmFjdC5SZWxhdGl2ZURhdGVGaWx0ZXIge1xyXG4gICAgbGV0IGFuY2hvckRhdGVWYWx1ZTogRGF0YVZhbHVlID0gbmV3IERhdGFWYWx1ZShkb21haW5GaWx0ZXIuYW5jaG9yRGF0ZS52YWx1ZSwgZG9tYWluRmlsdGVyLmFuY2hvckRhdGUuZm9ybWF0dGVkVmFsdWUpO1xyXG4gICAgcmV0dXJuIG5ldyBSZWxhdGl2ZURhdGVGaWx0ZXIgKFxyXG4gICAgICBkb21haW5GaWx0ZXIudmlzdWFsSWQud29ya3NoZWV0LFxyXG4gICAgICBkb21haW5GaWx0ZXIuZmllbGRDYXB0aW9uLFxyXG4gICAgICBkb21haW5GaWx0ZXIuZmllbGROYW1lLFxyXG4gICAgICBDb250cmFjdC5GaWx0ZXJUeXBlLlJlbGF0aXZlRGF0ZSxcclxuICAgICAgYW5jaG9yRGF0ZVZhbHVlLFxyXG4gICAgICBJbnRlcm5hbEVudW1Db252ZXJ0ZXIuZGF0ZVN0ZXBQZXJpb2QuY29udmVydChkb21haW5GaWx0ZXIucGVyaW9kVHlwZSksXHJcbiAgICAgIEludGVybmFsRW51bUNvbnZlcnRlci5kYXRlUmFuZ2VUeXBlLmNvbnZlcnQoZG9tYWluRmlsdGVyLnJhbmdlVHlwZSksXHJcbiAgICAgIGRvbWFpbkZpbHRlci5yYW5nZU5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbnZlcnRDYXRlZ29yaWNhbERvbWFpbihcclxuICAgIGRvbWFpbjogSW50ZXJuYWxDb250cmFjdC5DYXRlZ29yaWNhbERvbWFpbixcclxuICAgIGRvbWFpblR5cGU6IENvbnRyYWN0LkZpbHRlckRvbWFpblR5cGUpOiBDb250cmFjdC5DYXRlZ29yaWNhbERvbWFpbiB7XHJcbiAgICBsZXQgdmFsdWVzOiBBcnJheTxEYXRhVmFsdWU+ID0gZG9tYWluLnZhbHVlcy5tYXAoKGRvbWFpbkR2KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgRGF0YVZhbHVlKGRvbWFpbkR2LnZhbHVlLCBkb21haW5Edi5mb3JtYXR0ZWRWYWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgQ2F0ZWdvcmljYWxEb21haW4odmFsdWVzLCBkb21haW5UeXBlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFJhbmdlRG9tYWluKGRvbWFpbjogSW50ZXJuYWxDb250cmFjdC5SYW5nZURvbWFpbiwgZG9tYWluVHlwZTogQ29udHJhY3QuRmlsdGVyRG9tYWluVHlwZSk6IENvbnRyYWN0LlJhbmdlRG9tYWluIHtcclxuICAgIGxldCBtaW46IERhdGFWYWx1ZSA9IG5ldyBEYXRhVmFsdWUoZG9tYWluLm1pbi52YWx1ZSwgZG9tYWluLm1pbi5mb3JtYXR0ZWRWYWx1ZSk7XHJcbiAgICBsZXQgbWF4OiBEYXRhVmFsdWUgPSBuZXcgRGF0YVZhbHVlKGRvbWFpbi5tYXgudmFsdWUsIGRvbWFpbi5tYXguZm9ybWF0dGVkVmFsdWUpO1xyXG4gICAgcmV0dXJuIG5ldyBSYW5nZURvbWFpbihcclxuICAgICAgbWluLFxyXG4gICAgICBtYXgsXHJcbiAgICAgIGRvbWFpblR5cGVcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvU2VydmljZXMvaW1wbC9GaWx0ZXJTZXJ2aWNlSW1wbC50c1xuICoqLyIsImltcG9ydCB7XHJcbiAgRmlsdGVyRG9tYWluVHlwZSBhcyBFeHRlcm5hbERvbWFpblR5cGUsXHJcbiAgRmlsdGVyTnVsbE9wdGlvbiBhcyBFeHRlcm5hbE51bGxPcHRpb25cclxufSBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIEZpbHRlckRvbWFpblR5cGUgYXMgSW50ZXJuYWxEb21haW5UeXBlLFxyXG4gIEZpbHRlck51bGxPcHRpb24gYXMgSW50ZXJuYWxOdWxsT3B0aW9uXHJcbn0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IEVudW1Db252ZXJ0ZXIgfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dHlwZWRlZiAtIERpc2FibGUgdGhpcyB0byBtYWtlIGRlY2xhcmluZyB0aGVzZSBjbGFzc2VzIGEgYml0IGVhc2llciAqL1xyXG4vKipcclxuICogTWFwcyBlbnVtcyB1c2VkIGJ5IHRoZSBleHRlcm5hbC1hcGktY29udHJhY3QgdG8gdGhlIGVudW1zIHVzZWRcclxuICogaW4gdGhlIGludGVybmFsLWFwaS1jb250cmFjdCwgd2hpY2ggZGV2ZWxvcGVycyBjb2RlIGFnYWluc3QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXh0ZXJuYWxUb0ludGVybmFsRW51bU1hcHBpbmdzIHtcclxuICBwdWJsaWMgc3RhdGljIG51bGxPcHRpb25zID0gbmV3IEVudW1Db252ZXJ0ZXI8RXh0ZXJuYWxOdWxsT3B0aW9uLCBJbnRlcm5hbE51bGxPcHRpb24+KHtcclxuICAgIFtFeHRlcm5hbE51bGxPcHRpb24uQWxsVmFsdWVzXTogSW50ZXJuYWxOdWxsT3B0aW9uLkFsbFZhbHVlcyxcclxuICAgIFtFeHRlcm5hbE51bGxPcHRpb24uTm9uTnVsbFZhbHVlc106IEludGVybmFsTnVsbE9wdGlvbi5Ob25OdWxsVmFsdWVzLFxyXG4gICAgW0V4dGVybmFsTnVsbE9wdGlvbi5Ob25OdWxsVmFsdWVzXTogSW50ZXJuYWxOdWxsT3B0aW9uLk51bGxWYWx1ZXNcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJEb21haW5UeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8RXh0ZXJuYWxEb21haW5UeXBlLCBJbnRlcm5hbERvbWFpblR5cGU+KHtcclxuICAgIFtFeHRlcm5hbERvbWFpblR5cGUuUmVsZXZhbnRdOiBJbnRlcm5hbERvbWFpblR5cGUuUmVsZXZhbnQsXHJcbiAgICBbRXh0ZXJuYWxEb21haW5UeXBlLkRhdGFiYXNlXTogSW50ZXJuYWxEb21haW5UeXBlLkRhdGFiYXNlXHJcbiAgfSk7XHJcbn1cclxuLyogdHNsaW50OmVuYWJsZTp0eXBlZGVmICovXHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvRW51bU1hcHBpbmdzL0V4dGVybmFsVG9JbnRlcm5hbEVudW1NYXBwaW5ncy50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vU2VydmljZXMvRmlsdGVyU2VydmljZSc7XHJcbmltcG9ydCB7IEFwaVNlcnZpY2VSZWdpc3RyeSwgU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vU2VydmljZXMvU2VydmljZVJlZ2lzdHJ5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXIgaW1wbGVtZW50cyBDb250cmFjdC5GaWx0ZXIge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBfd29ya3NoZWV0TmFtZTogc3RyaW5nLFxyXG4gICAgcHJvdGVjdGVkIF9maWVsZE5hbWU6IHN0cmluZyxcclxuICAgIHByb3RlY3RlZCBfZmlsdGVyVHlwZTogQ29udHJhY3QuRmlsdGVyVHlwZSxcclxuICAgIHByb3RlY3RlZCBfZmllbGRJZDogc3RyaW5nKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHdvcmtzaGVldE5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXROYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmaWVsZE5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZE5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGZpZWxkSWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZElkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmaWx0ZXJUeXBlKCk6IENvbnRyYWN0LkZpbHRlclR5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlclR5cGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RmllbGRBc3luYygpOiBQcm9taXNlPENvbnRyYWN0LkZpZWxkPiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXRlZ29yaWNhbEZpbHRlciBleHRlbmRzIEZpbHRlciBpbXBsZW1lbnRzIENvbnRyYWN0LkNhdGVnb3JpY2FsRmlsdGVyIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICB3b3Jrc2hlZXROYW1lOiBzdHJpbmcsXHJcbiAgICBmaWVsZE5hbWU6IHN0cmluZyxcclxuICAgIGZpZWxkSWQ6IHN0cmluZyxcclxuICAgIGZpbHRlclR5cGU6IENvbnRyYWN0LkZpbHRlclR5cGUsXHJcbiAgICBwcml2YXRlIF9hcHBsaWVkVmFsdWVzOiBBcnJheTxDb250cmFjdC5EYXRhVmFsdWU+LFxyXG4gICAgcHJpdmF0ZSBfaXNFeGNsdWRlTW9kZTogYm9vbGVhbikge1xyXG4gICAgICBzdXBlcih3b3Jrc2hlZXROYW1lLCBmaWVsZE5hbWUsIGZpbHRlclR5cGUsIGZpZWxkSWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBhcHBsaWVkVmFsdWVzKCk6IEFycmF5PENvbnRyYWN0LkRhdGFWYWx1ZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FwcGxpZWRWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzRXhjbHVkZU1vZGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNFeGNsdWRlTW9kZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREb21haW5Bc3luYyhkb21haW5UeXBlPzogQ29udHJhY3QuRmlsdGVyRG9tYWluVHlwZSk6IFByb21pc2U8Q29udHJhY3QuQ2F0ZWdvcmljYWxEb21haW4+IHtcclxuICAgIGlmICghZG9tYWluVHlwZSkge1xyXG4gICAgICBkb21haW5UeXBlID0gQ29udHJhY3QuRmlsdGVyRG9tYWluVHlwZS5SZWxldmFudDtcclxuICAgIH1cclxuICAgIGNvbnN0IHNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxGaWx0ZXJTZXJ2aWNlPihTZXJ2aWNlTmFtZXMuRmlsdGVyKTtcclxuICAgIHJldHVybiBzZXJ2aWNlLmdldENhdGVnb3JpY2FsRG9tYWluQXN5bmModGhpcy5fd29ya3NoZWV0TmFtZSwgdGhpcy5fZmllbGRJZCwgZG9tYWluVHlwZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmFuZ2VGaWx0ZXIgZXh0ZW5kcyBGaWx0ZXIgaW1wbGVtZW50cyBDb250cmFjdC5SYW5nZUZpbHRlciB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgd29ya3NoZWV0TmFtZTogc3RyaW5nLFxyXG4gICAgZmllbGROYW1lOiBzdHJpbmcsXHJcbiAgICBmaWVsZElkOiBzdHJpbmcsXHJcbiAgICBmaWx0ZXJUeXBlOiBDb250cmFjdC5GaWx0ZXJUeXBlLFxyXG4gICAgcHJpdmF0ZSBfbWluOiBDb250cmFjdC5EYXRhVmFsdWUsXHJcbiAgICBwcml2YXRlIF9tYXg6IENvbnRyYWN0LkRhdGFWYWx1ZSxcclxuICAgIHByaXZhdGUgX2luY2x1ZGVOdWxsVmFsdWVzOiBib29sZWFuKSB7XHJcbiAgICAgIHN1cGVyKHdvcmtzaGVldE5hbWUsIGZpZWxkTmFtZSwgZmlsdGVyVHlwZSwgZmllbGRJZCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG1pblZhbHVlKCk6IENvbnRyYWN0LkRhdGFWYWx1ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWluO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBtYXhWYWx1ZSgpOiBDb250cmFjdC5EYXRhVmFsdWUge1xyXG4gICAgcmV0dXJuIHRoaXMuX21heDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaW5jbHVkZU51bGxWYWx1ZXMoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5jbHVkZU51bGxWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgIGdldERvbWFpbkFzeW5jKGRvbWFpblR5cGU/OiBDb250cmFjdC5GaWx0ZXJEb21haW5UeXBlKTogUHJvbWlzZTxDb250cmFjdC5SYW5nZURvbWFpbj4ge1xyXG4gICAgY29uc3Qgc2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPEZpbHRlclNlcnZpY2U+KFNlcnZpY2VOYW1lcy5GaWx0ZXIpO1xyXG4gICAgaWYgKCFkb21haW5UeXBlKSB7XHJcbiAgICAgIGRvbWFpblR5cGUgPSBDb250cmFjdC5GaWx0ZXJEb21haW5UeXBlLlJlbGV2YW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0UmFuZ2VEb21haW5Bc3luYyh0aGlzLl93b3Jrc2hlZXROYW1lLCB0aGlzLl9maWVsZElkLCBkb21haW5UeXBlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWxhdGl2ZURhdGVGaWx0ZXIgZXh0ZW5kcyBGaWx0ZXIgaW1wbGVtZW50cyBDb250cmFjdC5SZWxhdGl2ZURhdGVGaWx0ZXIge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHdvcmtzaGVldE5hbWU6IHN0cmluZyxcclxuICAgIGZpZWxkTmFtZTogc3RyaW5nLFxyXG4gICAgZmllbGRJZDogc3RyaW5nLFxyXG4gICAgZmlsdGVyVHlwZTogQ29udHJhY3QuRmlsdGVyVHlwZSxcclxuICAgIHByaXZhdGUgX2FuY2hvckRhdGU6IENvbnRyYWN0LkRhdGFWYWx1ZSxcclxuICAgIHByaXZhdGUgX3BlcmlvZFR5cGU6IENvbnRyYWN0LlBlcmlvZFR5cGUsXHJcbiAgICBwcml2YXRlIF9yYW5nZVR5cGU6IENvbnRyYWN0LkRhdGVSYW5nZVR5cGUsXHJcbiAgICBwcml2YXRlIF9yYW5nZU46IG51bWJlcikge1xyXG4gICAgICBzdXBlcih3b3Jrc2hlZXROYW1lLCBmaWVsZE5hbWUsIGZpbHRlclR5cGUsIGZpZWxkSWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBhbmNob3JEYXRlKCk6IENvbnRyYWN0LkRhdGFWYWx1ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYW5jaG9yRGF0ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgcGVyaW9kVHlwZSgpOiBDb250cmFjdC5QZXJpb2RUeXBlIHtcclxuICAgIHJldHVybiB0aGlzLl9wZXJpb2RUeXBlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCByYW5nZVR5cGUoKTogQ29udHJhY3QuRGF0ZVJhbmdlVHlwZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmFuZ2VUeXBlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCByYW5nZU4oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9yYW5nZU47XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcmljYWxEb21haW4gaW1wbGVtZW50cyBDb250cmFjdC5DYXRlZ29yaWNhbERvbWFpbiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfdmFsdWVzOiBBcnJheTxDb250cmFjdC5EYXRhVmFsdWU+LFxyXG4gICAgcHJpdmF0ZSBfZG9tYWluVHlwZTogQ29udHJhY3QuRmlsdGVyRG9tYWluVHlwZSkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB2YWx1ZXMoKTogQXJyYXk8Q29udHJhY3QuRGF0YVZhbHVlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB0eXBlKCk6IENvbnRyYWN0LkZpbHRlckRvbWFpblR5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpblR5cGU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmFuZ2VEb21haW4gaW1wbGVtZW50cyBDb250cmFjdC5SYW5nZURvbWFpbiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfbWluOiBDb250cmFjdC5EYXRhVmFsdWUsXHJcbiAgICBwcml2YXRlIF9tYXg6IENvbnRyYWN0LkRhdGFWYWx1ZSxcclxuICAgIHByaXZhdGUgX2RvbWFpblR5cGU6IENvbnRyYWN0LkZpbHRlckRvbWFpblR5cGUpIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdHlwZSgpOiBDb250cmFjdC5GaWx0ZXJEb21haW5UeXBlIHtcclxuICAgIHJldHVybiB0aGlzLl9kb21haW5UeXBlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBtaW4oKTogQ29udHJhY3QuRGF0YVZhbHVlIHtcclxuICAgIHJldHVybiB0aGlzLl9taW47XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG1heCgpOiBDb250cmFjdC5EYXRhVmFsdWUge1xyXG4gICAgcmV0dXJuIHRoaXMuX21heDtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Nb2RlbHMvRmlsdGVyTW9kZWxzLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhVGFibGUgaW1wbGVtZW50cyBDb250cmFjdC5EYXRhVGFibGUge1xyXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfZGF0YTogQXJyYXk8QXJyYXk8Q29udHJhY3QuRGF0YVZhbHVlPj4sXHJcbiAgICBwcml2YXRlIF9jb2x1bW5zOiBBcnJheTxDb250cmFjdC5Db2x1bW4+LFxyXG4gICAgcHJpdmF0ZSBfdG90YWxSb3dDb3VudDogbnVtYmVyLFxyXG4gICAgcHJpdmF0ZSBfaXNTdW1tYXJ5RGF0YTogYm9vbGVhbixcclxuICAgIHByaXZhdGUgX21hcmtzSW5mbz86IEFycmF5PE1hcmtJbmZvPikge1xyXG4gICAgICAgIC8vIFRPRE86IGdldCByaWQgb2YgdGhpcyBpbiByZWRlc2lnbi5cclxuICAgICAgICB0aGlzLl9uYW1lID0gX2lzU3VtbWFyeURhdGEgPyAnU3VtbWFyeSBEYXRhIFRhYmxlJyA6ICdVbmRlcmx5aW5nIERhdGEgVGFibGUnO1xyXG4gICAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkYXRhKCk6IEFycmF5PEFycmF5PENvbnRyYWN0LkRhdGFWYWx1ZT4+IHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjb2x1bW5zKCk6IEFycmF5PENvbnRyYWN0LkNvbHVtbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbHVtbnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG1hcmtzSW5mbygpOiBBcnJheTxDb250cmFjdC5NYXJrSW5mbz4gfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuX21hcmtzSW5mbztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdG90YWxSb3dDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RvdGFsUm93Q291bnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzU3VtbWFyeURhdGEoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNTdW1tYXJ5RGF0YTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNYXJrSW5mbyBpbXBsZW1lbnRzIENvbnRyYWN0Lk1hcmtJbmZvIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF90eXBlOiBDb250cmFjdC5NYXJrVHlwZSxcclxuICAgIHByaXZhdGUgX2NvbG9yOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIF90dXBsZUlkPzogTnVtYmVyXHJcbiAgKSB7fVxyXG5cclxuICBwdWJsaWMgZ2V0IHR5cGUoKTogQ29udHJhY3QuTWFya1R5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29sb3I7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHR1cGxlSWQoKTogTnVtYmVyIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl90dXBsZUlkO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbHVtbiBpbXBsZW1lbnRzIENvbnRyYWN0LkNvbHVtbiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfZmllbGROYW1lOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIF9kYXRhVHlwZTogQ29udHJhY3QuRGF0YVR5cGUsIC8vIFRPRE86IHRoaXMgc2hvdWRsIGJlIGFuIGVudW0gdHlwZVxyXG4gICAgcHJpdmF0ZSBfaXNSZWZlcmVuY2VkOiBib29sZWFuLFxyXG4gICAgcHJpdmF0ZSBfaW5kZXg6IG51bWJlcikge31cclxuXHJcbiAgcHVibGljIGdldCBmaWVsZE5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9maWVsZE5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRhdGFUeXBlKCk6IENvbnRyYWN0LkRhdGFUeXBlIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhVHlwZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNSZWZlcmVuY2VkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzUmVmZXJlbmNlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaW5kZXgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9pbmRleDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhVmFsdWUgaW1wbGVtZW50cyBDb250cmFjdC5EYXRhVmFsdWUge1xyXG4gIC8qIHRzbGludDpkaXNhYmxlOm5vLWFueSAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX3ZhbHVlOiBhbnksXHJcbiAgICBwcml2YXRlIF9mb3JtYXR0ZWRWYWx1ZTogc3RyaW5nKSB7fVxyXG5cclxuICBwdWJsaWMgZ2V0IHZhbHVlKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGZvcm1hdHRlZFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0dGVkVmFsdWU7XHJcbiAgfVxyXG4gIC8qIHRzbGludDplbmFibGU6bm8tYW55ICovXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9Nb2RlbHMvR2V0RGF0YU1vZGVscy50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7XHJcbiAgRGF0YVRhYmxlIGFzIERhdGFUYWJsZUludGVybmFsQ29udHJhY3QsXHJcbiAgRXhlY3V0ZVBhcmFtZXRlcnMsXHJcbiAgSGlnaGxpZ2h0ZWRNYXJrc1RhYmxlLFxyXG4gIEludGVybmFsQXBpRGlzcGF0Y2hlcixcclxuICBQYXJhbWV0ZXJJZCxcclxuICBTZWxlY3RlZE1hcmtzVGFibGUsXHJcbiAgVW5kZXJseWluZ0RhdGFUYWJsZSxcclxuICBWZXJiSWQsXHJcbiAgVmlzdWFsSWQsXHJcbn0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IENvbHVtbiwgRGF0YVRhYmxlLCBEYXRhVmFsdWUsIE1hcmtJbmZvIH0gZnJvbSAnLi4vLi4vTW9kZWxzL0dldERhdGFNb2RlbHMnO1xyXG5pbXBvcnQgeyBHZXREYXRhU2VydmljZSwgR2V0RGF0YVR5cGUgfSBmcm9tICcuLi9HZXREYXRhU2VydmljZSc7XHJcbmltcG9ydCB7IFNlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VSZWdpc3RyeSc7XHJcblxyXG5leHBvcnQgY2xhc3MgR2V0RGF0YVNlcnZpY2VJbXBsIGltcGxlbWVudHMgR2V0RGF0YVNlcnZpY2Uge1xyXG4gIHByaXZhdGUgX2Rpc3BhdGNoZXI6IEludGVybmFsQXBpRGlzcGF0Y2hlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGRpc3BhdGNoZXI6IEludGVybmFsQXBpRGlzcGF0Y2hlcikge1xyXG4gICAgdGhpcy5fZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNlcnZpY2VOYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU2VydmljZU5hbWVzLkdldERhdGE7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VW5kZXJseWluZ0RhdGFBc3luYyhcclxuICAgIHZpc3VhbElkOiBWaXN1YWxJZCxcclxuICAgIGdldFR5cGU6IEdldERhdGFUeXBlLFxyXG4gICAgaWdub3JlQWxpYXNlczogYm9vbGVhbixcclxuICAgIGlnbm9yZVNlbGVjdGlvbjogYm9vbGVhbixcclxuICAgIGluY2x1ZGVBbGxDb2x1bW5zOiBib29sZWFuLFxyXG4gICAgbWF4Um93czogbnVtYmVyKTogUHJvbWlzZTxEYXRhVGFibGU+IHtcclxuICAgICAgLy8gQ3JlYXRlIGFsbCBvZiBvdXIgcGFyYW1ldGVyc1xyXG4gICAgICBjb25zdCB2ZXJiID0gZ2V0VHlwZSA9PT0gR2V0RGF0YVR5cGUuU3VtbWFyeSA/IFZlcmJJZC5HZXREYXRhU3VtbWFyeURhdGEgOiBWZXJiSWQuR2V0VW5kZXJseWluZ0RhdGE7XHJcbiAgICAgIGNvbnN0IHBhcmFtZXRlcnM6IEV4ZWN1dGVQYXJhbWV0ZXJzID0ge307XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuVmlzdWFsSWRdID0gdmlzdWFsSWQ7XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuSWdub3JlQWxpYXNlc10gPSBpZ25vcmVBbGlhc2VzO1xyXG4gICAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLklnbm9yZVNlbGVjdGlvbl0gPSBpZ25vcmVTZWxlY3Rpb247XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuSW5jbHVkZUFsbENvbHVtbnNdID0gaW5jbHVkZUFsbENvbHVtbnM7XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuTWF4Um93c10gPSBtYXhSb3dzO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoZXIuZXhlY3V0ZSh2ZXJiLCBwYXJhbWV0ZXJzKS50aGVuPERhdGFUYWJsZT4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3BvbnNlLnJlc3VsdCBhcyBVbmRlcmx5aW5nRGF0YVRhYmxlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NSZXN1bHRzVGFibGUocmVzcG9uc2VEYXRhLmRhdGEsIHJlc3BvbnNlRGF0YS5pc1N1bW1hcnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgcHVibGljIGdldFNlbGVjdGVkTWFya3NBc3luYyh2aXN1YWxJZDogVmlzdWFsSWQpOiBQcm9taXNlPENvbnRyYWN0Lk1hcmtzQ29sbGVjdGlvbj4ge1xyXG4gICAgY29uc3QgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7IFtQYXJhbWV0ZXJJZC5WaXN1YWxJZF06IHZpc3VhbElkIH07XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5HZXRTZWxlY3RlZE1hcmtzLCBwYXJhbWV0ZXJzKS50aGVuPENvbnRyYWN0Lk1hcmtzQ29sbGVjdGlvbj4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXNwb25zZS5yZXN1bHQgYXMgU2VsZWN0ZWRNYXJrc1RhYmxlO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YS5kYXRhLm1hcCh0YWJsZSA9PiB0aGlzLnByb2Nlc3NSZXN1bHRzVGFibGUodGFibGUsIHRydWUpKVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0SGlnaGxpZ2h0ZWRNYXJrc0FzeW5jKHZpc3VhbElkOiBWaXN1YWxJZCk6IFByb21pc2U8Q29udHJhY3QuTWFya3NDb2xsZWN0aW9uPiB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHsgW1BhcmFtZXRlcklkLlZpc3VhbElkXTogdmlzdWFsSWQgfTtcclxuICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaGVyLmV4ZWN1dGUoVmVyYklkLkdldEhpZ2hsaWdodGVkTWFya3MsIHBhcmFtZXRlcnMpLnRoZW48Q29udHJhY3QuTWFya3NDb2xsZWN0aW9uPihyZXNwb25zZSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3BvbnNlLnJlc3VsdCBhcyBIaWdobGlnaHRlZE1hcmtzVGFibGU7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLmRhdGEubWFwKHRhYmxlID0+IHRoaXMucHJvY2Vzc1Jlc3VsdHNUYWJsZSh0YWJsZSwgdHJ1ZSkpXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREYXRhU291cmNlRGF0YUFzeW5jKFxyXG4gICAgZGF0YVNvdXJjZUlkOiBzdHJpbmcsXHJcbiAgICBpZ25vcmVBbGlhc2VzOiBib29sZWFuLFxyXG4gICAgbWF4Um93czogbnVtYmVyLFxyXG4gICAgY29sdW1uc1RvSW5jbHVkZTogQXJyYXk8c3RyaW5nPik6IFByb21pc2U8RGF0YVRhYmxlPiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtZXRlcnM6IEV4ZWN1dGVQYXJhbWV0ZXJzID0ge1xyXG4gICAgICAgIFtQYXJhbWV0ZXJJZC5EYXRhU291cmNlSWRdOiBkYXRhU291cmNlSWQsXHJcbiAgICAgICAgW1BhcmFtZXRlcklkLklnbm9yZUFsaWFzZXNdOiBpZ25vcmVBbGlhc2VzLFxyXG4gICAgICAgIFtQYXJhbWV0ZXJJZC5NYXhSb3dzXTogbWF4Um93cyxcclxuICAgICAgICBbUGFyYW1ldGVySWQuQ29sdW1uc1RvSW5jbHVkZV06IGNvbHVtbnNUb0luY2x1ZGUsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5HZXREYXRhU291cmNlRGF0YSwgcGFyYW1ldGVycykudGhlbjxEYXRhVGFibGU+KHJlc3BvbnNlID0+IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXNwb25zZS5yZXN1bHQgYXMgVW5kZXJseWluZ0RhdGFUYWJsZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzUmVzdWx0c1RhYmxlKHJlc3BvbnNlRGF0YS5kYXRhLCBmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcHJvY2Vzc1Jlc3VsdHNUYWJsZShyZXNwb25zZURhdGE6IERhdGFUYWJsZUludGVybmFsQ29udHJhY3QsIGlzU3VtbWFyeTogYm9vbGVhbik6IERhdGFUYWJsZSB7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gcmVzcG9uc2VEYXRhLmhlYWRlcnMubWFwKGggPT4gbmV3IENvbHVtbihoLmZpZWxkQ2FwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udHJhY3QuRGF0YVR5cGUuU3RyaW5nIC8qaC5EYXRhVHlwZSovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmlzUmVmZXJlbmNlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5pbmRleCkpO1xyXG4gICAgLy8gVE9ETyBUaGlzIHNob3VsZCBiZSBjb250cm9sbGVkIGJ5IGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyBhcGkgd2lsbCByZXNwb25kIG1hcmtzIGluZm8gb3Igbm90XHJcbiAgICBsZXQgbWFya3M7XHJcbiAgICBpZiAocmVzcG9uc2VEYXRhLm1hcmtzKSB7XHJcbiAgICAgIG1hcmtzID0gcmVzcG9uc2VEYXRhLm1hcmtzLm1hcChoID0+IG5ldyBNYXJrSW5mbyhoLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnR1cGxlSWQpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRhYmxlID0gcmVzcG9uc2VEYXRhLmRhdGFUYWJsZS5tYXAocm93ID0+IHtcclxuICAgICAgcmV0dXJuIHJvdy5tYXAoY2VsbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmFsdWUoY2VsbC52YWx1ZSwgY2VsbC5mb3JtYXR0ZWRWYWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKG1hcmtzKSB7XHJcbiAgICAgIHJldHVybiBuZXcgRGF0YVRhYmxlKHRhYmxlLCBoZWFkZXJzLCB0YWJsZS5sZW5ndGgsIGlzU3VtbWFyeSwgbWFya3MpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBEYXRhVGFibGUodGFibGUsIGhlYWRlcnMsIHRhYmxlLmxlbmd0aCwgaXNTdW1tYXJ5KTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TZXJ2aWNlcy9pbXBsL0dldERhdGFTZXJ2aWNlSW1wbC50c1xuICoqLyIsImltcG9ydCB7IEludGVybmFsQXBpRGlzcGF0Y2hlciwgTW9kZWwsIE5vdGlmaWNhdGlvbiwgTm90aWZpY2F0aW9uSWQgfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSwgVW5yZWdpc3RlckZuIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uU2VydmljZSc7XHJcbmltcG9ydCB7IFNlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VSZWdpc3RyeSc7XHJcblxyXG5jbGFzcyBSZWdpc3RyYXRpb24ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX2ZpbHRlckZuOiAobm90aWZpY2F0aW9uTW9kZWw6IE1vZGVsKSA9PiBib29sZWFuLFxyXG4gICAgcHJpdmF0ZSBfY2FsbGJhY2tGbjogKG5vdGlmaWNhdGlvbk1vZGVsOiBNb2RlbCkgPT4gdm9pZCkge1xyXG4gICAgICAvLyBOb3RoaW5nIEhlcmVcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvbk5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Nb2RlbDogTW9kZWwpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9maWx0ZXJGbihub3RpZmljYXRpb25Nb2RlbCkpIHtcclxuICAgICAgdGhpcy5fY2FsbGJhY2tGbihub3RpZmljYXRpb25Nb2RlbCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uU2VydmljZUltcGwgaW1wbGVtZW50cyBOb3RpZmljYXRpb25TZXJ2aWNlIHtcclxuICBwcml2YXRlIF9oYW5kbGVyczogeyBbbm90aWZpY2F0aW9uSWQ6IHN0cmluZ106IEFycmF5PFJlZ2lzdHJhdGlvbj4gfTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKSB7XHJcbiAgICB0aGlzLl9oYW5kbGVycyA9IHt9O1xyXG4gICAgdGhpcy5kaXNwYXRjaGVyLnJlZ2lzdGVyTm90aWZpY2F0aW9uSGFuZGxlcih0aGlzLm9uTm90aWZpY2F0aW9uLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBzZXJ2aWNlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFNlcnZpY2VOYW1lcy5Ob3RpZmljYXRpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVnaXN0ZXJIYW5kbGVyKGlkOiBOb3RpZmljYXRpb25JZCwgZmlsdGVyRm46IChtb2RlbDogTW9kZWwpID0+IGJvb2xlYW4sIGhhbmRsZXI6IChtb2RlbDogTW9kZWwpID0+IHZvaWQpOiBVbnJlZ2lzdGVyRm4ge1xyXG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVyc1tpZF0gfHwgbmV3IEFycmF5PFJlZ2lzdHJhdGlvbj4oKTtcclxuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IG5ldyBSZWdpc3RyYXRpb24oZmlsdGVyRm4sIGhhbmRsZXIpO1xyXG4gICAgaGFuZGxlcnMucHVzaChyZWdpc3RyYXRpb24pO1xyXG4gICAgdGhpcy5faGFuZGxlcnNbaWRdID0gaGFuZGxlcnM7XHJcbiAgICByZXR1cm4gKCkgPT4gdGhpcy5yZW1vdmVSZWdpc3RyYXRpb24oaWQsIHJlZ2lzdHJhdGlvbik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhc0hhbmRsZXJzRm9yTm90aWZpY2F0aW9uVHlwZShpZDogTm90aWZpY2F0aW9uSWQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9oYW5kbGVycy5oYXNPd25Qcm9wZXJ0eShpZCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaGFzSGFuZGxlcnNGb3JOb3RpZmljYXRpb25UeXBlKG5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25JZCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdvIHRocm91Z2ggYW5kIGNoZWNrIGZvciBhbGwgdGhlIGhhbmRsZXJzIG9mIHRoaXMgcGFydGljdWxhciBub3RpZmljYXRpb25cclxuICAgIHRoaXMuX2hhbmRsZXJzW25vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25JZF0uZm9yRWFjaChoID0+IGgub25Ob3RpZmljYXRpb24obm90aWZpY2F0aW9uLmRhdGEpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVtb3ZlUmVnaXN0cmF0aW9uKGlkOiBOb3RpZmljYXRpb25JZCwgcmVnaXN0cmF0aW9uOiBSZWdpc3RyYXRpb24pOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5oYXNIYW5kbGVyc0Zvck5vdGlmaWNhdGlvblR5cGUoaWQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9oYW5kbGVyc1tpZF0gPSB0aGlzLl9oYW5kbGVyc1tpZF0uZmlsdGVyKHJlZyA9PiByZWcgIT09IHJlZ2lzdHJhdGlvbik7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvU2VydmljZXMvaW1wbC9Ob3RpZmljYXRpb25TZXJ2aWNlSW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7XHJcbiAgRXhlY3V0ZVBhcmFtZXRlcnMsXHJcbiAgSW50ZXJuYWxBcGlEaXNwYXRjaGVyLFxyXG4gIE1vZGVsLFxyXG4gIFBhcmFtZXRlcklkLFxyXG4gIFBhcmFtZXRlckluZm8sXHJcbiAgU2hlZXRQYXRoLFxyXG4gIFZlcmJJZCxcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuXHJcbmltcG9ydCB7IFBhcmFtZXRlckltcGwgfSBmcm9tICcuLi8uLi9JbXBsL1BhcmFtZXRlckltcGwnO1xyXG5pbXBvcnQgeyBQYXJhbWV0ZXIgfSBmcm9tICcuLi8uLi9QYXJhbWV0ZXInO1xyXG5pbXBvcnQgeyBQYXJhbWV0ZXJzU2VydmljZSB9IGZyb20gJy4uL1BhcmFtZXRlcnNTZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vU2VydmljZVJlZ2lzdHJ5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJzU2VydmljZUltcGwgaW1wbGVtZW50cyBQYXJhbWV0ZXJzU2VydmljZSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNlcnZpY2VOYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU2VydmljZU5hbWVzLlBhcmFtZXRlcnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UGFyYW1ldGVyc0ZvclNoZWV0QXN5bmMoc2hlZXRQYXRoOiBTaGVldFBhdGgsIHNoZWV0OiBDb250cmFjdC5TaGVldCk6IFByb21pc2U8QXJyYXk8UGFyYW1ldGVyPj4ge1xyXG4gICAgY29uc3QgcGFyYW1ldGVycyA9IHtcclxuICAgICAgW1BhcmFtZXRlcklkLlNoZWV0UGF0aF06IHNoZWV0UGF0aFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyLmV4ZWN1dGUoVmVyYklkLkdldFBhcmFtZXRlcnNGb3JTaGVldCwgcGFyYW1ldGVycykudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIC8vIFRPRE8gLSBDaGVjayBmb3IgZXJyb3JcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdCBhcyBBcnJheTxQYXJhbWV0ZXJJbmZvPjtcclxuICAgICAgcmV0dXJuIHJlc3VsdC5tYXAocGFyYW1ldGVySW5mbyA9PiB7XHJcbiAgICAgICAgY29uc3QgaW1wbCA9IG5ldyBQYXJhbWV0ZXJJbXBsKHBhcmFtZXRlckluZm8pO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1ldGVyKGltcGwsIHNoZWV0KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjaGFuZ2VQYXJhbWV0ZXJWYWx1ZUFzeW5jKGZpZWxkTmFtZTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nKTogUHJvbWlzZTxQYXJhbWV0ZXJJbmZvPiB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzID0ge1xyXG4gICAgICBbUGFyYW1ldGVySWQuUGFyYW1ldGVyRmllbGROYW1lXTogZmllbGROYW1lLFxyXG4gICAgICBbUGFyYW1ldGVySWQuUGFyYW1ldGVyVmFsdWVdOiBuZXdWYWx1ZVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyLmV4ZWN1dGUoVmVyYklkLkNoYW5nZVBhcmFtZXRlclZhbHVlLCBwYXJhbWV0ZXJzKS50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0IGFzIFBhcmFtZXRlckluZm87XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmaW5kUGFyYW1ldGVyQnlOYW1lQXN5bmMobmFtZTogc3RyaW5nLCBzaGVldDogQ29udHJhY3QuU2hlZXQpOiBQcm9taXNlPFBhcmFtZXRlciB8IHVuZGVmaW5lZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmluZFBhcmFtZXRlckFzeW5jKHNoZWV0LCBuYW1lLCB1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZpbmRQYXJhbWV0ZXJCeUdsb2JhbEZpZWxkTmFtZUFzeW5jKGZpZWxkTmFtZTogc3RyaW5nLCBzaGVldDogQ29udHJhY3QuU2hlZXQpOiBQcm9taXNlPFBhcmFtZXRlciB8IHVuZGVmaW5lZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmluZFBhcmFtZXRlckFzeW5jKHNoZWV0LCB1bmRlZmluZWQsIGZpZWxkTmFtZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZpbmRQYXJhbWV0ZXJBc3luYyhcclxuICAgIHNoZWV0OiBDb250cmFjdC5TaGVldCxcclxuICAgIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgIGZpZWxkTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxQYXJhbWV0ZXIgfCB1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IHBhcmFtZXRlcnM6IEV4ZWN1dGVQYXJhbWV0ZXJzID0ge307XHJcbiAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuUGFyYW1ldGVyQ2FwdGlvbl0gPSBuYW1lO1xyXG4gICAgfSBlbHNlIGlmIChmaWVsZE5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwYXJhbWV0ZXJzW1BhcmFtZXRlcklkLlBhcmFtZXRlckZpZWxkTmFtZV0gPSBmaWVsZE5hbWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLm1pc3NpbmdQYXJhbWV0ZXIoWydmaWVsZCBuYW1lIG9yIGNhcHRpb24nXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5GaW5kUGFyYW1ldGVyLCBwYXJhbWV0ZXJzKS50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgY29uc3QgaW5zdGFuY2VPZlBhcmFtZXRlckluZm8gPSAob2JqZWN0OiBNb2RlbCk6IG9iamVjdCBpcyBQYXJhbWV0ZXJJbmZvID0+IHtcclxuICAgICAgICByZXR1cm4gJ2ZpZWxkTmFtZScgaW4gb2JqZWN0O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayB0byBzZWUgaWYgd2UgZ290IGEgdmFsaWQgcmVzcG9uc2UgYmFjayBhZ2FpblxyXG4gICAgICBpZiAoaW5zdGFuY2VPZlBhcmFtZXRlckluZm8ocmVzcG9uc2UucmVzdWx0KSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdCBhcyBQYXJhbWV0ZXJJbmZvO1xyXG4gICAgICAgIGNvbnN0IGltcGwgPSBuZXcgUGFyYW1ldGVySW1wbChyZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1ldGVyKGltcGwsIHNoZWV0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9TZXJ2aWNlcy9pbXBsL1BhcmFtZXRlcnNTZXJ2aWNlSW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbklkLCBQYXJhbWV0ZXJJbmZvIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgUGFyYW0gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgSW50ZXJuYWxUb0V4dGVybmFsRW51bU1hcHBpbmdzIH0gZnJvbSAnLi4vRW51bU1hcHBpbmdzL0ludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncyc7XHJcbmltcG9ydCB7IFBhcmFtZXRlckNoYW5nZWRFdmVudCB9IGZyb20gJy4uL0V2ZW50cy9QYXJhbWV0ZXJDaGFuZ2VkRXZlbnQnO1xyXG5pbXBvcnQgeyBEYXRhVmFsdWUgfSBmcm9tICcuLi9Nb2RlbHMvR2V0RGF0YU1vZGVscyc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9TZXJ2aWNlcy9Ob3RpZmljYXRpb25TZXJ2aWNlJztcclxuaW1wb3J0IHsgUGFyYW1ldGVyc1NlcnZpY2UgfSBmcm9tICcuLi9TZXJ2aWNlcy9QYXJhbWV0ZXJzU2VydmljZSc7XHJcbmltcG9ydCB7IEFwaVNlcnZpY2VSZWdpc3RyeSwgU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vU2VydmljZXMvU2VydmljZVJlZ2lzdHJ5JztcclxuaW1wb3J0IHsgU2luZ2xlRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi4vU2luZ2xlRXZlbnRNYW5hZ2VyJztcclxuaW1wb3J0IHsgU2luZ2xlRXZlbnRNYW5hZ2VySW1wbCB9IGZyb20gJy4vU2luZ2xlRXZlbnRNYW5hZ2VySW1wbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVySW1wbCB7XHJcbiAgcHJpdmF0ZSBfYWxsb3dhYmxlVmFsdWVzOiBDb250cmFjdC5QYXJhbWV0ZXJEb21haW5SZXN0cmljdGlvbjtcclxuICBwcml2YXRlIF9nbG9iYWxGaWVsZE5hbWU6IHN0cmluZztcclxuICBwcml2YXRlIF9wYXJhbWV0ZXJJbmZvOiBQYXJhbWV0ZXJJbmZvO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IocGFyYW1ldGVySW5mbzogUGFyYW1ldGVySW5mbykge1xyXG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJJbmZvKHBhcmFtZXRlckluZm8pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVySW5mby5uYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjdXJyZW50VmFsdWUoKTogRGF0YVZhbHVlIHtcclxuICAgIHJldHVybiBuZXcgRGF0YVZhbHVlKHRoaXMuX3BhcmFtZXRlckluZm8uY3VycmVudFZhbHVlLnZhbHVlLCB0aGlzLl9wYXJhbWV0ZXJJbmZvLmN1cnJlbnRWYWx1ZS5mb3JtYXR0ZWRWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRhdGFUeXBlKCk6IENvbnRyYWN0LkRhdGFUeXBlIHtcclxuICAgIHJldHVybiBJbnRlcm5hbFRvRXh0ZXJuYWxFbnVtTWFwcGluZ3MuZGF0YVR5cGUuY29udmVydCh0aGlzLl9wYXJhbWV0ZXJJbmZvLmRhdGFUeXBlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9nbG9iYWxGaWVsZE5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGFsbG93YWJsZVZhbHVlcygpOiBDb250cmFjdC5QYXJhbWV0ZXJEb21haW5SZXN0cmljdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dhYmxlVmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNoYW5nZVZhbHVlQXN5bmMobmV3VmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBEYXRlKTogUHJvbWlzZTxEYXRhVmFsdWU+IHtcclxuICAgIGxldCBjb2VyY2VkVmFsdWUgPSBQYXJhbS5zZXJpYWxpemVQYXJhbXRlclZhbHVlKG5ld1ZhbHVlKTtcclxuICAgIGNvbnN0IHBhcmFtZXRlcnNTZXJ2aWNlID0gQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLmdldFNlcnZpY2U8UGFyYW1ldGVyc1NlcnZpY2U+KFNlcnZpY2VOYW1lcy5QYXJhbWV0ZXJzKTtcclxuICAgIHJldHVybiBwYXJhbWV0ZXJzU2VydmljZS5jaGFuZ2VQYXJhbWV0ZXJWYWx1ZUFzeW5jKHRoaXMuX2dsb2JhbEZpZWxkTmFtZSwgY29lcmNlZFZhbHVlKS50aGVuKHBhcmFtZXRlckluZm8gPT4ge1xyXG4gICAgICB0aGlzLnNldFBhcmFtZXRlckluZm8ocGFyYW1ldGVySW5mbyk7XHJcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRWYWx1ZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGVscGVyIG1ldGhvZCB3aGljaCBnb2VzIHRocm91Z2ggYW5kIHJlZ2lzdGVycyBlYWNoIGV2ZW50IHR5cGUgdGhpcyBpbXBsIGtub3dzIGFib3V0XHJcbiAgICogd2l0aCB0aGUgTm90aWZpY2F0aW9uU2VydmljZS4gSXQgcmV0dXJucyBhbiBhcnJheSBvZiBTaW5nbGVFdmVudE1hbmFnZXIgb2JqZWN0cyB3aGljaFxyXG4gICAqIGNhbiB0aGVuIGJlIHBhc3NlZCB0byBhbiBFdmVudExpc3RlbmVyTWFuYWdlciB0byBoYW5kbGUgdXNlciByZWdpc3RyYXRpb24gLyB1bnJlZ2lzdHJhdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzaGVldCBUaGUgc2hlZXQgb2JqZWN0IHdoaWNoIHdpbGwgYmUgaW5jbHVkZWQgd2l0aCB0aGUgZXZlbnQgbm90aWZpY2F0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtBcnJheTxTaW5nbGVFdmVudE1hbmFnZXI+fSBDb2xsZWN0aW9uIG9mIGV2ZW50IG1hbmFnZXJzIHRvIHBhc3MgdG8gYW4gRXZlbnRMaXN0ZW5lck1hbmFnZXJcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhbGl6ZUV2ZW50cyhzaGVldDogQ29udHJhY3QuU2hlZXQpOiBBcnJheTxTaW5nbGVFdmVudE1hbmFnZXI+IHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXk8U2luZ2xlRXZlbnRNYW5hZ2VyPigpO1xyXG4gICAgbGV0IG5vdGlmaWNhdGlvblNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2U7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgbm90aWZpY2F0aW9uU2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPE5vdGlmaWNhdGlvblNlcnZpY2U+KFNlcnZpY2VOYW1lcy5Ob3RpZmljYXRpb24pO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIHRoaXMgc2VydmljZSByZWdpc3RlcmVkLCBqdXN0IHJldHVyblxyXG4gICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIGFsbCBvZiB0aGUgZXZlbnQgbWFuYWdlcnMgd2UnbGwgbmVlZCAob25lIGZvciBlYWNoIGV2ZW50IHR5cGUpXHJcbiAgICBjb25zdCBwYXJhbWV0ZXJFdmVudCA9IG5ldyBTaW5nbGVFdmVudE1hbmFnZXJJbXBsPFBhcmFtZXRlckNoYW5nZWRFdmVudD4oQ29udHJhY3QuVGFibGVhdUV2ZW50VHlwZS5QYXJhbWV0ZXJDaGFuZ2VkKTtcclxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2UucmVnaXN0ZXJIYW5kbGVyKE5vdGlmaWNhdGlvbklkLlBhcmFtZXRlckNoYW5nZWQsIChtb2RlbCkgPT4ge1xyXG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBtb2RlbCBhcyBzdHJpbmc7XHJcbiAgICAgIHJldHVybiBmaWVsZE5hbWUgPT09IHRoaXMuX2dsb2JhbEZpZWxkTmFtZTtcclxuICAgIH0sIChmaWVsZE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBwYXJhbWV0ZXJFdmVudC50cmlnZ2VyRXZlbnQoKCkgPT4gbmV3IFBhcmFtZXRlckNoYW5nZWRFdmVudChmaWVsZE5hbWUsIHNoZWV0KSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXN1bHRzLnB1c2gocGFyYW1ldGVyRXZlbnQpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRQYXJhbWV0ZXJJbmZvKHBhcmFtZXRlckluZm86IFBhcmFtZXRlckluZm8pOiB2b2lkIHtcclxuICAgIHRoaXMuX3BhcmFtZXRlckluZm8gPSBwYXJhbWV0ZXJJbmZvO1xyXG4gICAgdGhpcy5fZ2xvYmFsRmllbGROYW1lID0gcGFyYW1ldGVySW5mby5maWVsZE5hbWU7XHJcblxyXG4gICAgY29uc3QgdHlwZSA9IEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncy5hbGxvd2FibGVWYWx1ZXMuY29udmVydChwYXJhbWV0ZXJJbmZvLmFsbG93YWJsZVZhbHVlc1R5cGUpO1xyXG4gICAgbGV0IGxpc3RWYWx1ZXM6IEFycmF5PERhdGFWYWx1ZT4gfCB1bmRlZmluZWQ7XHJcbiAgICBsZXQgbWluVmFsdWU6IERhdGFWYWx1ZSB8IHVuZGVmaW5lZDtcclxuICAgIGxldCBtYXhWYWx1ZTogRGF0YVZhbHVlIHwgdW5kZWZpbmVkO1xyXG4gICAgbGV0IHN0ZXBTaXplOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICBsZXQgZGF0ZVN0ZXBQZXJpb2Q6IENvbnRyYWN0LlBlcmlvZFR5cGUgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IENvbnRyYWN0LlBhcmFtZXRlclZhbHVlVHlwZS5MaXN0KSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IHBhcmFtZXRlckluZm8uYWxsb3dhYmxlVmFsdWVzIHx8IFtdO1xyXG4gICAgICBsaXN0VmFsdWVzID0gdmFsdWVzLm1hcCh2YWwgPT4gbmV3IERhdGFWYWx1ZSh2YWwudmFsdWUsIHZhbC5mb3JtYXR0ZWRWYWx1ZSkpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBDb250cmFjdC5QYXJhbWV0ZXJWYWx1ZVR5cGUuUmFuZ2UpIHtcclxuICAgICAgbWluVmFsdWUgPSBwYXJhbWV0ZXJJbmZvLm1pblZhbHVlICYmIG5ldyBEYXRhVmFsdWUocGFyYW1ldGVySW5mby5taW5WYWx1ZS52YWx1ZSwgcGFyYW1ldGVySW5mby5taW5WYWx1ZS5mb3JtYXR0ZWRWYWx1ZSk7XHJcbiAgICAgIG1heFZhbHVlID0gcGFyYW1ldGVySW5mby5tYXhWYWx1ZSAmJiBuZXcgRGF0YVZhbHVlKHBhcmFtZXRlckluZm8ubWF4VmFsdWUudmFsdWUsIHBhcmFtZXRlckluZm8ubWF4VmFsdWUuZm9ybWF0dGVkVmFsdWUpO1xyXG4gICAgICBzdGVwU2l6ZSA9IHBhcmFtZXRlckluZm8uc3RlcFNpemU7XHJcbiAgICAgIGRhdGVTdGVwUGVyaW9kID0gcGFyYW1ldGVySW5mby5kYXRlU3RlcFBlcmlvZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgIEludGVybmFsVG9FeHRlcm5hbEVudW1NYXBwaW5ncy5kYXRlU3RlcFBlcmlvZC5jb252ZXJ0KHBhcmFtZXRlckluZm8uZGF0ZVN0ZXBQZXJpb2QpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2FsbG93YWJsZVZhbHVlcyA9IHtcclxuICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgYWxsb3dhYmxlVmFsdWVzOiBsaXN0VmFsdWVzLFxyXG4gICAgICBtaW5WYWx1ZTogbWluVmFsdWUsXHJcbiAgICAgIG1heFZhbHVlOiBtYXhWYWx1ZSxcclxuICAgICAgc3RlcFNpemU6IHN0ZXBTaXplLFxyXG4gICAgICBkYXRlU3RlcFBlcmlvZDogZGF0ZVN0ZXBQZXJpb2RcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvSW1wbC9QYXJhbWV0ZXJJbXBsLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcbmltcG9ydCB7IFBhcmFtZXRlcnNTZXJ2aWNlIH0gZnJvbSAnLi4vU2VydmljZXMvUGFyYW1ldGVyc1NlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlUmVnaXN0cnksIFNlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VzL1NlcnZpY2VSZWdpc3RyeSc7XHJcbmltcG9ydCB7IFRhYmxlYXVTaGVldEV2ZW50IH0gZnJvbSAnLi9UYWJsZWF1U2hlZXRFdmVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVyQ2hhbmdlZEV2ZW50IGV4dGVuZHMgVGFibGVhdVNoZWV0RXZlbnQgaW1wbGVtZW50cyBDb250cmFjdC5QYXJhbWV0ZXJDaGFuZ2VkRXZlbnQge1xyXG4gIHByaXZhdGUgc3RhdGljIFBBUkFNX05PVF9GT1VORDogc3RyaW5nID0gJ1VuYWJsZSB0byBmaW5kIHBhcmFtZXRlcic7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2dsb2JhbEZpZWxkTmFtZTogc3RyaW5nLCBzaGVldDogQ29udHJhY3QuU2hlZXQpIHtcclxuICAgIHN1cGVyKENvbnRyYWN0LlRhYmxlYXVFdmVudFR5cGUuUGFyYW1ldGVyQ2hhbmdlZCwgc2hlZXQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFBhcmFtZXRlckFzeW5jKCk6IFByb21pc2U8Q29udHJhY3QuUGFyYW1ldGVyPiB7XHJcbiAgICAvLyBDYWxsIGRvd24gdG8gb3VyIHNlcnZpY2UgdG8gZ2V0IHRoZSBwYXJhbWV0ZXIgYmFjayB2aWEgaXRzIGZpZWxkIG5hbWVcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxQYXJhbWV0ZXJzU2VydmljZT4oU2VydmljZU5hbWVzLlBhcmFtZXRlcnMpO1xyXG4gICAgcmV0dXJuIHNlcnZpY2UuZmluZFBhcmFtZXRlckJ5R2xvYmFsRmllbGROYW1lQXN5bmModGhpcy5fZ2xvYmFsRmllbGROYW1lLCB0aGlzLnNoZWV0KS50aGVuKHBhcmFtZXRlciA9PiB7XHJcbiAgICAgIGlmIChwYXJhbWV0ZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uZXJyb3IoUGFyYW1ldGVyQ2hhbmdlZEV2ZW50LlBBUkFNX05PVF9GT1VORCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwYXJhbWV0ZXI7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9FdmVudHMvUGFyYW1ldGVyQ2hhbmdlZEV2ZW50LnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJNYW5hZ2VyIH0gZnJvbSAnLi9FdmVudExpc3RlbmVyTWFuYWdlcic7XHJcbmltcG9ydCB7IFBhcmFtZXRlckltcGwgfSBmcm9tICcuL0ltcGwvUGFyYW1ldGVySW1wbCc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIFBhcmFtZXRlciBjb250cmFjdC4gQ2FsbHMgZG93biB0byB0aGUgaW1wbFxyXG4gKiBjbGFzcyBmb3IgYWxtb3N0IGFsbCBvZiB0aGUgd29yayBpdCBkb2VzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBhcmFtZXRlciBleHRlbmRzIEV2ZW50TGlzdGVuZXJNYW5hZ2VyIGltcGxlbWVudHMgQ29udHJhY3QuUGFyYW1ldGVyIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJhbWV0ZXJJbXBsOiBQYXJhbWV0ZXJJbXBsLCBzaGVldDogQ29udHJhY3QuU2hlZXQpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBvdXIgZXZlbnQgaGFuZGxpbmcgZm9yIHRoaXMgY2xhc3NcclxuICAgIHRoaXMucGFyYW1ldGVySW1wbC5pbml0aWFsaXplRXZlbnRzKHNoZWV0KS5mb3JFYWNoKGUgPT4gdGhpcy5hZGROZXdFdmVudFR5cGUoZSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJJbXBsLm5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGN1cnJlbnRWYWx1ZSgpOiBDb250cmFjdC5EYXRhVmFsdWUge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyYW1ldGVySW1wbC5jdXJyZW50VmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRhdGFUeXBlKCk6IENvbnRyYWN0LkRhdGFUeXBlIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmFtZXRlckltcGwuZGF0YVR5cGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGFsbG93YWJsZVZhbHVlcygpOiBDb250cmFjdC5QYXJhbWV0ZXJEb21haW5SZXN0cmljdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJJbXBsLmFsbG93YWJsZVZhbHVlcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmFtZXRlckltcGwuaWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2hhbmdlVmFsdWVBc3luYyhuZXdWYWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IERhdGUpOiBQcm9taXNlPENvbnRyYWN0LkRhdGFWYWx1ZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyYW1ldGVySW1wbC5jaGFuZ2VWYWx1ZUFzeW5jKG5ld1ZhbHVlKTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktc2hhcmVkL3NyYy9QYXJhbWV0ZXIudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIEV4ZWN1dGVQYXJhbWV0ZXJzLFxyXG4gIEludGVybmFsQXBpRGlzcGF0Y2hlcixcclxuICBQYXJhbWV0ZXJJZCxcclxuICBRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlcyxcclxuICBTZWxlY3Rpb25VcGRhdGVUeXBlIGFzIFNlbGVjdGlvblVwZGF0ZVR5cGVJbnRlcm5hbCxcclxuICBWZXJiSWQsXHJcbiAgVmlzdWFsSWRcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuaW1wb3J0IHsgRGltZW5zaW9uU2VsZWN0aW9uTW9kZWwsXHJcbiAgSGllcmFyY2hpY2FsU2VsZWN0aW9uTW9kZWwsXHJcbiAgUmFuZ2VTZWxlY3Rpb25Nb2RlbCxcclxuICBTZWxlY3Rpb25Nb2RlbHNDb250YWluZXIsXHJcbiAgVHVwbGVTZWxlY3Rpb25Nb2RlbCxcclxuICBWYWx1ZVNlbGVjdGlvbk1vZGVsXHJcbn0gZnJvbSAnLi4vLi4vTW9kZWxzL1NlbGVjdGlvbk1vZGVscyc7XHJcbmltcG9ydCB7IFNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuLi9TZWxlY3Rpb25TZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vU2VydmljZVJlZ2lzdHJ5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25TZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIFNlbGVjdGlvblNlcnZpY2Uge1xyXG4gIHByaXZhdGUgX2Rpc3BhdGNoZXI6IEludGVybmFsQXBpRGlzcGF0Y2hlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGRpc3BhdGNoZXI6IEludGVybmFsQXBpRGlzcGF0Y2hlcikge1xyXG4gICAgdGhpcy5fZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNlcnZpY2VOYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU2VydmljZU5hbWVzLlNlbGVjdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCB0byBjbGVhciBhbGwgdGhlIHNlbGVjdGVkIG1hcmtzIGZvciB0aGUgZ2l2ZW4gd29ya3NoZWV0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHZpc3VhbElkXHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFyU2VsZWN0ZWRNYXJrc0FzeW5jKHZpc3VhbElkOiBWaXN1YWxJZCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7W1BhcmFtZXRlcklkLlZpc3VhbElkXTogdmlzdWFsSWR9O1xyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoZXIuZXhlY3V0ZShWZXJiSWQuQ2xlYXJTZWxlY3RlZE1hcmtzLCBwYXJhbWV0ZXJzKS50aGVuPHZvaWQ+KHJlc3BvbnNlID0+IHtcclxuICAgICAgcmV0dXJuIDsgLy8gRXhwZWN0aW5nIGFuIGVtcHR5IG1vZGVsIGFuZCBoZW5jZSB0aGUgdm9pZCByZXNwb25zZS5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHRvIHNlbGVjdCBtYXJrcyBmb3IgdGhlIGdpdmVuIHdvcmtzaGVldC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB2aXN1YWxJZFxyXG4gICAqIEBwYXJhbSBzZWxlY3Rpb25Dcml0ZXJpYVxyXG4gICAqIEBwYXJhbSBzZWxlY3Rpb25VcGRhdGVUeXBlXHJcbiAgICovXHJcbiAgcHVibGljIHNlbGVjdE1hcmtzQnlWYWx1ZUFzeW5jKHZpc3VhbElkOiBWaXN1YWxJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uQ3JpdGVyaWFzOiBBcnJheTxDb250cmFjdC5TZWxlY3Rpb25Dcml0ZXJpYT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblVwZGF0ZVR5cGU6IENvbnRyYWN0LlNlbGVjdGlvblVwZGF0ZVR5cGUpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmIChzZWxlY3Rpb25Dcml0ZXJpYXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uaW52YWxpZChbJ1NlbGVjdGlvbiBjcml0ZXJpYScsICdTZWxlY3Rpb25zIG1pc3NpbmcuJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNlbGVjdGlvblR5cGU6IHN0cmluZyA9IHRoaXMudmFsaWRhdGVTZWxlY3Rpb25VcGRhdGVUeXBlKHNlbGVjdGlvblVwZGF0ZVR5cGUpO1xyXG4gICAgbGV0IHNlbGVjdGlvbkNyaXRlcmlhVHlwZTogU2VsZWN0aW9uQ3JpdGVyaWFUeXBlID0gdGhpcy52YWxpZGF0ZVNlbGVjdGlvbkNyaXRlcmlhKHNlbGVjdGlvbkNyaXRlcmlhc1swXSk7XHJcbiAgICBsZXQgc2VsZWN0aW9uTW9kZWxDb250YWluZXI6IFNlbGVjdGlvbk1vZGVsc0NvbnRhaW5lciA9IHRoaXMucGFyc2VTZWxlY3Rpb25NYXJrcyhzZWxlY3Rpb25Dcml0ZXJpYXMsIHNlbGVjdGlvbkNyaXRlcmlhVHlwZSk7XHJcblxyXG4gICAgY29uc3QgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7XHJcbiAgICAgIFtQYXJhbWV0ZXJJZC5WaXN1YWxJZF06IHZpc3VhbElkLFxyXG4gICAgICBbUGFyYW1ldGVySWQuU2VsZWN0aW9uVXBkYXRlVHlwZV06IHNlbGVjdGlvblR5cGVcclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoIChzZWxlY3Rpb25Dcml0ZXJpYVR5cGUpIHtcclxuICAgICAgY2FzZSBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUuSGllcmFyY2hpY2FsVHlwZToge1xyXG4gICAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuSGllclZhbFNlbGVjdGlvbk1vZGVsc10gPSBzZWxlY3Rpb25Nb2RlbENvbnRhaW5lci5oaWVyTW9kZWxBcnI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUuUmFuZ2VUeXBlOiB7XHJcbiAgICAgICAgcGFyYW1ldGVyc1tQYXJhbWV0ZXJJZC5RdWFudFJhbmdlU2VsZWN0aW9uTW9kZWxzXSA9IHNlbGVjdGlvbk1vZGVsQ29udGFpbmVyLnF1YW50TW9kZWxBcnI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUuRGltZW5zaW9uVHlwZToge1xyXG4gICAgICAgIHBhcmFtZXRlcnNbUGFyYW1ldGVySWQuRGltVmFsU2VsZWN0aW9uTW9kZWxzXSA9IHNlbGVjdGlvbk1vZGVsQ29udGFpbmVyLmRpbU1vZGVsQXJyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5TZWxlY3RCeVZhbHVlLCBwYXJhbWV0ZXJzKS50aGVuPHZvaWQ+KHJlc3BvbnNlID0+IHtcclxuICAgICAgLy8gRXhwZWN0aW5nIGFuIGVtcHR5IG1vZGVsIGFuZCBoZW5jZSB0aGUgdm9pZCByZXNwb25zZS5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgICAvLyBUT0RPIEludmVzdGlnYXRlIHRoZSBlcnJvciByZXNwb25zZSB3aXRoIG11bHRpcGxlIG91dHB1dCBwYXJhbXMgYW5kIHRocm93IGVycm9yIGFjY29yZGluZ2x5LlxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAqIE1ldGhvZCB0byBzZWxlY3QgbWFya3MgZm9yIHRoZSBnaXZlbiB3b3Jrc2hlZXQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdmlzdWFsSWRcclxuICAgKiBAcGFyYW0gTWFya0luZm9cclxuICAgKiBAcGFyYW0gc2VsZWN0aW9uVXBkYXRlVHlwZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZWxlY3RNYXJrc0J5SWRBc3luYyh2aXN1YWxJZDogVmlzdWFsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtzOiBBcnJheTxDb250cmFjdC5NYXJrSW5mbz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblVwZGF0ZVR5cGU6IENvbnRyYWN0LlNlbGVjdGlvblVwZGF0ZVR5cGUpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmIChtYXJrcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkKFsnU2VsZWN0aW9uJywgJ01hcmtzIGluZm8gbWlzc2luZy4nXSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2VsZWN0aW9uVHlwZTogc3RyaW5nID0gdGhpcy52YWxpZGF0ZVNlbGVjdGlvblVwZGF0ZVR5cGUoc2VsZWN0aW9uVXBkYXRlVHlwZSk7XHJcbiAgICBsZXQgc2VsZWN0aW9uTW9kZWxDb250YWluZXI6IFNlbGVjdGlvbk1vZGVsc0NvbnRhaW5lciA9IHRoaXMucGFyc2VTZWxlY3Rpb25JZHMobWFya3MpO1xyXG5cclxuICAgIGNvbnN0IHBhcmFtZXRlcnM6IEV4ZWN1dGVQYXJhbWV0ZXJzID0ge1xyXG4gICAgICBbUGFyYW1ldGVySWQuVmlzdWFsSWRdOiB2aXN1YWxJZCxcclxuICAgICAgW1BhcmFtZXRlcklkLlNlbGVjdGlvblVwZGF0ZVR5cGVdOiBzZWxlY3Rpb25UeXBlLFxyXG4gICAgICBbUGFyYW1ldGVySWQuU2VsZWN0aW9uXTogc2VsZWN0aW9uTW9kZWxDb250YWluZXIuc2VsZWN0aW9uXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoZXIuZXhlY3V0ZShWZXJiSWQuU2VsZWN0QnlWYWx1ZSwgcGFyYW1ldGVycykudGhlbjx2b2lkPihyZXNwb25zZSA9PiB7XHJcbiAgICAgIC8vIEV4cGVjdGluZyBhbiBlbXB0eSBtb2RlbCBhbmQgaGVuY2UgdGhlIHZvaWQgcmVzcG9uc2UuXHJcbiAgICAgIHJldHVybjtcclxuICAgICAgLy8gVE9ETyBJbnZlc3RpZ2F0ZSB0aGUgZXJyb3IgcmVzcG9uc2Ugd2l0aCBtdWx0aXBsZSBvdXRwdXQgcGFyYW1zIGFuZCB0aHJvdyBlcnJvciBhY2NvcmRpbmdseS5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHRvIHByZXBhcmUgdGhlIHByZXMgbW9kZWxzIGZvciBzZWxlY3Rpb24gYnkgTWFya3NJbmZvXHJcbiAgICogQHBhcmFtIG1hcmtzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwYXJzZVNlbGVjdGlvbklkcyhtYXJrczogQXJyYXk8Q29udHJhY3QuTWFya0luZm8+KTogU2VsZWN0aW9uTW9kZWxzQ29udGFpbmVyIHtcclxuICAgIGxldCBpZHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgIGxldCBzZWxlY3Rpb25Nb2RlbENvbnRhaW5lcjogU2VsZWN0aW9uTW9kZWxzQ29udGFpbmVyID0gbmV3IFNlbGVjdGlvbk1vZGVsc0NvbnRhaW5lcigpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgdHVwbGVJZDogTnVtYmVyIHwgdW5kZWZpbmVkICA9IG1hcmtzW2ldLnR1cGxlSWQ7XHJcbiAgICAgIGlmICh0dXBsZUlkICE9PSB1bmRlZmluZWQgJiYgdHVwbGVJZCAhPT0gbnVsbCkgeyAvLyBJZiB0dXBsZSBpZCBpcyBwcm92aWRlZCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHBhaXJcclxuICAgICAgICAgaWRzLnB1c2godHVwbGVJZC50b1N0cmluZygpKTsgLy8gY29sbGVjdCB0aGUgdHVwbGUgaWRzXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkKFsndHVwbGVJZCddKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlkcy5sZW5ndGggIT09IDApIHsgLy8gdHVwbGUgaWRzIGJhc2VkIHNlbGVjdGlvblxyXG4gICAgICBsZXQgdHVwbGVTZWxlY3Rpb25Nb2RlbDogVHVwbGVTZWxlY3Rpb25Nb2RlbCA9IG5ldyBUdXBsZVNlbGVjdGlvbk1vZGVsKCk7XHJcbiAgICAgIHR1cGxlU2VsZWN0aW9uTW9kZWwuc2VsZWN0aW9uVHlwZSA9ICd0dXBsZXMnO1xyXG4gICAgICB0dXBsZVNlbGVjdGlvbk1vZGVsLm9iamVjdElkcyA9IGlkcztcclxuICAgICAgc2VsZWN0aW9uTW9kZWxDb250YWluZXIuc2VsZWN0aW9uID0gdHVwbGVTZWxlY3Rpb25Nb2RlbDtcclxuICAgIH1cclxuICAgIHJldHVybiBzZWxlY3Rpb25Nb2RlbENvbnRhaW5lcjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHRvIHByZXBhcmUgdGhlIHByZXMgbW9kZWxzIGZvciBzZWxlY3Rpb24gYnkgdmFsdWVzLlxyXG4gICAqXHJcbiAgICogU3VwcG9ydHMgMyB0eXBlcyBmb3Igc2VsZWN0aW9uOlxyXG4gICAqIDEpIGhpZXJhcmNoaWNhbCB2YWx1ZSBiYXNlZCBzZWxlY3Rpb25cclxuICAgKiAyKSByYW5nZSB2YWx1ZSBiYXNlZCBzZWxlY3Rpb25cclxuICAgKiAzKSBEaW1lbnNpb24gdmFsdWUgYmFzZWQgc2VsZWN0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbWFya3NcclxuICAgKiBAcGFyYW0gaGllck1vZGVsQXJyXHJcbiAgICogQHBhcmFtIGRpbU1vZGVsQXJyXHJcbiAgICogQHBhcmFtIHF1YW50TW9kZWxBcnJcclxuICAgKiBAcGFyYW0gc2VsZWN0aW9uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwYXJzZVNlbGVjdGlvbk1hcmtzKHNlbGVjdGlvbkNyaXRlcmlhczogQXJyYXk8Q29udHJhY3QuU2VsZWN0aW9uQ3JpdGVyaWE+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25UeXBlOiBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUpOiBTZWxlY3Rpb25Nb2RlbHNDb250YWluZXIge1xyXG4gICAgbGV0IHNlbGVjdGlvbk1vZGVsQ29udGFpbmVyOiBTZWxlY3Rpb25Nb2RlbHNDb250YWluZXIgPSBuZXcgU2VsZWN0aW9uTW9kZWxzQ29udGFpbmVyKCk7XHJcbiAgICBsZXQgbWl4ZWRTZWxlY3Rpb25zRXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGlvbkNyaXRlcmlhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBzdCA9IHNlbGVjdGlvbkNyaXRlcmlhc1tpXTtcclxuICAgICAgaWYgKHN0LmZpZWxkTmFtZSAmJiAoc3QudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBzdC52YWx1ZSAhPT0gbnVsbCkpIHtcclxuICAgICAgICBsZXQgY2F0UmVnZXggPSBuZXcgUmVnRXhwKCcoXFxbW0EtWmEtejAtOV0rXSkuKicsICdnJyk7XHJcbiAgICAgICAgbGV0IHJhbmdlT3B0aW9uOiBDb250cmFjdC5SYW5nZVZhbHVlID0gc3QudmFsdWUgYXMgQ29udHJhY3QuUmFuZ2VWYWx1ZTtcclxuICAgICAgICBpZiAoY2F0UmVnZXgudGVzdChzdC5maWVsZE5hbWUpKSB7IC8vIEhpZXJhcmNoaWNhbCB2YWx1ZSBzZWxlY3Rpb25cclxuICAgICAgICAgIGlmIChzZWxlY3Rpb25UeXBlID09PSBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUuSGllcmFyY2hpY2FsVHlwZSkge1xyXG4gICAgICAgICAgICBsZXQgaGllck1vZGVsOiBIaWVyYXJjaGljYWxTZWxlY3Rpb25Nb2RlbCA9IDxIaWVyYXJjaGljYWxTZWxlY3Rpb25Nb2RlbD4gdGhpcy5hZGRUb1BhcmFtc0xpc3Qoc3QuZmllbGROYW1lLCBzdC52YWx1ZSk7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvbk1vZGVsQ29udGFpbmVyLmhpZXJNb2RlbEFyci5wdXNoKGhpZXJNb2RlbCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtaXhlZFNlbGVjdGlvbnNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoKDxDb250cmFjdC5SYW5nZVZhbHVlPiByYW5nZU9wdGlvbikubWluICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICYmICg8Q29udHJhY3QuUmFuZ2VWYWx1ZT4gcmFuZ2VPcHRpb24pLm1heCAhPT0gdW5kZWZpbmVkKSB7IC8vIFJhbmdlIHZhbHVlIHNlbGVjdGlvblxyXG4gICAgICAgICAgaWYgKHNlbGVjdGlvblR5cGUgPT09IFNlbGVjdGlvbkNyaXRlcmlhVHlwZS5SYW5nZVR5cGUpIHtcclxuICAgICAgICAgICAgbGV0IHF1YW50TW9kZWw6IFJhbmdlU2VsZWN0aW9uTW9kZWwgPSB0aGlzLmFkZFRvUmFuZ2VQYXJhbXNMaXN0KHN0LmZpZWxkTmFtZSwgcmFuZ2VPcHRpb24pO1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25Nb2RlbENvbnRhaW5lci5xdWFudE1vZGVsQXJyLnB1c2gocXVhbnRNb2RlbCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtaXhlZFNlbGVjdGlvbnNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7IC8vIERpbWVuc2lvbiB2YWx1ZSBzZWxlY3Rpb25cclxuICAgICAgICAgIGlmIChzZWxlY3Rpb25UeXBlID09PSBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUuRGltZW5zaW9uVHlwZSkge1xyXG4gICAgICAgICAgICBsZXQgZGltTW9kZWw6IERpbWVuc2lvblNlbGVjdGlvbk1vZGVsID0gPERpbWVuc2lvblNlbGVjdGlvbk1vZGVsPiB0aGlzLmFkZFRvUGFyYW1zTGlzdChzdC5maWVsZE5hbWUsIHN0LnZhbHVlKTtcclxuICAgICAgICAgICAgc2VsZWN0aW9uTW9kZWxDb250YWluZXIuZGltTW9kZWxBcnIucHVzaChkaW1Nb2RlbCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtaXhlZFNlbGVjdGlvbnNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChtaXhlZFNlbGVjdGlvbnNFcnJvcikge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmludmFsaWQoWydTZWxlY3Rpb24gQ3JpdGVyaWEnLCAnRGlmZmVyZW50IHR5cGVzIG9mIHNlbGVjdGlvbiBjcml0ZXJpYXMgcHJvdmlkZWQuJ10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlbGVjdGlvbk1vZGVsQ29udGFpbmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2VsZWN0aW9uQ3JpdGVyaWFzIFZhbGlkYXRlIGFuZCBkZXRlcm1pbmUgdGhlIHNlbGVjdGlvbiBjcml0ZXJpYXMgdHlwZS5cclxuICAgKi9cclxuICBwcml2YXRlIHZhbGlkYXRlU2VsZWN0aW9uQ3JpdGVyaWEoc2VsZWN0aW9uQ3JpdGVyaWE6IENvbnRyYWN0LlNlbGVjdGlvbkNyaXRlcmlhKTogU2VsZWN0aW9uQ3JpdGVyaWFUeXBlIHtcclxuICAgIGxldCBzZWxlY3Rpb25UeXBlOiBTZWxlY3Rpb25Dcml0ZXJpYVR5cGU7XHJcbiAgICAvLyBEZXRlcm1pbmUgdGhlIHR5cGUgb2Ygc2VsZWN0aW9uLCB0aGlzIGNvbW1hbmQgaXMgYnkgbG9va2luZyBhdCB0aGUgZmlyc3Qgc2VsZWN0aW9uXHJcbiAgICBsZXQgY3JpdDogQ29udHJhY3QuU2VsZWN0aW9uQ3JpdGVyaWEgPSBzZWxlY3Rpb25Dcml0ZXJpYTtcclxuXHJcbiAgICBsZXQgY2F0UmVnZXggPSBuZXcgUmVnRXhwKCcoXFxbW0EtWmEtejAtOV0rXSkuKicsICdnJyk7XHJcbiAgICBsZXQgcmFuZ2VPcHRpb246IENvbnRyYWN0LlJhbmdlVmFsdWUgPSBjcml0LnZhbHVlIGFzIENvbnRyYWN0LlJhbmdlVmFsdWU7XHJcblxyXG4gICAgaWYgKGNyaXQuZmllbGROYW1lICYmIChjcml0LnZhbHVlICE9PSB1bmRlZmluZWQgJiYgY3JpdC52YWx1ZSAhPT0gbnVsbCkpIHtcclxuICAgICAgaWYgKGNhdFJlZ2V4LnRlc3QoY3JpdC5maWVsZE5hbWUpKSB7IC8vIEhpZXJhcmNoaWNhbCB2YWx1ZSBzZWxlY3Rpb25cclxuICAgICAgICBzZWxlY3Rpb25UeXBlID0gU2VsZWN0aW9uQ3JpdGVyaWFUeXBlLkhpZXJhcmNoaWNhbFR5cGU7XHJcbiAgICAgIH0gZWxzZSBpZiAoKDxDb250cmFjdC5SYW5nZVZhbHVlPiByYW5nZU9wdGlvbikubWluICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICYmICg8Q29udHJhY3QuUmFuZ2VWYWx1ZT4gcmFuZ2VPcHRpb24pLm1heCAhPT0gdW5kZWZpbmVkKSB7IC8vIFJhbmdlIHZhbHVlIHNlbGVjdGlvblxyXG4gICAgICAgIHNlbGVjdGlvblR5cGUgPSBTZWxlY3Rpb25Dcml0ZXJpYVR5cGUuUmFuZ2VUeXBlO1xyXG4gICAgICB9IGVsc2UgeyAvLyBEaW1lcnNpb24gdmFsdWUgc2VsZWN0aW9uXHJcbiAgICAgICAgc2VsZWN0aW9uVHlwZSA9IFNlbGVjdGlvbkNyaXRlcmlhVHlwZS5EaW1lbnNpb25UeXBlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmludmFsaWQoWydTZWxlY3Rpb24nLCAnQ3JpdGVyaWEgZm9ybWF0LiddKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzZWxlY3Rpb25UeXBlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHRvIHRyYW5zZm9ybSB0aGUga2V5IHZhbHVlIHBhaXIgaW50byB2YWx1ZSBiYXNlZCBwcmVzIG1vZGVsIG9iamVjdC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB2YWx1ZVNlbGVjdGlvbk1vZGVsXHJcbiAgICogQHBhcmFtIGZpZWxkTmFtZVxyXG4gICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkVG9QYXJhbXNMaXN0KGZpZWxkTmFtZTogc3RyaW5nLCB2YWx1ZTogb2JqZWN0KTogVmFsdWVTZWxlY3Rpb25Nb2RlbCB7XHJcbiAgICBsZXQgdmFsdWVTZWxlY3Rpb25Nb2RlbDogVmFsdWVTZWxlY3Rpb25Nb2RlbCA9IG5ldyBWYWx1ZVNlbGVjdGlvbk1vZGVsKCk7XHJcbiAgICBsZXQgbWFya1ZhbHVlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIGxldCB2YWx1ZUFycjogQXJyYXk8c3RyaW5nPiA9IHZhbHVlO1xyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB2YWx1ZUFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG1hcmtWYWx1ZXMucHVzaCh2YWx1ZUFycltpXS50b1N0cmluZygpKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbWFya1ZhbHVlcy5wdXNoKHZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlU2VsZWN0aW9uTW9kZWwucXVhbGlmaWVkRmllbGRDYXB0aW9uID0gZmllbGROYW1lO1xyXG4gICAgdmFsdWVTZWxlY3Rpb25Nb2RlbC5zZWxlY3RWYWx1ZXMgPSBtYXJrVmFsdWVzO1xyXG4gICAgcmV0dXJuIHZhbHVlU2VsZWN0aW9uTW9kZWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgdG8gdHJhbnNmb3JtIHRoZSBrZXkgdmFsdWUgcGFpciBpbnRvIHJhbmdlIGJhc2VkIHNlbGVjdGlvbiBwcmVzIG1vZGVsLlxyXG4gICAqXHJcbiAgICogVE9ETzogTmVlZCB0byBoYW5kbGUgdGhlIHBhcnNpbmcgb2YgZGF0ZSB0eXBlIHZhbHVlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB2YWx1ZVNlbGVjdGlvbk1vZGVsXHJcbiAgICogQHBhcmFtIGZpZWxkTmFtZVxyXG4gICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkVG9SYW5nZVBhcmFtc0xpc3QoZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBDb250cmFjdC5SYW5nZVZhbHVlKTogUmFuZ2VTZWxlY3Rpb25Nb2RlbCB7XHJcbiAgICBsZXQgcmFuZ2VTZWxlY3Rpb25Nb2RlbDogUmFuZ2VTZWxlY3Rpb25Nb2RlbCA9IG5ldyBSYW5nZVNlbGVjdGlvbk1vZGVsKCk7XHJcbiAgICByYW5nZVNlbGVjdGlvbk1vZGVsLnF1YWxpZmllZEZpZWxkQ2FwdGlvbiA9IGZpZWxkTmFtZTtcclxuICAgIGlmICh2YWx1ZS5tYXggIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS5tYXggIT09IG51bGwpIHtcclxuICAgICAgcmFuZ2VTZWxlY3Rpb25Nb2RlbC5tYXhWYWx1ZSA9IHZhbHVlLm1heC50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLm1pbiAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLm1pbiAhPT0gbnVsbCkge1xyXG4gICAgICByYW5nZVNlbGVjdGlvbk1vZGVsLm1pblZhbHVlID0gdmFsdWUubWluLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgICByYW5nZVNlbGVjdGlvbk1vZGVsLmluY2x1ZGVkID0gdGhpcy52YWxpZGF0ZU51bGxPcHRpb25UeXBlKHZhbHVlLm51bGxPcHRpb24pO1xyXG4gICAgcmV0dXJuIHJhbmdlU2VsZWN0aW9uTW9kZWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgdG8gdmFsaWRhdGUgdGhlIHNlbGVjdGlvbiB1cGRhdGUgdHlwZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzZWxlY3Rpb25VcGRhdGVUeXBlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2YWxpZGF0ZVNlbGVjdGlvblVwZGF0ZVR5cGUoc2VsZWN0aW9uVXBkYXRlVHlwZTogQ29udHJhY3QuU2VsZWN0aW9uVXBkYXRlVHlwZSk6IHN0cmluZyB7XHJcbiAgICBpZiAoc2VsZWN0aW9uVXBkYXRlVHlwZSA9PT0gQ29udHJhY3QuU2VsZWN0aW9uVXBkYXRlVHlwZS5SZXBsYWNlKSB7XHJcbiAgICAgIHJldHVybiBTZWxlY3Rpb25VcGRhdGVUeXBlSW50ZXJuYWwuUmVwbGFjZTtcclxuICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uVXBkYXRlVHlwZSA9PT0gQ29udHJhY3QuU2VsZWN0aW9uVXBkYXRlVHlwZS5BZGQpIHtcclxuICAgICAgcmV0dXJuIFNlbGVjdGlvblVwZGF0ZVR5cGVJbnRlcm5hbC5BZGQ7XHJcbiAgICB9IGVsc2UgaWYgKHNlbGVjdGlvblVwZGF0ZVR5cGUgPT09IENvbnRyYWN0LlNlbGVjdGlvblVwZGF0ZVR5cGUuUmVtb3ZlKSB7XHJcbiAgICAgIHJldHVybiBTZWxlY3Rpb25VcGRhdGVUeXBlSW50ZXJuYWwuUmVtb3ZlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNlbGVjdGlvblVwZGF0ZVR5cGVJbnRlcm5hbC5SZXBsYWNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHRvIHZhbGlkYXRlIHRoZSBpbmNsdWRlIHR5cGUgZm9yIHJhbmdlIHNlbGVjdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBudWxsT3B0aW9uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2YWxpZGF0ZU51bGxPcHRpb25UeXBlKG51bGxPcHRpb246IENvbnRyYWN0LkZpbHRlck51bGxPcHRpb24gfCB1bmRlZmluZWQpOiBzdHJpbmcge1xyXG4gICAgaWYgKG51bGxPcHRpb24pIHtcclxuICAgICAgaWYgKG51bGxPcHRpb24gPT09IENvbnRyYWN0LkZpbHRlck51bGxPcHRpb24uTnVsbFZhbHVlcykge1xyXG4gICAgICAgIHJldHVybiBRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlcy5JbmNsdWRlTnVsbDtcclxuICAgICAgfSBlbHNlIGlmIChudWxsT3B0aW9uID09PSBDb250cmFjdC5GaWx0ZXJOdWxsT3B0aW9uLk5vbk51bGxWYWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gUXVhbnRpdGF0aXZlSW5jbHVkZWRWYWx1ZXMuSW5jbHVkZU5vbk51bGw7XHJcbiAgICAgIH0gZWxzZSBpZiAobnVsbE9wdGlvbiA9PT0gQ29udHJhY3QuRmlsdGVyTnVsbE9wdGlvbi5BbGxWYWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gUXVhbnRpdGF0aXZlSW5jbHVkZWRWYWx1ZXMuSW5jbHVkZUFsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlcy5JbmNsdWRlQWxsO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbnVtIGZvciB0aGUgZGlmZmVyZW50IHNlbGVjdGlvbiBjcml0ZXJpYSB0eXBlcy5cclxuICovXHJcbmVudW0gU2VsZWN0aW9uQ3JpdGVyaWFUeXBlIHtcclxuICBIaWVyYXJjaGljYWxUeXBlID0gMSxcclxuICBSYW5nZVR5cGUgPSAyLFxyXG4gIERpbWVuc2lvblR5cGUgPSAzLFxyXG4gIFR1cGxlc1R5cGUgPSA0LFxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvU2VydmljZXMvaW1wbC9TZWxlY3Rpb25TZXJ2aWNlSW1wbC50c1xuICoqLyIsIi8qKlxyXG4gKiBTZWxlY3Rpb24gTW9kZWwuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uTW9kZWwge1xyXG4gIHF1YWxpZmllZEZpZWxkQ2FwdGlvbjogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogVmFsdWUgYmFzZWQgc2VsZWN0aW9uIG1vZGVsLiBNZWFudCBmb3IgaGllcmFyY2hpY2FsLCByYW5nZSBhbmQgY2F0ZWdvcmljYWwgc2VsZWN0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZVNlbGVjdGlvbk1vZGVsIGV4dGVuZHMgU2VsZWN0aW9uTW9kZWwge1xyXG4gIHNlbGVjdFZhbHVlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG59XHJcblxyXG4vKipcclxuICogSGllcmFyY2hpY2FsIHZhbHVlIHNlbGVjdGlvbiBtb2RlbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEhpZXJhcmNoaWNhbFNlbGVjdGlvbk1vZGVsIGV4dGVuZHMgVmFsdWVTZWxlY3Rpb25Nb2RlbCB7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSYW5nZSBiYXNlZCB2YWx1ZSBzZWxlY3Rpb24gbW9kZWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSYW5nZVNlbGVjdGlvbk1vZGVsIGV4dGVuZHMgU2VsZWN0aW9uTW9kZWwge1xyXG4gIG1pblZhbHVlOiBzdHJpbmc7XHJcbiAgbWF4VmFsdWU6IHN0cmluZztcclxuICBpbmNsdWRlZDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogRGltZW5zaW9uIHZhbHVlIHNlbGVjdGlvbiBtb2RlbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERpbWVuc2lvblNlbGVjdGlvbk1vZGVsIGV4dGVuZHMgVmFsdWVTZWxlY3Rpb25Nb2RlbCB7XHJcbn1cclxuLyoqXHJcbiAqIFR1cGxlIGJhc2VkIHNlbGVjdGlvbiBtb2RlbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFR1cGxlU2VsZWN0aW9uTW9kZWwge1xyXG4gIHNlbGVjdGlvblR5cGU6IHN0cmluZztcclxuICBvYmplY3RJZHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5lciBjbGFzcyB0byBwb3B1bGF0ZSBhbGwgdGhlIHNlbGVjdGlvbiBtb2RlbHMgd2hlbiBwYXJzaW5nIGlucHV0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uTW9kZWxzQ29udGFpbmVyIHtcclxuICBoaWVyTW9kZWxBcnI6IEFycmF5PEhpZXJhcmNoaWNhbFNlbGVjdGlvbk1vZGVsPiA9IFtdO1xyXG4gIGRpbU1vZGVsQXJyOiBBcnJheTxEaW1lbnNpb25TZWxlY3Rpb25Nb2RlbD4gPSBbXTtcclxuICBxdWFudE1vZGVsQXJyOiBBcnJheTxSYW5nZVNlbGVjdGlvbk1vZGVsPiA9IFtdO1xyXG4gIHNlbGVjdGlvbjogVHVwbGVTZWxlY3Rpb25Nb2RlbDtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1zaGFyZWQvc3JjL01vZGVscy9TZWxlY3Rpb25Nb2RlbHMudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIENvbW1hbmRSZXNwb25zZU1lc3NhZ2UsXHJcbiAgQ3Jvc3NGcmFtZU1lc3NlbmdlcixcclxuICBWRVJTSU9OIGFzIEFwaU1lc3NhZ2luZ1ZlcnNpb24sXHJcbn0gZnJvbSAnQHRhYmxlYXUvYXBpLW1lc3NhZ2luZyc7XHJcblxyXG5pbXBvcnQgeyBDcm9zc0ZyYW1lRGlzcGF0Y2hlciB9IGZyb20gJy4vQ3Jvc3NGcmFtZURpc3BhdGNoZXInO1xyXG5cclxuLy8gQ2hlY2tzIHRvIHNlZSBpZiB3ZSBhcmUgcnVubmluZyBpbiBhbiBpZnJhbWUgY3VycmVudGx5OiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzI2MDc2Lzg4MjExNTNcclxuZnVuY3Rpb24gaW5JZnJhbWUodGhpc1dpbmRvdzogV2luZG93KTogYm9vbGVhbiB7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiB0aGlzV2luZG93LnNlbGYgIT09IHRoaXNXaW5kb3cucGFyZW50O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIGJvb3RzdHJhcCB0aGUgZXh0ZW5zaW9uIHdpdGggYSBjcm9zcy1mcmFtZSBwYXJlbnQgd2hlcmUgVGFibGVhdSBpcyBydW5uaW5nXHJcbiAqXHJcbiAqIEBwYXJhbSB0aGlzV2luZG93IFRoZSB3aW5kb3cgd2hpY2ggd2UgYXJlIHJ1bm5pbmcgaW4gKGluamVjdGVkIGZvciB1bml0IHRlc3RpbmcgcHVycG9zZXMpXHJcbiAqIEBwYXJhbSB2ZXJzaW9uTnVtYmVyIFRoZSB2ZXJzaW9uIG51bWJlciBvZiBvdXIgQVBJIHRvIGluY2x1ZGUgaW4gdGhlIGluaXRpYWxpemF0aW9uIG1lc3NhZ2VcclxuICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIGlzIGRvaW5nIHRoZSBhY3R1YWwgYm9vdHN0cmFwcGluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRvQ3Jvc3NGcmFtZUJvb3RzdHJhcCh0aGlzV2luZG93OiBXaW5kb3csIHZlcnNpb25OdW1iZXI6IENvbnRyYWN0LlZlcnNpb25OdW1iZXIpOiBQcm9taXNlPENvbnRyYWN0LkludGVybmFsQXBpRGlzcGF0Y2hlcj4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZTxDb250cmFjdC5JbnRlcm5hbEFwaURpc3BhdGNoZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgd2UncmUgaW4gYW4gaWZyYW1lIGFuZCBoYXZlIGEgcGFyZW50IHRvIGNvbW11bmljYXRlIHdpdGhcclxuICAgIGlmICghaW5JZnJhbWUodGhpc1dpbmRvdykpIHtcclxuICAgICAgcmVqZWN0KCdUaGlzIGV4dGVuc2lvbiBpcyBub3QgcnVubmluZyBpbnNpZGUgYW4gaWZyYW1lIG9yIGRlc2t0b3AuIEluaXRpYWxpemF0aW9uIGZhaWxlZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIG1lc3NlbmdlciB3aGljaCB3aWxsIGRvIGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGlzIHdpbmRvdyBhbmQgb3VyIHBhcmVudFxyXG4gICAgLy8gU2luY2Ugd2UgZG9uJ3Qga25vdyB3aGVyZSB3ZSBhcmUgcnVubmluZyB5ZXQsIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGluaXRpYWwgb3JpZ2luICcqJy4gT25jZVxyXG4gICAgLy8gd2UgaGF2ZSBzdWNjZXNzZnVsbHkgaW5pdGlhbGl6ZWQgb3VyIGV4dGVuc2lvbiwgd2Ugd2lsbCBsaW1pdCB3aGVyZSB3ZSBzZW5kIG1lc3NhZ2VzXHJcbiAgICBjb25zdCBtZXNzZW5nZXIgPSBuZXcgQ3Jvc3NGcmFtZU1lc3Nlbmdlcih0aGlzV2luZG93LCB0aGlzV2luZG93LnBhcmVudCwgJyonKTtcclxuXHJcbiAgICAvLyBQcmVwYXJlIHRvIHNlbmQgYW4gaW5pdGlhbGl6YXRpb24gbWVzc2FnZSB0byB0aGUgcGFyZW50IGZyYW1lXHJcbiAgICBjb25zdCBpbml0aWFsaXphdGlvbk1lc3NhZ2UgPSBtZXNzZW5nZXIucHJlcGFyZUluaXRpYWxpemF0aW9uTWVzc2FnZSh2ZXJzaW9uTnVtYmVyLCBBcGlNZXNzYWdpbmdWZXJzaW9uKTtcclxuXHJcbiAgICAvLyBXaGVuIHdlIHJlY2VpdmUgYSByZXNwb25zZSBiYWNrIGZyb20gdGhlIHBhcmVudCwgd2UgY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBndWlkcyBtYXRjaCBhbmQgdGhlbiB3ZSBrbm93XHJcbiAgICAvLyB0aGF0IHRoZSBwYXJlbnQgaXMgYXdhcmUgb2YgdXMgYW5kIHdlIGNhbiBzdGFydCBjb21tdW5pY2F0aW5nXHJcbiAgICBtZXNzZW5nZXIuc2V0Q29tbWFuZFJlc3BvbnNlTWVzc2FnZUhhbmRsZXIoZnVuY3Rpb24obXNnOiBDb21tYW5kUmVzcG9uc2VNZXNzYWdlKTogdm9pZCB7XHJcblxyXG4gICAgICAvLyBWZXJpZnkgd2UgYXJlIGdldHRpbmcgYSByZXNwb25zZSBmcm9tIG91ciBpbml0aWFsaXplIG1lc3NhZ2VcclxuICAgICAgaWYgKG1zZy5jb21tYW5kR3VpZCA9PT0gaW5pdGlhbGl6YXRpb25NZXNzYWdlLm1lc3NhZ2VHdWlkKSB7XHJcbiAgICAgICAgY29uc3QgZGlzcGF0Y2hlciA9IG5ldyBDcm9zc0ZyYW1lRGlzcGF0Y2hlcihtZXNzZW5nZXIpO1xyXG4gICAgICAgIHJlc29sdmUoZGlzcGF0Y2hlcik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE5vdyB0aGF0IG91ciBoYW5kbGVycyBhcmUgcmVhZHksIHN0YXJ0IGxpc3RlbmluZyBhbmQgc2VuZCBvdXIgaW5pdGlhbGl6YXRpb24gbWVzc2FnZVxyXG4gICAgbWVzc2VuZ2VyLnN0YXJ0TGlzdGVuaW5nKCk7XHJcbiAgICBpbml0aWFsaXphdGlvbk1lc3NhZ2Uuc2VuZCgpO1xyXG4gIH0pO1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvQ3Jvc3NGcmFtZS9Dcm9zc0ZyYW1lQm9vdHN0cmFwLnRzXG4gKiovIiwiLyoqXHJcbiAqIFRoaXMgaXMgeW91ciBtYWluLiBUaGlzIGlzIHdoZXJlIHlvdSByZS1leHBvcnQgZXZlcnl0aGluZyB5b3Ugd2FudCB0byBiZSBwdWJsaWNseSBhdmFpbGFibGUuXHJcbiAqXHJcbiAqIFRoZSBidWlsZCBlbmZvcmNlcyB0aGF0IHRoZSBmaWxlIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHRoZSBnbG9iYWwgdmFyaWFibGUgdGhhdCBpcyBleHBvcnRlZC5cclxuICovXHJcblxyXG5leHBvcnQgKiBmcm9tICcuL0Nyb3NzRnJhbWVNZXNzZW5nZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZS9NZXNzYWdlRGlzcGF0Y2hlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL01lc3NhZ2VMaXN0ZW5lcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL01lc3NhZ2VUeXBlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL01lc3Nlbmdlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlL1ByZXBhcmVkTWVzc2FnZSc7XHJcblxyXG4vLyBFeHBvcnQgdGhlIHZlcnNpb24gbnVtYmVyIG9mIG1lc3NhZ2luZyBmb3IgY29uc3VtZXJzIHRvIHVzZS5cclxuLy8gQmUgdmVyeSBjYXJlZnVsIG1ha2luZyBhbnkgdXBkYXRlcyB0byB0aGlzIGNvbnRyYWN0IHdoaWNoIGJyZWFrIHZlcnNpb24gY29tcGF0aWJpbGl0eS5cclxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSB7XHJcbiAgbWFqb3I6IDEsXHJcbiAgbWlub3I6IDAsXHJcbiAgZml4OiAwXHJcbn07XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLW1lc3NhZ2luZy9zcmMvQXBpTWVzc2FnaW5nLnRzXG4gKiovIiwiaW1wb3J0IHsgRXhlY3V0ZVBhcmFtZXRlcnMsIE1vZGVsLCBOb3RpZmljYXRpb25JZCwgVmVyYklkLCBWZXJzaW9uTnVtYmVyIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgR3VpZCB9IGZyb20gJ0B0YWJsZWF1L2d1aWQnO1xyXG5cclxuaW1wb3J0IHsgQ3Jvc3NGcmFtZVByZXBhcmVkTWVzc2FnZSB9IGZyb20gJy4vQ3Jvc3NGcmFtZVByZXBhcmVkTWVzc2FnZSc7XHJcbmltcG9ydCB7XHJcbiAgQ29tbWFuZE1lc3NhZ2UsXHJcbiAgQ29tbWFuZFJlc3BvbnNlTWVzc2FnZSxcclxuICBJbml0aWFsaXplTWVzc2FnZSxcclxuICBNZXNzYWdlLFxyXG4gIE1lc3NhZ2VUeXBlLFxyXG4gIE5vdGlmaWNhdGlvbk1lc3NhZ2UsXHJcbn0gZnJvbSAnLi9pbnRlcmZhY2UvTWVzc2FnZVR5cGVzJztcclxuaW1wb3J0IHsgTWVzc2VuZ2VyIH0gZnJvbSAnLi9pbnRlcmZhY2UvTWVzc2VuZ2VyJztcclxuaW1wb3J0IHsgUHJlcGFyZWRNZXNzYWdlIH0gZnJvbSAnLi9pbnRlcmZhY2UvUHJlcGFyZWRNZXNzYWdlJztcclxuaW1wb3J0IHtcclxuICBpc0NvbW1hbmRNZXNzYWdlLFxyXG4gIGlzQ29tbWFuZFJlc3BvbnNlTWVzc2FnZSxcclxuICBpc0luaXRNZXNzYWdlLFxyXG4gIGlzTWVzc2FnZSxcclxuICBpc05vdGlmaWNhdGlvbk1lc3NhZ2UsXHJcbn0gZnJvbSAnLi9NZXNzYWdlVHlwZUNoZWNrcyc7XHJcblxyXG4vKipcclxuICogVGhlIENyb3NzRnJhbWVNZXNzZW5nZXIgaXMgdGhlIHByaW1hcnkgZXhwb3J0IGZyb20gdGhlIGFwaS1tZXNzYWdpbmcgbW9kdWxlLiBBbiBpbnN0YW5jZSBvZlxyXG4gKiB0aGlzIGNsYXNzIGNhbiBiZSBpbnN0YW50aWF0ZWQgb24gYm90aCBzaWRlcyBvZiBhIGZyYW1lIGJvdW5kYXJ5IHRvIGZhY2lsaXRhdGUgY29tbXVuaWNhdGlvblxyXG4gKiBpbiBib3RoIGRpcmVjdGlvbnMgYmV0d2VlbiB0aGUgZnJhbWVzLiBUaGlzIGNsYXNzIGltcGxlbWVudHMgYm90aCB0aGUgZGlzcGF0Y2hlciBhbmQgdGhlIGxpc3RlbmVyXHJcbiAqIHBvcnRpb25zLCBidXQgZG9lc24ndCByZXF1aXJlIGNhbGxlcnMgdG8gY2FyZSBhYm91dCBib3RoLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENyb3NzRnJhbWVNZXNzZW5nZXIgaW1wbGVtZW50cyBNZXNzZW5nZXIge1xyXG4gIHByaXZhdGUgdW5yZWdpc3RlckZ1bmN0aW9uOiB1bmRlZmluZWQgfCAoKCkgPT4gdm9pZCk7XHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplTWVzc2FnZUhhbmRsZXI6IHVuZGVmaW5lZCB8ICgobXNnOiBJbml0aWFsaXplTWVzc2FnZSwgc291cmNlOiBXaW5kb3cpID0+IHZvaWQpO1xyXG4gIHByaXZhdGUgY29tbWFuZFJlc3BvbnNlTWVzc2FnZUhhbmRsZXI6IHVuZGVmaW5lZCB8ICgobXNnOiBDb21tYW5kUmVzcG9uc2VNZXNzYWdlLCBzb3VyY2U6IFdpbmRvdykgPT4gdm9pZCk7XHJcbiAgcHJpdmF0ZSBjb21tYW5kTWVzc2FnZUhhbmRsZXI6IHVuZGVmaW5lZCB8ICgobXNnOiBDb21tYW5kTWVzc2FnZSwgc291cmNlOiBXaW5kb3cpID0+IHZvaWQpO1xyXG4gIHByaXZhdGUgbm90aWZpY2F0aW9uTWVzc2FnZUhhbmRsZXI6IHVuZGVmaW5lZCB8ICgobXNnOiBOb3RpZmljYXRpb25NZXNzYWdlLCBzb3VyY2U6IFdpbmRvdykgPT4gdm9pZCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ3Jvc3NGcmFtZU1lc3Nlbmdlci4gSWYgeW91IHdvdWxkIGxpa2UgdG8gdXNlIHRoZSBDcm9zc0ZyYW1lTWVzc2VuZ2VyIGFzIGEgTWVzc2FnZUxpc3RlbmVyLFxyXG4gICAqIGJlIHN1cmUgdG8gY2FsbCBTdGFydExpc3RlbmluZyBhbmQgcmVnaXN0ZXIgbWVzc2FnZSBoYW5kbGVycy5cclxuICAgKiBAcGFyYW0gdGhpc1dpbmRvdyBUaGUgd2luZG93IG9iamVjdCB3aGljaCB0aGUgQ3Jvc3NGcmFtZU1lc3NlbmdlciBsaXZlcy4gQW4gb25NZXNzYWdlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgaGVyZS5cclxuICAgKiBAcGFyYW0gW290aGVyV2luZG93XSBPcHRpb25hbCBvdGhlcldpbmRvdyB3aGljaCBtZXNzYWdlcyB3aWxsIGJlIHBvc3RlZCB0by5cclxuICAgKiAgICAgICAgICAgICAgICAgICAgICBJZiBkZWZpbmVkLCBpbmNvbWluZyBtZXNzYWdlcyBtdXN0IG9yaWdpbmF0ZSBmcm9tIG90aGVyV2luZG93IHRvIGJlIHBhc3NlZCBvblxyXG4gICAqIEBwYXJhbSBbb3RoZXJXaW5kb3dPcmlnaW5dIFRoZSB0YXJnZXQgb3JpZ2luIHdoaWNoIG90aGVyV2luZG93IG11c3QgaGF2ZSBpbiBvcmRlciB0byByZWNlaXZlIGRpc3BhdGNoZWQgbWVzc2FnZXMuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyB2YWx1ZSB3aWxsIGJlIHNlbnQgYXMgdGhlIHRhcmdldE9yaWdpbiBvZiBhIHBvc3RNZXNzYWdlXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvcG9zdE1lc3NhZ2UpXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhpc1dpbmRvdzogV2luZG93LCBwcml2YXRlIG90aGVyV2luZG93PzogV2luZG93LCBwcml2YXRlIG90aGVyV2luZG93T3JpZ2luPzogc3RyaW5nKSB7XHJcbiAgICAvLyBNYWtlIHN1cmUgdG8gY2FsbCBTdGFydExpc3RlbmluZ1xyXG4gIH1cclxuXHJcbiAgLy8vLy8gTWVzc2FnZUxpc3RlbmVyIEltcGxlbWVudGF0aW9uXHJcblxyXG4gIHB1YmxpYyBzdGFydExpc3RlbmluZygpOiB2b2lkIHtcclxuICAgIC8vIENoZWNrIGlmIHdlIGFscmVhZHkgYXJlIGxpc3RlbmluZywgaWYgbm90LCBob29rIHVwIGEgbWVzc2FnZSBsaXN0ZW5lclxyXG4gICAgaWYgKCF0aGlzLnVucmVnaXN0ZXJGdW5jdGlvbikge1xyXG4gICAgICBjb25zdCBib3VuZEhhbmRsZXIgPSB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkLmJpbmQodGhpcyk7XHJcbiAgICAgIHRoaXMudGhpc1dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgYm91bmRIYW5kbGVyLCB0cnVlKTtcclxuICAgICAgdGhpcy51bnJlZ2lzdGVyRnVuY3Rpb24gPSAoKSA9PiB0aGlzLnRoaXNXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGJvdW5kSGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RvcExpc3RlbmluZygpOiB2b2lkIHtcclxuICAgIC8vIFN0b3AgbGlzdGVuaW5nIGlmIHdlIGhhdmUgc3RhcnRlZCBsaXN0ZW5pbmdcclxuICAgIGlmICh0aGlzLnVucmVnaXN0ZXJGdW5jdGlvbikge1xyXG4gICAgICB0aGlzLnVucmVnaXN0ZXJGdW5jdGlvbigpO1xyXG4gICAgICB0aGlzLnVucmVnaXN0ZXJGdW5jdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRJbml0aWFsaXplTWVzc2FnZUhhbmRsZXIoaGFuZGxlcj86IChtc2c6IEluaXRpYWxpemVNZXNzYWdlLCBzb3VyY2U6IFdpbmRvdykgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5pbml0aWFsaXplTWVzc2FnZUhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldENvbW1hbmRSZXNwb25zZU1lc3NhZ2VIYW5kbGVyKGhhbmRsZXI/OiAobXNnOiBDb21tYW5kUmVzcG9uc2VNZXNzYWdlLCBzb3VyY2U6IFdpbmRvdykgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb21tYW5kUmVzcG9uc2VNZXNzYWdlSGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0Q29tbWFuZE1lc3NhZ2VIYW5kbGVyKGhhbmRsZXI/OiAobXNnOiBDb21tYW5kTWVzc2FnZSwgc291cmNlOiBXaW5kb3cpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuY29tbWFuZE1lc3NhZ2VIYW5kbGVyID0gaGFuZGxlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXROb3RpZmljYXRpb25NZXNzYWdlSGFuZGxlcihoYW5kbGVyPzogKG1zZzogTm90aWZpY2F0aW9uTWVzc2FnZSwgc291cmNlOiBXaW5kb3cpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMubm90aWZpY2F0aW9uTWVzc2FnZUhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgLy8vLy8gTWVzc2FnZURpc3BhdGNoZXIgSW1wbGVtZW50YXRpb25cclxuXHJcbiAgcHVibGljIHByZXBhcmVJbml0aWFsaXphdGlvbk1lc3NhZ2UoYXBpVmVyc2lvbjogVmVyc2lvbk51bWJlciwgY3Jvc3NGcmFtZVZlcnNpb246IFZlcnNpb25OdW1iZXIpOiBQcmVwYXJlZE1lc3NhZ2Uge1xyXG4gICAgY29uc3QgbWVzc2FnZTogSW5pdGlhbGl6ZU1lc3NhZ2UgPSB7XHJcbiAgICAgIG1zZ0d1aWQ6IEd1aWQuY3JlYXRlKCkuZm9ybWF0dGVkVmFsdWUsXHJcbiAgICAgIG1zZ1R5cGU6IE1lc3NhZ2VUeXBlLkluaXRpYWxpemUsXHJcbiAgICAgIGNyb3NzRnJhbWVWZXJzaW9uOiBjcm9zc0ZyYW1lVmVyc2lvbixcclxuICAgICAgYXBpVmVyc2lvbjogYXBpVmVyc2lvblxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5wcmVwYXJlTWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwcmVwYXJlQ29tbWFuZE1lc3NhZ2UodmVyYklkOiBWZXJiSWQsIHBhcmFtZXRlcnM6IEV4ZWN1dGVQYXJhbWV0ZXJzKTogUHJlcGFyZWRNZXNzYWdlIHtcclxuICAgIGNvbnN0IG1lc3NhZ2U6IENvbW1hbmRNZXNzYWdlID0ge1xyXG4gICAgICBtc2dHdWlkOiBHdWlkLmNyZWF0ZSgpLmZvcm1hdHRlZFZhbHVlLFxyXG4gICAgICBtc2dUeXBlOiBNZXNzYWdlVHlwZS5Db21tYW5kLFxyXG4gICAgICB2ZXJiSWQ6IHZlcmJJZCxcclxuICAgICAgcGFyYW1ldGVyczogcGFyYW1ldGVyc1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5wcmVwYXJlTWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwcmVwYXJlQ29tbWFuZFJlc3BvbnNlTWVzc2FnZShjb21tYW5kR3VpZDogc3RyaW5nLCBkYXRhOiBNb2RlbCB8IHVuZGVmaW5lZCwgZXJyb3I6IE1vZGVsIHwgdW5kZWZpbmVkKTogUHJlcGFyZWRNZXNzYWdlIHtcclxuICAgIGNvbnN0IG1lc3NhZ2U6IENvbW1hbmRSZXNwb25zZU1lc3NhZ2UgPSB7XHJcbiAgICAgIG1zZ0d1aWQ6IEd1aWQuY3JlYXRlKCkuZm9ybWF0dGVkVmFsdWUsXHJcbiAgICAgIG1zZ1R5cGU6IE1lc3NhZ2VUeXBlLkNvbW1hbmRSZXNwb25zZSxcclxuICAgICAgY29tbWFuZEd1aWQ6IGNvbW1hbmRHdWlkLFxyXG4gICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICBlcnJvcjogZXJyb3JcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMucHJlcGFyZU1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcHJlcGFyZU5vdGlmaWNhdGlvbk1lc3NhZ2Uobm90aWZpY2F0aW9uSWQ6IE5vdGlmaWNhdGlvbklkLCBkYXRhOiBNb2RlbCk6IFByZXBhcmVkTWVzc2FnZSB7XHJcbiAgICBjb25zdCBtZXNzYWdlOiBOb3RpZmljYXRpb25NZXNzYWdlID0ge1xyXG4gICAgICBtc2dHdWlkOiBHdWlkLmNyZWF0ZSgpLmZvcm1hdHRlZFZhbHVlLFxyXG4gICAgICBtc2dUeXBlOiBNZXNzYWdlVHlwZS5Ob3RpZmljYXRpb24sXHJcbiAgICAgIG5vdGlmaWNhdGlvbklkOiBub3RpZmljYXRpb25JZCxcclxuICAgICAgZGF0YTogZGF0YVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5wcmVwYXJlTWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByZXBhcmVzIGEgcGVuZGluZyBtZXNzYWdlIGZvciBzZW5kaW5nIGFuZCByZXR1cm5zIHRoZSBwcmVwYXJlZCBtZXNzYWdlXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbXNnIFRoZSBtZXNzYWdlIHRvIGJlIHNlbnQgdG8gdGhpcy5vdGhlcldpbmRvd1xyXG4gICAqIEByZXR1cm5zIFRoZSBwcmVwYXJlZCBtZXNzYWdlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwcmVwYXJlTWVzc2FnZShtc2c6IE1lc3NhZ2UpOiBQcmVwYXJlZE1lc3NhZ2Uge1xyXG4gICAgaWYgKCF0aGlzLm90aGVyV2luZG93IHx8ICF0aGlzLm90aGVyV2luZG93T3JpZ2luKSB7XHJcbiAgICAgIHRocm93ICdPdGhlciB3aW5kb3cgbm90IGluaXRpYWxpemVkLCBjYW5ub3QgZGlzcGF0Y2ggbWVzc2FnZXMnO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByZXBhcmVkTWVzc2FnZSA9IG5ldyBDcm9zc0ZyYW1lUHJlcGFyZWRNZXNzYWdlKG1zZywgdGhpcy5vdGhlcldpbmRvdywgdGhpcy5vdGhlcldpbmRvd09yaWdpbik7XHJcbiAgICByZXR1cm4gcHJlcGFyZWRNZXNzYWdlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkLiBEb2VzIHNvbWUgdmFsaWRhdGlvbiBvZiB0aGUgbWVzc2FnZSwgYW5kIHRoZW5cclxuICAgKiBjYWxscyBhbiBhcHByb3ByaWF0ZSBtZXNzYWdlIGhhbmRsZXIgaWYgb25lIGlzIGRlZmluZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudCBUaGUgaW5jb21pbmcgTWVzc2FnZUV2ZW50XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBvbk1lc3NhZ2VSZWNlaXZlZChldmVudDogTWVzc2FnZUV2ZW50KTogdm9pZCB7XHJcblxyXG4gICAgLy8gSWYgd2UgaGF2ZSBhbiBvdGhlcldpbmRvdyBkZWZpbmVkLCBtYWtlIHN1cmUgdGhlIG1lc3NhZ2UgaXMgY29taW5nIGZyb20gdGhlcmVcclxuICAgIGlmICh0aGlzLm90aGVyV2luZG93ICYmIGV2ZW50LnNvdXJjZSAhPT0gdGhpcy5vdGhlcldpbmRvdykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG8gc29tZSB2YWxpZGF0aW9uIG9uIGV2ZW50LmRhdGEgdG8gbWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSByZWNlaXZlZCBhIHJlYWwgbWVzc2FnZVxyXG4gICAgaWYgKCFldmVudC5kYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZXNzYWdlID0gZXZlbnQuZGF0YTtcclxuICAgIGlmICghaXNNZXNzYWdlKG1lc3NhZ2UpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayB0aGUgZGVjbGFyZWQgbWVzc2FnZSB0eXBlLCB2YWxpZGF0ZSB0aGUgbWVzc2FnZSwgYW5kIGNhbGwgYW4gYXBwcm9wcmlhdGUgaGFuZGVyIGlmIG9uZSBleGlzdHNcclxuICAgIHN3aXRjaCAobWVzc2FnZS5tc2dUeXBlKSB7XHJcbiAgICAgIGNhc2UgTWVzc2FnZVR5cGUuSW5pdGlhbGl6ZToge1xyXG4gICAgICAgIGlmICghaXNJbml0TWVzc2FnZShtZXNzYWdlKSB8fCAhdGhpcy5pbml0aWFsaXplTWVzc2FnZUhhbmRsZXIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU1lc3NhZ2VIYW5kbGVyKG1lc3NhZ2UsIGV2ZW50LnNvdXJjZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5Db21tYW5kUmVzcG9uc2U6IHtcclxuICAgICAgICBpZiAoIWlzQ29tbWFuZFJlc3BvbnNlTWVzc2FnZShtZXNzYWdlKSB8fCAhdGhpcy5jb21tYW5kUmVzcG9uc2VNZXNzYWdlSGFuZGxlcikge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb21tYW5kUmVzcG9uc2VNZXNzYWdlSGFuZGxlcihtZXNzYWdlLCBldmVudC5zb3VyY2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQ29tbWFuZDoge1xyXG4gICAgICAgIGlmICghaXNDb21tYW5kTWVzc2FnZShtZXNzYWdlKSB8fCAhdGhpcy5jb21tYW5kTWVzc2FnZUhhbmRsZXIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29tbWFuZE1lc3NhZ2VIYW5kbGVyKG1lc3NhZ2UsIGV2ZW50LnNvdXJjZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5Ob3RpZmljYXRpb246IHtcclxuICAgICAgICBpZiAoIWlzTm90aWZpY2F0aW9uTWVzc2FnZShtZXNzYWdlKSB8fCAhdGhpcy5ub3RpZmljYXRpb25NZXNzYWdlSGFuZGxlcikge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25NZXNzYWdlSGFuZGxlcihtZXNzYWdlLCBldmVudC5zb3VyY2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgLy8gSnVzdCBpZ25vcmUgdGhpcyBzaW5jZSB3ZSBkb24ndCBrbm93IGhvdyB0byBoYW5kbGUgdGhlIG1lc3NhZ2UgdHlwZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1tZXNzYWdpbmcvc3JjL0Nyb3NzRnJhbWVNZXNzZW5nZXIudHNcbiAqKi8iLCJudWxsXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi4vc3JjL0d1aWQudHNcbiAqKi8iLCJpbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnLi9pbnRlcmZhY2UvTWVzc2FnZVR5cGVzJztcclxuaW1wb3J0IHsgUHJlcGFyZWRNZXNzYWdlIH0gZnJvbSAnLi9pbnRlcmZhY2UvUHJlcGFyZWRNZXNzYWdlJztcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgUHJlcGFyZWRNZXNzYWdlIGludGVyZmFjZSB1c2VkIHRvIHBvc3QgbWVzc2FnZXMgYmV0d2VlblxyXG4gKiB0d28gZnJhbWVzIHVzaW5nIHdpbmRvdy5wb3N0TWVzc2FnZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENyb3NzRnJhbWVQcmVwYXJlZE1lc3NhZ2UgaW1wbGVtZW50cyBQcmVwYXJlZE1lc3NhZ2Uge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ3Jvc3NGcmFtZVByZXBhcmVkTWVzc2FnZS5cclxuICAgKiBAcGFyYW0gX21lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gYmUgc2VudFxyXG4gICAqIEBwYXJhbSBfdGFyZ2V0IFRoZSB0YXJnZXQgd2luZG93IHdoZXJlIHRoZSBtZXNzYWdlIHdpbGwgYmUgc2VudFxyXG4gICAqIEBwYXJhbSBfb3JpZ2luIFRoZSB0YXJnZXRPcmlnaW4gd2hlcmUgdGhpcyBtZXNzYWdlIGNhbiBiZSByZWNlaXZlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tZXNzYWdlOiBNZXNzYWdlLCBwcml2YXRlIF90YXJnZXQ6IFdpbmRvdywgcHJpdmF0ZSBfb3JpZ2luOiBzdHJpbmcpIHtcclxuXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG1lc3NhZ2VHdWlkKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl9tZXNzYWdlLm1zZ0d1aWQ7IH1cclxuXHJcbiAgcHVibGljIHNlbmQoKTogUHJlcGFyZWRNZXNzYWdlIHtcclxuICAgIHRoaXMuX3RhcmdldC5wb3N0TWVzc2FnZSh0aGlzLl9tZXNzYWdlLCB0aGlzLl9vcmlnaW4pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLW1lc3NhZ2luZy9zcmMvQ3Jvc3NGcmFtZVByZXBhcmVkTWVzc2FnZS50c1xuICoqLyIsImltcG9ydCB7IEV4ZWN1dGVQYXJhbWV0ZXJzLCBNb2RlbCwgTm90aWZpY2F0aW9uSWQsIFZlcmJJZCwgVmVyc2lvbk51bWJlciB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG4vKipcclxuICogRW51bSBkZWZpbmluZyB0aGUgNCBkaWZmZXJlbnQgdHlwZXMgb2YgbWVzc2FnZXMgd2UgaGF2ZSBkZWZpbmVkXHJcbiAqL1xyXG5leHBvcnQgZW51bSBNZXNzYWdlVHlwZSB7XHJcbiAgSW5pdGlhbGl6ZSA9ICdpbml0aWFsaXplJyxcclxuICBOb3RpZmljYXRpb24gPSAnbm90aWZpY2F0aW9uJyxcclxuICBDb21tYW5kID0gJ2NvbW1hbmQnLFxyXG4gIENvbW1hbmRSZXNwb25zZSA9ICdjb21tYW5kLXJlc3BvbnNlJ1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIE1lc3NhZ2UgaW50ZXJmYWNlIGlzIHRoZSBiYXNlIGludGVyZmFjZSBmb3IgYWxsIHRoZSBvdGhlclxyXG4gKiBtZXNzYWdlIHR5cGUgaW50ZXJmYWNlcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZSB7XHJcbiAgLyoqXHJcbiAgICogQSB1bmlxdWUgaWQgZm9yIHRoaXMgbWVzc2FnZVxyXG4gICAqL1xyXG4gIG1zZ0d1aWQ6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgdGhpcyBtZXNzYWdlXHJcbiAgICovXHJcbiAgbXNnVHlwZTogTWVzc2FnZVR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgaW5pdGlhbGl6ZSBtZXNzYWdlIGlzIHRoZSBmaXJzdCBtZXNzYWdlIHdoaWNoIHdpbGwgYmUgc2VudFxyXG4gKiBmcm9tIHRoZSBqYXZhc2NyaXB0IHRvIHNldCB1cCBjb21tdW5pY2F0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplTWVzc2FnZSBleHRlbmRzIE1lc3NhZ2Uge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBhcGkgd2hpY2ggdGhlIHNlbmRlciB3YW50cyB0byB1c2VcclxuICAgKi9cclxuICBhcGlWZXJzaW9uOiBWZXJzaW9uTnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGlzIG1lc3NhZ2luZyBjb250cmFjdCB0byBiZSB1c2VkLiBGb3Igbm93LCB0aGVyZVxyXG4gICAqIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHZlcnNpb24gYnV0IHNlbmRpbmcgdGhpcyBhbG9uZyBzaG91bGQgaGVscFxyXG4gICAqIGlmIHdlIG5lZWQgdG8gYWRkIGEgbmV3IHZlcnNpb24gaW4gYSBmdXR1cmUgcmVsZWFzZVxyXG4gICAqL1xyXG4gIGNyb3NzRnJhbWVWZXJzaW9uOiBWZXJzaW9uTnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBtZXNzYWdlIGlzIHNlbnQgd2hlbiBhIG5vdGlmaWNhdGlvbiBvY2N1cnMgZnJvbSB0aGUgcHJlc2xheWVyXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbk1lc3NhZ2UgZXh0ZW5kcyBNZXNzYWdlIHtcclxuICAvKipcclxuICAgKiBUaGUgaWQgZm9yIHRoaXMgdHlwZSBvZiBub3RpZmljYXRpb25cclxuICAgKi9cclxuICBub3RpZmljYXRpb25JZDogTm90aWZpY2F0aW9uSWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRhIHdoaWNoIGNhbWUgYWxvbmcgd2l0aCB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICovXHJcbiAgZGF0YTogTW9kZWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGNhbGxpbmcgYW4gaW50ZXJuYWwgY29udHJhY3QgY29tbWFuZFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb21tYW5kTWVzc2FnZSBleHRlbmRzIE1lc3NhZ2Uge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpZCBvZiB0aGUgY29tbWFuZCB3aGljaCBzaG91bGQgYmUgZXhlY3V0ZWRcclxuICAgKi9cclxuICB2ZXJiSWQ6IFZlcmJJZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBjb21tYW5kXHJcbiAgICovXHJcbiAgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIG1lc3NhZ2UgaXMgc2VudCBpbiByZXNwb25zZSB0byBhIENvbW1hbmRNZXNzYWdlIHdpdGggdGhlXHJcbiAqIHJlc3VsdCBvZiB0aGF0IGNvbW1hbmRzIGludm9jYXRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFuZFJlc3BvbnNlTWVzc2FnZSBleHRlbmRzIE1lc3NhZ2Uge1xyXG4gIC8qKlxyXG4gICAqIEd1aWQgb2YgdGhlIENvbW1hbmRNZXNzYWdlIHdoaWNoIHRoaXMgaXMgaW4gcmVzcG9uc2UgdG9cclxuICAgKi9cclxuICBjb21tYW5kR3VpZDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBJZiB0aGVyZSB3YXMgYW4gZXJyb3IgcmV0dXJuZWQgZnJvbSB0aGUgY29tbWFuZCwgdGhpcyB3aWxsIGJlIGRlZmluZWRcclxuICAgKiBhbmQgY29udGFpbiB0aGUgZXJyb3JcclxuICAgKi9cclxuICBlcnJvcj86IE1vZGVsO1xyXG5cclxuICAvKipcclxuICAgKiBJZiB0aGUgY29tbWFuZCBleGVjdXRlZCBzdWNjZXNzZnVsbHksIHRoaXMgd2lsbCBjb250YWluIHRoZSBjb21tYW5kIHJlc3VsdFxyXG4gICAqL1xyXG4gIGRhdGE/OiBNb2RlbDtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1tZXNzYWdpbmcvc3JjL2ludGVyZmFjZS9NZXNzYWdlVHlwZXMudHNcbiAqKi8iLCJpbXBvcnQgeyBWZXJzaW9uTnVtYmVyIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgR3VpZCB9IGZyb20gJ0B0YWJsZWF1L2d1aWQnO1xyXG5cclxuaW1wb3J0IHtcclxuICBDb21tYW5kTWVzc2FnZSxcclxuICBDb21tYW5kUmVzcG9uc2VNZXNzYWdlLFxyXG4gIEluaXRpYWxpemVNZXNzYWdlLFxyXG4gIE1lc3NhZ2UsXHJcbiAgTWVzc2FnZVR5cGUsXHJcbiAgTm90aWZpY2F0aW9uTWVzc2FnZSxcclxufSBmcm9tICcuL2ludGVyZmFjZS9NZXNzYWdlVHlwZXMnO1xyXG5cclxuLyogdHNsaW50OmRpc2FibGUgbm8tYW55ICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01lc3NhZ2UoZGF0YTogTWVzc2FnZSB8IGFueSk6IGRhdGEgaXMgTWVzc2FnZSB7XHJcbiAgaWYgKCFkYXRhKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtZXNzYWdlID0gZGF0YSBhcyBNZXNzYWdlO1xyXG4gIGlmICghbWVzc2FnZSB8fCAhbWVzc2FnZS5tc2dHdWlkIHx8ICFtZXNzYWdlLm1zZ1R5cGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICghR3VpZC5pc0d1aWQobWVzc2FnZS5tc2dHdWlkKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBtZXNzYWdlLm1zZ1R5cGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtZXNzYWdlVHlwZXM6IEFycmF5PHN0cmluZz4gPVxyXG4gIFsgTWVzc2FnZVR5cGUuQ29tbWFuZCwgTWVzc2FnZVR5cGUuQ29tbWFuZFJlc3BvbnNlLCBNZXNzYWdlVHlwZS5Jbml0aWFsaXplLCBNZXNzYWdlVHlwZS5Ob3RpZmljYXRpb24gXTtcclxuXHJcbiAgaWYgKG1lc3NhZ2VUeXBlcy5pbmRleE9mKG1lc3NhZ2UubXNnVHlwZSkgPCAwKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmVyc2lvbih2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uTnVtYmVyIHwgYW55KTogdmVyc2lvbk51bWJlciBpcyBWZXJzaW9uTnVtYmVyIHtcclxuICBpZiAoIXZlcnNpb25OdW1iZXIpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHYgPSB2ZXJzaW9uTnVtYmVyIGFzIFZlcnNpb25OdW1iZXI7XHJcblxyXG4gIGlmICh0eXBlb2YgdiAhPT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2Ygdi5maXggIT09ICdudW1iZXInIHx8IHR5cGVvZiB2Lm1pbm9yICE9PSAnbnVtYmVyJyB8fCB0eXBlb2Ygdi5tYWpvciAhPT0gJ251bWJlcicpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNJbml0TWVzc2FnZShtZXNzYWdlOiBJbml0aWFsaXplTWVzc2FnZSB8IGFueSk6IG1lc3NhZ2UgaXMgSW5pdGlhbGl6ZU1lc3NhZ2Uge1xyXG4gIGlmICghaXNNZXNzYWdlKG1lc3NhZ2UpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBpbml0TWVzc2FnZSA9IG1lc3NhZ2UgYXMgSW5pdGlhbGl6ZU1lc3NhZ2U7XHJcbiAgaWYgKGluaXRNZXNzYWdlLm1zZ1R5cGUgIT09IE1lc3NhZ2VUeXBlLkluaXRpYWxpemUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICghaW5pdE1lc3NhZ2UuYXBpVmVyc2lvbiB8fCAhaXNWZXJzaW9uKGluaXRNZXNzYWdlLmFwaVZlcnNpb24pKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAoIWluaXRNZXNzYWdlLmNyb3NzRnJhbWVWZXJzaW9uIHx8ICFpc1ZlcnNpb24oaW5pdE1lc3NhZ2UuY3Jvc3NGcmFtZVZlcnNpb24pKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tbWFuZFJlc3BvbnNlTWVzc2FnZShtZXNzYWdlOiBDb21tYW5kUmVzcG9uc2VNZXNzYWdlIHwgYW55KTogbWVzc2FnZSBpcyBDb21tYW5kUmVzcG9uc2VNZXNzYWdlIHtcclxuICBpZiAoIWlzTWVzc2FnZShtZXNzYWdlKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY3JNZXNzYWdlID0gbWVzc2FnZSBhcyBDb21tYW5kUmVzcG9uc2VNZXNzYWdlO1xyXG4gIGlmIChjck1lc3NhZ2UubXNnVHlwZSAhPT0gTWVzc2FnZVR5cGUuQ29tbWFuZFJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAoIUd1aWQuaXNHdWlkKGNyTWVzc2FnZS5jb21tYW5kR3VpZCkpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICghY3JNZXNzYWdlLmRhdGEgJiYgIWNyTWVzc2FnZS5lcnJvcikge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0NvbW1hbmRNZXNzYWdlKG1lc3NhZ2U6IENvbW1hbmRNZXNzYWdlIHwgYW55KTogbWVzc2FnZSBpcyBDb21tYW5kTWVzc2FnZSB7XHJcbiAgaWYgKCFpc01lc3NhZ2UobWVzc2FnZSkpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvbW1hbmRNZXNzYWdlID0gbWVzc2FnZSBhcyBDb21tYW5kTWVzc2FnZTtcclxuICBpZiAoY29tbWFuZE1lc3NhZ2UubXNnVHlwZSAhPT0gTWVzc2FnZVR5cGUuQ29tbWFuZCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFjb21tYW5kTWVzc2FnZS5wYXJhbWV0ZXJzIHx8IHR5cGVvZiBjb21tYW5kTWVzc2FnZS5wYXJhbWV0ZXJzICE9PSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFjb21tYW5kTWVzc2FnZS52ZXJiSWQgfHwgdHlwZW9mIGNvbW1hbmRNZXNzYWdlLnZlcmJJZCAhPT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNOb3RpZmljYXRpb25NZXNzYWdlKG1lc3NhZ2U6IE5vdGlmaWNhdGlvbk1lc3NhZ2UgfCBhbnkpOiBtZXNzYWdlIGlzIE5vdGlmaWNhdGlvbk1lc3NhZ2Uge1xyXG4gIGlmICghaXNNZXNzYWdlKG1lc3NhZ2UpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBub3RpZmljYXRpb25NZXNzYWdlID0gbWVzc2FnZSBhcyBOb3RpZmljYXRpb25NZXNzYWdlO1xyXG4gIGlmIChub3RpZmljYXRpb25NZXNzYWdlLm1zZ1R5cGUgIT09IE1lc3NhZ2VUeXBlLk5vdGlmaWNhdGlvbikge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFub3RpZmljYXRpb25NZXNzYWdlLmRhdGEgfHwgdHlwZW9mIG5vdGlmaWNhdGlvbk1lc3NhZ2UuZGF0YSAhPT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICghbm90aWZpY2F0aW9uTWVzc2FnZS5ub3RpZmljYXRpb25JZCB8fCB0eXBlb2Ygbm90aWZpY2F0aW9uTWVzc2FnZS5ub3RpZmljYXRpb25JZCAhPT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLW1lc3NhZ2luZy9zcmMvTWVzc2FnZVR5cGVDaGVja3MudHNcbiAqKi8iLCJpbXBvcnQge1xyXG4gIEV4ZWN1dGVQYXJhbWV0ZXJzLFxyXG4gIEV4ZWN1dGVSZXNwb25zZSxcclxuICBJbnRlcm5hbEFwaURpc3BhdGNoZXIsXHJcbiAgTW9kZWwsXHJcbiAgTm90aWZpY2F0aW9uSGFuZGxlcixcclxuICBWZXJiSWQsXHJcbiAgVmVyc2lvbk51bWJlcixcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBDb21tYW5kUmVzcG9uc2VNZXNzYWdlLCBNZXNzZW5nZXIsIE5vdGlmaWNhdGlvbk1lc3NhZ2UgfSBmcm9tICdAdGFibGVhdS9hcGktbWVzc2FnaW5nJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBJbnRlcm5hbEFwaURpc3BhdGNoZXIgaW50ZXJmYWNlIHdoaWNoIGZ1bmN0aW9ucyBieSBwYXNzaW5nIG1lc3NhZ2VzXHJcbiAqIGFjcm9zcyBhIGZyYW1lIGJvdW5kYXJ5LiBUaGlzIGlzIHVzdWFsbHkgYmV0d2VlbiB0aGUgY29kZSB3aGVyZSBvdXIgamF2c2NyaXB0IGxpYnJhcnkgaGFzIGJlZW4gaW5jbHVkZWRcclxuICogYnkgYSAzcmQgcGFydHkgZGV2IGFuZCBhbm90aGVyIGZyYW1lIHdoZXJlIFRhYmxlYXUgc2VydmVyIGhhcyBjb250ZW50LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENyb3NzRnJhbWVEaXNwYXRjaGVyIGltcGxlbWVudHMgSW50ZXJuYWxBcGlEaXNwYXRjaGVyIHtcclxuXHJcbiAgLy8gVGhlIGFwaSB2ZXJzaW9uIHdlIGFyZSBvcGVyYXRpbmcgdGhyb3VnaFxyXG4gIHByaXZhdGUgX3ZlcnNpb25OdW1iZXI6IFZlcnNpb25OdW1iZXI7XHJcblxyXG4gIC8vIENvbGxlY3Rpb24gb2YgcGVuZGluZyBwcm9taXNlcyB3aGljaCBhcmUgd2FpdGluZyB0byBiZSByZXNvbHZlZC4gV2hlbiB3ZSByZWNlaXZlIGEgcmVzcG9uc2UgYmFjayBmcm9tIHRoZSBvdGhlciBmcmFtZSxcclxuICAvLyB0aGVzZSBwcm9taXNlcyBjYW4gYmUgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkXHJcbiAgcHJpdmF0ZSBfcGVuZGluZ1Byb21pc2VzOiB7IFttZXNzYWdlR3VpZDogc3RyaW5nXTogeyByZXNvbHZlOiAocmVzcG9uc2U6IEV4ZWN1dGVSZXNwb25zZSkgPT4gdm9pZCwgcmVqZWN0OiAoZXJyb3I6IE1vZGVsKSA9PiB2b2lkfSB9ID0ge307XHJcblxyXG4gIC8vIFRoZSBjb2xsZWN0aW9uIG9mIG5vdGlmaWNhdGlvbiBoYW5kbGVycyB3aGljaCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCB3aXRoIHRoaXMgZGlzcGF0Y2hlclxyXG4gIHByaXZhdGUgX25vdGlmaWNhdGlvbkhhbmRsZXJzOiBBcnJheTxOb3RpZmljYXRpb25IYW5kbGVyPiA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENyb3NzRnJhbWVEaXNwYXRjaGVyIHdoaWNoIHdpbGwgdXNlIHRoZSBnaXZlbiBtZXNzZW5nZXIgdG8gY29tbXVuaWNhdGVcclxuICAgKiBAcGFyYW0gX21lc3NlbmdlciBhbiBpbnN0YW50aWF0ZWQgYW5kIGxpc3RlbmluZyBtZXNzZW5nZXIgb2JqZWN0XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX21lc3NlbmdlcjogTWVzc2VuZ2VyKSB7XHJcbiAgICBpZiAoIXRoaXMuX21lc3Nlbmdlcikge1xyXG4gICAgICB0aHJvdyAnTWlzc2luZyBtZXNzZW5nZXIgb2JqZWN0JztcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgdXAgb3VyIG1lc3NhZ2UgaGFuZGxlcnMuIFdlIG9ubHkgY2FyZSBhYm91dCBpbmNvbWluZyBub3RpZmljYXRpb25zIGFuZCBjb21tYW5kIHJlc3BvbnNlc1xyXG4gICAgdGhpcy5fbWVzc2VuZ2VyLnNldENvbW1hbmRSZXNwb25zZU1lc3NhZ2VIYW5kbGVyKHRoaXMub25Db21tYW5kUmVzcG9uc2UuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLl9tZXNzZW5nZXIuc2V0Tm90aWZpY2F0aW9uTWVzc2FnZUhhbmRsZXIodGhpcy5vbk5vdGlmaWNhdGlvbi5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIC8vLy8vLyBTdGFydCBJbnRlcm5hbEFwaURpc3BhdGNoZXIgaW1wbGVtZW50YXRpb25cclxuXHJcbiAgcHVibGljIHNldFZlcnNpb25OdW1iZXIodmVyc2lvbk51bWJlcjogVmVyc2lvbk51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fdmVyc2lvbk51bWJlciA9IHZlcnNpb25OdW1iZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZXhlY3V0ZSh2ZXJiOiBWZXJiSWQsIHBhcmFtZXRlcnM6IEV4ZWN1dGVQYXJhbWV0ZXJzKTogUHJvbWlzZTxFeGVjdXRlUmVzcG9uc2U+IHtcclxuICAgIC8vIFRvIGV4ZWN1dGUgYSB2ZXJiLCB3ZSBmaXJzdCBwcmVwYXJlIGEgY29tbWFuZCBtZXNzYWdlIGFuZCB0aGVuIGRlZmluZSBhIHByb21pc2UuXHJcbiAgICBjb25zdCBwcmVwYXJlZE1lc3NhZ2UgPSB0aGlzLl9tZXNzZW5nZXIucHJlcGFyZUNvbW1hbmRNZXNzYWdlKHZlcmIsIHBhcmFtZXRlcnMpO1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlPEV4ZWN1dGVSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgLy8gU2F2ZSBvZmYgdGhlIHBlbmRpbmcgcHJvbWlzZSBieSB0aGUgbWVzc2FnZUd1aWQgd2UgYXJlIGFib3V0IHRvIHNlbmQuIFdoZW4gYSByZXNwb25zZSBpc1xyXG4gICAgICAvLyByZWNlaXZlZCwgd2UnbGwgYmUgYWJsZSB0byByZXNvbHZlIHRoaXMgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHRcclxuICAgICAgdGhpcy5fcGVuZGluZ1Byb21pc2VzW3ByZXBhcmVkTWVzc2FnZS5tZXNzYWdlR3VpZF0gPSB7IHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlIGFuZCByZXR1cm4gdGhlIHByb21pc2VcclxuICAgIHByZXBhcmVkTWVzc2FnZS5zZW5kKCk7XHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZWdpc3Rlck5vdGlmaWNhdGlvbkhhbmRsZXIoaGFuZGxlcjogTm90aWZpY2F0aW9uSGFuZGxlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1bnJlZ2lzdGVyTm90aWZpY2F0aW9uSGFuZGxlcihoYW5kbGVyOiBOb3RpZmljYXRpb25IYW5kbGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVycyA9IHRoaXMuX25vdGlmaWNhdGlvbkhhbmRsZXJzLmZpbHRlcihoID0+IGggIT09IGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgLy8vLy8vIEVuZCBJbnRlcm5hbEFwaURpc3BhdGNoZXIgaW1wbGVtZW50YXRpb25cclxuXHJcbiAgcHJpdmF0ZSBvbkNvbW1hbmRSZXNwb25zZShyZXNwb25zZTogQ29tbWFuZFJlc3BvbnNlTWVzc2FnZSk6IHZvaWQge1xyXG4gICAgLy8gV2UgZ290IGEgY29tbWFuZCByZXNwb25zZSwgbG9vayB0aHJvdWdoIHRoZSBwZW5kaW5nIHByb21pc2VzIGFuZCByZXNvbHZlXHJcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fcGVuZGluZ1Byb21pc2VzKS5pbmRleE9mKHJlc3BvbnNlLmNvbW1hbmRHdWlkKSA8IDApIHtcclxuICAgICAgcmV0dXJuOyAvLyBXZSBkb24ndCBoYXZlIGFueSByZWZlcmVuY2UgdG8gdGhpcyBjb21tYW5kLCBqdXN0IHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBlbmRpbmdQcm9taXNlID0gdGhpcy5fcGVuZGluZ1Byb21pc2VzW3Jlc3BvbnNlLmNvbW1hbmRHdWlkXTtcclxuXHJcbiAgICAvLyBJZiB3ZSBoYXZlIGFuIGVycm9yIGRlZmluZWQsIHJlamVjdCB0aGUgcHJvbWlzZVxyXG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XHJcbiAgICAgIHBlbmRpbmdQcm9taXNlLnJlamVjdChyZXNwb25zZS5lcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgd2UgaGF2ZSBkYXRhIGRlZmluZWQsIHJlc29sdmUgdGhlIHByb21pc2VcclxuICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XHJcbiAgICAgIHBlbmRpbmdQcm9taXNlLnJlc29sdmUoe3Jlc3VsdDogcmVzcG9uc2UuZGF0YX0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFuIHVwIG91ciBwZW5kaW5nIHByb21pc2VzIG9iamVjdFxyXG4gICAgZGVsZXRlIHRoaXMuX3BlbmRpbmdQcm9taXNlc1tyZXNwb25zZS5jb21tYW5kR3VpZF07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk1lc3NhZ2U6IE5vdGlmaWNhdGlvbk1lc3NhZ2UpOiB2b2lkIHtcclxuICAgIC8vIEdvIHRocm91Z2ggZWFjaCBub3RpZmljYXRpb24gaGFuZGxlciB3ZSBoYXZlIHJlZ2lzdGVyZWQgYW5kIGxldCB0aGVtIGtub3cgYSBub3RpZmljYXRpb24gY2FtZSBpblxyXG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX25vdGlmaWNhdGlvbkhhbmRsZXJzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaGFuZGxlcih7bm90aWZpY2F0aW9uSWQ6IG5vdGlmaWNhdGlvbk1lc3NhZ2Uubm90aWZpY2F0aW9uSWQsIGRhdGE6IG5vdGlmaWNhdGlvbk1lc3NhZ2UuZGF0YX0pO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gSWdub3JlIHRoaXMuIFdyYXAgaW4gdHJ5L2NhdGNoIHNvIGlmIG9uZSBoYW5kbGVyIGVycm9ycywgdGhlIG90aGVyIHN0aWxsIGdldCB0aGUgbWVzc2FnZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLXNoYXJlZC9zcmMvQ3Jvc3NGcmFtZS9Dcm9zc0ZyYW1lRGlzcGF0Y2hlci50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIGV4dGVybmFsIERhc2hib2FyZENvbnRlbnQgbmFtZXNwYWNlLlxyXG4gKiBUaGlzIGRvZXMgbm90IGZvbGxvdyB0aGUgSW1wbCBwYXR0ZXJuIGFzIERhc2hib2FyZENvbnRlbnQgaXNcclxuICogY3VycmVudGx5IGp1c3QgYSAoc2luZ2xlKSBwcm9wZXJ0eSBiYWcuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGFzaGJvYXJkQ29udGVudCBpbXBsZW1lbnRzIENvbnRyYWN0LkRhc2hib2FyZENvbnRlbnQge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kYXNoYm9hcmQ6IENvbnRyYWN0LkRhc2hib2FyZCkgeyB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZGFzaGJvYXJkKCk6IENvbnRyYWN0LkRhc2hib2FyZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGFzaGJvYXJkO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9OYW1lc3BhY2VzL0Rhc2hib2FyZENvbnRlbnQudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBDb250cmFjdCBmcm9tICdAdGFibGVhdS9hcGktZXh0ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgRXh0ZW5zaW9uRW52aXJvbm1lbnQgfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBJbnRlcm5hbFRvRXh0ZXJuYWxFbnVtTWFwcGluZ3MgYXMgRW51bU1hcHBpbmdzIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXNoYXJlZCc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIGV4dGVybmFsIGVudmlyb25tZW50IG5hbWVzcGFjZS5cclxuICogRW52aXJvbm1lbnQgZG9lcyBub3QgZm9sbG93IHRoZSBJbXBsIHBhdHRlcm4gYXMgaXQgaXNcclxuICoganVzdCBhIHByb3BlcnR5IGJhZy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbnZpcm9ubWVudCBpbXBsZW1lbnRzIENvbnRyYWN0LkVudmlyb25tZW50IHtcclxuICBwcml2YXRlIF9hcGlWZXJzaW9uOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfY29udGV4dDogQ29udHJhY3QuRXh0ZW5zaW9uQ29udGV4dDtcclxuICBwcml2YXRlIF9sYW5ndWFnZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgX21vZGU6IENvbnRyYWN0LkV4dGVuc2lvbk1vZGU7XHJcbiAgcHJpdmF0ZSBfb3BlcmF0aW5nU3lzdGVtOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfdGFibGVhdVZlcnNpb246IHN0cmluZztcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGV4dGVuc2lvbkVudmlyb25tZW50OiBFeHRlbnNpb25FbnZpcm9ubWVudCkge1xyXG4gICAgdGhpcy5fYXBpVmVyc2lvbiA9IGV4dGVuc2lvbkVudmlyb25tZW50LmFwaVZlcnNpb247XHJcbiAgICB0aGlzLl9jb250ZXh0ID0gRW51bU1hcHBpbmdzLmV4dGVuc2lvbkNvbnRleHQuY29udmVydChleHRlbnNpb25FbnZpcm9ubWVudC5leHRlbnNpb25Db250ZXh0KTtcclxuICAgIHRoaXMuX2xhbmd1YWdlID0gZXh0ZW5zaW9uRW52aXJvbm1lbnQuZXh0ZW5zaW9uTGFuZ3VhZ2U7XHJcbiAgICB0aGlzLl9sb2NhbGUgPSBleHRlbnNpb25FbnZpcm9ubWVudC5leHRlbnNpb25Mb2NhbGU7XHJcbiAgICB0aGlzLl9tb2RlID0gRW51bU1hcHBpbmdzLmV4dGVuc2lvbk1vZGUuY29udmVydChleHRlbnNpb25FbnZpcm9ubWVudC5leHRlbnNpb25Nb2RlKTtcclxuICAgIHRoaXMuX29wZXJhdGluZ1N5c3RlbSA9IGV4dGVuc2lvbkVudmlyb25tZW50Lm9wZXJhdGluZ1N5c3RlbTtcclxuICAgIHRoaXMuX3RhYmxlYXVWZXJzaW9uID0gZXh0ZW5zaW9uRW52aXJvbm1lbnQudGFibGVhdVZlcnNpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGFwaVZlcnNpb24oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9hcGlWZXJzaW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjb250ZXh0KCk6IENvbnRyYWN0LkV4dGVuc2lvbkNvbnRleHQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGxhbmd1YWdlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGxvY2FsZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgbW9kZSgpOiBDb250cmFjdC5FeHRlbnNpb25Nb2RlIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBvcGVyYXRpbmdTeXN0ZW0oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9vcGVyYXRpbmdTeXN0ZW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHRhYmxlYXVWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdGFibGVhdVZlcnNpb247XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL05hbWVzcGFjZXMvRW52aXJvbm1lbnQudHNcbiAqKi8iLCJpbXBvcnQgeyBTZXR0aW5ncyBhcyBTZXR0aW5nc0NvbnRyYWN0IH0gZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IFNldHRpbmdzSW1wbCB9IGZyb20gJy4uL0ltcGwvU2V0dGluZ3NJbXBsJztcclxuaW1wb3J0IHsgU2V0dGluZ3NDb2xsZWN0aW9uIH0gZnJvbSAnLi4vU2VydmljZXMvU2V0dGluZ3NTZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgZXh0ZXJuYWwgc2V0dGluZ3MgbmFtZXNwYWNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzIGltcGxlbWVudHMgU2V0dGluZ3NDb250cmFjdCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgc2V0dGluZ3NJbXBsOiBTZXR0aW5nc0ltcGwpIHsgfVxyXG5cclxuICBwdWJsaWMgZXJhc2Uoa2V5OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0dGluZ3NJbXBsLmVyYXNlKGtleSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLnNldHRpbmdzSW1wbC5nZXQoa2V5KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRBbGwoKTogU2V0dGluZ3NDb2xsZWN0aW9uIHtcclxuICAgIHJldHVybiB0aGlzLnNldHRpbmdzSW1wbC5nZXRBbGwoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNNb2RpZmllZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnNldHRpbmdzSW1wbC5pc01vZGlmaWVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNhdmVBc3luYygpOiBQcm9taXNlPFNldHRpbmdzQ29sbGVjdGlvbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NJbXBsLnNhdmVBc3luYygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5zZXR0aW5nc0ltcGwuc2V0KGtleSwgdmFsdWUpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9OYW1lc3BhY2VzL1NldHRpbmdzLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IFVJSW1wbCB9IGZyb20gJy4uL0ltcGwvVUlJbXBsJztcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgZXh0ZXJuYWwgVUkgbmFtZXNwYWNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFVJIGltcGxlbWVudHMgQ29udHJhY3QuVUkge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbXBsOiBVSUltcGwpIHsgfVxyXG5cclxuICBwdWJsaWMgZGlzcGxheURpYWxvZ0FzeW5jKHVybDogc3RyaW5nLCBwYXlsb2FkPzogc3RyaW5nLCBvcHRpb25zPzogQ29udHJhY3QuRGlhbG9nT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5faW1wbC5kaXNwbGF5RGlhbG9nQXN5bmModXJsLCBwYXlsb2FkLCAgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xvc2VEaWFsb2cocGF5bG9hZD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5faW1wbC5jbG9zZURpYWxvZyhwYXlsb2FkKTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9leHRlbnNpb25zLWFwaS9zcmMvTmFtZXNwYWNlcy9VSS50c1xuICoqLyIsImltcG9ydCB7IEludGVybmFsQXBpRGlzcGF0Y2hlciB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IEFwaVNlcnZpY2VSZWdpc3RyeSB9IGZyb20gJ0B0YWJsZWF1L2FwaS1zaGFyZWQnO1xyXG5cclxuaW1wb3J0IHsgSW5pdGlhbGl6YXRpb25TZXJ2aWNlSW1wbCB9IGZyb20gJy4vSW1wbC9Jbml0aWFsaXphdGlvblNlcnZpY2VJbXBsJztcclxuaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlSW1wbCB9IGZyb20gICcuL0ltcGwvU2V0dGluZ3NTZXJ2aWNlSW1wbCc7XHJcbmltcG9ydCB7IFVJU2VydmljZUltcGwgfSBmcm9tICcuL0ltcGwvVUlTZXJ2aWNlSW1wbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJBbGxFeHRlbnNpb25zU2VydmljZXMoZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKTogdm9pZCB7XHJcbiAgQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLnJlZ2lzdGVyU2VydmljZShuZXcgSW5pdGlhbGl6YXRpb25TZXJ2aWNlSW1wbChkaXNwYXRjaGVyKSk7XHJcbiAgQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLnJlZ2lzdGVyU2VydmljZShuZXcgU2V0dGluZ3NTZXJ2aWNlSW1wbChkaXNwYXRjaGVyKSk7XHJcbiAgQXBpU2VydmljZVJlZ2lzdHJ5Lmluc3RhbmNlLnJlZ2lzdGVyU2VydmljZShuZXcgVUlTZXJ2aWNlSW1wbChkaXNwYXRjaGVyKSk7XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9leHRlbnNpb25zLWFwaS9zcmMvU2VydmljZXMvUmVnaXN0ZXJBbGxFeHRlbnNpb25zU2VydmljZXMudHNcbiAqKi8iLCJpbXBvcnQge1xyXG4gIEV4ZWN1dGVQYXJhbWV0ZXJzLFxyXG4gIEV4dGVuc2lvbkJvb3RzdHJhcEluZm8sXHJcbiAgSW50ZXJuYWxBcGlEaXNwYXRjaGVyLFxyXG4gIFBhcmFtZXRlcklkLFxyXG4gIFZlcmJJZFxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBFeHRlbnNpb25zU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vRXh0ZW5zaW9uc1NlcnZpY2VOYW1lcyc7XHJcbmltcG9ydCB7IEluaXRpYWxpemF0aW9uU2VydmljZSB9IGZyb20gJy4uL0luaXRpYWxpemF0aW9uU2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5pdGlhbGl6YXRpb25TZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIEluaXRpYWxpemF0aW9uU2VydmljZSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKSB7IH1cclxuXHJcbiAgcHVibGljIGdldCBzZXJ2aWNlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEV4dGVuc2lvbnNTZXJ2aWNlTmFtZXMuSW5pdGlhbGl6YXRpb25TZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGluaXRpYWxpemVEYXNoYm9hcmRFeHRlbnNpb25zQXN5bmMoaXNFeHRlbnNpb25EaWFsZzogYm9vbGVhbik6IFByb21pc2U8RXh0ZW5zaW9uQm9vdHN0cmFwSW5mbz4ge1xyXG4gICAgY29uc3QgcGFyYW1zOiBFeGVjdXRlUGFyYW1ldGVycyA9IHtbUGFyYW1ldGVySWQuSXNFeHRlbnNpb25EaWFsb2ddOiBpc0V4dGVuc2lvbkRpYWxnfTtcclxuXHJcbiAgICAvLyBXZSBkb24ndCBuZWVkIGFueSBwYXJhbWV0ZXJzIGZvciB0aGlzIGNhbGwgYmVjYXVzZSB0aGV5IGFyZSBhZGRlZCBpbiBmb3IgdXMgYnkgdGhlIGRpc3BhdGNoZXJcclxuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoZXIuZXhlY3V0ZShWZXJiSWQuSW5pdGlhbGl6ZUV4dGVuc2lvbiwgcGFyYW1zKS50aGVuPEV4dGVuc2lvbkJvb3RzdHJhcEluZm8+KHJlc3BvbnNlID0+IHtcclxuICAgICAgLy8gVE9ETyAtIFZhbGlkYXRlIHJldHVybiB2YWx1ZVxyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0IGFzIEV4dGVuc2lvbkJvb3RzdHJhcEluZm87XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9leHRlbnNpb25zLWFwaS9zcmMvU2VydmljZXMvSW1wbC9Jbml0aWFsaXphdGlvblNlcnZpY2VJbXBsLnRzXG4gKiovIiwiaW1wb3J0IHtcclxuICBFeGVjdXRlUGFyYW1ldGVycyxcclxuICBFeHRlbnNpb25TZXR0aW5nc0luZm8sXHJcbiAgSW50ZXJuYWxBcGlEaXNwYXRjaGVyLFxyXG4gIFBhcmFtZXRlcklkLFxyXG4gIFZlcmJJZFxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgRXh0ZW5zaW9uc1NlcnZpY2VOYW1lcyB9IGZyb20gJy4uL0V4dGVuc2lvbnNTZXJ2aWNlTmFtZXMnO1xyXG5pbXBvcnQgeyBTZXR0aW5nc0NvbGxlY3Rpb24sIFNldHRpbmdzU2VydmljZSB9IGZyb20gJy4uL1NldHRpbmdzU2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NTZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIFNldHRpbmdzU2VydmljZSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKSB7IH1cclxuXHJcbiAgcHVibGljIGdldCBzZXJ2aWNlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEV4dGVuc2lvbnNTZXJ2aWNlTmFtZXMuU2V0dGluZ3NTZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNhdmVTZXR0aW5nc0FzeW5jKHNldHRpbmdzOiBTZXR0aW5nc0NvbGxlY3Rpb24pOiBQcm9taXNlPFNldHRpbmdzQ29sbGVjdGlvbj4ge1xyXG4gICAgY29uc3QgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMgPSB7W1BhcmFtZXRlcklkLlNldHRpbmdzVmFsdWVzXTogc2V0dGluZ3N9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoZXIuZXhlY3V0ZShWZXJiSWQuU2F2ZUV4dGVuc2lvblNldHRpbmdzLCBwYXJhbWV0ZXJzKS50aGVuPFNldHRpbmdzQ29sbGVjdGlvbj4odmFsdWUgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZS5yZXN1bHQgYXMgRXh0ZW5zaW9uU2V0dGluZ3NJbmZvO1xyXG5cclxuICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdC5zZXR0aW5nc1ZhbHVlcykge1xyXG4gICAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uaW50ZXJuYWxFcnJvcihbJ3NhdmluZyBzZXR0aW5ncy4nXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybihyZXN1bHQuc2V0dGluZ3NWYWx1ZXMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL1NlcnZpY2VzL0ltcGwvU2V0dGluZ3NTZXJ2aWNlSW1wbC50c1xuICoqLyIsImltcG9ydCB7XHJcbiAgRXhlY3V0ZVBhcmFtZXRlcnMsXHJcbiAgSW50ZXJuYWxBcGlEaXNwYXRjaGVyLFxyXG4gIFBhcmFtZXRlcklkLFxyXG4gIFZlcmJJZFxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBFeHRlbnNpb25zU2VydmljZU5hbWVzIH0gZnJvbSAnLi4vRXh0ZW5zaW9uc1NlcnZpY2VOYW1lcyc7XHJcbmltcG9ydCB7IFVJU2VydmljZSB9IGZyb20gJy4uL1VJU2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVUlTZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIFVJU2VydmljZSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlzcGF0Y2hlcjogSW50ZXJuYWxBcGlEaXNwYXRjaGVyKSB7IH1cclxuXHJcbiAgcHVibGljIGdldCBzZXJ2aWNlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEV4dGVuc2lvbnNTZXJ2aWNlTmFtZXMuVUlTZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3BsYXlEaWFsb2dBc3luYyh1cmw6IHN0cmluZywgcGF5bG9hZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IHtcclxuICAgICAgW1BhcmFtZXRlcklkLkV4dGVuc2lvbkRpYWxvZ1VybF06IHVybCxcclxuICAgICAgW1BhcmFtZXRlcklkLkV4dGVuc2lvbkRpYWxvZ1BheWxvYWRdOiBwYXlsb2FkXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoZXIuZXhlY3V0ZShWZXJiSWQuRGlzcGxheURpYWxvZywgcGFyYW1ldGVycykudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsb3NlRGlhbG9nKHBheWxvYWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGxldCBwYXJhbWV0ZXJzOiBFeGVjdXRlUGFyYW1ldGVycyA9IChwYXlsb2FkKSA/IHtbUGFyYW1ldGVySWQuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZF06IHBheWxvYWR9IDoge307XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlci5leGVjdXRlKFZlcmJJZC5DbG9zZURpYWxvZywgcGFyYW1ldGVycykudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9TZXJ2aWNlcy9JbXBsL1VJU2VydmljZUltcGwudHNcbiAqKi8iLCJpbXBvcnQgeyBFeHRlbnNpb25TZXR0aW5nc0luZm8gfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlUmVnaXN0cnkgfSBmcm9tICdAdGFibGVhdS9hcGktc2hhcmVkJztcclxuaW1wb3J0IHsgUGFyYW0sIFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgRXh0ZW5zaW9uc1NlcnZpY2VOYW1lcyB9IGZyb20gJy4uL1NlcnZpY2VzL0V4dGVuc2lvbnNTZXJ2aWNlTmFtZXMnO1xyXG5pbXBvcnQgeyBTZXR0aW5nc0NvbGxlY3Rpb24sIFNldHRpbmdzU2VydmljZSB9IGZyb20gJy4uL1NlcnZpY2VzL1NldHRpbmdzU2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NJbXBsIHtcclxuICBwcml2YXRlIHN0YXRpYyBBU1lOQ19TQVZFX0lOX1BST0dSRVNTOiBzdHJpbmcgPSAnQXN5bmMgU2F2ZSBpcyBpbiBwcm9ncmVzcywgdXBkYXRpbmcgc2V0dGluZ3MgaXMgbm90IGFsbG93ZWQuJztcclxuICBwcml2YXRlIF9pc01vZGlmaWVkOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2N1cnJlbnRTZXR0aW5nczogU2V0dGluZ3NDb2xsZWN0aW9uO1xyXG5cclxuICAvLyBTaW5jZSBwcm9taXNlcyBjYW4ndCBiZSBpbnRyb3NwZWN0ZWQgZm9yIHN0YXRlLCBrZWVwIGEgdmFyaWFibGUgdGhhdFxyXG4gIC8vIGluZGljYXRlcyBhIHNhdmUgaXMgaW4gcHJvZ3Jlc3MsIHNvIHRoYXQgc2V0L2VyYXNlIGNhbid0IGJlIGNhbGxlZCBkdXJpbmcgYSBzYXZlLlxyXG4gIHByaXZhdGUgX3NhdmVJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzZXR0aW5nc0luZm86IEV4dGVuc2lvblNldHRpbmdzSW5mbykge1xyXG4gICAgdGhpcy5pbml0aWFsaXplU2V0dGluZ3Moc2V0dGluZ3NJbmZvKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBlcmFzZShrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgUGFyYW0udmVyaWZ5VmFsdWUoa2V5LCAna2V5Jyk7XHJcblxyXG4gICAgLy8gT25seSBtYWtlIGEgbW9kaWZpY2F0aW9uIGlmIHdlIGhhdmUgdGhlIGtleSBhbHJlYWR5XHJcbiAgICBpZiAodGhpcy5fY3VycmVudFNldHRpbmdzW2tleV0pIHtcclxuICAgICAgdGhpcy52ZXJpZnlTZXR0aW5nc0FyZVVubG9ja2VkKCk7XHJcblxyXG4gICAgICBkZWxldGUgdGhpcy5fY3VycmVudFNldHRpbmdzW2tleV07XHJcbiAgICAgIHRoaXMuX2lzTW9kaWZpZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBQYXJhbS52ZXJpZnlWYWx1ZShrZXksICdrZXknKTtcclxuICAgIHJldHVybiB0aGlzLl9jdXJyZW50U2V0dGluZ3Nba2V5XTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRBbGwoKTogU2V0dGluZ3NDb2xsZWN0aW9uIHtcclxuICAgIC8vIFJldHVybnMgYSBtdXRhYmxlIGNvcHkgb2YgdGhlIHNldHRpbmdzXHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fY3VycmVudFNldHRpbmdzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNNb2RpZmllZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc01vZGlmaWVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNhdmVBc3luYygpOiBQcm9taXNlPFNldHRpbmdzQ29sbGVjdGlvbj4ge1xyXG4gICAgdGhpcy52ZXJpZnlTZXR0aW5nc0FyZVVubG9ja2VkKCk7XHJcblxyXG4gICAgLy8gSnVzdCByZXNvbHZlIGltbWVkaWF0ZWx5IGlmIHNldHRpbmdzIGFyZSB1bmNoYW5nZWRcclxuICAgIGlmICghdGhpcy5faXNNb2RpZmllZCkge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlPFNldHRpbmdzQ29sbGVjdGlvbj4odGhpcy5fY3VycmVudFNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zYXZlSW5Qcm9ncmVzcyA9IHRydWU7XHJcblxyXG4gICAgLy8gVXNlIHRoZSBzZXR0aW5ncyBzZXJ2aWNlIHRvIHNhdmUgc2V0dGluZ3MgdG8gdHdiXHJcbiAgICBjb25zdCBzZXR0aW5nc1NlcnZpY2UgPSBBcGlTZXJ2aWNlUmVnaXN0cnkuaW5zdGFuY2UuZ2V0U2VydmljZTxTZXR0aW5nc1NlcnZpY2U+KFxyXG4gICAgICBFeHRlbnNpb25zU2VydmljZU5hbWVzLlNldHRpbmdzU2VydmljZSk7XHJcblxyXG4gICAgcmV0dXJuIHNldHRpbmdzU2VydmljZS5zYXZlU2V0dGluZ3NBc3luYyh0aGlzLl9jdXJyZW50U2V0dGluZ3MpLnRoZW48U2V0dGluZ3NDb2xsZWN0aW9uPihuZXdTZXR0aW5ncyA9PiB7XHJcbiAgICAgIHRoaXMuX3NhdmVJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuX2lzTW9kaWZpZWQgPSBmYWxzZTtcclxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9jdXJyZW50U2V0dGluZ3MsIG5ld1NldHRpbmdzKTtcclxuICAgICAgcmV0dXJuIG5ld1NldHRpbmdzO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBQYXJhbS52ZXJpZnlWYWx1ZShrZXksICdrZXknKTsgLy8gS2V5IHNob3VsZG4ndCBiZSBhbiBlbXB0eSBzdHJpbmcuXHJcbiAgICBQYXJhbS52ZXJpZnlTdHJpbmcodmFsdWUsICd2YWx1ZScpOyAvLyBFbXB0eSBzdHJpbmcgdmFsdWUgaXMgYWxsb3dlZC5cclxuICAgIHRoaXMudmVyaWZ5U2V0dGluZ3NBcmVVbmxvY2tlZCgpO1xyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRTZXR0aW5nc1trZXldID0gdmFsdWU7XHJcbiAgICB0aGlzLl9pc01vZGlmaWVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVNldHRpbmdzKHNldHRpbmdzSW5mbzogRXh0ZW5zaW9uU2V0dGluZ3NJbmZvKTogdm9pZCB7XHJcbiAgICBQYXJhbS52ZXJpZnlWYWx1ZShzZXR0aW5nc0luZm8sICdzZXR0aW5nc0luZm8nKTtcclxuICAgIFBhcmFtLnZlcmlmeVZhbHVlKHNldHRpbmdzSW5mby5zZXR0aW5nc1ZhbHVlcywgJ3NldHRpbmdzSW5mby5TZXR0aW5nc1ZhbHVlcycpO1xyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRTZXR0aW5ncyA9IHNldHRpbmdzSW5mby5zZXR0aW5nc1ZhbHVlcztcclxuXHJcbiAgICAvLyBSZXNldCB0aGUgaXNNb2RpZmllZCBmbGFnXHJcbiAgICB0aGlzLl9pc01vZGlmaWVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGhlbHBlciBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBhbnkgbG9jYWwgdXBkYXRlIHRvIHRoaXMuY3VycmVudFNldHRpbmdzLlxyXG4gICAqIENoZWNrcyBpZiBhIGN1cnJlbnQgc2F2ZSBjYWxsIGlzIHN0aWxsIGluIHByb2dyZXNzIGFuZCB0aHJvd3MgYW4gZXJyb3IgaWYgc28uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2ZXJpZnlTZXR0aW5nc0FyZVVubG9ja2VkKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3NhdmVJblByb2dyZXNzKSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uZXJyb3IoU2V0dGluZ3NJbXBsLkFTWU5DX1NBVkVfSU5fUFJPR1JFU1MpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2V4dGVuc2lvbnMtYXBpL3NyYy9JbXBsL1NldHRpbmdzSW1wbC50c1xuICoqLyIsImltcG9ydCAqIGFzIENvbnRyYWN0IGZyb20gJ0B0YWJsZWF1L2FwaS1leHRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQgeyBEaWFsb2dVcGRhdGVFdmVudCwgTm90aWZpY2F0aW9uSWQgfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQge1xyXG4gIEFwaVNlcnZpY2VSZWdpc3RyeSxcclxuICBOb3RpZmljYXRpb25TZXJ2aWNlLFxyXG4gIFNlcnZpY2VOYW1lcyxcclxufSBmcm9tICdAdGFibGVhdS9hcGktc2hhcmVkJztcclxuXHJcbmltcG9ydCB7IEV4dGVuc2lvbnNTZXJ2aWNlTmFtZXMgfSBmcm9tICcuLi9TZXJ2aWNlcy9FeHRlbnNpb25zU2VydmljZU5hbWVzJztcclxuaW1wb3J0IHsgVUlTZXJ2aWNlIH0gZnJvbSAnLi4vU2VydmljZXMvVUlTZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBVSUltcGwge1xyXG4gIHB1YmxpYyBkaXNwbGF5RGlhbG9nQXN5bmModXJsOiBzdHJpbmcsIHBheWxvYWQ/OiBzdHJpbmcsIG9wdGlvbnM/OiBDb250cmFjdC5EaWFsb2dPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHVpU2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPFVJU2VydmljZT4oRXh0ZW5zaW9uc1NlcnZpY2VOYW1lcy5VSVNlcnZpY2UpO1xyXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uU2VydmljZTogTm90aWZpY2F0aW9uU2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPE5vdGlmaWNhdGlvblNlcnZpY2U+KFNlcnZpY2VOYW1lcy5Ob3RpZmljYXRpb24pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIC8vIFRPRE86IDcxOTU0OSBzZW5kIGFuZCBoYW5kbGUgaW50aWFsIHBheWxvYWRcclxuICAgICAgdWlTZXJ2aWNlLmRpc3BsYXlEaWFsb2dBc3luYyh1cmwsICcnKS50aGVuKCgpID0+IHtcclxuICAgICAgICBjb25zdCB1bnJlZ2lzdGVyRm4gPSBub3RpZmljYXRpb25TZXJ2aWNlLnJlZ2lzdGVySGFuZGxlcihOb3RpZmljYXRpb25JZC5FeHRlbnNpb25EaWFsb2dVcGRhdGUsIChtb2RlbCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7IC8vIExldCB0aHJvdWdoIGFueSBkaWFsb2cgdXBkYXRlIGV2ZW50XHJcbiAgICAgICAgfSwgKGV2ZW50OiBEaWFsb2dVcGRhdGVFdmVudCkgPT4ge1xyXG4gICAgICAgICAgaWYgKGV2ZW50LmlzQ2xvc2VFdmVudCkge1xyXG4gICAgICAgICAgICByZXNvbHZlKGV2ZW50LmNsb3NlUGF5bG9hZCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBUT0RPIHJlY29uY2lsZSB3aXRoIFRhYmxlYXVFcnJvciBzdG9yeVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ29udHJhY3QuRXJyb3JDb2Rlcy5EaWFsb2dDbG9zZWRCeVVzZXIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHVucmVnaXN0ZXJGbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsb3NlRGlhbG9nKHBheWxvYWQ/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IHVpU2VydmljZSA9IEFwaVNlcnZpY2VSZWdpc3RyeS5pbnN0YW5jZS5nZXRTZXJ2aWNlPFVJU2VydmljZT4oXHJcbiAgICAgIEV4dGVuc2lvbnNTZXJ2aWNlTmFtZXMuVUlTZXJ2aWNlKTtcclxuXHJcbiAgICB1aVNlcnZpY2UuY2xvc2VEaWFsb2cocGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL0ltcGwvVUlJbXBsLnRzXG4gKiovIiwiaW1wb3J0ICogYXMgQ29udHJhY3QgZnJvbSAnQHRhYmxlYXUvYXBpLWV4dGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IEV4dGVuc2lvbnNJbXBsIH0gZnJvbSAnLi4vSW1wbC9FeHRlbnNpb25zSW1wbCc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIGV4dGVybmFsIEV4dGVuc2lvbnMgbmFtZXNwYWNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4dGVuc2lvbnMgaW1wbGVtZW50cyBDb250cmFjdC5FeHRlbnNpb25zIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBleHRlbnNpb25JbXBsOiBFeHRlbnNpb25zSW1wbCkge1xyXG4gICAgdGhpcy5leHRlbnNpb25JbXBsID0gZXh0ZW5zaW9uSW1wbDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZGFzaGJvYXJkQ29udGVudCgpOiBDb250cmFjdC5EYXNoYm9hcmRDb250ZW50IHtcclxuICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbkltcGwuZGFzaGJvYXJkQ29udGVudDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZW52aXJvbm1lbnQoKTogQ29udHJhY3QuRW52aXJvbm1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uSW1wbC5lbnZpcm9ubWVudDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc2V0dGluZ3MoKTogQ29udHJhY3QuU2V0dGluZ3Mge1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uSW1wbC5zZXR0aW5ncztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdWkoKTogQ29udHJhY3QuVUkge1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uSW1wbC51aTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplQXN5bmMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5leHRlbnNpb25JbXBsLmluaXRpYWxpemVBc3luYyhmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5pdGlhbGl6ZURpYWxvZ0FzeW5jKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uSW1wbC5pbml0aWFsaXplQXN5bmModHJ1ZSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvZXh0ZW5zaW9ucy1hcGkvc3JjL05hbWVzcGFjZXMvRXh0ZW5zaW9ucy50c1xuICoqLyIsImltcG9ydCB7IEFwaUV2ZW50SGFuZGxlciB9IGZyb20gJ0B0YWJsZWF1L2FwaS1jb3JlJztcclxuaW1wb3J0IHsgSW50ZXJuYWxBcGlEaXNwYXRjaGVyLCBJbnRlcm5hbEFwaURpc3BhdGNoZXJIb2xkZXIgfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuXHJcbmltcG9ydCB7IEFkZEluQXBpUHJlc0xheWVySW1wbCB9IGZyb20gJy4vQWRkSW5BcGlQcmVzTGF5ZXJJbXBsJztcclxuaW1wb3J0IHsgRGVza3RvcEFwaURpc3BhdGNoZXIgfSBmcm9tICcuL0Rlc2t0b3BBcGlEaXNwYXRjaGVyJztcclxuaW1wb3J0IHsgaGFzUXQsIGluaXRpYWxpemVXZWJDaGFubmVsUHJlc0xheWVyIH0gZnJvbSAnLi9RdFdlYkNoYW5uZWxJbXBsJztcclxuXHJcbi8qKlxyXG4gKiBXcmFwcGVyIGZvciBhbGwgdGhlIGJvb3RzdHJhcHBpbmcgbG9naWMuIFRoaXMgY29kZSBhdHRlbXB0cyB0byBpbml0aWFsaXplIHRoZSBxdCBwcmVzLWxheWVyXHJcbiAqIGFzIHdlbGwgYXMgdGhlIGRlc2t0b3AgZGlzcGF0Y2hlci4gSXQgdGhlbiBhc3NpZ25zIGl0IHRvIHRoZSBnbG9iYWwgZGVza3RvcCBkaXNwYXRjaGVyIHRvXHJcbiAqIGJlIHBpY2tlZCB1cCBieSB0aGUgYWRkLWluIGV4dGVybmFsIEFwaVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRvQm9vdHN0cmFwKCk6IFByb21pc2U8SW50ZXJuYWxBcGlEaXNwYXRjaGVyPiB7XHJcbiAgaWYgKCFoYXNRdCgpKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ05vdCBydW5uaW5nIGluIGRlc2t0b3Agd2l0aCBxdCBhdmFpbGFibGUnKTtcclxuICB9XHJcblxyXG4gIC8vIEZpcnN0IHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGUgd2ViY2hhbm5lbCBwcmVzLWxheWVyXHJcbiAgbGV0IGRpc3BhdGNoZXJQcm9taXNlID0gaW5pdGlhbGl6ZVdlYkNoYW5uZWxQcmVzTGF5ZXIoKS50aGVuPEludGVybmFsQXBpRGlzcGF0Y2hlcj4oKHByZXNsYXllcikgPT4ge1xyXG4gICAgY29uc3QgcHJlc0xheWVyQXBpID0gbmV3IEFkZEluQXBpUHJlc0xheWVySW1wbChwcmVzbGF5ZXIpO1xyXG4gICAgaWYgKCFwcmVzTGF5ZXJBcGkuQWRkSW5JbnN0YW5jZUluZm8uYWRkSW5Mb2NhdG9yUHJlc01vZGVsKSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uaXNVbmRlZmluZWQoWydBZGRJbkluc3RhbmNlSW5mbyddKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHRoZSBhcGlFdmVudEhhbmRsZXIgYW5kIHRoZSBkZXNrdG9wRGlzcGF0Y2hlciB3aXRoIGl0XHJcbiAgICBjb25zdCBhcGlFdmVudEhhbmRsZXIgPSBuZXcgQXBpRXZlbnRIYW5kbGVyKHByZXNMYXllckFwaSwgcHJlc0xheWVyQXBpLkFkZEluSW5zdGFuY2VJbmZvLmFkZEluTG9jYXRvclByZXNNb2RlbCwgdHJ1ZSk7XHJcbiAgICBjb25zdCBkZXNrdG9wRGlzcGF0Y2hlciA9IG5ldyBEZXNrdG9wQXBpRGlzcGF0Y2hlcihhcGlFdmVudEhhbmRsZXIpO1xyXG5cclxuICAgIHJldHVybiBkZXNrdG9wRGlzcGF0Y2hlcjtcclxuICB9KTtcclxuXHJcbiAgLy8gQXNzaWduIHRoZSBkZXNrdG9wIGRpc3BhdGNoZXIgZm9yIHRoZSBvdGhlciBwcm9qZWN0IHRvIGZpbmQgaXRcclxuICBJbnRlcm5hbEFwaURpc3BhdGNoZXJIb2xkZXIuc2V0RGVza3RvcERpc3BhdGNoZXJQcm9taXNlKGRpc3BhdGNoZXJQcm9taXNlKTtcclxuXHJcbiAgcmV0dXJuIGRpc3BhdGNoZXJQcm9taXNlO1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4uL3NyYy9GcmVsYXJkRGVza3RvcEJvb3RzdHJhcC50c1xuICoqLyIsIi8qKlxyXG4gKiBUaGlzIGlzIHlvdXIgbWFpbi4gVGhpcyBpcyB3aGVyZSB5b3UgcmUtZXhwb3J0IGV2ZXJ5dGhpbmcgeW91IHdhbnQgdG8gYmUgcHVibGljbHkgYXZhaWxhYmxlLlxyXG4gKlxyXG4gKiBUaGUgYnVpbGQgZW5mb3JjZXMgdGhhdCB0aGUgZmlsZSBoYXMgdGhlIHNhbWUgbmFtZSBhcyB0aGUgZ2xvYmFsIHZhcmlhYmxlIHRoYXQgaXMgZXhwb3J0ZWQuXHJcbiAqL1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9BcGlFdmVudEhhbmRsZXInO1xyXG5cclxuLy8gTmVlZCB0byBleHBvcnQgdGhlc2UgdHdvIHByZXMgbW9kZWxzIGZvciB1c2UgYnkgb3RoZXIgcHJvamVjdHNcclxuZXhwb3J0IHtcclxuICBBZGRJbkluc3RhbmNlUHJlc01vZGVsLFxyXG4gIEFkZEluTG9jYXRvclByZXNNb2RlbCxcclxuICBBZGRJbkJvb3RzdHJhcEluZm9QcmVzTW9kZWwsXHJcbiAgUHJlc2VudGF0aW9uTW9kZWxcclxufSBmcm9tICcuLi9nZW4tc3JjL3ByZXNsYXllci9QcmVzTW9kZWxzJztcclxuZXhwb3J0IHsgTm90aWZpY2F0aW9uSWQgfSBmcm9tICcuLi9nZW4tc3JjL3ByZXNsYXllci9FdmVudHMnO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9BcGlDb3JlLnRzXG4gKiovIiwiaW1wb3J0IHtcclxuICBFeGVjdXRlUGFyYW1ldGVycyxcclxuICBFeGVjdXRlUmVzcG9uc2UsXHJcbiAgRXh0ZW5zaW9uTG9jYXRvciBhcyBBcGlFeHRlbnNpb25Mb2NhdG9yLFxyXG4gIE1vZGVsLFxyXG4gIE5vdGlmaWNhdGlvbklkLFxyXG4gIFBhcmFtZXRlcklkIGFzIEFwaVBhcmFtZXRlcklkLFxyXG4gIFZlcmJJZCxcclxuICBWZXJzaW9uTnVtYmVyLFxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb25MYXllciB9IGZyb20gJ0B0YWJsZWF1L3ByZXNsYXllci1hcGktY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uSWQgYXMgUHJlc0xheWVyRXZlbnRJZCB9IGZyb20gJy4uL2dlbi1zcmMvcHJlc2xheWVyL0V2ZW50cyc7XHJcbmltcG9ydCB7IFBhcmFtZXRlcklkIGFzIFByZXNMYXllclBhcmFtZXRlcklkIH0gZnJvbSAnLi4vZ2VuLXNyYy9wcmVzbGF5ZXIvUGFyYW1zJztcclxuaW1wb3J0IHsgQWRkSW5Mb2NhdG9yUHJlc01vZGVsLCBQcmVzZW50YXRpb25Nb2RlbCB9IGZyb20gJy4uL2dlbi1zcmMvcHJlc2xheWVyL1ByZXNNb2RlbHMnO1xyXG5pbXBvcnQgeyBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5IH0gZnJvbSAnLi9tYXBwaW5ncy9Db21tYW5kTWFwcGluZ1JlZ2lzdHJ5JztcclxuaW1wb3J0IHsgQ29tbWFuZE1hcHBpbmdSZWdpc3RyeUZhY3RvcnkgfSBmcm9tICcuL21hcHBpbmdzL0NvbW1hbmRNYXBwaW5nUmVnaXN0cnlGYWN0b3J5JztcclxuaW1wb3J0IHsgRXZlbnRNYXBwaW5nUmVnaXN0cnksIEV2ZW50TWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeSB9IGZyb20gJy4vbWFwcGluZ3MvRXZlbnRNYXBwaW5nUmVnaXN0cnlGYWN0b3J5JztcclxuaW1wb3J0IHtcclxuICBBcGlUb1ByZXNMYXllck1hcHBpbmdSZWdpc3RyeSxcclxuICBQYXJhbWV0ZXJNYXBwaW5nUmVnaXN0cnlGYWN0b3J5LFxyXG4gIFByZXNMYXllclRvQXBpTWFwcGluZ1JlZ2lzdHJ5LFxyXG59IGZyb20gJy4vbWFwcGluZ3MvUGFyYW1ldGVyTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeSc7XHJcblxyXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb25IYW5kbGVyID0gKG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uSWQsIG1vZGVsOiBNb2RlbCkgPT4gdm9pZDtcclxuXHJcbi8qKlxyXG4gKiBNYWluIGNsYXNzIGZvciB0aGUgYXBpLWNvcmUgcHJvamVjdC4gVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgZXhlY3V0aW5nIGNvbWFtbmQgYW5kIG1hcnNoYWxsaW5nIG5vdGlmaWNhdGlvbnNcclxuICogYmV0d2VlbiB0aGUgaW50ZXJuYWwgQXBpIGFuZCB0aGUgcHJlcy1sYXllciBBcGkuIEFmdGVyIGNvbnN0cnVjdGlvbiwgU2V0VmVyc2lvbk51bWJlciBtdXN0IGJlIGNhbGxlZCBpbiBvcmRlciB0b1xyXG4gKiB1c2UgdGhpcyBjbGFzc1xyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBBcGlFdmVudEhhbmRsZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBcGlFdmVudEhhbmRsZXIge1xyXG4gIHByaXZhdGUgc3RhdGljIFZFUlNJT05fTk9UX0NPTkZJR1VSRUQ6IHN0cmluZyA9ICdWZXJzaW9uTnVtYmVyIG5vdCB5ZXQgY29uZmlndXJlZC4gQ2Fubm90IHRha2UgYW55IGFjdGlvbnMnO1xyXG4gIHByaXZhdGUgX2FwaUV4dGVuc2lvbkxvY2F0b3I6IEFwaUV4dGVuc2lvbkxvY2F0b3I7XHJcbiAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyOiBOb3RpZmljYXRpb25IYW5kbGVyO1xyXG4gIHByaXZhdGUgX2NvbW1hbmRSZWdpc3RyeTogQ29tbWFuZE1hcHBpbmdSZWdpc3RyeTtcclxuICBwcml2YXRlIF9ldmVudFJlZ2lzdHJ5OiBFdmVudE1hcHBpbmdSZWdpc3RyeTtcclxuICBwcml2YXRlIF9hcGlUb1ByZXNMYXllclJlZ2lzdHJ5OiBBcGlUb1ByZXNMYXllck1hcHBpbmdSZWdpc3RyeTtcclxuICBwcml2YXRlIF9wcmVzTGF5ZXJUb0FwaVJlZ2lzdHJ5OiBQcmVzTGF5ZXJUb0FwaU1hcHBpbmdSZWdpc3RyeTtcclxuICBwcml2YXRlIF92ZXJzaW9uTnVtYmVyPzogVmVyc2lvbk51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBBcGlFdmVudEhhbmRsZXIuXHJcbiAgICogQHBhcmFtIHtQcmVzZW50YXRpb25MYXllcn0gcHJlc0xheWVyIC0gQW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIHByZXMtbGF5ZXIgQXBpIHRvIHVzZVxyXG4gICAqIEBwYXJhbSB7QWRkSW5Mb2NhdG9yUHJlc01vZGVsfSBhZGRJbkxvY2F0b3JQcmVzTW9kZWwgLSBsb2NhdG9yIGZvciB0aGUgYWRkLWluIHdoaWNoIGlzIGJlaW5nIHJlZmVyZW5jZWRcclxuICAgKiBAcGFyYW0ge3J1bm5pbmdJbkRlc2t0b3B9IGJvb2xlYW4gLSB0cnVlIGlmIHRoaXMgaXMgQXBpRXZlbnRIYW5kbGVyIGlzIGNyZWF0ZWQgaW4gYSBEZXNrdG9wIGNvbnRleHQuXHJcbiAgICogQG1lbWJlcm9mIEFwaUV2ZW50SGFuZGxlclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3ByZXNMYXllcjogUHJlc2VudGF0aW9uTGF5ZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfcHJlc0xheWVyQWRkSW5Mb2NhdG9yOiBBZGRJbkxvY2F0b3JQcmVzTW9kZWwsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfcnVubmluZ0luRGVza3RvcDogYm9vbGVhbikgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGludGVybmFsIEFwaSB2ZXJzaW9uIG51bWJlciB3aGljaCB0aGUgZXh0ZXJuYWwgbGlicmFyeSBpcyBleHBlY3RpbmcgdG8gdXNlLiBUaGlzIG11c3QgYmUgY2FsbGVkIGJlZm9yZVxyXG4gICAqIGFueXRoaW5nIGVsc2UgaW4gb3JkZXIgdG8gcHJvcGVybHkgc2V0IHVwIHRoZSB0cmFuc2xhdGlvbiBsYXllcnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1ZlcnNpb25OdW1iZXJ9IHZlcnNpb25OdW1iZXJcclxuICAgKiBAbWVtYmVyb2YgQXBpRXZlbnRIYW5kbGVyXHJcbiAgICovXHJcbiAgcHVibGljIHNldFZlcnNpb25OdW1iZXIodmVyc2lvbk51bWJlcjogVmVyc2lvbk51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fdmVyc2lvbk51bWJlciA9IHZlcnNpb25OdW1iZXI7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBhbGwgb3VyIHJlZ2lzdHJpZXNcclxuICAgIHRoaXMuX2NvbW1hbmRSZWdpc3RyeSA9IENvbW1hbmRNYXBwaW5nUmVnaXN0cnlGYWN0b3J5LmNyZWF0ZUNvbW1hbmRNYXBwaW5nUmVnaXN0cnkodmVyc2lvbk51bWJlciwgdGhpcy5fcnVubmluZ0luRGVza3RvcCk7XHJcbiAgICB0aGlzLl9hcGlUb1ByZXNMYXllclJlZ2lzdHJ5ID0gUGFyYW1ldGVyTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeS5jcmVhdGVBcGlUb1ByZXNMYXllclBhcmFtUmVnaXN0cnkodmVyc2lvbk51bWJlcik7XHJcbiAgICB0aGlzLl9wcmVzTGF5ZXJUb0FwaVJlZ2lzdHJ5ID0gUGFyYW1ldGVyTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeS5jcmVhdGVQcmVzTGF5ZXJUb0FwaVBhcmFtUmVnaXN0cnkodmVyc2lvbk51bWJlcik7XHJcbiAgICB0aGlzLl9ldmVudFJlZ2lzdHJ5ID0gRXZlbnRNYXBwaW5nUmVnaXN0cnlGYWN0b3J5LmNyZWF0ZUV2ZW50TWFwcGluZ1JlZ2lzdHJ5KHZlcnNpb25OdW1iZXIpO1xyXG5cclxuICAgIC8vIENvbnZlcnQgb3VyIGFkZEluTG9jYXRvciB0byB0aGUgQXBpIHZlcnNpb25cclxuICAgIHRoaXMuX2FwaUV4dGVuc2lvbkxvY2F0b3IgPSB0aGlzLl9wcmVzTGF5ZXJUb0FwaVJlZ2lzdHJ5XHJcbiAgICAgIC5nZXQoUHJlc0xheWVyUGFyYW1ldGVySWQuQWRkSW5Mb2NhdG9yLCBBcGlQYXJhbWV0ZXJJZC5FeHRlbnNpb25Mb2NhdG9yKSh0aGlzLl9wcmVzTGF5ZXJBZGRJbkxvY2F0b3IpIGFzIEFwaUV4dGVuc2lvbkxvY2F0b3I7XHJcblxyXG4gICAgZm9yIChjb25zdCBwbEV2ZW50SWQgb2YgT2JqZWN0LmtleXModGhpcy5fZXZlbnRSZWdpc3RyeSkpIHtcclxuICAgICAgLy8gUmVnaXN0ZXIgZm9yIGFsbCBub3RpZmljYXRpb25zIHdlIGtub3cgYWJvdXQgYW5kIGJpbmQgdGhlIGV2ZW50IHR5cGUgdG8gdGhlIGNhbGxiYWNrXHJcbiAgICAgIHRoaXMuX3ByZXNMYXllci5yZWdpc3Rlck5vdGlmaWNhdGlvbkhhbmRsZXIocGxFdmVudElkLCB0aGlzLm9uUHJlc0xheWVyTm90aWZpY2F0aW9uLmJpbmQodGhpcywgcGxFdmVudElkKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24gdG8gYmUgbm90aWZpZWQgd2hlbiBBcGkgZXZlbnRzIGNvbWUgaW4uIE9ubHkgYSBzaW5nbGUgcmVnaXN0cmF0aW9uIGlzIHN1cHBvcnRlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Tm90aWZpY2F0aW9uSGFuZGxlcn0gZXZlbnRIYW5kbGVyXHJcbiAgICogQG1lbWJlcm9mIEFwaUV2ZW50SGFuZGxlclxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRFdmVudEhhbmRsZXIoZXZlbnRIYW5kbGVyOiBOb3RpZmljYXRpb25IYW5kbGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIgPSBldmVudEhhbmRsZXI7XHJcblxyXG4gICAgLy8gVE9ETyAtIFJlZ2lzdGVyIGZvciBwcmVzIGxheWVyIGV2ZW50c1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZXMgdGhlIHJlcXVlc3RlZCBBcGkgY29tbWFuZCBieSBjb252ZXJ0aW5nIHRoZSBwYXJhbWV0ZXJzLCBydW5uaW5nIHRoZSBjb21tYW5kIGFnYWluc3QgdGhlIHByZXMtbGF5ZXIsXHJcbiAgICogdGhlbiBwcm9jZXNzaW5nIHRoZSByZXN1bHQgYmFjayBpbnRvIGEgZm9ybWF0IHRoZSBBcGkgY2FuIHVuZGVyc3RhbmRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7VmVyYklkfSB2ZXJiXHJcbiAgICogQHBhcmFtIHtFeGVjdXRlUGFyYW1ldGVyc30gcGFyYW1ldGVyc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEV4ZWN1dGVSZXNwb25zZT59XHJcbiAgICogQG1lbWJlcm9mIEFwaUV2ZW50SGFuZGxlclxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRlKHZlcmI6IFZlcmJJZCwgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMpOiBQcm9taXNlPEV4ZWN1dGVSZXNwb25zZT4ge1xyXG4gICAgdGhpcy5hc3NlcnRJbml0aWFsaXplZCgpO1xyXG5cclxuICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLl9jb21tYW5kUmVnaXN0cnkuZ2V0Q29tbWFuZCh2ZXJiKTtcclxuICAgIHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xyXG5cclxuICAgIC8vIEF1Z21lbnQgdGhlIGNvbW1hbmQgd2l0aCB0aGUgbG9jYXRvciBpZiBpdCdzIG5lZWRlZFxyXG4gICAgaWYgKGNvbW1hbmQubmVlZHNBZGRJbkxvY2F0b3IpIHtcclxuICAgICAgcGFyYW1ldGVyc1tBcGlQYXJhbWV0ZXJJZC5FeHRlbnNpb25Mb2NhdG9yXSA9IHRoaXMuX2FwaUV4dGVuc2lvbkxvY2F0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tbWFuZHNQYXJhbXMgPSBjb21tYW5kLmNyZWF0ZVBhcmFtcyhwYXJhbWV0ZXJzLCB0aGlzLl9hcGlUb1ByZXNMYXllclJlZ2lzdHJ5KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fcHJlc0xheWVyLmludm9rZUNvbW1hbmQ8e1tkb2NQYXJhbUlkOiBzdHJpbmddOiBvYmplY3R9Pihjb21tYW5kLm5hbWVzcGFjZSwgY29tbWFuZC5jb21tYW5kSWQsIGNvbW1hbmRzUGFyYW1zKVxyXG4gICAgLnRoZW48RXhlY3V0ZVJlc3BvbnNlPigoY29tbWFuZFJlc3VsdCkgPT4ge1xyXG4gICAgICBjb25zdCBjb252ZXJ0ZWRSZXN1bHQgPSBjb21tYW5kLlByb2Nlc3NSZXN1bHQoY29tbWFuZFJlc3VsdCwgdGhpcy5fcHJlc0xheWVyVG9BcGlSZWdpc3RyeSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdWx0OiBjb252ZXJ0ZWRSZXN1bHRcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBBcGlFeHRlbnNpb25Mb2NhdG9yKCk6IEFwaUV4dGVuc2lvbkxvY2F0b3Ige1xyXG4gICAgcmV0dXJuIHRoaXMuX2FwaUV4dGVuc2lvbkxvY2F0b3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGNoZWNrIHRoYXQgdGhpbmdzIGFyZSBpbml0aWFsaXplZCBhcyBleHBlY3RlZC4gVGhyb3dzIGlmIGluaXRpYWxpemF0aW9uIG5vdCBjb21wbGV0ZVxyXG4gICAqXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAbWVtYmVyb2YgQXBpRXZlbnRIYW5kbGVyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3NlcnRJbml0aWFsaXplZCgpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5fdmVyc2lvbk51bWJlcikge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmVycm9yKEFwaUV2ZW50SGFuZGxlci5WRVJTSU9OX05PVF9DT05GSUdVUkVEKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIGEgbmV3IGV2ZW50IG5vdGlmaWNhdGlvbiBjb21lcyBpbiBmcm9tIHRoZSBwcmVzZW50YXRpb24gbGF5ZXJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudElkIFRoZSBwcmVzIGxheWVyIGV2ZW50IGlkXHJcbiAgICogQHBhcmFtIHByZXNNb2RlbCBUaGUgcHJlcyBtb2RlbCB0aGF0IGlzIGluY2x1ZGVkIHdpdGggdGhlIGV2ZW50XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBvblByZXNMYXllck5vdGlmaWNhdGlvbihldmVudElkOiBQcmVzTGF5ZXJFdmVudElkLCBwcmVzTW9kZWw6IFByZXNlbnRhdGlvbk1vZGVsKTogdm9pZCB7XHJcbiAgICAvLyBGaXJzdCBsb29rIHVwIHRoaXMgZXZlbnRJZCBpbiBvdXIgcmVnaXN0cnkgYW5kIGNvbnZlcnQgdG8gcHJlc01vZGVsXHJcbiAgICBjb25zdCBldmVudE1hcHBpbmcgPSB0aGlzLl9ldmVudFJlZ2lzdHJ5W2V2ZW50SWRdO1xyXG4gICAgY29uc3QgYXBpTW9kZWwgPSBldmVudE1hcHBpbmcuY29udmVydGVyKHByZXNNb2RlbCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2V2ZW50SGFuZGxlcikge1xyXG4gICAgICB0aGlzLl9ldmVudEhhbmRsZXIoZXZlbnRNYXBwaW5nLmFwaUlkLCBhcGlNb2RlbCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL0FwaUV2ZW50SGFuZGxlci50c1xuICoqLyIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vXHJcbi8vIFRoaXMgZmlsZSBpcyB0aGUgY29weXJpZ2h0ZWQgcHJvcGVydHkgb2YgVGFibGVhdSBTb2Z0d2FyZSBhbmQgaXMgcHJvdGVjdGVkXHJcbi8vIGJ5IHJlZ2lzdGVyZWQgcGF0ZW50cyBhbmQgb3RoZXIgYXBwbGljYWJsZSBVLlMuIGFuZCBpbnRlcm5hdGlvbmFsIGxhd3MgYW5kXHJcbi8vIHJlZ3VsYXRpb25zLlxyXG4vL1xyXG4vLyBVbmxpY2Vuc2VkIHVzZSBvZiB0aGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGlzIHByb2hpYml0ZWQuIFBsZWFzZSByZWZlciB0b1xyXG4vLyB0aGUgTk9USUNFUy50eHQgZmlsZSBmb3IgZnVydGhlciBkZXRhaWxzLlxyXG4vL1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBXQVJOSU5HOiBDb21wdXRlciBnZW5lcmF0ZWQgZmlsZS4gIERvIG5vdCBoYW5kIG1vZGlmeS5cclxuLy8gREVQRU5EUyBPTjogWycuLi9qcy1hcGkvYXBpLWNvcmUvbm9kZV9tb2R1bGVzL0B0YWJsZWF1L3ByZXNsYXllci1jb2RlZ2VuLXR5cGVzY3JpcHQvdGVtcGxhdGVzL3BhcmFtcy10cy50ZW1wbGF0ZScsIHUnLi4vanMtYXBpL2FwaS1jb3JlL3RlbXAtcHJlcy1sYXllci9hbGwtcGFyYW1zLmRhdGEnXVxyXG5cclxuZXhwb3J0IGVudW0gUGFyYW1ldGVySWQge1xyXG5cclxuICAvLyBEUElfSW50ZWdlclJMRSwgaGF2aW5nIHR5cGUgaW50W11cclxuICBJbnRlZ2VyUkxFID0gJ2ludFJsZScsXHJcblxyXG4gIC8vIERQSV9VbnNpZ25lZEludGVnZXJSTEUsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIFVuc2lnbmVkSW50ZWdlclJMRSA9ICd1aW50UmxlJyxcclxuXHJcbiAgLy8gRFBJX0Zsb2F0UkxFLCBoYXZpbmcgdHlwZSBmbG9hdFtdXHJcbiAgRmxvYXRSTEUgPSAnZmxvYXRSbGUnLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVySUQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhcmFtZXRlcklEID0gJ3BhcmFtVHlwZScsXHJcblxyXG4gIC8vIERQSV9BbGxvd0N1c3RvbURhdGFiYXNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dDdXN0b21EYXRhYmFzZSA9ICdhbGxvd0N1c3RvbURhdGFiYXNlJyxcclxuXHJcbiAgLy8gRFBJX0FsbG93Q3VzdG9tU2NoZW1hLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dDdXN0b21TY2hlbWEgPSAnYWxsb3dDdXN0b21TY2hlbWEnLFxyXG5cclxuICAvLyBEUElfQWxsb3dDdXN0b21TUUwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd0N1c3RvbVNRTCA9ICdhbGxvd0N1c3RvbVNxbCcsXHJcblxyXG4gIC8vIERQSV9BbGxvd0N1c3RvbVNRTFdpdGhvdXRTY2hlbWEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd0N1c3RvbVNRTFdpdGhvdXRTY2hlbWEgPSAnYWxsb3dDdXN0b21TcWxXaXRob3V0U2NoZW1hJyxcclxuXHJcbiAgLy8gRFBJX0FsbG93UHJldmlld0RhdGEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd1ByZXZpZXdEYXRhID0gJ2FsbG93UHJldmlld0RhdGEnLFxyXG5cclxuICAvLyBEUElfQWxsb3dTdG9yZWRQcm9jLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dTdG9yZWRQcm9jID0gJ2FsbG93U3RvcmVkUHJvY2VkdXJlJyxcclxuXHJcbiAgLy8gRFBJX0FsbG93VW5pb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd1VuaW9uID0gJ2FsbG93VW5pb24nLFxyXG5cclxuICAvLyBEUElfQXJlVmFyaWFibGVzVmlzaWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFyZVZhcmlhYmxlc1Zpc2libGUgPSAnYXJlVmFyaWFibGVzVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9BdHRyTGVnYWN5Q29ubmVjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEF0dHJMZWdhY3lDb25uZWN0aW9uID0gJ3dpZGdldEF0dHJMZWdhY3knLFxyXG5cclxuICAvLyBEUElfQXR0clJlYWRVbmNvbW1pdHRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEF0dHJSZWFkVW5jb21taXR0ZWQgPSAnd2lkZ2V0QXR0clJlYWRVbmNvbW1pdHRlZERhdGEnLFxyXG5cclxuICAvLyBEUElfQXR0clJlcXVpcmVTU0wsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBdHRyUmVxdWlyZVNTTCA9ICd3aWRnZXRBdHRyUmVxdWlyZVNzbCcsXHJcblxyXG4gIC8vIERQSV9BdHRyUmVxdWlyZUVuY3J5cHRpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBBdHRyUmVxdWlyZUVuY3J5cHRpb24gPSAnd2lkZ2V0QXR0clJlcXVpcmVFbmNyeXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0Jvb2wsIGhhdmluZyB0eXBlIGJvb2xcclxuICBCb29sID0gJ2Jvb2wnLFxyXG5cclxuICAvLyBEUElfQ2FuUGFydGl0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuUGFydGl0aW9uID0gJ2NhblBhcnRpdGlvbicsXHJcblxyXG4gIC8vIERQSV9DYW5SZWNvbW1lbmREYXRhU291cmNlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhblJlY29tbWVuZERhdGFTb3VyY2VzID0gJ2NhblJlY29tbWVuZERhdGFzb3VyY2VzJyxcclxuXHJcbiAgLy8gRFBJX0NhblJlY29tbWVuZFRhYmxlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhblJlY29tbWVuZFRhYmxlcyA9ICdjYW5SZWNvbW1lbmRUYWJsZXMnLFxyXG5cclxuICAvLyBEUElfQ2hlY2tQZXJtaXNzaW9ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENoZWNrUGVybWlzc2lvbnMgPSAnY2hlY2tQZXJtaXNzaW9ucycsXHJcblxyXG4gIC8vIERQSV9EYXRhYmFzZU5hbWVPcHRpb25hbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERhdGFiYXNlTmFtZU9wdGlvbmFsID0gJ2RhdGFiYXNlTmFtZU9wdGlvbmFsJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFiYXNlV0hPcHRpb25hbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERhdGFiYXNlV0hPcHRpb25hbCA9ICdkYXRhYmFzZVdhcmVob3VzZU9wdGlvbmFsJyxcclxuXHJcbiAgLy8gRFBJX0RvVmFsaWRhdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERvVmFsaWRhdGlvbiA9ICdkb1ZhbGlkYXRpb24nLFxyXG5cclxuICAvLyBEUElfRG9uZUxvYWRpbmdBbGxTaGVldHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEb25lTG9hZGluZ0FsbFNoZWV0cyA9ICdnb29nbGVTaGVldERvbmVMb2FkaW5nJyxcclxuXHJcbiAgLy8gRFBJX0dBQmFzaWNJdGVtc0VuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBHQUJhc2ljSXRlbXNFbmFibGVkID0gJ2dhQmFzaWNJdGVtc0VuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfR0FEaW1lbnNpb25NZWFzdXJlc0VuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBHQURpbWVuc2lvbk1lYXN1cmVzRW5hYmxlZCA9ICdnYURpbWVuc2lvbnNNZWFzdXJlc0VuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfR0FGaWx0ZXJzRW5hYmxlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEdBRmlsdGVyc0VuYWJsZWQgPSAnZ2FGaWx0ZXJzRW5hYmxlZCcsXHJcblxyXG4gIC8vIERQSV9IYXNEYXRhYmFzZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0RhdGFiYXNlID0gJ2hhc0RhdGFiYXNlJyxcclxuXHJcbiAgLy8gRFBJX0hhc0RhdGFMb3NzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzRGF0YUxvc3MgPSAnaGFzRGF0YUxvc3MnLFxyXG5cclxuICAvLyBEUElfSGFzRmFzdE1ldGFkYXRhLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzRmFzdE1ldGFkYXRhID0gJ2hhc0Zhc3RNZXRhZGF0YScsXHJcblxyXG4gIC8vIERQSV9IYXNOZXdseURpc2NvdmVyZWRTY2hlbWEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNOZXdseURpc2NvdmVyZWRTY2hlbWEgPSAnaGFzTmV3bHlEaXNjb3ZlcmVkU2NoZW1hJyxcclxuXHJcbiAgLy8gRFBJX0hhc1Blcm1pc3Npb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzUGVybWlzc2lvbnMgPSAnaGFzUGVybWlzc2lvbnMnLFxyXG5cclxuICAvLyBEUElfSGFzU2NoZW1hLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzU2NoZW1hID0gJ2hhc1NjaGVtYScsXHJcblxyXG4gIC8vIERQSV9IYXNTY2hlbWFDb3VudCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1NjaGVtYUNvdW50ID0gJ2hhc1NjaGVtYUNvdW50JyxcclxuXHJcbiAgLy8gRFBJX0hhc1RhYmxlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1RhYmxlcyA9ICdoYXNUYWJsZXMnLFxyXG5cclxuICAvLyBEUElfSGFzVW5jb21taXR0ZWRDaGFuZ2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzVW5jb21taXR0ZWRDaGFuZ2VzID0gJ2hhc1VuY29tbWl0dGVkQ2hhbmdlcycsXHJcblxyXG4gIC8vIERQSV9IYXNXYXJlaG91c2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNXYXJlaG91c2UgPSAnaGFzV2FyZWhvdXNlJyxcclxuXHJcbiAgLy8gRFBJX0hhc1dhcm5pbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNXYXJuaW5nID0gJ2hhc1dhcm5pbmcnLFxyXG5cclxuICAvLyBEUElfSXNDYWxjdWxhdGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNDYWxjdWxhdGVkID0gJ2lzQ2FsY3VsYXRlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0Nvbm5lY3RlZFRvRGF0YVNvdXJjZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ29ubmVjdGVkVG9EYXRhU291cmNlID0gJ2lzQ29ubmVjdGVkRGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9Jc0Rpc2FibGVkRGF0YUNvbm5lY3Rpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0Rpc2FibGVkRGF0YUNvbm5lY3Rpb24gPSAnaXNEaXNhYmxlZERhdGFDb25uZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0lzRWRpdGFibGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0VkaXRhYmxlID0gJ2lzRWRpdGFibGUnLFxyXG5cclxuICAvLyBEUElfSXNFbmFibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFbmFibGVkID0gJ2lzRW5hYmxlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0ZpbmlzaGVkQ29ubmVjdGluZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRmluaXNoZWRDb25uZWN0aW5nID0gJ2lzRmluaXNoZWRDb25uZWN0aW5nJyxcclxuXHJcbiAgLy8gRFBJX0lzSGlkZGVuLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNIaWRkZW4gPSAnaXNIaWRkZW4nLFxyXG5cclxuICAvLyBEUElfSXNNdWx0aVRhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNdWx0aVRhYmxlID0gJ2lzTXVsdGlUYWJsZScsXHJcblxyXG4gIC8vIERQSV9Jc05ld0N1c3RvbVNRTCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTmV3Q3VzdG9tU1FMID0gJ2lzTmV3Q3VzdG9tU3FsJyxcclxuXHJcbiAgLy8gRFBJX0lzTmV3RGF0YVNvdXJjZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTmV3RGF0YVNvdXJjZSA9ICdpc05ld0RhdGFTcmMnLFxyXG5cclxuICAvLyBEUElfSXNQdWJsaXNoZWRGZWRlcmF0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1B1Ymxpc2hlZEZlZGVyYXRlZCA9ICdpc1B1Ymxpc2hlZEZlZGVyYXRlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1NhbXBsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NhbXBsZWQgPSAnaXNTYW1wbGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzU2NoZW1hTWVtYmVyTmV3bHlEaXNjb3ZlcmVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTY2hlbWFNZW1iZXJOZXdseURpc2NvdmVyZWQgPSAnaXNTY2hlbWFNZW1iZXJOZXdseURpc2NvdmVyZWQnLFxyXG5cclxuICAvLyBEUElfSXNTbG93RmFzdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU2xvd0Zhc3QgPSAnaXNTbG93ZmFzdCcsXHJcblxyXG4gIC8vIERQSV9Jc1N1cHBvcnRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU3VwcG9ydGVkID0gJ2lzU3VwcG9ydGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzVGFibGVTZWxlY3Rpb25WaXNpYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUYWJsZVNlbGVjdGlvblZpc2libGUgPSAnaXNUYWJsZVNlbGVjdGlvblZpc2libGUnLFxyXG5cclxuICAvLyBEUElfSXNUYWJsZWF1U2VydmVyRGF0YXNvdXJjZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVGFibGVhdVNlcnZlckRhdGFzb3VyY2UgPSAnaXNUYWJsZWF1U2VydmVyRGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9Jc1RhYmxlYXVTZXJ2ZXJEYXRhc291cmNlQ29ubmVjdGFibGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1RhYmxlYXVTZXJ2ZXJEYXRhc291cmNlQ29ubmVjdGFibGUgPSAnaXNUYWJsZWF1U2VydmVyRGF0YXNvdXJjZUNvbm5lY3RhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0lzVGFibGVhdVNlcnZlckRhdGFzb3VyY2VEb3dubG9hZGFibGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1RhYmxlYXVTZXJ2ZXJEYXRhc291cmNlRG93bmxvYWRhYmxlID0gJ2lzVGFibGVhdVNlcnZlckRhdGFzb3VyY2VEb3dubG9hZGFibGUnLFxyXG5cclxuICAvLyBEUElfSXNWaXNpYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNWaXNpYmxlID0gJ2lzVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9OZWVkRmxhdHRlbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE5lZWRGbGF0dGVuID0gJ25lZWRGbGF0dGVuJyxcclxuXHJcbiAgLy8gRFBJX1NTTFJlcXVpcmVzQ2VydGlmaWNhdGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTU0xSZXF1aXJlc0NlcnRpZmljYXRlID0gJ3NzbFJlcXVpcmVzQ2VydGlmaWNhdGUnLFxyXG5cclxuICAvLyBEUElfU2NoZW1hT3B0aW9uYWwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTY2hlbWFPcHRpb25hbCA9ICdzY2hlbWFPcHRpb25hbCcsXHJcblxyXG4gIC8vIERQSV9TZXJ2aWNlTmFtZU9wdGlvbmFsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2VydmljZU5hbWVPcHRpb25hbCA9ICdzZXJ2aWNlTmFtZU9wdGlvbmFsJyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZFdhcm5Gb3JDcm9zc1NjaGVtYUpvaW5zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvdWxkV2FybkZvckNyb3NzU2NoZW1hSm9pbnMgPSAnc2hvdWxkV2FybkNyb3NzU2NoZW1hSm9pbnMnLFxyXG5cclxuICAvLyBEUElfU2hvd0Jyb3dzZUJ1dHRvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dCcm93c2VCdXR0b24gPSAnc2hvd0Jyb3dzZUJ1dHRvbicsXHJcblxyXG4gIC8vIERQSV9TaG93Q29ubmVjdGlvblByb21wdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dDb25uZWN0aW9uUHJvbXB0ID0gJ3Nob3dDb25uZWN0aW9uUHJvbXB0JyxcclxuXHJcbiAgLy8gRFBJX1Nob3dEQkJyb3dzZUJ1dHRvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dEQkJyb3dzZUJ1dHRvbiA9ICdzaG93RGJCcm93c2VCdXR0b24nLFxyXG5cclxuICAvLyBEUElfU2hvd0RCTmFtZVByb21wdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dEQk5hbWVQcm9tcHQgPSAnc2hvd0RiUHJvbXB0JyxcclxuXHJcbiAgLy8gRFBJX1Nob3dEQldITmFtZVByb21wdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dEQldITmFtZVByb21wdCA9ICdzaG93RGJ3aFByb21wdCcsXHJcblxyXG4gIC8vIERQSV9TaG93SW1wb3J0U1NMQ2VydExhYmVsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0ltcG9ydFNTTENlcnRMYWJlbCA9ICdzaG93SW1wb3J0U3NsY2VydExhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dQb3J0UHJvbXB0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1BvcnRQcm9tcHQgPSAnc2hvd1BvcnRQcm9tcHQnLFxyXG5cclxuICAvLyBEUElfU2hvd1NTTENoZWNrYm94LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1NTTENoZWNrYm94ID0gJ3Nob3dTc2xDaGVja2JveCcsXHJcblxyXG4gIC8vIERQSV9TaG93RW5jcnlwdGlvbkNoZWNrYm94LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0VuY3J5cHRpb25DaGVja2JveCA9ICdzaG93RW5jcnlwdGlvbkNoZWNrYm94JyxcclxuXHJcbiAgLy8gRFBJX1Nob3dTZXJ2ZXJOYW1lUHJvbXB0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1NlcnZlck5hbWVQcm9tcHQgPSAnc2hvd1NlcnZlclByb21wdCcsXHJcblxyXG4gIC8vIERQSV9TaG93U2VydmljZU5hbWVQcm9tcHQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93U2VydmljZU5hbWVQcm9tcHQgPSAnc2hvd1NlcnZpY2VQcm9tcHQnLFxyXG5cclxuICAvLyBEUElfU2hvd1VuY29tbWl0dGVkRGF0YUNoZWNrYm94LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1VuY29tbWl0dGVkRGF0YUNoZWNrYm94ID0gJ3Nob3dVbmNvbW1pdHRlZERhdGFDaGVja2JveCcsXHJcblxyXG4gIC8vIERQSV9TdXBwb3J0c0dlbmVyaWNBdXRoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3VwcG9ydHNHZW5lcmljQXV0aCA9ICdzdXBwb3J0c0dlbmVyaWNBdXRoJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlYXVTZXJ2ZXJGZXRjaEFzY2VuZGluZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFRhYmxlYXVTZXJ2ZXJGZXRjaEFzY2VuZGluZyA9ICd0YWJsZWF1U2VydmVyRmV0Y2hBc2NlbmRpbmcnLFxyXG5cclxuICAvLyBEUElfVXNlc1JhZGlvQnV0dG9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlc1JhZGlvQnV0dG9uID0gJ3VzZXNSYWRpb0J1dHRvbicsXHJcblxyXG4gIC8vIERQSV9CaWdRdWVyeUxlZ2FjeVNRTENoZWNrU3RhdHVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQmlnUXVlcnlMZWdhY3lTUUxDaGVja1N0YXR1cyA9ICdkYXRhc291cmNlQmlncXVlcnlMZWdhY3lTcWxDaGVja1N0YXR1cycsXHJcblxyXG4gIC8vIERQSV9IYXNCaWdRdWVyeUxlZ2FjeVNRTENoZWNrLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzQmlnUXVlcnlMZWdhY3lTUUxDaGVjayA9ICdkYXRhc291cmNlQmlncXVlcnlMZWdhY3lTcWxDaGVjaycsXHJcblxyXG4gIC8vIERQSV9BdXRvRmV0Y2hMaW1pdCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgQXV0b0ZldGNoTGltaXQgPSAnYXV0b0ZldGNoTGltaXQnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblR5cGUsIGhhdmluZyB0eXBlIGludFxyXG4gIENvbm5lY3Rpb25UeXBlID0gJ2Nvbm5lY3Rpb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ljb25JZCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSWNvbklkID0gJ2ljb25JZCcsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZENhdGFsb2dJbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU2VsZWN0ZWRDYXRhbG9nSW5kZXggPSAnc2VsZWN0ZWRDYXRhbG9nSW5kZXgnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0ZWRDdWJlSW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNlbGVjdGVkQ3ViZUluZGV4ID0gJ3NlbGVjdGVkQ3ViZUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkR0FBY2NvdW50SW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNlbGVjdGVkR0FBY2NvdW50SW5kZXggPSAnc2VsZWN0ZWRHYUFjY291bnRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZEdBTWVhc3VyZVNldEluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBTZWxlY3RlZEdBTWVhc3VyZVNldEluZGV4ID0gJ3NlbGVjdGVkR2FNZWFzdXJlU2V0SW5kZXgnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0ZWRHQVByb3BlcnR5SW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNlbGVjdGVkR0FQcm9wZXJ0eUluZGV4ID0gJ3NlbGVjdGVkR2FQcm9wZXJ0eUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkR0FTZWdtZW50SW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNlbGVjdGVkR0FTZWdtZW50SW5kZXggPSAnc2VsZWN0ZWRHYVNlZ21lbnRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZEdBVmlld0luZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBTZWxlY3RlZEdBVmlld0luZGV4ID0gJ3NlbGVjdGVkR2FWaWV3SW5kZXgnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0ZWRHb29nbGVTaGVldEluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBTZWxlY3RlZEdvb2dsZVNoZWV0SW5kZXggPSAnc2VsZWN0ZWRHb29nbGVTaGVldEluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkT3B0aW9uSW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNlbGVjdGVkT3B0aW9uSW5kZXggPSAnc2VsZWN0ZWRPcHRpb25JbmRleCcsXHJcblxyXG4gIC8vIERQSV9TbG93TWV0YWRhdGFDb3VudCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU2xvd01ldGFkYXRhQ291bnQgPSAnc2xvd01ldGFkYXRhQ291bnQnLFxyXG5cclxuICAvLyBEUElfVGFibGVhdVNlcnZlckZldGNoU29ydEJ5LCBoYXZpbmcgdHlwZSBpbnRcclxuICBUYWJsZWF1U2VydmVyRmV0Y2hTb3J0QnkgPSAndGFibGVhdVNlcnZlckZldGNoU29ydCcsXHJcblxyXG4gIC8vIERQSV9BY3R1YWxQYXJhbWV0ZXJPcmRpbmFsLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQWN0dWFsUGFyYW1ldGVyT3JkaW5hbCA9ICdhY3R1YWxQYXJhbWV0ZXJPcmRpbmFsJyxcclxuXHJcbiAgLy8gRFBJX0FjdHVhbFBhcmFtZXRlclR5cGUsIGhhdmluZyB0eXBlIHVpbnRcclxuICBBY3R1YWxQYXJhbWV0ZXJUeXBlID0gJ2FjdHVhbFBhcmFtZXRlclR5cGUnLFxyXG5cclxuICAvLyBEUElfQ2hhclNldElELCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQ2hhclNldElEID0gJ2NoYXJzZXRJZCcsXHJcblxyXG4gIC8vIERQSV9EYXRhU291cmNlT3JkaW5hbCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIERhdGFTb3VyY2VPcmRpbmFsID0gJ2RhdGFzb3VyY2VPcmRpbmFsJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckNvdW50LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRmlsdGVyQ291bnQgPSAnZmlsdGVyQ291bnQnLFxyXG5cclxuICAvLyBEUElfVmFyaWFibGVzQ291bnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBWYXJpYWJsZXNDb3VudCA9ICd2YXJpYWJsZXNDb3VudCcsXHJcblxyXG4gIC8vIERQSV9BY3R1YWxQYXJhbWV0ZXJEaXNwbGF5TmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWN0dWFsUGFyYW1ldGVyRGlzcGxheU5hbWUgPSAnYWN0dWFsUGFyYW1ldGVyRGlzcGxheU5hbWUnLFxyXG5cclxuICAvLyBEUElfQWN0dWFsUGFyYW1ldGVyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWN0dWFsUGFyYW1ldGVyTmFtZSA9ICdhY3R1YWxQYXJhbWV0ZXJOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0FjdHVhbFBhcmFtZXRlclZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBY3R1YWxQYXJhbWV0ZXJWYWx1ZSA9ICdhY3R1YWxQYXJhbWV0ZXJWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9BdHRyQVBJVmVyc2lvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ckFQSVZlcnNpb24gPSAnYXR0ckFwaVZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfQXR0ckF1dGhUeXBlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyQXV0aFR5cGUgPSAnd2lkZ2V0QXR0ckF1dGh0eXBlJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJDb25uZWN0aW9uRGF0YSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ckNvbm5lY3Rpb25EYXRhID0gJ2F0dHJDb25uZWN0aW9uRGF0YScsXHJcblxyXG4gIC8vIERQSV9BdHRyQ29ubmVjdGlvbk5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJDb25uZWN0aW9uTmFtZSA9ICdhdHRyQ29ubmVjdGlvbk5hbWUnLFxyXG5cclxuICAvLyBEUElfQXR0ckNvbm5lY3Rpb25UeXBlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyQ29ubmVjdGlvblR5cGUgPSAnd2lkZ2V0QXR0ckNvbm5lY3Rpb250eXBlJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJDb25uZWN0aW9uVVJMLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyQ29ubmVjdGlvblVSTCA9ICdhdHRyQ29ubmVjdGlvblVybCcsXHJcblxyXG4gIC8vIERQSV9BdHRyQ3ViZVNwZWNpZmljYXRpb25JZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ckN1YmVTcGVjaWZpY2F0aW9uSWQgPSAnd2lkZ2V0QXR0ckN1YmVTcGVjaWZpY2F0aW9uSWQnLFxyXG5cclxuICAvLyBEUElfQXR0ckN1YmVTcGVjaWZpY2F0aW9uVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJDdWJlU3BlY2lmaWNhdGlvblZhbHVlID0gJ3dpZGdldEF0dHJDdWJlU3BlY2lmaWNhdGlvblZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJEU04sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJEU04gPSAnd2lkZ2V0QXR0ckRzbicsXHJcblxyXG4gIC8vIERQSV9BdHRyRGF0YWJhc2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJEYXRhYmFzZSA9ICd3aWRnZXRBdHRyRGInLFxyXG5cclxuICAvLyBEUElfQXR0ckRhdGFiYXNlV2FyZWhvdXNlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyRGF0YWJhc2VXYXJlaG91c2UgPSAnd2lkZ2V0QXR0ckRid2gnLFxyXG5cclxuICAvLyBEUElfQXR0ckRyaXZlciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ckRyaXZlciA9ICd3aWRnZXRBdHRyRHJpdmVyJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJGaWxlbmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ckZpbGVuYW1lID0gJ3dpZGdldEF0dHJGaWxlbmFtZScsXHJcblxyXG4gIC8vIERQSV9BdHRySFRUUFBhdGgsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJIVFRQUGF0aCA9ICd3aWRnZXRBdHRySHR0cFBhdGgnLFxyXG5cclxuICAvLyBEUElfQXR0ckluY3JlbWVudGFsUmVmcmVzaEtleSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ckluY3JlbWVudGFsUmVmcmVzaEtleSA9ICdhdHRySW5jcmVtZW50YWxSZWZyZXNoS2V5JyxcclxuXHJcbiAgLy8gRFBJX0F0dHJLZXJiZXJvc0hvc3QsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJLZXJiZXJvc0hvc3QgPSAnd2lkZ2V0QXR0cktlcmJlcm9zSG9zdCcsXHJcblxyXG4gIC8vIERQSV9BdHRyS2VyYmVyb3NSZWFsbSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0cktlcmJlcm9zUmVhbG0gPSAnd2lkZ2V0QXR0cktlcmJlcm9zUmVhbG0nLFxyXG5cclxuICAvLyBEUElfQXR0cktlcmJlcm9zU2VydmljZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0cktlcmJlcm9zU2VydmljZSA9ICd3aWRnZXRBdHRyS2VyYmVyb3NTZXJ2aWNlJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJMYXN0UmVjb3JkVG9rZW4sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJMYXN0UmVjb3JkVG9rZW4gPSAnYXR0ckxhc3RSZWNvcmRUb2tlbicsXHJcblxyXG4gIC8vIERQSV9BdHRyTURXUGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ck1EV1BhdGggPSAnd2lkZ2V0QXR0ck1kd1BhdGgnLFxyXG5cclxuICAvLyBEUElfQXR0ck1EV1VzZXJuYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyTURXVXNlcm5hbWUgPSAnd2lkZ2V0QXR0ck1kd1VzZXJuYW1lJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJPREJDUHJvbXB0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyT0RCQ1Byb21wdCA9ICd3aWRnZXRBdHRyT2RiY1Byb21wdCcsXHJcblxyXG4gIC8vIERQSV9BdHRyT0RCQ1N0cmluZ0V4dHJhcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0ck9EQkNTdHJpbmdFeHRyYXMgPSAnd2lkZ2V0QXR0ck9kYmNTdHJpbmdFeHRyYXMnLFxyXG5cclxuICAvLyBEUElfQXR0clBvcnQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJQb3J0ID0gJ3dpZGdldEF0dHJQb3J0JyxcclxuXHJcbiAgLy8gRFBJX0F0dHJTQVBDbGllbnQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJTQVBDbGllbnQgPSAnd2lkZ2V0QXR0clNhcENsaWVudCcsXHJcblxyXG4gIC8vIERQSV9BdHRyU0FQTGFuZ3VhZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJTQVBMYW5ndWFnZSA9ICd3aWRnZXRBdHRyU2FwTGFuZ3VhZ2UnLFxyXG5cclxuICAvLyBEUElfQXR0ckVkaXRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJFZGl0aW9uID0gJ3dpZGdldEF0dHJTc2xFZGl0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJTQU1MSWRQLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyU0FNTElkUCA9ICd3aWRnZXRBdHRyU2FtbElkcCcsXHJcblxyXG4gIC8vIERQSV9BdHRyU1NPRG9tYWluLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyU1NPRG9tYWluID0gJ3dpZGdldEF0dHJTc29Eb21haW4nLFxyXG5cclxuICAvLyBEUElfQXR0clNTTENlcnQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJTU0xDZXJ0ID0gJ3dpZGdldEF0dHJTc2xDZXJ0JyxcclxuXHJcbiAgLy8gRFBJX0F0dHJTY3JpcHRWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyU2NyaXB0VmVyc2lvbiA9ICdhdHRyU2NyaXB0VmVyc2lvbicsXHJcblxyXG4gIC8vIERQSV9BdHRyU2VydmVyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyU2VydmVyID0gJ3dpZGdldEF0dHJTZXJ2ZXInLFxyXG5cclxuICAvLyBEUElfQXR0clNlcnZpY2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJTZXJ2aWNlID0gJ3dpZGdldEF0dHJTZXJ2aWNlJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJVc2VybmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXR0clVzZXJuYW1lID0gJ3dpZGdldEF0dHJVc2VyJyxcclxuXHJcbiAgLy8gRFBJX0F1dGhlbnRpY2F0aW9uUHJvbXB0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdXRoZW50aWNhdGlvblByb21wdCA9ICdhdXRoZW50aWNhdGlvblByb21wdCcsXHJcblxyXG4gIC8vIERQSV9CdXR0b25DbGlja0FjdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQnV0dG9uQ2xpY2tBY3Rpb24gPSAnYnV0dG9uQ2xpY2tBY3Rpb24nLFxyXG5cclxuICAvLyBEUElfQnV0dG9uQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQnV0dG9uQ2FwdGlvbiA9ICdidXR0b25DYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0J1dHRvbkltYWdlUGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQnV0dG9uSW1hZ2VQYXRoID0gJ2J1dHRvbkltYWdlUGF0aCcsXHJcblxyXG4gIC8vIERQSV9CdXR0b25JbWFnZVBhdGhLZXksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEJ1dHRvbkltYWdlUGF0aEtleSA9ICdidXR0b25JbWFnZVBhdGhLZXknLFxyXG5cclxuICAvLyBEUElfQnV0dG9uTmF2aWdhdGlvblRhcmdldCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQnV0dG9uTmF2aWdhdGlvblRhcmdldCA9ICdidXR0b25OYXZpZ2F0aW9uVGFyZ2V0JyxcclxuXHJcbiAgLy8gRFBJX0NhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENhcHRpb24gPSAnY2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9DYXRhbG9nTGlzdFByb21wdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2F0YWxvZ0xpc3RQcm9tcHQgPSAnY2F0YWxvZ0xpc3RQcm9tcHQnLFxyXG5cclxuICAvLyBEUElfQ2F0YWxvZ05hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENhdGFsb2dOYW1lID0gJ2NhdGFsb2dOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0NhdGFsb2dTZWFyY2hUZXJtLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDYXRhbG9nU2VhcmNoVGVybSA9ICdjYXRhbG9nU2VhcmNoVGVybScsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yeSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2F0ZWdvcnkgPSAnaXRlbUNhdGVnb3J5JyxcclxuXHJcbiAgLy8gRFBJX0NsYXNzTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2xhc3NOYW1lID0gJ2NsYXNzTmFtZUZvckNsZWFuaW5nJyxcclxuXHJcbiAgLy8gRFBJX0Nsb3VkRmlsZUNsYXNzTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2xvdWRGaWxlQ2xhc3NOYW1lID0gJ2Nsb3VkRmlsZUNsYXNzTmFtZScsXHJcblxyXG4gIC8vIERQSV9DbG91ZEZpbGVTdG9yYWdlUHJvdmlkZXIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENsb3VkRmlsZVN0b3JhZ2VQcm92aWRlciA9ICdjbG91ZEZpbGVTdG9yYWdlUHJvdmlkZXInLFxyXG5cclxuICAvLyBEUElfQ29uZmlnTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29uZmlnTmFtZSA9ICdjb25uZWN0aW9uQ29uZmlnTmFtZScsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29ubmVjdGlvbkNhcHRpb24gPSAnY29ubmVjdGlvbkNhcHRpb24nLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkRlc2NyaXB0aW9uTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbm5lY3Rpb25EZXNjcmlwdGlvbkxhYmVsID0gJ2Nvbm5lY3Rpb25EZXNjcmlwdGlvbkxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25DbGFzcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29ubmVjdGlvbkNsYXNzID0gJ2Nvbm5lY3Rpb25DbGFzc05hbWUnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbk5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbm5lY3Rpb25OYW1lID0gJ2Nvbm5lY3Rpb25OYW1lJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25PcHRpb25OYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb25uZWN0aW9uT3B0aW9uTmFtZSA9ICdjb25uZWN0aW9uT3B0aW9uTmFtZScsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uU3BlY2lmaWNhdGlvblRpdGxlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb25uZWN0aW9uU3BlY2lmaWNhdGlvblRpdGxlID0gJ2Nvbm5lY3Rpb25TcGVjaWZpY2F0aW9uVGl0bGUnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblR5cGVMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29ubmVjdGlvblR5cGVMYWJlbCA9ICdjb25uZWN0aW9uVHlwZUxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25VUkksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbm5lY3Rpb25VUkkgPSAnY29ubmVjdGlvblVyaScsXHJcblxyXG4gIC8vIERQSV9DdWJlRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEN1YmVEZXNjcmlwdGlvbiA9ICdjdWJlRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfQ3ViZUxhc3RVcGRhdGVkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDdWJlTGFzdFVwZGF0ZWQgPSAnY3ViZUxhc3RVcGRhdGVkJyxcclxuXHJcbiAgLy8gRFBJX0N1YmVMaXN0UHJvbXB0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDdWJlTGlzdFByb21wdCA9ICdjdWJlTGlzdFByb21wdCcsXHJcblxyXG4gIC8vIERQSV9DdWJlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ3ViZU5hbWUgPSAnY3ViZU5hbWUnLFxyXG5cclxuICAvLyBEUElfQ3ViZVNlYXJjaFRlcm0sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEN1YmVTZWFyY2hUZXJtID0gJ2N1YmVTZWFyY2hUZXJtJyxcclxuXHJcbiAgLy8gRFBJX0N1cnJlbnRUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDdXJyZW50VGV4dCA9ICdjdXJyZW50VGV4dCcsXHJcblxyXG4gIC8vIERQSV9DdXN0b21TcGxpdFN0cmluZ1NlcGFyYXRvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ3VzdG9tU3BsaXRTdHJpbmdTZXBhcmF0b3IgPSAnY3VzdG9tU3BsaXRTdHJpbmdTZXBhcmF0b3InLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZUlkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc291cmNlSWQgPSAnZGF0YXNvdXJjZUlkJyxcclxuXHJcbiAgLy8gRFBJX0RCTmFtZVByb21wdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgREJOYW1lUHJvbXB0ID0gJ2RiTmFtZVByb21wdCcsXHJcblxyXG4gIC8vIERQSV9EQldITmFtZVByb21wdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgREJXSE5hbWVQcm9tcHQgPSAnZGJXYXJlaG91c2VOYW1lUHJvbXB0JyxcclxuXHJcbiAgLy8gRFBJX0RTQ2xhc3MsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERTQ2xhc3MgPSAnZHNDbGFzcycsXHJcblxyXG4gIC8vIERQSV9EYXRhYmFzZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFiYXNlTmFtZSA9ICdkYXRhc291cmNlRGF0YWJhc2VOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFiYXNlTm90ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YWJhc2VOb3RlID0gJ2RhdGFiYXNlTm90ZScsXHJcblxyXG4gIC8vIERQSV9EcmFnTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERyYWdMYWJlbCA9ICdkcmFnTGFiZWwnLFxyXG5cclxuICAvLyBEUElfRWZmZWN0aXZlRGF0ZVJhbmdlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFZmZlY3RpdmVEYXRlUmFuZ2UgPSAnZWZmZWN0aXZlRGF0ZVJhbmdlJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0Q3JlYXRlZFRpbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdvb2dsZVNoZWV0Q3JlYXRlZFRpbWUgPSAnZ29vZ2xlU2hlZXRDcmVhdGVkVGltZScsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVTaGVldElkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHb29nbGVTaGVldElkID0gJ2dvb2dsZVNoZWV0SWQnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlU2hlZXRMYXN0TW9kaWZpZWRUaW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHb29nbGVTaGVldExhc3RNb2RpZmllZFRpbWUgPSAnZ29vZ2xlU2hlZXRMYXN0TW9kaWZpZWRUaW1lJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0TGFzdE1vZGlmeWluZ1VzZXIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdvb2dsZVNoZWV0TGFzdE1vZGlmeWluZ1VzZXIgPSAnZ29vZ2xlU2hlZXRMYXN0TW9kaWZ5aW5nVXNlcicsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVTaGVldExhc3RWaWV3ZWRCeVVzZXJUaW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHb29nbGVTaGVldExhc3RWaWV3ZWRCeVVzZXJUaW1lID0gJ2dvb2dsZVNoZWV0TGFzdFZpZXdlZEJ5VXNlclRpbWUnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlU2hlZXRNaW1lVHlwZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgR29vZ2xlU2hlZXRNaW1lVHlwZSA9ICdnb29nbGVTaGVldE1pbWVUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0TmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgR29vZ2xlU2hlZXROYW1lID0gJ2dvb2dsZVNoZWV0TmFtZScsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVTaGVldE93bmVyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHb29nbGVTaGVldE93bmVyID0gJ2dvb2dsZVNoZWV0T3duZXInLFxyXG5cclxuICAvLyBEUElfR29vZ2xlU2hlZXRUaHVtYm5haWxMaW5rLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHb29nbGVTaGVldFRodW1ibmFpbExpbmsgPSAnZ29vZ2xlU2hlZXRUaHVtYm5haWxMaW5rJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0VGh1bWJuYWlsSWQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdvb2dsZVNoZWV0VGh1bWJuYWlsSWQgPSAnZ29vZ2xlU2hlZXRUaHVtYm5haWxJZCcsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVTaGVldFRodW1ibmFpbExvY2FsUGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgR29vZ2xlU2hlZXRUaHVtYm5haWxMb2NhbFBhdGggPSAnZ29vZ2xlU2hlZXRUaHVtYm5haWxMb2NhbFBhdGgnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlU2hlZXRXZWJWaWV3TGluaywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgR29vZ2xlU2hlZXRXZWJWaWV3TGluayA9ICdnb29nbGVTaGVldFdlYlZpZXdMaW5rJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0c0xpc3RFcnJvck1lc3NhZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdvb2dsZVNoZWV0c0xpc3RFcnJvck1lc3NhZ2UgPSAnZ29vZ2xlU2hlZXRzTGlzdEVycm9yTWVzc2FnZScsXHJcblxyXG4gIC8vIERQSV9Jbml0aWFsU1FMLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBJbml0aWFsU1FMID0gJ2luaXRpYWxTcWwnLFxyXG5cclxuICAvLyBEUElfSVNPRGF0ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSVNPRGF0ZSA9ICdpc29EYXRlJyxcclxuXHJcbiAgLy8gRFBJX0lTT0VuZERhdGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIElTT0VuZERhdGUgPSAnaXNvRW5kRGF0ZScsXHJcblxyXG4gIC8vIERQSV9JU09TdGFydERhdGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIElTT1N0YXJ0RGF0ZSA9ICdpc29TdGFydERhdGUnLFxyXG5cclxuICAvLyBEUElfSXNvbGF0aW9uTGV2ZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIElzb2xhdGlvbkxldmVsID0gJ2RhdGFzb3VyY2VJc29sYXRpb25MZXZlbCcsXHJcblxyXG4gIC8vIERQSV9JdGVtRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEl0ZW1EZXNjcmlwdGlvbiA9ICdpdGVtRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfSXRlbUlkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBJdGVtSWQgPSAnaXRlbUlkJyxcclxuXHJcbiAgLy8gRFBJX0tlcmJlcm9zSG9zdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgS2VyYmVyb3NIb3N0ID0gJ2RhdGFzb3VyY2VLZXJiZXJvc0hvc3QnLFxyXG5cclxuICAvLyBEUElfS2VyYmVyb3NSZWFsbSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgS2VyYmVyb3NSZWFsbSA9ICdkYXRhc291cmNlS2VyYmVyb3NSZWFsbScsXHJcblxyXG4gIC8vIERQSV9LZXJiZXJvc1NlcnZpY2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEtlcmJlcm9zU2VydmljZSA9ICdkYXRhc291cmNlS2VyYmVyb3NTZXJ2aWNlJyxcclxuXHJcbiAgLy8gRFBJX05hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE5hbWUgPSAnbmFtZScsXHJcblxyXG4gIC8vIERQSV9PcHRpb25JZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgT3B0aW9uSWQgPSAnb3B0aW9uSWQnLFxyXG5cclxuICAvLyBEUElfUGFydGl0aW9uaW5nQnV0dG9uTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhcnRpdGlvbmluZ0J1dHRvbkxhYmVsID0gJ3BhcnRpdGlvbmluZ0J1dHRvbkxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1BhcnRpdGlvbmluZ0J1dHRvblRvb2x0aXAsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhcnRpdGlvbmluZ0J1dHRvblRvb2x0aXAgPSAncGFydGl0aW9uaW5nQnV0dG9uVG9vbHRpcCcsXHJcblxyXG4gIC8vIERQSV9QYXJ0aXRpb25pbmdUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQYXJ0aXRpb25pbmdUZXh0ID0gJ3F1ZXJ5UGFydGl0aW9uaW5nVGV4dCcsXHJcblxyXG4gIC8vIERQSV9QZGZTdGFydFBhZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBkZlN0YXJ0UGFnZSA9ICdwZGZTdGFydFBhZ2UnLFxyXG5cclxuICAvLyBEUElfUGRmRW5kUGFnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGRmRW5kUGFnZSA9ICdwZGZFbmRQYWdlJyxcclxuXHJcbiAgLy8gRFBJX1BvcnRQcm9tcHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBvcnRQcm9tcHQgPSAncG9ydFByb21wdCcsXHJcblxyXG4gIC8vIERQSV9Qcm9tcHRUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQcm9tcHRUZXh0ID0gJ3Byb21wdFRleHQnLFxyXG5cclxuICAvLyBEUElfUXVlcnlCYW5kaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBRdWVyeUJhbmRpbmcgPSAncXVlcnlCYW5kaW5nJyxcclxuXHJcbiAgLy8gRFBJX1F1ZXJ5VGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUXVlcnlUZXh0ID0gJ3F1ZXJ5VGV4dCcsXHJcblxyXG4gIC8vIERQSV9SZWNvbW1lbmRhdGlvblVVSUQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJlY29tbWVuZGF0aW9uVVVJRCA9ICdyZWNvbW1lbmRhdGlvblV1aWQnLFxyXG5cclxuICAvLyBEUElfU1FMUXVlcnksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNRTFF1ZXJ5ID0gJ3NxbFF1ZXJ5JyxcclxuXHJcbiAgLy8gRFBJX1NjaGVtYUNvbWJvRmFsbGJhY2tUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTY2hlbWFDb21ib0ZhbGxiYWNrVGV4dCA9ICdzY2hlbWFDb21ib0ZhbGxiYWNrVGV4dCcsXHJcblxyXG4gIC8vIERQSV9TY2hlbWFMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2NoZW1hTGFiZWwgPSAnc2NoZW1hTGFiZWwnLFxyXG5cclxuICAvLyBEUElfU2NoZW1hTWVtYmVyR2xvYmFsTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2NoZW1hTWVtYmVyR2xvYmFsTmFtZSA9ICdzY2hlbWFNZW1iZXJHbG9iYWxOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1NjaGVtYU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNjaGVtYU5hbWUgPSAnZGF0YXNvdXJjZVNjaGVtYU5hbWUnLFxyXG5cclxuICAvLyBEUElfU2NyaXB0VGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2NyaXB0VGV4dCA9ICdzY3JpcHRUZXh0JyxcclxuXHJcbiAgLy8gRFBJX1NlY29uZGFyeVdoaXRlTGlzdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2Vjb25kYXJ5V2hpdGVMaXN0ID0gJ3NlY29uZGFyeVdoaXRlTGlzdCcsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNlcnZlciA9ICdkYXRhc291cmNlU2VydmVyJyxcclxuXHJcbiAgLy8gRFBJX1NlcnZlck5hbWVQcm9tcHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNlcnZlck5hbWVQcm9tcHQgPSAnc2VydmVyTmFtZVByb21wdCcsXHJcblxyXG4gIC8vIERQSV9TZXJ2aWNlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTZXJ2aWNlID0gJ2RhdGFzb3VyY2VTZXJ2aWNlJyxcclxuXHJcbiAgLy8gRFBJX1NlcnZpY2VOYW1lUHJvbXB0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTZXJ2aWNlTmFtZVByb21wdCA9ICdzZXJ2aWNlUHJvbXB0JyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0Rm9ybWF0dGluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2hlZXRGb3JtYXR0aW5nID0gJ3NoZWV0Rm9ybWF0dGluZycsXHJcblxyXG4gIC8vIERQSV9TbG93TWV0YWRhdGFTZWFyY2hUZXJtLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTbG93TWV0YWRhdGFTZWFyY2hUZXJtID0gJ3Nsb3dNZXRhZGF0YVNlYXJjaFRlcm0nLFxyXG5cclxuICAvLyBEUElfU3RhbmRhcmRDb25uZWN0aW9uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3RhbmRhcmRDb25uZWN0aW9uTmFtZSA9ICdkYXRhc291cmNlU3RhbmRhcmRDb25uZWN0aW9uTmFtZScsXHJcblxyXG4gIC8vIERQSV9TdGFuZGFyZENvbm5lY3Rpb25QbGFjZWhvbGRlclRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN0YW5kYXJkQ29ubmVjdGlvblBsYWNlaG9sZGVyVGV4dCA9ICdzdGFuZGFyZENvbm5lY3Rpb25QbGFjZWhvbGRlclRleHQnLFxyXG5cclxuICAvLyBEUElfU3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVyVGl0bGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN0b3JlZFByb2NlZHVyZVBhcmFtZXRlclRpdGxlID0gJ3N0b3JlZFByb2NlZHVyZVBhcmFtZXRlclRpdGxlJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlQWxpYXMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlQWxpYXMgPSAndGFibGVBbGlhcycsXHJcblxyXG4gIC8vIERQSV9SaWdodFRhYmxlQWxpYXMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJpZ2h0VGFibGVBbGlhcyA9ICdyaWdodFRhYmxlQWxpYXMnLFxyXG5cclxuICAvLyBEUElfVGFibGVDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZUNhcHRpb24gPSAndGFibGVDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlQ29sbGVjdGlvbk5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlQ29sbGVjdGlvbk5hbWUgPSAndGFibGVDb2xsZWN0aW9uTmFtZScsXHJcblxyXG4gIC8vIERQSV9UYWJsZVBsYWNlaG9sZGVyVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVQbGFjZWhvbGRlclRleHQgPSAndGFibGVQbGFjZWhvbGRlclRleHQnLFxyXG5cclxuICAvLyBEUElfVGFibGVSYW5raW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZVJhbmtpbmcgPSAndGFibGVSYW5raW5nJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlU29ydEtleSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVTb3J0S2V5ID0gJ3RhYmxlU29ydGtleScsXHJcblxyXG4gIC8vIERQSV9UYWJsZVRvb2x0aXAsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlVG9vbHRpcCA9ICd0YWJsZVRvb2x0aXAnLFxyXG5cclxuICAvLyBEUElfVGFibGVUb1JlcGxhY2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlVG9SZXBsYWNlID0gJ3RhYmxlVG9SZXBsYWNlJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlV2FybmluZ01lc3NhZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlV2FybmluZ01lc3NhZ2UgPSAndGFibGVXYXJuaW5nTWVzc2FnZScsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyRGF0YXNvdXJjZURlc2NyaXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZWF1U2VydmVyRGF0YXNvdXJjZURlc2NyaXB0aW9uID0gJ3RhYmxlYXVTZXJ2ZXJEYXRhc291cmNlRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfVGFibGVhdVNlcnZlckRhdGFzb3VyY2VMYXN0RXh0cmFjdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVhdVNlcnZlckRhdGFzb3VyY2VMYXN0RXh0cmFjdCA9ICd0YWJsZWF1U2VydmVyRGF0YXNvdXJjZUxhc3RFeHRyYWN0JyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlYXVTZXJ2ZXJEYXRhc291cmNlTW9kaWZpZWQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlYXVTZXJ2ZXJEYXRhc291cmNlTW9kaWZpZWQgPSAndGFibGVhdVNlcnZlckRhdGFzb3VyY2VNb2RpZmllZCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyRGF0YXNvdXJjZU93bmVyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZWF1U2VydmVyRGF0YXNvdXJjZU93bmVyID0gJ3RhYmxlYXVTZXJ2ZXJEYXRhc291cmNlT3duZXInLFxyXG5cclxuICAvLyBEUElfVGFibGVhdVNlcnZlckRhdGFzb3VyY2VQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZWF1U2VydmVyRGF0YXNvdXJjZVBhdGggPSAndGFibGVhdVNlcnZlckRhdGFzb3VyY2VQYXRoJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlYXVTZXJ2ZXJGZXRjaFNlYXJjaFF1ZXJ5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZWF1U2VydmVyRmV0Y2hTZWFyY2hRdWVyeSA9ICd0YWJsZWF1U2VydmVyRmV0Y2hTZWFyY2hRdWVyeScsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVhdVNlcnZlck5hbWUgPSAndGFibGVhdVNlcnZlck5hbWUnLFxyXG5cclxuICAvLyBEUElfVGFibGVhdVNlcnZlclByb2plY3ROYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZWF1U2VydmVyUHJvamVjdE5hbWUgPSAndGFibGVhdVNlcnZlclByb2plY3ROYW1lJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlYXVTZXJ2ZXJVc2VybmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVhdVNlcnZlclVzZXJuYW1lID0gJ3RhYmxlYXVTZXJ2ZXJVc2VybmFtZScsXHJcblxyXG4gIC8vIERQSV9UcmFuc3BvcnRUeXBlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUcmFuc3BvcnRUeXBlID0gJ3RyYW5zcG9ydFR5cGUnLFxyXG5cclxuICAvLyBEUElfV2FyZWhvdXNlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgV2FyZWhvdXNlTmFtZSA9ICdkYXRhc291cmNlV2FyZWhvdXNlTmFtZScsXHJcblxyXG4gIC8vIERQSV9Xb3JrZ3JvdXBXb3JrYm9va05hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFdvcmtncm91cFdvcmtib29rTmFtZSA9ICd3b3JrZ3JvdXBXb3JrYm9va05hbWUnLFxyXG5cclxuICAvLyBEUElfQW5hbHl0aWNzSXRlbVRvb2x0aXAsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFuYWx5dGljc0l0ZW1Ub29sdGlwID0gJ2FuYWx5dGljc0l0ZW1Ub29sdGlwJyxcclxuXHJcbiAgLy8gRFBJX0Rlc2NyaXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEZXNjcmlwdGlvbiA9ICdkZXNjcmlwdGlvbicsXHJcblxyXG4gIC8vIERQSV9EU0NsYXNzQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRFNDbGFzc0NhcHRpb24gPSAnZHNDbGFzc0NhcHRpb24nLFxyXG5cclxuICAvLyBEUElfRm9ybXVsYSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9ybXVsYSA9ICdmb3JtdWxhJyxcclxuXHJcbiAgLy8gRFBJX01lc3NhZ2VUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNZXNzYWdlVGV4dCA9ICdtZXNzYWdlVGV4dCcsXHJcblxyXG4gIC8vIERQSV9EYXRhc291cmNlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc291cmNlID0gJ2RhdGFzb3VyY2UnLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZVNvdXJjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YXNvdXJjZVNvdXJjZSA9ICdkYXRhc291cmNlU291cmNlJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFzb3VyY2VUYXJnZXQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFzb3VyY2VUYXJnZXQgPSAnZGF0YXNvdXJjZVRhcmdldCcsXHJcblxyXG4gIC8vIERQSV9GaXJzdERhdGFzb3VyY2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpcnN0RGF0YXNvdXJjZSA9ICdmaXJzdERhdGFzb3VyY2UnLFxyXG5cclxuICAvLyBEUElfTmV3RGF0YXNvdXJjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTmV3RGF0YXNvdXJjZSA9ICduZXdEYXRhc291cmNlJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlcnNEYXRhc291cmNlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQYXJhbWV0ZXJzRGF0YXNvdXJjZSA9ICdwYXJhbWV0ZXJzRGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9QcmltYXJ5RGF0YXNvdXJjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUHJpbWFyeURhdGFzb3VyY2UgPSAncHJpbWFyeURhdGFzb3VyY2UnLFxyXG5cclxuICAvLyBEUElfQnV0dG9uTmF2aWdhdGlvblRhcmdldHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQnV0dG9uTmF2aWdhdGlvblRhcmdldHMgPSAnYnV0dG9uTmF2aWdhdGlvblRhcmdldHMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkRhdGFiYXNlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBDb25uZWN0aW9uRGF0YWJhc2VzID0gJ2Nvbm5lY3Rpb25EYXRhYmFzZXMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblNjaGVtYXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQ29ubmVjdGlvblNjaGVtYXMgPSAnY29ubmVjdGlvblNjaGVtYXMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbldhcmVob3VzZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQ29ubmVjdGlvbldhcmVob3VzZXMgPSAnY29ubmVjdGlvbldhcmVob3VzZXMnLFxyXG5cclxuICAvLyBEUElfRFNDbGFzc2VzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIERTQ2xhc3NlcyA9ICdkc0NsYXNzZXMnLFxyXG5cclxuICAvLyBEUElfUG9zc2libGVDaG9pY2VzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFBvc3NpYmxlQ2hvaWNlcyA9ICdwb3NzaWJsZUNob2ljZXMnLFxyXG5cclxuICAvLyBEUElfU3RhbmRhcmRDb25uZWN0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBTdGFuZGFyZENvbm5lY3Rpb25zID0gJ3N0YW5kYXJkQ29ubmVjdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU3RyaW5ncywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBTdHJpbmdzID0gJ3N0cmluZ3MnLFxyXG5cclxuICAvLyBEUElfVGFibGVhdVNlcnZlclByb2plY3ROYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBUYWJsZWF1U2VydmVyUHJvamVjdE5hbWVzID0gJ3RhYmxlYXVTZXJ2ZXJQcm9qZWN0TmFtZXMnLFxyXG5cclxuICAvLyBEUElfVGFibGVDYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBUYWJsZUNhcHRpb25zID0gJ3RhYmxlQ2FwdGlvbnMnLFxyXG5cclxuICAvLyBEUElfRGF0YVZhbHVlcywgaGF2aW5nIHR5cGUgb2JqZWN0W11cclxuICBEYXRhVmFsdWVzID0gJ2RhdGFWYWx1ZXMnLFxyXG5cclxuICAvLyBEUElfUXVlcnlCYW5kRXJyb3JzLCBoYXZpbmcgdHlwZSBvYmplY3RbXVxyXG4gIFF1ZXJ5QmFuZEVycm9ycyA9ICdxdWVyeUJhbmRFcnJvcnMnLFxyXG5cclxuICAvLyBEUElfUXVlcnlCYW5kUGFyYW1ldGVycywgaGF2aW5nIHR5cGUgb2JqZWN0W11cclxuICBRdWVyeUJhbmRQYXJhbWV0ZXJzID0gJ3F1ZXJ5QmFuZFBhcmFtZXRlcnMnLFxyXG5cclxuICAvLyBEUElfSW5pdGlhbFNRTFBhcmFtZXRlcnMsIGhhdmluZyB0eXBlIG9iamVjdFtdXHJcbiAgSW5pdGlhbFNRTFBhcmFtZXRlcnMgPSAnaW5pdGlhbFNxbFBhcmFtZXRlcnMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkF0dHJpYnV0ZXMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIENvbm5lY3Rpb25BdHRyaWJ1dGVzID0gJ2Nvbm5lY3Rpb25BdHRycycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uUHJvcHMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIENvbm5lY3Rpb25Qcm9wcyA9ICdjb25uZWN0aW9uUHJvcHMnLFxyXG5cclxuICAvLyBEUElfRGlzcGxheU5hbWVNYXAsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIERpc3BsYXlOYW1lTWFwID0gJ2Rpc3BsYXlOYW1lTWFwJyxcclxuXHJcbiAgLy8gRFBJX0xvb2t1cFRhYmxlLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBMb29rdXBUYWJsZSA9ICdsb29rdXBUYWJsZScsXHJcblxyXG4gIC8vIERQSV9PQXV0aEF0dHJzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBPQXV0aEF0dHJzID0gJ29hdXRoQXR0cnMnLFxyXG5cclxuICAvLyBEUElfU3RyaW5nTWFwLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBTdHJpbmdNYXAgPSAnc3RyaW5nTWFwJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlUmFua2luZ01hcCwgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBzdHJpbmcpXHJcbiAgVGFibGVSYW5raW5nTWFwID0gJ3RhYmxlUmFua2luZ01hcCcsXHJcblxyXG4gIC8vIERQSV9XRENBdHRyaWJ1dGVzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBXRENBdHRyaWJ1dGVzID0gJ3dkY0F0dHJzJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3RvckF0dHJpYnV0ZXMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIENvbm5lY3RvckF0dHJpYnV0ZXMgPSAnY29ubmVjdG9yQXR0cnMnLFxyXG5cclxuICAvLyBEUElfVGFibGVSZWxldmFuY2VQYXJhbXMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIFRhYmxlUmVsZXZhbmNlUGFyYW1zID0gJ3RhYmxlUmVsZXZhbmNlUGFyYW1zJyxcclxuXHJcbiAgLy8gRFBJX0FjdHVhbFBhcmFtZXRlclBhcmFtZXRlciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWN0dWFsUGFyYW1ldGVyUGFyYW1ldGVyID0gJ2FjdHVhbFBhcmFtZXRlclBhcmFtZXRlcicsXHJcblxyXG4gIC8vIERQSV9EYXRhQ29sdW1uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YUNvbHVtbk5hbWUgPSAnZGF0YUNvbHVtbk5hbWUnLFxyXG5cclxuICAvLyBEUElfTEhTRGF0YUNvbHVtbk5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIExIU0RhdGFDb2x1bW5OYW1lID0gJ2xoc0RhdGFDb2x1bW5OYW1lJyxcclxuXHJcbiAgLy8gRFBJX1JIU0RhdGFDb2x1bW5OYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSSFNEYXRhQ29sdW1uTmFtZSA9ICdyaHNEYXRhQ29sdW1uTmFtZScsXHJcblxyXG4gIC8vIERQSV9GdWxsQ3ViZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZ1bGxDdWJlTmFtZSA9ICdmdWxsQ3ViZU5hbWUnLFxyXG5cclxuICAvLyBEUElfRnVsbFZhcmlhYmxlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRnVsbFZhcmlhYmxlTmFtZSA9ICdmdWxsVmFyaWFibGVOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1NlbWFudGljUm9sZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2VtYW50aWNSb2xlID0gJ3NlbWFudGljUm9sZScsXHJcblxyXG4gIC8vIERQSV9TdG9yZWRQcm9jZWR1cmVOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTdG9yZWRQcm9jZWR1cmVOYW1lID0gJ3N0b3JlZFByb2NOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVOYW1lID0gJ3RhYmxlTmFtZScsXHJcblxyXG4gIC8vIERQSV9BZGRlZFRhYmxlTmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQWRkZWRUYWJsZU5hbWVzID0gJ2FkZGVkVGFibGVOYW1lcycsXHJcblxyXG4gIC8vIERQSV9Db2FsZXNjZUdyb3VwRmllbGRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIENvYWxlc2NlR3JvdXBGaWVsZHMgPSAnY29hbGVzY2VHcm91cEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9RdWFsaWZpZWROYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBRdWFsaWZpZWROYW1lcyA9ICdxdWFsaWZpZWROYW1lcycsXHJcblxyXG4gIC8vIERQSV9Kb2luRmllbGRBbGlhc2VzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEpvaW5GaWVsZEFsaWFzZXMgPSAnam9pbkZpZWxkX2FsaWFzZXMnLFxyXG5cclxuICAvLyBEUElfSm9pbkluZm9GaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgSm9pbkluZm9GaWVsZHMgPSAnam9pbkluZm9GaWVsZHMnLFxyXG5cclxuICAvLyBEUElfUGl2b3RHcm91cEZpZWxkcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBQaXZvdEdyb3VwRmllbGRzID0gJ3Bpdm90R3JvdXBGaWVsZHMnLFxyXG5cclxuICAvLyBEUElfUmVtb3ZlZFRhYmxlTmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVtb3ZlZFRhYmxlTmFtZXMgPSAncmVtb3ZlZFRhYmxlTmFtZXMnLFxyXG5cclxuICAvLyBEUElfU3RvcmVkUHJvY2VkdXJlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBTdG9yZWRQcm9jZWR1cmVzID0gJ3N0b3JlZFByb2NlZHVyZXMnLFxyXG5cclxuICAvLyBEUElfVGFibGVOYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBUYWJsZU5hbWVzID0gJ3RhYmxlTmFtZXMnLFxyXG5cclxuICAvLyBEUElfQ29sdW1uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29sdW1uTmFtZSA9ICdjb2x1bW5OYW1lJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmllbGROYW1lID0gJ2ZuJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkTmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRmllbGROYW1lcyA9ICdmaWVsZE5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0VGh1bWJuYWlsSW1hZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdvb2dsZVNoZWV0VGh1bWJuYWlsSW1hZ2UgPSAnZ29vZ2xlU2hlZXRUaHVtYm5haWxJbWFnZScsXHJcblxyXG4gIC8vIERQSV9BdHRyTURXUGFzc3dvcmQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF0dHJNRFdQYXNzd29yZCA9ICd3aWRnZXRBdHRyTWR3UGFzc3dvcmQnLFxyXG5cclxuICAvLyBEUElfQXR0clBhc3N3b3JkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdHRyUGFzc3dvcmQgPSAnd2lkZ2V0QXR0clBhc3N3b3JkJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFzb3VyY2VQYXNzd29yZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YXNvdXJjZVBhc3N3b3JkID0gJ2RhdGFzb3VyY2VQYXNzd29yZCcsXHJcblxyXG4gIC8vIERQSV9GZWRlcmF0ZWRLZXljaGFpbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmVkZXJhdGVkS2V5Y2hhaW4gPSAnZmVkZXJhdGVkS2V5Y2hhaW4nLFxyXG5cclxuICAvLyBEUElfRGF0YVBhcmFtZXRlcklELCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhUGFyYW1ldGVySUQgPSAnZGF0YVBhcmFtVHlwZScsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0U2VydmVyV2lkZ2V0VHlwZSwgaGF2aW5nIHR5cGUgQ29ubmVjdFNlcnZlcldpZGdldFR5cGVcclxuICBDb25uZWN0U2VydmVyV2lkZ2V0VHlwZSA9ICdjb25uZWN0U2VydmVyV2lkZ2V0VHlwZScsXHJcblxyXG4gIC8vIERQSV9BdXRoZW50aWNhdGlvbk1vZGUsIGhhdmluZyB0eXBlIE1vZGVcclxuICBBdXRoZW50aWNhdGlvbk1vZGUgPSAnYXV0aE1vZGUnLFxyXG5cclxuICAvLyBEUElfUmVjb25uZWN0QXV0aE1vZGUsIGhhdmluZyB0eXBlIFJlY29ubmVjdE1vZGVcclxuICBSZWNvbm5lY3RBdXRoTW9kZSA9ICdyZWNvbm5lY3RBdXRoTW9kZScsXHJcblxyXG4gIC8vIERQSV9DdXJyZW50QXV0aE9wdGlvbiwgaGF2aW5nIHR5cGUgQXV0aE9wdGlvblxyXG4gIEN1cnJlbnRBdXRoT3B0aW9uID0gJ2N1cnJBdXRoT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0F1dGhPcHRpb25MaXN0LCBoYXZpbmcgdHlwZSBBdXRoT3B0aW9uW11cclxuICBBdXRoT3B0aW9uTGlzdCA9ICdhdXRoT3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uU3BlY2lmaWNhdGlvblR5cGUsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25TcGVjaWZpY2F0aW9uVHlwZVxyXG4gIENvbm5lY3Rpb25TcGVjaWZpY2F0aW9uVHlwZSA9ICdjb25uZWN0aW9uU3BlY2lmaWNhdGlvblR5cGUnLFxyXG5cclxuICAvLyBEUElfRGF0YVR5cGUsIGhhdmluZyB0eXBlIERhdGFUeXBlXHJcbiAgRGF0YVR5cGUgPSAnZGF0YVR5cGUnLFxyXG5cclxuICAvLyBEUElfTEhTRGF0YVR5cGUsIGhhdmluZyB0eXBlIERhdGFUeXBlXHJcbiAgTEhTRGF0YVR5cGUgPSAnbGhzRGF0YVR5cGUnLFxyXG5cclxuICAvLyBEUElfUkhTRGF0YVR5cGUsIGhhdmluZyB0eXBlIERhdGFUeXBlXHJcbiAgUkhTRGF0YVR5cGUgPSAncmhzRGF0YVR5cGUnLFxyXG5cclxuICAvLyBEUElfRGVmYXVsdEZpZWxkUm9sZSwgaGF2aW5nIHR5cGUgRmllbGRSb2xlXHJcbiAgRGVmYXVsdEZpZWxkUm9sZSA9ICdkZWZhdWx0RmllbGRSb2xlJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkUm9sZSwgaGF2aW5nIHR5cGUgRmllbGRSb2xlXHJcbiAgRmllbGRSb2xlID0gJ2ZpZWxkUm9sZScsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0RmllbGRUeXBlLCBoYXZpbmcgdHlwZSBGaWVsZFR5cGVcclxuICBEZWZhdWx0RmllbGRUeXBlID0gJ2RlZmF1bHRGaWVsZFR5cGUnLFxyXG5cclxuICAvLyBEUElfRmllbGRUeXBlLCBoYXZpbmcgdHlwZSBGaWVsZFR5cGVcclxuICBGaWVsZFR5cGUgPSAnZmllbGRUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkVHlwZUxpc3QsIGhhdmluZyB0eXBlIEZpZWxkVHlwZVtdXHJcbiAgRmllbGRUeXBlTGlzdCA9ICdmaWVsZFR5cGVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkVHlwZUxpc3REZXRhaWwsIGhhdmluZyB0eXBlIEZpZWxkVHlwZVtdXHJcbiAgRmllbGRUeXBlTGlzdERldGFpbCA9ICdmaWVsZFR5cGVMaXN0RGV0YWlsJyxcclxuXHJcbiAgLy8gRFBJX0FnZ1R5cGUsIGhhdmluZyB0eXBlIEFnZ1R5cGVcclxuICBBZ2dUeXBlID0gJ2FnZ3JlZ2F0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RlZmF1bHRBZ2dUeXBlLCBoYXZpbmcgdHlwZSBBZ2dUeXBlXHJcbiAgRGVmYXVsdEFnZ1R5cGUgPSAnZGVmYXVsdEFnZ3JlZ2F0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0QWdnLCBoYXZpbmcgdHlwZSBBZ2dUeXBlXHJcbiAgRm9yZWNhc3RBZ2cgPSAnZm9yZWNhc3RTdW1tYXJpemVUbycsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdEF1dG9BZ2csIGhhdmluZyB0eXBlIEFnZ1R5cGVcclxuICBGb3JlY2FzdEF1dG9BZ2cgPSAnZm9yZWNhc3RBdXRvU3VtbWFyaXplVG8nLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RBdXRvUmFuZ2VVbml0cywgaGF2aW5nIHR5cGUgQWdnVHlwZVxyXG4gIEZvcmVjYXN0QXV0b1JhbmdlVW5pdHMgPSAnZm9yZWNhc3RBdXRvUmFuZ2VVbml0cycsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdEVuZE9mUmFuZ2VVbml0cywgaGF2aW5nIHR5cGUgQWdnVHlwZVxyXG4gIEZvcmVjYXN0RW5kT2ZSYW5nZVVuaXRzID0gJ2ZvcmVjYXN0RW5kT2ZSYW5nZVVuaXRzJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0TmV4dFJhbmdlVW5pdHMsIGhhdmluZyB0eXBlIEFnZ1R5cGVcclxuICBGb3JlY2FzdE5leHRSYW5nZVVuaXRzID0gJ2ZvcmVjYXN0TmV4dFJhbmdlVW5pdHMnLFxyXG5cclxuICAvLyBEUElfU291cmNlQWdnLCBoYXZpbmcgdHlwZSBBZ2dUeXBlXHJcbiAgU291cmNlQWdnID0gJ3NvdXJjZUFnZ3JlZ2F0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1RhcmdldEFnZywgaGF2aW5nIHR5cGUgQWdnVHlwZVxyXG4gIFRhcmdldEFnZyA9ICd0YXJnZXRBZ2dyZWdhdGlvbicsXHJcblxyXG4gIC8vIERQSV9BZ2dyZWdhdGVCeUFnZ1R5cGVzLCBoYXZpbmcgdHlwZSBBZ2dUeXBlW11cclxuICBBZ2dyZWdhdGVCeUFnZ1R5cGVzID0gJ2FnZ3JlZ2F0ZUJ5QWdnVHlwZXMnLFxyXG5cclxuICAvLyBEUElfQWdncmVnYXRpb25WYWx1ZXMsIGhhdmluZyB0eXBlIEFnZ1R5cGVbXVxyXG4gIEFnZ3JlZ2F0aW9uVmFsdWVzID0gJ2FnZ3JlZ2F0aW9uVmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX1NvcnRBZ2dWYWx1ZXMsIGhhdmluZyB0eXBlIEFnZ1R5cGVbXVxyXG4gIFNvcnRBZ2dWYWx1ZXMgPSAnc29ydEFnZ1ZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9Db2x1bW5DbGFzcywgaGF2aW5nIHR5cGUgQ29sdW1uQ2xhc3NcclxuICBDb2x1bW5DbGFzcyA9ICdjb2x1bW5DbGFzcycsXHJcblxyXG4gIC8vIERQSV9EYXRlUGVyaW9kVHlwZSwgaGF2aW5nIHR5cGUgRGF0ZVBlcmlvZFR5cGVcclxuICBEYXRlUGVyaW9kVHlwZSA9ICdkYXRlUGVyaW9kVHlwZScsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uV2lkZ2V0VHlwZSwgaGF2aW5nIHR5cGUgQ29ubmVjdGlvbldpZGdldFR5cGVcclxuICBDb25uZWN0aW9uV2lkZ2V0VHlwZSA9ICdjb25uZWN0aW9uV2lkZ2V0VHlwZScsXHJcblxyXG4gIC8vIERQSV9UYWJsZVBpbGxJY29uLCBoYXZpbmcgdHlwZSBUYWJsZVBpbGxJY29uXHJcbiAgVGFibGVQaWxsSWNvbiA9ICd0YWJsZVBpbGxJY29uVHlwZScsXHJcblxyXG4gIC8vIERQSV9FbnVtZXJhdGVkRW50aXR5VHlwZSwgaGF2aW5nIHR5cGUgRW50aXR5VHlwZVxyXG4gIEVudW1lcmF0ZWRFbnRpdHlUeXBlID0gJ2VudW1lcmF0ZWRFbnRpdHlUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1BpY2tFbnRpdHlTZWFyY2hUeXBlLCBoYXZpbmcgdHlwZSBQaWNrRW50aXR5U2VhcmNoVHlwZVxyXG4gIFBpY2tFbnRpdHlTZWFyY2hUeXBlID0gJ2VudGl0eVNlYXJjaFR5cGUnLFxyXG5cclxuICAvLyBEUElfRXhwcmVzc2lvbk9wLCBoYXZpbmcgdHlwZSBPcFxyXG4gIEV4cHJlc3Npb25PcCA9ICdleHByZXNzaW9uT3AnLFxyXG5cclxuICAvLyBEUElfRXhwcmVzc2lvbk9wZXJhdG9yQ2FwdGlvbiwgaGF2aW5nIHR5cGUgRXhwcmVzc2lvbk9wZXJhdG9yQ2FwdGlvblByZXNNb2RlbFxyXG4gIEV4cHJlc3Npb25PcGVyYXRvckNhcHRpb24gPSAnZXhwcmVzc2lvbk9wZXJhdG9yQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9SZWxhdGlvbmFsRXhwZXJlc3Npb25PcHMsIGhhdmluZyB0eXBlIEV4cHJlc3Npb25PcGVyYXRvckNhcHRpb25QcmVzTW9kZWxbXVxyXG4gIFJlbGF0aW9uYWxFeHBlcmVzc2lvbk9wcyA9ICdyZWxhdGlvbmFsRXhwcmVzc2lvbk9wcycsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlFeHByZXNzaW9uT3BzLCBoYXZpbmcgdHlwZSBFeHByZXNzaW9uT3BlcmF0b3JDYXB0aW9uUHJlc01vZGVsW11cclxuICBIaWVyYXJjaHlFeHByZXNzaW9uT3BzID0gJ2hpZXJhcmNoeUV4cHJlc3Npb25PcHMnLFxyXG5cclxuICAvLyBEUElfRGVmYXVsdFNvcnREaXJlY3Rpb24sIGhhdmluZyB0eXBlIFNvcnREaXJlY3Rpb25cclxuICBEZWZhdWx0U29ydERpcmVjdGlvbiA9ICdkZWZTb3J0T3JkZXInLFxyXG5cclxuICAvLyBEUElfU29ydERpcmVjdGlvbiwgaGF2aW5nIHR5cGUgU29ydERpcmVjdGlvblxyXG4gIFNvcnREaXJlY3Rpb24gPSAnc29ydE9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX1NvcnREaXJlY3Rpb25WYWx1ZXMsIGhhdmluZyB0eXBlIFNvcnREaXJlY3Rpb25bXVxyXG4gIFNvcnREaXJlY3Rpb25WYWx1ZXMgPSAnc29ydERpcmVjdGlvblZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9DdWJlTWV0YWRhdGFDYXRlZ29yeSwgaGF2aW5nIHR5cGUgQ3ViZU1ldGFkYXRhQ2F0ZWdvcnlcclxuICBDdWJlTWV0YWRhdGFDYXRlZ29yeSA9ICdjdWJlTWV0YWRhdGFDYXRlZ29yeScsXHJcblxyXG4gIC8vIERQSV9DdWJlTWV0YWRhdGFDYXRlZ29yaWVzLCBoYXZpbmcgdHlwZSBDdWJlTWV0YWRhdGFDYXRlZ29yeVtdXHJcbiAgQ3ViZU1ldGFkYXRhQ2F0ZWdvcmllcyA9ICdjdWJlTWV0YWRhdGFDYXRlZ29yaWVzJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZUJhc2ljSW5mb1R5cGUsIGhhdmluZyB0eXBlIEdvb2dsZUJhc2ljSW5mb1R5cGVcclxuICBHb29nbGVCYXNpY0luZm9UeXBlID0gJ2dvb2dsZUJhc2ljSW5mb1R5cGUnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlQW5hbHl0aWNzRGF0ZVJhbmdlT3B0aW9uVHlwZSwgaGF2aW5nIHR5cGUgRGF0ZVJhbmdlXHJcbiAgR29vZ2xlQW5hbHl0aWNzRGF0ZVJhbmdlT3B0aW9uVHlwZSA9ICdnb29nbGVBbmFseXRpY3NEYXRlUmFuZ2VPcHRpb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlQ2FsY1R5cGUsIGhhdmluZyB0eXBlIFRhYmxlQ2FsY1R5cGVcclxuICBUYWJsZUNhbGNUeXBlID0gJ3RhYmxlQ2FsY1R5cGUnLFxyXG5cclxuICAvLyBEUElfVGFibGVDYWxjVHlwZVZhbHVlcywgaGF2aW5nIHR5cGUgVGFibGVDYWxjVHlwZVtdXHJcbiAgVGFibGVDYWxjVHlwZVZhbHVlcyA9ICd0YWJsZUNhbGNUeXBlVmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX1JlbGF0aXZlQWRkcmVzcywgaGF2aW5nIHR5cGUgUmVsYXRpdmVBZGRyZXNzXHJcbiAgUmVsYXRpdmVBZGRyZXNzID0gJ3JlbGF0aXZlQWRkcmVzcycsXHJcblxyXG4gIC8vIERQSV9SZWxhdGl2ZVZhbHVlcywgaGF2aW5nIHR5cGUgUmVsYXRpdmVBZGRyZXNzW11cclxuICBSZWxhdGl2ZVZhbHVlcyA9ICdyZWxhdGl2ZVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9PcmRlcmluZ1R5cGUsIGhhdmluZyB0eXBlIE9yZGVyaW5nVHlwZVxyXG4gIE9yZGVyaW5nVHlwZSA9ICdvcmRlcmluZ1R5cGUnLFxyXG5cclxuICAvLyBEUElfT3JkZXJpbmdUeXBlVmFsdWVzLCBoYXZpbmcgdHlwZSBPcmRlcmluZ1R5cGVbXVxyXG4gIE9yZGVyaW5nVHlwZVZhbHVlcyA9ICdvcmRlcmluZ1R5cGVWYWx1ZXMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxCaW5JdGVtVHlwZSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxCaW5JdGVtVHlwZVxyXG4gIENhdGVnb3JpY2FsQmluSXRlbVR5cGUgPSAnY2F0ZWdvcmljYWxCaW5JdGVtVHlwZScsXHJcblxyXG4gIC8vIERQSV9BdXRoZW50aWNhdGlvbkluZm9zLCBoYXZpbmcgdHlwZSBBdXRoZW50aWNhdGlvblNldHRpbmdzUHJlc01vZGVsXHJcbiAgQXV0aGVudGljYXRpb25JbmZvcyA9ICdhdXRoSW5mbycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uV2lkZ2V0UGFyYW1zLCBoYXZpbmcgdHlwZSBDb25uZWN0aW9uUGFyYW1zUHJlc01vZGVsXHJcbiAgQ29ubmVjdGlvbldpZGdldFBhcmFtcyA9ICd3aWRnZXRDb25uZWN0aW9uUGFyYW1zJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25TZXR0aW5ncywgaGF2aW5nIHR5cGUgQ29ubmVjdGlvblNldHRpbmdzUHJlc01vZGVsXHJcbiAgQ29ubmVjdGlvblNldHRpbmdzID0gJ2Nvbm5lY3Rpb25TZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9SZWNvbm5lY3RBdXRoZW50aWNhdGlvblNldHRpbmdzLCBoYXZpbmcgdHlwZSBBdXRoZW50aWNhdGlvblNldHRpbmdzUHJlc01vZGVsXHJcbiAgUmVjb25uZWN0QXV0aGVudGljYXRpb25TZXR0aW5ncyA9ICdyZWNvbm5lY3RBdXRoU2V0dGluZ3MnLFxyXG5cclxuICAvLyBEUElfQ3ViZUNvbm5lY3Rpb25TcGVjaWZpY2F0aW9uT3B0aW9uLCBoYXZpbmcgdHlwZSBDdWJlQ29ubmVjdGlvblNwZWNpZmljYXRpb25PcHRpb25QcmVzTW9kZWxcclxuICBDdWJlQ29ubmVjdGlvblNwZWNpZmljYXRpb25PcHRpb24gPSAnY3ViZUNvbm5lY3Rpb25TcGVjaWZpY2F0aW9uT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0N1YmVDb25uZWN0aW9uU3BlY2lmaWNhdGlvbk9wdGlvbnMsIGhhdmluZyB0eXBlIEN1YmVDb25uZWN0aW9uU3BlY2lmaWNhdGlvbk9wdGlvblByZXNNb2RlbFtdXHJcbiAgQ3ViZUNvbm5lY3Rpb25TcGVjaWZpY2F0aW9uT3B0aW9ucyA9ICdjdWJlQ29ubmVjdGlvblNwZWNpZmljYXRpb25PcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0N1YmVDb25uZWN0aW9uU3BlY2lmaWNhdGlvbiwgaGF2aW5nIHR5cGUgQ3ViZUNvbm5lY3Rpb25TcGVjaWZpY2F0aW9uUHJlc01vZGVsXHJcbiAgQ3ViZUNvbm5lY3Rpb25TcGVjaWZpY2F0aW9uID0gJ2N1YmVDb25uZWN0aW9uU3BlY2lmaWNhdGlvbicsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uU2V0dGluZ3NPcHRpb24sIGhhdmluZyB0eXBlIENvbm5lY3Rpb25TZXR0aW5nc09wdGlvblByZXNNb2RlbFxyXG4gIENvbm5lY3Rpb25TZXR0aW5nc09wdGlvbiA9ICdjb25uZWN0aW9uU2V0dGluZ3NPcHRpb24nLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblNldHRpbmdzT3B0aW9ucywgaGF2aW5nIHR5cGUgQ29ubmVjdGlvblNldHRpbmdzT3B0aW9uUHJlc01vZGVsW11cclxuICBDb25uZWN0aW9uU2V0dGluZ3NPcHRpb25zID0gJ2Nvbm5lY3Rpb25TZXR0aW5nc09wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU3RyaW5nQ29sbGF0aW9uLCBoYXZpbmcgdHlwZSBTdHJpbmdDb2xsYXRpb25QcmVzTW9kZWxcclxuICBTdHJpbmdDb2xsYXRpb24gPSAnc3RyaW5nQ29sbGF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFiYXNlRW51bWVyYXRpb24sIGhhdmluZyB0eXBlIERhdGFiYXNlRW51bWVyYXRpb25QcmVzTW9kZWxcclxuICBEYXRhYmFzZUVudW1lcmF0aW9uID0gJ2RhdGFiYXNlRW51bWVyYXRpb24nLFxyXG5cclxuICAvLyBEUElfU2NoZW1hRW51bWVyYXRpb24sIGhhdmluZyB0eXBlIFNjaGVtYUVudW1lcmF0aW9uUHJlc01vZGVsXHJcbiAgU2NoZW1hRW51bWVyYXRpb24gPSAnc2NoZW1hRW51bWVyYXRpb24nLFxyXG5cclxuICAvLyBEUElfU3RhbmRhcmRDb25uZWN0aW9uRW51bWVyYXRpb24sIGhhdmluZyB0eXBlIFN0YW5kYXJkQ29ubmVjdGlvbkVudW1lcmF0aW9uUHJlc01vZGVsXHJcbiAgU3RhbmRhcmRDb25uZWN0aW9uRW51bWVyYXRpb24gPSAnc3RhbmRhcmRDb25uZWN0aW9uRW51bWVyYXRpb24nLFxyXG5cclxuICAvLyBEUElfU3RvcmVkUHJvY2VkdXJlRW51bWVyYXRpb24sIGhhdmluZyB0eXBlIFN0b3JlZFByb2NlZHVyZUVudW1lcmF0aW9uUHJlc01vZGVsXHJcbiAgU3RvcmVkUHJvY2VkdXJlRW51bWVyYXRpb24gPSAnc3RvcmVkUHJvY2VkdXJlRW51bWVyYXRpb24nLFxyXG5cclxuICAvLyBEUElfVGFibGVFbnVtZXJhdGlvbiwgaGF2aW5nIHR5cGUgVGFibGVFbnVtZXJhdGlvblByZXNNb2RlbFxyXG4gIFRhYmxlRW51bWVyYXRpb24gPSAndGFibGVFbnVtZXJhdGlvbicsXHJcblxyXG4gIC8vIERQSV9XYXJlaG91c2VFbnVtZXJhdGlvbiwgaGF2aW5nIHR5cGUgV2FyZWhvdXNlRW51bWVyYXRpb25QcmVzTW9kZWxcclxuICBXYXJlaG91c2VFbnVtZXJhdGlvbiA9ICd3YXJlaG91c2VFbnVtZXJhdGlvbicsXHJcblxyXG4gIC8vIERQSV9TbG93TWV0YWRhdGFTY2hlbWFMaXN0LCBoYXZpbmcgdHlwZSBTbG93TWV0YWRhdGFTY2hlbWFMaXN0UHJlc01vZGVsXHJcbiAgU2xvd01ldGFkYXRhU2NoZW1hTGlzdCA9ICdzbG93TWV0YWRhdGFTY2hlbWFMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1Nsb3dNZXRhZGF0YVRhYmxlTGlzdCwgaGF2aW5nIHR5cGUgU2xvd01ldGFkYXRhVGFibGVMaXN0UHJlc01vZGVsXHJcbiAgU2xvd01ldGFkYXRhVGFibGVMaXN0ID0gJ3Nsb3dNZXRhZGF0YVRhYmxlTGlzdCcsXHJcblxyXG4gIC8vIERQSV9DdWJlQ2F0YWxvZywgaGF2aW5nIHR5cGUgQ3ViZUNhdGFsb2dQcmVzTW9kZWxcclxuICBDdWJlQ2F0YWxvZyA9ICdjdWJlQ2F0YWxvZycsXHJcblxyXG4gIC8vIERQSV9DdWJlQ2F0YWxvZ3MsIGhhdmluZyB0eXBlIEN1YmVDYXRhbG9nUHJlc01vZGVsW11cclxuICBDdWJlQ2F0YWxvZ3MgPSAnY3ViZUNhdGFsb2dzJyxcclxuXHJcbiAgLy8gRFBJX0N1YmVDYXRhbG9nRW51bWVyYXRpb24sIGhhdmluZyB0eXBlIEN1YmVDYXRhbG9nRW51bWVyYXRpb25QcmVzTW9kZWxcclxuICBDdWJlQ2F0YWxvZ0VudW1lcmF0aW9uID0gJ2N1YmVDYXRhbG9nRW51bWVyYXRpb24nLFxyXG5cclxuICAvLyBEUElfQ3ViZSwgaGF2aW5nIHR5cGUgQ3ViZVByZXNNb2RlbFxyXG4gIEN1YmUgPSAnY3ViZScsXHJcblxyXG4gIC8vIERQSV9DdWJlcywgaGF2aW5nIHR5cGUgQ3ViZVByZXNNb2RlbFtdXHJcbiAgQ3ViZXMgPSAnY3ViZXMnLFxyXG5cclxuICAvLyBEUElfQ3ViZUVudW1lcmF0aW9uLCBoYXZpbmcgdHlwZSBDdWJlRW51bWVyYXRpb25QcmVzTW9kZWxcclxuICBDdWJlRW51bWVyYXRpb24gPSAnY3ViZUVudW1lcmF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZUFuYWx5dGljc0Jhc2ljSXRlbSwgaGF2aW5nIHR5cGUgR29vZ2xlQW5hbHl0aWNzQmFzaWNJdGVtUHJlc01vZGVsXHJcbiAgR29vZ2xlQW5hbHl0aWNzQmFzaWNJdGVtID0gJ2dvb2dsZUFuYWx5dGljc0Jhc2ljSXRlbScsXHJcblxyXG4gIC8vIERQSV9HQU1lYXN1cmVTZXRzLCBoYXZpbmcgdHlwZSBHb29nbGVBbmFseXRpY3NCYXNpY0l0ZW1QcmVzTW9kZWxbXVxyXG4gIEdBTWVhc3VyZVNldHMgPSAnZ2FNZWFzdXJlU2V0cycsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVBbmFseXRpY3NWaWV3cywgaGF2aW5nIHR5cGUgR29vZ2xlQW5hbHl0aWNzQmFzaWNJdGVtUHJlc01vZGVsW11cclxuICBHb29nbGVBbmFseXRpY3NWaWV3cyA9ICdnb29nbGVBbmFseXRpY3NWaWV3cycsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVBbmFseXRpY3NQcm9wZXJ0aWVzLCBoYXZpbmcgdHlwZSBHb29nbGVBbmFseXRpY3NCYXNpY0l0ZW1QcmVzTW9kZWxbXVxyXG4gIEdvb2dsZUFuYWx5dGljc1Byb3BlcnRpZXMgPSAnZ29vZ2xlQW5hbHl0aWNzUHJvcGVydGllcycsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVCYXNpY0luZm9JdGVtcywgaGF2aW5nIHR5cGUgR29vZ2xlQW5hbHl0aWNzQmFzaWNJdGVtUHJlc01vZGVsW11cclxuICBHb29nbGVCYXNpY0luZm9JdGVtcyA9ICdnb29nbGVBbmFseXRpY3NBY2NvdW50cycsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVBbmFseXRpY3NDb21wbGV4SXRlbSwgaGF2aW5nIHR5cGUgR29vZ2xlQW5hbHl0aWNzQ29tcGxleEl0ZW1QcmVzTW9kZWxcclxuICBHb29nbGVBbmFseXRpY3NDb21wbGV4SXRlbSA9ICdnb29nbGVBbmFseXRpY3NDb21wbGV4SXRlbScsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVBbmFseXRpY3NQb3NzaWJsZURpbWVuc2lvbnMsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0NvbXBsZXhJdGVtUHJlc01vZGVsW11cclxuICBHb29nbGVBbmFseXRpY3NQb3NzaWJsZURpbWVuc2lvbnMgPSAnZ29vZ2xlQW5hbHl0aWNzUG9zc2libGVEaW1lbnNpb25zJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZUFuYWx5dGljc1Bvc3NpYmxlTWVhc3VyZXMsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0NvbXBsZXhJdGVtUHJlc01vZGVsW11cclxuICBHb29nbGVBbmFseXRpY3NQb3NzaWJsZU1lYXN1cmVzID0gJ2dvb2dsZUFuYWx5dGljc1Bvc3NpYmxlTWVhc3VyZXMnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlQW5hbHl0aWNzUG9zc2libGVTZWdtZW50cywgaGF2aW5nIHR5cGUgR29vZ2xlQW5hbHl0aWNzQ29tcGxleEl0ZW1QcmVzTW9kZWxbXVxyXG4gIEdvb2dsZUFuYWx5dGljc1Bvc3NpYmxlU2VnbWVudHMgPSAnZ29vZ2xlQW5hbHl0aWNzUG9zc2libGVTZWdtZW50cycsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVBbmFseXRpY3NTZWxlY3RlZERpbWVuc2lvbnMsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0NvbXBsZXhJdGVtUHJlc01vZGVsW11cclxuICBHb29nbGVBbmFseXRpY3NTZWxlY3RlZERpbWVuc2lvbnMgPSAnZ29vZ2xlQW5hbHl0aWNzU2VsZWN0ZWREaW1lbnNpb25zJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZUFuYWx5dGljc1NlbGVjdGVkTWVhc3VyZXMsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0NvbXBsZXhJdGVtUHJlc01vZGVsW11cclxuICBHb29nbGVBbmFseXRpY3NTZWxlY3RlZE1lYXN1cmVzID0gJ2dvb2dsZUFuYWx5dGljc1NlbGVjdGVkTWVhc3VyZXMnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlQW5hbHl0aWNzRGF0ZVJhbmdlT3B0aW9uLCBoYXZpbmcgdHlwZSBHb29nbGVBbmFseXRpY3NEYXRlUmFuZ2VPcHRpb25QcmVzTW9kZWxcclxuICBHb29nbGVBbmFseXRpY3NEYXRlUmFuZ2VPcHRpb24gPSAnZ29vZ2xlQW5hbHl0aWNzRGF0ZVJhbmdlT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZUFuYWx5dGljc0RhdGVSYW5nZU9wdGlvbnMsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0RhdGVSYW5nZU9wdGlvblByZXNNb2RlbFtdXHJcbiAgR29vZ2xlQW5hbHl0aWNzRGF0ZVJhbmdlT3B0aW9ucyA9ICdnb29nbGVBbmFseXRpY3NEYXRlUmFuZ2VPcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZUFuYWx5dGljc0VuZERhdGUsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0RhdGVQcmVzTW9kZWxcclxuICBHb29nbGVBbmFseXRpY3NFbmREYXRlID0gJ2dvb2dsZUFuYWx5dGljc0VuZERhdGUnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlQW5hbHl0aWNzU3RhcnREYXRlLCBoYXZpbmcgdHlwZSBHb29nbGVBbmFseXRpY3NEYXRlUHJlc01vZGVsXHJcbiAgR29vZ2xlQW5hbHl0aWNzU3RhcnREYXRlID0gJ2dvb2dsZUFuYWx5dGljc1N0YXJ0RGF0ZScsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVBbmFseXRpY3NEYXRlUmFuZ2UsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0RhdGVSYW5nZVByZXNNb2RlbFxyXG4gIEdvb2dsZUFuYWx5dGljc0RhdGVSYW5nZSA9ICdnb29nbGVBbmFseXRpY3NEYXRlUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfR29vZ2xlQW5hbHl0aWNzUXVlcnlQYXJ0aXRpb25pbmcsIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc1F1ZXJ5UGFydGl0aW9uaW5nUHJlc01vZGVsXHJcbiAgR29vZ2xlQW5hbHl0aWNzUXVlcnlQYXJ0aXRpb25pbmcgPSAnZ29vZ2xlQW5hbHl0aWNzUXVlcnlQYXJ0aXRpb25pbmcnLFxyXG5cclxuICAvLyBEUElfR0FDb25uZWN0aW9uRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIEdvb2dsZUFuYWx5dGljc0Nvbm5lY3Rpb25EZXNjcmlwdGlvblByZXNNb2RlbFxyXG4gIEdBQ29ubmVjdGlvbkRlc2NyaXB0aW9uID0gJ2dhQ29ubmVjdGlvbkRlc2NyaXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0SXRlbSwgaGF2aW5nIHR5cGUgR29vZ2xlU2hlZXRJdGVtUHJlc01vZGVsXHJcbiAgR29vZ2xlU2hlZXRJdGVtID0gJ2dvb2dsZVNoZWV0SXRlbScsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVTaGVldEl0ZW1zLCBoYXZpbmcgdHlwZSBHb29nbGVTaGVldEl0ZW1QcmVzTW9kZWxbXVxyXG4gIEdvb2dsZVNoZWV0SXRlbXMgPSAnZ29vZ2xlU2hlZXRJdGVtcycsXHJcblxyXG4gIC8vIERQSV9Hb29nbGVTaGVldHNMaXN0UHJlc01vZGVsLCBoYXZpbmcgdHlwZSBHb29nbGVTaGVldHNMaXN0UHJlc01vZGVsXHJcbiAgR29vZ2xlU2hlZXRzTGlzdFByZXNNb2RlbCA9ICdnb29nbGVTaGVldHNMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0dvb2dsZVNoZWV0UGFuZVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgR29vZ2xlU2hlZXRQYW5lUHJlc01vZGVsXHJcbiAgR29vZ2xlU2hlZXRQYW5lUHJlc01vZGVsID0gJ2dvb2dsZVNoZWV0UGFuZScsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyQ29ubmVjdGlvbkRlc2NyaXB0aW9uLCBoYXZpbmcgdHlwZSBUYWJsZWF1U2VydmVyQ29ubmVjdGlvbkRlc2NyaXB0aW9uUHJlc01vZGVsXHJcbiAgVGFibGVhdVNlcnZlckNvbm5lY3Rpb25EZXNjcmlwdGlvbiA9ICd0YWJsZWF1U2VydmVyQ29ubmVjdGlvbkRlc2NyaXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0luaXRpYWxTUUxQcmVzTW9kZWwsIGhhdmluZyB0eXBlIEluaXRpYWxTUUxQcmVzTW9kZWxcclxuICBJbml0aWFsU1FMUHJlc01vZGVsID0gJ2luaXRpYWxTcWxQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfUXVlcnlCYW5kaW5nUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBRdWVyeUJhbmRpbmdQcmVzTW9kZWxcclxuICBRdWVyeUJhbmRpbmdQcmVzTW9kZWwgPSAncXVlcnlCYW5kaW5nUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1Nsb3dNZXRhZGF0YSwgaGF2aW5nIHR5cGUgU2xvd01ldGFkYXRhUHJlc01vZGVsXHJcbiAgU2xvd01ldGFkYXRhID0gJ3Nsb3dNZXRhZGF0YScsXHJcblxyXG4gIC8vIERQSV9TbG93TWV0YWRhdGFTY2hlbWFTZWFyY2hQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNsb3dNZXRhZGF0YVNlYXJjaFByZXNNb2RlbFxyXG4gIFNsb3dNZXRhZGF0YVNjaGVtYVNlYXJjaFByZXNNb2RlbCA9ICdzbG93TWV0YWRhdGFTY2hlbWFTZWFyY2gnLFxyXG5cclxuICAvLyBEUElfU2xvd01ldGFkYXRhVGFibGVTZWFyY2hQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNsb3dNZXRhZGF0YVNlYXJjaFByZXNNb2RlbFxyXG4gIFNsb3dNZXRhZGF0YVRhYmxlU2VhcmNoUHJlc01vZGVsID0gJ3Nsb3dNZXRhZGF0YVRhYmxlU2VhcmNoJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlYXVTZXJ2ZXJQcm9qZWN0c1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgVGFibGVhdVNlcnZlclByb2plY3RzUHJlc01vZGVsXHJcbiAgVGFibGVhdVNlcnZlclByb2plY3RzUHJlc01vZGVsID0gJ3RhYmxlYXVTZXJ2ZXJQcm9qZWN0c1ByZXNtb2RlbCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyRGF0YVNvdXJjZVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgVGFibGVhdVNlcnZlckRhdGFTb3VyY2VQcmVzTW9kZWxcclxuICBUYWJsZWF1U2VydmVyRGF0YVNvdXJjZVByZXNNb2RlbCA9ICd0YWJsZWF1U2VydmVyRGF0YVNvdXJjZVByZXNtb2RlbCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyRGF0YVNvdXJjZVByZXNNb2RlbHMsIGhhdmluZyB0eXBlIFRhYmxlYXVTZXJ2ZXJEYXRhU291cmNlUHJlc01vZGVsW11cclxuICBUYWJsZWF1U2VydmVyRGF0YVNvdXJjZVByZXNNb2RlbHMgPSAndGFibGVhdVNlcnZlckRhdGFTb3VyY2VQcmVzbW9kZWxzJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlYXVTZXJ2ZXJEYXRhU291cmNlc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgVGFibGVhdVNlcnZlckRhdGFTb3VyY2VzUHJlc01vZGVsXHJcbiAgVGFibGVhdVNlcnZlckRhdGFTb3VyY2VzUHJlc01vZGVsID0gJ3RhYmxlYXVTZXJ2ZXJEYXRhU291cmNlc1ByZXNtb2RlbCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1U2VydmVyRGF0YVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgVGFibGVhdVNlcnZlckRhdGFQcmVzTW9kZWxcclxuICBUYWJsZWF1U2VydmVyRGF0YVByZXNNb2RlbCA9ICd0YWJsZWF1U2VydmVyRGF0YVByZXNtb2RlbCcsXHJcblxyXG4gIC8vIERQSV9TdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXJQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFN0b3JlZFByb2NlZHVyZVBhcmFtZXRlclByZXNNb2RlbFxyXG4gIFN0b3JlZFByb2NlZHVyZVBhcmFtZXRlclByZXNNb2RlbCA9ICdzdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXInLFxyXG5cclxuICAvLyBEUElfU3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVyc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgU3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVyUHJlc01vZGVsW11cclxuICBTdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXJzUHJlc01vZGVsID0gJ3N0b3JlZFByb2NlZHVyZVBhcmFtZXRlcnMnLFxyXG5cclxuICAvLyBEUElfQ3VzdG9tU1FMSW5mbywgaGF2aW5nIHR5cGUgQ3VzdG9tU1FMSW5mb1ByZXNNb2RlbFxyXG4gIEN1c3RvbVNRTEluZm8gPSAnY3VzdG9tU3FsSW5mbycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uVGFibGVJbmZvLCBoYXZpbmcgdHlwZSBDb25uZWN0aW9uVGFibGVJbmZvUHJlc01vZGVsXHJcbiAgQ29ubmVjdGlvblRhYmxlSW5mbyA9ICdjb25uZWN0aW9uVGFibGVJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlSW5mb3MsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25UYWJsZUluZm9QcmVzTW9kZWxbXVxyXG4gIFRhYmxlSW5mb3MgPSAndGFibGVJbmZvcycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIENvbm5lY3Rpb25EZXNjcmlwdGlvblByZXNNb2RlbFxyXG4gIENvbm5lY3Rpb25EZXNjcmlwdGlvbiA9ICdjb25uZWN0aW9uRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyeSwgaGF2aW5nIHR5cGUgQ29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyeVByZXNNb2RlbFxyXG4gIENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnkgPSAnY29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyeScsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJpZXMsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnlQcmVzTW9kZWxbXVxyXG4gIENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcmllcyA9ICdjb25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJpZXMnLFxyXG5cclxuICAvLyBEUElfRGF0YVNvdXJjZVBhcnNlclZhbGlkYXRpb25Nb2RlLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlUGFyc2VyVmFsaWRhdGlvbk1vZGVcclxuICBEYXRhU291cmNlUGFyc2VyVmFsaWRhdGlvbk1vZGUgPSAnZGF0YVNvdXJjZVBhcnNlclZhbGlkYXRpb25Nb2RlJyxcclxuXHJcbiAgLy8gRFBJX09BdXRoQ3JlZGVudGlhbFR5cGVJbmZvLCBoYXZpbmcgdHlwZSBPQXV0aENyZWRlbnRpYWxUeXBlSW5mb1ByZXNNb2RlbFxyXG4gIE9BdXRoQ3JlZGVudGlhbFR5cGVJbmZvID0gJ29hdXRoQ3JlZGVudGlhbFR5cGVJbmZvJyxcclxuXHJcbiAgLy8gRFBJX09BdXRoQ3JlZGVudGlhbFR5cGVJbmZvcywgaGF2aW5nIHR5cGUgT0F1dGhDcmVkZW50aWFsVHlwZUluZm9QcmVzTW9kZWxbXVxyXG4gIE9BdXRoQ3JlZGVudGlhbFR5cGVJbmZvcyA9ICdvYXV0aENyZWRlbnRpYWxUeXBlSW5mb3MnLFxyXG5cclxuICAvLyBEUElfT0F1dGhTZXR0aW5ncywgaGF2aW5nIHR5cGUgT0F1dGhTZXR0aW5nc1ByZXNNb2RlbFxyXG4gIE9BdXRoU2V0dGluZ3MgPSAnb2F1dGhTZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9DcmVkZW50aWFsVHlwZVByb3BlcnRpZXNGbGFnLCBoYXZpbmcgdHlwZSBDcmVkZW50aWFsVHlwZVByb3BlcnRpZXNGbGFnXHJcbiAgQ3JlZGVudGlhbFR5cGVQcm9wZXJ0aWVzRmxhZyA9ICdjcmVkZW50aWFsVHlwZVByb3BlcnRpZXNGbGFnJyxcclxuXHJcbiAgLy8gRFBJX0NyZWRlbnRpYWxUeXBlUHJvcGVydGllc0ZsYWdzLCBoYXZpbmcgdHlwZSBDcmVkZW50aWFsVHlwZVByb3BlcnRpZXNGbGFnW11cclxuICBDcmVkZW50aWFsVHlwZVByb3BlcnRpZXNGbGFncyA9ICdjcmVkZW50aWFsVHlwZVByb3BlcnRpZXNGbGFncycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uVHlwZUVudW0sIGhhdmluZyB0eXBlIENvbm5lY3Rpb25UeXBlRW51bVxyXG4gIENvbm5lY3Rpb25UeXBlRW51bSA9ICdjb25uZWN0aW9uVHlwZUVudW0nLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdG9yVHlwZSwgaGF2aW5nIHR5cGUgQ29ubmVjdG9yVHlwZVxyXG4gIENvbm5lY3RvclR5cGUgPSAnY29ubmVjdG9yVHlwZScsXHJcblxyXG4gIC8vIERQSV9QZGZQYWdlUGlja2VyLCBoYXZpbmcgdHlwZSBQZGZQYWdlUGlja2VyUHJlc01vZGVsXHJcbiAgUGRmUGFnZVBpY2tlciA9ICdwZGZQYWdlUGlja2VyJyxcclxuXHJcbiAgLy8gRFBJX0FjdGl2YXRlTmV3LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWN0aXZhdGVOZXcgPSAnYWN0aXZhdGVOZXcnLFxyXG5cclxuICAvLyBEUElfQWRkQWN0aW9ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFkZEFjdGlvbnMgPSAnYWRkQWN0aW9ucycsXHJcblxyXG4gIC8vIERQSV9BZGRBc0Zsb2F0aW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkQXNGbG9hdGluZyA9ICdhZGRBc0Zsb2F0aW5nJyxcclxuXHJcbiAgLy8gRFBJX0FkZENvbG9yRGljdGlvbmFyeSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFkZENvbG9yRGljdGlvbmFyeSA9ICdhZGRDb2xvckRpY3Rpb25hcnknLFxyXG5cclxuICAvLyBEUElfQWRkRHJvcGxpbmVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkRHJvcGxpbmVzID0gJ2FkZERyb3BsaW5lcycsXHJcblxyXG4gIC8vIERQSV9BZGRIZWFkZXJzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkSGVhZGVycyA9ICdhZGRIZWFkZXJzJyxcclxuXHJcbiAgLy8gRFBJX0FkZEhpZ2hsaWdodGluZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFkZEhpZ2hsaWdodGluZyA9ICdhZGRIaWdobGlnaHRpbmcnLFxyXG5cclxuICAvLyBEUElfQWRkSW1hZ2VEaWN0aW9uYXJ5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkSW1hZ2VEaWN0aW9uYXJ5ID0gJ2FkZEltYWdlRGljdGlvbmFyeScsXHJcblxyXG4gIC8vIERQSV9BZGRNYXJrTGFiZWxzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkTWFya0xhYmVscyA9ICdhZGRNYXJrTGFiZWxzJyxcclxuXHJcbiAgLy8gRFBJX0FkZFBhZ2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkUGFnZXMgPSAnYWRkUGFnZXMnLFxyXG5cclxuICAvLyBEUElfQWRkU2VsZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWRkU2VsZWN0aW9uID0gJ2FkZFNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9BZGRUb0ZvbGRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFkZFRvRm9sZGVyID0gJ2FkZFRvRm9sZGVyJyxcclxuXHJcbiAgLy8gRFBJX0FkZFZpekRhdGEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBZGRWaXpEYXRhID0gJ2FkZFZpekRhdGEnLFxyXG5cclxuICAvLyBEUElfQWxlcnRDb25kaXRpb25NZXQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGVydENvbmRpdGlvbk1ldCA9ICdhbGVydENvbmRpdGlvbk1ldCcsXHJcblxyXG4gIC8vIERQSV9BbGxGaWVsZHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxGaWVsZHMgPSAnYWxsRmllbGRzJyxcclxuXHJcbiAgLy8gRFBJX0FsbE9uRW1wdHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxPbkVtcHR5ID0gJ2FsbE9uRW1wdHknLFxyXG5cclxuICAvLyBEUElfQWxsUGFnZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxQYWdlcyA9ICdpbmNsdWRlQWxsUGFnZXMnLFxyXG5cclxuICAvLyBEUElfQWxsb3dQcmV2aWV3U2l6ZUNoYW5nZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93UHJldmlld1NpemVDaGFuZ2UgPSAnYWxsb3dQcmV2aWV3U2l6ZUNoYW5nZScsXHJcblxyXG4gIC8vIERQSV9BbGxTZWxlY3RlZElzRWZmZWN0aXZlbHlSYW5nZVR5cGVBbGwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxTZWxlY3RlZElzRWZmZWN0aXZlbHlSYW5nZVR5cGVBbGwgPSAnYWxsU2VsZWN0ZWRJc0VmZmVjdGl2ZWx5UmFuZ2VUeXBlQWxsJyxcclxuXHJcbiAgLy8gRFBJX0FsbFN0b3J5UG9pbnRzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsU3RvcnlQb2ludHMgPSAnYWxsU3Rvcnlwb2ludHMnLFxyXG5cclxuICAvLyBEUElfQWxsb3dBbGxSYW5nZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93QWxsUmFuZ2UgPSAnYWxsb3dBbGxSYW5nZScsXHJcblxyXG4gIC8vIERQSV9BbGxvd0NyZWF0aW5nTmV3UGFyYW1ldGVycywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93Q3JlYXRpbmdOZXdQYXJhbWV0ZXJzID0gJ2FsbG93Q3JlYXRpbmdOZXdQYXJhbWV0ZXJzJyxcclxuXHJcbiAgLy8gRFBJX0FsbG93Q29udGludW91c0RhdGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd0NvbnRpbnVvdXNEYXRlID0gJ2FsbG93Q29udGludW91c0RhdGUnLFxyXG5cclxuICAvLyBEUElfQWxsb3dEdXBsaWNhdGVGaWVsZERyb3BPbkZpbHRlclNoZWxmLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dEdXBsaWNhdGVGaWVsZERyb3BPbkZpbHRlclNoZWxmID0gJ2FsbG93RHVwbGljYXRlRmllbGREcm9wT25GaWx0ZXJTaGVsZicsXHJcblxyXG4gIC8vIERQSV9BbGxvd0ZpbHRlclByZXNldCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93RmlsdGVyUHJlc2V0ID0gJ2FsbG93RmlsdGVyUHJlc2V0JyxcclxuXHJcbiAgLy8gRFBJX0FsbG93SG92ZXJBY3Rpb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dIb3ZlckFjdGlvbnMgPSAnYWxsb3dIb3ZlckFjdGlvbnMnLFxyXG5cclxuICAvLyBEUElfQWxsb3dIeXBoZW5hdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93SHlwaGVuYXRpb24gPSAnYWxsb3dIeXBoZW5hdGlvbicsXHJcblxyXG4gIC8vIERQSV9BbGxvd0pvaW5PbkNhbGMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd0pvaW5PbkNhbGMgPSAnYWxsb3dKb2luT25DYWxjJyxcclxuXHJcbiAgLy8gRFBJX0FsbG93TWFudWFsUmFuZ2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd01hbnVhbFJhbmdlID0gJ2FsbG93TWFudWFsUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfQWxsb3dNYXBwaW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dNYXBwaW5nID0gJ2FsbG93TWFwcGluZycsXHJcblxyXG4gIC8vIERQSV9BbGxvd011bHRpU2VsZWN0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dNdWx0aVNlbGVjdCA9ICdhbGxvd011bHRpU2VsZWN0JyxcclxuXHJcbiAgLy8gRFBJX0FsbG93TnVsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93TnVsbCA9ICdhbGxvd051bGwnLFxyXG5cclxuICAvLyBEUElfQWxsb3dQYW5ab29tLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dQYW5ab29tID0gJ2FsbG93UGFuWm9vbScsXHJcblxyXG4gIC8vIERQSV9BbGxvd1BhdHRlcm5CYXNlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93UGF0dGVybkJhc2VkID0gJ2FsbG93UGF0dGVybkJhc2VkVW5pb24nLFxyXG5cclxuICAvLyBEUElfQWxsb3dQcm9tcHRUZXh0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dQcm9tcHRUZXh0ID0gJ2FsbG93UHJvbXB0VGV4dCcsXHJcblxyXG4gIC8vIERQSV9BbGxvd1NhdmVEYXRhU291cmNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dTYXZlRGF0YVNvdXJjZSA9ICdhbGxvd1NhdmVEYXRhU291cmNlJyxcclxuXHJcbiAgLy8gRFBJX0FsbG93V2hvbGVEYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dXaG9sZURhdGUgPSAnYWxsb3dXaG9sZURhdGUnLFxyXG5cclxuICAvLyBEUElfQWxsb3dXb3JrLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWxsb3dXb3JrID0gJ2FsbG93V29yaycsXHJcblxyXG4gIC8vIERQSV9BbGxvd1dyYXAsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxvd1dyYXAgPSAnYWxsb3dXcmFwJyxcclxuXHJcbiAgLy8gRFBJX0FwcElzMzJCaXQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBcHBJczMyQml0ID0gJ2FwcElzMzJCaXQnLFxyXG5cclxuICAvLyBEUElfQXBwSXM2NEJpdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFwcElzNjRCaXQgPSAnYXBwSXM2NEJpdCcsXHJcblxyXG4gIC8vIERQSV9BcHBJc0JldGEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBcHBJc0JldGEgPSAnYXBwSXNCZXRhJyxcclxuXHJcbiAgLy8gRFBJX0FwcElzT0VNLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXBwSXNPRU0gPSAnYXBwSXNPZW0nLFxyXG5cclxuICAvLyBEUElfQXBwZW5kVGRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXBwZW5kVGRlID0gJ2FwcGVuZFRkZScsXHJcblxyXG4gIC8vIERQSV9BcHBseUNvbG9ycywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFwcGx5Q29sb3JzID0gJ2FwcGx5Q29sb3JzJyxcclxuXHJcbiAgLy8gRFBJX0FwcGx5TmV3U2VsZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXBwbHlOZXdTZWxlY3Rpb24gPSAnYXBwbHlOZXdTZWxlY3Rpb24nLFxyXG5cclxuICAvLyBEUElfQXJlQ29uZmlkZW5jZUJhbmRzVmFsaWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBcmVDb25maWRlbmNlQmFuZHNWYWxpZCA9ICdhcmVDb25maWRlbmNlQmFuZHNWYWxpZCcsXHJcblxyXG4gIC8vIERQSV9BcmVEYXRhU291cmNlRmlsdGVyc1Zpc2libGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBcmVEYXRhU291cmNlRmlsdGVyc1Zpc2libGUgPSAnYXJlRGF0YVNvdXJjZUZpbHRlcnNWaXNpYmxlJyxcclxuXHJcbiAgLy8gRFBJX0FyZUV4dHJhY3RGaWx0ZXJzRW5hYmxlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFyZUV4dHJhY3RGaWx0ZXJzRW5hYmxlZCA9ICdhcmVFeHRyYWN0RmlsdGVyc0VuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfQXJlTnVsbHNJbmNsdWRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFyZU51bGxzSW5jbHVkZWQgPSAnYXJlTnVsbHNJbmNsdWRlZCcsXHJcblxyXG4gIC8vIERQSV9BcmVUb3RhbHNVc2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXJlVG90YWxzVXNlZCA9ICdhcmVUb3RhbHNVc2VkJyxcclxuXHJcbiAgLy8gRFBJX0F0VGhlTGV2ZWxGaWVsZElzSW52YWxpZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEF0VGhlTGV2ZWxGaWVsZElzSW52YWxpZCA9ICdhdFRoZUxldmVsRmllbGRJc0ludmFsaWQnLFxyXG5cclxuICAvLyBEUElfQXV0b1VSTCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEF1dG9VUkwgPSAnYXV0b1VybCcsXHJcblxyXG4gIC8vIERQSV9BdXRvVXBkYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXV0b1VwZGF0ZSA9ICdhdXRvVXBkYXRlJyxcclxuXHJcbiAgLy8gRFBJX0JhY2tpbmdTaGVldElzRGFzaGJvYXJkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQmFja2luZ1NoZWV0SXNEYXNoYm9hcmQgPSAnaXNCYWNraW5nU2hlZXREYXNoYm9hcmQnLFxyXG5cclxuICAvLyBEUElfQmVnaW5EYXRhU291cmNlUHJlc01vZGVsVXBkYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQmVnaW5EYXRhU291cmNlUHJlc01vZGVsVXBkYXRlID0gJ2JlZ2luRGF0YVNvdXJjZVByZXNNb2RlbFVwZGF0ZScsXHJcblxyXG4gIC8vIERQSV9BZ2dyZWdhdGVEcmlsbFVwLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQWdncmVnYXRlRHJpbGxVcCA9ICdib29sQWdncmVnYXRlRHJpbGxVcCcsXHJcblxyXG4gIC8vIERQSV9Cb3hwbG90TWFya0V4Y2x1c2lvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEJveHBsb3RNYXJrRXhjbHVzaW9uID0gJ2JveHBsb3RNYXJrRXhjbHVzaW9uJyxcclxuXHJcbiAgLy8gRFBJX0JyZWFrUGFnZU9uUGFuZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEJyZWFrUGFnZU9uUGFuZSA9ICdicmVha1BhZ2VPblBhbmUnLFxyXG5cclxuICAvLyBEUElfQnJ1c2hMZWdlbmRzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQnJ1c2hMZWdlbmRzID0gJ2JydXNoTGVnZW5kcycsXHJcblxyXG4gIC8vIERQSV9DYWNoZVByZXNNb2RlbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYWNoZVByZXNNb2RlbHMgPSAnY2FjaGVQcmVzTW9kZWxzJyxcclxuXHJcbiAgLy8gRFBJX0NhbkFkZENvbm5lY3Rpb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuQWRkQ29ubmVjdGlvbnMgPSAnY2FuQWRkQ29ubmVjdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU29ydFBpbGxDYW5CZURyYWdnZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTb3J0UGlsbENhbkJlRHJhZ2dlZCA9ICdzb3J0UGlsbENhbkJlRHJhZ2dlZCcsXHJcblxyXG4gIC8vIERQSV9DYW5BZGRUYWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhbkFkZFRhYmxlID0gJ2NhbkFkZFRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0NhbkFkZFRvRHJpbGxQYXRoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuQWRkVG9EcmlsbFBhdGggPSAnY2FuQWRkVG9EcmlsbFBhdGgnLFxyXG5cclxuICAvLyBEUElfQ2FuQW5hbHl6ZURhdGEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5BbmFseXplRGF0YSA9ICdjYW5BbmFseXplRGF0YScsXHJcblxyXG4gIC8vIERQSV9DYW5CZUFkZGVkVG9TY2hlbWFWaWV3ZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5CZUFkZGVkVG9TY2hlbWFWaWV3ZXIgPSAnY2FuQmVBZGRlZFRvU2NoZW1hVmlld2VyJyxcclxuXHJcbiAgLy8gRFBJX0NhbkNoYW5nZURhdGFUeXBlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuQ2hhbmdlRGF0YVR5cGUgPSAnY2FuQ2hhbmdlRGF0YVR5cGUnLFxyXG5cclxuICAvLyBEUElfQ2FuQ2hhbmdlU2VtYW50aWNSb2xlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuQ2hhbmdlU2VtYW50aWNSb2xlID0gJ2NhbkNoYW5nZVNlbWFudGljUm9sZScsXHJcblxyXG4gIC8vIERQSV9DYW5EZXJpdmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5EZXJpdmUgPSAnY2FuRGVyaXZlJyxcclxuXHJcbiAgLy8gRFBJX0NhbkRyb3AsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5Ecm9wID0gJ2NhbkRyb3AnLFxyXG5cclxuICAvLyBEUElfQ2FuRWRpdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhbkVkaXQgPSAnY2FuRWRpdCcsXHJcblxyXG4gIC8vIERQSV9DYW5FZGl0TGVnZW5kQ29sb3IsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5FZGl0TGVnZW5kQ29sb3IgPSAnY2FuRWRpdExlZ2VuZENvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0NhbkVuYWJsZUNlbnRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhbkVuYWJsZUNlbnRlciA9ICdjYW5FbmFibGVDZW50ZXInLFxyXG5cclxuICAvLyBEUElfQ2FuU2hvd0FkdmFuY2VkU2V0dGluZ3MsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5TaG93QWR2YW5jZWRTZXR0aW5ncyA9ICdjYW5TaG93QWR2YW5jZWRTZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9DYW5FbmFibGVGaWx0ZXJTdGF0ZUJ1dHRvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhbkVuYWJsZUZpbHRlclN0YXRlQnV0dG9uID0gJ2NhbkVuYWJsZUZpbHRlclN0YXRlQnV0dG9uJyxcclxuXHJcbiAgLy8gRFBJX0NhbkZsb2F0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuRmxvYXQgPSAnY2FuRmxvYXQnLFxyXG5cclxuICAvLyBEUElfQ2FuSGF2ZVRpdGxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuSGF2ZVRpdGxlID0gJ2NhbkhhdmVUaXRsZScsXHJcblxyXG4gIC8vIERQSV9DYW5JZ25vcmVVcGRhdGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5JZ25vcmVVcGRhdGUgPSAnY2FuSWdub3JlVXBkYXRlJyxcclxuXHJcbiAgLy8gRFBJX0NhbkxvZ1RyYW5zZm9ybUV4cGxhbmF0b3J5QXhpcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhbkxvZ1RyYW5zZm9ybUV4cGxhbmF0b3J5QXhpcyA9ICdjYW5Mb2dUcmFuc2Zvcm1FeHBsYW5hdG9yeUF4aXMnLFxyXG5cclxuICAvLyBEUElfQ2FuTmF2aWdhdGVCYWNrLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuTmF2aWdhdGVCYWNrID0gJ2Nhbk5hdmlnYXRlQmFjaycsXHJcblxyXG4gIC8vIERQSV9DYW5OYXZpZ2F0ZUZvcndhcmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5OYXZpZ2F0ZUZvcndhcmQgPSAnY2FuTmF2aWdhdGVGb3J3YXJkJyxcclxuXHJcbiAgLy8gRFBJX0NhblNjcm9sbFgsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5TY3JvbGxYID0gJ2NhblNjcm9sbFgnLFxyXG5cclxuICAvLyBEUElfQ2FuU2Nyb2xsWSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhblNjcm9sbFkgPSAnY2FuU2Nyb2xsWScsXHJcblxyXG4gIC8vIERQSV9DYW5TZXREb21haW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5TZXREb21haW4gPSAnY2FuU2V0RG9tYWluJyxcclxuXHJcbiAgLy8gRFBJX0NhblNldE1hcFVuaXQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5TZXRNYXBVbml0ID0gJ2NhblNldE1hcFVuaXQnLFxyXG5cclxuICAvLyBEUElfQ2FuU2hvd0FwcGx5QnV0dG9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuU2hvd0FwcGx5QnV0dG9uID0gJ2NhblNob3dBcHBseUJ1dHRvbicsXHJcblxyXG4gIC8vIERQSV9DYW5TaG93RmlsdGVyU3RhdGVCdXR0b24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5TaG93RmlsdGVyU3RhdGVCdXR0b24gPSAnY2FuU2hvd0ZpbHRlclN0YXRlQnV0dG9uJyxcclxuXHJcbiAgLy8gRFBJX0NhblNob3dNb3JlRmV3ZXJCdXR0b24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5TaG93TW9yZUZld2VyQnV0dG9uID0gJ2NhblNob3dNb3JlRmV3ZXJCdXR0b24nLFxyXG5cclxuICAvLyBEUElfQ2FuU2hvd1N5bmNDbGllbnRPcHRpb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuU2hvd1N5bmNDbGllbnRPcHRpb25zID0gJ2NhblNob3dTeW5jQ2xpZW50T3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9DYW5Tb3J0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuU29ydCA9ICdjYW5Tb3J0JyxcclxuXHJcbiAgLy8gRFBJX0NhblNvcnRPcmRpbmFsbHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5Tb3J0T3JkaW5hbGx5ID0gJ2NhblNvcnRPcmRpbmFsJyxcclxuXHJcbiAgLy8gRFBJX0NhblRvZ2dsZUF1dG9tYXRpY0RyaWxsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuVG9nZ2xlQXV0b21hdGljRHJpbGwgPSAnY2FuVG9nZ2xlQXV0b21hdGljRHJpbGwnLFxyXG5cclxuICAvLyBEUElfQ2FuVG9nZ2xlR2VvZ3JhcGhpY1NlYXJjaCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhblRvZ2dsZUdlb2dyYXBoaWNTZWFyY2ggPSAnY2FuVG9nZ2xlR2VvZ3JhcGhpY1NlYXJjaCcsXHJcblxyXG4gIC8vIERQSV9DYW5Ub2dnbGVNYXBTY2FsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhblRvZ2dsZU1hcFNjYWxlID0gJ2NhblRvZ2dsZU1hcFNjYWxlJyxcclxuXHJcbiAgLy8gRFBJX0NhblVzZUZ1bGxDb2xvclJhbmdlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuVXNlRnVsbENvbG9yUmFuZ2UgPSAnY2FuVXNlRnVsbENvbG9yUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfQ2FuVXNlTXVsdGlwbGVIaWVyYXJjaGllcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhblVzZU11bHRpcGxlSGllcmFyY2hpZXMgPSAnY2FuVXNlTXVsdGlwbGVIaWVyYXJjaGllcycsXHJcblxyXG4gIC8vIERQSV9DZW50ZXJIb3Jpem9udGFsbHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBDZW50ZXJIb3Jpem9udGFsbHkgPSAnY2VudGVySG9yaXpvbnRhbGx5JyxcclxuXHJcbiAgLy8gRFBJX0NlbnRlclZlcnRpY2FsbHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBDZW50ZXJWZXJ0aWNhbGx5ID0gJ2NlbnRlclZlcnRpY2FsbHknLFxyXG5cclxuICAvLyBEUElfQ2hhbmdlQWxsRmllbGRzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2hhbmdlQWxsRmllbGRzID0gJ2NoYW5nZUFsbEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9DaGFuZ2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2hhbmdlZCA9ICdjaGFuZ2VkJyxcclxuXHJcbiAgLy8gRFBJX0NsZWFyQnJ1c2hpbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDbGVhckJydXNoaW5nID0gJ2NsZWFyQnJ1c2hpbmcnLFxyXG5cclxuICAvLyBEUElfQ2xlYXJTb3J0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2xlYXJTb3J0ID0gJ2NsZWFyU29ydCcsXHJcblxyXG4gIC8vIERQSV9DbGVhclZpZXcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDbGVhclZpZXcgPSAnY2xlYXJWaWV3JyxcclxuXHJcbiAgLy8gRFBJX0NvbGxhcHNlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENvbGxhcHNlZCA9ICdjb2xsYXBzZWQnLFxyXG5cclxuICAvLyBEUElfQ29uc29saWRhdGVJbkNvbW1pdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENvbnNvbGlkYXRlSW5Db21taXQgPSAnY29uc29saWRhdGVJbkNvbW1pdCcsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyRW5hYmxlU2NhbGVkQ2hlY2tib3gsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDbHVzdGVyRW5hYmxlU2NhbGVkQ2hlY2tib3ggPSAnY2x1c3RlckVuYWJsZVNjYWxlZENoZWNrYm94JyxcclxuXHJcbiAgLy8gRFBJX0NvbW1pdFBpbGxGaW5pc2hlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENvbW1pdFBpbGxGaW5pc2hlZCA9ICdjb21taXRQaWxsRmluaXNoZWQnLFxyXG5cclxuICAvLyBEUElfQ29tcHJlc3NBcnJheXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb21wcmVzc0FycmF5cyA9ICdjb21wcmVzc0FycmF5cycsXHJcblxyXG4gIC8vIERQSV9Db21wdXRlQ29tcG91bmRlZFJhdGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb21wdXRlQ29tcG91bmRlZFJhdGUgPSAnY29tcHV0ZUNvbXBvdW5kZWRSYXRlJyxcclxuXHJcbiAgLy8gRFBJX0NvbmZpZGVuY2VJbnRlcnZhbEFsbG93ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb25maWRlbmNlSW50ZXJ2YWxBbGxvd2VkID0gJ2NvbmZpZGVuY2VJbnRlcnZhbEFsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfQ29uZmlnSXNEZXNrdG9wU3RhbmRhcmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb25maWdJc0Rlc2t0b3BTdGFuZGFyZCA9ICdjb25maWdJc0Rlc2t0b3BTdGFuZGFyZCcsXHJcblxyXG4gIC8vIERQSV9Db25maWdJc0ludGVyYWN0b3IsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb25maWdJc0ludGVyYWN0b3IgPSAnY29uZmlnSXNJbnRlcmFjdG9yJyxcclxuXHJcbiAgLy8gRFBJX0NvbmZpZ0lzUHVibGljLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ29uZmlnSXNQdWJsaWMgPSAnY29uZmlnSXNQdWJsaWMnLFxyXG5cclxuICAvLyBEUElfQ29uZmlnSXNSZWFkZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb25maWdJc1JlYWRlciA9ICdjb25maWdJc1JlYWRlcicsXHJcblxyXG4gIC8vIERQSV9Db250YWluc1F1YW50LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ29udGFpbnNRdWFudCA9ICdjb250YWluc1F1YW50JyxcclxuXHJcbiAgLy8gRFBJX0NvbnRhaW5zVmFsaWREYXRhc291cmNlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENvbnRhaW5zVmFsaWREYXRhc291cmNlcyA9ICdjb250YWluc1ZhbGlkRGF0YXNvdXJjZXMnLFxyXG5cclxuICAvLyBEUElfQ29udHJvbGxlck1pc3NpbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDb250cm9sbGVyTWlzc2luZyA9ICdjb250cm9sbGVyTWlzc2luZycsXHJcblxyXG4gIC8vIERQSV9DcmVhdGVFeHRyYWN0Rm9yUHVibGlzaCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENyZWF0ZUV4dHJhY3RGb3JQdWJsaXNoID0gJ2NyZWF0ZUV4dHJhY3RGb3JQdWJsaXNoJyxcclxuXHJcbiAgLy8gRFBJX0Nyb3NzVGFiLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ3Jvc3NUYWIgPSAnY3Jvc3NUYWInLFxyXG5cclxuICAvLyBEUElfQ3VsbExhYmVscywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEN1bGxMYWJlbHMgPSAnY3VsbExhYmVscycsXHJcblxyXG4gIC8vIERQSV9DdXJyZW50Q3VzdFZpZXdJZEZsYWcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDdXJyZW50Q3VzdFZpZXdJZEZsYWcgPSAnaXNDdXJyZW50Q3VzdFZpZXdJZFZhbGlkJyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZEVuYWJsZVNuYXAsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEYXNoYm9hcmRFbmFibGVTbmFwID0gJ2Rhc2hib2FyZEVuYWJsZVNuYXAnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkU2hvd0dyaWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEYXNoYm9hcmRTaG93R3JpZCA9ICdkYXNoYm9hcmRTaG93R3JpZCcsXHJcblxyXG4gIC8vIERQSV9EYXRhR3JpZFNvcnRPcmRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERhdGFHcmlkU29ydE9yZGVyID0gJ2RhdGFncmlkU29ydE9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX0RlbGV0ZUV4dHJhY3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEZWxldGVFeHRyYWN0ID0gJ2RlbGV0ZUV4dHJhY3QnLFxyXG5cclxuICAvLyBEUElfRGVsZXRlT25seVNwZWNpZmllZFNlbGVjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERlbGV0ZU9ubHlTcGVjaWZpZWRTZWxlY3Rpb24gPSAnZGVsZXRlT25seVNwZWNpZmllZFNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9EZWxldGVPcnBoYW5zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRGVsZXRlT3JwaGFucyA9ICdkZWxldGVPcnBoYW5zJyxcclxuXHJcbiAgLy8gRFBJX0RpbWVuc2lvbklzRWZmZWN0aXZlbHlFbXB0eSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERpbWVuc2lvbklzRWZmZWN0aXZlbHlFbXB0eSA9ICdkaW1lbnNpb25Jc0VmZmVjdGl2ZWx5RW1wdHknLFxyXG5cclxuICAvLyBEUElfRGlzYWJsZWREYXRhQ29ubmVjdGlvbkNsYXNzTmFtZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEaXNhYmxlZERhdGFDb25uZWN0aW9uQ2xhc3NOYW1lcyA9ICdkaXNhYmxlZERhdGFDb25uZWN0aW9uQ2xhc3NOYW1lcycsXHJcblxyXG4gIC8vIERQSV9EaXNhYmxlUHJlc01vZGVsSGFuZGxlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERpc2FibGVQcmVzTW9kZWxIYW5kbGVyID0gJ2Rpc2FibGVQcmVzTW9kZWxIYW5kbGVyJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3BsYXlEYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRGlzcGxheURhdGUgPSAnZGlzcGxheURhdGUnLFxyXG5cclxuICAvLyBEUElfRGlzcGxheVRpbWUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEaXNwbGF5VGltZSA9ICdkaXNwbGF5VGltZScsXHJcblxyXG4gIC8vIERQSV9Eb0Ryb3BVSUFjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERvRHJvcFVJQWN0aW9uID0gJ2RvRHJvcFVpQWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RvTWVyZ2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEb01lcmdlID0gJ2RvTWVyZ2UnLFxyXG5cclxuICAvLyBEUElfRG9QcmVEcm9wVUlBY3Rpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBEb1ByZURyb3BVSUFjdGlvbiA9ICdkb1ByZURyb3BVaUFjdGlvbicsXHJcblxyXG4gIC8vIERQSV9Eb1F1ZXJ5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRG9RdWVyeSA9ICdkb1F1ZXJ5JyxcclxuXHJcbiAgLy8gRFBJX0RyYWdIb3J6LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRHJhZ0hvcnogPSAnZHJhZ0hvcnonLFxyXG5cclxuICAvLyBEUElfRHJpbGxEb3duLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRHJpbGxEb3duID0gJ2RyaWxsRG93bicsXHJcblxyXG4gIC8vIERQSV9Ecm9wVG9YQXhpcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERyb3BUb1hBeGlzID0gJ2Ryb3BUb1hBeGlzJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3BUb1lBeGlzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRHJvcFRvWUF4aXMgPSAnZHJvcFRvWUF4aXMnLFxyXG5cclxuICAvLyBEUElfRHJvcFVubmFtZWRGaWVsZHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBEcm9wVW5uYW1lZEZpZWxkcyA9ICdkcm9wVW5uYW1lZEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9FZGl0RXhpc3RpbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFZGl0RXhpc3RpbmcgPSAnZWRpdEV4aXN0aW5nJyxcclxuXHJcbiAgLy8gRFBJX0VkaXRpbmdDb25uZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRWRpdGluZ0Nvbm5lY3Rpb24gPSAnZWRpdGluZ0Nvbm5lY3Rpb24nLFxyXG5cclxuICAvLyBEUElfRW1iZWRDcmVkZW50aWFscywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVtYmVkQ3JlZGVudGlhbHMgPSAnZW1iZWRDcmVkZW50aWFscycsXHJcblxyXG4gIC8vIERQSV9FbWJlZE9BdXRoQ3JlZGVudGlhbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVtYmVkT0F1dGhDcmVkZW50aWFsID0gJ2VtYmVkT2F1dGhDcmVkZW50aWFscycsXHJcblxyXG4gIC8vIERQSV9FbXB0eUhpZ2hsaWdodEZvZ0FsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVtcHR5SGlnaGxpZ2h0Rm9nQWxsID0gJ2VtcHR5SGlnaGxpZ2h0Rm9nQWxsJyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZUFscGhhYmV0aWNTb3J0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRW5hYmxlQWxwaGFiZXRpY1NvcnQgPSAnZW5hYmxlQWxwaGFiZXRpY1NvcnQnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlQW5jaG9yLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRW5hYmxlQW5jaG9yID0gJ2VuYWJsZUFuY2hvcicsXHJcblxyXG4gIC8vIERQSV9FbmFibGVBdXRvbWF0aWNEcmlsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZUF1dG9tYXRpY0RyaWxsID0gJ2VuYWJsZUF1dG9tYXRpY0RyaWxsJyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZUNvbmZpZGVuY2VCYW5kcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZUNvbmZpZGVuY2VCYW5kcyA9ICdlbmFibGVDb25maWRlbmNlQmFuZHMnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlRGF0YU9yZGVyU29ydCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZURhdGFPcmRlclNvcnQgPSAnZW5hYmxlRGF0YU9yZGVyU29ydCcsXHJcblxyXG4gIC8vIERQSV9FbmFibGVGaWVsZFNvcnQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFbmFibGVGaWVsZFNvcnQgPSAnZW5hYmxlRmllbGRTb3J0JyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZUluc3RhbnRBbmFseXRpY3MsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFbmFibGVJbnN0YW50QW5hbHl0aWNzID0gJ2VuYWJsZUluc3RhbnRBbmFseXRpY3MnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlTGluZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFbmFibGVMaW5lcyA9ICdlbmFibGVMaW5lcycsXHJcblxyXG4gIC8vIERQSV9FbmFibGVNYW51YWxTb3J0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRW5hYmxlTWFudWFsU29ydCA9ICdlbmFibGVNYW51YWxTb3J0JyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZU1hcmtzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRW5hYmxlTWFya3MgPSAnZW5hYmxlTWFya3MnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlTXVsdGlwbGVTZWxlY3Rpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBFbmFibGVNdWx0aXBsZVNlbGVjdGlvbiA9ICdlbmFibGVNdWx0aXBsZVNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9FbmFibGVQcmVmZXRjaGluZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZVByZWZldGNoaW5nID0gJ2VuYWJsZVByZWZldGNoaW5nJyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZVRhYmxlQ2FsY0RlbnNpZmljYXRpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBFbmFibGVUYWJsZUNhbGNEZW5zaWZpY2F0aW9uID0gJ2VuYWJsZVRhYmxlQ2FsY0RlbnNpZmljYXRpb24nLFxyXG5cclxuICAvLyBEUElfRW5hYmxlVG9vbHRpcHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFbmFibGVUb29sdGlwcyA9ICdlbmFibGVUb29sdGlwcycsXHJcblxyXG4gIC8vIERQSV9FbmREYXRhU291cmNlUHJlc01vZGVsVXBkYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRW5kRGF0YVNvdXJjZVByZXNNb2RlbFVwZGF0ZSA9ICdlbmREYXRhU291cmNlUHJlc01vZGVsVXBkYXRlJyxcclxuXHJcbiAgLy8gRFBJX0VzdGltYXRlTnVsbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFc3RpbWF0ZU51bGxzID0gJ2VzdGltYXRlTnVsbHMnLFxyXG5cclxuICAvLyBEUElfRXhjbHVkZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEV4Y2x1ZGUgPSAnZXhjbHVkZScsXHJcblxyXG4gIC8vIERQSV9FeGNsdWRlQ29sb3IsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFeGNsdWRlQ29sb3IgPSAnZXhjbHVkZUNvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0V4Y2x1ZGVDdWJlRGVub3JtLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRXhjbHVkZUN1YmVEZW5vcm0gPSAnZXhjbHVkZUN1YmVEZW5vcm0nLFxyXG5cclxuICAvLyBEUElfRXhjbHVkZUludGVyY2VwdEVuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFeGNsdWRlSW50ZXJjZXB0RW5hYmxlZCA9ICdleGNsdWRlSW50ZXJjZXB0RW5hYmxlZCcsXHJcblxyXG4gIC8vIERQSV9FeGNsdWRlTG9jYWxGdW5jdGlvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFeGNsdWRlTG9jYWxGdW5jdGlvbnMgPSAnZXhjbHVkZUxvY2FsRnVuY3Rpb25zJyxcclxuXHJcbiAgLy8gRFBJX0V4cG9ydERhc2hib2FyZEltYWdlRnJvbVNoZWV0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRXhwb3J0RGFzaGJvYXJkSW1hZ2VGcm9tU2hlZXQgPSAnZXhwb3J0SW1hZ2VTaGVldEFzRGFzaGJvYXJkJyxcclxuXHJcbiAgLy8gRFBJX0V4dFN2Y0NvbmZpZ0lzQXV0aEVuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBFeHRTdmNDb25maWdJc0F1dGhFbmFibGVkID0gJ2V4dFN2Y0NvbmZpZ0lzQXV0aEVuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdEZ1bGxSZWZyZXNoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRXh0cmFjdEZ1bGxSZWZyZXNoID0gJ2V4dHJhY3RGdWxsUmVmcmVzaCcsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0TmVlZHNSZWZyZXNoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRXh0cmFjdE5lZWRzUmVmcmVzaCA9ICdleHRyYWN0TmVlZHNSZWZyZXNoJyxcclxuXHJcbiAgLy8gRFBJX0V4dHJhY3RQZW5kaW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRXh0cmFjdFBlbmRpbmcgPSAnZXh0cmFjdFBlbmRpbmcnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdFNlbGVjdGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRXh0cmFjdFNlbGVjdGVkID0gJ2V4dHJhY3RTZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9GZWRlcmF0YWJsZU9ubHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBGZWRlcmF0YWJsZU9ubHkgPSAnZmVkZXJhdGFibGVPbmx5JyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkU29ydE9yZGVyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRmllbGRTb3J0T3JkZXIgPSAnZmllbGRTb3J0T3JkZXInLFxyXG5cclxuICAvLyBEUElfRmllbGRTdXBwb3J0c0NvbnRhaW5zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRmllbGRTdXBwb3J0c0NvbnRhaW5zID0gJ2ZpZWxkU3VwcG9ydHNDb250YWlucycsXHJcblxyXG4gIC8vIERQSV9GaWVsZFN1cHBvcnRzRW5kc1dpdGgsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGaWVsZFN1cHBvcnRzRW5kc1dpdGggPSAnZmllbGRTdXBwb3J0c0VuZHNXaXRoJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkU3VwcG9ydHNTdGFydHNXaXRoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRmllbGRTdXBwb3J0c1N0YXJ0c1dpdGggPSAnZmllbGRTdXBwb3J0c1N0YXJ0c1dpdGgnLFxyXG5cclxuICAvLyBEUElfRmlsbEFib3ZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRmlsbEFib3ZlID0gJ2ZpbGxBYm92ZScsXHJcblxyXG4gIC8vIERQSV9GaWxsQmVsb3csIGhhdmluZyB0eXBlIGJvb2xcclxuICBGaWxsQmVsb3cgPSAnZmlsbEJlbG93JyxcclxuXHJcbiAgLy8gRFBJX0ZpbGxXaXRoWmVyb2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRmlsbFdpdGhaZXJvZXMgPSAnZmlsbFplcm9lcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJJc05hbWVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRmlsdGVySXNOYW1lZCA9ICdmaWx0ZXJJc05hbWVkJyxcclxuXHJcbiAgLy8gRFBJX0ZvY3VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRm9jdXMgPSAnZm9jdXMnLFxyXG5cclxuICAvLyBEUElfRm9ySW50ZXJuYWxVc2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JJbnRlcm5hbFVzZSA9ICdpbnRlcm5hbFVzZScsXHJcblxyXG4gIC8vIERQSV9Gb3JjZUJyb3dzZXJSZW5kZXJpbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZUJyb3dzZXJSZW5kZXJpbmcgPSAnZm9yY2VCcm93c2VyUmVuZGVyaW5nJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmNlQ2FjaGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZUNhY2hlID0gJ2ZvcmNlQ2FjaGUnLFxyXG5cclxuICAvLyBEUElfRm9yY2VDb2xvckZyb21BcHAsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZUNvbG9yRnJvbUFwcCA9ICdmb3JjZUNvbG9yRnJvbUFwcCcsXHJcblxyXG4gIC8vIERQSV9Gb3JjZUNvbm5lY3Rpb25BdHRlbXB0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRm9yY2VDb25uZWN0aW9uQXR0ZW1wdCA9ICdmb3JjZUNvbm5lY3Rpb25BdHRlbXB0JyxcclxuXHJcbiAgLy8gRFBJX0ZvcmNlQ29uc29saWRhdGVJbkNvbW1pdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEZvcmNlQ29uc29saWRhdGVJbkNvbW1pdCA9ICdmb3JjZUNvbnNvbGlkYXRlSW5Db21taXQnLFxyXG5cclxuICAvLyBEUElfRm9yY2VFeHRyYWN0UmVmcmVzaCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEZvcmNlRXh0cmFjdFJlZnJlc2ggPSAnZXh0cmFjdEZvcmNlUmVmcmVzaCcsXHJcblxyXG4gIC8vIERQSV9Gb3JjZUludGVyY2VwdFplcm8sIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZUludGVyY2VwdFplcm8gPSAnZm9yY2VJbnRlcmNlcHRaZXJvJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmNlT2xkQ29ubmVjdEV4cGVyaWVuY2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZU9sZENvbm5lY3RFeHBlcmllbmNlID0gJ2ZvcmNlT2xkQ29ubmVjdEV4cGVyaWVuY2UnLFxyXG5cclxuICAvLyBEUElfRm9yY2VSZWxhdGl2ZURhdGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZVJlbGF0aXZlRGF0ZSA9ICdmb3JjZVJlbGF0aXZlRGF0ZScsXHJcblxyXG4gIC8vIERQSV9Gb3JjZVRvZ2dsZUhpZ2hsaWdodFN0YXRlT24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JjZVRvZ2dsZUhpZ2hsaWdodFN0YXRlT24gPSAnZm9yY2VIaWdobGlnaHRPbicsXHJcblxyXG4gIC8vIERQSV9Gb3JjZVVzZXJUb0Nob29zZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEZvcmNlVXNlclRvQ2hvb3NlID0gJ2ZvcmNlVXNlclRvQ2hvb3NlJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmNlV2hvbGVEYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRm9yY2VXaG9sZURhdGUgPSAnZm9yY2VXaG9sZURhdGUnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RTZWxlY3RlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEZvcmVjYXN0U2VsZWN0ZWQgPSAnZm9yZWNhc3RTZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdFVzZUF1dG9BZ2csIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JlY2FzdFVzZUF1dG9BZ2cgPSAnZm9yZWNhc3RVc2VBdXRvU3VtbWFyaXplJyxcclxuXHJcbiAgLy8gRFBJX0ZvckpvaW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBGb3JKb2luID0gJ2ZvckpvaW4nLFxyXG5cclxuICAvLyBEUElfRm9ybWF0RGF0YVZhbHVlTG9jYWxseSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEZvcm1hdERhdGFWYWx1ZUxvY2FsbHkgPSAnZm9ybWF0RGF0YVZhbHVlTG9jYWxseScsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXRJZkNvbHVtbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEZvcm1hdElmQ29sdW1uID0gJ2Zvcm1hdElmQ29sdW1uJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdElmUGFyYW1ldGVyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRm9ybWF0SWZQYXJhbWV0ZXIgPSAnZm9ybWF0SWZQYXJhbWV0ZXInLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaElzRGF0YUxvYWRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEdlb2dyYXBoaWNTZWFyY2hJc0RhdGFMb2FkZWQgPSAnZ2VvZ3JhcGhpY1NlYXJjaERhdGFMb2FkZWQnLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaExvYWREYXRhQXN5bmMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBHZW9ncmFwaGljU2VhcmNoTG9hZERhdGFBc3luYyA9ICdnZW9ncmFwaGljU2VhcmNoTG9hZERhdGFBc3luYycsXHJcblxyXG4gIC8vIERQSV9Hcm91cEJ5QWxsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgR3JvdXBCeUFsbCA9ICdncm91cEJ5QWxsJyxcclxuXHJcbiAgLy8gRFBJX0hhc0FsaWFzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzQWxpYXMgPSAnaGFzQWxpYXMnLFxyXG5cclxuICAvLyBEUElfSGFzQWxsTWVtYmVyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzQWxsTWVtYmVyID0gJ2hhc0FsbE1lbWJlcicsXHJcblxyXG4gIC8vIERQSV9IYXNBcHBseSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0FwcGx5ID0gJ2hhc0FwcGx5JyxcclxuXHJcbiAgLy8gRFBJX0hhc0JhY2tncm91bmRJbWFnZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0JhY2tncm91bmRJbWFnZSA9ICdoYXNCYWNrZ3JvdW5kSW1hZ2UnLFxyXG5cclxuICAvLyBEUElfSGFzQmVlbkRpc21pc3NlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0JlZW5EaXNtaXNzZWQgPSAnaGFzQmVlbkRpc21pc3NlZCcsXHJcblxyXG4gIC8vIERQSV9IYXNDYXB0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzQ2FwdGlvbiA9ICdoYXNDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0hhc0NvbmRpdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0NvbmRpdGlvbiA9ICdoYXNDb25kaXRpb24nLFxyXG5cclxuICAvLyBEUElfSGFzQ29ubmVjdFBlcm1pc3Npb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzQ29ubmVjdFBlcm1pc3Npb25zID0gJ2hhc0Nvbm5lY3RQZXJtaXNzaW9ucycsXHJcblxyXG4gIC8vIERQSV9IYXNEYXNoYm9hcmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNEYXNoYm9hcmQgPSAnaGFzRGFzaGJvYXJkJyxcclxuXHJcbiAgLy8gRFBJX0hhc0Rvd25sb2FkUGVybWlzc2lvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNEb3dubG9hZFBlcm1pc3Npb25zID0gJ2hhc0Rvd25sb2FkUGVybWlzc2lvbnMnLFxyXG5cclxuICAvLyBEUElfSGFzRHJpbGwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNEcmlsbCA9ICdoYXNEcmlsbCcsXHJcblxyXG4gIC8vIERQSV9IYXNFeGNsdWRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzRXhjbHVkZSA9ICdoYXNFeGNsdWRlJyxcclxuXHJcbiAgLy8gRFBJX0hhc0ZpbGwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNGaWxsID0gJ2hhc0ZpbGwnLFxyXG5cclxuICAvLyBEUElfSGFzTGFiZWxzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzTGFiZWxzID0gJ2hhc0xhYmVscycsXHJcblxyXG4gIC8vIERQSV9IYXNMaW1pdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0xpbWl0ID0gJ2hhc0xpbWl0JyxcclxuXHJcbiAgLy8gRFBJX0hhc0xpbmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNMaW5lID0gJ2hhc0xpbmUnLFxyXG5cclxuICAvLyBEUElfSGFzTW9kaWZpZWRBeGVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzTW9kaWZpZWRBeGVzID0gJ2hhc01vZGlmaWVkQXhlcycsXHJcblxyXG4gIC8vIERQSV9IYXNOb25Sb290Q2FsY3VsYXRpb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzTm9uUm9vdENhbGN1bGF0aW9ucyA9ICdoYXNOb25Sb290Q2FsY3VsYXRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0hhc09ubHlPbmVIaWVyYXJjaHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNPbmx5T25lSGllcmFyY2h5ID0gJ2hhc09ubHlPbmVIaWVyYXJjaHknLFxyXG5cclxuICAvLyBEUElfSGFzUGF0dGVybiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1BhdHRlcm4gPSAnaGFzUGF0dGVybicsXHJcblxyXG4gIC8vIERQSV9IYXNQdWJsaXNoR3VpZGFuY2VSZXN1bHRzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzUHVibGlzaEd1aWRhbmNlUmVzdWx0cyA9ICdoYXNQdWJsaXNoR3VpZGFuY2VSZXN1bHRzJyxcclxuXHJcbiAgLy8gRFBJX0hhc1NlbGVjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1NlbGVjdGlvbiA9ICdoYXNTZWxlY3Rpb24nLFxyXG5cclxuICAvLyBEUElfSGFzU2VydmVyQ3JlZGVudGlhbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNTZXJ2ZXJDcmVkZW50aWFscyA9ICdoYXNTZXJ2ZXJDcmVkZW50aWFscycsXHJcblxyXG4gIC8vIERQSV9IYXNTcGFjZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1NwYWNlID0gJ2hhc1NwYWNlJyxcclxuXHJcbiAgLy8gRFBJX0hhc1N0b3JlZFByb2NlZHVyZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1N0b3JlZFByb2NlZHVyZSA9ICdoYXNTdG9yZWRQcm9jZWR1cmUnLFxyXG5cclxuICAvLyBEUElfSGFzU3RyaW5nQ2FsY3VsYXRlZE1lYXN1cmVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzU3RyaW5nQ2FsY3VsYXRlZE1lYXN1cmVzID0gJ2hhc1N0cmluZ0NhbGN1bGF0ZWRNZWFzdXJlcycsXHJcblxyXG4gIC8vIERQSV9IYXNUYWJsZUNhbGNEYXRhLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzVGFibGVDYWxjRGF0YSA9ICdoYXNUYWJsZUNhbGNEYXRhJyxcclxuXHJcbiAgLy8gRFBJX0hhc1RpdGxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzVGl0bGUgPSAnaGFzVGl0bGUnLFxyXG5cclxuICAvLyBEUElfSGFzVXNlclNwZWNpZmljQ29udGVudCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1VzZXJTcGVjaWZpY0NvbnRlbnQgPSAnaGFzVXNlclNwZWNpZmljQ29udGVudCcsXHJcblxyXG4gIC8vIERQSV9IYXNVbmpvaW5lZFRhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzVW5qb2luZWRUYWJsZSA9ICdoYXNVbmpvaW5lZFRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0hhc1ZhckFyZ3MsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNWYXJBcmdzID0gJ2hhc1ZhckFyZ3MnLFxyXG5cclxuICAvLyBEUElfSGFzVmlzaXRlZFdEQ1BhZ2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNWaXNpdGVkV0RDUGFnZSA9ICdoYXNWaXNpdGVkV2RjUGFnZScsXHJcblxyXG4gIC8vIERQSV9JZ25vcmVBbGlhc2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSWdub3JlQWxpYXNlcyA9ICdpZ25vcmVBbGlhc2VzJyxcclxuXHJcbiAgLy8gRFBJX0lnbm9yZURvbWFpbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElnbm9yZURvbWFpbiA9ICdpZ25vcmVEb21haW4nLFxyXG5cclxuICAvLyBEUElfSWdub3JlU2VsZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSWdub3JlU2VsZWN0aW9uID0gJ2lnbm9yZVNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlQWxsQ29sdW1ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVBbGxDb2x1bW5zID0gJ2luY2x1ZGVBbGxDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVDb250ZXh0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZUNvbnRleHQgPSAnaW5jbHVkZUNvbnRleHQnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZURhc2hib2FyZFByZXNNb2RlbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlRGFzaGJvYXJkUHJlc01vZGVscyA9ICdpbmNsdWRlRGFzaGJvYXJkUHJlc01vZGVscycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlSXRlbVNldCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVJdGVtU2V0ID0gJ2luY2x1ZGVJdGVtU2V0JyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVMb2NhbEZpbGVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZUxvY2FsRmlsZXMgPSAnaW5jbHVkZUxvY2FsRmlsZXMnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZU90aGVyU2VsZWN0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlT3RoZXJTZWxlY3RlZCA9ICdpbmNsdWRlT3RoZXJTZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlTnVsbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlTnVsbHMgPSAnaW5jbHVkZU51bGxzJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVQYXJlbnQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlUGFyZW50ID0gJ2luY2x1ZGVQYXJlbnQnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZVNlbGVjdGlvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlU2VsZWN0aW9ucyA9ICdpbmNsdWRlU2VsZWN0aW9ucycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlU2libGluZ3MsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlU2libGluZ3MgPSAnaW5jbHVkZVNpYmxpbmdzJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVTdG9yaWVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZVN0b3JpZXMgPSAnaW5jbHVkZVN0b3JpZXMnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZVN1YmZvbGRlcnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlU3ViZm9sZGVycyA9ICdpbmNsdWRlU3ViZm9sZGVycycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlVm9sYXRpbGVQcm9wcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVWb2xhdGlsZVByb3BzID0gJ2luY2x1ZGVWb2xhdGlsZVByb3BzJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVzVGFnLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZXNUYWcgPSAnaW5jbHVkZXNUYWcnLFxyXG5cclxuICAvLyBEUElfSW5zZXJ0QWZ0ZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbnNlcnRBZnRlciA9ICdpbnNlcnRBZnRlcicsXHJcblxyXG4gIC8vIERQSV9JbnNlcnRBdEVuZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluc2VydEF0RW5kID0gJ2luc2VydEF0RW5kJyxcclxuXHJcbiAgLy8gRFBJX0luc3RhbnRBbmFseXRpY3NBbGxvd2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5zdGFudEFuYWx5dGljc0FsbG93ZWQgPSAnaW5zdGFudEFuYWx5dGljc0FsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfSW50ZWdlckNvb3JkaW5hdGVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW50ZWdlckNvb3JkaW5hdGVzID0gJ2ludENvb3JkcycsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkYXRlZExheW91dCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEludmFsaWRhdGVkTGF5b3V0ID0gJ2ludmFsaWRhdGVkTGF5b3V0JyxcclxuXHJcbiAgLy8gRFBJX0lzQWN0aXZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBY3RpdmUgPSAnaXNBY3RpdmUnLFxyXG5cclxuICAvLyBEUElfSXNBZGRUb0ZpbHRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQWRkVG9GaWx0ZXIgPSAnaXNBZGRUb0ZpbHRlckJ1dHRvbkNoZWNrZWQnLFxyXG5cclxuICAvLyBEUElfSXNBbGxCdXR0b25WaXNpYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBbGxCdXR0b25WaXNpYmxlID0gJ2lzQWxsQnV0dG9uVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9Jc0FsbG93ZWRJbkNhbGNzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBbGxvd2VkSW5DYWxjcyA9ICdpc0FsbG93ZWRJbkNhbGNzJyxcclxuXHJcbiAgLy8gRFBJX0lzQXBwTWFwU291cmNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBcHBNYXBTb3VyY2UgPSAnaXNBcHBNYXBTb3VyY2UnLFxyXG5cclxuICAvLyBEUElfSXNBcmNoaXZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBcmNoaXZlID0gJ2lzQXJjaGl2ZScsXHJcblxyXG4gIC8vIERQSV9Jc0F0dHJpYnV0ZUhpZXJhcmNoeSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQXR0cmlidXRlSGllcmFyY2h5ID0gJ2lzQXR0cmlidXRlSGllcmFyY2h5JyxcclxuXHJcbiAgLy8gRFBJX0lzQXV0aG9yaW5nTW9kZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQXV0aG9yaW5nTW9kZSA9ICdpc0F1dGhvcmluZ01vZGUnLFxyXG5cclxuICAvLyBEUElfSXNBdXRvLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBdXRvID0gJ2lzQXV0bycsXHJcblxyXG4gIC8vIERQSV9Jc0F1dG9DbGVhciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQXV0b0NsZWFyID0gJ2lzQXV0b0NsZWFyJyxcclxuXHJcbiAgLy8gRFBJX0lzQXV0b0NvbHVtbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQXV0b0NvbHVtbiA9ICdpc0F1dG9Db2x1bW4nLFxyXG5cclxuICAvLyBEUElfSXNBdXRvSGlkZGVuLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBdXRvSGlkZGVuID0gJ2lzQXV0b0hpZGRlbicsXHJcblxyXG4gIC8vIERQSV9Jc0F1dG9TZWxlY3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0F1dG9TZWxlY3QgPSAnaXNBdXRvU2VsZWN0JyxcclxuXHJcbiAgLy8gRFBJX0lzQm9sZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQm9sZCA9ICdpc0JvbGQnLFxyXG5cclxuICAvLyBEUElfSXNCb3JkZXJWaXNpYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNCb3JkZXJWaXNpYmxlID0gJ2lzQm9yZGVyVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9Jc0JveHBsb3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0JveHBsb3QgPSAnaXNCb3hwbG90JyxcclxuXHJcbiAgLy8gRFBJX0lzQ2FwYWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ2FwYWJsZSA9ICdpc0NhcGFibGUnLFxyXG5cclxuICAvLyBEUElfSXNDYXB0dXJlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ2FwdHVyZWQgPSAnaXNDYXB0dXJlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0NlbnRlcmVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNDZW50ZXJlZCA9ICdpc0NlbnRlcmVkJyxcclxuXHJcbiAgLy8gRFBJX0lzQ2hlY2tlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ2hlY2tlZCA9ICdpc0NoZWNrZWQnLFxyXG5cclxuICAvLyBEUElfSXNDb2xvckRpdmVyZ2luZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ29sb3JEaXZlcmdpbmcgPSAnaXNDb2xvckRpdmVyZ2luZycsXHJcblxyXG4gIC8vIERQSV9Jc0NvbG9yU3RlcHBlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ29sb3JTdGVwcGVkID0gJ2lzQ29sb3JTdGVwcGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzQ29tYmluZWRGaWVsZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ29tYmluZWRGaWVsZCA9ICdpc0NvbWJpbmVkRmllbGQnLFxyXG5cclxuICAvLyBEUElfSXNDb25uZWN0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0Nvbm5lY3RlZCA9ICdpc0Nvbm5lY3RlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0NvbnRleHRNZW51QWxsb3dlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ29udGV4dE1lbnVBbGxvd2VkID0gJ2lzQ29udGV4dE1lbnVBbGxvd2VkJyxcclxuXHJcbiAgLy8gRFBJX0lzQ29udGludW91cywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ29udGludW91cyA9ICdpc0NvbnRpbnVvdXMnLFxyXG5cclxuICAvLyBEUElfSXNDb3B5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNDb3B5ID0gJ2lzQ29weScsXHJcblxyXG4gIC8vIERQSV9Jc0N1c3RvbUNhbGN1bGF0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNDdXN0b21DYWxjdWxhdGlvbiA9ICdpc0N1c3RvbUNhbGN1bGF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0lzQ3VzdG9tUGFsZXR0ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ3VzdG9tUGFsZXR0ZSA9ICdpc0N1c3RvbVBhbGV0dGUnLFxyXG5cclxuICAvLyBEUElfSXNDdXN0b21TUUwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0N1c3RvbVNRTCA9ICdpc0N1c3RvbVNxbCcsXHJcblxyXG4gIC8vIERQSV9Jc0N1c3RvbVZhbHVlRW5hYmxlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ3VzdG9tVmFsdWVFbmFibGVkID0gJ2lzQ3VzdG9tVmFsdWVFbmFibGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzRGF0YUFsZXJ0Q29uZGl0aW9uTWV0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEYXRhQWxlcnRDb25kaXRpb25NZXQgPSAnaXNEYXRhQWxlcnRDb25kaXRpb25NZXQnLFxyXG5cclxuICAvLyBEUElfSXNEYXRhQWxlcnREaWFsb2dWaXNpYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEYXRhQWxlcnREaWFsb2dWaXNpYmxlID0gJ2lzRGF0YUFsZXJ0RGlhbG9nVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9Jc0RhdGFCaW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0RhdGFCaW4gPSAnaXNEYXRhQmluJyxcclxuXHJcbiAgLy8gRFBJX0lzRGF0YUdyaWRWaXNpYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEYXRhR3JpZFZpc2libGUgPSAnaXNEYXRhR3JpZFZpc2libGUnLFxyXG5cclxuICAvLyBEUElfSXNEYXRhYmFzZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRGF0YWJhc2UgPSAnaXNEYXRhYmFzZScsXHJcblxyXG4gIC8vIERQSV9Jc0RhdGFiYXNlRmlsdGVySW5jbHVzaXZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEYXRhYmFzZUZpbHRlckluY2x1c2l2ZSA9ICdpc0RiRmlsdGVySW5jbHVzaXZlJyxcclxuXHJcbiAgLy8gRFBJX0lzRGF0YVNvdXJjZUZpbHRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRGF0YVNvdXJjZUZpbHRlciA9ICdpc0RhdGFzb3VyY2VGaWx0ZXInLFxyXG5cclxuICAvLyBEUElfSXNEYXRlVGltZUFuY2hvciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRGF0ZVRpbWVBbmNob3IgPSAnaXNEYXRlVGltZUFuY2hvcicsXHJcblxyXG4gIC8vIERQSV9Jc0RhdGVUaW1lRmllbGQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0RhdGVUaW1lRmllbGQgPSAnaXNEYXRlVGltZUZpZWxkJyxcclxuXHJcbiAgLy8gRFBJX0lzRHJhZ2dhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEcmFnZ2FibGUgPSAnaXNEcmFnZ2FibGUnLFxyXG5cclxuICAvLyBEUElfSXNNRFhDYWxjdWxhdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTURYQ2FsY3VsYXRpb24gPSAnaXNNZHhDYWxjdWxhdGlvbicsXHJcblxyXG4gIC8vIERQSV9Jc01ldGFkYXRhLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNZXRhZGF0YSA9ICdpc01ldGFkYXRhJyxcclxuXHJcbiAgLy8gRFBJX0lzV2ViRGF0YVRhYlZpZXdTdXBwb3J0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1dlYkRhdGFUYWJWaWV3U3VwcG9ydGVkID0gJ2lzV2ViRGF0YVRhYlZpZXdTdXBwb3J0ZWQnLFxyXG5cclxuICAvLyBEUElfSXNQdWJsaXNoZWREYXRhc291cmNlUmVwbGFjZW1lbnQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1B1Ymxpc2hlZERhdGFzb3VyY2VSZXBsYWNlbWVudCA9ICdpc1B1Ymxpc2hlZERhdGFzb3VyY2VSZXBsYWNlbWVudCcsXHJcblxyXG4gIC8vIERQSV9Jc0RlYWREcm9wLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEZWFkRHJvcCA9ICdpc0RlYWREcm9wJyxcclxuXHJcbiAgLy8gRFBJX0lzRGVmYXVsdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRGVmYXVsdCA9ICdpc0RlZmF1bHQnLFxyXG5cclxuICAvLyBEUElfSXNEZWxldGVDYWxjQ29uZmlybSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRGVsZXRlQ2FsY0NvbmZpcm0gPSAnaXNEZWxldGVDYWxjQ29uZmlybWVkJyxcclxuXHJcbiAgLy8gRFBJX0lzRGltZW5zaW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEaW1lbnNpb24gPSAnaXNEaW1lbnNpb24nLFxyXG5cclxuICAvLyBEUElfSXNEaXNhYmxlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRGlzYWJsZWQgPSAnaXNEaXNhYmxlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0RpdmlkZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0RpdmlkZXIgPSAnaXNEaXZpZGVyJyxcclxuXHJcbiAgLy8gRFBJX0lzRHJvcGRvd25FbmFibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEcm9wZG93bkVuYWJsZWQgPSAnaXNEcm9wZG93bkVuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfSXNFZGl0aW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFZGl0aW5nID0gJ2lzRWRpdGluZycsXHJcblxyXG4gIC8vIERQSV9Jc0VtYmVkZGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFbWJlZGRlZCA9ICdpc0VtYmVkZGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzRW1wdHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0VtcHR5ID0gJ2lzRW1wdHknLFxyXG5cclxuICAvLyBEUElfSXNFeHRlbnNpb25DbG9zZUV2ZW50LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFeHRlbnNpb25DbG9zZUV2ZW50ID0gJ2lzRXh0ZW5zaW9uQ2xvc2VFdmVudCcsXHJcblxyXG4gIC8vIERQSV9Jc0V4dGVuc2lvbkRpYWxvZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRXh0ZW5zaW9uRGlhbG9nID0gJ2lzRXh0ZW5zaW9uRGlhbG9nJyxcclxuXHJcbiAgLy8gRFBJX0lzQWRkSW5FbmFibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNBZGRJbkVuYWJsZWQgPSAnaXNBZGRJbkVuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfSXNJbkRyaWxsUGF0aCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSW5EcmlsbFBhdGggPSAnaXNJbkRyaWxsUGF0aCcsXHJcblxyXG4gIC8vIERQSV9BZGRJbkpTRGVidWdnaW5nRW5hYmxlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFkZEluSlNEZWJ1Z2dpbmdFbmFibGVkID0gJ2FkZEluSnNEZWJ1Z2dpbkVuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfQWRkSW5QYXVzZUJlZm9yZUxvYWRpbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBZGRJblBhdXNlQmVmb3JlTG9hZGluZyA9ICdhZGRJblBhdXNlQmVmb3JlTG9hZGluZycsXHJcblxyXG4gIC8vIERQSV9Jc0RTSGllcmFyY2hpY2FsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEU0hpZXJhcmNoaWNhbCA9ICdpc0RzSGllcmFyY2hpY2FsJyxcclxuXHJcbiAgLy8gRFBJX0lzRWRpdG9yT3BlbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRWRpdG9yT3BlbiA9ICdpc0VkaXRvck9wZW4nLFxyXG5cclxuICAvLyBEUElfSXNFbmRQdE1vdmVhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFbmRQdE1vdmVhYmxlID0gJ2lzRW5kcG9pbnRNb3ZhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0lzRXhjbHVkZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRXhjbHVkZSA9ICdpc0V4Y2x1ZGVCdXR0b25DaGVja2VkJyxcclxuXHJcbiAgLy8gRFBJX0lzRXhpc3RpbmdDb25uZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFeGlzdGluZ0Nvbm5lY3Rpb24gPSAnaXNFeGlzdGluZ0Nvbm5lY3Rpb24nLFxyXG5cclxuICAvLyBEUElfSXNFeGlzdGluZ09iamVjdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRXhpc3RpbmdPYmplY3QgPSAnaXNFeGlzdGluZ09iamVjdCcsXHJcblxyXG4gIC8vIERQSV9Jc0V4dHJhY3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0V4dHJhY3QgPSAnaXNFeHRyYWN0JyxcclxuXHJcbiAgLy8gRFBJX0lzRXh0cmFjdE9ubHlDb25uZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFeHRyYWN0T25seUNvbm5lY3Rpb24gPSAnaXNFeHRyYWN0T25seUNvbm5lY3Rpb24nLFxyXG5cclxuICAvLyBEUElfSXNFeHRyYWN0U2VsZWN0aW9uVmlzaWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRXh0cmFjdFNlbGVjdGlvblZpc2libGUgPSAnaXNFeHRyYWN0U2VsZWN0aW9uVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9Jc0ZlZGVyYXRhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGZWRlcmF0YWJsZSA9ICdpc0ZlZGVyYXRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0lzRmllbGQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0ZpZWxkID0gJ2lzRmllbGQnLFxyXG5cclxuICAvLyBEUElfSXNGaWVsZFBhcmFtZXRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRmllbGRQYXJhbWV0ZXIgPSAnaXNGaWVsZFBhcmFtZXRlcicsXHJcblxyXG4gIC8vIERQSV9Jc0ZpbHRlckFjdGlvbkZpZWxkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGaWx0ZXJBY3Rpb25GaWVsZCA9ICdpc0ZpbHRlckFjdGlvbkZpZWxkJyxcclxuXHJcbiAgLy8gRFBJX0lzRmlsdGVyUHJlc2VudCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRmlsdGVyUHJlc2VudCA9ICdpc0ZpbHRlclByZXNlbnQnLFxyXG5cclxuICAvLyBEUElfSXNGaXJzdENsYXNzQ29ubmVjdG9yLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGaXJzdENsYXNzQ29ubmVjdG9yID0gJ2lzRmlyc3RDbGFzc0Nvbm5lY3RvcicsXHJcblxyXG4gIC8vIERQSV9Jc0Zsb2F0aW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGbG9hdGluZyA9ICdpc0Zsb2F0aW5nJyxcclxuXHJcbiAgLy8gRFBJX0lzRm9sZGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGb2xkZWQgPSAnaXNGb2xkZWQnLFxyXG5cclxuICAvLyBEUElfSXNGb3JjZURpcnR5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGb3JjZURpcnR5ID0gJ2lzRm9yY2VEaXJ0eScsXHJcblxyXG4gIC8vIERQSV9Jc0ZvcmNlTWFudWFsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGb3JjZU1hbnVhbCA9ICdpc0ZvcmNlTWFudWFsJyxcclxuXHJcbiAgLy8gRFBJX0lzRm9ySW5wdXQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0ZvcklucHV0ID0gJ2lzRm9ySW5wdXQnLFxyXG5cclxuICAvLyBEUElfSXNGb3JlY2FzdEVuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0ZvcmVjYXN0RW5hYmxlZCA9ICdpc0ZvcmVjYXN0RW5hYmxlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0Z1bGxTY2FuLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNGdWxsU2NhbiA9ICdpc0Z1bGxTY2FuJyxcclxuXHJcbiAgLy8gRFBJX0lzRnVsbFN0eWxpbmcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0Z1bGxTdHlsaW5nID0gJ2lzRnVsbFN0eWxpbmcnLFxyXG5cclxuICAvLyBEUElfSXNHZW5lcmF0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0dlbmVyYXRlZCA9ICdpc0dlbmVyYXRlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0dsb2JhbE5hbWVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNHbG9iYWxOYW1lcyA9ICdpc0dsb2JhbE5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0lzR3JheWVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNHcmF5ZWQgPSAnaXNHcmF5ZWQnLFxyXG5cclxuICAvLyBEUElfSXNHcmF5c2NhbGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0dyYXlzY2FsZSA9ICdpc0dyYXlzY2FsZScsXHJcblxyXG4gIC8vIERQSV9Jc0dyb3VwLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNHcm91cCA9ICdpc0dyb3VwJyxcclxuXHJcbiAgLy8gRFBJX0lzSGlkZWFibGVGaWVsZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSGlkZWFibGVGaWVsZCA9ICdpc0hpZGVhYmxlRmllbGQnLFxyXG5cclxuICAvLyBEUElfSXNIaWVyYXJjaHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0hpZXJhcmNoeSA9ICdpc0hpZXJhcmNoeScsXHJcblxyXG4gIC8vIERQSV9Jc0hpZXJhcmNoeVNpbmdsZVNlbGVjdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSGllcmFyY2h5U2luZ2xlU2VsZWN0ID0gJ2lzSGllcmFyY2h5U2luZ2xlU2VsZWN0JyxcclxuXHJcbiAgLy8gRFBJX0lzSGlnaGxpZ2h0QWxsb3dlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSGlnaGxpZ2h0QWxsb3dlZCA9ICdpc0hpZ2hsaWdodEFsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfSXNIaWdobGlnaHRFbmFibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNIaWdobGlnaHRFbmFibGVkID0gJ2lzSGlnaGxpZ2h0RW5hYmxlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0hpZ2hsaWdodEZpZWxkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNIaWdobGlnaHRGaWVsZCA9ICdpc0hpZ2hsaWdodEZpZWxkJyxcclxuXHJcbiAgLy8gRFBJX0lzSG9yaXpvbnRhbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSG9yaXpvbnRhbCA9ICdpc0hvcml6b250YWwnLFxyXG5cclxuICAvLyBEUElfSXNJbWFnZUVuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0ltYWdlRW5hYmxlZCA9ICdpc0ltYWdlRW5hYmxlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0luRGVmYXVsdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSW5EZWZhdWx0ID0gJ2lzSW5EZWZhdWx0JyxcclxuXHJcbiAgLy8gRFBJX0lzSW5QcmltYXJ5RGF0YVNvdXJjZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSW5QcmltYXJ5RGF0YVNvdXJjZSA9ICdpc0luUHJpbWFyeURhdGFTb3VyY2UnLFxyXG5cclxuICAvLyBEUElfSXNJbm5lciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSW5uZXIgPSAnaXNJbm5lcicsXHJcblxyXG4gIC8vIERQSV9Jc0luc3RhbmNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNJbnN0YW5jZSA9ICdpc0luc3RhbmNlJyxcclxuXHJcbiAgLy8gRFBJX0lzSW52YWxpZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSW52YWxpZCA9ICdpc0ludmFsaWQnLFxyXG5cclxuICAvLyBEUElfSXNJbnZhbGlkQ2FsY09uREcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0ludmFsaWRDYWxjT25ERyA9ICdpc0ludmFsaWREZ0NhbGMnLFxyXG5cclxuICAvLyBEUElfSXNJdGFsaWNzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNJdGFsaWNzID0gJ2lzSXRhbGljcycsXHJcblxyXG4gIC8vIERQSV9Jc0pvaW5BcmVhVmlzaWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzSm9pbkFyZWFWaXNpYmxlID0gJ2lzSm9pbkFyZWFWaXNpYmxlJyxcclxuXHJcbiAgLy8gRFBJX0lzTGFiZWxzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNMYWJlbHMgPSAnaXNMYWJlbHMnLFxyXG5cclxuICAvLyBEUElfSXNMYXllcmVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNMYXllcmVkID0gJ2lzTGF5ZXJlZCcsXHJcblxyXG4gIC8vIERQSV9Jc0xlZnQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0xlZnQgPSAnaXNMZWZ0JyxcclxuXHJcbiAgLy8gRFBJX0lzTGVnYWN5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNMZWdhY3kgPSAnaXNMZWdhY3knLFxyXG5cclxuICAvLyBEUElfSXNMZXZlbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTGV2ZWwgPSAnaXNMZXZlbCcsXHJcblxyXG4gIC8vIERQSV9Jc0xldmVsT3JMZXZlbElkZW50aXR5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNMZXZlbE9yTGV2ZWxJZGVudGl0eSA9ICdpc0xldmVsT3JMZXZlbElkZW50aXR5JyxcclxuXHJcbiAgLy8gRFBJX0lzTGljZW5zZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0xpY2Vuc2VkID0gJ2lzTGljZW5zZWQnLFxyXG5cclxuICAvLyBEUElfSXNMaW5rLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNMaW5rID0gJ2lzTGluaycsXHJcblxyXG4gIC8vIERQSV9Jc0xpbmtlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTGlua2VkID0gJ2lzTGlua2VkJyxcclxuXHJcbiAgLy8gRFBJX0lzTWFwLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNYXAgPSAnaXNNYXAnLFxyXG5cclxuICAvLyBEUElfSXNNZWFzdXJlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNZWFzdXJlID0gJ2lzTWVhc3VyZScsXHJcblxyXG4gIC8vIERQSV9Jc01lcmdlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNZXJnZSA9ICdpc01lcmdlJyxcclxuXHJcbiAgLy8gRFBJX0lzTWVzc2FnZVNvdXJjZVJlbW90ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTWVzc2FnZVNvdXJjZVJlbW90ZSA9ICdpc01lc3NhZ2VTb3VyY2VSZW1vdGUnLFxyXG5cclxuICAvLyBEUElfSXNNYXhPcGVuLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNYXhPcGVuID0gJ2lzTWF4T3BlbicsXHJcblxyXG4gIC8vIERQSV9Jc01pbk9wZW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc01pbk9wZW4gPSAnaXNNaW5PcGVuJyxcclxuXHJcbiAgLy8gRFBJX0lzTWlzc2luZ0Zyb21FeHRyYWN0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNaXNzaW5nRnJvbUV4dHJhY3QgPSAnaXNNaXNzaW5nRnJvbUV4dHJhY3QnLFxyXG5cclxuICAvLyBEUElfSXNNb2JpbGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc01vYmlsZSA9ICdpc01vYmlsZScsXHJcblxyXG4gIC8vIERQSV9Jc01vZGlmaWVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNb2RpZmllZCA9ICdpc01vZGlmaWVkJyxcclxuXHJcbiAgLy8gRFBJX0lzTmV3LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNOZXcgPSAnaXNOZXcnLFxyXG5cclxuICAvLyBEUElfSXNOZXdDbG91ZEZpbGVEYXRhU291cmNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNOZXdDbG91ZEZpbGVEYXRhU291cmNlID0gJ2lzTmV3Q2xvdWRGaWxlRGF0YVNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9Jc05ld1pvbmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc05ld1pvbmUgPSAnaXNOZXdab25lJyxcclxuXHJcbiAgLy8gRFBJX0lzTm9uZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTm9uZSA9ICdpc05vbmUnLFxyXG5cclxuICAvLyBEUElfSXNPZmZsaW5lTW9kZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzT2ZmbGluZU1vZGUgPSAnaXNPZmZsaW5lTW9kZScsXHJcblxyXG4gIC8vIERQSV9Jc1ByZUFxbEJpbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUHJlQXFsQmluID0gJ2lzUHJlQXFsQmluJyxcclxuXHJcbiAgLy8gRFBJX0lzT01lYXN1cmVzQW5kUmVsYXRpb25hbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzT01lYXN1cmVzQW5kUmVsYXRpb25hbCA9ICdpc09tZWFzdXJlc0FuZFJlbGF0aW9uYWwnLFxyXG5cclxuICAvLyBEUElfSXNPcGFxdWUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc09wYXF1ZSA9ICdpc09wYXF1ZScsXHJcblxyXG4gIC8vIERQSV9Jc09ycGhhbmVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNPcnBoYW5lZCA9ICdpc09ycGhhbmVkJyxcclxuXHJcbiAgLy8gRFBJX0lzT3ZlcmxheSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzT3ZlcmxheSA9ICdpc092ZXJsYXknLFxyXG5cclxuICAvLyBEUElfSXNPdmVycmlkZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzT3ZlcnJpZGUgPSAnaXNPdmVycmlkZScsXHJcblxyXG4gIC8vIERQSV9Jc1BhZ2VMb2FkaW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNQYWdlTG9hZGluZyA9ICdpc1BhZ2VMb2FkaW5nJyxcclxuXHJcbiAgLy8gRFBJX0lzUGFyYW1ldGVyU2VsZWN0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1BhcmFtZXRlclNlbGVjdGVkID0gJ2lzUGFyYW1ldGVyU2VsZWN0ZWQnLFxyXG5cclxuICAvLyBEUElfSXNQYXJhbWV0ZXJTZWxlY3RlZE9uRnJvbSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUGFyYW1ldGVyU2VsZWN0ZWRPbkZyb20gPSAnaXNQYXJhbWV0ZXJTZWxlY3RlZE9uRnJvbScsXHJcblxyXG4gIC8vIERQSV9Jc1BhcmFtZXRlclNlbGVjdGVkT25UbywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUGFyYW1ldGVyU2VsZWN0ZWRPblRvID0gJ2lzUGFyYW1ldGVyU2VsZWN0ZWRPblRvJyxcclxuXHJcbiAgLy8gRFBJX0lzUGF0dGVybkJhc2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNQYXR0ZXJuQmFzZWQgPSAnaXNQYXR0ZXJuQmFzZWQnLFxyXG5cclxuICAvLyBEUElfSXNQaW5uZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1Bpbm5lZCA9ICdpc1Bpbm5lZCcsXHJcblxyXG4gIC8vIERQSV9Jc1ByZXNlbnRhdGlvbk1vZGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1ByZXNlbnRhdGlvbk1vZGUgPSAnaXNQcmVzZW50YXRpb25Nb2RlRG9jJyxcclxuXHJcbiAgLy8gRFBJX0lzUHVibGlzaEFsbG93ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1B1Ymxpc2hBbGxvd2VkID0gJ2lzUHVibGlzaEFsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfSXNNdXN0RG93bmdyYWRlVG9QdWJsaXNoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNNdXN0RG93bmdyYWRlVG9QdWJsaXNoID0gJ2lzRG93bmdyYWRlVG9QdWJsaXNoUmVxdWlyZWQnLFxyXG5cclxuICAvLyBEUElfSXNQdWJsaXNoZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1B1Ymxpc2hlZCA9ICdpc1B1Ymxpc2hlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1F1YW50aXRhdGl2ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUXVhbnRpdGF0aXZlID0gJ2lzUXVhbnRpdGF0aXZlJyxcclxuXHJcbiAgLy8gRFBJX0lzUXVpY2tUYWJsZUNhbGMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1F1aWNrVGFibGVDYWxjID0gJ2lzUXVpY2tUYWJsZUNhbGMnLFxyXG5cclxuICAvLyBEUElfSXNSYWRpb09uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNSYWRpb09uID0gJ2lzUmFkaW9PbicsXHJcblxyXG4gIC8vIERQSV9Jc1JlY29ubmVjdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUmVjb25uZWN0ID0gJ2lzUmVjb25uZWN0JyxcclxuXHJcbiAgLy8gRFBJX0lzUmVjdXJzaXZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNSZWN1cnNpdmUgPSAnaXNSZWN1cnNpdmUnLFxyXG5cclxuICAvLyBEUElfSXNSZWZlcmVuY2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNSZWZlcmVuY2VkID0gJ2lzUmVmZXJlbmNlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1JlbW92YWxBbGxvd2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNSZW1vdmFsQWxsb3dlZCA9ICdpc1Jvd1JlbW92YWxBbGxvd2VkJyxcclxuXHJcbiAgLy8gRFBJX0lzUmVuZGVyQ2FwYWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUmVuZGVyQ2FwYWJsZSA9ICdpc1JlbmRlckNhcGFibGUnLFxyXG5cclxuICAvLyBEUElfSXNSZXF1aXJlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUmVxdWlyZWQgPSAnaXNSZXF1aXJlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1JldmVyc2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNSZXZlcnNlZCA9ICdpc1JldmVyc2VkJyxcclxuXHJcbiAgLy8gRFBJX0lzUmlnaHREcmFnLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNSaWdodERyYWcgPSAnaXNSaWdodERyYWcnLFxyXG5cclxuICAvLyBEUElfSXNSb3dMYWJlbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1Jvd0xhYmVscyA9ICdpc1Jvd0xhYmVscycsXHJcblxyXG4gIC8vIERQSV9Jc1BlcmNlbnRhZ2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1BlcmNlbnRhZ2UgPSAnaXNQZXJjZW50YWdlJyxcclxuXHJcbiAgLy8gRFBJX0lzU2FsZXNmb3JjZUluQ29ubmVjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU2FsZXNmb3JjZUluQ29ubmVjdGlvbiA9ICdpc1NhbGVzZm9yY2VJbkNvbm5lY3Rpb24nLFxyXG5cclxuICAvLyBEUElfSXNTY2FsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NjYWxlZCA9ICdpc1NjYWxlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1NlY29uZGFyeUZpZWxkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTZWNvbmRhcnlGaWVsZCA9ICdpc1NlY29uZGFyeUZpZWxkJyxcclxuXHJcbiAgLy8gRFBJX0lzU2VsZWN0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NlbGVjdGVkID0gJ2lzU2VsZWN0ZWQnLFxyXG5cclxuICAvLyBEUElfSXNTZWxlY3RlZEl0ZW0sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NlbGVjdGVkSXRlbSA9ICdpc1NlbGVjdGVkSXRlbScsXHJcblxyXG4gIC8vIERQSV9Jc1NlbGVjdGlvbkRpc2FibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTZWxlY3Rpb25EaXNhYmxlZCA9ICdpc1NlbGVjdGlvbkRpc2FibGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzU2hpZnREcmFnLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTaGlmdERyYWcgPSAnaXNTaGlmdERyYWcnLFxyXG5cclxuICAvLyBEUElfSXNTaW5nbGVMYWJlbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU2luZ2xlTGFiZWwgPSAnaXNTaW5nbGVMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9Jc1NpbmdsZVNlbGVjdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU2luZ2xlU2VsZWN0ID0gJ2lzU2luZ2xlU2VsZWN0JyxcclxuXHJcbiAgLy8gRFBJX0lzU2luZ2xlU2VsZWN0TW9kZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU2luZ2xlU2VsZWN0TW9kZSA9ICdpc1NpbmdsZVNlbGVjdE1vZGUnLFxyXG5cclxuICAvLyBEUElfSXNTaW5nbGVTZWxlY3Rpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NpbmdsZVNlbGVjdGlvbiA9ICdpc1NpbmdsZVNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9Jc1NvcnRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU29ydGVkID0gJ2lzU29ydGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzU29ydFBpbGwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NvcnRQaWxsID0gJ2lzU29ydFBpbGwnLFxyXG5cclxuICAvLyBEUElfSXNTcGVjaWFsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTcGVjaWFsID0gJ2lzU3BlY2lhbCcsXHJcblxyXG4gIC8vIERQSV9Jc1NwbGFzaFNjcmVlbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU3BsYXNoU2NyZWVuID0gJ2lzU3BsYXNoU2NyZWVuJyxcclxuXHJcbiAgLy8gRFBJX0lzU3RvcnlFbXB0eSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU3RvcnlFbXB0eSA9ICdpc1N0b3J5RW1wdHknLFxyXG5cclxuICAvLyBEUElfSXNTdHJpa2VUaHJvdWdoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTdHJpa2VUaHJvdWdoID0gJ2lzU3RyaWtlVGhyb3VnaCcsXHJcblxyXG4gIC8vIERQSV9Jc1RhYmxlQ2FsYywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVGFibGVDYWxjID0gJ2lzVGFibGVDYWxjJyxcclxuXHJcbiAgLy8gRFBJX0lzVGFibGVDbGVhbmluZ1N1YnRhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUYWJsZUNsZWFuaW5nU3VidGFibGUgPSAnaXNUYWJsZUNsZWFuaW5nU3VidGFibGUnLFxyXG5cclxuICAvLyBEUElfSXNUYWJsZUZpbHRlckluY2x1c2l2ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVGFibGVGaWx0ZXJJbmNsdXNpdmUgPSAnaXNUYWJsZUZpbHRlckluY2x1c2l2ZScsXHJcblxyXG4gIC8vIERQSV9Jc1RhYmxlUmFua2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUYWJsZVJhbmtlZCA9ICdpc1RhYmxlUmFua2VkJyxcclxuXHJcbiAgLy8gRFBJX0lzVGVtcG9yYXJ5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUZW1wb3JhcnkgPSAnaXNUZW1wb3JhcnknLFxyXG5cclxuICAvLyBEUElfSXNUaW1lSW50ZWxsaWdlbmNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUaW1lSW50ZWxsaWdlbmNlID0gJ2lzVGltZUludGVsbGlnZW5jZScsXHJcblxyXG4gIC8vIERQSV9Jc1RpdGxlVmlzaWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVGl0bGVWaXNpYmxlID0gJ2lzVGl0bGVWaXNpYmxlJyxcclxuXHJcbiAgLy8gRFBJX0lzVG9wTGV2ZWwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1RvcExldmVsID0gJ2lzVG9wTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfSXNUd29WYWx1ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1R3b1ZhbHVlZCA9ICdpc1R3b1ZhbHVlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1R5cGVJbkZpbmlzaGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUeXBlSW5GaW5pc2hlZCA9ICdpc1R5cGVpbkZpbmlzaGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzVHlwZUluUGlsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVHlwZUluUGlsbCA9ICdpc1R5cGVJblBpbGwnLFxyXG5cclxuICAvLyBEUElfSXNVUkxBY3Rpb25GaWVsZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVVJMQWN0aW9uRmllbGQgPSAnaXNVcmxBY3Rpb25GaWVsZCcsXHJcblxyXG4gIC8vIERQSV9Jc1VuZGVybGluZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1VuZGVybGluZWQgPSAnaXNVbmRlcmxpbmVkJyxcclxuXHJcbiAgLy8gRFBJX0lzVW5pb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1VuaW9uID0gJ2lzVW5pb24nLFxyXG5cclxuICAvLyBEUElfSXNVbmlvblJlcGxhY2VtZW50LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNVbmlvblJlcGxhY2VtZW50ID0gJ2lzVW5pb25SZXBsYWNlbWVudCcsXHJcblxyXG4gIC8vIERQSV9Jc1VubmFtZWRDYWxjLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNVbm5hbWVkQ2FsYyA9ICdpc1VubmFtZWQnLFxyXG5cclxuICAvLyBEUElfSXNVc2VyRGVmaW5lZEF0dHJpYnV0ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVXNlckRlZmluZWRBdHRyaWJ1dGUgPSAnaXNVc2VyRGVmaW5lZEF0dHJpYnV0ZScsXHJcblxyXG4gIC8vIERQSV9Jc1VzZXJFZGl0YWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVXNlckVkaXRhYmxlID0gJ2lzVXNlckVkaXRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0lzVXNlclByb21wdGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNVc2VyUHJvbXB0ZWQgPSAnaXNVc2VyUHJvbXB0ZWQnLFxyXG5cclxuICAvLyBEUElfSXNVc2VyUmVzcG9uZGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNVc2VyUmVzcG9uZGVkID0gJ2lzVXNlclJlc3BvbmRlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1ZhbGlkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNWYWxpZCA9ICdpc1ZhbGlkJyxcclxuXHJcbiAgLy8gRFBJX0lzVmFsaWREYXRlUmFuZ2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1ZhbGlkRGF0ZVJhbmdlID0gJ2lzVmFsaWREYXRlUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfSXNWYWxpZFdEQ1BhZ2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1ZhbGlkV0RDUGFnZSA9ICdpc1ZhbGlkV2RjUGFnZScsXHJcblxyXG4gIC8vIERQSV9Jc1ZhcnlpbmdBdHRyaWJ1dGVEaW1lbnNpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1ZhcnlpbmdBdHRyaWJ1dGVEaW1lbnNpb24gPSAnaXNWYXJ5aW5nQXR0cmlidXRlRGltZW5zaW9uJyxcclxuXHJcbiAgLy8gRFBJX0lzVmVydGljYWwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1ZlcnRpY2FsID0gJ2lzVmVydGljYWwnLFxyXG5cclxuICAvLyBEUElfSXNWaWV3TW9kaWZpZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1ZpZXdNb2RpZmllZCA9ICdpc1ZpZXdNb2RpZmllZCcsXHJcblxyXG4gIC8vIERQSV9Jc1Zpc3VhbGx5Q2F0ZWdvcmljYWwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1Zpc3VhbGx5Q2F0ZWdvcmljYWwgPSAnaXNWaXN1YWxseUNhdCcsXHJcblxyXG4gIC8vIERQSV9Jc1ZpekluVG9vbHRpcCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVml6SW5Ub29sdGlwID0gJ2lzVml6SW5Ub29sdGlwJyxcclxuXHJcbiAgLy8gRFBJX0lzV2ViLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNXZWIgPSAnaXNXZWInLFxyXG5cclxuICAvLyBEUElfSXNXaGl0ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzV2hpdGUgPSAnaXNXaGl0ZScsXHJcblxyXG4gIC8vIERQSV9Jc1dvcmxkTmV3LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNXb3JsZE5ldyA9ICdpc1dvcmxkTmV3JyxcclxuXHJcbiAgLy8gRFBJX0lzWEF4aXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1hBeGlzID0gJ2lzWEF4aXMnLFxyXG5cclxuICAvLyBEUElfS2VlcEFzcGVjdFJhdGlvLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgS2VlcEFzcGVjdFJhdGlvID0gJ2tlZXBBc3BlY3RSYXRpbycsXHJcblxyXG4gIC8vIERQSV9LZWVwRmllbGRGaWx0ZXJzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgS2VlcEZpZWxkRmlsdGVycyA9ICdrZWVwRmllbGRGaWx0ZXJzJyxcclxuXHJcbiAgLy8gRFBJX0xhYmVsTGluZUVuZEZpcnN0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTGFiZWxMaW5lRW5kRmlyc3QgPSAnbGFiZWxMaW5lRW5kRmlyc3QnLFxyXG5cclxuICAvLyBEUElfTGFiZWxMaW5lRW5kTGFzdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIExhYmVsTGluZUVuZExhc3QgPSAnbGFiZWxMaW5lRW5kTGFzdCcsXHJcblxyXG4gIC8vIERQSV9MYWJlbE1hcmtNYXgsIGhhdmluZyB0eXBlIGJvb2xcclxuICBMYWJlbE1hcmtNYXggPSAnbGFiZWxNYXJrTWF4JyxcclxuXHJcbiAgLy8gRFBJX0xhYmVsTWFya01pbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIExhYmVsTWFya01pbiA9ICdsYWJlbE1hcmtNaW4nLFxyXG5cclxuICAvLyBEUElfTG9ja0FzcGVjdFJhdGlvLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTG9ja0FzcGVjdFJhdGlvID0gJ2xvY2tBc3BlY3RSYXRpbycsXHJcblxyXG4gIC8vIERQSV9Mb29wUGxheWJhY2ssIGhhdmluZyB0eXBlIGJvb2xcclxuICBMb29wUGxheWJhY2sgPSAnbG9vcFBsYXliYWNrJyxcclxuXHJcbiAgLy8gRFBJX0xvc3N5SW1hZ2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTG9zc3lJbWFnZXMgPSAnbG9zc3lJbWFnZXMnLFxyXG5cclxuICAvLyBEUElfTWFrZUdsb2JhbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE1ha2VHbG9iYWwgPSAnaXNNYWtlR2xvYmFsJyxcclxuXHJcbiAgLy8gRFBJX01hbnVhbFNvcnRPbmx5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTWFudWFsU29ydE9ubHkgPSAnbWFudWFsU29ydE9ubHknLFxyXG5cclxuICAvLyBEUElfTWFwQm94RGVmYXVsdFN0eWxlU2VsZWN0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBNYXBCb3hEZWZhdWx0U3R5bGVTZWxlY3RlZCA9ICdtYXBib3hEZWZhdWx0U3R5bGVTZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9NYXBCb3hVUkxQYXJzZVN1Y2Nlc3NmdWwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBNYXBCb3hVUkxQYXJzZVN1Y2Nlc3NmdWwgPSAnbWFwYm94VXJsUGFyc2VTdWNjZXNzZnVsJyxcclxuXHJcbiAgLy8gRFBJX01hcENsaWVudFJlcXVlc3RzTWFwVGlsZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBNYXBDbGllbnRSZXF1ZXN0c01hcFRpbGVzID0gJ2NsaWVudFJlcXVlc3RzTWFwVGlsZXMnLFxyXG5cclxuICAvLyBEUElfTWFwSGFzVmFsaWRMYXllciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE1hcEhhc1ZhbGlkTGF5ZXIgPSAnbWFwSGFzVmFsaWRMYXllcicsXHJcblxyXG4gIC8vIERQSV9NYXBTaG93QXR0cmlidXRpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBNYXBTaG93QXR0cmlidXRpb24gPSAnc2hvd0F0dHJpYnV0aW9uJyxcclxuXHJcbiAgLy8gRFBJX01hcmtMYWJlbHNWaXNpYmlsaXR5Q2hhbmdlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE1hcmtMYWJlbHNWaXNpYmlsaXR5Q2hhbmdlZCA9ICdtYXJrTGFiZWxzVmlzaWJpbGl0eUNoYW5nZWQnLFxyXG5cclxuICAvLyBEUElfTWVtYmVyc0xvYWRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE1lbWJlcnNMb2FkZWQgPSAnbWVtYmVyc0xvYWRlZCcsXHJcblxyXG4gIC8vIERQSV9NaW5pbWl6ZU5hbWVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTWluaW1pemVOYW1lcyA9ICd1c2VNaW5OYW1lcycsXHJcblxyXG4gIC8vIERQSV9Nb2RlbHNUaW1lLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTW9kZWxzVGltZSA9ICdtb2RlbHNUaW1lJyxcclxuXHJcbiAgLy8gRFBJX01vdmVSZWZlcmVjZUxpbmVVcCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE1vdmVSZWZlcmVjZUxpbmVVcCA9ICdtb3ZlUmVmZXJlbmNlTGluZVVwJyxcclxuXHJcbiAgLy8gRFBJX011bHRpRGF0YVNvdXJjZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBNdWx0aURhdGFTb3VyY2VzID0gJ211bHRpRGF0YVNvdXJjZXMnLFxyXG5cclxuICAvLyBEUElfTmF2QXJyb3dzVmlzaWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE5hdkFycm93c1Zpc2libGUgPSAnbmF2QXJyb3dzVmlzaWJsZScsXHJcblxyXG4gIC8vIERQSV9PRU1IYXNTcGxhc2hTY3JlZW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBPRU1IYXNTcGxhc2hTY3JlZW4gPSAnb2VtSGFzU3BsYXNoU2NyZWVuJyxcclxuXHJcbiAgLy8gRFBJX09uZVdheUJydXNoaW5nLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgT25lV2F5QnJ1c2hpbmcgPSAnb25lV2F5QnJ1c2hpbmcnLFxyXG5cclxuICAvLyBEUElfT25seUFnZ3JlZ2F0aW9ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE9ubHlBZ2dyZWdhdGlvbnMgPSAnb25seUFnZ3JlZ2F0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Pbmx5U2hvd0RhdGVCaW5zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgT25seVNob3dEYXRlQmlucyA9ICdvbmx5U2hvd0RhdGVCaW5zJyxcclxuXHJcbiAgLy8gRFBJX092ZXJyaWRlQWxsb3dlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE92ZXJyaWRlQWxsb3dlZCA9ICdvdmVycmlkZUFsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfT3ZlcnJpZGVTdGFja0R1bXBlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE92ZXJyaWRlU3RhY2tEdW1wZXIgPSAnb3ZlcnJpZGVTdGFja0R1bXBlcicsXHJcblxyXG4gIC8vIERQSV9QYWdlQXV0b0NvbG9yTGluZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBQYWdlQXV0b0NvbG9yTGluZXMgPSAnYXV0b0NvbG9yTGluZXMnLFxyXG5cclxuICAvLyBEUElfUGFnZUF1dG9Db2xvck1hcmtzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUGFnZUF1dG9Db2xvck1hcmtzID0gJ2F1dG9Db2xvck1hcmtzJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VIaXN0b3J5RmFkZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFBhZ2VIaXN0b3J5RmFkZSA9ICdoaXN0b3J5RmFkZScsXHJcblxyXG4gIC8vIERQSV9QZXJjZW50YWdlQmFuZHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBQZXJjZW50YWdlQmFuZHMgPSAncGVyY2VudGFnZUJhbmRzJyxcclxuXHJcbiAgLy8gRFBJX1BlcmNlbnRpbGVzQWxsb3dlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFBlcmNlbnRpbGVzQWxsb3dlZCA9ICdwZXJjZW50aWxlc0FsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaFdpdGhSZW1vdGVRdWVyeUFnZW50LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUHVibGlzaFdpdGhSZW1vdGVRdWVyeUFnZW50ID0gJ3B1Ymxpc2hXaXRoUmVtb3RlUXVlcnlBZ2VudCcsXHJcblxyXG4gIC8vIERQSV9QcmV2aW91c1NoZWV0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUHJldmlvdXNTaGVldCA9ICdwcmV2aW91c1NoZWV0JyxcclxuXHJcbiAgLy8gRFBJX1Byb21wdERlbGV0ZVNoZWV0c1dpdGhWaXpJblRvb2x0aXAsIGhhdmluZyB0eXBlIGJvb2xcclxuICBQcm9tcHREZWxldGVTaGVldHNXaXRoVml6SW5Ub29sdGlwID0gJ3Byb21wdERlbGV0ZVNoZWV0c1dpdGhWaXpJblRvb2x0aXAnLFxyXG5cclxuICAvLyBEUElfUXVhbnRpbGVzQWxsb3dlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFF1YW50aWxlc0FsbG93ZWQgPSAncXVhbnRpbGVzQWxsb3dlZCcsXHJcblxyXG4gIC8vIERQSV9SYWRpYWxEaXN0YW5jZUhpdFRlc3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBSYWRpYWxEaXN0YW5jZUhpdFRlc3QgPSAncmFkaWFsRGlzdGFuY2VIaXRUZXN0JyxcclxuXHJcbiAgLy8gRFBJX1JlZkxpbmVTZWxlY3RlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFJlZkxpbmVTZWxlY3RlZCA9ICdyZWZMaW5lU2VsZWN0ZWQnLFxyXG5cclxuICAvLyBEUElfUmVtb3ZlZFNoZWV0cywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFJlbW92ZWRTaGVldHMgPSAncmVtb3ZlZFNoZWV0cycsXHJcblxyXG4gIC8vIERQSV9SZW5kZXJJbWFnZXNBc1VybHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBSZW5kZXJJbWFnZXNBc1VybHMgPSAnaW1hZ2VzQXNVcmxzJyxcclxuXHJcbiAgLy8gRFBJX1JlbmRlck9uVG9wLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUmVuZGVyT25Ub3AgPSAncmVuZGVyT25Ub3AnLFxyXG5cclxuICAvLyBEUElfUmVwZWF0SGVhZGVyc0xlZ2VuZHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBSZXBlYXRIZWFkZXJzTGVnZW5kcyA9ICdyZXBlYXRIZWFkZXJzTGVnZW5kcycsXHJcblxyXG4gIC8vIERQSV9SZXBsYWNlQWN0aXZlQ29uZmlnLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUmVwbGFjZUFjdGl2ZUNvbmZpZyA9ICdyZXBsYWNlQWN0aXZlQ29uZmlnJyxcclxuXHJcbiAgLy8gRFBJX1JlcGxhY2VEYXRhc291cmNlQWZ0ZXJQdWJsaXNoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUmVwbGFjZURhdGFzb3VyY2VBZnRlclB1Ymxpc2ggPSAncmVwbGFjZURhdGFzb3VyY2VBZnRlclB1Ymxpc2gnLFxyXG5cclxuICAvLyBEUElfUmVwbGFjZURhdGFzb3VyY2VGYWlsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBSZXBsYWNlRGF0YXNvdXJjZUZhaWxlZCA9ICdyZXBsYWNlRGF0YXNvdXJjZUZhaWxlZCcsXHJcblxyXG4gIC8vIERQSV9SZXBsYWNlVGRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUmVwbGFjZVRkZSA9ICdyZXBsYWNlVGRlJyxcclxuXHJcbiAgLy8gRFBJX1JlcXVpcmVTZWxlY3Rpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBSZXF1aXJlU2VsZWN0aW9uID0gJ3JlcXVpcmVTZWxlY3Rpb24nLFxyXG5cclxuICAvLyBEUElfUmVxdWlyZXNEQlZhcmlhYmxlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFJlcXVpcmVzREJWYXJpYWJsZXMgPSAncmVxdWlyZXNEYlZhcmlhYmxlcycsXHJcblxyXG4gIC8vIERQSV9SZXF1aXJlc0ZpZWxkTGlzdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFJlcXVpcmVzRmllbGRMaXN0ID0gJ3JlcXVpcmVzRmllbGRMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1Jlc3RhcnRFdmVyeUZpZWxkSXNJbnZhbGlkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUmVzdGFydEV2ZXJ5RmllbGRJc0ludmFsaWQgPSAncmVzdGFydEV2ZXJ5RmllbGRJc0ludmFsaWQnLFxyXG5cclxuICAvLyBEUElfUmlnaHRKdXN0aWZ5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgUmlnaHRKdXN0aWZ5ID0gJ3JpZ2h0SnVzdGlmeScsXHJcblxyXG4gIC8vIERQSV9TYXZlRW5hYmxlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNhdmVFbmFibGVkID0gJ3NhdmVFbmFibGVkJyxcclxuXHJcbiAgLy8gRFBJX1NhdmVQYXNzd29yZEFsbG93ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTYXZlUGFzc3dvcmRBbGxvd2VkID0gJ3NhdmVQYXNzd29yZEFsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfU2NvcGVJc29sYXRpb24sIGhhdmluZyB0eXBlIGJvb2xcclxuICBTY29wZUlzb2xhdGlvbiA9ICdzY29wZUlzb2xhdGlvbicsXHJcblxyXG4gIC8vIERQSV9TZWxlY3Rpb25SZXF1aXJlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNlbGVjdGlvblJlcXVpcmVkID0gJ3NlbGVjdGlvblJlcXVpcmVkJyxcclxuXHJcbiAgLy8gRFBJX1NlbmROb3RpZmljYXRpb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2VuZE5vdGlmaWNhdGlvbnMgPSAnc2VuZE5vdGlmaWNhdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU2V0QWN0aXZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2V0QWN0aXZlID0gJ3NldEFjdGl2ZScsXHJcblxyXG4gIC8vIERQSV9TZXREZWZhdWx0U29ydCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNldERlZmF1bHRTb3J0ID0gJ3NldERlZmF1bHQnLFxyXG5cclxuICAvLyBEUElfU2hlZXRJc0Rhc2hib2FyZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNoZWV0SXNEYXNoYm9hcmQgPSAnaXNEYXNoYm9hcmQnLFxyXG5cclxuICAvLyBEUElfU2hlZXRJc1N0b3J5Ym9hcmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaGVldElzU3Rvcnlib2FyZCA9ICdpc1N0b3J5JyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZEFsd2F5c0Rpc3BsYXlBbGlhcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZEFsd2F5c0Rpc3BsYXlBbGlhcyA9ICdzaG91bGRBbHdheXNEaXNwbGF5QWxpYXMnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkQXV0b0NhcHR1cmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRBdXRvQ2FwdHVyZSA9ICdzaG91bGRBdXRvQ2FwdHVyZScsXHJcblxyXG4gIC8vIERQSV9TaG91bGRBdXRvUmV2ZXJ0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvdWxkQXV0b1JldmVydCA9ICdzaG91bGRBdXRvUmV2ZXJ0JyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZENoYW5nZVVJTW9kZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZENoYW5nZVVJTW9kZSA9ICdzaG91bGRDaGFuZ2VVaU1vZGUnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkRGlzcGxheSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZERpc3BsYXkgPSAnc2hvdWxkRGlzcGxheScsXHJcblxyXG4gIC8vIERQSV9TaG91bGREcmlsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZERyaWxsID0gJ3Nob3VsZERyaWxsJyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZEZvcmNlQ29ubmVjdGlvbkF0dGVtcHQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRGb3JjZUNvbm5lY3Rpb25BdHRlbXB0ID0gJ3Nob3VsZEZvcmNlQ29ubmVjdGlvbkF0dGVtcHQnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkUmVmcmVzaERTLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvdWxkUmVmcmVzaERTID0gJ3Nob3VsZFJlZnJlc2hEcycsXHJcblxyXG4gIC8vIERQSV9TaG91bGRTY2FsZU1hcmtzSW5BeGlzVW5pdHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRTY2FsZU1hcmtzSW5BeGlzVW5pdHMgPSAnc2hvdWxkU2NhbGVNYXJrc0luQXhpc1VuaXRzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZFNlZWRDcmVkZW50aWFscywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZFNlZWRDcmVkZW50aWFscyA9ICdzaG91bGRTZWVkQ3JlZGVudGlhbHMnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkU2hvd0RhdGFTb3VyY2VDb25uZWN0aW9uRXJyb3IsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRTaG93RGF0YVNvdXJjZUNvbm5lY3Rpb25FcnJvciA9ICdzaG91bGRTaG93RGF0YVNvdXJjZUNvbm5lY3Rpb25FcnJvcicsXHJcblxyXG4gIC8vIERQSV9TaG91bGRTaG93RGlzdGFuY2UsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRTaG93RGlzdGFuY2UgPSAnc2hvdWxkU2hvd0Rpc3RhbmNlJyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZFNob3dIaWRkZW5GaWVsZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZFNob3dIaWRkZW5GaWVsZCA9ICdzaG91bGRTaG93SGlkZGVuRmllbGQnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkU2hvd01hcFNjYWxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvdWxkU2hvd01hcFNjYWxlID0gJ3Nob3VsZFNob3dNYXBTY2FsZScsXHJcblxyXG4gIC8vIERQSV9TaG91bGRVUkxFc2NhcGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRVUkxFc2NhcGUgPSAnc2hvdWxkVXJsRXNjYXBlJyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZFVwZGF0ZURvbWFpbkluZm8sIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRVcGRhdGVEb21haW5JbmZvID0gJ3Nob3VsZFVwZGF0ZURvbUluZm8nLFxyXG5cclxuICAvLyBEUElfU2hvd0FkZFRvRmlsdGVyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0FkZFRvRmlsdGVyID0gJ3Nob3dBZGRUb0ZpbHRlckJ1dHRvbicsXHJcblxyXG4gIC8vIERQSV9TaG93QWxpYXNlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dBbGlhc2VzID0gJ3Nob3dBbGlhc2VzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dBbGxQYWdlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dBbGxQYWdlcyA9ICdzaG93QWxsUGFnZXMnLFxyXG5cclxuICAvLyBEUElfU2hvd0FwcGx5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0FwcGx5ID0gJ3Nob3dBcHBseUJ1dHRvbicsXHJcblxyXG4gIC8vIERQSV9TaG93QXBwbHlBbmRDYW5jZWxCdXR0b25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0FwcGx5QW5kQ2FuY2VsQnV0dG9ucyA9ICdzaG93QXBwbHlBbmRDYW5jZWxCdXR0b25zJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dBdXRoZW50aWNhdGlvbk9wdGlvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93QXV0aGVudGljYXRpb25PcHRpb25zID0gJ3Nob3dBdXRoZW50aWNhdGlvbk9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU2hvd0F1dGhlbnRpY2F0aW9uU2V0dGluZywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dBdXRoZW50aWNhdGlvblNldHRpbmcgPSAnc2hvd0F1dGhlbnRpY2F0aW9uU2V0dGluZycsXHJcblxyXG4gIC8vIERQSV9TaG93QXV0bywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dBdXRvID0gJ3Nob3dBdXRvJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dCb2xkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0JvbGQgPSAnc2hvd0JvbGRPcHRpb24nLFxyXG5cclxuICAvLyBEUElfU2hvd0J1dHRvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93QnV0dG9ucyA9ICdzaG93QnV0dG9ucycsXHJcblxyXG4gIC8vIERQSV9TaG93Q2FwdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dDYXB0aW9uID0gJ3Nob3dDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dDb2xvckxlZ2VuZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dDb2xvckxlZ2VuZCA9ICdzaG93Q29sb3JMZWdlbmQnLFxyXG5cclxuICAvLyBEUElfU2hvd0RhdGFHcmlkSW5saW5lUmVuYW1lLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0RhdGFHcmlkSW5saW5lUmVuYW1lID0gJ3Nob3dEYXRhR3JpZElubGluZVJlbmFtZScsXHJcblxyXG4gIC8vIERQSV9TaG93RGV0YWlsTWVzc2FnZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93RGV0YWlsTWVzc2FnZXMgPSAnc2hvd0RldGFpbE1lc3NhZ2VzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dEYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0RhdGUgPSAnc2hvd0RhdGUnLFxyXG5cclxuICAvLyBEUElfU2hvd0RyYWdMYWJlbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dEcmFnTGFiZWwgPSAnc2hvd0RyYWdMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9TaG93RHJvcE1lYXN1cmVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0Ryb3BNZWFzdXJlcyA9ICdzaG93RHJvcE1lYXN1cmVzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dFbWJlZEFsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dFbWJlZEFsbCA9ICdzaG93RW1iZWRBbGwnLFxyXG5cclxuICAvLyBEUElfU2hvd0VudGlyZUltYWdlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0VudGlyZUltYWdlID0gJ3Nob3dFbnRpcmVJbWFnZScsXHJcblxyXG4gIC8vIERQSV9TaG93RXhjbHVkZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dFeGNsdWRlID0gJ3Nob3dFeGNsdWRlQnV0dG9uJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dGbG9hdGluZ1pvb21Ub29sYmFyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0Zsb2F0aW5nWm9vbVRvb2xiYXIgPSAnc2hvd0Zsb2F0aW5nWm9vbVRvb2xiYXInLFxyXG5cclxuICAvLyBEUElfU2hvd0Zvcm1hdHRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dGb3JtYXR0ZXIgPSAnc2hvd0Zvcm1hdHRlcicsXHJcblxyXG4gIC8vIERQSV9TaG93RnVsbFNjaGVkdWxlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dGdWxsU2NoZWR1bGVzID0gJ3Nob3dGdWxsU2NoZWR1bGVzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dHZW9ncmFwaGljU2VhcmNoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0dlb2dyYXBoaWNTZWFyY2ggPSAnc2hvd0dlb2dyYXBoaWNTZWFyY2gnLFxyXG5cclxuICAvLyBEUElfU2hvd0hpZGRlbkZpZWxkcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dIaWRkZW5GaWVsZHMgPSAnc2hvd0hpZGRlbkZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9TaG93SGlzdG9yeUNvbnRyb2xzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0hpc3RvcnlDb250cm9scyA9ICdzaG93SGlzdG9yeUNvbnRyb2xzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dJbmNsdWRlTG9jYWxGaWxlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dJbmNsdWRlTG9jYWxGaWxlcyA9ICdzaG93SW5jbHVkZUxvY2FsRmlsZXMnLFxyXG5cclxuICAvLyBEUElfU2hvd0luY2x1ZGVPdGhlck9wdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dJbmNsdWRlT3RoZXJPcHRpb24gPSAnc2hvd0luY2x1ZGVPdGhlck9wdGlvbicsXHJcblxyXG4gIC8vIERQSV9TaG93SW5jbHVkZVNlbGVjdGlvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93SW5jbHVkZVNlbGVjdGlvbnMgPSAnc2hvd0luY2x1ZGVTZWxlY3Rpb25zJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dJbmNyU2NoZWR1bGVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0luY3JTY2hlZHVsZXMgPSAnc2hvd0luY3JTY2hlZHVsZXMnLFxyXG5cclxuICAvLyBEUElfU2hvd0lubmVyTW9zdExldmVsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0lubmVyTW9zdExldmVsID0gJ3Nob3dJbm5lcm1vc3RMZXZlbCcsXHJcblxyXG4gIC8vIERQSV9TaG93SXRhbGljcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dJdGFsaWNzID0gJ3Nob3dJdGFsaWNzT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dMZWdlbmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93TGVnZW5kID0gJ3Nob3dMZWdlbmQnLFxyXG5cclxuICAvLyBEUElfU2hvd0xvY2tlZFBlcm1pc3Npb25zSWNvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dMb2NrZWRQZXJtaXNzaW9uc0ljb24gPSAnc2hvd0xvY2tlZFBlcm1pc3Npb25zSWNvbicsXHJcblxyXG4gIC8vIERQSV9TaG93TWFuYWdlRGF0YXNvdXJjZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93TWFuYWdlRGF0YXNvdXJjZXMgPSAnc2hvd01hbmFnZURhdGFzb3VyY2VzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dNYXBMZWdlbmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93TWFwTGVnZW5kID0gJ3Nob3dNYXBMZWdlbmQnLFxyXG5cclxuICAvLyBEUElfU2hvd01hcFNjYWxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd01hcFNjYWxlID0gJ3Nob3dNYXBTY2FsZScsXHJcblxyXG4gIC8vIERQSV9TaG93TWFwcGVkRmlsdGVyQ29scywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dNYXBwZWRGaWx0ZXJDb2xzID0gJ3Nob3dNYXBwZWRGaWx0ZXJDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dOYW1lLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd05hbWUgPSAnc2hvd05hbWUnLFxyXG5cclxuICAvLyBEUElfU2hvd05vbmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93Tm9uZSA9ICdzaG93Tm9uZScsXHJcblxyXG4gIC8vIERQSV9TaG93UGFnZVBsYXliYWNrLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1BhZ2VQbGF5YmFjayA9ICdzaG93UGFnZVBsYXliYWNrJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dQYWdlUmVhZG91dCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dQYWdlUmVhZG91dCA9ICdzaG93UGFnZVJlYWRvdXQnLFxyXG5cclxuICAvLyBEUElfU2hvd1BhZ2VTbGlkZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93UGFnZVNsaWRlciA9ICdzaG93UGFnZVNsaWRlcicsXHJcblxyXG4gIC8vIERQSV9TaG93UGFyZW50LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1BhcmVudCA9ICdzaG93UGFyZW50JyxcclxuXHJcbiAgLy8gRFBJX1Nob3dQZXJjZW50YWdlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dQZXJjZW50YWdlcyA9ICdzaG93UGVyY2VudGFnZXMnLFxyXG5cclxuICAvLyBEUElfU2hvd1ByZWRpY3Rpb25JbnRlcnZhbHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93UHJlZGljdGlvbkludGVydmFscyA9ICdzaG93UHJlZGljdGlvbkludGVydmFscycsXHJcblxyXG4gIC8vIERQSV9TaG93UHVibGlzaGVkRGF0YXNvdXJjZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93UHVibGlzaGVkRGF0YXNvdXJjZXMgPSAnc2hvd1B1Ymxpc2hlZERhdGFzb3VyY2VzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dSZWxEYXRlUGlja2VyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1JlbERhdGVQaWNrZXIgPSAnc2hvd1JlbERhdGVQaWNrZXInLFxyXG5cclxuICAvLyBEUElfU2hvd1JlcGxhY2VEYXRhc291cmNlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1JlcGxhY2VEYXRhc291cmNlID0gJ3Nob3dSZXBsYWNlRGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9TaG93U2VwYXJhdG9yLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1NlcGFyYXRvciA9ICdzaG93U2VwYXJhdG9yJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dTaGFwZUxlZ2VuZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dTaGFwZUxlZ2VuZCA9ICdzaG93U2hhcGVMZWdlbmQnLFxyXG5cclxuICAvLyBEUElfU2hvd1NpemVMZWdlbmQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93U2l6ZUxlZ2VuZCA9ICdzaG93U2l6ZUxlZ2VuZCcsXHJcblxyXG4gIC8vIERQSV9TaG93U2hlbGYsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93U2hlbGYgPSAnc2hvd1NoZWxmJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dTdHJ1Y3R1cmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93U3RydWN0dXJlID0gJ3Nob3dTdHJ1Y3R1cmUnLFxyXG5cclxuICAvLyBEUElfU2hvd1N5bmNDbGllbnRPcHRpb25zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1N5bmNDbGllbnRPcHRpb25zID0gJ3Nob3dTeW5jQ2xpZW50T3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9TaG93VGFic0FsbG93ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93VGFic0FsbG93ZWQgPSAnc2hvd1RhYnNBbGxvd2VkJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dUaW1lLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1RpbWUgPSAnc2hvd1RpbWUnLFxyXG5cclxuICAvLyBEUElfU2hvd1RpdGxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1RpdGxlID0gJ3Nob3dUaXRsZScsXHJcblxyXG4gIC8vIERQSV9TaG93VHJhbnNTbGlkZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93VHJhbnNTbGlkZXIgPSAnc2hvd1RyYW5zcGFyZW5jeVNsaWRlcicsXHJcblxyXG4gIC8vIERQSV9TaG93VW5kZXJsaW5lLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd1VuZGVybGluZSA9ICdzaG93VW5kZXJsaW5lT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dVc2VyVGh1bWJuYWlsT3B0aW9ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dVc2VyVGh1bWJuYWlsT3B0aW9ucyA9ICdzaG93VXNlclRodW1ibmFpbE9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU2hvd1ZpZXcsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93VmlldyA9ICdzaG93VmlldycsXHJcblxyXG4gIC8vIERQSV9TaG93Vmlld3MsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93Vmlld3MgPSAnc2hvd1ZpZXdzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dpbmdQYWdlTG9hZEVycm9yLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd2luZ1BhZ2VMb2FkRXJyb3IgPSAnc2hvd2luZ1BhZ2VMb2FkRXJyb3InLFxyXG5cclxuICAvLyBEUElfU3VwcmVzc0FsaWFzZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTdXByZXNzQWxpYXNlcyA9ICdzdXNwcmVzc0FsaWFzZXMnLFxyXG5cclxuICAvLyBEUElfU3VwcmVzc1Rob3VzYW5kc1NlcGFyYXRvciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFN1cHJlc3NUaG91c2FuZHNTZXBhcmF0b3IgPSAnc3VwcmVzc1Rob3VzYW5kc1NlcGFyYXRvcicsXHJcblxyXG4gIC8vIERQSV9TaW5nbGVTZWxlY3RPbmx5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2luZ2xlU2VsZWN0T25seSA9ICdzaW5nbGVTZWxlY3RPbmx5JyxcclxuXHJcbiAgLy8gRFBJX1NraXBDb25uZWN0QWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2tpcENvbm5lY3RBY3Rpb24gPSAnc2tpcENvbm5lY3RBY3Rpb24nLFxyXG5cclxuICAvLyBEUElfU2tpcElmQWN0aXZlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2tpcElmQWN0aXZlID0gJ3NraXBJZkFjdGl2ZScsXHJcblxyXG4gIC8vIERQSV9Ta2lwUmVmcmVzaCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNraXBSZWZyZXNoID0gJ3NraXBSZWZyZXNoJyxcclxuXHJcbiAgLy8gRFBJX1NraXBWYWxpZGF0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2tpcFZhbGlkYXRpb24gPSAnc2tpcFZhbGlkYXRpb24nLFxyXG5cclxuICAvLyBEUElfU2tpcHBlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNraXBwZWQgPSAnc2tpcHBlZCcsXHJcblxyXG4gIC8vIERQSV9Tb3J0RmllbGRJc0ludmFsaWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTb3J0RmllbGRJc0ludmFsaWQgPSAnc29ydEZpZWxkSXNJbnZhbGlkJyxcclxuXHJcbiAgLy8gRFBJX1NvcnRNb2RlSXNBdXRvLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU29ydE1vZGVJc0F1dG8gPSAnc29ydE1vZGVJc0F1dG8nLFxyXG5cclxuICAvLyBEUElfU3BsaXRPbkVkZ2VTbmFwLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3BsaXRPbkVkZ2VTbmFwID0gJ3NwbGl0T25FZGdlU25hcCcsXHJcblxyXG4gIC8vIERQSV9TdGFuZGFyZERldmlhdGlvbkFsbG93ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTdGFuZGFyZERldmlhdGlvbkFsbG93ZWQgPSAnc3RhbmRhcmREZXZpYXRpb25BbGxvd2VkJyxcclxuXHJcbiAgLy8gRFBJX1N0YXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3RhdGUgPSAnc3RhdGUnLFxyXG5cclxuICAvLyBEUElfU3RvcmVkUHJvY0Rpc2FibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3RvcmVkUHJvY0Rpc2FibGVkID0gJ3N0b3JlZFByb2NEaXNhYmxlZCcsXHJcblxyXG4gIC8vIERQSV9TdG9yZWRQcm9jc0Ryb3BhYmxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3RvcmVkUHJvY3NEcm9wYWJsZSA9ICdzdG9yZWRQcm9jc0Ryb3BhYmxlJyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5SXNFbXB0eSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFN0b3J5SXNFbXB0eSA9ICdzdG9yeUlzRW1wdHknLFxyXG5cclxuICAvLyBEUElfU3RvcnlQb2ludElzRW1wdHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBTdG9yeVBvaW50SXNFbXB0eSA9ICdzdG9yeVBvaW50SXNFbXB0eScsXHJcblxyXG4gIC8vIERQSV9TdWNjZXNzZnVsU2F2ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFN1Y2Nlc3NmdWxTYXZlID0gJ3N1Y2Nlc3NmdWxTYXZlJyxcclxuXHJcbiAgLy8gRFBJX1N1cHBvcnRYQXhpcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFN1cHBvcnRYQXhpcyA9ICdzdXBwb3J0WEF4aXMnLFxyXG5cclxuICAvLyBEUElfU3VwcG9ydFlBeGlzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3VwcG9ydFlBeGlzID0gJ3N1cHBvcnRZQXhpcycsXHJcblxyXG4gIC8vIERQSV9TdXBwb3J0c0NlbnRlckFsaWdubWVudCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFN1cHBvcnRzQ2VudGVyQWxpZ25tZW50ID0gJ3N1cHBvcnRzQ2VudGVyQWxpZ25tZW50JyxcclxuXHJcbiAgLy8gRFBJX1N1cHBvcnRzREJGaWx0ZXJzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3VwcG9ydHNEQkZpbHRlcnMgPSAnc3VwcG9ydHNEYXRhYmFzZUZpbHRlcnMnLFxyXG5cclxuICAvLyBEUElfU3VwcG9ydHNNdWx0aXBsZVZhbHVlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFN1cHBvcnRzTXVsdGlwbGVWYWx1ZXMgPSAnc3VwcG9ydHNNdWx0aXBsZVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9TdXBwb3J0c1JpZ2h0QWxpZ25tZW50LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3VwcG9ydHNSaWdodEFsaWdubWVudCA9ICdzdXBwb3J0c1JpZ2h0QWxpZ25tZW50JyxcclxuXHJcbiAgLy8gRFBJX1N1cHBvcnRzVGFibGVGaWx0ZXJzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3VwcG9ydHNUYWJsZUZpbHRlcnMgPSAnc3VwcG9ydHNUYWJsZUZpbHRlcnMnLFxyXG5cclxuICAvLyBEUElfU3ltbWV0cmljLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3ltbWV0cmljID0gJ3N5bW1ldHJpYycsXHJcblxyXG4gIC8vIERQSV9TeW5jQXV0b21hdGljRHJpbGwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTeW5jQXV0b21hdGljRHJpbGwgPSAnc3luY0F1dG9tYXRpY0RyaWxsJyxcclxuXHJcbiAgLy8gRFBJX1RhYnNBbGxvd2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVGFic0FsbG93ZWQgPSAndGFic0FsbG93ZWQnLFxyXG5cclxuICAvLyBEUElfVGV4dERyb3Bkb3duU3RhdGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBUZXh0RHJvcGRvd25TdGF0ZSA9ICd0b2dnbGVTdGF0ZScsXHJcblxyXG4gIC8vIERQSV9UaXRsZUlubGluZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFRpdGxlSW5saW5lID0gJ3RpdGxlSW5saW5lJyxcclxuXHJcbiAgLy8gRFBJX1RvZ2dsZUhpZ2hsaWdodFN0YXRlQ2hhbmdlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFRvZ2dsZUhpZ2hsaWdodFN0YXRlQ2hhbmdlZCA9ICd0b2dnbGVIaWdobGlnaHQnLFxyXG5cclxuICAvLyBEUElfVHJhbnNmb3JtZWQ4MEZvcm1hdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFRyYW5zZm9ybWVkODBGb3JtYXQgPSAnb2xkRm9ybWF0JyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZVNlbGVjdGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVHJlbmRMaW5lU2VsZWN0ZWQgPSAndHJlbmRMaW5lU2VsZWN0ZWQnLFxyXG5cclxuICAvLyBEUElfVHJ1bmNEYXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVHJ1bmNEYXRlID0gJ3RydW5jRGF0ZScsXHJcblxyXG4gIC8vIERQSV9UdXBsZVNlbGVjdGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVHVwbGVTZWxlY3RlZCA9ICd0dXBsZVNlbGVjdGVkJyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbkRpZFBhZ2VMb2FkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVUlBdXRvbWF0aW9uRGlkUGFnZUxvYWQgPSAndWlBdXRvbWF0aW9uRGlkUGFnZUxvYWQnLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uSXNDaGVja2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVUlBdXRvbWF0aW9uSXNDaGVja2VkID0gJ3VpQXV0b21hdGlvbklzQ2hlY2tlZCcsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25Jc0VuYWJsZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVSUF1dG9tYXRpb25Jc0VuYWJsZWQgPSAndWlBdXRvbWF0aW9uSXNFbmFibGVkJyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbklzRXZlbnRQcm9jZXNzZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVSUF1dG9tYXRpb25Jc0V2ZW50UHJvY2Vzc2VkID0gJ3VpQXV0b21hdGlvbklzRXZlbnRQcm9jZXNzZWQnLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uSXNGb2N1c2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVUlBdXRvbWF0aW9uSXNGb2N1c2VkID0gJ3VpQXV0b21hdGlvbklzRm9jdXNlZCcsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25Jc0ZvdW5kLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVUlBdXRvbWF0aW9uSXNGb3VuZCA9ICd1aUF1dG9tYXRpb25Jc0ZvdW5kJyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbklzUmVhZG9ubHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBVSUF1dG9tYXRpb25Jc1JlYWRvbmx5ID0gJ3VpQXV0b21hdGlvbklzUmVhZG9ubHknLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uSXNTZWxlY3RlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVJQXV0b21hdGlvbklzU2VsZWN0ZWQgPSAndWlBdXRvbWF0aW9uSXNTZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9VcGRhdGVBbGxQYW5lcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVwZGF0ZUFsbFBhbmVzID0gJ3VwZGF0ZUFsbFBhbmVzJyxcclxuXHJcbiAgLy8gRFBJX1VwZGF0ZURTQ2FwdGlvbk9ubHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBVcGRhdGVEU0NhcHRpb25Pbmx5ID0gJ3VwZGF0ZURzQ2FwdGlvbk9ubHknLFxyXG5cclxuICAvLyBEUElfVXBkYXRlTW9kZWxGcm9tUGFyYW1zLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXBkYXRlTW9kZWxGcm9tUGFyYW1zID0gJ3VwZGF0ZU1vZGVsRnJvbVBhcmFtcycsXHJcblxyXG4gIC8vIERQSV9VcGRhdGVTaGVsdmVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXBkYXRlU2hlbHZlcyA9ICd1cGRhdGVTaGVsdmVzJyxcclxuXHJcbiAgLy8gRFBJX1VwZGF0ZXNVc2VDb250ZXh0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXBkYXRlc1VzZUNvbnRleHQgPSAndXBkYXRlc1VzZUNvbnRleHQnLFxyXG5cclxuICAvLyBEUElfVXBncmFkZURvY3VtZW50VmVyc2lvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVwZ3JhZGVEb2N1bWVudFZlcnNpb24gPSAndXBncmFkZURvY3VtZW50VmVyc2lvbicsXHJcblxyXG4gIC8vIERQSV9Vc2VBbGlhc2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlQWxpYXNlcyA9ICd1c2VBbGlhc2VzJyxcclxuXHJcbiAgLy8gRFBJX1VzZUJsYW5rRm9yTnVsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUJsYW5rRm9yTnVsbCA9ICd1c2VCbGFua0Zvck51bGwnLFxyXG5cclxuICAvLyBEUElfVXNlQ2FsY3VsYXRpb25FZGl0b3IsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VDYWxjdWxhdGlvbkVkaXRvciA9ICd1c2VDYWxjdWxhdGlvbkVkaXRvcicsXHJcblxyXG4gIC8vIERQSV9Vc2VDZW50ZXJWYWx1ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUNlbnRlclZhbHVlID0gJ3VzZUNlbnRlclZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1VzZUNvbG9yLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlQ29sb3IgPSAndXNlQ29sb3InLFxyXG5cclxuICAvLyBEUElfVXNlQ3VzdG9tTWFya1NpemUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VDdXN0b21NYXJrU2l6ZSA9ICd1c2VDdXN0b21NYXJrU2l6ZScsXHJcblxyXG4gIC8vIERQSV9Vc2VEYXJrSWNvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VEYXJrSWNvbnMgPSAndXNlRGFya0ljb25zJyxcclxuXHJcbiAgLy8gRFBJX1VzZURhdGFTdG9yZU1pbmZpZWROYW1lcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZURhdGFTdG9yZU1pbmZpZWROYW1lcyA9ICd1c2VEYXRhc3RvcmVNaW5OYW1lcycsXHJcblxyXG4gIC8vIERQSV9Vc2VJbml0aWFsRG9tYWluVHlwZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUluaXRpYWxEb21haW5UeXBlID0gJ3VzZUluaXRpYWxEb21haW5UeXBlJyxcclxuXHJcbiAgLy8gRFBJX1VzZUVuZFZhbHVlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlRW5kVmFsdWUgPSAndXNlRW5kVmFsdWUnLFxyXG5cclxuICAvLyBEUElfVXNlRm9yT3ZlcmxheUhpdFRlc3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VGb3JPdmVybGF5SGl0VGVzdCA9ICd1c2VGb3JPdmVybGF5SGl0VGVzdCcsXHJcblxyXG4gIC8vIERQSV9Vc2VGdWxsQ29sb3JSYW5nZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUZ1bGxDb2xvclJhbmdlID0gJ3VzZUZ1bGxDb2xvclJhbmdlJyxcclxuXHJcbiAgLy8gRFBJX1VzZUZ1bGxEb21haW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VGdWxsRG9tYWluID0gJ3VzZUZ1bGxEb21haW4nLFxyXG5cclxuICAvLyBEUElfVXNlSW5saW5lSW1hZ2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlSW5saW5lSW1hZ2VzID0gJ3VzZUlubGluZUltYWdlcycsXHJcblxyXG4gIC8vIERQSV9Vc2VNZWFzdXJlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZU1lYXN1cmVzID0gJ3VzZU1lYXN1cmVzJyxcclxuXHJcbiAgLy8gRFBJX1VzZU5ld1F1aWNrRmlsdGVycywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZU5ld1F1aWNrRmlsdGVycyA9ICd1c2VOZXdRdWlja0ZpbHRlcnMnLFxyXG5cclxuICAvLyBEUElfVXNlTm90aWZpY2F0aW9uUmV0dXJuLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlTm90aWZpY2F0aW9uUmV0dXJuID0gJ3VzZU5vdGlmaWNhdGlvblJldHVybicsXHJcblxyXG4gIC8vIERQSV9Vc2VQYXJhbWV0ZXJzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlUGFyYW1ldGVycyA9ICd1c2VQYXJhbWV0ZXJzJyxcclxuXHJcbiAgLy8gRFBJX1VzZVNlbGVjdG9yLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlU2VsZWN0b3IgPSAndXNlU2VsZWN0b3InLFxyXG5cclxuICAvLyBEUElfVXNlU2lnbmlmaWNhbnREaWdpdHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VTaWduaWZpY2FudERpZ2l0cyA9ICd1c2VTaWduaWZpY2FudERpZ2l0cycsXHJcblxyXG4gIC8vIERQSV9Vc2VTcGVjaWFsU3RyaW5ncywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZVNwZWNpYWxTdHJpbmdzID0gJ3VzZVNwZWNpYWxTdHJpbmdzJyxcclxuXHJcbiAgLy8gRFBJX1VzZVN0YXJ0VmFsdWUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VTdGFydFZhbHVlID0gJ3VzZVN0YXJ0VmFsdWUnLFxyXG5cclxuICAvLyBEUElfVXNlVGFicywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZVRhYnMgPSAndXNlVGFicycsXHJcblxyXG4gIC8vIERQSV9Vc2VUYWJsZXRBc0RlZmF1bHRQcmV2aWV3LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlVGFibGV0QXNEZWZhdWx0UHJldmlldyA9ICd1c2VUYWJsZXRBc0RlZmF1bHRQcmV2aWV3JyxcclxuXHJcbiAgLy8gRFBJX1VzZVRhcmdldFB0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVXNlVGFyZ2V0UHQgPSAndXNlVGFyZ2V0UG9pbnQnLFxyXG5cclxuICAvLyBEUElfVXNlVVNMb2NhbGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VVU0xvY2FsZSA9ICd1c2VVc0xvY2FsZScsXHJcblxyXG4gIC8vIERQSV9Vc2VZQXhpcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZVlBeGlzID0gJ3VzZVlBeGlzJyxcclxuXHJcbiAgLy8gRFBJX1ZhbGlkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgVmFsaWQgPSAndmFsaWQnLFxyXG5cclxuICAvLyBEUElfVml6RGF0YVY4MiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFZpekRhdGFWODIgPSAndml6RGF0YTgyJyxcclxuXHJcbiAgLy8gRFBJX1dhc0NhbmNlbGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgV2FzQ2FuY2VsZWQgPSAnd2FzQ2FuY2VsZWQnLFxyXG5cclxuICAvLyBEUElfV01TQ29ubmVjdGlvblN1Y2Nlc3NmdWwsIGhhdmluZyB0eXBlIGJvb2xcclxuICBXTVNDb25uZWN0aW9uU3VjY2Vzc2Z1bCA9ICd3bXNDb25uZWN0aW9uU3VjY2Vzc2Z1bCcsXHJcblxyXG4gIC8vIERQSV9XTVNTaG91bGRVc2VUaWxlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFdNU1Nob3VsZFVzZVRpbGVzID0gJ3dtc1Nob3VsZFVzZVRpbGVzJyxcclxuXHJcbiAgLy8gRFBJX1dhbnREb21haW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBXYW50RG9tYWluID0gJ3dhbnREb21haW4nLFxyXG5cclxuICAvLyBEUElfV29ya2Jvb2tNb2RpZmllZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFdvcmtib29rTW9kaWZpZWQgPSAnd29ya2Jvb2tNb2RpZmllZCcsXHJcblxyXG4gIC8vIERQSV9ab29tSW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBab29tSW4gPSAnem9vbUluJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dNYXJrTGFiZWxzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd01hcmtMYWJlbHMgPSAnc2hvd01hcmtMYWJlbHMnLFxyXG5cclxuICAvLyBEUElfSGFzRHVwbGljYXRlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0R1cGxpY2F0ZXMgPSAnaGFzRHVwbGljYXRlcycsXHJcblxyXG4gIC8vIERQSV9IYXNVc2VyRGVmaW5lZEluY3JlbWVudCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1VzZXJEZWZpbmVkSW5jcmVtZW50ID0gJ2hhc1VzZXJEZWZpbmVkSW5jcmVtZW50JyxcclxuXHJcbiAgLy8gRFBJX0hhc1VzZXJEZWZpbmVkTWF4LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzVXNlckRlZmluZWRNYXggPSAnaGFzVXNlckRlZmluZWRNYXgnLFxyXG5cclxuICAvLyBEUElfSGFzVXNlckRlZmluZWRNaW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBIYXNVc2VyRGVmaW5lZE1pbiA9ICdoYXNVc2VyRGVmaW5lZE1pbicsXHJcblxyXG4gIC8vIERQSV9Jc0R1cGxpY2F0ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzRHVwbGljYXRlID0gJ2lzRHVwbGljYXRlJyxcclxuXHJcbiAgLy8gRFBJX0lzRWRpdGluZ1ZhbHVlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNFZGl0aW5nVmFsdWUgPSAnaXNFZGl0aW5nVmFsdWUnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkUmVzdHJpY3REYXRhVHlwZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZFJlc3RyaWN0RGF0YVR5cGUgPSAncmVzdHJpY3REYXRhVHlwZScsXHJcblxyXG4gIC8vIERQSV9FbmFibGVJbmNsdWRlWmVybywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZUluY2x1ZGVaZXJvID0gJ2VuYWJsZUluY2x1ZGVaZXJvJyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZVN5bmNEdWFsQXhlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZVN5bmNEdWFsQXhlcyA9ICdlbmFibGVTeW5jaHJvbml6ZUR1YWxBeGVzJyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZVNob3dUaW1lcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEVuYWJsZVNob3dUaW1lcyA9ICdlbmFibGVTaG93VGltZXMnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlVGlja01hcmtzVGFiLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgRW5hYmxlVGlja01hcmtzVGFiID0gJ2VuYWJsZVRpY2tNYXJrc1RhYicsXHJcblxyXG4gIC8vIERQSV9Jc1RlbXBvcmFsLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUZW1wb3JhbCA9ICdpc1RlbXBvcmFsJyxcclxuXHJcbiAgLy8gRFBJX1Nob3VsZEluY2x1ZGVaZXJvLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvdWxkSW5jbHVkZVplcm8gPSAnc2hvdWxkSW5jbHVkZVplcm8nLFxyXG5cclxuICAvLyBEUElfU2hvdWxkUmV2ZXJzZUF4aXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRSZXZlcnNlQXhpcyA9ICdzaG91bGRSZXZlcnNlQXhpcycsXHJcblxyXG4gIC8vIERQSV9TaG91bGRTaG93VGltZXMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG91bGRTaG93VGltZXMgPSAnc2hvdWxkU2hvd1RpbWVzJyxcclxuXHJcbiAgLy8gRFBJX1VzZUF1dG9tYXRpY0F4aXNTdWJ0aXRsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUF1dG9tYXRpY0F4aXNTdWJ0aXRsZSA9ICd1c2VBdXRvbWF0aWNTdWJ0aXRsZScsXHJcblxyXG4gIC8vIERQSV9Vc2VBdXRvbWF0aWNBeGlzVGl0bGUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VBdXRvbWF0aWNBeGlzVGl0bGUgPSAndXNlQXV0b21hdGljVGl0bGUnLFxyXG5cclxuICAvLyBEUElfQWxsU2VsZWN0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBBbGxTZWxlY3RlZCA9ICdhbGxTZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9BdXRvQ29tbWl0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXV0b0NvbW1pdCA9ICdhdXRvQ29tbWl0JyxcclxuXHJcbiAgLy8gRFBJX0NhY2hlT25seSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhY2hlT25seSA9ICdjYWNoZU9ubHknLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZURhdGEsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlRGF0YSA9ICdpbmNsdWRlRGF0YScsXHJcblxyXG4gIC8vIERQSV9Jc1BhdHRlcm5FeGNsdXNpdmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1BhdHRlcm5FeGNsdXNpdmUgPSAnaXNQYXR0ZXJuRXhjbHVzaXZlJyxcclxuXHJcbiAgLy8gRFBJX0lzU2VhcmNoYWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU2VhcmNoYWJsZSA9ICdpc1NlYXJjaGFibGUnLFxyXG5cclxuICAvLyBEUElfSXNTZWxlY3Rpb25FeGNsdXNpdmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1NlbGVjdGlvbkV4Y2x1c2l2ZSA9ICdpc1NlbGVjdGlvbkV4Y2x1c2l2ZScsXHJcblxyXG4gIC8vIERQSV9SZXNldE5ld0ZpbHRlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFJlc2V0TmV3RmlsdGVyID0gJ3Jlc2V0TmV3RmlsdGVyJyxcclxuXHJcbiAgLy8gRFBJX1VzZUFsbFdoZW5NYW51YWxFbXB0eSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUFsbFdoZW5NYW51YWxFbXB0eSA9ICd1c2VBbGxXaGVuTWFudWFsRW1wdHknLFxyXG5cclxuICAvLyBEUElfVXNlQWxsV2hlblBhdHRlcm5FbXB0eSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZUFsbFdoZW5QYXR0ZXJuRW1wdHkgPSAndXNlQWxsV2hlblBhdHRlcm5FbXB0eScsXHJcblxyXG4gIC8vIERQSV9Hcm91cEJ5RHJpbGxEb3duLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgR3JvdXBCeURyaWxsRG93biA9ICdncm91cEJ5RHJpbGxEb3duJyxcclxuXHJcbiAgLy8gRFBJX0dyb3VwQnlUYWJsZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEdyb3VwQnlUYWJsZSA9ICdncm91cEJ5VGFibGUnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZUdyb3VwcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVHcm91cHMgPSAnaW5jbHVkZUdyb3VwcycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlUGVuZGluZ1N0YXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZVBlbmRpbmdTdGF0ZSA9ICdpbmNsdWRlUGVuZGluZ1N0YXRlJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVGaWVsZE1lbnVzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZUZpZWxkTWVudXMgPSAnaW5jbHVkZUZpZWxkTWVudXMnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZUZvcm1hdHRlZFZhbHVlcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVGb3JtYXR0ZWRWYWx1ZXMgPSAnaW5jbHVkZUZvcm1hdHRlZFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlQ29sdW1uSW5zdGFuY2VzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZUNvbHVtbkluc3RhbmNlcyA9ICdpbmNsdWRlQ29sdW1uSW5zdGFuY2VzJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVBZEhvY0NhbGNzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSW5jbHVkZUFkSG9jQ2FsY3MgPSAnaW5jbHVkZUFkaG9jQ2FsY3MnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZUhpZGRlbkludmFsaWRGaWVsZHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlSGlkZGVuSW52YWxpZEZpZWxkcyA9ICdpbmNsdWRlSGlkZGVuSW52YWxpZEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlTm9uRXh0cmFjdGVkQ29sdW1ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVOb25FeHRyYWN0ZWRDb2x1bW5zID0gJ2luY2x1ZGVOb25FeHRyYWN0ZWRDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVDYWxjdWxhdGVkRmllbGRGb3JtdWxhcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVDYWxjdWxhdGVkRmllbGRGb3JtdWxhcyA9ICdpbmNsdWRlQ2FsY3VsYXRlZEZpZWxkRm9ybXVsYXMnLFxyXG5cclxuICAvLyBEUElfU2V0RGF0YVByZXZpZXdDdXN0b21GaWVsZE9yZGVyLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2V0RGF0YVByZXZpZXdDdXN0b21GaWVsZE9yZGVyID0gJ3NldERhdGFQcmV2aWV3Q3VzdG9tRmllbGRPcmRlcicsXHJcblxyXG4gIC8vIERQSV9DdXN0b21TcGxpdEFsbG93U3BsaXRGcm9tUmlnaHQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDdXN0b21TcGxpdEFsbG93U3BsaXRGcm9tUmlnaHQgPSAnY3VzdG9tU3BsaXRBbGxvd1NwbGl0RnJvbVJpZ2h0JyxcclxuXHJcbiAgLy8gRFBJX0lzQ2hhbmdlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQ2hhbmdlZCA9ICdpc0NoYW5nZWQnLFxyXG5cclxuICAvLyBEUElfU2hvd0ZvbnRDb2xvclBpY2tlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dGb250Q29sb3JQaWNrZXIgPSAnc2hvd0ZvbnRDb2xvclBpY2tlcicsXHJcblxyXG4gIC8vIERQSV9TaG93Rm9udEZhbWlseVBpY2tlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dGb250RmFtaWx5UGlja2VyID0gJ3Nob3dGb250RmFtaWx5UGlja2VyJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dGb250U2l6ZVBpY2tlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dGb250U2l6ZVBpY2tlciA9ICdzaG93Rm9udFNpemVQaWNrZXInLFxyXG5cclxuICAvLyBEUElfU2hvd0ZvbnRTdHlsZUJ1dHRvbnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93Rm9udFN0eWxlQnV0dG9ucyA9ICdzaG93Rm9udFN0eWxlQnV0dG9ucycsXHJcblxyXG4gIC8vIERQSV9TaG93TGluZUZvckFsbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dMaW5lRm9yQWxsID0gJ3Nob3dMaW5lRm9yQWxsJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dMaW5lRm9yQ29sdW1uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0xpbmVGb3JDb2x1bW4gPSAnc2hvd0xpbmVGb3JDb2x1bW4nLFxyXG5cclxuICAvLyBEUElfU2hvd0xpbmVGb3JSb3csIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93TGluZUZvclJvdyA9ICdzaG93TGluZUZvclJvdycsXHJcblxyXG4gIC8vIERQSV9TaG93TGluZVBhdHRlcm5QaWNrZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTaG93TGluZVBhdHRlcm5QaWNrZXIgPSAnc2hvd0xpbmVQYXR0ZXJuUGlja2VyJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dMaW5lVHJhbnNwYXJlbmN5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU2hvd0xpbmVUcmFuc3BhcmVuY3kgPSAnc2hvd0xpbmVUcmFuc3BhcmVuY3knLFxyXG5cclxuICAvLyBEUElfU2hvd0xpbmVXaWR0aFBpY2tlciwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dMaW5lV2lkdGhQaWNrZXIgPSAnc2hvd0xpbmVXaWR0aFBpY2tlcicsXHJcblxyXG4gIC8vIERQSV9DYW5CZUF1dG8sIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5CZUF1dG8gPSAnY2FuQmVBdXRvJyxcclxuXHJcbiAgLy8gRFBJX0NhbkJlTm9uZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENhbkJlTm9uZSA9ICdjYW5CZU5vbmUnLFxyXG5cclxuICAvLyBEUElfQ2FuTWF0Y2hNYXJrQ29sb3IsIGhhdmluZyB0eXBlIGJvb2xcclxuICBDYW5NYXRjaE1hcmtDb2xvciA9ICdjYW5NYXRjaE1hcmtDb2xvcicsXHJcblxyXG4gIC8vIERQSV9IYXNPcGFjaXR5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzT3BhY2l0eSA9ICdoYXNPcGFjaXR5JyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVBbGxIaWRkZW4sIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlQWxsSGlkZGVuID0gJ2luY2x1ZGVBbGxIaWRkZW4nLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZUN1cnJlbnQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJbmNsdWRlQ3VycmVudCA9ICdpbmNsdWRlQ3VycmVudCcsXHJcblxyXG4gIC8vIERQSV9Jc0luY2x1ZGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNJbmNsdWRlZCA9ICdpc0luY2x1ZGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzUmVsYXRpdmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1JlbGF0aXZlID0gJ2lzUmVsYXRpdmUnLFxyXG5cclxuICAvLyBEUElfSXNTZWNvbmRhcnlBbGxvd2VkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNTZWNvbmRhcnlBbGxvd2VkID0gJ2lzU2Vjb25kYXJ5QWxsb3dlZCcsXHJcblxyXG4gIC8vIERQSV9OdWxsSWZJbmNvbXBsZXRlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTnVsbElmSW5jb21wbGV0ZSA9ICdudWxsSWZJbmNvbXBsZXRlJyxcclxuXHJcbiAgLy8gRFBJX0lzQ2FsY0Fzc2lzdGFuY2VFbmFibGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNDYWxjQXNzaXN0YW5jZUVuYWJsZWQgPSAnaXNDYWxjQXNzaXN0YW5jZUVuYWJsZWQnLFxyXG5cclxuICAvLyBEUElfVXNlU2Vjb25kYXJ5Q2FsYywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZVNlY29uZGFyeUNhbGMgPSAndXNlU2Vjb25kYXJ5Q2FsYycsXHJcblxyXG4gIC8vIERQSV9DYW5Mb2FkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2FuTG9hZCA9ICdjYW5Mb2FkJyxcclxuXHJcbiAgLy8gRFBJX0Rlc2NyaXB0aW9uT25seSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIERlc2NyaXB0aW9uT25seSA9ICdkZXNjcmlwdGlvbk9ubHknLFxyXG5cclxuICAvLyBEUElfQXJlQWxpYXNlc1N1cHBvcnRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFyZUFsaWFzZXNTdXBwb3J0ZWQgPSAnYXJlQWxpYXNlc1N1cHBvcnRlZCcsXHJcblxyXG4gIC8vIERQSV9BcmVSZWZDb2x1bW5zU3VwcG9ydGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQXJlUmVmQ29sdW1uc1N1cHBvcnRlZCA9ICdhcmVSZWZDb2x1bW5zU3VwcG9ydGVkJyxcclxuXHJcbiAgLy8gRFBJX0lzQWdncmVnYXRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzQWdncmVnYXRlZCA9ICdpc0FnZ3JlZ2F0ZWQnLFxyXG5cclxuICAvLyBEUElfSXNFeHBvcnRTdXBwb3J0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0V4cG9ydFN1cHBvcnRlZCA9ICdpc0V4cG9ydFN1cHBvcnRlZCcsXHJcblxyXG4gIC8vIERQSV9Jc01lYXN1cmVOYW1lcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTWVhc3VyZU5hbWVzID0gJ2lzTWVhc3VyZU5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0lzU3VtbWFyeVN1cHBvcnRlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzU3VtbWFyeVN1cHBvcnRlZCA9ICdpc1N1bW1hcnlTdXBwb3J0ZWQnLFxyXG5cclxuICAvLyBEUElfSXNUb3BOU3VwcG9ydGVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNUb3BOU3VwcG9ydGVkID0gJ2lzVG9wTlN1cHBvcnRlZCcsXHJcblxyXG4gIC8vIERQSV9Jc1VuZGVybHlpbmdTdXBwb3J0ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc1VuZGVybHlpbmdTdXBwb3J0ZWQgPSAnaXNVbmRlcmx5aW5nU3VwcG9ydGVkJyxcclxuXHJcbiAgLy8gRFBJX09ubHlFeHBvcnRTdW1tYXJ5LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgT25seUV4cG9ydFN1bW1hcnkgPSAnb25seUV4cG9ydFN1bW1hcnknLFxyXG5cclxuICAvLyBEUElfU2hvd0FsbEZpZWxkcywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dBbGxGaWVsZHMgPSAnc2hvd0FsbEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9Vc2VUYWJsZVB0cnMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBVc2VUYWJsZVB0cnMgPSAndXNlVGFibGVQdHJzJyxcclxuXHJcbiAgLy8gRFBJX09ubHlGZXRjaFN1bW1hcnksIGhhdmluZyB0eXBlIGJvb2xcclxuICBPbmx5RmV0Y2hTdW1tYXJ5ID0gJ29ubHlGZXRjaFN1bW1hcnknLFxyXG5cclxuICAvLyBEUElfSXNEZXZpY2VMYXlvdXRDdXN0b21pemVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEZXZpY2VMYXlvdXRDdXN0b21pemVkID0gJ2lzRGV2aWNlTGF5b3V0Q3VzdG9taXplZCcsXHJcblxyXG4gIC8vIERQSV9Jc0RldmljZVNpemVDdXN0b21pemVkLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEZXZpY2VTaXplQ3VzdG9taXplZCA9ICdpc0RldmljZVNpemVDdXN0b21pemVkJyxcclxuXHJcbiAgLy8gRFBJX0lzRGV2aWNlU3VwcG9ydGVkQnlNb2JpbGVBcHAsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0RldmljZVN1cHBvcnRlZEJ5TW9iaWxlQXBwID0gJ2lzRGV2aWNlU3VwcG9ydGVkQnlNb2JpbGVBcHAnLFxyXG5cclxuICAvLyBEUElfSXNQb3J0cmFpdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzUG9ydHJhaXQgPSAnaXNQb3J0cmFpdCcsXHJcblxyXG4gIC8vIERQSV9Jc1BvcnRyYWl0QnlEZWZhdWx0LCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNQb3J0cmFpdEJ5RGVmYXVsdCA9ICdpc1BvcnRyYWl0QnlEZWZhdWx0JyxcclxuXHJcbiAgLy8gRFBJX0lzVXNlckN1c3RvbUZvcm1hdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzVXNlckN1c3RvbUZvcm1hdCA9ICdpc1VzZXJDdXN0b21Gb3JtYXQnLFxyXG5cclxuICAvLyBEUElfU2hvdWxkRGlzcGxheVJlYnVpbGRFeHRyYWN0TWVzc2FnZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3VsZERpc3BsYXlSZWJ1aWxkRXh0cmFjdE1lc3NhZ2UgPSAnc2hvdWxkRGlzcGxheVJlYnVpbGRFeHRyYWN0TWVzc2FnZScsXHJcblxyXG4gIC8vIERQSV9TdXBwb3J0c0N1c3RvbVN0YXJ0T2ZXZWVrLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgU3VwcG9ydHNDdXN0b21TdGFydE9mV2VlayA9ICdzdXBwb3J0c0N1c3RvbVN0YXJ0T2ZXZWVrJyxcclxuXHJcbiAgLy8gRFBJX05lZWRzQ29ubmVjdFByb21wdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE5lZWRzQ29ubmVjdFByb21wdCA9ICduZWVkc0Nvbm5lY3RQcm9tcHQnLFxyXG5cclxuICAvLyBEUElfTmVlZHNDbG9zZURhdGFTb3VyY2VFcnJvclByb21wdCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIE5lZWRzQ2xvc2VEYXRhU291cmNlRXJyb3JQcm9tcHQgPSAnbmVlZHNDbG9zZURzRXJyb3JQcm9tcHQnLFxyXG5cclxuICAvLyBEUElfQ2xlYXJDdXJyZW50U2VsZWN0aW9uLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgQ2xlYXJDdXJyZW50U2VsZWN0aW9uID0gJ2NsZWFyQ3VycmVudFNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9IYXNDb250YWlucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc0NvbnRhaW5zID0gJ2hhc0NvbnRhaW5zJyxcclxuXHJcbiAgLy8gRFBJX0hhc0VuZHNXaXRoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzRW5kc1dpdGggPSAnaGFzRW5kc1dpdGgnLFxyXG5cclxuICAvLyBEUElfSGFzUmVwbGFjZVNlbGVjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEhhc1JlcGxhY2VTZWxlY3Rpb24gPSAnaGFzUmVwbGFjZVNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9IYXNTdGFydHNXaXRoLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSGFzU3RhcnRzV2l0aCA9ICdoYXNTdGFydHNXaXRoJyxcclxuXHJcbiAgLy8gRFBJX0lzTGVhZlNlbGVjdGlvbk9ubHksIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0xlYWZTZWxlY3Rpb25Pbmx5ID0gJ2lzTGVhZlNlbGVjdGlvbk9ubHknLFxyXG5cclxuICAvLyBEUElfUmVwbGFjZVNlbGVjdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFJlcGxhY2VTZWxlY3Rpb24gPSAncmVwbGFjZVNlbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9Jc0NvbG9yUGFsZXR0ZUN1c3RvbWl6ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0NvbG9yUGFsZXR0ZUN1c3RvbWl6ZWQgPSAnaXNDb2xvclBhbGV0dGVDdXN0b21pemVkJyxcclxuXHJcbiAgLy8gRFBJX1JldmVyc2VQYWxldHRlT3JkZXIsIGhhdmluZyB0eXBlIGJvb2xcclxuICBSZXZlcnNlUGFsZXR0ZU9yZGVyID0gJ3JldmVyc2VQYWxldHRlT3JkZXInLFxyXG5cclxuICAvLyBEUElfVHJpZWRUb0Nvbm5lY3QsIGhhdmluZyB0eXBlIGJvb2xcclxuICBUcmllZFRvQ29ubmVjdCA9ICd0cmllZFRvQ29ubmVjdCcsXHJcblxyXG4gIC8vIERQSV9TY2FsZU1hcmtzSW5BeGlzVW5pdHMsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTY2FsZU1hcmtzSW5BeGlzVW5pdHMgPSAnc2NhbGVNYXJrc0luQXhpc1VuaXRzJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dNYXJrU2l6aW5nT3B0aW9ucywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dNYXJrU2l6aW5nT3B0aW9ucyA9ICdzaG93TWFya1NpemluZ09wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfVXNlU2l6ZUZpZWxkQ2FwdGlvbiwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFVzZVNpemVGaWVsZENhcHRpb24gPSAndXNlU2l6ZUZpZWxkQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9Jc0xpY2Vuc2VkQW5kUmVnaXN0ZXJlZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIElzTGljZW5zZWRBbmRSZWdpc3RlcmVkID0gJ2lzTGljZW5zZWRBbmRSZWdpc3RlcmVkJyxcclxuXHJcbiAgLy8gRFBJX1NldE5ld0RhdGFzb3VyY2VBY3RpdmUsIGhhdmluZyB0eXBlIGJvb2xcclxuICBTZXROZXdEYXRhc291cmNlQWN0aXZlID0gJ3NldE5ld0RhdGFzb3VyY2VBY3RpdmUnLFxyXG5cclxuICAvLyBEUElfQWxsb3dDdXN0b21MYWJlbCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEFsbG93Q3VzdG9tTGFiZWwgPSAnYWxsb3dDdXN0b21MYWJlbCcsXHJcblxyXG4gIC8vIERQSV9Jc01vc3RSZWNlbnRNb2RlVmFsaWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc01vc3RSZWNlbnRNb2RlVmFsaWQgPSAnaXNNb3N0UmVjZW50TW9kZVZhbGlkJyxcclxuXHJcbiAgLy8gRFBJX011c3RTaG93TGFiZWxzLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgTXVzdFNob3dMYWJlbHMgPSAnbXVzdFNob3dMYWJlbHMnLFxyXG5cclxuICAvLyBEUElfU2hvd1J1bm5pbmdPcmRlckxhYmVscywgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIFNob3dSdW5uaW5nT3JkZXJMYWJlbHMgPSAnc2hvd1J1bm5pbmdPcmRlckxhYmVscycsXHJcblxyXG4gIC8vIERQSV9Jc0Ryb3BwZWRGaWxlLCBoYXZpbmcgdHlwZSBib29sXHJcbiAgSXNEcm9wcGVkRmlsZSA9ICdpc0Ryb3BwZWRGaWxlJyxcclxuXHJcbiAgLy8gRFBJX0lzSW5pdGlhbGl6ZWQsIGhhdmluZyB0eXBlIGJvb2xcclxuICBJc0luaXRpYWxpemVkID0gJ2lzSW5pdGlhbGl6ZWQnLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZURhc2hib2FyZCwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIEluY2x1ZGVEYXNoYm9hcmQgPSAnaW5jbHVkZURhc2hib2FyZCcsXHJcblxyXG4gIC8vIERQSV9DaGlsZHJlbkNhblJlc2l6ZSwgaGF2aW5nIHR5cGUgYm9vbFxyXG4gIENoaWxkcmVuQ2FuUmVzaXplID0gJ2NoaWxkcmVuQ2FuUmVzaXplJyxcclxuXHJcbiAgLy8gRFBJX0Jvb2xNYXAsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2YgYm9vbClcclxuICBCb29sTWFwID0gJ2Jvb2xNYXAnLFxyXG5cclxuICAvLyBEUElfQ2hlY2tlZE1lbnVJdGVtcywgaGF2aW5nIHR5cGUgYm9vbFtdXHJcbiAgQ2hlY2tlZE1lbnVJdGVtcyA9ICdjaGVja2VkTWVudUl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVkU2hlZXRWYWx1ZXMsIGhhdmluZyB0eXBlIGJvb2xbXVxyXG4gIEluY2x1ZGVkU2hlZXRWYWx1ZXMgPSAnaW5jbHVkZWRTaGVldFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9Tb3J0T3JkZXJWZWN0b3IsIGhhdmluZyB0eXBlIGJvb2xbXVxyXG4gIFNvcnRPcmRlclZlY3RvciA9ICdzb3J0T3JkZXJWZWN0b3InLFxyXG5cclxuICAvLyBEUElfQWN0aW9uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWN0aW9uTmFtZSA9ICdhY3Rpb25OYW1lJyxcclxuXHJcbiAgLy8gRFBJX0FjdGlvblNvdXJjZVRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFjdGlvblNvdXJjZVRleHQgPSAnYWN0aW9uU291cmNlVGV4dCcsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25UeXBlQXNTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFjdGlvblR5cGVBc1N0cmluZyA9ICdhY3Rpb25UeXBlQXNTdHJpbmcnLFxyXG5cclxuICAvLyBEUElfQWN0aXZlVGFiLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBY3RpdmVUYWIgPSAnYWN0aXZlX3RhYicsXHJcblxyXG4gIC8vIERQSV9BZGRJbkZlYXR1cmVOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBZGRJbkZlYXR1cmVOYW1lID0gJ2FkZEluRmVhdHVyZU5hbWUnLFxyXG5cclxuICAvLyBEUElfQWRkSW5JZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWRkSW5JZCA9ICdhZGRJbklkJyxcclxuXHJcbiAgLy8gRFBJX0FkZEluc3RhbmNlSWQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFkZEluc3RhbmNlSWQgPSAnYWRkSW5JbnN0YW5jZUlkJyxcclxuXHJcbiAgLy8gRFBJX0FkZEluTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWRkSW5OYW1lID0gJ2FkZEluTmFtZScsXHJcblxyXG4gIC8vIERQSV9BZGRJbkxvY2FsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWRkSW5Mb2NhbGUgPSAnYWRkSW5Mb2NhbGUnLFxyXG5cclxuICAvLyBEUElfQWRkSW5MYW5ndWFnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWRkSW5MYW5ndWFnZSA9ICdhZGRJbkxhbmd1YWdlJyxcclxuXHJcbiAgLy8gRFBJX0V4dGVuc2lvblZlcnNpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dGVuc2lvblZlcnNpb24gPSAnZXh0ZW5zaW9uVmVyc2lvbicsXHJcblxyXG4gIC8vIERQSV9BUElWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBUElWZXJzaW9uID0gJ2FwaVZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfQWxpYXMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFsaWFzID0gJ2FsaWFzJyxcclxuXHJcbiAgLy8gRFBJX0FuY2hvckRhdGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFuY2hvckRhdGUgPSAnYW5jaG9yRGF0ZScsXHJcblxyXG4gIC8vIERQSV9Bbm5vdGF0aW9uUmVzLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBbm5vdGF0aW9uUmVzID0gJ2Fubm90YXRpb25SZXMnLFxyXG5cclxuICAvLyBEUElfUmVhZElkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSZWFkSWQgPSAncmVhZElkJyxcclxuXHJcbiAgLy8gRFBJX0Fubm90YXRpb25UZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBbm5vdGF0aW9uVGV4dCA9ICdhbm5vdGF0aW9uVGV4dCcsXHJcblxyXG4gIC8vIERQSV9BcmNoaXZlRGlyZWN0b3J5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBcmNoaXZlRGlyZWN0b3J5ID0gJ2FyY2hpdmVEaXJlY3RvcnknLFxyXG5cclxuICAvLyBEUElfQXJjaGl2ZUZ1bGxQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBcmNoaXZlRnVsbFBhdGggPSAnYXJjaGl2ZUZ1bGxQYXRoJyxcclxuXHJcbiAgLy8gRFBJX0F0VGhlTGV2ZWxJbnZhbGlkRmllbGRDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdFRoZUxldmVsSW52YWxpZEZpZWxkQ2FwdGlvbiA9ICdhdFRoZUxldmVsSW52YWxpZEZpZWxkQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9BdXRvQ29tcGxldGVTdWJzdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF1dG9Db21wbGV0ZVN1YnN0cmluZyA9ICdhY1N1YnN0cmluZycsXHJcblxyXG4gIC8vIERQSV9BdXRvc2F2ZUZpbGVJZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXV0b3NhdmVGaWxlSWQgPSAnYXV0b3NhdmVGaWxlSWQnLFxyXG5cclxuICAvLyBEUElfQXV0b3NhdmVUaW1lckludGVydmFsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdXRvc2F2ZVRpbWVySW50ZXJ2YWwgPSAnYXV0b3NhdmVUaW1lckludGVydmFsJyxcclxuXHJcbiAgLy8gRFBJX0Jhc2VDb2x1bW5DYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCYXNlQ29sdW1uQ2FwdGlvbiA9ICdiYXNlQ29sdW1uQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9CdXR0b25PYmplY3RDbGlja0FjdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQnV0dG9uT2JqZWN0Q2xpY2tBY3Rpb24gPSAnYnV0dG9uT2JqZWN0Q2xpY2tBY3Rpb24nLFxyXG5cclxuICAvLyBEUElfQnV0dG9uT2JqZWN0SW1hZ2VQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCdXR0b25PYmplY3RJbWFnZVBhdGggPSAnYnV0dG9uT2JqZWN0SW1hZ2VQYXRoJyxcclxuXHJcbiAgLy8gRFBJX0NsZWFyQnV0dG9uVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2xlYXJCdXR0b25UZXh0ID0gJ2NsZWFyQnV0dG9uVGV4dCcsXHJcblxyXG4gIC8vIERQSV9Db2xvclBhbGV0dGVJZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29sb3JQYWxldHRlSWQgPSAnY29sb3JQYWxldHRlSWQnLFxyXG5cclxuICAvLyBEUElfQ29sb3JQYWxldHRlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29sb3JQYWxldHRlTmFtZSA9ICdjb2xvclBhbGV0dGVOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yU3dhdGNoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb2xvclN3YXRjaCA9ICdjb2xvclN3YXRjaCcsXHJcblxyXG4gIC8vIERQSV9Db21tYW5kTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29tbWFuZE5hbWUgPSAnY29tbWFuZE5hbWUnLFxyXG5cclxuICAvLyBEUElfQ29uZmlkZW5jZUxldmVsVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbmZpZGVuY2VMZXZlbFZhbHVlID0gJ2NvbmZpZGVuY2VMZXZlbFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX0NvdW50RGlzdGluY3RTdHIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvdW50RGlzdGluY3RTdHIgPSAnY291bnREaXN0aW5jdFN0cicsXHJcblxyXG4gIC8vIERQSV9Dcm9zc1RhYkZpbGVwYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDcm9zc1RhYkZpbGVwYXRoID0gJ2Nyb3NzVGFiRmlsZXBhdGgnLFxyXG5cclxuICAvLyBEUElfQ1NTTWFyZ2luLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDU1NNYXJnaW4gPSAnY3NzTWFyZ2luJyxcclxuXHJcbiAgLy8gRFBJX0NTU1doaXRlc3BhY2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENTU1doaXRlc3BhY2UgPSAnY3NzV2hpdGVzcGFjZScsXHJcblxyXG4gIC8vIERQSV9EQlBhc3N3b3JkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEQlBhc3N3b3JkID0gJ2RiUGFzc3dvcmQnLFxyXG5cclxuICAvLyBEUElfREJVc2VybmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgREJVc2VybmFtZSA9ICdkYlVzZXJuYW1lJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFBbGVydENvbmRpdGlvblRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFBbGVydENvbmRpdGlvblRleHQgPSAnZGF0YUFsZXJ0Q29uZGl0aW9uVGV4dCcsXHJcblxyXG4gIC8vIERQSV9EYXRhQWxlcnRNZWFzdXJlVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YUFsZXJ0TWVhc3VyZVRleHQgPSAnZGF0YUFsZXJ0TWVhc3VyZVRleHQnLFxyXG5cclxuICAvLyBEUElfRGF0YUFsZXJ0U3BlY1NlcmlhbGl6ZWRUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhQWxlcnRTcGVjU2VyaWFsaXplZFRleHQgPSAnZGF0YUFsZXJ0U3BlY1NlcmlhbGl6ZWRUZXh0JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFBbGVydERlZmF1bHRTdWJqZWN0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhQWxlcnREZWZhdWx0U3ViamVjdCA9ICdkYXRhQWxlcnREZWZhdWx0U3ViamVjdCcsXHJcblxyXG4gIC8vIERQSV9EYXRhQWxlcnRUaHJlc2hvbGRUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhQWxlcnRUaHJlc2hvbGRUZXh0ID0gJ2RhdGFBbGVydFRocmVzaG9sZFRleHQnLFxyXG5cclxuICAvLyBEUElfRGF0YUdyaWRTb3J0Q29sdW1uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YUdyaWRTb3J0Q29sdW1uTmFtZSA9ICdkYXRhZ3JpZFNvcnRDb2x1bW5OYW1lJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTZXJ2ZXJDb25uZWN0aW9uRXJyb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFTZXJ2ZXJDb25uZWN0aW9uRXJyb3IgPSAnZGF0YVNlcnZlckNvbm5lY3Rpb25FcnJvcicsXHJcblxyXG4gIC8vIERQSV9EYXRhYmFzZUZpbHRlciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YWJhc2VGaWx0ZXIgPSAnZGF0YWJhc2VGaWx0ZXInLFxyXG5cclxuICAvLyBEUElfRGF0YWJhc2VGaWx0ZXJQcm9tcHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFiYXNlRmlsdGVyUHJvbXB0ID0gJ2RhdGFiYXNlRmlsdGVyUHJvbXB0JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFzb3VyY2VSYW5raW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc291cmNlUmFua2luZyA9ICdkYXRhc291cmNlUmFua2luZycsXHJcblxyXG4gIC8vIERQSV9EYXRhc291cmNlVXJsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc291cmNlVXJsID0gJ2RhdGFzb3VyY2VVcmwnLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZVVzZXJuYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc291cmNlVXNlcm5hbWUgPSAnZGF0YXNvdXJjZVVzZXJuYW1lJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VDcmVhdGlvbkVycm9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhU291cmNlQ3JlYXRpb25FcnJvciA9ICdkYXRhU291cmNlQ3JlYXRpb25FcnJvcicsXHJcblxyXG4gIC8vIERQSV9EYXRlRm9ybWF0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRlRm9ybWF0ID0gJ2RhdGVGb3JtYXQnLFxyXG5cclxuICAvLyBEUElfRGF0ZVBhcnQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGVQYXJ0ID0gJ2RhdGVQYXJ0JyxcclxuXHJcbiAgLy8gRFBJX0RhdGVQYXJ0QWJicmV2LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRlUGFydEFiYnJldiA9ICdkYXRlUGFydEFiYnJldicsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0SGllcmFyY2h5TmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGVmYXVsdEhpZXJhcmNoeU5hbWUgPSAnZGVmYXVsdEhpZXJhcmNoeU5hbWUnLFxyXG5cclxuICAvLyBEUElfRGVmYXVsdE1lbnVJdGVtS2V5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEZWZhdWx0TWVudUl0ZW1LZXkgPSAnZGVmYXVsdE1lbnVJdGVtS2V5JyxcclxuXHJcbiAgLy8gRFBJX0RlbGltaXRlciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGVsaW1pdGVyID0gJ2RlbGltaXRlcicsXHJcblxyXG4gIC8vIERQSV9EZXZpY2VOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEZXZpY2VOYW1lID0gJ2RldmljZU5hbWUnLFxyXG5cclxuICAvLyBEUElfRGV2aWNlVHlwZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGV2aWNlVHlwZSA9ICdkZXZpY2VUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3BsYXlQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEaXNwbGF5UGF0aCA9ICdkaXNwbGF5UGF0aCcsXHJcblxyXG4gIC8vIERQSV9EaXN0cmlidXRpb25WYWx1ZVN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGlzdHJpYnV0aW9uVmFsdWVTdHJpbmcgPSAnZGlzdHJpYnV0aW9uVmFsdWVTdHJpbmcnLFxyXG5cclxuICAvLyBEUElfRHJpbGxQYXRoTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRHJpbGxQYXRoTmFtZSA9ICdkcmlsbFBhdGhOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0VtYmVkZGVkVGl0bGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEVtYmVkZGVkVGl0bGUgPSAnZW1iZWRkZWRUaXRsZScsXHJcblxyXG4gIC8vIERQSV9FbnRlclZhbHVlVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRW50ZXJWYWx1ZVRleHQgPSAnZW50ZXJWYWx1ZVRleHQnLFxyXG5cclxuICAvLyBEUElfRXNjYXBlU3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFc2NhcGVTdHJpbmcgPSAnZXNjYXBlU3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX0V4dGVuc2lvbkRpYWxvZ1BheWxvYWQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dGVuc2lvbkRpYWxvZ1BheWxvYWQgPSAnZXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCcsXHJcblxyXG4gIC8vIERQSV9FeHRlbnNpb25EaWFsb2dVcmwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dGVuc2lvbkRpYWxvZ1VybCA9ICdleHRlbnNpb25EaWFsb2dVcmwnLFxyXG5cclxuICAvLyBEUElfRXh0U3ZjQ29uZmlnSG9zdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXh0U3ZjQ29uZmlnSG9zdCA9ICdleHRTdmNDb25maWdIb3N0JyxcclxuXHJcbiAgLy8gRFBJX0V4dFN2Y0NvbmZpZ1Bhc3N3b3JkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHRTdmNDb25maWdQYXNzd29yZCA9ICdleHRTdmNDb25maWdQYXNzd29yZCcsXHJcblxyXG4gIC8vIERQSV9FeHRTdmNDb25maWdQb3J0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHRTdmNDb25maWdQb3J0ID0gJ2V4dFN2Y0NvbmZpZ1BvcnQnLFxyXG5cclxuICAvLyBEUElfRXh0U3ZjQ29uZmlnQ29ubmVjdFRpbWVvdXQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dFN2Y0NvbmZpZ0Nvbm5lY3RUaW1lb3V0ID0gJ2V4dFN2Y0Nvbm5lY3RUaW1lb3V0JyxcclxuXHJcbiAgLy8gRFBJX0V4dFN2Y0NvbmZpZ1ByZXZIb3N0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHRTdmNDb25maWdQcmV2SG9zdCA9ICdleHRTdmNDb25maWdQcmV2SG9zdCcsXHJcblxyXG4gIC8vIERQSV9FeHRTdmNDb25maWdVc2VybmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXh0U3ZjQ29uZmlnVXNlcm5hbWUgPSAnZXh0U3ZjQ29uZmlnVXNlcm5hbWUnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdFVwZGF0ZVRpbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dHJhY3RVcGRhdGVUaW1lID0gJ2V4dHJhY3RVcGRhdGVUaW1lJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkRm9sZGVyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmllbGRGb2xkZXJOYW1lID0gJ2ZpZWxkRm9sZGVyTmFtZScsXHJcblxyXG4gIC8vIERQSV9GaWVsZE5hbWVTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpZWxkTmFtZVN0cmluZyA9ICdmaWVsZE5hbWUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyU2VhcmNoRG9tYWluLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWx0ZXJTZWFyY2hEb21haW4gPSAnZmlsdGVyU2VhcmNoRG9tYWluJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclNwZWMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpbHRlclNwZWMgPSAnZmlsdGVyU3BlYycsXHJcblxyXG4gIC8vIERQSV9GaXJzdFZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaXJzdFZhbHVlID0gJ2ZpcnN0VmFsdWUnLFxyXG5cclxuICAvLyBEUElfRm9sZGVyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9sZGVyTmFtZSA9ICdmb2xkZXJOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0ZvbnROYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb250TmFtZSA9ICdmb250TmFtZScsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXRTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZvcm1hdFN0cmluZyA9ICdmb3JtYXRTdHJpbmcnLFxyXG5cclxuICAvLyBEUElfRm9ybWF0dGVkRGlzcGxheVN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9ybWF0dGVkRGlzcGxheVN0cmluZyA9ICdmb3JtYXR0ZWREaXNwbGF5U3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdHRlZEluY3JlbWVudFZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb3JtYXR0ZWRJbmNyZW1lbnRWYWx1ZSA9ICdmb3JtYXR0ZWRJbmNyZW1lbnQnLFxyXG5cclxuICAvLyBEUElfRm9ybWF0dGVkTWF4VmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZvcm1hdHRlZE1heFZhbHVlID0gJ2Zvcm1hdHRlZE1heCcsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXR0ZWRNaW5WYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9ybWF0dGVkTWluVmFsdWUgPSAnZm9ybWF0dGVkTWluJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdHRlZFZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb3JtYXR0ZWRWYWx1ZSA9ICdmb3JtYXR0ZWRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXR0ZWRDZW50ZXJWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9ybWF0dGVkQ2VudGVyVmFsdWUgPSAnZm9ybWF0dGVkQ2VudGVyJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdHRlZEVuZFZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb3JtYXR0ZWRFbmRWYWx1ZSA9ICdmb3JtYXR0ZWRFbmQnLFxyXG5cclxuICAvLyBEUElfRm9ybWF0dGVkU3RhcnRWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9ybWF0dGVkU3RhcnRWYWx1ZSA9ICdmb3JtYXR0ZWRTdGFydCcsXHJcblxyXG4gIC8vIERQSV9QYWlyZWRGb3JtYXR0ZWRWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGFpcmVkRm9ybWF0dGVkVmFsdWUgPSAncGFpcmVkRm9ybWF0dGVkVmFsdWUnLFxyXG5cclxuICAvLyBEUElfRnJhbWVBdHRyaWJ1dGVzLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGcmFtZUF0dHJpYnV0ZXMgPSAnZnJhbWVBdHRyJyxcclxuXHJcbiAgLy8gRFBJX0dVSUQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdVSUQgPSAnZ3VpZCcsXHJcblxyXG4gIC8vIERQSV9HZW9ncmFwaGljU2VhcmNoQ2FuZGlkYXRlRGlzcGxheU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdlb2dyYXBoaWNTZWFyY2hDYW5kaWRhdGVEaXNwbGF5TmFtZSA9ICdnZW9ncmFwaGljU2VhcmNoQ2FuZGlkYXRlRGlzcGxheU5hbWUnLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZVBhcmVudE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdlb2dyYXBoaWNTZWFyY2hDYW5kaWRhdGVQYXJlbnROYW1lID0gJ2dlb2dyYXBoaWNTZWFyY2hDYW5kaWRhdGVQYXJlbnROYW1lJyxcclxuXHJcbiAgLy8gRFBJX0dlb2dyYXBoaWNTZWFyY2hDYW5kaWRhdGVUeXBlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHZW9ncmFwaGljU2VhcmNoQ2FuZGlkYXRlVHlwZSA9ICdnZW9ncmFwaGljU2VhcmNoQ2FuZGlkYXRlVHlwZScsXHJcblxyXG4gIC8vIERQSV9HZW9ncmFwaGljU2VhcmNoTG9jYWxlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHZW9ncmFwaGljU2VhcmNoTG9jYWxlID0gJ2dlb2dyYXBoaWNTZWFyY2hMb2NhbGUnLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaFF1ZXJ5U3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBHZW9ncmFwaGljU2VhcmNoUXVlcnlTdHJpbmcgPSAnZ2VvZ3JhcGhpY1NlYXJjaFNlYXJjaFN0cmluZycsXHJcblxyXG4gIC8vIERQSV9HZW9ncmFwaGljU2VhcmNoVUlMb2NhbGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdlb2dyYXBoaWNTZWFyY2hVSUxvY2FsZSA9ICdnZW9ncmFwaGljU2VhcmNoVWlsb2NhbGUnLFxyXG5cclxuICAvLyBEUElfSWNvblJlcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSWNvblJlcyA9ICdpY29uUmVzJyxcclxuXHJcbiAgLy8gRFBJX0ltYWdlSGFzaCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW1hZ2VIYXNoID0gJ2ltYWdlSGFzaCcsXHJcblxyXG4gIC8vIERQSV9JbWFnZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEltYWdlTmFtZSA9ICdpbWFnZU5hbWUnLFxyXG5cclxuICAvLyBEUElfSW1hZ2VSZXMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEltYWdlUmVzID0gJ2ltYWdlUmVzJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVzU2libGluZ3NQcm9tcHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEluY2x1ZGVzU2libGluZ3NQcm9tcHQgPSAnaW5jbHVkZXNTaWJsaW5nc1Byb21wdCcsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlc1N1YmZvbGRlcnNQcm9tcHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEluY2x1ZGVzU3ViZm9sZGVyc1Byb21wdCA9ICdpbmNsdWRlc1N1YmZvbGRlcnNQcm9tcHQnLFxyXG5cclxuICAvLyBEUElfSW5jcmVtZW50YWxTY2hlZHVsZUlEcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW5jcmVtZW50YWxTY2hlZHVsZUlEcyA9ICdpbmNyZW1lbnRhbFNjaGVkdWxlSWRzJyxcclxuXHJcbiAgLy8gRFBJX0ludmFyaWFudEtleXdvcmQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEludmFyaWFudEtleXdvcmQgPSAnaW52YXJpYW50S2V5d29yZCcsXHJcblxyXG4gIC8vIERQSV9Kb2luT3BlcmF0b3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEpvaW5PcGVyYXRvciA9ICdqb2luT3BlcmF0b3InLFxyXG5cclxuICAvLyBEUElfSm9pbkV4cHJlc3Npb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEpvaW5FeHByZXNzaW9uID0gJ2pvaW5FeHByZXNzaW9uJyxcclxuXHJcbiAgLy8gRFBJX0tleSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgS2V5ID0gJ2tleUlkJyxcclxuXHJcbiAgLy8gRFBJX0xhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBMYWJlbCA9ICdsYWJlbCcsXHJcblxyXG4gIC8vIERQSV9QYWlyZWRMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGFpcmVkTGFiZWwgPSAncGFpcmVkTGFiZWwnLFxyXG5cclxuICAvLyBEUElfTGF5b3V0SUQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIExheW91dElEID0gJ2xheW91dElkJyxcclxuXHJcbiAgLy8gRFBJX0xlZnRKb2luRXhwcmVzc2lvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGVmdEpvaW5FeHByZXNzaW9uID0gJ2xlZnRKb2luRXhwcmVzc2lvbicsXHJcblxyXG4gIC8vIERQSV9MaW1pdENvdW50RXhwcmVzc2lvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGltaXRDb3VudEV4cHJlc3Npb24gPSAnbGltaXRDb3VudEV4cHJlc3Npb24nLFxyXG5cclxuICAvLyBEUElfTGlua1RhcmdldCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGlua1RhcmdldCA9ICdsaW5rVGFyZ2V0JyxcclxuXHJcbiAgLy8gRFBJX0xvY2FsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTG9jYWxlID0gJ2xvY2FsZScsXHJcblxyXG4gIC8vIERQSV9Mb2NhbGl6ZWRLZXl3b3JkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBMb2NhbGl6ZWRLZXl3b3JkID0gJ2xvY2FsaXplZEtleXdvcmQnLFxyXG5cclxuICAvLyBEUElfTWFwQm94R0xTdHlsZUlkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBCb3hHTFN0eWxlSWQgPSAnbWFwYm94R2xTdHlsZUlkJyxcclxuXHJcbiAgLy8gRFBJX01hcEJveFN0eWxlVXJsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBCb3hTdHlsZVVybCA9ICdtYXBib3hTdHlsZVVybCcsXHJcblxyXG4gIC8vIERQSV9NYXBCb3hVc2VybmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwQm94VXNlcm5hbWUgPSAnbWFwYm94VXNlcm5hbWUnLFxyXG5cclxuICAvLyBEUElfTWFwU2NhbGVSZWFkb3V0U3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBTY2FsZVJlYWRvdXRTdHJpbmcgPSAnbWFwU2NhbGVSZWFkb3V0U3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX01hcFNjYWxlVG9vbHRpcFN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwU2NhbGVUb29sdGlwU3RyaW5nID0gJ21hcFNjYWxlVG9vbHRpcFN0cmluZycsXHJcblxyXG4gIC8vIERQSV9NYXBTb3VyY2VOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBTb3VyY2VOYW1lID0gJ21hcFNvdXJjZU5hbWUnLFxyXG5cclxuICAvLyBEUElfTWF4TGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1heExhYmVsID0gJ21heExhYmVsJyxcclxuXHJcbiAgLy8gRFBJX01pbkxhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNaW5MYWJlbCA9ICdtaW5MYWJlbCcsXHJcblxyXG4gIC8vIERQSV9Nb2RlbERlc2NyaXB0aW9uUGFyYWdyYXBoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNb2RlbERlc2NyaXB0aW9uUGFyYWdyYXBoID0gJ21vZGVsRGVzY3JpcHRpb25QYXJhZ3JhcGgnLFxyXG5cclxuICAvLyBEUElfTmFtZVRlbXBsYXRlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOYW1lVGVtcGxhdGUgPSAnbmFtZVRlbXBsYXRlJyxcclxuXHJcbiAgLy8gRFBJX05ld0RyaWxsUGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTmV3RHJpbGxQYXRoID0gJ25ld0RyaWxsUGF0aCcsXHJcblxyXG4gIC8vIERQSV9OZXdGaWVsZEZvbGRlck5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE5ld0ZpZWxkRm9sZGVyTmFtZSA9ICduZXdGaWVsZEZvbGRlck5hbWUnLFxyXG5cclxuICAvLyBEUElfTmV3VGFibGVBbGlhcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTmV3VGFibGVBbGlhcyA9ICduZXdUYWJsZUFsaWFzJyxcclxuXHJcbiAgLy8gRFBJX05scEJhY2tlbmQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE5scEJhY2tlbmQgPSAnbmxwQmFja2VuZCcsXHJcblxyXG4gIC8vIERQSV9Ob25Gb3JtYXR0ZWRWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTm9uRm9ybWF0dGVkVmFsdWUgPSAndW5mb3JtYXR0ZWRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9PQXV0aFVzZXJOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPQXV0aFVzZXJOYW1lID0gJ29hdXRoVXNlcm5hbWUnLFxyXG5cclxuICAvLyBEUElfT2JqZWN0TmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgT2JqZWN0TmFtZSA9ICdvYmplY3ROYW1lJyxcclxuXHJcbiAgLy8gRFBJX09iamVjdE92ZXJyaWRlTWVzc2FnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgT2JqZWN0T3ZlcnJpZGVNZXNzYWdlID0gJ29iamVjdE92ZXJyaWRlTWVzc2FnZScsXHJcblxyXG4gIC8vIERQSV9PbGRUYWJsZUFsaWFzLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPbGRUYWJsZUFsaWFzID0gJ29sZFRhYmxlQWxpYXMnLFxyXG5cclxuICAvLyBEUElfT3BlcmF0aW5nU3lzdGVtLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPcGVyYXRpbmdTeXN0ZW0gPSAnb3BlcmF0aW5nU3lzdGVtJyxcclxuXHJcbiAgLy8gRFBJX09yaWdpbmFsRmlsZVBhdGgsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE9yaWdpbmFsRmlsZVBhdGggPSAnb3JpZ2luYWxGaWxlUGF0aCcsXHJcblxyXG4gIC8vIERQSV9PcmlnaW5hbEZpbGVWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPcmlnaW5hbEZpbGVWZXJzaW9uID0gJ29yaWdpbmFsRmlsZVZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfUGFuZURlc2NyaXB0b3JLZXksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhbmVEZXNjcmlwdG9yS2V5ID0gJ3BhbmVEZXNjcktleScsXHJcblxyXG4gIC8vIERQSV9QYXJlbnROYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQYXJlbnROYW1lID0gJ3BhcmVudE5hbWUnLFxyXG5cclxuICAvLyBEUElfUGFyZW50VGFibGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhcmVudFRhYmxlID0gJ3BhcmVudFRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX1BhdHRlcm5GaWx0ZXJTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhdHRlcm5GaWx0ZXJTdHJpbmcgPSAncGF0dGVybkZpbHRlclN0cmluZycsXHJcblxyXG4gIC8vIERQSV9QZW5kaW5nQ2FsY05hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBlbmRpbmdDYWxjTmFtZSA9ICdwZW5kaW5nQ2FsY05hbWUnLFxyXG5cclxuICAvLyBEUElfUGVyY2VudGlsZXNTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBlcmNlbnRpbGVzU3RyaW5nID0gJ3BlcmNlbnRpbGVzU3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX1Byb2plY3RJZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUHJvamVjdElkID0gJ3Byb2plY3RJZCcsXHJcblxyXG4gIC8vIERQSV9Qcm9qZWN0TmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUHJvamVjdE5hbWUgPSAncHJvamVjdE5hbWUnLFxyXG5cclxuICAvLyBEUElfUHJvcGVydHlOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQcm9wZXJ0eU5hbWUgPSAncHJvcGVydHlOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1F1aWNrRmlsdGVyVGl0bGVDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBRdWlja0ZpbHRlclRpdGxlQ2FwdGlvbiA9ICdxdWlja0ZpbHRlclRpdGxlQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9SYW5nZURpZmZTdHIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJhbmdlRGlmZlN0ciA9ICdkaWZmVmFsdWUnLFxyXG5cclxuICAvLyBEUElfUmFuZ2VNYXhTdHIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJhbmdlTWF4U3RyID0gJ21heFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1JhbmdlTWluU3RyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSYW5nZU1pblN0ciA9ICdtaW5WYWx1ZScsXHJcblxyXG4gIC8vIERQSV9SZWNvdmVyZWRGaWxlUGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmVjb3ZlcmVkRmlsZVBhdGggPSAncmVjb3ZlcmVkRmlsZVBhdGgnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlTGluZVNwZWNpZmljYXRpb25JZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmVmZXJlbmNlTGluZVNwZWNpZmljYXRpb25JZCA9ICdyZWZlcmVuY2VMaW5lSWQnLFxyXG5cclxuICAvLyBEUElfUmVwbGFjZUZpZWxkUHJvbXB0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSZXBsYWNlRmllbGRQcm9tcHQgPSAncmVwbGFjZUZpZWxkUHJvbXB0JyxcclxuXHJcbiAgLy8gRFBJX1JpZ2h0Sm9pbkV4cHJlc3Npb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJpZ2h0Sm9pbkV4cHJlc3Npb24gPSAncmlnaHRKb2luRXhwcmVzc2lvbicsXHJcblxyXG4gIC8vIERQSV9Sb290UGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUm9vdFBhdGggPSAncm9vdFBhdGgnLFxyXG5cclxuICAvLyBEUElfUnVudGltZUZpbmFsRGF0YXN0b3JlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSdW50aW1lRmluYWxEYXRhc3RvcmUgPSAncnVudGltZUZpbmFsRGF0YXN0b3JlJyxcclxuXHJcbiAgLy8gRFBJX1J1bnRpbWVJbml0aWFsRGF0YXN0b3JlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSdW50aW1lSW5pdGlhbERhdGFzdG9yZSA9ICdydW50aW1lSW5pdGlhbERhdGFzdG9yZScsXHJcblxyXG4gIC8vIERQSV9SdW50aW1lVlRMLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSdW50aW1lVlRMID0gJ3J1bnRpbWVWdGwnLFxyXG5cclxuICAvLyBEUElfU2FtcGxlRGF0YVN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2FtcGxlRGF0YVN0cmluZyA9ICdzYW1wbGVEYXRhJyxcclxuXHJcbiAgLy8gRFBJX1NjaGVkdWxlSURzLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTY2hlZHVsZUlEcyA9ICdzY2hlZHVsZUlkcycsXHJcblxyXG4gIC8vIERQSV9TY2hlbWFGaWVsZEljb25SZXNvdXJjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2NoZW1hRmllbGRJY29uUmVzb3VyY2UgPSAnZmllbGRJY29uUmVzJyxcclxuXHJcbiAgLy8gRFBJX1NjcmVlbk5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNjcmVlbk5hbWUgPSAnc2NyZWVuTmFtZScsXHJcblxyXG4gIC8vIERQSV9TY3JpcHRDb21tYW5kLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTY3JpcHRDb21tYW5kID0gJ2NvbW1hbmQnLFxyXG5cclxuICAvLyBEUElfU2Vjb25kVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNlY29uZFZhbHVlID0gJ3NlY29uZFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNlbGVjdGVkVmFsdWUgPSAnc2VsZWN0ZWRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9TaGFwZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNoYXBlTmFtZSA9ICdzaGFwZU5hbWUnLFxyXG5cclxuICAvLyBEUElfU2hlZXRJZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2hlZXRJZCA9ICdzaGVldElkJyxcclxuXHJcbiAgLy8gRFBJX1Nob3dEYXRhVGFibGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNob3dEYXRhVGFibGUgPSAnc2hvd0RhdGFUYWJsZScsXHJcblxyXG4gIC8vIERQSV9TaW1wbGVDb21tYW5kLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTaW1wbGVDb21tYW5kID0gJ3NpbXBsZUNvbW1hbmQnLFxyXG5cclxuICAvLyBEUElfU29ydE1vZGVDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTb3J0TW9kZUNhcHRpb24gPSAnc29ydE1vZGVDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1NvdXJjZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNvdXJjZU5hbWUgPSAnc291cmNlTmFtZScsXHJcblxyXG4gIC8vIERQSV9Tb3VyY2VUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTb3VyY2VUZXh0ID0gJ3NvdXJjZVRleHQnLFxyXG5cclxuICAvLyBEUElfU3BlY2lhbFZhbHVlVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3BlY2lhbFZhbHVlVGV4dCA9ICdzcGVjaWFsVmFsdWVUZXh0JyxcclxuXHJcbiAgLy8gRFBJX1N0YXRpY0ltYWdlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTdGF0aWNJbWFnZSA9ICdzdGF0aWNJbWFnZScsXHJcblxyXG4gIC8vIERQSV9TdG9yeVBvaW50QmFzZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3RvcnlQb2ludEJhc2UgPSAnc3RvcnlQb2ludEJhc2UnLFxyXG5cclxuICAvLyBEUElfU3RvcnlQb2ludENhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN0b3J5UG9pbnRDYXB0aW9uID0gJ3N0b3J5UG9pbnRDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5Ym9hcmQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN0b3J5Ym9hcmQgPSAnc3Rvcnlib2FyZCcsXHJcblxyXG4gIC8vIERQSV9TdHlsZWRMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3R5bGVkTGFiZWwgPSAnc3R5bGVkTGFiZWwnLFxyXG5cclxuICAvLyBEUElfU3VtbWFyeUNhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXB0aW9uID0gJ3N1bW1hcnlDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1N1bW1hcnlGaWVsZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3VtbWFyeUZpZWxkID0gJ3N1bW1hcnlGaWVsZCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZWF1VmVyc2lvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFibGVhdVZlcnNpb24gPSAndGFibGVhdVZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfVGFibGVGaWx0ZXIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhYmxlRmlsdGVyID0gJ3RhYmxlRmlsdGVyJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlRmlsdGVyUHJvbXB0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZUZpbHRlclByb21wdCA9ICd0YWJsZUZpbHRlclByb21wdCcsXHJcblxyXG4gIC8vIERQSV9UYWdzTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhZ3NMYWJlbCA9ICd0YWdzTGFiZWwnLFxyXG5cclxuICAvLyBEUElfVGFyZ2V0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYXJnZXQgPSAndGFyZ2V0JyxcclxuXHJcbiAgLy8gRFBJX1RodW1ibmFpbEdyb3VwLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUaHVtYm5haWxHcm91cCA9ICd0aHVtYm5haWxHcm91cCcsXHJcblxyXG4gIC8vIERQSV9UaHVtYm5haWxVc2VyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUaHVtYm5haWxVc2VyID0gJ3RodW1ibmFpbFVzZXInLFxyXG5cclxuICAvLyBEUElfVGltZUZvcm1hdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGltZUZvcm1hdCA9ICd0aW1lRm9ybWF0JyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZUVycm9yU3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUcmVuZExpbmVFcnJvclN0cmluZyA9ICd0cmVuZExpbmVFcnJvclN0cmluZycsXHJcblxyXG4gIC8vIERQSV9UcmVuZExpbmVNb2RlbEZvcm11bGEsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRyZW5kTGluZU1vZGVsRm9ybXVsYSA9ICd0cmVuZExpbmVNb2RlbEZvcm11bGEnLFxyXG5cclxuICAvLyBEUElfVVJMU3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVUkxTdHJpbmcgPSAndXJsU3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX1VSTFRlc3QsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVSTFRlc3QgPSAndXJsVGVzdCcsXHJcblxyXG4gIC8vIERQSV9WYWxpZGF0aW9uTWVzc2FnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVmFsaWRhdGlvbk1lc3NhZ2UgPSAndmFsaWRhdGlvbk1lc3NhZ2UnLFxyXG5cclxuICAvLyBEUElfVmFsdWVTdHIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFZhbHVlU3RyID0gJ3ZhbHVlU3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX1ZlcmlmaWVkTm9uRm9ybWF0dGVkVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFZlcmlmaWVkTm9uRm9ybWF0dGVkVmFsdWUgPSAndmVyaWZpZWRVbmZvcm1hdHRlZFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1dvcmtib29rRnVsbFBhdGgsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFdvcmtib29rRnVsbFBhdGggPSAnd29ya2Jvb2tGdWxsUGF0aCcsXHJcblxyXG4gIC8vIERQSV9XaW5kb3dUaXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgV2luZG93VGl0bGUgPSAnd2luZG93VGl0bGUnLFxyXG5cclxuICAvLyBEUElfWm9uZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFpvbmVOYW1lID0gJ3pvbmVOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1pvbmVQYXJhbSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgWm9uZVBhcmFtID0gJ3pvbmVQYXJhbScsXHJcblxyXG4gIC8vIERQSV9EYXRhQWxlcnRFcnJvclRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFBbGVydEVycm9yVGV4dCA9ICdkYXRhQWxlcnRFcnJvclRleHQnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdFRlbXBEaXJlY3RvcnksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dHJhY3RUZW1wRGlyZWN0b3J5ID0gJ2V4dHJhY3RUZW1wRGlyJyxcclxuXHJcbiAgLy8gRFBJX0RTU3ViQ2xhc3MsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERTU3ViQ2xhc3MgPSAnZHNTdWJDbGFzcycsXHJcblxyXG4gIC8vIERQSV9EYmdDb21tYW5kTGluZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGJnQ29tbWFuZExpbmUgPSAnZGVidWdDb21tYW5kTGluZScsXHJcblxyXG4gIC8vIERQSV9EYmdMb2dQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYmdMb2dQYXRoID0gJ2RlYnVnTG9nUGF0aCcsXHJcblxyXG4gIC8vIERQSV9EYmdPU1ZlcnNpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERiZ09TVmVyc2lvbiA9ICdkZWJ1Z09zVmVyc2lvbicsXHJcblxyXG4gIC8vIERQSV9EYmdVc2VyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGJnVXNlck5hbWUgPSAnZGVidWdVc2VybmFtZScsXHJcblxyXG4gIC8vIERQSV9FcnJvck1zZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXJyb3JNc2cgPSAnZXJyb3JNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX0Vycm9yU3RhY2tUcmFjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXJyb3JTdGFja1RyYWNlID0gJ2Vycm9yU3RhY2tUcmFjZScsXHJcblxyXG4gIC8vIERQSV9FcnJvclN0ciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXJyb3JTdHIgPSAnZXJyb3JTdHJpbmcnLFxyXG5cclxuICAvLyBEUElfRXZlbnRNZXNzYWdlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFdmVudE1lc3NhZ2UgPSAnZXZlbnRNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX0V2ZW50VGltZXN0YW1wLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFdmVudFRpbWVzdGFtcCA9ICdldmVudFRpbWVzdGFtcCcsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0RGVsdGFQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHRyYWN0RGVsdGFQYXRoID0gJ2V4dHJhY3REZWx0YVBhdGgnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdFBhdGgsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dHJhY3RQYXRoID0gJ2V4dHJhY3RQYXRoJyxcclxuXHJcbiAgLy8gRFBJX0V4dHJhY3RTdWdnZXN0ZWRQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHRyYWN0U3VnZ2VzdGVkUGF0aCA9ICdzdWdnZXN0ZWRFeHRyYWN0UGF0aCcsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0VGFza1N1bW1hcnksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4dHJhY3RUYXNrU3VtbWFyeSA9ICdleHRyYWN0VGFza1N1bW1hcnknLFxyXG5cclxuICAvLyBEUElfRmFjdG9yc1N0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmFjdG9yc1N0cmluZyA9ICdmYWN0b3JzU3RyJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdHRlZEZhbWlseU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZvcm1hdHRlZEZhbWlseU5hbWUgPSAnZm9ybWF0dGVkRmFtaWx5TmFtZScsXHJcblxyXG4gIC8vIERQSV9GdW5jdGlvblNpZ25hdHVyZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRnVuY3Rpb25TaWduYXR1cmUgPSAnZnVuY1NpZycsXHJcblxyXG4gIC8vIERQSV9GdW5jdGlvblRvb2x0aXAsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZ1bmN0aW9uVG9vbHRpcCA9ICdmdW5jVG9vbHRpcCcsXHJcblxyXG4gIC8vIERQSV9IZWxwQ29udGVudHMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEhlbHBDb250ZW50cyA9ICdoZWxwQ29udGVudHMnLFxyXG5cclxuICAvLyBEUElfTWFwQXR0cmlidXRpb25UZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBBdHRyaWJ1dGlvblRleHQgPSAnbWFwQXR0cmlidXRpb25UZXh0JyxcclxuXHJcbiAgLy8gRFBJX01hcEF0dHJpYnV0aW9uVGV4dFNpemUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1hcEF0dHJpYnV0aW9uVGV4dFNpemUgPSAnbWFwQXR0cmlidXRpb25UZXh0U2l6ZScsXHJcblxyXG4gIC8vIERQSV9NYXBBdHRyaWJ1dGlvblVybCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwQXR0cmlidXRpb25VcmwgPSAnbWFwQXR0cmlidXRpb25VcmwnLFxyXG5cclxuICAvLyBEUElfTWFwQm94RXJyb3JNZXNzYWdlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBCb3hFcnJvck1lc3NhZ2UgPSAnbWFwYm94RXJyb3JNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX01hcEJveE9sZFN0eWxlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwQm94T2xkU3R5bGVOYW1lID0gJ21hcGJveE9sZFN0eWxlTmFtZScsXHJcblxyXG4gIC8vIERQSV9NYXBCb3hTZWxlY3RlZFN0eWxlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBCb3hTZWxlY3RlZFN0eWxlID0gJ21hcGJveFNlbGVjdGVkU3R5bGUnLFxyXG5cclxuICAvLyBEUElfTWFwQm94U3R5bGVOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBCb3hTdHlsZU5hbWUgPSAnbWFwYm94U3R5bGVOYW1lJyxcclxuXHJcbiAgLy8gRFBJX01hcExheWVyUmVxdWVzdCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwTGF5ZXJSZXF1ZXN0ID0gJ21hcExheWVyUmVxdWVzdCcsXHJcblxyXG4gIC8vIERQSV9NYXBTZXJ2ZXJLZXksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1hcFNlcnZlcktleSA9ICdtYXBTZXJ2ZXJLZXknLFxyXG5cclxuICAvLyBEUElfTWFwVGlsZVNlcnZlciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwVGlsZVNlcnZlciA9ICdtYXBUaWxlU2VydmVyJyxcclxuXHJcbiAgLy8gRFBJX01hcFRpbGVVcmwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1hcFRpbGVVcmwgPSAnbWFwVGlsZVVybCcsXHJcblxyXG4gIC8vIERQSV9QZXJjZW50YWdlc1N0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGVyY2VudGFnZXNTdHJpbmcgPSAncGVyY2VudGFnZXNTdHInLFxyXG5cclxuICAvLyBEUElfUHVibGlzaEVycm9yTWVzc2FnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUHVibGlzaEVycm9yTWVzc2FnZSA9ICdwdWJsaXNoRXJyb3JNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX1RkZVBhdGgsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRkZVBhdGggPSAndGRlUGF0aCcsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25Db21wb25lbnROYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVSUF1dG9tYXRpb25Db21wb25lbnROYW1lID0gJ3VpQXV0b21hdGlvbkNvbXBvbmVudE5hbWUnLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uRW5kVGltZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVUlBdXRvbWF0aW9uRW5kVGltZSA9ICd1aUF1dG9tYXRpb25FbmRUaW1lJyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbk5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVJQXV0b21hdGlvbk5hbWUgPSAndWlBdXRvbWF0aW9uTmFtZScsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25TdGFydFRpbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVJQXV0b21hdGlvblN0YXJ0VGltZSA9ICd1aUF1dG9tYXRpb25TdGFydFRpbWUnLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVJQXV0b21hdGlvblZhbHVlID0gJ3VpQXV0b21hdGlvblZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1dNU0Nvbm5lY3Rpb25OYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBXTVNDb25uZWN0aW9uTmFtZSA9ICd3bXNDb25uZWN0aW9uTmFtZScsXHJcblxyXG4gIC8vIERQSV9XTVNPbGRDb25uZWN0aW9uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgV01TT2xkQ29ubmVjdGlvbk5hbWUgPSAnd21zT2xkQ29ubmVjdGlvbk5hbWUnLFxyXG5cclxuICAvLyBEUElfV01TU2VydmVyVXJsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBXTVNTZXJ2ZXJVcmwgPSAnd21zU2VydmVyVXJsJyxcclxuXHJcbiAgLy8gRFBJX0Fib3V0QnVpbGRWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBYm91dEJ1aWxkVmVyc2lvbiA9ICdhYm91dEJ1aWxkVmVyc2lvbicsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25GaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFjdGlvbkZpZWxkcyA9ICdhY3Rpb25GaWVsZHMnLFxyXG5cclxuICAvLyBEUElfQWRkVmFyaWFibGVMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWRkVmFyaWFibGVMYWJlbCA9ICdhZGRWYXJpYWJsZUxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0FkZFZhcmlhYmxlVG9vbHRpcCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQWRkVmFyaWFibGVUb29sdGlwID0gJ2FkZFZhcmlhYmxlVG9vbHRpcCcsXHJcblxyXG4gIC8vIERQSV9BbGxvd2VkRGF0YVNvdXJjZXNCeU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFsbG93ZWREYXRhU291cmNlc0J5TmFtZSA9ICdhbGxvd2VkRGF0YVNvdXJjZXNCeU5hbWUnLFxyXG5cclxuICAvLyBEUElfQXBwQWJvdXRWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBcHBBYm91dFZlcnNpb24gPSAnYXBwQWJvdXRWZXJzaW9uJyxcclxuXHJcbiAgLy8gRFBJX0FwcEJ1aWxkQnJhbmNoTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXBwQnVpbGRCcmFuY2hOYW1lID0gJ2FwcEJ1aWxkQnJhbmNoTmFtZScsXHJcblxyXG4gIC8vIERQSV9BcHBCdWlsZFZlcnNpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFwcEJ1aWxkVmVyc2lvbiA9ICdhcHBCdWlsZFZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfQXBwRXh0ZXJuYWxWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBcHBFeHRlcm5hbFZlcnNpb24gPSAnYXBwRXh0ZXJuYWxWZXJzaW9uJyxcclxuXHJcbiAgLy8gRFBJX0FwcE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFwcE5hbWUgPSAnYXBwTmFtZScsXHJcblxyXG4gIC8vIERQSV9BcHBQcm9kdWN0VmVyc2lvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXBwUHJvZHVjdFZlcnNpb24gPSAnYXBwUHJvZHVjdFZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfT3JpZ2luYWxWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPcmlnaW5hbFZlcnNpb24gPSAnb3JpZ2luYWxWZXJzaW9uJyxcclxuXHJcbiAgLy8gRFBJX0F0VGhlTGV2ZWxTcGVjaWFsQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXRUaGVMZXZlbFNwZWNpYWxDYXB0aW9uID0gJ2F0VGhlTGV2ZWxTcGVjaWFsQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9BdXRvQ29tcGxldGVDYWxjLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBdXRvQ29tcGxldGVDYWxjID0gJ2FjQ2FsYycsXHJcblxyXG4gIC8vIERQSV9DU1ZQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDU1ZQYXRoID0gJ2NzdlBhdGgnLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZE5hbWVzcGFjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29tbWFuZE5hbWVzcGFjZSA9ICdjb21tYW5kTmFtZXNwYWNlJyxcclxuXHJcbiAgLy8gRFBJX0NvbmRpdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29uZGl0aW9uID0gJ2NvbmRpdGlvbicsXHJcblxyXG4gIC8vIERQSV9Db25kaXRpb25TdW1tYXJ5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb25kaXRpb25TdW1tYXJ5ID0gJ2NvbmRpdGlvblN1bW1hcnknLFxyXG5cclxuICAvLyBEUElfQ29uZmlybWF0aW9uTXNnLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb25maXJtYXRpb25Nc2cgPSAnY29uZmlybWF0aW9uTXNnJyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZFR5cGVUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXNoYm9hcmRUeXBlVGV4dCA9ICdkYXNoYm9hcmRUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFzZXJ2ZXJQdWJsaWNBZGRyZXNzLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc2VydmVyUHVibGljQWRkcmVzcyA9ICdkYXRhc2VydmVyUHVibGljQWRkcmVzcycsXHJcblxyXG4gIC8vIERQSV9EYXRhc291cmNlRmlsZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFzb3VyY2VGaWxlTmFtZSA9ICdkYXRhc291cmNlRmlsZU5hbWUnLFxyXG5cclxuICAvLyBEUElfRGVjaW1hbE1hcmssIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERlY2ltYWxNYXJrID0gJ2RlY2ltYWxNYXJrJyxcclxuXHJcbiAgLy8gRFBJX0RlbGV0ZVZhcmlhYmxlVG9vbHRpcCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGVsZXRlVmFyaWFibGVUb29sdGlwID0gJ2RlbGV0ZVZhcmlhYmxlVG9vbHRpcCcsXHJcblxyXG4gIC8vIERQSV9EaWFsb2dUaXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGlhbG9nVGl0bGUgPSAnZGlhbG9nVGl0bGUnLFxyXG5cclxuICAvLyBEUElfRGlzcGxheVZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEaXNwbGF5VmFsdWUgPSAnZGlzcGxheVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1Rvb2x0aXBWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVG9vbHRpcFZhbHVlID0gJ3Rvb2x0aXBWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9Ec3RQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEc3RQYXRoID0gJ2RzdFBhdGgnLFxyXG5cclxuICAvLyBEUElfRWRpdFdpZGdldEhlYWRlciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRWRpdFdpZGdldEhlYWRlciA9ICdlZGl0V2lkZ2V0SGVhZGVyJyxcclxuXHJcbiAgLy8gRFBJX0VkaXRXaWRnZXRJbnN0cnVjdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRWRpdFdpZGdldEluc3RydWN0aW9uID0gJ2VkaXRXaWRnZXRJbnN0cnVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9FbmRTZWxlY3Rpb25DYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFbmRTZWxlY3Rpb25DYXB0aW9uID0gJ2VuZFNlbGVjdGlvbkNhcHRpb24nLFxyXG5cclxuICAvLyBEUElfRXJyb3JDb25maXJtYXRpb25RdWVzdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXJyb3JDb25maXJtYXRpb25RdWVzdGlvbiA9ICdlcnJvckNvbmZpcm1hdGlvblF1ZXN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0Vycm9yRGlhbG9nVGl0bGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEVycm9yRGlhbG9nVGl0bGUgPSAnZXJyb3JEaWFsb2dUaXRsZScsXHJcblxyXG4gIC8vIERQSV9FcnJvckhlbHBMaW5rLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFcnJvckhlbHBMaW5rID0gJ2Vycm9ySGVscExpbmsnLFxyXG5cclxuICAvLyBEUElfRXJyb3JTaG9ydE1lc3NhZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEVycm9yU2hvcnRNZXNzYWdlID0gJ2Vycm9yU2hvcnRNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclNlYXJjaFF1ZXJ5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWx0ZXJTZWFyY2hRdWVyeSA9ICdmaWx0ZXJTZWFyY2hRdWVyeScsXHJcblxyXG4gIC8vIERQSV9Gcm9tTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZyb21MYWJlbCA9ICdmcm9tTGFiZWwnLFxyXG5cclxuICAvLyBEUElfRnVuY3Rpb25IZWxwLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGdW5jdGlvbkhlbHAgPSAnZnVuY3Rpb25IZWxwJyxcclxuXHJcbiAgLy8gRFBJX0luc3RydWN0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW5zdHJ1Y3Rpb25zID0gJ2luc3RydWN0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Jc3N1ZUhlbHBlckxpbmtzLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBJc3N1ZUhlbHBlckxpbmtzID0gJ2lzc3VlSGVscGVyTGlua3MnLFxyXG5cclxuICAvLyBEUElfTGFyZ2VVbml0RGlzcGxheSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGFyZ2VVbml0RGlzcGxheSA9ICdsYXJnZVVuaXREaXNwbGF5JyxcclxuXHJcbiAgLy8gRFBJX0xpbWl0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBMaW1pdCA9ICdsaW1pdCcsXHJcblxyXG4gIC8vIERQSV9MaXN0Vmlld05hbWVMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGlzdFZpZXdOYW1lTGFiZWwgPSAnbGlzdFZpZXdOYW1lTGFiZWwnLFxyXG5cclxuICAvLyBEUElfTGlzdFZpZXdWYWx1ZUxhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBMaXN0Vmlld1ZhbHVlTGFiZWwgPSAnbGlzdFZpZXdWYWx1ZUxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX01hcFNjYWxlUmVhZG91dFVuaXQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1hcFNjYWxlUmVhZG91dFVuaXQgPSAnbWFwU2NhbGVSZWFkb3V0VW5pdCcsXHJcblxyXG4gIC8vIERQSV9NZWFzdXJlRGltZW5zaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNZWFzdXJlRGltZW5zaW9uID0gJ21lYXN1cmVzRGltZW5zaW9uJyxcclxuXHJcbiAgLy8gRFBJX01pbWVUeXBlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNaW1lVHlwZSA9ICdtaW1lVHlwZScsXHJcblxyXG4gIC8vIERQSV9Ob3RpZmljYXRpb25Nc2csIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE5vdGlmaWNhdGlvbk1zZyA9ICdub3RpZmljYXRpb25Nc2cnLFxyXG5cclxuICAvLyBEUElfT3BlcmF0aW9uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgT3BlcmF0aW9uTmFtZSA9ICdvcGVyYXRpb25OYW1lJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VUaXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGFnZVRpdGxlID0gJ3BhZ2VUaXRsZScsXHJcblxyXG4gIC8vIERQSV9QYXR0ZXJuU3VtbWFyeSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGF0dGVyblN1bW1hcnkgPSAncGF0dGVyblN1bW1hcnknLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlTGluZUlkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSZWZlcmVuY2VMaW5lSWQgPSAncmVmTGluZUlkJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZUxpbmVQYWlyZWRJZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmVmZXJlbmNlTGluZVBhaXJlZElkID0gJ3JlZkxpbmVQYWlyZWRJZCcsXHJcblxyXG4gIC8vIERQSV9SZXBsYWNlVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmVwbGFjZVRleHQgPSAncmVwbGFjZVRleHQnLFxyXG5cclxuICAvLyBEUElfUmVxdWlyZWRWYXJpYWJsZU1lc3NhZ2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJlcXVpcmVkVmFyaWFibGVNZXNzYWdlID0gJ3JlcXVpcmVkVmFyaWFibGVNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX1Jlc3RhcnRFdmVyeVNwZWNpYWxDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSZXN0YXJ0RXZlcnlTcGVjaWFsQ2FwdGlvbiA9ICdyZXN0YXJ0RXZlcnlTcGVjaWFsQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9Sb290LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSb290ID0gJ3Jvb3QnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0aW9uU3VtbWFyeSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2VsZWN0aW9uU3VtbWFyeSA9ICdzZWxlY3Rpb25TdW1tYXJ5JyxcclxuXHJcbiAgLy8gRFBJX1Nlc3Npb25BdHRyaWJ1dGVLZXksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNlc3Npb25BdHRyaWJ1dGVLZXkgPSAnc2Vzc2lvbkF0dHJpYnV0ZUtleScsXHJcblxyXG4gIC8vIERQSV9TZXNzaW9uQXR0cmlidXRlVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNlc3Npb25BdHRyaWJ1dGVWYWx1ZSA9ICdzZXNzaW9uQXR0cmlidXRlVmFsdWUnLFxyXG5cclxuICAvLyBEUElfU2hlZXRBdHRyaWJ1dGVLZXksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNoZWV0QXR0cmlidXRlS2V5ID0gJ2Jhc2VTaGVldEF0dHJpYnV0ZUtleScsXHJcblxyXG4gIC8vIERQSV9TaGVldEF0dHJpYnV0ZVZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTaGVldEF0dHJpYnV0ZVZhbHVlID0gJ2Jhc2VTaGVldEF0dHJpYnV0ZVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1NtYWxsVW5pdERpc3BsYXksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNtYWxsVW5pdERpc3BsYXkgPSAnc21hbGxVbml0RGlzcGxheScsXHJcblxyXG4gIC8vIERQSV9Tb3VyY2VDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTb3VyY2VDYXB0aW9uID0gJ3NvdXJjZUNhcHRpb24nLFxyXG5cclxuICAvLyBEUElfU3JjUGF0aCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3JjUGF0aCA9ICdzcmNQYXRoJyxcclxuXHJcbiAgLy8gRFBJX1N0YXJ0U2VsZWN0aW9uQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3RhcnRTZWxlY3Rpb25DYXB0aW9uID0gJ3N0YXJ0U2VsZWN0aW9uQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9TdWJ0aXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3VidGl0bGUgPSAnc3VidGl0bGUnLFxyXG5cclxuICAvLyBEUElfVGFibGVhdVNlcnZlclNpdGVOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYWJsZWF1U2VydmVyU2l0ZU5hbWUgPSAndGFibGVhdVNlcnZlclNpdGVOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1RhcmdldENhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhcmdldENhcHRpb24gPSAndGFyZ2V0Q2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9UaHVtYm5haWxQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUaHVtYm5haWxQYXRoID0gJ3RodW1ibmFpbFBhdGgnLFxyXG5cclxuICAvLyBEUElfVG9MYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVG9MYWJlbCA9ICd0b0xhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1VSTEFkZHJlc3MsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVSTEFkZHJlc3MgPSAndXJsQWRkcmVzcycsXHJcblxyXG4gIC8vIERQSV9VcmxSb290LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVcmxSb290ID0gJ3VybFJvb3QnLFxyXG5cclxuICAvLyBEUElfVmFsdWVzVGFibGVIZWFkZXIsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFZhbHVlc1RhYmxlSGVhZGVyID0gJ3ZhbHVlc1RhYmxlSGVhZGVyJyxcclxuXHJcbiAgLy8gRFBJX1ZhbHVlc1RhYmxlSGVhZGVyMiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVmFsdWVzVGFibGVIZWFkZXIyID0gJ3ZhbHVlc1RhYmxlSGVhZGVyMicsXHJcblxyXG4gIC8vIERQSV9WYXJpYWJsZURlc2NyaXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBWYXJpYWJsZURlc2NyaXB0aW9uID0gJ3ZhcmlhYmxlRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfVmFyaWFibGVEaXNwbGF5TmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVmFyaWFibGVEaXNwbGF5TmFtZSA9ICd2YXJpYWJsZURpc3BsYXlOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1ZhcmlhYmxlR1VJRCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVmFyaWFibGVHVUlEID0gJ3ZhcmlhYmxlR3VpZCcsXHJcblxyXG4gIC8vIERQSV9WZXJib3NlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVmVyYm9zZU5hbWUgPSAndmVyYm9zZU5hbWUnLFxyXG5cclxuICAvLyBEUElfVmlld0lkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBWaWV3SWQgPSAndmlld0lkJyxcclxuXHJcbiAgLy8gRFBJX1dhcm5pbmcxLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBXYXJuaW5nMSA9ICd3YXJuaW5nMScsXHJcblxyXG4gIC8vIERQSV9XYXJuaW5nMiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgV2FybmluZzIgPSAnd2FybmluZzInLFxyXG5cclxuICAvLyBEUElfUmVmcmVzaFRva2VuLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSZWZyZXNoVG9rZW4gPSAncmVmcmVzaF90b2tlbicsXHJcblxyXG4gIC8vIERQSV9Ub2tlblR5cGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRva2VuVHlwZSA9ICd0b2tlbl90eXBlJyxcclxuXHJcbiAgLy8gRFBJX1hTUkZUb2tlbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgWFNSRlRva2VuID0gJ3hzcmZfdG9rZW4nLFxyXG5cclxuICAvLyBEUElfQXhpc1N1YnRpdGxlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBeGlzU3VidGl0bGUgPSAnYXhpc1N1YnRpdGxlJyxcclxuXHJcbiAgLy8gRFBJX0F4aXNUaXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXhpc1RpdGxlID0gJ2F4aXNUaXRsZScsXHJcblxyXG4gIC8vIERQSV9UaWNrTWFya09yaWdpbkRhdGFWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGlja01hcmtPcmlnaW5EYXRhVmFsdWUgPSAndGlja01hcmtPcmlnaW5EYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfVGlja01hcmtPcmlnaW5EYXRhVmFsdWVOb1RpbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRpY2tNYXJrT3JpZ2luRGF0YVZhbHVlTm9UaW1lID0gJ3RpY2tNYXJrT3JpZ2luRGF0YVZhbHVlTm9UaW1lJyxcclxuXHJcbiAgLy8gRFBJX1RpY2tNYXJrU3BhY2luZ0RhdGFWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGlja01hcmtTcGFjaW5nRGF0YVZhbHVlID0gJ3RpY2tNYXJrU3BhY2luZ0RhdGFWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0QWN0aW9uTG9jYWxpemVkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHRyYWN0QWN0aW9uTG9jYWxpemVkID0gJ2V4dHJhY3RBY3Rpb25Mb2NhbGl6ZWQnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdFNvdXJjZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXh0cmFjdFNvdXJjZSA9ICdleHRyYWN0U291cmNlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbGVDb250ZW50cywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmlsZUNvbnRlbnRzID0gJ2ZpbGVDb250ZW50cycsXHJcblxyXG4gIC8vIERQSV9TYXZlSW1hZ2VQYXRoLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTYXZlSW1hZ2VQYXRoID0gJ3NhdmVJbWFnZVBhdGgnLFxyXG5cclxuICAvLyBEUElfV2lkZ2V0VUlELCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBXaWRnZXRVSUQgPSAnd2lkZ2V0VW5pcXVlSWQnLFxyXG5cclxuICAvLyBEUElfRGF0ZVByb3BlcnRpZXNEaXNwbGF5VGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0ZVByb3BlcnRpZXNEaXNwbGF5VGV4dCA9ICdkYXRlUHJvcGVydGllc0Rpc3BsYXlUZXh0JyxcclxuXHJcbiAgLy8gRFBJX0RhdGVQcm9wZXJ0aWVzSGVscGVyVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0ZVByb3BlcnRpZXNIZWxwZXJUZXh0ID0gJ2RhdGVQcm9wZXJ0aWVzSGVscGVyVGV4dCcsXHJcblxyXG4gIC8vIERQSV9FdmVudE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV2ZW50TmFtZSA9ICdldmVudE5hbWUnLFxyXG5cclxuICAvLyBEUElfRXhjZXB0aW9uVHlwZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXhjZXB0aW9uVHlwZSA9ICdleGNlcHRpb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX1NlYXJjaFBsYWNlaG9sZGVyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTZWFyY2hQbGFjZWhvbGRlciA9ICdzZWFyY2hQbGFjZWhvbGRlcicsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRWZXJzaW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUYXJnZXRWZXJzaW9uID0gJ3RhcmdldFZlcnNpb24nLFxyXG5cclxuICAvLyBEUElfRGF0YVZhbHVlRGlzcGxheVN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YVZhbHVlRGlzcGxheVN0cmluZyA9ICdkYXRhVmFsdWVEaXNwbGF5U3RyaW5nJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpblN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRG9tYWluU3RyaW5nID0gJ2RvbWFpblN0cmluZycsXHJcblxyXG4gIC8vIERQSV9SYXdEYXRhVmFsdWVTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJhd0RhdGFWYWx1ZVN0cmluZyA9ICdyYXdEYXRhVmFsdWVTdHJpbmcnLFxyXG5cclxuICAvLyBEUElfUmljaFRleHREaWFsb2dUaXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmljaFRleHREaWFsb2dUaXRsZSA9ICdyaWNoVGV4dERpYWxvZ1RpdGxlJyxcclxuXHJcbiAgLy8gRFBJX1JpY2hUZXh0Q29udGVudCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmljaFRleHRDb250ZW50ID0gJ3JpY2hUZXh0Q29udGVudCcsXHJcblxyXG4gIC8vIERQSV9NYXJrU2l6ZUFzU3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXJrU2l6ZUFzU3RyaW5nID0gJ21hcmtTaXplQXNTdHJpbmcnLFxyXG5cclxuICAvLyBEUElfVW5pdHNMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVW5pdHNMYWJlbCA9ICd1bml0c0xhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0VtYWlsQWRkcmVzcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRW1haWxBZGRyZXNzID0gJ2VtYWlsQWRkcmVzcycsXHJcblxyXG4gIC8vIERQSV9GaXJzdE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpcnN0TmFtZSA9ICdmaXJzdE5hbWUnLFxyXG5cclxuICAvLyBEUElfTGFzdE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIExhc3ROYW1lID0gJ2xhc3ROYW1lJyxcclxuXHJcbiAgLy8gRFBJX1N1bW1hcnlDYXJkQXZnLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTdW1tYXJ5Q2FyZEF2ZyA9ICdzdW1tYXJ5Q2FyZEF2ZycsXHJcblxyXG4gIC8vIERQSV9TdW1tYXJ5Q2FyZENhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXJkQ2FwdGlvbiA9ICdzdW1tYXJ5Q2FyZENhcHRpb24nLFxyXG5cclxuICAvLyBEUElfU3VtbWFyeUNhcmRDb3VudCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3VtbWFyeUNhcmRDb3VudCA9ICdzdW1tYXJ5Q2FyZENvdW50JyxcclxuXHJcbiAgLy8gRFBJX1N1bW1hcnlDYXJkS3VydG9zaXMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXJkS3VydG9zaXMgPSAnc3VtbWFyeUNhcmRLdXJ0b3NpcycsXHJcblxyXG4gIC8vIERQSV9TdW1tYXJ5Q2FyZE1heCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3VtbWFyeUNhcmRNYXggPSAnc3VtbWFyeUNhcmRNYXgnLFxyXG5cclxuICAvLyBEUElfU3VtbWFyeUNhcmRNZWRpYW4sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXJkTWVkaWFuID0gJ3N1bW1hcnlDYXJkTWVkaWFuJyxcclxuXHJcbiAgLy8gRFBJX1N1bW1hcnlDYXJkTWluLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTdW1tYXJ5Q2FyZE1pbiA9ICdzdW1tYXJ5Q2FyZE1pbicsXHJcblxyXG4gIC8vIERQSV9TdW1tYXJ5Q2FyZFF1YXJ0MSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3VtbWFyeUNhcmRRdWFydDEgPSAnc3VtbWFyeUNhcmRRdWFydDEnLFxyXG5cclxuICAvLyBEUElfU3VtbWFyeUNhcmRRdWFydDMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXJkUXVhcnQzID0gJ3N1bW1hcnlDYXJkUXVhcnQzJyxcclxuXHJcbiAgLy8gRFBJX1N1bW1hcnlDYXJkU2tld25lc3MsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXJkU2tld25lc3MgPSAnc3VtbWFyeUNhcmRTa2V3bmVzcycsXHJcblxyXG4gIC8vIERQSV9TdW1tYXJ5Q2FyZFN0ZGV2LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTdW1tYXJ5Q2FyZFN0ZGV2ID0gJ3N1bW1hcnlDYXJkU3RkZXYnLFxyXG5cclxuICAvLyBEUElfU3VtbWFyeUNhcmRTdW0sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN1bW1hcnlDYXJkU3VtID0gJ3N1bW1hcnlDYXJkU3VtJyxcclxuXHJcbiAgLy8gRFBJX1ZhbHVlQ2xhc3NBdHRyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBWYWx1ZUNsYXNzQXR0ciA9ICd2YWx1ZUNsYXNzQXR0cicsXHJcblxyXG4gIC8vIERQSV9UcmVuZExpbmVEaWFsb2dUaXRsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVHJlbmRMaW5lRGlhbG9nVGl0bGUgPSAndHJlbmRMaW5lRGlhbG9nVGl0bGUnLFxyXG5cclxuICAvLyBEUElfTGluZWFyRml0VHlwZUxhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBMaW5lYXJGaXRUeXBlTGFiZWwgPSAnbGluZWFyRml0VHlwZUxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0xvZ0ZpdFR5cGVMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTG9nRml0VHlwZUxhYmVsID0gJ2xvZ0ZpdFR5cGVMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9FeHBGaXRUeXBlTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEV4cEZpdFR5cGVMYWJlbCA9ICdleHBGaXRUeXBlTGFiZWwnLFxyXG5cclxuICAvLyBEUElfUG93ZXJGaXRUeXBlTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBvd2VyRml0VHlwZUxhYmVsID0gJ3Bvd2VyRml0VHlwZUxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1BvbHlub21pYWxGaXRUeXBlTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBvbHlub21pYWxGaXRUeXBlTGFiZWwgPSAncG9seW5vbWlhbEZpdFR5cGVMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9FeGNsdWRlQ29sb3JMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXhjbHVkZUNvbG9yTGFiZWwgPSAnZXhjbHVkZUNvbG9yTGFiZWwnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlQ29uZmlkZW5jZUJhbmRzTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEVuYWJsZUNvbmZpZGVuY2VCYW5kc0xhYmVsID0gJ2VuYWJsZUNvbmZpZGVuY2VCYW5kc0xhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmNlSW50ZXJjZXB0WmVyb0xhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb3JjZUludGVyY2VwdFplcm9MYWJlbCA9ICdmb3JjZUludGVyY2VwdFplcm8gbGFiZWwnLFxyXG5cclxuICAvLyBEUElfRW5hYmxlSW5zdGFudEFuYWx5dGljc0xhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFbmFibGVJbnN0YW50QW5hbHl0aWNzTGFiZWwgPSAnZW5hYmxlSW5zdGFudEFuYWx5dGljc0xhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0VuYWJsZVRvb2x0aXBzTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEVuYWJsZVRvb2x0aXBzTGFiZWwgPSAnZW5hYmxlVG9vbHRpcExhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0F1dGhlbnRpY2F0aW9uU3VtbWFyeSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQXV0aGVudGljYXRpb25TdW1tYXJ5ID0gJ2F1dGhlbnRpY2F0aW9uU3VtbWFyeScsXHJcblxyXG4gIC8vIERQSV9CdG5DYW5jZWxUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCdG5DYW5jZWxUZXh0ID0gJ2J0bkNhbmNlbFRleHQnLFxyXG5cclxuICAvLyBEUElfQnRuT2tUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCdG5Pa1RleHQgPSAnYnRuT2tUZXh0JyxcclxuXHJcbiAgLy8gRFBJX0J1dHRvblRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEJ1dHRvblRleHQgPSAnYnV0dG9uVGV4dCcsXHJcblxyXG4gIC8vIERQSV9DYWxjdWxhdGlvbkNhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENhbGN1bGF0aW9uQ2FwdGlvbiA9ICdjYWxjdWxhdGlvbkNhcHRpb24nLFxyXG5cclxuICAvLyBEUElfQ2FsY3VsYXRpb25EZXBlbmRlbmNpZXMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENhbGN1bGF0aW9uRGVwZW5kZW5jaWVzID0gJ2NhbGN1bGF0aW9uRGVwZW5kZW5jaWVzJyxcclxuXHJcbiAgLy8gRFBJX0NhbGN1bGF0aW9uRm9ybXVsYSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2FsY3VsYXRpb25Gb3JtdWxhID0gJ2NhbGN1bGF0aW9uRm9ybXVsYScsXHJcblxyXG4gIC8vIERQSV9DaGVja1B1Ymxpc2hNZXNzYWdlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDaGVja1B1Ymxpc2hNZXNzYWdlID0gJ2NoZWNrUHVibGlzaFN1bW1hcnknLFxyXG5cclxuICAvLyBEUElfQ2x1c3Rlck1vZGVsVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2x1c3Rlck1vZGVsVGV4dCA9ICdjbHVzdGVyTW9kZWxUZXh0JyxcclxuXHJcbiAgLy8gRFBJX0NsdXN0ZXJTdW1tYXJ5U2NhbGVkVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2x1c3RlclN1bW1hcnlTY2FsZWRUZXh0ID0gJ2NsdXN0ZXJTdW1tYXJ5U2NhbGVkVGV4dCcsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyU3VtbWFyeVRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENsdXN0ZXJTdW1tYXJ5VGV4dCA9ICdjbHVzdGVyU3VtbWFyeVRleHQnLFxyXG5cclxuICAvLyBEUElfQ29sdW1uQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29sdW1uQ2FwdGlvbiA9ICdjb2x1bW5DYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0N1cnJlbnREYXRlUGVyaW9kTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEN1cnJlbnREYXRlUGVyaW9kTGFiZWwgPSAnY3VycmVudERhdGVQZXJpb2RMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9DdXJyZW50VG9EYXRlTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEN1cnJlbnRUb0RhdGVMYWJlbCA9ICdjdXJyZW50VG9EYXRlTGFiZWwnLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZUNhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFzb3VyY2VDYXB0aW9uID0gJ2RhdGFzb3VyY2VDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RhdGVSYW5nZUxhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRlUmFuZ2VMYWJlbCA9ICdkYXRlUmFuZ2VMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0Q2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGVmYXVsdENhcHRpb24gPSAnZGVmYXVsdENhcHRpb24nLFxyXG5cclxuICAvLyBEUElfRGlzcGxheVN0cmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGlzcGxheVN0cmluZyA9ICdkaXNwbGF5VGV4dCcsXHJcblxyXG4gIC8vIERQSV9EcmFnRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERyYWdEZXNjcmlwdGlvbiA9ICdkcmFnRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfRXhjZXB0aW9uTWVzc2FnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRXhjZXB0aW9uTWVzc2FnZSA9ICdleGNlcHRpb25NZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX0V4cGxhbmF0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBFeHBsYW5hdGlvbiA9ICdleHBsYW5hdGlvbicsXHJcblxyXG4gIC8vIERQSV9GaWVsZENhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpZWxkQ2FwdGlvbiA9ICdmaWVsZENhcHRpb24nLFxyXG5cclxuICAvLyBEUElfRmllbGRTdW1tYXJ5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWVsZFN1bW1hcnkgPSAnZmllbGRTdW1tYXJ5JyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkU3VtbWFyeUxhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWVsZFN1bW1hcnlMYWJlbCA9ICdmaWVsZFN1bW1hcnlMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJEZXNjcmlwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmlsdGVyRGVzY3JpcHRpb24gPSAnZmlsdGVyRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfRmlsdGVyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmlsdGVyTmFtZSA9ICdmaWx0ZXJOYW1lJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0TW9kZWxUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb3JlY2FzdE1vZGVsVGV4dCA9ICdmb3JlY2FzdE1vZGVsVGV4dCcsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdFN1bW1hcnlQY3RUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb3JlY2FzdFN1bW1hcnlQY3RUZXh0ID0gJ2ZvcmVjYXN0U3VtbWFyeVBjdFRleHQnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RTdW1tYXJ5VGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9yZWNhc3RTdW1tYXJ5VGV4dCA9ICdmb3JlY2FzdFN1bW1hcnlUZXh0JyxcclxuXHJcbiAgLy8gRFBJX0hhc0FjdGl2ZUV4dHJhY3RUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBIYXNBY3RpdmVFeHRyYWN0VGV4dCA9ICdoYXNBY3RpdmVFeHRyYWN0VGV4dCcsXHJcblxyXG4gIC8vIERQSV9IdG1sQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEh0bWxDb2xvciA9ICdodG1sQ29sb3InLFxyXG5cclxuICAvLyBEUElfSW5jbHVkZUxvY2FsRmlsZXNDaGVja2VkV2FybmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW5jbHVkZUxvY2FsRmlsZXNDaGVja2VkV2FybmluZyA9ICdpbmNsdWRlTG9jYWxGaWxlc0NoZWNrZWRXYXJuaW5nJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVMb2NhbEZpbGVzV2FybmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW5jbHVkZUxvY2FsRmlsZXNXYXJuaW5nID0gJ2luY2x1ZGVMb2NhbEZpbGVzV2FybmluZycsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkRmllbGRDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBJbnZhbGlkRmllbGRDYXB0aW9uID0gJ2ludmFsaWRGaWVsZENhcHRpb24nLFxyXG5cclxuICAvLyBEUElfTGFzdERhdGVQZXJpb2RMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGFzdERhdGVQZXJpb2RMYWJlbCA9ICdsYXN0RGF0ZVBlcmlvZExhYmVsJyxcclxuXHJcbiAgLy8gRFBJX0xhc3RORGF0ZVBlcmlvZHNMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTGFzdE5EYXRlUGVyaW9kc0xhYmVsID0gJ2xhc3RORGF0ZVBlcmlvZHNMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9MaW1pdFN1bW1hcnksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIExpbWl0U3VtbWFyeSA9ICdzdW1tYXJ5JyxcclxuXHJcbiAgLy8gRFBJX0xvYWRlZEV4aXN0aW5nT2JqZWN0V2FybmluZywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTG9hZGVkRXhpc3RpbmdPYmplY3RXYXJuaW5nID0gJ2xvYWRlZEV4aXN0aW5nT2JqZWN0V2FybmluZycsXHJcblxyXG4gIC8vIERQSV9NYW5hZ2VEYXRhc291cmNlc1N1bW1hcnksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1hbmFnZURhdGFzb3VyY2VzU3VtbWFyeSA9ICdtYW5hZ2VEYXRhc291cmNlc1N1bW1hcnknLFxyXG5cclxuICAvLyBEUElfTW9kYWxEaWFsb2csIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1vZGFsRGlhbG9nID0gJ21vZGFsRGlhbG9nJyxcclxuXHJcbiAgLy8gRFBJX05ld0RhdGFzb3VyY2VDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOZXdEYXRhc291cmNlQ2FwdGlvbiA9ICduZXdEYXRhc291cmNlQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9OZXh0RGF0ZVBlcmlvZExhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOZXh0RGF0ZVBlcmlvZExhYmVsID0gJ25leHREYXRlUGVyaW9kTGFiZWwnLFxyXG5cclxuICAvLyBEUElfTmV4dE5EYXRlUGVyaW9kc0xhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOZXh0TkRhdGVQZXJpb2RzTGFiZWwgPSAnbmV4dE5EYXRlUGVyaW9kc0xhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1Blcm1pc3Npb25zQnV0dG9uTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBlcm1pc3Npb25zQnV0dG9uTGFiZWwgPSAncGVybWlzc2lvbnNCdXR0b25MYWJlbCcsXHJcblxyXG4gIC8vIERQSV9QZXJtaXNzaW9uc0VkaXRvclJvbGVJZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGVybWlzc2lvbnNFZGl0b3JSb2xlSWQgPSAncGVybWlzc2lvbnNFZGl0b3JSb2xlSWQnLFxyXG5cclxuICAvLyBEUElfUGVybWlzc2lvbnNMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGVybWlzc2lvbnNMYWJlbCA9ICdwZXJtaXNzaW9uc0xhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1BlcnNwZWN0aXZlQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGVyc3BlY3RpdmVDYXB0aW9uID0gJ3BlcnNwZWN0aXZlQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoQnV0dG9uTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFB1Ymxpc2hCdXR0b25MYWJlbCA9ICdwdWJsaXNoQnV0dG9uTGFiZWwnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaENob2ljZUxhYmVsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQdWJsaXNoQ2hvaWNlTGFiZWwgPSAncHVibGlzaENob2ljZUxhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1B1Ymxpc2hPYmplY3RWaWV3c1N1bW1hcnksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFB1Ymxpc2hPYmplY3RWaWV3c1N1bW1hcnkgPSAncHVibGlzaE9iamVjdFZpZXdzU3VtbWFyeScsXHJcblxyXG4gIC8vIERQSV9RdWFsaWZpZWRGaWVsZENhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFF1YWxpZmllZEZpZWxkQ2FwdGlvbiA9ICdxdWFsaWZpZWRGaWVsZENhcHRpb24nLFxyXG5cclxuICAvLyBEUElfUmVsYXRpb25zaGlwVG9vbHRpcFRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJlbGF0aW9uc2hpcFRvb2x0aXBUZXh0ID0gJ3JlbGF0aW9uc2hpcFRvb2x0aXBUZXh0JyxcclxuXHJcbiAgLy8gRFBJX1Jlc2V0T2JqZWN0QXR0cmlidXRlc1dhcm5pbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJlc2V0T2JqZWN0QXR0cmlidXRlc1dhcm5pbmcgPSAncmVzZXRPYmplY3RBdHRyaWJ1dGVzV2FybmluZycsXHJcblxyXG4gIC8vIERQSV9Sb3dDb3VudENhcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJvd0NvdW50Q2FwdGlvbiA9ICdyb3dDb3VudENhcHRpb24nLFxyXG5cclxuICAvLyBEUElfU2VydmVyQ2FwdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2VydmVyQ2FwdGlvbiA9ICdzZXJ2ZXJDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1NpemVNb2RlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2l6ZU1vZGVOYW1lID0gJ3NpemVNb2RlTmFtZScsXHJcblxyXG4gIC8vIERQSV9TdW1tYXJ5VGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3VtbWFyeVRleHQgPSAnc3VtbWFyeVRleHQnLFxyXG5cclxuICAvLyBEUElfU3luY0NsaWVudFVzZUV4dHJhY3RMYWJlbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU3luY0NsaWVudFVzZUV4dHJhY3RMYWJlbCA9ICdzeW5jQ2xpZW50VXNlRXh0cmFjdExhYmVsJyxcclxuXHJcbiAgLy8gRFBJX1RleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRleHQgPSAndGV4dCcsXHJcblxyXG4gIC8vIERQSV9OTEdUZXh0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOTEdUZXh0ID0gJ25sZ1RleHQnLFxyXG5cclxuICAvLyBEUElfQXJrTGFuZ1RleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFya0xhbmdUZXh0ID0gJ2Fya2xhbmdfdGV4dCcsXHJcblxyXG4gIC8vIERQSV9UZXh0RHJvcGRvd25Db250cm9sTGFiZWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRleHREcm9wZG93bkNvbnRyb2xMYWJlbCA9ICdjb250cm9sTGFiZWwnLFxyXG5cclxuICAvLyBEUElfVGh1bWJuYWlsVXNlck5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRodW1ibmFpbFVzZXJOYW1lID0gJ3RodW1ibmFpbFVzZXJOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1RpdGxlU3RyaW5nLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUaXRsZVN0cmluZyA9ICd0aXRsZVN0cmluZycsXHJcblxyXG4gIC8vIERQSV9Ub29sdGlwVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVG9vbHRpcFRleHQgPSAndG9vbHRpcFRleHQnLFxyXG5cclxuICAvLyBEUElfVXBkYXRlZENhbGNDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVcGRhdGVkQ2FsY0NhcHRpb24gPSAndXBkYXRlZENhbGN1bGF0aW9uQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9VcGRhdGVkQ2FsY0Zvcm11bGEsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVwZGF0ZWRDYWxjRm9ybXVsYSA9ICd1cGRhdGVkQ2FsY3VsYXRpb25Gb3JtdWxhJyxcclxuXHJcbiAgLy8gRFBJX1VzZXJDYXB0aW9uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVc2VyQ2FwdGlvbiA9ICd1c2VyQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9XYXJuaW5nVG9vbHRpcFRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFdhcm5pbmdUb29sdGlwVGV4dCA9ICd3YXJuaW5nVG9vbHRpcFRleHQnLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZUZpbGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFzb3VyY2VGaWxlID0gJ2RhdGFzb3VyY2VGaWxlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpbGUgPSAnZmlsZScsXHJcblxyXG4gIC8vIERQSV9GaWxlTmFtZUJhc2UsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpbGVOYW1lQmFzZSA9ICdmaWxlbmFtZUJhc2UnLFxyXG5cclxuICAvLyBEUElfTmV3RmlsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTmV3RmlsZSA9ICduZXdGaWxlJyxcclxuXHJcbiAgLy8gRFBJX09yaWdpbmFsRmlsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgT3JpZ2luYWxGaWxlID0gJ29yaWdpbmFsRmlsZScsXHJcblxyXG4gIC8vIERQSV9PdXRwdXRGaWxlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPdXRwdXRGaWxlID0gJ291dHB1dEZpbGUnLFxyXG5cclxuICAvLyBEUElfU2FtcGxlRmlsZU5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNhbXBsZUZpbGVOYW1lID0gJ3NhbXBsZUZpbGVuYW1lJyxcclxuXHJcbiAgLy8gRFBJX1dvcmtib29rRmlsZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgV29ya2Jvb2tGaWxlID0gJ3dvcmtib29rRmlsZScsXHJcblxyXG4gIC8vIERQSV9JbWFnZUtleSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW1hZ2VLZXkgPSAnaW1hZ2VLZXknLFxyXG5cclxuICAvLyBEUElfT3ZlcmxheUltYWdlS2V5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPdmVybGF5SW1hZ2VLZXkgPSAnb3ZlcmxheUltYWdlS2V5JyxcclxuXHJcbiAgLy8gRFBJX1RlbXBGaWxlS2V5LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUZW1wRmlsZUtleSA9ICd0ZW1wZmlsZUtleScsXHJcblxyXG4gIC8vIERQSV9DYXB0dXJlZFNoZWV0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDYXB0dXJlZFNoZWV0ID0gJ2NhcHR1cmVkU2hlZXQnLFxyXG5cclxuICAvLyBEUElfQ3VycmVudFNoZWV0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDdXJyZW50U2hlZXQgPSAnY3VycmVudFNoZWV0JyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGFzaGJvYXJkID0gJ2Rhc2hib2FyZCcsXHJcblxyXG4gIC8vIERQSV9FbnN1cmVTaGVldCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRW5zdXJlU2hlZXQgPSAnZW5zdXJlU2hlZXROYW1lJyxcclxuXHJcbiAgLy8gRFBJX05ld1NoZWV0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOZXdTaGVldCA9ICduZXdTaGVldCcsXHJcblxyXG4gIC8vIERQSV9TaGVldCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2hlZXQgPSAnc2hlZXQnLFxyXG5cclxuICAvLyBEUElfU2hlZXROYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTaGVldE5hbWUgPSAnc2hlZXROYW1lJyxcclxuXHJcbiAgLy8gRFBJX1NvdXJjZURhc2hib2FyZCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU291cmNlRGFzaGJvYXJkID0gJ3NvdXJjZURhc2hib2FyZCcsXHJcblxyXG4gIC8vIERQSV9Tb3VyY2VTaGVldCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU291cmNlU2hlZXQgPSAnc291cmNlU2hlZXQnLFxyXG5cclxuICAvLyBEUElfVGFyZ2V0U2hlZXQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhcmdldFNoZWV0ID0gJ3RhcmdldFNoZWV0JyxcclxuXHJcbiAgLy8gRFBJX1dvcmtib29rTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgV29ya2Jvb2tOYW1lID0gJ3dvcmtib29rTmFtZScsXHJcblxyXG4gIC8vIERQSV9Xb3Jrc2hlZXQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFdvcmtzaGVldCA9ICd3b3Jrc2hlZXQnLFxyXG5cclxuICAvLyBEUElfQmFzZVZpZXdUaHVtYkxpbmssIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEJhc2VWaWV3VGh1bWJMaW5rID0gJ2Jhc2VWaWV3VGh1bWJMaW5rJyxcclxuXHJcbiAgLy8gRFBJX0Jsb2dMaW5rLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCbG9nTGluayA9ICdibG9nTGluaycsXHJcblxyXG4gIC8vIERQSV9DYWNoZVVybCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ2FjaGVVcmwgPSAnY2FjaGVVcmwnLFxyXG5cclxuICAvLyBEUElfRG93bmxvYWRMaW5rLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEb3dubG9hZExpbmsgPSAnZG93bmxvYWRMaW5rJyxcclxuXHJcbiAgLy8gRFBJX1JlcG9zaXRvcnlVcmwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFJlcG9zaXRvcnlVcmwgPSAncmVwb3NpdG9yeVVybCcsXHJcblxyXG4gIC8vIERQSV9TaGFyZUxpbmssIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFNoYXJlTGluayA9ICdzaGFyZUxpbmsnLFxyXG5cclxuICAvLyBEUElfVVJMLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVUkwgPSAndXJsJyxcclxuXHJcbiAgLy8gRFBJX0NsdXN0ZXJNb2RlbEh0bWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENsdXN0ZXJNb2RlbEh0bWwgPSAnY2x1c3Rlck1vZGVsSHRtbCcsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyU3VtbWFyeUh0bWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENsdXN0ZXJTdW1tYXJ5SHRtbCA9ICdjbHVzdGVyU3VtbWFyeUh0bWwnLFxyXG5cclxuICAvLyBEUElfQ2x1c3RlclN1bW1hcnlTY2FsZWRIdG1sLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDbHVzdGVyU3VtbWFyeVNjYWxlZEh0bWwgPSAnY2x1c3RlclN1bW1hcnlTY2FsZWRIdG1sJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpZWxkRGVzY3JpcHRpb24gPSAnZmllbGREZXNjcmlwdGlvbicsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdE1vZGVsSHRtbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9yZWNhc3RNb2RlbEh0bWwgPSAnZm9yZWNhc3RNb2RlbEh0bWwnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RTdW1tYXJ5SHRtbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRm9yZWNhc3RTdW1tYXJ5SHRtbCA9ICdmb3JlY2FzdFN1bW1hcnlIdG1sJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0U3VtbWFyeVBjdEh0bWwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZvcmVjYXN0U3VtbWFyeVBjdEh0bWwgPSAnZm9yZWNhc3RTdW1tYXJ5UGN0SHRtbCcsXHJcblxyXG4gIC8vIERQSV9IdG1sLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBIdG1sID0gJ2h0bWwnLFxyXG5cclxuICAvLyBEUElfSHRtbFNlbGVjdGlvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSHRtbFNlbGVjdGlvbiA9ICdodG1sU2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0h0bWxUb29sdGlwLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBIdG1sVG9vbHRpcCA9ICdodG1sVG9vbHRpcCcsXHJcblxyXG4gIC8vIERQSV9IdG1sVG9vbHRpcE1vZGlmaWVkLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBIdG1sVG9vbHRpcE1vZGlmaWVkID0gJ2h0bWxUb29sdGlwTW9kaWZpZWQnLFxyXG5cclxuICAvLyBEUElfVGl0bGVIdG1sLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBUaXRsZUh0bWwgPSAndGl0bGVIdG1sJyxcclxuXHJcbiAgLy8gRFBJX0NhY2hlVXJsSW5mb0pzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENhY2hlVXJsSW5mb0pzb24gPSAnY2FjaGVVcmxJbmZvSnNvbicsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJTZWFyY2hKc29uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWx0ZXJTZWFyY2hKc29uID0gJ2ZpbHRlclNlYXJjaEpzb24nLFxyXG5cclxuICAvLyBEUElfRmlsdGVyU2VhcmNoV2l0aEluZGV4SnNvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmlsdGVyU2VhcmNoV2l0aEluZGV4SnNvbiA9ICdmaWx0ZXJTZWFyY2hXaXRoSW5kZXhKc29uJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclNob3dDaGlsZHJlbkpzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpbHRlclNob3dDaGlsZHJlbkpzb24gPSAnZmlsdGVyU2hvd0NoaWxkcmVuSnNvbicsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJzSnNvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmlsdGVyc0pzb24gPSAnZmlsdGVyc0pzb24nLFxyXG5cclxuICAvLyBEUElfRnJhbWVKc29uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGcmFtZUpzb24gPSAnZnJhbWVKc29uJyxcclxuXHJcbiAgLy8gRFBJX0dlb21ldHJ5SnNvbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgR2VvbWV0cnlKc29uID0gJ2dlb21ldHJ5SnNvbicsXHJcblxyXG4gIC8vIERQSV9HZXRGaWx0ZXJJdGVtc0pzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEdldEZpbHRlckl0ZW1zSnNvbiA9ICdnZXRGaWx0ZXJJdGVtc0pzb24nLFxyXG5cclxuICAvLyBEUElfS2VlcE9ubHlSZXNwb25zZUpzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEtlZXBPbmx5UmVzcG9uc2VKc29uID0gJ2tlZXBPbmx5UmVzcG9uc2VKc29uJyxcclxuXHJcbiAgLy8gRFBJX01lbnVDb21tYW5kc0pzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1lbnVDb21tYW5kc0pzb24gPSAnbWVudUNvbW1hbmRzSnNvbicsXHJcblxyXG4gIC8vIERQSV9Nb2RpZmllZFNoZWV0c0pzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1vZGlmaWVkU2hlZXRzSnNvbiA9ICdtb2RpZmllZFNoZWV0c0pzb24nLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyQ3RybEpzb24sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhcmFtZXRlckN0cmxKc29uID0gJ3BhcmFtZXRlckN0cmxKc29uJyxcclxuXHJcbiAgLy8gRFBJX1ZpZXdKc29uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBWaWV3SnNvbiA9ICd2aWV3SnNvbicsXHJcblxyXG4gIC8vIERQSV9DdXN0b21pemVkVmlld1hNTCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ3VzdG9taXplZFZpZXdYTUwgPSAnY3VzdG9taXplZFZpZXdYbWwnLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZURlbHRhWE1MLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBEYXRhc291cmNlRGVsdGFYTUwgPSAnZGF0YXNvdXJjZURlbHRhWG1sJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFzb3VyY2VYTUwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFzb3VyY2VYTUwgPSAnZGF0YXNvdXJjZVhtbCcsXHJcblxyXG4gIC8vIERQSV9LZXljaGFpblhNTCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgS2V5Y2hhaW5YTUwgPSAna2V5Y2hhaW5YbWwnLFxyXG5cclxuICAvLyBEUElfUGVybWlzc2lvbnNNb2RlbFhNTCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGVybWlzc2lvbnNNb2RlbFhNTCA9ICdwZXJtaXNzaW9uc01vZGVsWG1sJyxcclxuXHJcbiAgLy8gRFBJX1NoYXJlZFZpZXdzWE1MLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTaGFyZWRWaWV3c1hNTCA9ICdzaGFyZWRWaWV3c1htbCcsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRVUkwsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRhcmdldFVSTCA9ICd0YXJnZXRVcmwnLFxyXG5cclxuICAvLyBEUElfQW5jaG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBbmNob3IgPSAnYW5jaG9yJyxcclxuXHJcbiAgLy8gRFBJX0NlbnRlclZhbHVlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDZW50ZXJWYWx1ZSA9ICdjZW50ZXJWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9Db21wdXRlZEJpblNpemUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbXB1dGVkQmluU2l6ZSA9ICdjb21wdXRlZEJpblNpemUnLFxyXG5cclxuICAvLyBEUElfQ29uc3RhbnRWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQ29uc3RhbnRWYWx1ZSA9ICdjb25zdGFudFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1BhaXJlZENvbnN0YW50VmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFBhaXJlZENvbnN0YW50VmFsdWUgPSAncGFpcmVkQ29uc3RhbnRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9Db3VudERpc3RpbmN0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb3VudERpc3RpbmN0ID0gJ2NvdW50RGlzdGluY3QnLFxyXG5cclxuICAvLyBEUElfRGF0YU1heCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGF0YU1heCA9ICdkYXRhTWF4JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFNaW4sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFNaW4gPSAnZGF0YU1pbicsXHJcblxyXG4gIC8vIERQSV9EYXRhVmFsdWVTdHJpbmcsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIERhdGFWYWx1ZVN0cmluZyA9ICdkYXRhVmFsdWVTdHInLFxyXG5cclxuICAvLyBEUElfRW5kVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEVuZFZhbHVlID0gJ2VuZFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1JhbmdlTWF4LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSYW5nZU1heCA9ICdyYW5nZU1heCcsXHJcblxyXG4gIC8vIERQSV9SYW5nZU1pbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmFuZ2VNaW4gPSAncmFuZ2VNaW4nLFxyXG5cclxuICAvLyBEUElfUmFuZ2VTdGVwU2l6ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmFuZ2VTdGVwU2l6ZSA9ICdyYW5nZVN0ZXBTaXplJyxcclxuXHJcbiAgLy8gRFBJX1N0YXJ0VmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN0YXJ0VmFsdWUgPSAnc3RhcnRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRWYWx1ZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFyZ2V0VmFsdWUgPSAndGFyZ2V0VmFsdWUnLFxyXG5cclxuICAvLyBEUElfVmFsdWVJbmMsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFZhbHVlSW5jID0gJ3ZhbHVlSW5jJyxcclxuXHJcbiAgLy8gRFBJX1ZhbHVlTWF4LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBWYWx1ZU1heCA9ICd2YWx1ZU1heCcsXHJcblxyXG4gIC8vIERQSV9WYWx1ZU1pbiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVmFsdWVNaW4gPSAndmFsdWVNaW4nLFxyXG5cclxuICAvLyBEUElfUXVhbnRpbGVzVmFsdWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFF1YW50aWxlc1ZhbHVlID0gJ3F1YW50aWxlc1ZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1VzZXJJbnB1dEJpblNpemUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFVzZXJJbnB1dEJpblNpemUgPSAndXNlckJpblNpemUnLFxyXG5cclxuICAvLyBEUElfQWRkZWREYXRhU291cmNlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBBZGRlZERhdGFTb3VyY2VzID0gJ2FkZGVkRGF0YVNvdXJjZU5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0FkZHJlc3NpbmdDYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBBZGRyZXNzaW5nQ2FwdGlvbnMgPSAnYWRkcmVzc2luZ0NhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0FnZ3JlZ2F0aW9uQ2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQWdncmVnYXRpb25DYXB0aW9ucyA9ICdhZ2dyZWdhdGlvbkNhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0F0VGhlTGV2ZWxDYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBBdFRoZUxldmVsQ2FwdGlvbnMgPSAnYXRUaGVMZXZlbENhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0F1dGhlbnRpY2F0aW9uU2V0dGluZ0xhYmVscywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBBdXRoZW50aWNhdGlvblNldHRpbmdMYWJlbHMgPSAnYXV0aGVudGljYXRpb25TZXR0aW5nTGFiZWxzJyxcclxuXHJcbiAgLy8gRFBJX0F1dG9zYXZlRmlsZUlkc1ZlY3RvciwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBBdXRvc2F2ZUZpbGVJZHNWZWN0b3IgPSAnYXV0b3NhdmVGaWxlSWRzVmVjdG9yJyxcclxuXHJcbiAgLy8gRFBJX0NoYW5nZWRUdXBsZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQ2hhbmdlZFR1cGxlcyA9ICdjaGFuZ2VkVHVwbGVzJyxcclxuXHJcbiAgLy8gRFBJX0NoYXJzZXRzQXZhaWxhYmxlLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIENoYXJzZXRzQXZhaWxhYmxlID0gJ2NoYXJzZXRzQXZhaWxhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0NoYXJzZXREaXNwbGF5TmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQ2hhcnNldERpc3BsYXlOYW1lcyA9ICdjaGFyc2V0RGlzcGxheU5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yRmFjdG9ycywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBDb2xvckZhY3RvcnMgPSAnY29sb3JGYWN0b3JzJyxcclxuXHJcbiAgLy8gRFBJX0NvbHVtbkZ1bGxOYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBDb2x1bW5GdWxsTmFtZXMgPSAnY29sdW1uRnVsbE5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25OYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBDb25uZWN0aW9uTmFtZXMgPSAnY29ubmVjdGlvbk5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25DYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBDb25uZWN0aW9uQ2FwdGlvbnMgPSAnY29ubmVjdGlvbkNhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25CaWdRdWVyeUxlZ2FjeVNRTENoZWNrQm94LCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIENvbm5lY3Rpb25CaWdRdWVyeUxlZ2FjeVNRTENoZWNrQm94ID0gJ2Nvbm5lY3Rpb25CaWdxdWVyeUxlZ2FjeVNxbENoZWNrYm94JyxcclxuXHJcbiAgLy8gRFBJX0N1c3RvbUZpZWxkT3JkZXIsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQ3VzdG9tRmllbGRPcmRlciA9ICdjdXN0b21GaWVsZE9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VDbGFzc2VzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIERhdGFTb3VyY2VDbGFzc2VzID0gJ2RhdGFTb3VyY2VDbGFzc2VzJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VOYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBEYXRhU291cmNlTmFtZXMgPSAnZGF0YVNvdXJjZU5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VOYW1lczIsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRGF0YVNvdXJjZU5hbWVzMiA9ICdkYXRhU291cmNlTmFtZXMyJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VzV2l0aEVtcHR5UmVsYXRpb24sIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRGF0YVNvdXJjZXNXaXRoRW1wdHlSZWxhdGlvbiA9ICdkYXRhU291cmNlc1dpdGhFbXB0eVJlbGF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VDcmVhdGlvbkVycm9ycywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBEYXRhU291cmNlQ3JlYXRpb25FcnJvcnMgPSAnZGF0YVNvdXJjZUNyZWF0aW9uRXJyb3JzJyxcclxuXHJcbiAgLy8gRFBJX0RhdGVGb3JtYXRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIERhdGVGb3JtYXRzID0gJ2RhdGVGb3JtYXRzJyxcclxuXHJcbiAgLy8gRFBJX0RheU5hbWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIERheU5hbWVzID0gJ2RheU5hbWVzJyxcclxuXHJcbiAgLy8gRFBJX0RyaWxsUGF0aFZlY3RvciwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBEcmlsbFBhdGhWZWN0b3IgPSAnZHJpbGxwYXRoVmVjdG9yJyxcclxuXHJcbiAgLy8gRFBJX0Vycm9yRGV0YWlscywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBFcnJvckRldGFpbHMgPSAnZXJyb3JEZXRhaWxzJyxcclxuXHJcbiAgLy8gRFBJX0V4Y2VwdGlvbk1lc3NhZ2VQYXJhbXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRXhjZXB0aW9uTWVzc2FnZVBhcmFtcyA9ICdleGNlcHRpb25NZXNzYWdlUGFyYW1zJyxcclxuXHJcbiAgLy8gRFBJX0V4Y2x1ZGVkU2hlZXRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEV4Y2x1ZGVkU2hlZXRzID0gJ2V4Y2x1ZGVTaGVldHMnLFxyXG5cclxuICAvLyBEUElfRmllbGREaXNwbGF5TmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRmllbGREaXNwbGF5TmFtZXMgPSAnZmllbGREaXNwbGF5TmFtZXMnLFxyXG5cclxuICAvLyBEUElfRmllbGRGb2xkZXJWZWN0b3IsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRmllbGRGb2xkZXJWZWN0b3IgPSAnZmllbGRGb2xkZXJWZWN0b3InLFxyXG5cclxuICAvLyBEUElfRmlsZUlkcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBGaWxlSWRzID0gJ2ZpbGVJZHMnLFxyXG5cclxuICAvLyBEUElfRmlsZVBhdGhzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEZpbGVQYXRocyA9ICdmaWxlUGF0aHMnLFxyXG5cclxuICAvLyBEUElfRmlsZU5hbWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEZpbGVOYW1lcyA9ICdmaWxlTmFtZXMnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyQWRkLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEZpbHRlckFkZCA9ICdmaWx0ZXJBZGQnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyQWxpYXNlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBGaWx0ZXJBbGlhc2VzID0gJ2ZpbHRlclZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJSZW1vdmUsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRmlsdGVyUmVtb3ZlID0gJ2ZpbHRlclJlbW92ZScsXHJcblxyXG4gIC8vIERQSV9GaXhlZENhcHRpb25zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEZpeGVkQ2FwdGlvbnMgPSAnZml4ZWRDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Gb250RmFtaWxpZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRm9udEZhbWlsaWVzID0gJ2ZvbnRGYW1pbGllcycsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXRTdHJpbmdzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEZvcm1hdFN0cmluZ3MgPSAnZm9ybWF0U3RyaW5ncycsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXR0ZWRWYWx1ZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRm9ybWF0dGVkVmFsdWVzID0gJ2Zvcm1hdHRlZFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9Gb3VuZFR1cGxlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBGb3VuZFR1cGxlcyA9ICdmb3VuZFR1cGxlcycsXHJcblxyXG4gIC8vIERQSV9GdWxsU2NoZWR1bGVzTGFiZWxzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEZ1bGxTY2hlZHVsZXNMYWJlbHMgPSAnZnVsbFNjaGVkdWxlc0xhYmVscycsXHJcblxyXG4gIC8vIERQSV9JbWFnZVJlc291cmNlTGlzdCwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBJbWFnZVJlc291cmNlTGlzdCA9ICdpbWFnZVJlc291cmNlcycsXHJcblxyXG4gIC8vIERQSV9JbmNsdWRlTGlzdCwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBJbmNsdWRlTGlzdCA9ICdpbmNsdWRlTGlzdCcsXHJcblxyXG4gIC8vIERQSV9JbmNyU2NoZWR1bGVzTGFiZWxzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEluY3JTY2hlZHVsZXNMYWJlbHMgPSAnaW5jclNjaGVkdWxlc0xhYmVscycsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkRGF0ZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgSW52YWxpZERhdGVzID0gJ2ludmFsaWREYXRlcycsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkVmFsdWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEludmFsaWRWYWx1ZXMgPSAnaW52YWxpZFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9JdGVtVmFsdWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEl0ZW1WYWx1ZXMgPSAnaXRlbVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9Kb2luRWRpdGFibGVQcm9wcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBKb2luRWRpdGFibGVQcm9wcyA9ICdqb2luRWRpdGFibGVQcm9wcycsXHJcblxyXG4gIC8vIERQSV9Kb2luRmllbGRDYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBKb2luRmllbGRDYXB0aW9ucyA9ICdqb2luRmllbGRDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Mb2NhbGVPcHRpb25zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIExvY2FsZU9wdGlvbnMgPSAnbG9jYWxlT3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Mb2NhbGVEaXNwbGF5TmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgTG9jYWxlRGlzcGxheU5hbWVzID0gJ2xvY2FsZURpc3BsYXlOYW1lcycsXHJcblxyXG4gIC8vIERQSV9NYXBCb3hTdHlsZU1hcHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgTWFwQm94U3R5bGVNYXBzID0gJ21hcGJveFN0eWxlTWFwcycsXHJcblxyXG4gIC8vIERQSV9NYXBDb25uZWN0aW9uRXJyb3JEZXRhaWxzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIE1hcENvbm5lY3Rpb25FcnJvckRldGFpbHMgPSAnbWFwQ29ubmVjdGlvbkVycm9yRGV0YWlscycsXHJcblxyXG4gIC8vIERQSV9TaGVldE5hbWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFNoZWV0TmFtZXMgPSAnc2hlZXROYW1lcycsXHJcblxyXG4gIC8vIERQSV9NYXBTb3VyY2VOYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBNYXBTb3VyY2VOYW1lcyA9ICdtYXBTb3VyY2VOYW1lcycsXHJcblxyXG4gIC8vIERQSV9NYXJrR2VvbWV0cmllcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBNYXJrR2VvbWV0cmllcyA9ICdtYXJrR2VvbWV0cmllcycsXHJcblxyXG4gIC8vIERQSV9NZW51SXRlbXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgTWVudUl0ZW1zID0gJ21lbnVJdGVtcycsXHJcblxyXG4gIC8vIERQSV9Nb2RlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBNb2RlcyA9ICdtb2RlcycsXHJcblxyXG4gIC8vIERQSV9Nb250aE5hbWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIE1vbnRoTmFtZXMgPSAnbW9udGhOYW1lcycsXHJcblxyXG4gIC8vIERQSV9OdW1iZXJGb3JtYXRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIE51bWJlckZvcm1hdHMgPSAnbnVtYmVyRm9ybWF0cycsXHJcblxyXG4gIC8vIERQSV9PYmplY3RUZXh0SURzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIE9iamVjdFRleHRJRHMgPSAnb2JqZWN0VGV4dElkcycsXHJcblxyXG4gIC8vIERQSV9PbGRFeHRyYWN0cywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBPbGRFeHRyYWN0cyA9ICdvbGRFeHRyYWN0cycsXHJcblxyXG4gIC8vIERQSV9PcmRlcmluZ1R5cGVDYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBPcmRlcmluZ1R5cGVDYXB0aW9ucyA9ICdvcmRlcmluZ1R5cGVDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9QYWdlTmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUGFnZU5hbWVzID0gJ3BhZ2VOYW1lcycsXHJcblxyXG4gIC8vIERQSV9QYW5lRGVzY3JpcHRvcktleXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUGFuZURlc2NyaXB0b3JLZXlzID0gJ3BhbmVEZXNjcmlwdG9yS2V5cycsXHJcblxyXG4gIC8vIERQSV9QYXJhbUNhcHRpb25zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFBhcmFtQ2FwdGlvbnMgPSAncGFyYW1DYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9QcmVjYW5uZWREYXRhVmFsdWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFByZWNhbm5lZERhdGFWYWx1ZXMgPSAncHJlY2FubmVkRGF0YVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoQ2hvaWNlTGFiZWxzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFB1Ymxpc2hDaG9pY2VMYWJlbHMgPSAncHVibGlzaENob2ljZUxhYmVscycsXHJcblxyXG4gIC8vIERQSV9SYW5rVHlwZUNhcHRpb25zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFJhbmtUeXBlQ2FwdGlvbnMgPSAncmFua1R5cGVDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9SZWNlbnRUYWdzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFJlY2VudFRhZ3MgPSAncmVjZW50VGFncycsXHJcblxyXG4gIC8vIERQSV9SZWxhdGl2ZUNhcHRpb25zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFJlbGF0aXZlQ2FwdGlvbnMgPSAncmVsYXRpdmVDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9SZW1vdmVkRGF0YVNvdXJjZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVtb3ZlZERhdGFTb3VyY2VzID0gJ3JlbW92ZWREYXRhU291cmNlTmFtZXMnLFxyXG5cclxuICAvLyBEUElfUmVwcmVzZW50YXRpdmVUdXBsZSwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBSZXByZXNlbnRhdGl2ZVR1cGxlID0gJ3JlcHJlc2VudGF0aXZlVHVwbGUnLFxyXG5cclxuICAvLyBEUElfUmVzdGFydEV2ZXJ5Q2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVzdGFydEV2ZXJ5Q2FwdGlvbnMgPSAncmVzdGFydEV2ZXJ5Q2FwdGlvbnMnLFxyXG5cclxuICAvLyBEUElfU2NoZW1hTWVtYmVyR2xvYmFsTmFtZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU2NoZW1hTWVtYmVyR2xvYmFsTmFtZXMgPSAnc2NoZW1hTWVtYmVyR2xvYmFsTmFtZXMnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0VmFsdWVzTGlzdCwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBTZWxlY3RWYWx1ZXNMaXN0ID0gJ3NlbGVjdFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9TZWxlY3Rpb25WYWx1ZUxpc3QsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU2VsZWN0aW9uVmFsdWVMaXN0ID0gJ3NlbGVjdGlvblZhbHVlTGlzdCcsXHJcblxyXG4gIC8vIERQSV9Tb3J0QWdnQ2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU29ydEFnZ0NhcHRpb25zID0gJ3NvcnRBZ2dDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Tb3J0RGlyZWN0aW9uQ2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU29ydERpcmVjdGlvbkNhcHRpb25zID0gJ3NvcnREaXJlY3Rpb25DYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Tb3J0RmllbGRDYXB0aW9ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBTb3J0RmllbGRDYXB0aW9ucyA9ICdzb3J0RmllbGRDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Tb3J0RmllbGROYW1lVmVjdG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFNvcnRGaWVsZE5hbWVWZWN0b3IgPSAnc29ydEZpZWxkbmFtZVZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9TdXBwb3J0ZWRKb2luT3BlcmF0b3JzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFN1cHBvcnRlZEpvaW5PcGVyYXRvcnMgPSAnc3VwcG9ydGVkSm9pbk9wZXJhdG9ycycsXHJcblxyXG4gIC8vIERQSV9UYWJsZUNhbGNUeXBlQ2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgVGFibGVDYWxjVHlwZUNhcHRpb25zID0gJ3RhYmxlQ2FsY1R5cGVDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9UYWdzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFRhZ3MgPSAndGFncycsXHJcblxyXG4gIC8vIERQSV9UZXJtVmVjLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFRlcm1WZWMgPSAndGVybVZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25MaXN0LCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFVJQXV0b21hdGlvbkxpc3QgPSAndWlBdXRvbWF0aW9uTGlzdCcsXHJcblxyXG4gIC8vIERQSV9SZWZlcmVuY2VMaW5lVmFsaWRDdXN0b21MYWJlbFRhZ3MsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVmZXJlbmNlTGluZVZhbGlkQ3VzdG9tTGFiZWxUYWdzID0gJ3ZhbGlkUmVmZXJlbmNlTGluZUN1c3RvbUxhYmVsVGFncycsXHJcblxyXG4gIC8vIERQSV9Mb2NhbGl6ZWRLZXl3b3JkcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBMb2NhbGl6ZWRLZXl3b3JkcyA9ICdsb2NhbGl6ZWRLZXl3b3JkcycsXHJcblxyXG4gIC8vIERQSV9BdmFpbGFibGVDYWxlbmRhcnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQXZhaWxhYmxlQ2FsZW5kYXJzID0gJ2F2YWlsYWJsZUNhbGVuZGFycycsXHJcblxyXG4gIC8vIERQSV9TaGVldHNUb0JlRGVsZXRlZE9ySGlkZGVuLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFNoZWV0c1RvQmVEZWxldGVkT3JIaWRkZW4gPSAnc2hlZXRzVG9CZURlbGV0ZWRPckhpZGRlbicsXHJcblxyXG4gIC8vIERQSV9BZGRTaGVldHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQWRkU2hlZXRzID0gJ2FkZFNoZWV0cycsXHJcblxyXG4gIC8vIERQSV9OYW1lc09mU3Vic2hlZXRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIE5hbWVzT2ZTdWJzaGVldHMgPSAnbmFtZXNPZlN1YnNoZWV0cycsXHJcblxyXG4gIC8vIERQSV9SZW1vdmVTaGVldHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVtb3ZlU2hlZXRzID0gJ3JlbW92ZVNoZWV0cycsXHJcblxyXG4gIC8vIERQSV9TY3JvbGxPZmZzZXRTaGVldHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU2Nyb2xsT2Zmc2V0U2hlZXRzID0gJ3Njcm9sbE9mZnNldFNoZWV0cycsXHJcblxyXG4gIC8vIERQSV9TaGVldHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU2hlZXRzID0gJ3NoZWV0cycsXHJcblxyXG4gIC8vIERQSV9Tb3VyY2VXb3Jrc2hlZXRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFNvdXJjZVdvcmtzaGVldHMgPSAnc291cmNlV29ya3NoZWV0cycsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRFeGNsdWRlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBUYXJnZXRFeGNsdWRlcyA9ICd0YXJnZXRFeGNsdWRlJyxcclxuXHJcbiAgLy8gRFBJX1RhcmdldFdvcmtzaGVldHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgVGFyZ2V0V29ya3NoZWV0cyA9ICd0YXJnZXRXb3Jrc2hlZXRzJyxcclxuXHJcbiAgLy8gRFBJX1RpbGVVUkxzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFRpbGVVUkxzID0gJ3RpbGVVcmxzJyxcclxuXHJcbiAgLy8gRFBJX0RldGFpbHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRGV0YWlscyA9ICdkZXRhaWxzJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkQ2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRmllbGRDYXB0aW9ucyA9ICdmaWVsZENhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0hpZ2hsaWdodENhcHRpb25zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEhpZ2hsaWdodENhcHRpb25zID0gJ2hpZ2hsaWdodENhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0xldmVsQ2FwdGlvbnMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgTGV2ZWxDYXB0aW9ucyA9ICdsZXZlbENhcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0xldmVsTGVhZlZhbHVlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBMZXZlbExlYWZWYWx1ZXMgPSAnbGV2ZWxMZWFmVmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX1N1YnN0aXR1dGlvblZhcmlhYmxlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBTdWJzdGl0dXRpb25WYXJpYWJsZXMgPSAnc3Vic3RpdHV0aW9uVmFyaWFibGVzJyxcclxuXHJcbiAgLy8gRFBJX1N1YnN0aXR1dGlvblZhcmlhYmxlVmFsdWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFN1YnN0aXR1dGlvblZhcmlhYmxlVmFsdWVzID0gJ3N1YnN0aXR1dGlvblZhcmlhYmxlVmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX0h0bWxUb29sdGlwcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBIdG1sVG9vbHRpcHMgPSAnaHRtbFRvb2x0aXBzJyxcclxuXHJcbiAgLy8gRFBJX0ludmFsaWRGaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgSW52YWxpZEZpZWxkcyA9ICdpbnZhbGlkRmllbGRzJyxcclxuXHJcbiAgLy8gRFBJX05hbWVzT2ZDb2x1bW5zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIE5hbWVzT2ZDb2x1bW5zID0gJ25hbWVzT2ZDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX05hbWVzT2ZGaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgTmFtZXNPZkZpZWxkcyA9ICduYW1lc09mRmllbGRzJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZWREYXRhc291cmNlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBSZWZlcmVuY2VkRGF0YXNvdXJjZXMgPSAncmVmZXJlbmNlZERhdGFTb3VyY2VMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0NTU0F0dHJzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBDU1NBdHRycyA9ICdjc3NBdHRycycsXHJcblxyXG4gIC8vIERQSV9EYXRhU291cmNlTWFwLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBEYXRhU291cmNlTWFwID0gJ2RhdGFTb3VyY2VNYXAnLFxyXG5cclxuICAvLyBEUElfRXZlbnRQYXJhbWV0ZXJzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBFdmVudFBhcmFtZXRlcnMgPSAnZXZlbnRQYXJhbWV0ZXJzJyxcclxuXHJcbiAgLy8gRFBJX0V4Y2VwdGlvbkF0dHJzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBFeGNlcHRpb25BdHRycyA9ICdleGNlcHRpb25BdHRycycsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkU2hlZXRNZXNzYWdlLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBJbnZhbGlkU2hlZXRNZXNzYWdlID0gJ2ludmFsaWRTaGVldE1lc3NhZ2VzJyxcclxuXHJcbiAgLy8gRFBJX01hcEJveERlZmF1bHRTdHlsZSwgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBzdHJpbmcpXHJcbiAgTWFwQm94RGVmYXVsdFN0eWxlID0gJ21hcGJveERlZmF1bHRTdHlsZXMnLFxyXG5cclxuICAvLyBEUElfUGFuZUZvcm1hdHRpbmdzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBQYW5lRm9ybWF0dGluZ3MgPSAncGFuZUZvcm1hdHRpbmdzJyxcclxuXHJcbiAgLy8gRFBJX1NvdXJjZU5hbWVXaXRoQ2FwdGlvbiwgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBzdHJpbmcpXHJcbiAgU291cmNlTmFtZVdpdGhDYXB0aW9uID0gJ3NvdXJjZU5hbWVXaXRoQ2FwdGlvbicsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uQ29sb3JNYXAsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIENvbm5lY3Rpb25Db2xvck1hcCA9ICdjb25uZWN0aW9uQ29sb3JNYXAnLFxyXG5cclxuICAvLyBEUElfVGFyZ2V0TmFtZVdpdGhDYXB0aW9uLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBUYXJnZXROYW1lV2l0aENhcHRpb24gPSAndGFyZ2V0TmFtZVdpdGhDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1ZpZXdJZHMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIFZpZXdJZHMgPSAndmlld0lkcycsXHJcblxyXG4gIC8vIERQSV9BZGRJblNldHRpbmdzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBBZGRJblNldHRpbmdzID0gJ2FkZEluU2V0dGluZ3MnLFxyXG5cclxuICAvLyBEUElfRGF0YXNvdXJjZUljb25zLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIHN0cmluZylcclxuICBEYXRhc291cmNlSWNvbnMgPSAnZGF0YXNvdXJjZUljb25zJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdHRlZFRleHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZvcm1hdHRlZFRleHQgPSAnZm9ybWF0dGVkVGV4dCcsXHJcblxyXG4gIC8vIERQSV9JY29uVG9vbHRpcCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSWNvblRvb2x0aXAgPSAnaWNvblRvb2x0aXAnLFxyXG5cclxuICAvLyBEUElfVGl0bGUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRpdGxlID0gJ3RpdGxlJyxcclxuXHJcbiAgLy8gRFBJX1Rvb2x0aXAsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFRvb2x0aXAgPSAndG9vbHRpcCcsXHJcblxyXG4gIC8vIERQSV9ab25lVGV4dCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgWm9uZVRleHQgPSAnem9uZVRleHQnLFxyXG5cclxuICAvLyBEUElfQWxpZ25tZW50RmxhZ3MsIGhhdmluZyB0eXBlIGludFxyXG4gIEFsaWdubWVudEZsYWdzID0gJ2FsaWdubWVudEZsYWdzJyxcclxuXHJcbiAgLy8gRFBJX0FscGhhTGV2ZWwsIGhhdmluZyB0eXBlIGludFxyXG4gIEFscGhhTGV2ZWwgPSAnYWxwaGFMZXZlbCcsXHJcblxyXG4gIC8vIERQSV9Bbm92YURGLCBoYXZpbmcgdHlwZSBpbnRcclxuICBBbm92YURGID0gJ2Fub3ZhRGYnLFxyXG5cclxuICAvLyBEUElfQXRUaGVMZXZlbEluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBBdFRoZUxldmVsSW5kZXggPSAnYXRUaGVMZXZlbEluZGV4JyxcclxuXHJcbiAgLy8gRFBJX0F1dG9tYXRpY0RyaWxsSWR4SW5WZWN0b3IsIGhhdmluZyB0eXBlIGludFxyXG4gIEF1dG9tYXRpY0RyaWxsSWR4SW5WZWN0b3IgPSAnYXV0b21hdGljRHJpbGxJZHhWZWN0b3InLFxyXG5cclxuICAvLyBEUElfQXV0b1NpemUsIGhhdmluZyB0eXBlIGludFxyXG4gIEF1dG9TaXplID0gJ2F1dG9tYXRpY1NpemUnLFxyXG5cclxuICAvLyBEUElfQmFzZUNvb3JkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBCYXNlQ29vcmQgPSAnYmFzZUNvb3JkJyxcclxuXHJcbiAgLy8gRFBJX0NhbGNFZGl0b3JDdXJzb3JQb3NQb3N0RHJvcCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgQ2FsY0VkaXRvckN1cnNvclBvc1Bvc3REcm9wID0gJ2NhbGNFZGl0b3JDdXJzb3JQb3NQb3N0RHJvcCcsXHJcblxyXG4gIC8vIERQSV9DYWxjRWRpdG9yRHJvcFBvcywgaGF2aW5nIHR5cGUgaW50XHJcbiAgQ2FsY0VkaXRvckRyb3BQb3MgPSAnY2FsY0VkaXRvckRyb3BQb3MnLFxyXG5cclxuICAvLyBEUElfQ2FsY0VkaXRvclRleHRTZWxlY3Rpb25FbmRQb3MsIGhhdmluZyB0eXBlIGludFxyXG4gIENhbGNFZGl0b3JUZXh0U2VsZWN0aW9uRW5kUG9zID0gJ2NhbGNFZGl0b3JUZXh0U2VsZWN0aW9uRW5kUG9zJyxcclxuXHJcbiAgLy8gRFBJX0NhbGNFZGl0b3JUZXh0U2VsZWN0aW9uU3RhcnRQb3MsIGhhdmluZyB0eXBlIGludFxyXG4gIENhbGNFZGl0b3JUZXh0U2VsZWN0aW9uU3RhcnRQb3MgPSAnY2FsY0VkaXRvclRleHRTZWxlY3Rpb25TdGFydFBvcycsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEJpbklkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDYXRlZ29yaWNhbEJpbklkID0gJ2NhdGVnb3JpY2FsQmluSWQnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaW5kQ29udHJvbGxlcklkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDYXRlZ29yaWNhbEZpbmRDb250cm9sbGVySWQgPSAnY2F0ZWdvcmljYWxGaW5kQ29udHJvbGxlcklkJyxcclxuXHJcbiAgLy8gRFBJX0NsYXVzZVRvTW9kaWZ5SW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIENsYXVzZVRvTW9kaWZ5SW5kZXggPSAnY2xhdXNlVG9Nb2RpZnlJbmRleCcsXHJcblxyXG4gIC8vIERQSV9DbGllbnRSZW5kZXJQaXhlbExpbWl0LCBoYXZpbmcgdHlwZSBpbnRcclxuICBDbGllbnRSZW5kZXJQaXhlbExpbWl0ID0gJ2NsaWVudFJlbmRlclBpeGVsTGltaXQnLFxyXG5cclxuICAvLyBEUElfQ29sQ291bnQsIGhhdmluZyB0eXBlIGludFxyXG4gIENvbENvdW50ID0gJ2NvbENvdW50JyxcclxuXHJcbiAgLy8gRFBJX0NvbFdpZHRoLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDb2xXaWR0aCA9ICdjb2xXaWR0aCcsXHJcblxyXG4gIC8vIERQSV9Db2x1bW5MZXZlbHMsIGhhdmluZyB0eXBlIGludFxyXG4gIENvbHVtbkxldmVscyA9ICdjb2x1bW5MZXZlbHMnLFxyXG5cclxuICAvLyBEUElfQ29sdW1uTnVtYmVyLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDb2x1bW5OdW1iZXIgPSAnY29sdW1uTnVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX0NvbHVtbldpZHRoLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDb2x1bW5XaWR0aCA9ICdjb2x1bW5XaWR0aCcsXHJcblxyXG4gIC8vIERQSV9Db250ZW50SGVpZ2h0LCBoYXZpbmcgdHlwZSBpbnRcclxuICBDb250ZW50SGVpZ2h0ID0gJ2NvbnRlbnRIJyxcclxuXHJcbiAgLy8gRFBJX0NvbnRlbnRXaWR0aCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgQ29udGVudFdpZHRoID0gJ2NvbnRlbnRXJyxcclxuXHJcbiAgLy8gRFBJX0NvbnRlbnRYLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDb250ZW50WCA9ICdjb250ZW50WCcsXHJcblxyXG4gIC8vIERQSV9Db250ZW50WSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgQ29udGVudFkgPSAnY29udGVudFknLFxyXG5cclxuICAvLyBEUElfQ29vcmRpbmF0ZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgQ29vcmRpbmF0ZSA9ICdjb29yZCcsXHJcblxyXG4gIC8vIERQSV9DdXJEYXRlQWdnLCBoYXZpbmcgdHlwZSBpbnRcclxuICBDdXJEYXRlQWdnID0gJ2N1ckRhdGVBZ2cnLFxyXG5cclxuICAvLyBEUElfQ3VycmVudEN1c3RWaWV3SWQsIGhhdmluZyB0eXBlIGludFxyXG4gIEN1cnJlbnRDdXN0Vmlld0lkID0gJ2N1cnJlbnRDdXN0b21WaWV3SWQnLFxyXG5cclxuICAvLyBEUElfQ3VzdG9tU3BsaXRDaGFyYWN0ZXJDb3VudFNlcGFyYXRvciwgaGF2aW5nIHR5cGUgaW50XHJcbiAgQ3VzdG9tU3BsaXRDaGFyYWN0ZXJDb3VudFNlcGFyYXRvciA9ICdjdXN0b21TcGxpdENoYXJhY3RlckNvdW50U2VwYXJhdG9yJyxcclxuXHJcbiAgLy8gRFBJX0N1c3RvbVNwbGl0RGVzaXJlZFNwbGl0Q291bnQsIGhhdmluZyB0eXBlIGludFxyXG4gIEN1c3RvbVNwbGl0RGVzaXJlZFNwbGl0Q291bnQgPSAnY3VzdG9tU3BsaXREZXNpcmVkU3BsaXRDb3VudCcsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRHcmlkU2l6ZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgRGFzaGJvYXJkR3JpZFNpemUgPSAnZGFzaGJvYXJkR3JpZFNpemUnLFxyXG5cclxuICAvLyBEUElfRGF0YUluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBEYXRhSW5kZXggPSAnZGF0YUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX0RlY2ltYWxQbGFjZXMsIGhhdmluZyB0eXBlIGludFxyXG4gIERlY2ltYWxQbGFjZXMgPSAnZGVjaW1hbFBsYWNlcycsXHJcblxyXG4gIC8vIERQSV9EZWx0YVRpbWUsIGhhdmluZyB0eXBlIGludFxyXG4gIERlbHRhVGltZSA9ICdkZWx0YVRpbWUnLFxyXG5cclxuICAvLyBEUElfRGVzdFBpeCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgRGVzdFBpeCA9ICdkZXN0UGl4JyxcclxuXHJcbiAgLy8gRFBJX0RldmljZUluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBEZXZpY2VJbmRleCA9ICdkZXZpY2VJbmRleCcsXHJcblxyXG4gIC8vIERQSV9EdXJhdGlvbiwgaGF2aW5nIHR5cGUgaW50XHJcbiAgRHVyYXRpb24gPSAnZHVyYXRpb24nLFxyXG5cclxuICAvLyBEUElfRW5kUHRYLCBoYXZpbmcgdHlwZSBpbnRcclxuICBFbmRQdFggPSAnZW5kWCcsXHJcblxyXG4gIC8vIERQSV9FbmRQdFksIGhhdmluZyB0eXBlIGludFxyXG4gIEVuZFB0WSA9ICdlbmRZJyxcclxuXHJcbiAgLy8gRFBJX0Vycm9yTGVuLCBoYXZpbmcgdHlwZSBpbnRcclxuICBFcnJvckxlbiA9ICdsZW5ndGhPZkNhbGNPZkVycm9yJyxcclxuXHJcbiAgLy8gRFBJX0Vycm9yUG9zLCBoYXZpbmcgdHlwZSBpbnRcclxuICBFcnJvclBvcyA9ICdzdGFydFBvc2l0aW9uRm9yRXJyb3InLFxyXG5cclxuICAvLyBEUElfRXhjZXB0aW9uRXJyb3JNZXNzYWdlSWQsIGhhdmluZyB0eXBlIGludFxyXG4gIEV4Y2VwdGlvbkVycm9yTWVzc2FnZUlkID0gJ2V4Y2VwdGlvbkVycm9yTWVzc2FnZUlkJyxcclxuXHJcbiAgLy8gRFBJX0V4dGVudHNILCBoYXZpbmcgdHlwZSBpbnRcclxuICBFeHRlbnRzSCA9ICdleHRlbnRzSGVpZ2h0JyxcclxuXHJcbiAgLy8gRFBJX0V4dGVudHNXLCBoYXZpbmcgdHlwZSBpbnRcclxuICBFeHRlbnRzVyA9ICdleHRlbnRzV2lkdGgnLFxyXG5cclxuICAvLyBEUElfRXh0ZW50c1gsIGhhdmluZyB0eXBlIGludFxyXG4gIEV4dGVudHNYID0gJ2V4dGVudHNYJyxcclxuXHJcbiAgLy8gRFBJX0V4dGVudHNZLCBoYXZpbmcgdHlwZSBpbnRcclxuICBFeHRlbnRzWSA9ICdleHRlbnRzWScsXHJcblxyXG4gIC8vIERQSV9GaWVsZEluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBGaWVsZEluZGV4ID0gJ2ZpZWxkSW5kZXgnLFxyXG5cclxuICAvLyBEUElfRmllbGROYW1lSWQsIGhhdmluZyB0eXBlIGludFxyXG4gIEZpZWxkTmFtZUlkID0gJ2ZpZWxkTmFtZUlkJyxcclxuXHJcbiAgLy8gRFBJX0ZpcnN0RGF5T2ZXZWVrLCBoYXZpbmcgdHlwZSBpbnRcclxuICBGaXJzdERheU9mV2VlayA9ICdmaXJzdERheU9mV2VlaycsXHJcblxyXG4gIC8vIERQSV9GaXJzdExpbmtlZExldmVsLCBoYXZpbmcgdHlwZSBpbnRcclxuICBGaXJzdExpbmtlZExldmVsID0gJ2ZpcnN0TGlua2VkTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfRmlyc3RWYWx1ZUluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBGaXJzdFZhbHVlSW5kZXggPSAnZmlyc3RWYWx1ZUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX0ZpeGVkU2l6ZVByZXNldEluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBGaXhlZFNpemVQcmVzZXRJbmRleCA9ICdmaXhlZFNpemVQcmVzZXRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9Gb2N1c0l0ZW1JbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgRm9jdXNJdGVtSW5kZXggPSAnZm9jdXNJdGVtSW5kZXgnLFxyXG5cclxuICAvLyBEUElfRm9udFNpemUsIGhhdmluZyB0eXBlIGludFxyXG4gIEZvbnRTaXplID0gJ2ZvbnRTaXplJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0SW50UmFuZ2VFbmQsIGhhdmluZyB0eXBlIGludFxyXG4gIEZvcmVjYXN0SW50UmFuZ2VFbmQgPSAnZm9yZWNhc3RJbnRSYW5nZUVuZCcsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdEludFJhbmdlU3RhcnQsIGhhdmluZyB0eXBlIGludFxyXG4gIEZvcmVjYXN0SW50UmFuZ2VTdGFydCA9ICdmb3JlY2FzdEludFJhbmdlU3RhcnQnLFxyXG5cclxuICAvLyBEUElfRnVuY3Rpb25IZWxwSW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIEZ1bmN0aW9uSGVscEluZGV4ID0gJ2Z1bmN0aW9uSGVscEluZGV4JyxcclxuXHJcbiAgLy8gRFBJX0dlb2dyYXBoaWNTZWFyY2hNYXhSZXN1bHRzLCBoYXZpbmcgdHlwZSBpbnRcclxuICBHZW9ncmFwaGljU2VhcmNoTWF4UmVzdWx0cyA9ICdnZW9ncmFwaGljU2VhcmNoTWF4UmVzdWx0cycsXHJcblxyXG4gIC8vIERQSV9IZWlnaHQsIGhhdmluZyB0eXBlIGludFxyXG4gIEhlaWdodCA9ICdoJyxcclxuXHJcbiAgLy8gRFBJX0hpZXJhcmNoeUxldmVsLCBoYXZpbmcgdHlwZSBpbnRcclxuICBIaWVyYXJjaHlMZXZlbCA9ICdoaWVyYXJjaHlMZXZlbCcsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlMZXZlbExvYWRlZCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSGllcmFyY2h5TGV2ZWxMb2FkZWQgPSAnaGllcmFyY2h5TGV2ZWxMb2FkZWQnLFxyXG5cclxuICAvLyBEUElfSGllcmFyY2h5TGV2ZWxNaW5pbXVtLCBoYXZpbmcgdHlwZSBpbnRcclxuICBIaWVyYXJjaHlMZXZlbE1pbmltdW0gPSAnaGllcmFyY2h5TGV2ZWxNaW5pbXVtJyxcclxuXHJcbiAgLy8gRFBJX0hpZXJhcmNoeUxvYWRMaW1pdCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSGllcmFyY2h5TG9hZExpbWl0ID0gJ2hpZXJhcmNoeUxvYWRMaW1pdCcsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlTZWxlY3RDb250cm9sbGVySWQsIGhhdmluZyB0eXBlIGludFxyXG4gIEhpZXJhcmNoeVNlbGVjdENvbnRyb2xsZXJJZCA9ICdoaWVyYXJjaHlTZWxlY3RDb250cm9sbGVySWQnLFxyXG5cclxuICAvLyBEUElfSG9yelRleHRDZWxsLCBoYXZpbmcgdHlwZSBpbnRcclxuICBIb3J6VGV4dENlbGwgPSAnaG9yelRleHRDZWxsJyxcclxuXHJcbiAgLy8gRFBJX0ltYWdlSW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIEltYWdlSW5kZXggPSAnaW1hZ2VJbmRleCcsXHJcblxyXG4gIC8vIERQSV9JbWFnZVNpemVMaW1pdCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW1hZ2VTaXplTGltaXQgPSAnaW1hZ2VTaXplTGltaXQnLFxyXG5cclxuICAvLyBEUElfVHJhbnNwYXJlbnRMaW5lTWFya3NMaW1pdCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgVHJhbnNwYXJlbnRMaW5lTWFya3NMaW1pdCA9ICd0cmFuc3BhcmVudExpbmVNYXJrc0xpbWl0JyxcclxuXHJcbiAgLy8gRFBJX0luZGVudCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZW50ID0gJ2luZGVudCcsXHJcblxyXG4gIC8vIERQSV9JbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZXggPSAnaWR4JyxcclxuXHJcbiAgLy8gRFBJX0luZGV4RnJvbSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZXhGcm9tID0gJ2luZGV4RnJvbScsXHJcblxyXG4gIC8vIERQSV9JbmRleE9mZnNldCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZXhPZmZzZXQgPSAnaW5kZXhPZmZzZXQnLFxyXG5cclxuICAvLyBEUElfSW5kZXhSZWxhdGl2ZURhdGVGaWVsZCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZXhSZWxhdGl2ZURhdGVGaWVsZCA9ICdpbmRpZXhSZWxhdGl2ZURhdGVGaWVsZCcsXHJcblxyXG4gIC8vIERQSV9JbmRleFNlbGVjdGVkSXRlbSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZXhTZWxlY3RlZEl0ZW0gPSAnaW5kZXhTZWxlY3RlZEl0ZW0nLFxyXG5cclxuICAvLyBEUElfSW5kZXhUbywgaGF2aW5nIHR5cGUgaW50XHJcbiAgSW5kZXhUbyA9ICdpbmRleFRvJyxcclxuXHJcbiAgLy8gRFBJX0lubGluZUNvbm5lY3Rpb25SZW5hbWVSb3csIGhhdmluZyB0eXBlIGludFxyXG4gIElubGluZUNvbm5lY3Rpb25SZW5hbWVSb3cgPSAnaW5saW5lQ29ubmVjdGlvblJlbmFtZVJvdycsXHJcblxyXG4gIC8vIERQSV9JbnNlcnRQb3MsIGhhdmluZyB0eXBlIGludFxyXG4gIEluc2VydFBvcyA9ICdpbnNlcnRQb3MnLFxyXG5cclxuICAvLyBEUElfSXNIYXNEYXRhU3VwcG9ydGVkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBJc0hhc0RhdGFTdXBwb3J0ZWQgPSAnaXNIYXNEYXRhU3VwcG9ydGVkJyxcclxuXHJcbiAgLy8gRFBJX0xlZnRNYXJnaW4sIGhhdmluZyB0eXBlIGludFxyXG4gIExlZnRNYXJnaW4gPSAnbGVmdE1hcmdpbicsXHJcblxyXG4gIC8vIERQSV9MZWZ0UmlnaHRCb3JkZXJXaWR0aCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTGVmdFJpZ2h0Qm9yZGVyV2lkdGggPSAnbGVmdFJpZ2h0Qm9yZGVyV2lkdGgnLFxyXG5cclxuICAvLyBEUElfTGV2ZWxOdW1iZXIsIGhhdmluZyB0eXBlIGludFxyXG4gIExldmVsTnVtYmVyID0gJ2xldmVsTnVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX0xvd2VyQm91bmQsIGhhdmluZyB0eXBlIGludFxyXG4gIExvd2VyQm91bmQgPSAnbG93ZXJCb3VuZCcsXHJcblxyXG4gIC8vIERQSV9NYXBSZXF1ZXN0UGl4ZWxzLCBoYXZpbmcgdHlwZSBpbnRcclxuICBNYXBSZXF1ZXN0UGl4ZWxzID0gJ21hcFJlcXVlc3RQaXhlbHMnLFxyXG5cclxuICAvLyBEUElfTWFwU2NhbGVGb250U2l6ZVBpeGVscywgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWFwU2NhbGVGb250U2l6ZVBpeGVscyA9ICdtYXBTY2FsZUZvbnRTaXplUGl4ZWxzJyxcclxuXHJcbiAgLy8gRFBJX01hcFNjYWxlUmVhZG91dE51bWJlciwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWFwU2NhbGVSZWFkb3V0TnVtYmVyID0gJ21hcFNjYWxlUmVhZG91dE51bWJlcicsXHJcblxyXG4gIC8vIERQSV9NYXBTY2FsZVdpZHRoLCBoYXZpbmcgdHlwZSBpbnRcclxuICBNYXBTY2FsZVdpZHRoID0gJ21hcFNjYWxlV2lkdGgnLFxyXG5cclxuICAvLyBEUElfTWFwVGlsZVNpemUsIGhhdmluZyB0eXBlIGludFxyXG4gIE1hcFRpbGVTaXplID0gJ21hcFRpbGVTaXplJyxcclxuXHJcbiAgLy8gRFBJX01hcmdpbiwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWFyZ2luID0gJ21hcmdpbicsXHJcblxyXG4gIC8vIERQSV9NYXJnaW5Cb3R0b20sIGhhdmluZyB0eXBlIGludFxyXG4gIE1hcmdpbkJvdHRvbSA9ICdtYXJnaW5Cb3R0b20nLFxyXG5cclxuICAvLyBEUElfTWFyZ2luTGVmdCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWFyZ2luTGVmdCA9ICdtYXJnaW5MZWZ0JyxcclxuXHJcbiAgLy8gRFBJX01hcmdpblJpZ2h0LCBoYXZpbmcgdHlwZSBpbnRcclxuICBNYXJnaW5SaWdodCA9ICdtYXJnaW5SaWdodCcsXHJcblxyXG4gIC8vIERQSV9NYXJnaW5Ub3AsIGhhdmluZyB0eXBlIGludFxyXG4gIE1hcmdpblRvcCA9ICdtYXJnaW5Ub3AnLFxyXG5cclxuICAvLyBEUElfTWF4Q2VsbCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWF4Q2VsbCA9ICdtYXhDZWxsJyxcclxuXHJcbiAgLy8gRFBJX01heEl0ZW1TcGFuLCBoYXZpbmcgdHlwZSBpbnRcclxuICBNYXhJdGVtU3BhbiA9ICdtYXhJdGVtU3BhbicsXHJcblxyXG4gIC8vIERQSV9NYXhQb2x5bm9taWFsRGVncmVlLCBoYXZpbmcgdHlwZSBpbnRcclxuICBNYXhQb2x5bm9taWFsRGVncmVlID0gJ21heERlZ3JlZScsXHJcblxyXG4gIC8vIERQSV9NYXhQb3NpdGlvbiwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWF4UG9zaXRpb24gPSAnbWF4UG9zaXRpb24nLFxyXG5cclxuICAvLyBEUElfTWF4U2l6ZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWF4U2l6ZSA9ICdtYXhTaXplJyxcclxuXHJcbiAgLy8gRFBJX01pbkNlbGwsIGhhdmluZyB0eXBlIGludFxyXG4gIE1pbkNlbGwgPSAnbWluQ2VsbCcsXHJcblxyXG4gIC8vIERQSV9NaW5Qb2x5bm9taWFsRGVncmVlLCBoYXZpbmcgdHlwZSBpbnRcclxuICBNaW5Qb2x5bm9taWFsRGVncmVlID0gJ21pbkRlZ3JlZScsXHJcblxyXG4gIC8vIERQSV9NaW5Qb3NpdGlvbiwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWluUG9zaXRpb24gPSAnbWluUG9zaXRpb24nLFxyXG5cclxuICAvLyBEUElfTWluU2l6ZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTWluU2l6ZSA9ICdtaW5TaXplJyxcclxuXHJcbiAgLy8gRFBJX01vZGVsREYsIGhhdmluZyB0eXBlIGludFxyXG4gIE1vZGVsREYgPSAnbW9kZWxEZicsXHJcblxyXG4gIC8vIERQSV9OZXdJbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTmV3SW5kZXggPSAnbmV3SW5kZXgnLFxyXG5cclxuICAvLyBEUElfTnVtRGF0YVNvdXJjZXNVc2luZ1NlcnZlciwgaGF2aW5nIHR5cGUgaW50XHJcbiAgTnVtRGF0YVNvdXJjZXNVc2luZ1NlcnZlciA9ICdudW1EYXRhU291cmNlc1VzaW5nU2VydmVyJyxcclxuXHJcbiAgLy8gRFBJX051bUZpbHRlcmVkT2JzLCBoYXZpbmcgdHlwZSBpbnRcclxuICBOdW1GaWx0ZXJlZE9icyA9ICdmaWx0ZXJlZE9ic2VydmF0aW9ucycsXHJcblxyXG4gIC8vIERQSV9OdW1Nb2RlbGVkT2JzLCBoYXZpbmcgdHlwZSBpbnRcclxuICBOdW1Nb2RlbGVkT2JzID0gJ21vZGVsZWRPYnNlcnZhdGlvbnMnLFxyXG5cclxuICAvLyBEUElfTnVtTm90Q2x1c3RlcmVkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBOdW1Ob3RDbHVzdGVyZWQgPSAnbnVtTm90Q2x1c3RlcmVkJyxcclxuXHJcbiAgLy8gRFBJX051bU51bWVyaWNGaWVsZHMsIGhhdmluZyB0eXBlIGludFxyXG4gIE51bU51bWVyaWNGaWVsZHMgPSAnbnVtTnVtZXJpY0ZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9OdW1PdXRsaWVycywgaGF2aW5nIHR5cGUgaW50XHJcbiAgTnVtT3V0bGllcnMgPSAnbnVtT3V0bGllcnMnLFxyXG5cclxuICAvLyBEUElfTnVtUm93cywgaGF2aW5nIHR5cGUgaW50XHJcbiAgTnVtUm93cyA9ICdudW1Sb3dzJyxcclxuXHJcbiAgLy8gRFBJX051bVNlbGVjdGVkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBOdW1TZWxlY3RlZCA9ICdudW1TZWxlY3RlZCcsXHJcblxyXG4gIC8vIERQSV9PZmZzZXRYLCBoYXZpbmcgdHlwZSBpbnRcclxuICBPZmZzZXRYID0gJ29mZnNldFgnLFxyXG5cclxuICAvLyBEUElfT2Zmc2V0WSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgT2Zmc2V0WSA9ICdvZmZzZXRZJyxcclxuXHJcbiAgLy8gRFBJX1BhZGRpbmcsIGhhdmluZyB0eXBlIGludFxyXG4gIFBhZGRpbmcgPSAncGFkZGluZycsXHJcblxyXG4gIC8vIERQSV9QYWRkaW5nQm90dG9tLCBoYXZpbmcgdHlwZSBpbnRcclxuICBQYWRkaW5nQm90dG9tID0gJ3BhZGRpbmdCb3R0b20nLFxyXG5cclxuICAvLyBEUElfUGFkZGluZ0xlZnQsIGhhdmluZyB0eXBlIGludFxyXG4gIFBhZGRpbmdMZWZ0ID0gJ3BhZGRpbmdMZWZ0JyxcclxuXHJcbiAgLy8gRFBJX1BhZGRpbmdSaWdodCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUGFkZGluZ1JpZ2h0ID0gJ3BhZGRpbmdSaWdodCcsXHJcblxyXG4gIC8vIERQSV9QYWRkaW5nVG9wLCBoYXZpbmcgdHlwZSBpbnRcclxuICBQYWRkaW5nVG9wID0gJ3BhZGRpbmdUb3AnLFxyXG5cclxuICAvLyBEUElfUGFnZUxvYWRQZXJjZW50YWdlLCBoYXZpbmcgdHlwZSBpbnRcclxuICBQYWdlTG9hZFBlcmNlbnRhZ2UgPSAncGFnZUxvYWRQZXJjZW50YWdlJyxcclxuXHJcbiAgLy8gRFBJX1BhbGV0dGVJbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUGFsZXR0ZUluZGV4ID0gJ3BhbGV0dGVJbmRleCcsXHJcblxyXG4gIC8vIERQSV9QYW5lU3BlY2lmaWNhdGlvbklkLCBoYXZpbmcgdHlwZSBpbnRcclxuICBQYW5lU3BlY2lmaWNhdGlvbklkID0gJ3BhbmVTcGVjJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlckN0cmxJbmNyZW1lbnRzUGVyVGljaywgaGF2aW5nIHR5cGUgaW50XHJcbiAgUGFyYW1ldGVyQ3RybEluY3JlbWVudHNQZXJUaWNrID0gJ3BhcmFtZXRlckNvbnRyb2xJbmNyZW1lbnRNdWx0aXBsaWVyJyxcclxuXHJcbiAgLy8gRFBJX1BvbHlub21pYWxEZWdyZWUsIGhhdmluZyB0eXBlIGludFxyXG4gIFBvbHlub21pYWxEZWdyZWUgPSAnZGVncmVlJyxcclxuXHJcbiAgLy8gRFBJX1BvcnQsIGhhdmluZyB0eXBlIGludFxyXG4gIFBvcnQgPSAnZGF0YXNvdXJjZVBvcnQnLFxyXG5cclxuICAvLyBEUElfUG9zaXRpb24sIGhhdmluZyB0eXBlIGludFxyXG4gIFBvc2l0aW9uID0gJ3Bvc2l0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1BhcmVudFByb2plY3RJZCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUGFyZW50UHJvamVjdElkID0gJ3BhcmVudFByb2plY3RJZCcsXHJcblxyXG4gIC8vIERQSV9SYWRpdXMsIGhhdmluZyB0eXBlIGludFxyXG4gIFJhZGl1cyA9ICdyYWRpdXMnLFxyXG5cclxuICAvLyBEUElfUmVhZG91dE9mZnNldCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUmVhZG91dE9mZnNldCA9ICdyZWFkb3V0T2Zmc2V0JyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZUluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBSZWZlcmVuY2VJbmRleCA9ICdyZWZlcmVuY2VJbmRleCcsXHJcblxyXG4gIC8vIERQSV9SZWdpb25IZWlnaHQsIGhhdmluZyB0eXBlIGludFxyXG4gIFJlZ2lvbkhlaWdodCA9ICdyZWdpb25IZWlnaHQnLFxyXG5cclxuICAvLyBEUElfUmVnaW9uV2lkdGgsIGhhdmluZyB0eXBlIGludFxyXG4gIFJlZ2lvbldpZHRoID0gJ3JlZ2lvbldpZHRoJyxcclxuXHJcbiAgLy8gRFBJX1JlbW92ZWREYXRhc291cmNlQ291bnQsIGhhdmluZyB0eXBlIGludFxyXG4gIFJlbW92ZWREYXRhc291cmNlQ291bnQgPSAncmVtb3ZlZERhdGFzb3VyY2VDb3VudCcsXHJcblxyXG4gIC8vIERQSV9SZW1vdmVkU2hlZXRDb3VudCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUmVtb3ZlZFNoZWV0Q291bnQgPSAncmVtb3ZlZFNoZWV0Q291bnQnLFxyXG5cclxuICAvLyBEUElfUmVzaWR1YWxERiwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUmVzaWR1YWxERiA9ICdyZXNpZHVhbERmJyxcclxuXHJcbiAgLy8gRFBJX1Jlc2l6ZUNvbHVtbiwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUmVzaXplQ29sdW1uID0gJ3Jlc2l6ZUNvbHVtbicsXHJcblxyXG4gIC8vIERQSV9SZXN0YXJ0RXZlcnlJbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgUmVzdGFydEV2ZXJ5SW5kZXggPSAncmVzdGFydEV2ZXJ5SW5kZXgnLFxyXG5cclxuICAvLyBEUElfUmlnaHRNYXJnaW4sIGhhdmluZyB0eXBlIGludFxyXG4gIFJpZ2h0TWFyZ2luID0gJ3JpZ2h0TWFyZ2luJyxcclxuXHJcbiAgLy8gRFBJX1Jvd0NvdW50LCBoYXZpbmcgdHlwZSBpbnRcclxuICBSb3dDb3VudCA9ICdyb3dDb3VudCcsXHJcblxyXG4gIC8vIERQSV9Sb3dIZWlnaHQsIGhhdmluZyB0eXBlIGludFxyXG4gIFJvd0hlaWdodCA9ICdyb3dIZWlnaHQnLFxyXG5cclxuICAvLyBEUElfUm93SW5uZXJMZXZlbHMsIGhhdmluZyB0eXBlIGludFxyXG4gIFJvd0lubmVyTGV2ZWxzID0gJ3Jvd0lubmVyTGV2ZWxzJyxcclxuXHJcbiAgLy8gRFBJX1Jvd0xldmVscywgaGF2aW5nIHR5cGUgaW50XHJcbiAgUm93TGV2ZWxzID0gJ3Jvd0xldmVscycsXHJcblxyXG4gIC8vIERQSV9Sb3dOdW1iZXIsIGhhdmluZyB0eXBlIGludFxyXG4gIFJvd051bWJlciA9ICdyb3dOdW1iZXInLFxyXG5cclxuICAvLyBEUElfUm93V2lkdGgsIGhhdmluZyB0eXBlIGludFxyXG4gIFJvd1dpZHRoID0gJ3Jvd1dpZHRoJyxcclxuXHJcbiAgLy8gRFBJX1NlY29uZExpbmtlZExldmVsLCBoYXZpbmcgdHlwZSBpbnRcclxuICBTZWNvbmRMaW5rZWRMZXZlbCA9ICdzZWNvbmRMaW5rZWRMZXZlbCcsXHJcblxyXG4gIC8vIERQSV9TZWNvbmRWYWx1ZUluZGV4LCBoYXZpbmcgdHlwZSBpbnRcclxuICBTZWNvbmRWYWx1ZUluZGV4ID0gJ3NlY29uZFZhbHVlSW5kZXgnLFxyXG5cclxuICAvLyBEUElfU2Vjb25kc0FnbywgaGF2aW5nIHR5cGUgaW50XHJcbiAgU2Vjb25kc0FnbyA9ICdzZWNvbmRzQWdvJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGlvbkVuZCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU2VsZWN0aW9uRW5kID0gJ3NlbGVjdGlvbkVuZCcsXHJcblxyXG4gIC8vIERQSV9TZWxlY3Rpb25TdGFydCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU2VsZWN0aW9uU3RhcnQgPSAnc2VsZWN0aW9uU3RhcnQnLFxyXG5cclxuICAvLyBEUElfU2hhcGVQYWxldHRlSUQsIGhhdmluZyB0eXBlIGludFxyXG4gIFNoYXBlUGFsZXR0ZUlEID0gJ3NoYXBlUGFsZXR0ZUlkJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0SW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNoZWV0SW5kZXggPSAnc2hlZXRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9TaGVsZlBvc2l0aW9uSW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFNoZWxmUG9zaXRpb25JbmRleCA9ICdzaGVsZlBvc0luZGV4JyxcclxuXHJcbiAgLy8gRFBJX1NpemUsIGhhdmluZyB0eXBlIGludFxyXG4gIFNpemUgPSAnc2l6ZScsXHJcblxyXG4gIC8vIERQSV9TaXplRGlmZmVyZW5jZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU2l6ZURpZmZlcmVuY2UgPSAnc2l6ZURlbHRhJyxcclxuXHJcbiAgLy8gRFBJX1NuYXBEaXN0YW5jZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU25hcERpc3RhbmNlID0gJ3NuYXBEaXN0YW5jZScsXHJcblxyXG4gIC8vIERQSV9TbmFwTG9jYXRpb24sIGhhdmluZyB0eXBlIGludFxyXG4gIFNuYXBMb2NhdGlvbiA9ICdzbmFwTG9jYXRpb24nLFxyXG5cclxuICAvLyBEUElfU29sdmVPcmRlciwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU29sdmVPcmRlciA9ICdzb2x2ZU9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX1NwYWNlQmV0d2VlblBvaW50cywgaGF2aW5nIHR5cGUgaW50XHJcbiAgU3BhY2VCZXR3ZWVuUG9pbnRzID0gJ3NwYWNlQmV0d2VlblBvaW50cycsXHJcblxyXG4gIC8vIERQSV9TdGVwU2l6ZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU3RlcFNpemUgPSAnc3RlcFNpemUnLFxyXG5cclxuICAvLyBEUElfU3RlcHMsIGhhdmluZyB0eXBlIGludFxyXG4gIFN0ZXBzID0gJ3N0ZXBzJyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5UG9pbnRJbmRleCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgU3RvcnlQb2ludEluZGV4ID0gJ2N1cnJlbnRTdG9yeXBvaW50SW5kZXgnLFxyXG5cclxuICAvLyBEUElfU3R5bGVMZW4sIGhhdmluZyB0eXBlIGludFxyXG4gIFN0eWxlTGVuID0gJ3Rva2VuTGVuZ3RoRm9yU3R5bGUnLFxyXG5cclxuICAvLyBEUElfU3R5bGVQb3MsIGhhdmluZyB0eXBlIGludFxyXG4gIFN0eWxlUG9zID0gJ3Rva2VuUG9zaXRpb25Gb3JTdHlsZScsXHJcblxyXG4gIC8vIERQSV9Td2F0Y2hBcmVhV2lkdGgsIGhhdmluZyB0eXBlIGludFxyXG4gIFN3YXRjaEFyZWFXaWR0aCA9ICdzd2F0Y2hXaWR0aCcsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRCaW5JZCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgVGFyZ2V0QmluSWQgPSAndGFyZ2V0QmluSWQnLFxyXG5cclxuICAvLyBEUElfVGFyZ2V0UHRYLCBoYXZpbmcgdHlwZSBpbnRcclxuICBUYXJnZXRQdFggPSAndGFyZ2V0WCcsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRQdFksIGhhdmluZyB0eXBlIGludFxyXG4gIFRhcmdldFB0WSA9ICd0YXJnZXRZJyxcclxuXHJcbiAgLy8gRFBJX1RpbGVGYWN0b3IsIGhhdmluZyB0eXBlIGludFxyXG4gIFRpbGVGYWN0b3IgPSAndGlsZUZhY3RvcicsXHJcblxyXG4gIC8vIERQSV9UaXRsZUhlaWdodCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgVGl0bGVIZWlnaHQgPSAndGl0bGVIZWlnaHQnLFxyXG5cclxuICAvLyBEUElfVGl0bGVXaWR0aCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgVGl0bGVXaWR0aCA9ICd0aXRsZVdpZHRoJyxcclxuXHJcbiAgLy8gRFBJX1RvcEJvdHRvbUJvcmRlcldpZHRoLCBoYXZpbmcgdHlwZSBpbnRcclxuICBUb3BCb3R0b21Cb3JkZXJXaWR0aCA9ICd0b3BCb3R0b21Cb3JkZXJXaWR0aCcsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25MaW5lU2l6ZSwgaGF2aW5nIHR5cGUgaW50XHJcbiAgVUlBdXRvbWF0aW9uTGluZVNpemUgPSAndWlBdXRvbWF0aW9uTGluZVNpemUnLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uUGFnZVNpemUsIGhhdmluZyB0eXBlIGludFxyXG4gIFVJQXV0b21hdGlvblBhZ2VTaXplID0gJ3VpQXV0b21hdGlvblBhZ2VTaXplJyxcclxuXHJcbiAgLy8gRFBJX1VJRCwgaGF2aW5nIHR5cGUgaW50XHJcbiAgVUlEID0gJ3VpZCcsXHJcblxyXG4gIC8vIERQSV9VcHBlckJvdW5kLCBoYXZpbmcgdHlwZSBpbnRcclxuICBVcHBlckJvdW5kID0gJ3VwcGVyQm91bmQnLFxyXG5cclxuICAvLyBEUElfVmVydFRleHRDZWxsLCBoYXZpbmcgdHlwZSBpbnRcclxuICBWZXJ0VGV4dENlbGwgPSAndmVydFRleHRDZWxsJyxcclxuXHJcbiAgLy8gRFBJX1dpZHRoLCBoYXZpbmcgdHlwZSBpbnRcclxuICBXaWR0aCA9ICd3JyxcclxuXHJcbiAgLy8gRFBJX1gsIGhhdmluZyB0eXBlIGludFxyXG4gIFggPSAneCcsXHJcblxyXG4gIC8vIERQSV9ZLCBoYXZpbmcgdHlwZSBpbnRcclxuICBZID0gJ3knLFxyXG5cclxuICAvLyBEUElfWk9yZGVyLCBoYXZpbmcgdHlwZSBpbnRcclxuICBaT3JkZXIgPSAnek9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX1pvbmVJY29uSW5kZXgsIGhhdmluZyB0eXBlIGludFxyXG4gIFpvbmVJY29uSW5kZXggPSAnem9uZUljb25JbmRleCcsXHJcblxyXG4gIC8vIERQSV9BbGlhc0luZGljZXMsIGhhdmluZyB0eXBlIGludFtdXHJcbiAgQWxpYXNJbmRpY2VzID0gJ2FsaWFzSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9Bbm92YURGVmVjLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIEFub3ZhREZWZWMgPSAnYW5vdmFEZlZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9Db2x1bW5JbmRpY2VzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIENvbHVtbkluZGljZXMgPSAnY29sdW1uSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9EcmlsbEZpZWxkSW5kaWNlcywgaGF2aW5nIHR5cGUgaW50W11cclxuICBEcmlsbEZpZWxkSW5kaWNlcyA9ICdkcmlsbEZpZWxkSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJNYXhJbmRpY2VzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIEZpbHRlck1heEluZGljZXMgPSAnZmlsdGVyTWF4SW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJNaW5JbmRpY2VzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIEZpbHRlck1pbkluZGljZXMgPSAnZmlsdGVyTWluSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJWYWx1ZXNJbmRpY2VzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIEZpbHRlclZhbHVlc0luZGljZXMgPSAnZmlsdGVyVmFsdWVJbmRpY2VzJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdFN0cmluZ0luZGljZXMsIGhhdmluZyB0eXBlIGludFtdXHJcbiAgRm9ybWF0U3RyaW5nSW5kaWNlcyA9ICdmb3JtYXRzdHJJbmRpY2VzJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdHRlZFZhbEluZGljZXMsIGhhdmluZyB0eXBlIGludFtdXHJcbiAgRm9ybWF0dGVkVmFsSW5kaWNlcyA9ICdmb3JtYXRWYWxJZHhzJyxcclxuXHJcbiAgLy8gRFBJX1BhbGV0dGVJbmRpY2VzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIFBhbGV0dGVJbmRpY2VzID0gJ3BhbGV0dGVzSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9QYW5lSW5kaWNlcywgaGF2aW5nIHR5cGUgaW50W11cclxuICBQYW5lSW5kaWNlcyA9ICdwYW5lSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9Qb2ludHMsIGhhdmluZyB0eXBlIGludFtdXHJcbiAgUG9pbnRzID0gJ3BvaW50cycsXHJcblxyXG4gIC8vIERQSV9RdWlja0ZpbHRlclNldHRpbmdzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIFF1aWNrRmlsdGVyU2V0dGluZ3MgPSAncXVpY2tGaWx0ZXJTZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZEluZGljZXMsIGhhdmluZyB0eXBlIGludFtdXHJcbiAgU2VsZWN0ZWRJbmRpY2VzID0gJ3NlbGVjdGVkSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9TaGVsZlBvc2l0aW9uSW5kaWNlcywgaGF2aW5nIHR5cGUgaW50W11cclxuICBTaGVsZlBvc2l0aW9uSW5kaWNlcyA9ICdzaGVsZlBvc0luZGljZXMnLFxyXG5cclxuICAvLyBEUElfVGlsZUJveCwgaGF2aW5nIHR5cGUgaW50W11cclxuICBUaWxlQm94ID0gJ3RpbGVCb3gnLFxyXG5cclxuICAvLyBEUElfVHJhaWxPdmVycmlkZSwgaGF2aW5nIHR5cGUgaW50W11cclxuICBUcmFpbE92ZXJyaWRlID0gJ3RyYWlsT3ZlcnJpZGUnLFxyXG5cclxuICAvLyBEUElfVUlEcywgaGF2aW5nIHR5cGUgaW50W11cclxuICBVSURzID0gJ3VpZHMnLFxyXG5cclxuICAvLyBEUElfVmFsdWVJbmRpY2VzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIFZhbHVlSW5kaWNlcyA9ICd2YWx1ZUluZGljZXMnLFxyXG5cclxuICAvLyBEUElfWENlbGxPZmZzZXRzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIFhDZWxsT2Zmc2V0cyA9ICd4Q2VsbE9mZnNldHMnLFxyXG5cclxuICAvLyBEUElfWFBpeGVsT2Zmc2V0cywgaGF2aW5nIHR5cGUgaW50W11cclxuICBYUGl4ZWxPZmZzZXRzID0gJ3hQaXhlbE9mZnNldHMnLFxyXG5cclxuICAvLyBEUElfWUNlbGxPZmZzZXRzLCBoYXZpbmcgdHlwZSBpbnRbXVxyXG4gIFlDZWxsT2Zmc2V0cyA9ICd5Q2VsbE9mZnNldHMnLFxyXG5cclxuICAvLyBEUElfWVBpeGVsT2Zmc2V0cywgaGF2aW5nIHR5cGUgaW50W11cclxuICBZUGl4ZWxPZmZzZXRzID0gJ3lQaXhlbE9mZnNldHMnLFxyXG5cclxuICAvLyBEUElfSW50TWFwLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIGludClcclxuICBJbnRNYXAgPSAnaW50TWFwJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkQXV0aFNldHRpbmdJbmRpY2VzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIGludClcclxuICBTZWxlY3RlZEF1dGhTZXR0aW5nSW5kaWNlcyA9ICdzZWxlY3RlZEF1dGhTZXR0aW5nSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9BY3RpdmVTdG9yeVBvaW50SUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBBY3RpdmVTdG9yeVBvaW50SUQgPSAnYWN0aXZlU3RvcnlQb2ludElkJyxcclxuXHJcbiAgLy8gRFBJX0FjdGl2ZVpvbmVJRCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEFjdGl2ZVpvbmVJRCA9ICdhY3RpdmVab25lSWQnLFxyXG5cclxuICAvLyBEUElfQWN0dWFsU2l6ZSwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEFjdHVhbFNpemUgPSAnYWN0dWFsU2l6ZScsXHJcblxyXG4gIC8vIERQSV9BZGRJbkRlYnVnUG9ydCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEFkZEluRGVidWdQb3J0ID0gJ2FkZEluRGVidWdQb3J0JyxcclxuXHJcbiAgLy8gRFBJX0FnZ3JlZ2F0aW9uSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBBZ2dyZWdhdGlvbkluZGV4ID0gJ2FnZ3JlZ2F0aW9uSW5kZXgnLFxyXG5cclxuICAvLyBEUElfQW5ub3RhdGlvbklELCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQW5ub3RhdGlvbklEID0gJ2Fubm90YXRpb25JZCcsXHJcblxyXG4gIC8vIERQSV9Bc3NpZ25lZEFsaWFzQ291bnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBBc3NpZ25lZEFsaWFzQ291bnQgPSAnYXNzaWduZWRBbGlhc0NvdW50JyxcclxuXHJcbiAgLy8gRFBJX0NhcGFiaWxpdHlJZCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIENhcGFiaWxpdHlJZCA9ICdjYXBhYmlsaXR5SWQnLFxyXG5cclxuICAvLyBEUElfQ2FyZXRJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIENhcmV0SW5kZXggPSAnY2FyZXRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9DZWxsSUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBDZWxsSUQgPSAnY2VsbElkJyxcclxuXHJcbiAgLy8gRFBJX0NvbHVtbkluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQ29sdW1uSW5kZXggPSAnY29sdW1uSW5kZXgnLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZElELCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQ29tbWFuZElEID0gJ2lkJyxcclxuXHJcbiAgLy8gRFBJX0NvbW1hbmRJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIENvbW1hbmRJbmRleCA9ICdpbmRleCcsXHJcblxyXG4gIC8vIERQSV9Db250cm9sbGVySWQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBDb250cm9sbGVySWQgPSAnY29udHJvbGxlcklkJyxcclxuXHJcbiAgLy8gRFBJX0NvdW50LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQ291bnQgPSAnY291bnQnLFxyXG5cclxuICAvLyBEUElfVVJvd0NvdW50LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVVJvd0NvdW50ID0gJ3VSb3dDb3VudCcsXHJcblxyXG4gIC8vIERQSV9VQ29sdW1uQ291bnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBVQ29sdW1uQ291bnQgPSAndUNvbHVtbkNvdW50JyxcclxuXHJcbiAgLy8gRFBJX0N1cnJlbnRQYWdlLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgQ3VycmVudFBhZ2UgPSAnY3VycmVudFBhZ2UnLFxyXG5cclxuICAvLyBEUElfRGF0ZVBlcmlvZHNDb3VudCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIERhdGVQZXJpb2RzQ291bnQgPSAnZGF0ZVBlcmlvZHNDb3VudCcsXHJcblxyXG4gIC8vIERQSV9EZWNpbWFscywgaGF2aW5nIHR5cGUgdWludFxyXG4gIERlY2ltYWxzID0gJ2RlY2ltYWxzJyxcclxuXHJcbiAgLy8gRFBJX0RlZmF1bHRIZWlnaHQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBEZWZhdWx0SGVpZ2h0ID0gJ2RlZmF1bHRIZWlnaHQnLFxyXG5cclxuICAvLyBEUElfRGVmYXVsdEl0ZW0sIGhhdmluZyB0eXBlIHVpbnRcclxuICBEZWZhdWx0SXRlbSA9ICdkZWZhdWx0SXRlbScsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0V2lkdGgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBEZWZhdWx0V2lkdGggPSAnZGVmYXVsdFdpZHRoJyxcclxuXHJcbiAgLy8gRFBJX0RlcHRoLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRGVwdGggPSAnZGVwdGgnLFxyXG5cclxuICAvLyBEUElfRGV0YWlsSUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBEZXRhaWxJRCA9ICdkZXRhaWxJZCcsXHJcblxyXG4gIC8vIERQSV9EcmlsbExldmVsLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRHJpbGxMZXZlbCA9ICdkcmlsbExldmVsJyxcclxuXHJcbiAgLy8gRFBJX0R1cGxpY2F0ZUluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRHVwbGljYXRlSW5kZXggPSAnZHVwbGljYXRlSW5kZXgnLFxyXG5cclxuICAvLyBEUElfRW5kSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBFbmRJbmRleCA9ICdlbmRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9GaWVsZEljb25JZHgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBGaWVsZEljb25JZHggPSAnZmllbGRJY29uSWR4JyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckxldmVsLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRmlsdGVyTGV2ZWwgPSAnZmlsdGVyTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyVGlsZVNpemUsIGhhdmluZyB0eXBlIHVpbnRcclxuICBGaWx0ZXJUaWxlU2l6ZSA9ICdmaWx0ZXJUaWxlU2l6ZScsXHJcblxyXG4gIC8vIERQSV9GaXNjYWxZZWFyU3RhcnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBGaXNjYWxZZWFyU3RhcnQgPSAnZmlzY2FsWWVhclN0YXJ0JyxcclxuXHJcbiAgLy8gRFBJX0ZpdFBhZ2VzQWNyb3NzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRml0UGFnZXNBY3Jvc3MgPSAncGFnZUZpdEhvcml6b250YWwnLFxyXG5cclxuICAvLyBEUElfRml0UGFnZXNEb3duLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRml0UGFnZXNEb3duID0gJ3BhZ2VGaXRWZXJ0aWNhbCcsXHJcblxyXG4gIC8vIERQSV9GaXhlZEluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRml4ZWRJbmRleCA9ICdmaXhlZEluZGV4JyxcclxuXHJcbiAgLy8gRFBJX0ZsaXBib2FyZFpvbmVJRCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEZsaXBib2FyZFpvbmVJRCA9ICdmbGlwYm9hcmRab25lSWQnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RBdXRvUmFuZ2VTaXplLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRm9yZWNhc3RBdXRvUmFuZ2VTaXplID0gJ2ZvcmVjYXN0QXV0b1JhbmdlU2l6ZScsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdEVuZE9mUmFuZ2UsIGhhdmluZyB0eXBlIHVpbnRcclxuICBGb3JlY2FzdEVuZE9mUmFuZ2UgPSAnZm9yZWNhc3RFbmRPZlJhbmdlJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0SWdub3JlTGFzdCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEZvcmVjYXN0SWdub3JlTGFzdCA9ICdmb3JlY2FzdElnbm9yZUxhc3QnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3ROZXh0UmFuZ2VTaXplLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgRm9yZWNhc3ROZXh0UmFuZ2VTaXplID0gJ2ZvcmVjYXN0TmV4dFJhbmdlU2l6ZScsXHJcblxyXG4gIC8vIERQSV9Hcm91cEZsYWdzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgR3JvdXBGbGFncyA9ICdncm91cEZsYWcnLFxyXG5cclxuICAvLyBEUElfSGllcmFyY2h5TGV2ZWxzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgSGllcmFyY2h5TGV2ZWxzID0gJ2hpZXJhcmNoeUxldmVscycsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlNZW1iZXJJZCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEhpZXJhcmNoeU1lbWJlcklkID0gJ2hpZXJhcmNoeU1lbWJlcklkJyxcclxuXHJcbiAgLy8gRFBJX0hpdFRlc3RGbGFncywgaGF2aW5nIHR5cGUgdWludFxyXG4gIEhpdFRlc3RGbGFncyA9ICdoaXRUZXN0RmxhZ3MnLFxyXG5cclxuICAvLyBEUElfSW1hZ2VIZWlnaHQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBJbWFnZUhlaWdodCA9ICdpbWFnZUhlaWdodCcsXHJcblxyXG4gIC8vIERQSV9JbWFnZVdpZHRoLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgSW1hZ2VXaWR0aCA9ICdpbWFnZVdpZHRoJyxcclxuXHJcbiAgLy8gRFBJX0l0ZW1JbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEl0ZW1JbmRleCA9ICdpdGVtSW5kZXgnLFxyXG5cclxuICAvLyBEUElfSXRlbUluZGV4MSwgaGF2aW5nIHR5cGUgdWludFxyXG4gIEl0ZW1JbmRleDEgPSAnaXRlbUluZGV4MScsXHJcblxyXG4gIC8vIERQSV9MaW5lSGVpZ2h0LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTGluZUhlaWdodCA9ICdsaW5lSGVpZ2h0JyxcclxuXHJcbiAgLy8gRFBJX01hcEludGVybWVkaWF0ZUxldmVscywgaGF2aW5nIHR5cGUgdWludFxyXG4gIE1hcEludGVybWVkaWF0ZUxldmVscyA9ICdtYXBJbnRlcm1lZGlhdGVMZXZlbHMnLFxyXG5cclxuICAvLyBEUElfTWFwV29ybGRSZXBlYXRzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTWFwV29ybGRSZXBlYXRzID0gJ21hcFdvcmxkUmVwZWF0cycsXHJcblxyXG4gIC8vIERQSV9NYXhBbHBoYSwgaGF2aW5nIHR5cGUgdWludFxyXG4gIE1heEFscGhhID0gJ21heEFscGhhJyxcclxuXHJcbiAgLy8gRFBJX01heEhlaWdodCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIE1heEhlaWdodCA9ICdtYXhIZWlnaHQnLFxyXG5cclxuICAvLyBEUElfTWF4TnVtYmVyV2ViTGlzdEl0ZW1zLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTWF4TnVtYmVyV2ViTGlzdEl0ZW1zID0gJ21heE51bWJlcldlYkxpc3RJdGVtcycsXHJcblxyXG4gIC8vIERQSV9NYXhQcmV2T3JOZXh0VmFsdWVzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTWF4UHJldk9yTmV4dFZhbHVlcyA9ICdtYXhQcmV2T3JOZXh0VmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX01heFJvd3MsIGhhdmluZyB0eXBlIHVpbnRcclxuICBNYXhSb3dzID0gJ21heFJvd3MnLFxyXG5cclxuICAvLyBEUElfTWF4VHJhbnNwYXJlbmN5LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTWF4VHJhbnNwYXJlbmN5ID0gJ2NvbG9yTWF4VHJhbnNwYXJlbmN5VmFsdWUnLFxyXG5cclxuICAvLyBEUElfTWF4V2lkdGgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBNYXhXaWR0aCA9ICdtYXhXaWR0aCcsXHJcblxyXG4gIC8vIERQSV9NaW5Db2x1bW5zLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTWluQ29sdW1ucyA9ICdtaW5Db2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX01pbkhlaWdodCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIE1pbkhlaWdodCA9ICdtaW5IZWlnaHQnLFxyXG5cclxuICAvLyBEUElfTWluUHJldk9yTmV4dFZhbHVlcywgaGF2aW5nIHR5cGUgdWludFxyXG4gIE1pblByZXZPck5leHRWYWx1ZXMgPSAnbWluUHJldk9yTmV4dFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9NaW5UcmFuc3BhcmVuY3ksIGhhdmluZyB0eXBlIHVpbnRcclxuICBNaW5UcmFuc3BhcmVuY3kgPSAnY29sb3JNaW5UcmFuc3BhcmVuY3lWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9NaW5XaWR0aCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIE1pbldpZHRoID0gJ21pbldpZHRoJyxcclxuXHJcbiAgLy8gRFBJX05lc3RlZENhbGNzSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBOZXN0ZWRDYWxjc0luZGV4ID0gJ25lc3RlZENhbGNzSW5kZXgnLFxyXG5cclxuICAvLyBEUElfTmV4dFZhbHVlcywgaGF2aW5nIHR5cGUgdWludFxyXG4gIE5leHRWYWx1ZXMgPSAnbmV4dFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9Ob2RlTGV2ZWwsIGhhdmluZyB0eXBlIHVpbnRcclxuICBOb2RlTGV2ZWwgPSAnbm9kZUxldmVsJyxcclxuXHJcbiAgLy8gRFBJX051bUhpZ2hsaWdodGVkLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTnVtSGlnaGxpZ2h0ZWQgPSAnbnVtSGlnaGxpZ2h0ZWQnLFxyXG5cclxuICAvLyBEUElfTnVtYmVyT2ZOZXh0VmFsdWVzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgTnVtYmVyT2ZOZXh0VmFsdWVzID0gJ251bWJlck9mTmV4dFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9OdW1iZXJPZlByZXZWYWx1ZXMsIGhhdmluZyB0eXBlIHVpbnRcclxuICBOdW1iZXJPZlByZXZWYWx1ZXMgPSAnbnVtYmVyT2ZQcmV2VmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX09iamVjdElELCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgT2JqZWN0SUQgPSAnb2JqZWN0SWQnLFxyXG5cclxuICAvLyBEUElfT3JkZXJpbmdUeXBlSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBPcmRlcmluZ1R5cGVJbmRleCA9ICdvcmRlcmluZ1R5cGVJbmRleCcsXHJcblxyXG4gIC8vIERQSV9QYWdlQ291bnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBQYWdlQ291bnQgPSAncGFnZUNvdW50JyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VGYWRlRW5kLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUGFnZUZhZGVFbmQgPSAnZmFkZUVuZCcsXHJcblxyXG4gIC8vIERQSV9QYWdlRmFkZVN0YXJ0LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUGFnZUZhZGVTdGFydCA9ICdmYWRlU3RhcnQnLFxyXG5cclxuICAvLyBEUElfUGFnZUluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUGFnZUluZGV4ID0gJ3BhZ2VJbmRleCcsXHJcblxyXG4gIC8vIERQSV9QYWdlTnVtYmVyLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUGFnZU51bWJlciA9ICdwYWdlTnVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VTY2FsZVBlcmNlbnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBQYWdlU2NhbGVQZXJjZW50ID0gJ3BhZ2VTY2FsZVBlcmNlbnQnLFxyXG5cclxuICAvLyBEUElfUGFnZVRyYWlsTGVuZ3RoLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUGFnZVRyYWlsTGVuZ3RoID0gJ2hpc3RvcnlMZW5ndGgnLFxyXG5cclxuICAvLyBEUElfUGFsZXR0ZUZsYWdzVmFsLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUGFsZXR0ZUZsYWdzVmFsID0gJ3BhbGV0dGVGbGFnc1ZhbCcsXHJcblxyXG4gIC8vIERQSV9QYW5lSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBQYW5lSW5kZXggPSAncGFuZUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtQ3RybERpc3BsYXlGbGFncywgaGF2aW5nIHR5cGUgdWludFxyXG4gIFBhcmFtQ3RybERpc3BsYXlGbGFncyA9ICdwYXJhbURpc3BsYXlGbGFncycsXHJcblxyXG4gIC8vIERQSV9QYXJlbnRab25lSUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBQYXJlbnRab25lSUQgPSAncGFyZW50Wm9uZUlkJyxcclxuXHJcbiAgLy8gRFBJX1BlcmNlbnRpbGVQYXJhbSwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFBlcmNlbnRpbGVQYXJhbSA9ICdwZXJjZW50aWxlUGFyYW0nLFxyXG5cclxuICAvLyBEUElfUHJldlZhbHVlcywgaGF2aW5nIHR5cGUgdWludFxyXG4gIFByZXZWYWx1ZXMgPSAncHJldlZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoUmVzdWx0U3RyaW5nSWQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBQdWJsaXNoUmVzdWx0U3RyaW5nSWQgPSAncHVibGlzaFJlc3VsdFN0cmluZ0lkJyxcclxuXHJcbiAgLy8gRFBJX1FSR0JDb2xvciwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFFSR0JDb2xvciA9ICdxcmdiQ29sb3InLFxyXG5cclxuICAvLyBEUElfUmFuZ2VEZWZhdWx0TiwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFJhbmdlRGVmYXVsdE4gPSAncmFuZ2VEZWZhdWx0TicsXHJcblxyXG4gIC8vIERQSV9SYW5nZU4sIGhhdmluZyB0eXBlIHVpbnRcclxuICBSYW5nZU4gPSAncmFuZ2VOJyxcclxuXHJcbiAgLy8gRFBJX1JhbmtUeXBlSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBSYW5rVHlwZUluZGV4ID0gJ3JhbmtUeXBlSW5kZXgnLFxyXG5cclxuICAvLyBEUElfUmVuZGVyQ29tcGxleGl0eSwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFJlbmRlckNvbXBsZXhpdHkgPSAncmVuZGVyQ29tcGxleGl0eUxpbWl0JyxcclxuXHJcbiAgLy8gRFBJX1Jvd0luZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgUm93SW5kZXggPSAncm93SW5kZXgnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0ZWRBdXRoU2V0dGluZ0luZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgU2VsZWN0ZWRBdXRoU2V0dGluZ0luZGV4ID0gJ3NlbGVjdGVkQXV0aFNldHRpbmdJbmRleCcsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZEZ1bGxTY2hlZHVsZUluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgU2VsZWN0ZWRGdWxsU2NoZWR1bGVJbmRleCA9ICdzZWxlY3RlZEZ1bGxTY2hlZHVsZUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkSW5jclNjaGVkdWxlSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTZWxlY3RlZEluY3JTY2hlZHVsZUluZGV4ID0gJ3NlbGVjdGVkSW5jclNjaGVkdWxlSW5kZXgnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0ZWRQdWJsaXNoQ2hvaWNlSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTZWxlY3RlZFB1Ymxpc2hDaG9pY2VJbmRleCA9ICdzZWxlY3RlZFB1Ymxpc2hDaG9pY2VJbmRleCcsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZE1lbWJlckNvdW50LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgU2VsZWN0ZWRNZW1iZXJDb3VudCA9ICdzZWxlY3RlZE1lbWJlckNvdW50JyxcclxuXHJcbiAgLy8gRFBJX1NoYXBlSUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTaGFwZUlEID0gJ3NoYXBlSWQnLFxyXG5cclxuICAvLyBEUElfU2hlZXRVc2VDb3VudCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFNoZWV0VXNlQ291bnQgPSAndXNlQ291bnQnLFxyXG5cclxuICAvLyBEUElfU2hlbGZJdGVtSUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTaGVsZkl0ZW1JRCA9ICdzaGVsZkl0ZW1JZCcsXHJcblxyXG4gIC8vIERQSV9TaWdGaWdzLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgU2lnRmlncyA9ICdzaWdGaWdzJyxcclxuXHJcbiAgLy8gRFBJX1NvcnRBZ2dJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFNvcnRBZ2dJbmRleCA9ICdzb3J0QWdnSW5kdlZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9Tb3J0Q29sdW1uSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTb3J0Q29sdW1uSW5kZXggPSAnc29ydENvbHVtbkluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1NvcnREaXJlY3Rpb25JbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFNvcnREaXJlY3Rpb25JbmRleCA9ICdzb3J0RGlyZWN0aW9uSW5kZXgnLFxyXG5cclxuICAvLyBEUElfU29ydEZpZWxkSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTb3J0RmllbGRJbmRleCA9ICdzb3J0RmllbGRJbmRleCcsXHJcblxyXG4gIC8vIERQSV9TdGFydEluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgU3RhcnRJbmRleCA9ICdzdGFydEluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1N0YXJ0T2ZXZWVrLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgU3RhcnRPZldlZWsgPSAnc3RhcnRPZldlZWsnLFxyXG5cclxuICAvLyBEUElfU3RvcmVJZCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFN0b3JlSWQgPSAnc3RvcmVJZCcsXHJcblxyXG4gIC8vIERQSV9TdG9yeVBvaW50SUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBTdG9yeVBvaW50SUQgPSAnc3RvcnlQb2ludElkJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlQ2FsY1R5cGVJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFRhYmxlQ2FsY1R5cGVJbmRleCA9ICd0YWJsZUNhbGNUeXBlSW5kZXgnLFxyXG5cclxuICAvLyBEUElfVGFibGVDYWxjVHlwZXNVc2VkLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVGFibGVDYWxjVHlwZXNVc2VkID0gJ3RhYmxlQ2FsY1R5cGVzVXNlZCcsXHJcblxyXG4gIC8vIERQSV9UZW1wbGF0ZUluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVGVtcGxhdGVJbmRleCA9ICd0ZW1wbGF0ZUluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1RpbGVDb3VudCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFRpbGVDb3VudCA9ICd0aWxlQ291bnQnLFxyXG5cclxuICAvLyBEUElfVGltZW91dFNlY29uZHMsIGhhdmluZyB0eXBlIHVpbnRcclxuICBUaW1lb3V0U2Vjb25kcyA9ICd0aW1lb3V0U2Vjb25kcycsXHJcblxyXG4gIC8vIERQSV9Ub3BOLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVG9wTiA9ICd0b3BOJyxcclxuXHJcbiAgLy8gRFBJX1RvdGFsTnVtYmVyT2ZJdGVtc0luU2V0LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVG90YWxOdW1iZXJPZkl0ZW1zSW5TZXQgPSAndG90YWxOdW1iZXJPZkl0ZW1zSW5TZXQnLFxyXG5cclxuICAvLyBEUElfVG90YWxNZW1iZXJDb3VudCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFRvdGFsTWVtYmVyQ291bnQgPSAndG90YWxNZW1iZXJDb3VudCcsXHJcblxyXG4gIC8vIERQSV9UcmFuc3BhcmVuY3ksIGhhdmluZyB0eXBlIHVpbnRcclxuICBUcmFuc3BhcmVuY3kgPSAnY29sb3JUcmFuc3BhcmVuY3lWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9UdXBsZUlELCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVHVwbGVJRCA9ICd0dXBsZUlkJyxcclxuXHJcbiAgLy8gRFBJX1VJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFVJbmRleCA9ICd1aW5kZXgnLFxyXG5cclxuICAvLyBEUElfVW5kb1Bvc2l0aW9uLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVW5kb1Bvc2l0aW9uID0gJ3VuZG9Qb3NpdGlvbicsXHJcblxyXG4gIC8vIERQSV9VbnNpZ25lZFdpZHRoLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVW5zaWduZWRXaWR0aCA9ICd1dycsXHJcblxyXG4gIC8vIERQSV9VbnNpZ25lZFdpZHRoQm90dG9tLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVW5zaWduZWRXaWR0aEJvdHRvbSA9ICd1d2InLFxyXG5cclxuICAvLyBEUElfVW5zaWduZWRXaWR0aExlZnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBVbnNpZ25lZFdpZHRoTGVmdCA9ICd1d2wnLFxyXG5cclxuICAvLyBEUElfVW5zaWduZWRXaWR0aFJpZ2h0LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVW5zaWduZWRXaWR0aFJpZ2h0ID0gJ3V3cicsXHJcblxyXG4gIC8vIERQSV9VbnNpZ25lZFdpZHRoVG9wLCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgVW5zaWduZWRXaWR0aFRvcCA9ICd1d3QnLFxyXG5cclxuICAvLyBEUElfVmFsdWVJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFZhbHVlSW5kZXggPSAndmFsdWVJbmRleCcsXHJcblxyXG4gIC8vIERQSV9WYWx1ZUludCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFZhbHVlSW50ID0gJ3ZhbHVlSW50JyxcclxuXHJcbiAgLy8gRFBJX1dvcmxkT2Zmc2V0LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgV29ybGRPZmZzZXQgPSAnd29ybGRPZmZzZXQnLFxyXG5cclxuICAvLyBEUElfWER1cGxpY2F0ZUluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgWER1cGxpY2F0ZUluZGV4ID0gJ3hEdXBsaWNhdGVJbmRleCcsXHJcblxyXG4gIC8vIERQSV9YSW5kZXgsIGhhdmluZyB0eXBlIHVpbnRcclxuICBYSW5kZXggPSAneEluZGV4JyxcclxuXHJcbiAgLy8gRFBJX1lEdXBsaWNhdGVJbmRleCwgaGF2aW5nIHR5cGUgdWludFxyXG4gIFlEdXBsaWNhdGVJbmRleCA9ICd5RHVwbGljYXRlSW5kZXgnLFxyXG5cclxuICAvLyBEUElfWUluZGV4LCBoYXZpbmcgdHlwZSB1aW50XHJcbiAgWUluZGV4ID0gJ3lJbmRleCcsXHJcblxyXG4gIC8vIERQSV9ab25lSUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBab25lSUQgPSAnem9uZUlkJyxcclxuXHJcbiAgLy8gRFBJX1pvbmVaT3JkZXIsIGhhdmluZyB0eXBlIHVpbnRcclxuICBab25lWk9yZGVyID0gJ3pvbmVaT3JkZXInLFxyXG5cclxuICAvLyBEUElfQ29tcG9uZW50SUQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBDb21wb25lbnRJRCA9ICdjb21wb25lbnRJZCcsXHJcblxyXG4gIC8vIERQSV9Ob25UaHJlYWRQb29sVXNlQ291bnQsIGhhdmluZyB0eXBlIHVpbnRcclxuICBOb25UaHJlYWRQb29sVXNlQ291bnQgPSAnbm9uVGhyZWFkUG9vbFVzZUNvdW50JyxcclxuXHJcbiAgLy8gRFBJX0FkZHJlc3NpbmdJbmRpY2VzLCBoYXZpbmcgdHlwZSB1aW50W11cclxuICBBZGRyZXNzaW5nSW5kaWNlcyA9ICdhZGRyZXNzaW5nSW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9BZGRyZXNzaW5nSW52YWxpZEluZGljZXMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIEFkZHJlc3NpbmdJbnZhbGlkSW5kaWNlcyA9ICdhZGRyZXNzaW5nSW52YWxpZEluZGljZXMnLFxyXG5cclxuICAvLyBEUElfQ2hpbGRab25lSWRzLCBoYXZpbmcgdHlwZSB1aW50W11cclxuICBDaGlsZFpvbmVJZHMgPSAnY2hpbGRab25lSWRzJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yTGlzdCwgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgQ29sb3JMaXN0ID0gJ2NvbG9yTGlzdCcsXHJcblxyXG4gIC8vIERQSV9EdXBsaWNhdGVJbmRpY2VzLCBoYXZpbmcgdHlwZSB1aW50W11cclxuICBEdXBsaWNhdGVJbmRpY2VzID0gJ2R1cGxpY2F0ZUluZGljZXMnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyQWRkSW5kaWNlcywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgRmlsdGVyQWRkSW5kaWNlcyA9ICdmaWx0ZXJBZGRJbmRpY2VzJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckluZGljZXMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIEZpbHRlckluZGljZXMgPSAnZmlsdGVySW5kaWNlcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJMZXZlbEFkZCwgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgRmlsdGVyTGV2ZWxBZGQgPSAnZmlsdGVyTGV2ZWxBZGQnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyTGV2ZWxSZW1vdmUsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIEZpbHRlckxldmVsUmVtb3ZlID0gJ2ZpbHRlckxldmVsUmVtb3ZlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckxldmVscywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgRmlsdGVyTGV2ZWxzID0gJ2ZpbHRlckxldmVscycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJSZW1vdmVJbmRpY2VzLCBoYXZpbmcgdHlwZSB1aW50W11cclxuICBGaWx0ZXJSZW1vdmVJbmRpY2VzID0gJ2ZpbHRlclJlbW92ZUluZGljZXMnLFxyXG5cclxuICAvLyBEUElfRml4ZWRWYWx1ZXMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIEZpeGVkVmFsdWVzID0gJ2ZpeGVkVmFsdWVzJyxcclxuXHJcbiAgLy8gRFBJX0hpZXJhcmNoeU1lbWJlcklkTGlzdCwgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgSGllcmFyY2h5TWVtYmVySWRMaXN0ID0gJ2hpZXJhcmNoeU1lbWJlcklkTGlzdCcsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkSW5kaWNlcywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgSW52YWxpZEluZGljZXMgPSAnaW52YWxpZEluZGljZXMnLFxyXG5cclxuICAvLyBEUElfSXRlbUluZGljZXMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIEl0ZW1JbmRpY2VzID0gJ2l0ZW1JbmRpY2VzJyxcclxuXHJcbiAgLy8gRFBJX0xpbmVUdXBsZUlEcywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgTGluZVR1cGxlSURzID0gJ2xpbmVUdXBsZUlkcycsXHJcblxyXG4gIC8vIERQSV9PYmplY3RJRHMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIE9iamVjdElEcyA9ICdvYmplY3RJZHMnLFxyXG5cclxuICAvLyBEUElfUGFnZUluZGljZXMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIFBhZ2VJbmRpY2VzID0gJ3BhZ2VJbmRpY2VzJyxcclxuXHJcbiAgLy8gRFBJX1FSR0IsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIFFSR0IgPSAncXJnYkxpc3QnLFxyXG5cclxuICAvLyBEUElfUVJHQkNvbG9ycywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgUVJHQkNvbG9ycyA9ICdxcmdiQ29sb3JzJyxcclxuXHJcbiAgLy8gRFBJX1JlZkxpbmVJRCwgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgUmVmTGluZUlEID0gJ3JlZmxpbmVJZCcsXHJcblxyXG4gIC8vIERQSV9TaGFwZUlEcywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgU2hhcGVJRHMgPSAnc2hhcGVJZHMnLFxyXG5cclxuICAvLyBEUElfU2hlbGZTZWxlY3Rpb24sIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIFNoZWxmU2VsZWN0aW9uID0gJ3NoZWxmU2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5UG9pbnRJRHMsIGhhdmluZyB0eXBlIHVpbnRbXVxyXG4gIFN0b3J5UG9pbnRJRHMgPSAnc3RvcnlQb2ludElkcycsXHJcblxyXG4gIC8vIERQSV9UdXBsZUlEcywgaGF2aW5nIHR5cGUgdWludFtdXHJcbiAgVHVwbGVJRHMgPSAndHVwbGVJZHMnLFxyXG5cclxuICAvLyBEUElfV2lkdGhzLCBoYXZpbmcgdHlwZSB1aW50W11cclxuICBXaWR0aHMgPSAnd2lkdGhzJyxcclxuXHJcbiAgLy8gRFBJX1VpbnRNYXAsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2YgdWludDMyX3QpXHJcbiAgVWludE1hcCA9ICd1aW50TWFwJyxcclxuXHJcbiAgLy8gRFBJX0FscGhhLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIEFscGhhID0gJ2FscGhhJyxcclxuXHJcbiAgLy8gRFBJX0FuZ2xlLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIEFuZ2xlID0gJ2FuZ2xlJyxcclxuXHJcbiAgLy8gRFBJX0JyZWFrUG9pbnRWYWx1ZSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBCcmVha1BvaW50VmFsdWUgPSAnYnJlYWtQb2ludFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX0RldmljZVBpeGVsUmF0aW8sIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgRGV2aWNlUGl4ZWxSYXRpbyA9ICdkZXZpY2VQaXhlbFJhdGlvJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3RhbmNlLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIERpc3RhbmNlID0gJ2Rpc3RhbmNlJyxcclxuXHJcbiAgLy8gRFBJX0Zsb2F0WCwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBGbG9hdFggPSAnZmxvYXRYJyxcclxuXHJcbiAgLy8gRFBJX0Zsb2F0WSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBGbG9hdFkgPSAnZmxvYXRZJyxcclxuXHJcbiAgLy8gRFBJX0ZvZ0Rlc2F0dXJhdGlvbiwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBGb2dEZXNhdHVyYXRpb24gPSAnZm9nRGVzYXR1cmF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX01hcmtTY2FsZSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBNYXJrU2NhbGUgPSAnbWFya1NjYWxlJyxcclxuXHJcbiAgLy8gRFBJX01hcmtTaXplSW5QaXhlbFVuaXRzLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE1hcmtTaXplSW5QaXhlbFVuaXRzID0gJ21hcmtTaXplSW5QaXhlbFVuaXRzJyxcclxuXHJcbiAgLy8gRFBJX1BvaW50U2l6ZSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBQb2ludFNpemUgPSAncG9pbnRTaXplJyxcclxuXHJcbiAgLy8gRFBJX1N0cm9rZVdpZHRoLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIFN0cm9rZVdpZHRoID0gJ3N0cm9rZVdpZHRoJyxcclxuXHJcbiAgLy8gRFBJX1RleHRSZWdpb25PcmllbnRhdGlvbiwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBUZXh0UmVnaW9uT3JpZW50YXRpb24gPSAnb3JpZW50YXRpb24nLFxyXG5cclxuICAvLyBEUElfVHJhbnNmb3JtQW5nbGUsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgVHJhbnNmb3JtQW5nbGUgPSAndHJhbnNmb3JtQW5nbGUnLFxyXG5cclxuICAvLyBEUElfWm9vbUxldmVsLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIFpvb21MZXZlbCA9ICd6b29tTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfT2xkWm9vbUxldmVsLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE9sZFpvb21MZXZlbCA9ICdvbGRab29tTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfTmV3Wm9vbUxldmVsLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE5ld1pvb21MZXZlbCA9ICduZXdab29tTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfQXNwZWN0UmF0aW8sIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgQXNwZWN0UmF0aW8gPSAnYXNwZWN0UmF0aW8nLFxyXG5cclxuICAvLyBEUElfQm90dG9tUHJpbnRNYXJnaW4sIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgQm90dG9tUHJpbnRNYXJnaW4gPSAnYm90dG9tUHJpbnRNYXJnaW4nLFxyXG5cclxuICAvLyBEUElfRWFydGhSYWRpdXMsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgRWFydGhSYWRpdXMgPSAnZWFydGhSYWRpdXMnLFxyXG5cclxuICAvLyBEUElfRmxvYXRIZWlnaHQsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgRmxvYXRIZWlnaHQgPSAnZmxvYXRIZWlnaHQnLFxyXG5cclxuICAvLyBEUElfRmxvYXRMZWZ0LCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIEZsb2F0TGVmdCA9ICdmbG9hdExlZnQnLFxyXG5cclxuICAvLyBEUElfRmxvYXRSYWRpdXMsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgRmxvYXRSYWRpdXMgPSAnZmxvYXRSYWRpdXMnLFxyXG5cclxuICAvLyBEUElfRmxvYXRUb3AsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgRmxvYXRUb3AgPSAnZmxvYXRUb3AnLFxyXG5cclxuICAvLyBEUElfRmxvYXRXaWR0aCwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBGbG9hdFdpZHRoID0gJ2Zsb2F0V2lkdGgnLFxyXG5cclxuICAvLyBEUElfTGVmdFByaW50TWFyZ2luLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIExlZnRQcmludE1hcmdpbiA9ICdsZWZ0UHJpbnRNYXJnaW4nLFxyXG5cclxuICAvLyBEUElfTWFwQ2VudGVyTGF0aXR1ZGUsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgTWFwQ2VudGVyTGF0aXR1ZGUgPSAnbWFwQ2VudGVyTGF0aXR1ZGUnLFxyXG5cclxuICAvLyBEUElfTWFwQ2VudGVyTG9uZ2l0dWRlLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE1hcENlbnRlckxvbmdpdHVkZSA9ICdtYXBDZW50ZXJMb25naXR1ZGUnLFxyXG5cclxuICAvLyBEUElfTWFwRGlzcGxheVNjYWxlLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE1hcERpc3BsYXlTY2FsZSA9ICdtYXBEaXNwbGF5U2NhbGUnLFxyXG5cclxuICAvLyBEUElfTWFwTWF4U3RyZXRjaCwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBNYXBNYXhTdHJldGNoID0gJ21hcE1heFN0cmV0Y2gnLFxyXG5cclxuICAvLyBEUElfTWFwTWF4Wm9vbSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBNYXBNYXhab29tID0gJ21hcE1heFpvb20nLFxyXG5cclxuICAvLyBEUElfTWFwTWluU2hyaW5rLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE1hcE1pblNocmluayA9ICdtYXBNaW5TaHJpbmsnLFxyXG5cclxuICAvLyBEUElfTWFwTWluWm9vbSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBNYXBNaW5ab29tID0gJ21hcE1pblpvb20nLFxyXG5cclxuICAvLyBEUElfTWFwUmVxdWVzdFpvb20sIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgTWFwUmVxdWVzdFpvb20gPSAnbWFwUmVxdWVzdFpvb20nLFxyXG5cclxuICAvLyBEUElfTWFwV2FzaG91dCwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBNYXBXYXNob3V0ID0gJ21hcFdhc2hvdXQnLFxyXG5cclxuICAvLyBEUElfTWF4TGF0aXR1ZGUsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgTWF4TGF0aXR1ZGUgPSAnbWF4TGF0aXR1ZGUnLFxyXG5cclxuICAvLyBEUElfTWF4TG9uZ2l0dWRlLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE1heExvbmdpdHVkZSA9ICdtYXhMb25naXR1ZGUnLFxyXG5cclxuICAvLyBEUElfTWluTGF0aXR1ZGUsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgTWluTGF0aXR1ZGUgPSAnbWluTGF0aXR1ZGUnLFxyXG5cclxuICAvLyBEUElfTWluTG9uZ2l0dWRlLCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIE1pbkxvbmdpdHVkZSA9ICdtaW5Mb25naXR1ZGUnLFxyXG5cclxuICAvLyBEUElfUmlnaHRQcmludE1hcmdpbiwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBSaWdodFByaW50TWFyZ2luID0gJ3JpZ2h0UHJpbnRNYXJnaW4nLFxyXG5cclxuICAvLyBEUElfVG9wUHJpbnRNYXJnaW4sIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgVG9wUHJpbnRNYXJnaW4gPSAndG9wUHJpbnRNYXJnaW4nLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uTWF4aW11bSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBVSUF1dG9tYXRpb25NYXhpbXVtID0gJ3VpQXV0b21hdGlvbk1heGltdW0nLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uTWluaW11bSwgaGF2aW5nIHR5cGUgZmxvYXRcclxuICBVSUF1dG9tYXRpb25NaW5pbXVtID0gJ3VpQXV0b21hdGlvbk1pbmltdW0nLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uT2Zmc2V0LCBoYXZpbmcgdHlwZSBmbG9hdFxyXG4gIFVJQXV0b21hdGlvbk9mZnNldCA9ICd1aUF1dG9tYXRpb25PZmZzZXQnLFxyXG5cclxuICAvLyBEUElfVW5pdERpdmlzb3IsIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgVW5pdERpdmlzb3IgPSAndW5pdERpdmlzb3InLFxyXG5cclxuICAvLyBEUElfVW5pdFRyYW5zaXRpb24sIGhhdmluZyB0eXBlIGZsb2F0XHJcbiAgVW5pdFRyYW5zaXRpb24gPSAndW5pdFRyYW5zaXRpb24nLFxyXG5cclxuICAvLyBEUElfQXV0b21hdGljRHJpbGxJZHgsIGhhdmluZyB0eXBlIGZsb2F0W11cclxuICBBdXRvbWF0aWNEcmlsbElkeCA9ICdhdXRvbWF0aWNEcmlsbElkeCcsXHJcblxyXG4gIC8vIERQSV9EZXN0aW5hdGlvbkJveCwgaGF2aW5nIHR5cGUgZmxvYXRbXVxyXG4gIERlc3RpbmF0aW9uQm94ID0gJ2Rlc3RCb3gnLFxyXG5cclxuICAvLyBEUElfTG93ZXJFbmQsIGhhdmluZyB0eXBlIGZsb2F0W11cclxuICBMb3dlckVuZCA9ICdsb3dlckVuZCcsXHJcblxyXG4gIC8vIERQSV9PcHBvc2l0ZUF4aXMsIGhhdmluZyB0eXBlIGZsb2F0W11cclxuICBPcHBvc2l0ZUF4aXMgPSAnb3Bwb3NpdGVBeGlzJyxcclxuXHJcbiAgLy8gRFBJX1BvaW50c0YsIGhhdmluZyB0eXBlIGZsb2F0W11cclxuICBQb2ludHNGID0gJ3BvaW50c0YnLFxyXG5cclxuICAvLyBEUElfU291cmNlQm94LCBoYXZpbmcgdHlwZSBmbG9hdFtdXHJcbiAgU291cmNlQm94ID0gJ3NvdXJjZUJveCcsXHJcblxyXG4gIC8vIERQSV9UcmFuc2Zvcm1PZmZzZXQsIGhhdmluZyB0eXBlIGZsb2F0W11cclxuICBUcmFuc2Zvcm1PZmZzZXQgPSAndHJhbnNmb3JtT2Zmc2V0JyxcclxuXHJcbiAgLy8gRFBJX1RyYW5zZm9ybVNjYWxlLCBoYXZpbmcgdHlwZSBmbG9hdFtdXHJcbiAgVHJhbnNmb3JtU2NhbGUgPSAndHJhbnNmb3JtU2NhbGUnLFxyXG5cclxuICAvLyBEUElfVXBwZXJFbmQsIGhhdmluZyB0eXBlIGZsb2F0W11cclxuICBVcHBlckVuZCA9ICd1cHBlckVuZCcsXHJcblxyXG4gIC8vIERQSV9GbG9hdE1hcCwgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBmbG9hdClcclxuICBGbG9hdE1hcCA9ICdmbG9hdE1hcCcsXHJcblxyXG4gIC8vIERQSV9CR1NTLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBCR1NTID0gJ2JldHdlZW5Hcm91cFN1bU9mU3F1YXJlcycsXHJcblxyXG4gIC8vIERQSV9Db25maWRlbmNlTGV2ZWwsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIENvbmZpZGVuY2VMZXZlbCA9ICdjb25maWRlbmNlTGV2ZWwnLFxyXG5cclxuICAvLyBEUElfQ29uZmlkZW5jZVBlcmNlbnRhZ2UsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIENvbmZpZGVuY2VQZXJjZW50YWdlID0gJ2NvbmZpZGVuY2VQZXJjZW50YWdlJyxcclxuXHJcbiAgLy8gRFBJX0RvdWJsZUxlZnQsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIERvdWJsZUxlZnQgPSAnZG91YmxlTGVmdCcsXHJcblxyXG4gIC8vIERQSV9Eb3VibGVUb3AsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIERvdWJsZVRvcCA9ICdkb3VibGVUb3AnLFxyXG5cclxuICAvLyBEUElfRG91YmxlVmFsdWUsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIERvdWJsZVZhbHVlID0gJ2RvdWJsZVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX0RvdWJsZVgsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIERvdWJsZVggPSAnZG91YmxlWCcsXHJcblxyXG4gIC8vIERQSV9Eb3VibGVZLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBEb3VibGVZID0gJ2RvdWJsZVknLFxyXG5cclxuICAvLyBEUElfRlN0YXRpc3RpYywgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgRlN0YXRpc3RpYyA9ICdmU3RhdGlzdGljJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclJhbmdlTWF4LCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBGaWx0ZXJSYW5nZU1heCA9ICdmaWx0ZXJSYW5nZU1heCcsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJSYW5nZU1pbiwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgRmlsdGVyUmFuZ2VNaW4gPSAnZmlsdGVyUmFuZ2VNaW4nLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZVNjb3JlLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBHZW9ncmFwaGljU2VhcmNoQ2FuZGlkYXRlU2NvcmUgPSAnZ2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZVNjb3JlJyxcclxuXHJcbiAgLy8gRFBJX0hlaWdodEQsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIEhlaWdodEQgPSAnaGVpZ2h0JyxcclxuXHJcbiAgLy8gRFBJX0luZmxlY3Rpb25GcmFjdGlvbiwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgSW5mbGVjdGlvbkZyYWN0aW9uID0gJ2luZmxlY3Rpb25GcmFjdGlvbicsXHJcblxyXG4gIC8vIERQSV9JbmZsZWN0aW9uVmFsdWUsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIEluZmxlY3Rpb25WYWx1ZSA9ICdpbmZsZWN0aW9uVmFsdWUnLFxyXG5cclxuICAvLyBEUElfTVNFLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBNU0UgPSAnbWVhblNxdWFyZWRFcnJvcicsXHJcblxyXG4gIC8vIERQSV9NU00sIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIE1TTSA9ICdtZWFuU3F1YXJlZE1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX01hcFNjYWxlTWFyZ2luT2ZFcnJvciwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgTWFwU2NhbGVNYXJnaW5PZkVycm9yID0gJ21hcFNjYWxlTWFyZ2luT2ZFcnJvcicsXHJcblxyXG4gIC8vIERQSV9NYXJrU2l6ZSwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgTWFya1NpemUgPSAnbWFya1NpemUnLFxyXG5cclxuICAvLyBEUElfTWF4TWFya1NpemUsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIE1heE1hcmtTaXplID0gJ21heE1hcmtTaXplJyxcclxuXHJcbiAgLy8gRFBJX01pbk1hcmtTaXplLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBNaW5NYXJrU2l6ZSA9ICdtaW5NYXJrU2l6ZScsXHJcblxyXG4gIC8vIERQSV9Ob3RjaFBvc2l0aW9uLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBOb3RjaFBvc2l0aW9uID0gJ25vdGNoUG9zaXRpb24nLFxyXG5cclxuICAvLyBEUElfTm90Y2hWYWx1ZSwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgTm90Y2hWYWx1ZSA9ICdub3RjaFZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1BWYWx1ZSwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgUFZhbHVlID0gJ3BWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9QZXJjZW50RGltZW5zaW9ucywgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgUGVyY2VudERpbWVuc2lvbnMgPSAncGVyY2VudERpbWVuc2lvbnMnLFxyXG5cclxuICAvLyBEUElfUGVyY2VudEdyb3VwcywgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgUGVyY2VudEdyb3VwcyA9ICdwZXJjZW50R3JvdXBzJyxcclxuXHJcbiAgLy8gRFBJX1BlcmNlbnRNZWFzdXJlcywgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgUGVyY2VudE1lYXN1cmVzID0gJ3BlcmNlbnRNZWFzdXJlcycsXHJcblxyXG4gIC8vIERQSV9SU3F1YXJlZCwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgUlNxdWFyZWQgPSAnclNxdWFyZWQnLFxyXG5cclxuICAvLyBEUElfU1NFLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBTU0UgPSAnc3VtU3F1YXJlZEVycm9yJyxcclxuXHJcbiAgLy8gRFBJX1NTTSwgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgU1NNID0gJ3N1bVNxdWFyZWRNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9TdGFuZGFyZEVycm9yLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBTdGFuZGFyZEVycm9yID0gJ3N0YW5kYXJkRXJyb3InLFxyXG5cclxuICAvLyBEUElfVFNTLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBUU1MgPSAndG90YWxTdW1PZlNxdWFyZXMnLFxyXG5cclxuICAvLyBEUElfV0dTUywgaGF2aW5nIHR5cGUgZG91YmxlXHJcbiAgV0dTUyA9ICd3aXRoaW5Hcm91cFN1bU9mU3F1YXJlcycsXHJcblxyXG4gIC8vIERQSV9XaWR0aEQsIGhhdmluZyB0eXBlIGRvdWJsZVxyXG4gIFdpZHRoRCA9ICd3aWR0aCcsXHJcblxyXG4gIC8vIERQSV9ab29tRmFjdG9yLCBoYXZpbmcgdHlwZSBkb3VibGVcclxuICBab29tRmFjdG9yID0gJ3pvb21GYWN0b3InLFxyXG5cclxuICAvLyBEUElfQ29lZmZpY2llbnRQVmFsdWVWZWMsIGhhdmluZyB0eXBlIGRvdWJsZVtdXHJcbiAgQ29lZmZpY2llbnRQVmFsdWVWZWMgPSAnY29lZmZpY2llbnRQVmFsdWVWZWN0b3InLFxyXG5cclxuICAvLyBEUElfQ29lZmZpY2llbnRTdGRFcnJWZWMsIGhhdmluZyB0eXBlIGRvdWJsZVtdXHJcbiAgQ29lZmZpY2llbnRTdGRFcnJWZWMgPSAnY29lZmZpY2llbnRTdGRFcnJvclZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9Db2VmZmljaWVudFRWYWx1ZVZlYywgaGF2aW5nIHR5cGUgZG91YmxlW11cclxuICBDb2VmZmljaWVudFRWYWx1ZVZlYyA9ICdjb2VmZmljaWVudFRWYWx1ZVZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9Db2VmZmljaWVudFZlYywgaGF2aW5nIHR5cGUgZG91YmxlW11cclxuICBDb2VmZmljaWVudFZlYyA9ICdjb2VmZmljaWVudFZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9GU3RhdGlzdGljVmVjLCBoYXZpbmcgdHlwZSBkb3VibGVbXVxyXG4gIEZTdGF0aXN0aWNWZWMgPSAndHJlbmRMaW5lRlN0YXRpc3RpY1ZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9GYWN0b3JzLCBoYXZpbmcgdHlwZSBkb3VibGVbXVxyXG4gIEZhY3RvcnMgPSAnZmFjdG9ycycsXHJcblxyXG4gIC8vIERQSV9NU0VWZWMsIGhhdmluZyB0eXBlIGRvdWJsZVtdXHJcbiAgTVNFVmVjID0gJ21lYW5TcXVhcmVkRXJyb3JWZWN0b3InLFxyXG5cclxuICAvLyBEUElfTWVhbnMsIGhhdmluZyB0eXBlIGRvdWJsZVtdXHJcbiAgTWVhbnMgPSAnbWVhbnMnLFxyXG5cclxuICAvLyBEUElfUFZhbHVlVmVjLCBoYXZpbmcgdHlwZSBkb3VibGVbXVxyXG4gIFBWYWx1ZVZlYyA9ICdwVmFsdWVWZWN0b3InLFxyXG5cclxuICAvLyBEUElfUGVyY2VudGFnZXMsIGhhdmluZyB0eXBlIGRvdWJsZVtdXHJcbiAgUGVyY2VudGFnZXMgPSAncGVyY2VudGFnZXMnLFxyXG5cclxuICAvLyBEUElfUGVyY2VudGlsZXMsIGhhdmluZyB0eXBlIGRvdWJsZVtdXHJcbiAgUGVyY2VudGlsZXMgPSAncGVyY2VudGlsZXMnLFxyXG5cclxuICAvLyBEUElfU1NFVmVjLCBoYXZpbmcgdHlwZSBkb3VibGVbXVxyXG4gIFNTRVZlYyA9ICdzdW1TcXVhcmVkRXJyb3JWZWN0b3InLFxyXG5cclxuICAvLyBEUElfU3REZXZzLCBoYXZpbmcgdHlwZSBkb3VibGVbXVxyXG4gIFN0RGV2cyA9ICdzdGRldicsXHJcblxyXG4gIC8vIERQSV9VbnNjYWxlZE1lYW5zLCBoYXZpbmcgdHlwZSBkb3VibGVbXVxyXG4gIFVuc2NhbGVkTWVhbnMgPSAndW5zY2FsZWRNZWFucycsXHJcblxyXG4gIC8vIERQSV9EZWx0YVRpbWVNcywgaGF2aW5nIHR5cGUgbG9uZ1xyXG4gIERlbHRhVGltZU1zID0gJ2RlbHRhVGltZU1zJyxcclxuXHJcbiAgLy8gRFBJX0V4dHJhY3RIaXN0b3J5Um93Q291bnQsIGhhdmluZyB0eXBlIGxvbmdcclxuICBFeHRyYWN0SGlzdG9yeVJvd0NvdW50ID0gJ2V4dHJhY3RSb3dDb3VudCcsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0SGlzdG9yeVJvd3NSZW1vdmVkLCBoYXZpbmcgdHlwZSBsb25nXHJcbiAgRXh0cmFjdEhpc3RvcnlSb3dzUmVtb3ZlZCA9ICdleHRyYWN0Um93c1JlbW92ZWQnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdHNTaXplLCBoYXZpbmcgdHlwZSBsb25nXHJcbiAgRXh0cmFjdHNTaXplID0gJ2V4dHJhY3RzU2l6ZScsXHJcblxyXG4gIC8vIERQSV9PbGRFeHRyYWN0U2l6ZSwgaGF2aW5nIHR5cGUgbG9uZ1xyXG4gIE9sZEV4dHJhY3RTaXplID0gJ29sZEV4dHJhY3RTaXplJyxcclxuXHJcbiAgLy8gRFBJX1Jvd3NJbnNlcnRlZCwgaGF2aW5nIHR5cGUgbG9uZ1xyXG4gIFJvd3NJbnNlcnRlZCA9ICdyb3dzSW5zZXJ0ZWQnLFxyXG5cclxuICAvLyBEUElfU2FtcGxlU2l6ZSwgaGF2aW5nIHR5cGUgbG9uZ1xyXG4gIFNhbXBsZVNpemUgPSAnc2FtcGxlU2l6ZScsXHJcblxyXG4gIC8vIERQSV9TYW1wbGVTcGFjZSwgaGF2aW5nIHR5cGUgbG9uZ1xyXG4gIFNhbXBsZVNwYWNlID0gJ3NhbXBsZVNwYWNlJyxcclxuXHJcbiAgLy8gRFBJX1RocmVhZFBvb2xVc2VDb3VudCwgaGF2aW5nIHR5cGUgbG9uZ1xyXG4gIFRocmVhZFBvb2xVc2VDb3VudCA9ICd0aHJlYWRQb29sVXNlQ291bnQnLFxyXG5cclxuICAvLyBEUElfQWN0aW9uSWQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEFjdGlvbklkID0gJ2FjdGlvbklkJyxcclxuXHJcbiAgLy8gRFBJX0F4aXNDb2x1bW4sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEF4aXNDb2x1bW4gPSAnYXhpc0NvbHVtbicsXHJcblxyXG4gIC8vIERQSV9CYXNlQ29sdW1uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQmFzZUNvbHVtbk5hbWUgPSAnYmFzZUNvbHVtbk5hbWUnLFxyXG5cclxuICAvLyBEUElfQnJlYWtQb2ludEZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQnJlYWtQb2ludEZpZWxkTmFtZSA9ICdicmVha1BvaW50RmllbGROYW1lJyxcclxuXHJcbiAgLy8gRFBJX1BhaXJlZEZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGFpcmVkRmllbGROYW1lID0gJ3BhaXJlZEZuJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkTmFtZUFsbG93RW1wdHksIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpZWxkTmFtZUFsbG93RW1wdHkgPSAnZmllbGROYW1lQWxsb3dFbXB0eScsXHJcblxyXG4gIC8vIERQSV9GaWVsZE5hbWVEaXNBZ2csIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpZWxkTmFtZURpc0FnZyA9ICdmbkRpc2FnZycsXHJcblxyXG4gIC8vIERQSV9GaWVsZE5hbWVMb2NhbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmllbGROYW1lTG9jYWwgPSAnZmllbGROYW1lTG9jYWwnLFxyXG5cclxuICAvLyBEUElfRmllbGROYW1lUHJldiwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmllbGROYW1lUHJldiA9ICdmblByZXYnLFxyXG5cclxuICAvLyBEUElfRmllbGROYW1lU291cmNlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWVsZE5hbWVTb3VyY2UgPSAnZm5Tb3VyY2UnLFxyXG5cclxuICAvLyBEUElfRmllbGROYW1lVGFyZ2V0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWVsZE5hbWVUYXJnZXQgPSAnZm5UYXJnZXQnLFxyXG5cclxuICAvLyBEUElfRmllbGROYW1lWCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmllbGROYW1lWCA9ICdmblgnLFxyXG5cclxuICAvLyBEUElfRmllbGROYW1lWSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRmllbGROYW1lWSA9ICdmblknLFxyXG5cclxuICAvLyBEUElfRmllbGRUb1NvcnQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEZpZWxkVG9Tb3J0ID0gJ2ZpZWxkVG9Tb3J0JyxcclxuXHJcbiAgLy8gRFBJX0dsb2JhbEZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgR2xvYmFsRmllbGROYW1lID0gJ2dsb2JhbEZpZWxkTmFtZScsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBIaWVyYXJjaHlOYW1lID0gJ2hpZXJhcmNoeU5hbWUnLFxyXG5cclxuICAvLyBEUElfSW52YWxpZEFnZ0ZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW52YWxpZEFnZ0ZpZWxkTmFtZSA9ICdpbnZhbGlkQWdnRmllbGROYW1lJyxcclxuXHJcbiAgLy8gRFBJX0ludmFsaWRGaWVsZE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEludmFsaWRGaWVsZE5hbWUgPSAnaW52YWxpZEZpZWxkTmFtZScsXHJcblxyXG4gIC8vIERQSV9MaW1pdFBhcmFtZXRlck5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIExpbWl0UGFyYW1ldGVyTmFtZSA9ICdsaW1pdFBhcmFtZXRlck5hbWUnLFxyXG5cclxuICAvLyBEUElfTG9jYWxCYXNlQ29sdW1uTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTG9jYWxCYXNlQ29sdW1uTmFtZSA9ICdsb2NhbEJhc2VDb2x1bW5OYW1lJyxcclxuXHJcbiAgLy8gRFBJX01lYXN1cmVOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNZWFzdXJlTmFtZSA9ICdtZWFzdXJlTmFtZScsXHJcblxyXG4gIC8vIERQSV9OZXN0ZWRDYWxjRmllbGQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE5lc3RlZENhbGNGaWVsZCA9ICduZXN0ZWRDYWxjRm4nLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGFyYW1ldGVyTmFtZSA9ICdwYXJhbWV0ZXJOYW1lJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZVBhcmFtLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBSZWZlcmVuY2VQYXJhbSA9ICdyZWZlcmVuY2VQYXJhbScsXHJcblxyXG4gIC8vIERQSV9SZXBsYWNlbWVudEZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmVwbGFjZW1lbnRGaWVsZE5hbWUgPSAncmVwbGFjZW1lbnRGaWVsZE5hbWUnLFxyXG5cclxuICAvLyBEUElfUkhTVGFibGVBbGlhcywgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUkhTVGFibGVBbGlhcyA9ICdyaHNUYWJsZUFsaWFzJyxcclxuXHJcbiAgLy8gRFBJX1NvcnRNZWFzdXJlTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU29ydE1lYXN1cmVOYW1lID0gJ3NvcnRNZWFzdXJlTmFtZScsXHJcblxyXG4gIC8vIERQSV9VbmlxdWVOYW1lLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBVbmlxdWVOYW1lID0gJ3VuaXF1ZU5hbWUnLFxyXG5cclxuICAvLyBEUElfVmFsdWVDb2x1bW4sIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFZhbHVlQ29sdW1uID0gJ3ZhbHVlQ29sdW1uJyxcclxuXHJcbiAgLy8gRFBJX1BhaXJlZFZhbHVlQ29sdW1uLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQYWlyZWRWYWx1ZUNvbHVtbiA9ICdwYWlyZWRWYWx1ZUNvbHVtbicsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25JZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQWN0aW9uSWRzID0gJ2FjdGlvbklkcycsXHJcblxyXG4gIC8vIERQSV9BZGRyZXNzaW5nVmFsdWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEFkZHJlc3NpbmdWYWx1ZXMgPSAnYWRkcmVzc2luZ1ZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9BbGxDb2x1bW5zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEFsbENvbHVtbnMgPSAnYWxsQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9BdFRoZUxldmVsVmFsdWVzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEF0VGhlTGV2ZWxWYWx1ZXMgPSAnYXRUaGVMZXZlbFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9BdXRvbWF0aWNEcmlsbEZpZWxkTmFtZSwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBBdXRvbWF0aWNEcmlsbEZpZWxkTmFtZSA9ICdhdXRvbWF0aWNEcmlsbEZpZWxkTmFtZScsXHJcblxyXG4gIC8vIERQSV9CbGVuZGluZ0ZpZWxkQ2FuZGlkYXRlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBCbGVuZGluZ0ZpZWxkQ2FuZGlkYXRlcyA9ICdibGVuZGluZ0ZpZWxkQ2FuZGlkYXRlcycsXHJcblxyXG4gIC8vIERQSV9Db2x1bW5zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIENvbHVtbnMgPSAnY29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9DdXJyZW50QmxlbmRpbmdGaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQ3VycmVudEJsZW5kaW5nRmllbGRzID0gJ2N1cnJlbnRCbGVuZGluZ0ZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9EaW1lbnNpb25zVG9Tb3J0LCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIERpbWVuc2lvbnNUb1NvcnQgPSAnZGltZW5zaW9uc1RvU29ydCcsXHJcblxyXG4gIC8vIERQSV9EcmlsbEZpZWxkVmVjdG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIERyaWxsRmllbGRWZWN0b3IgPSAnZHJpbGxGaWVsZFZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9FbmNvZGluZ0ZpZWxkVmVjdG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIEVuY29kaW5nRmllbGRWZWN0b3IgPSAnZW5jb2RpbmdGaWVsZFZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9GaWVsZFZlY3RvciwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBGaWVsZFZlY3RvciA9ICdmaWVsZFZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJGaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgRmlsdGVyRmllbGRzID0gJ2ZpbHRlckZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9MT0RGaWVsZFZlY3RvciwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBMT0RGaWVsZFZlY3RvciA9ICdsb2RGaWVsZFZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9MZWdlbmRDb2x1bW5zLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIExlZ2VuZENvbHVtbnMgPSAnbGVnZW5kQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9MZWdlbmROYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBMZWdlbmROYW1lcyA9ICdsZWdlbmROYW1lcycsXHJcblxyXG4gIC8vIERQSV9Ob2RlQ29sdW1ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBOb2RlQ29sdW1ucyA9ICdub2RlQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9QYWdlRmllbGRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFBhZ2VGaWVsZHMgPSAncGFnZUZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9QYXJhbVZhbHVlcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBQYXJhbVZhbHVlcyA9ICdwYXJhbVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9SZWZMaW5lRmllbGRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFJlZkxpbmVGaWVsZHMgPSAncmVmbGluZUZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9SZWZlcmVuY2VkQ29sdW1ucywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBSZWZlcmVuY2VkQ29sdW1ucyA9ICdyZWZlcmVuY2VkQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9SZWxhdGVkRmllbGROYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBSZWxhdGVkRmllbGROYW1lcyA9ICdyZWxhdGVkRmllbGROYW1lcycsXHJcblxyXG4gIC8vIERQSV9SZW1vdmVBY3Rpb25SZXN1bHRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFJlbW92ZUFjdGlvblJlc3VsdHMgPSAncmVtb3ZlQWN0aW9uUmVzdWx0cycsXHJcblxyXG4gIC8vIERQSV9SZXNwb25zZVZlY3RvciwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBSZXNwb25zZVZlY3RvciA9ICdyZXNwb25zZVZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9SZXN0YXJ0RXZlcnlWYWx1ZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVzdGFydEV2ZXJ5VmFsdWVzID0gJ3Jlc3RhcnRFdmVyeVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9SZXN1bHRGaWVsZHMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgUmVzdWx0RmllbGRzID0gJ3Jlc3VsdEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9Tb3J0RmllbGRWYWx1ZXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgU29ydEZpZWxkVmFsdWVzID0gJ3NvcnRGaWVsZFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9VbmlxdWVGaWVsZFZlY3RvciwgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBVbmlxdWVGaWVsZFZlY3RvciA9ICd1bmlxdWVGaWVsZFZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9YRmllbGRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFhGaWVsZHMgPSAneEZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9ZRmllbGRzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIFlGaWVsZHMgPSAneUZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uRnVsbE5hbWUsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbm5lY3Rpb25GdWxsTmFtZSA9ICdjb25uZWN0aW9uRnVsbE5hbWUnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkZ1bGxOYW1lcywgaGF2aW5nIHR5cGUgc3RyaW5nW11cclxuICBDb25uZWN0aW9uRnVsbE5hbWVzID0gJ2Nvbm5lY3Rpb25GdWxsTmFtZXMnLFxyXG5cclxuICAvLyBEUElfQW5jaG9yVmFsdWUsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIEFuY2hvclZhbHVlID0gJ2FuY2hvclZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX0JvdW5kRGF0YVZhbHVlLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBCb3VuZERhdGFWYWx1ZSA9ICdib3VuZERhdGFWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9EYXRhVmFsdWUsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIERhdGFWYWx1ZSA9ICdkYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfRGF0YVZhbHVlSW5jcmVtZW50LCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBEYXRhVmFsdWVJbmNyZW1lbnQgPSAnZGF0YVZhbHVlSW5jcmVtZW50JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFWYWx1ZUxvd2VyWCwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgRGF0YVZhbHVlTG93ZXJYID0gJ2RhdGFWYWx1ZUxvd2VyWCcsXHJcblxyXG4gIC8vIERQSV9EYXRhVmFsdWVMb3dlclksIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIERhdGFWYWx1ZUxvd2VyWSA9ICdkYXRhVmFsdWVMb3dlclknLFxyXG5cclxuICAvLyBEUElfRGF0YVZhbHVlVXBwZXJYLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBEYXRhVmFsdWVVcHBlclggPSAnZGF0YVZhbHVlVXBwZXJYJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFWYWx1ZVVwcGVyWSwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgRGF0YVZhbHVlVXBwZXJZID0gJ2RhdGFWYWx1ZVVwcGVyWScsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0RGF0YVZhbHVlLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBEZWZhdWx0RGF0YVZhbHVlID0gJ2RlZmF1bHREYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfRWZmZWN0aXZlU3RhcnREYXRlLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBFZmZlY3RpdmVTdGFydERhdGUgPSAnZWZmZWN0aXZlU3RhcnREYXRlJyxcclxuXHJcbiAgLy8gRFBJX0VmZmVjdGl2ZUVuZERhdGUsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIEVmZmVjdGl2ZUVuZERhdGUgPSAnZWZmZWN0aXZlRW5kRGF0ZScsXHJcblxyXG4gIC8vIERQSV9NYXhEYXRhVmFsdWUsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIE1heERhdGFWYWx1ZSA9ICdtYXhEYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfTWluRGF0YVZhbHVlLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBNaW5EYXRhVmFsdWUgPSAnbWluRGF0YVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1ZhbGlkYXRlZERhdGFWYWx1ZSwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgVmFsaWRhdGVkRGF0YVZhbHVlID0gJ3ZhbGlkYXRlZERhdGFWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9CaW5TaXplLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBCaW5TaXplID0gJ2JpblNpemUnLFxyXG5cclxuICAvLyBEUElfTGltaXRDb3VudCwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgTGltaXRDb3VudCA9ICdsaW1pdENvdW50JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFWYWx1ZUxpc3QsIGhhdmluZyB0eXBlIG9iamVjdFtdXHJcbiAgRGF0YVZhbHVlTGlzdCA9ICdkYXRhVmFsdWVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkRGlzcGxheUl0ZW0sIGhhdmluZyB0eXBlIEZpZWxkRGlzcGxheUl0ZW1QcmVzTW9kZWxcclxuICBGaWVsZERpc3BsYXlJdGVtID0gJ2ZpZWxkRGlzcGxheUl0ZW0nLFxyXG5cclxuICAvLyBEUElfRmllbGREaXNwbGF5TGlzdCwgaGF2aW5nIHR5cGUgRmllbGREaXNwbGF5SXRlbVByZXNNb2RlbFtdXHJcbiAgRmllbGREaXNwbGF5TGlzdCA9ICdmaWVsZERpc3BsYXlMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkQ2FwdGlvblBhaXIsIGhhdmluZyB0eXBlIEZpZWxkQ2FwdGlvblBhaXJQcmVzTW9kZWxcclxuICBGaWVsZENhcHRpb25QYWlyID0gJ2ZpZWxkQ2FwdGlvblBhaXInLFxyXG5cclxuICAvLyBEUElfRmllbGRDYXB0aW9uUGFpcnMsIGhhdmluZyB0eXBlIEZpZWxkQ2FwdGlvblBhaXJQcmVzTW9kZWxbXVxyXG4gIEZpZWxkQ2FwdGlvblBhaXJzID0gJ2ZpZWxkQ2FwdGlvblBhaXJzJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlckNhcHRpb25QYWlycywgaGF2aW5nIHR5cGUgRmllbGRDYXB0aW9uUGFpclByZXNNb2RlbFtdXHJcbiAgUGFyYW1ldGVyQ2FwdGlvblBhaXJzID0gJ3BhcmFtZXRlckNhcHRpb25QYWlycycsXHJcblxyXG4gIC8vIERQSV9WYXJ5aW5nQXR0cmlidXRlRGltZW5zaW9ucywgaGF2aW5nIHR5cGUgRmllbGRDYXB0aW9uUGFpclByZXNNb2RlbFtdXHJcbiAgVmFyeWluZ0F0dHJpYnV0ZURpbWVuc2lvbnMgPSAndmFyeWluZ0F0dHJpYnV0ZURpbWVuc2lvbnMnLFxyXG5cclxuICAvLyBEUElfRmllbGRDYXB0aW9uUGFpclN0YXRlLCBoYXZpbmcgdHlwZSBGaWVsZENhcHRpb25QYWlyU3RhdGVQcmVzTW9kZWxcclxuICBGaWVsZENhcHRpb25QYWlyU3RhdGUgPSAnZmllbGRDYXB0aW9uUGFpclN0YXRlJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkQ2FwdGlvblBhaXJTdGF0ZXMsIGhhdmluZyB0eXBlIEZpZWxkQ2FwdGlvblBhaXJTdGF0ZVByZXNNb2RlbFtdXHJcbiAgRmllbGRDYXB0aW9uUGFpclN0YXRlcyA9ICdmaWVsZENhcHRpb25QYWlyU3RhdGVzJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFzb3VyY2VDYXB0aW9uUGFpciwgaGF2aW5nIHR5cGUgRGF0YXNvdXJjZUNhcHRpb25QYWlyUHJlc01vZGVsXHJcbiAgRGF0YXNvdXJjZUNhcHRpb25QYWlyID0gJ2RhdGFzb3VyY2VDYXB0aW9uUGFpcicsXHJcblxyXG4gIC8vIERQSV9EYXRhc291cmNlQ2FwdGlvblBhaXJzLCBoYXZpbmcgdHlwZSBEYXRhc291cmNlQ2FwdGlvblBhaXJQcmVzTW9kZWxbXVxyXG4gIERhdGFzb3VyY2VDYXB0aW9uUGFpcnMgPSAnZGF0YXNvdXJjZUNhcHRpb25QYWlycycsXHJcblxyXG4gIC8vIERQSV9TaGVldE5hbWVJbmZvUGFpciwgaGF2aW5nIHR5cGUgU2hlZXROYW1lSW5mb1BhaXJQcmVzTW9kZWxcclxuICBTaGVldE5hbWVJbmZvUGFpciA9ICdzaGVldE5hbWVJbmZvUGFpcicsXHJcblxyXG4gIC8vIERQSV9TaGVldE5hbWVJbmZvUGFpcnMsIGhhdmluZyB0eXBlIFNoZWV0TmFtZUluZm9QYWlyUHJlc01vZGVsW11cclxuICBTaGVldE5hbWVJbmZvUGFpcnMgPSAnc2hlZXROYW1lSW5mb1BhaXJzJyxcclxuXHJcbiAgLy8gRFBJX0JHQWN0aXZlQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEJHQWN0aXZlQ29sb3IgPSAnYmdBY3RpdmVDb2xvcicsXHJcblxyXG4gIC8vIERQSV9CR0NvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCR0NvbG9yID0gJ2JnQ29sb3InLFxyXG5cclxuICAvLyBEUElfQkdSZXN0Q29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEJHUmVzdENvbG9yID0gJ2JnUmVzdENvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlckNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCb3JkZXJDb2xvciA9ICdib3JkZXJDb2xvcicsXHJcblxyXG4gIC8vIERQSV9Cb3JkZXJDb2xvckJvdHRvbSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQm9yZGVyQ29sb3JCb3R0b20gPSAnYm9yZGVyQ29sb3JCb3R0b20nLFxyXG5cclxuICAvLyBEUElfQm9yZGVyQ29sb3JMZWZ0LCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCb3JkZXJDb2xvckxlZnQgPSAnYm9yZGVyQ29sb3JMZWZ0JyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlckNvbG9yUmlnaHQsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEJvcmRlckNvbG9yUmlnaHQgPSAnYm9yZGVyQ29sb3JSaWdodCcsXHJcblxyXG4gIC8vIERQSV9Cb3JkZXJDb2xvclRvcCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgQm9yZGVyQ29sb3JUb3AgPSAnYm9yZGVyQ29sb3JUb3AnLFxyXG5cclxuICAvLyBEUElfQnV0dG9uT2JqZWN0QmFja2dyb3VuZENvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBCdXR0b25PYmplY3RCYWNrZ3JvdW5kQ29sb3IgPSAnYnV0dG9uT2JqZWN0QmFja2dyb3VuZENvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb2xvciA9ICdjb2xvcicsXHJcblxyXG4gIC8vIERQSV9Db2xvcjEsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIENvbG9yMSA9ICdjb2xvcjEnLFxyXG5cclxuICAvLyBEUElfQ29sb3IyLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBDb2xvcjIgPSAnY29sb3IyJyxcclxuXHJcbiAgLy8gRFBJX0RlZmF1bHRDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGVmYXVsdENvbG9yID0gJ2RlZmF1bHRDb2xvcicsXHJcblxyXG4gIC8vIERQSV9EaXN0YW5jZUZvbnRDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRGlzdGFuY2VGb250Q29sb3IgPSAnZGlzdGFuY2VGb250Q29sb3InLFxyXG5cclxuICAvLyBEUElfRmlsbENvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGaWxsQ29sb3IgPSAnZmlsbENvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0ZvZ0NvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBGb2dDb2xvciA9ICdmb2dDb2xvcicsXHJcblxyXG4gIC8vIERQSV9IZWFkZXJDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSGVhZGVyQ29sb3IgPSAnaGVhZGVyQ29sb3InLFxyXG5cclxuICAvLyBEUElfSGlnaGxpZ2h0QkdDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSGlnaGxpZ2h0QkdDb2xvciA9ICdoaWdobGlnaHRCZ0NvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0hpZ2hsaWdodFRleHRDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSGlnaGxpZ2h0VGV4dENvbG9yID0gJ2hpZ2hsaWdodFRleHRDb2xvcicsXHJcblxyXG4gIC8vIERQSV9Ib3ZlckNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBIb3ZlckNvbG9yID0gJ2hvdmVyQ29sb3InLFxyXG5cclxuICAvLyBEUElfSHlwZXJsaW5rQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIEh5cGVybGlua0NvbG9yID0gJ2h5cGVybGlua0NvbG9yJyxcclxuXHJcbiAgLy8gRFBJX01hcEF0dHJpYnV0aW9uRmlsbCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwQXR0cmlidXRpb25GaWxsID0gJ21hcEF0dHJpYnV0aW9uRmlsbCcsXHJcblxyXG4gIC8vIERQSV9NYXBBdHRyaWJ1dGlvblRleHRDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFwQXR0cmlidXRpb25UZXh0Q29sb3IgPSAnbWFwQXR0cmlidXRpb25UZXh0Q29sb3InLFxyXG5cclxuICAvLyBEUElfTWFwUGFuZUJhY2tncm91bmRGaWxsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBQYW5lQmFja2dyb3VuZEZpbGwgPSAnbWFwUGFuZUJhY2tncm91bmRGaWxsJyxcclxuXHJcbiAgLy8gRFBJX01hcFNjYWxlQm9yZGVyQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE1hcFNjYWxlQm9yZGVyQ29sb3IgPSAnbWFwU2NhbGVCb3JkZXJDb2xvcicsXHJcblxyXG4gIC8vIERQSV9NYXBTY2FsZUNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBTY2FsZUNvbG9yID0gJ21hcFNjYWxlQ29sb3InLFxyXG5cclxuICAvLyBEUElfTWFwV2FpdFRpbGVGaWxsLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBNYXBXYWl0VGlsZUZpbGwgPSAnbWFwV2FpdFRpbGVGaWxsJyxcclxuXHJcbiAgLy8gRFBJX01hcmtDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTWFya0NvbG9yID0gJ21hcmtDb2xvcicsXHJcblxyXG4gIC8vIERQSV9OYXZBcnJvd0Rpc2FibGVkQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIE5hdkFycm93RGlzYWJsZWRDb2xvciA9ICduYXZBcnJvd0Rpc2FibGVkQ29sb3InLFxyXG5cclxuICAvLyBEUElfTmF2QXJyb3dIb3ZlckNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOYXZBcnJvd0hvdmVyQ29sb3IgPSAnbmF2QXJyb3dIb3ZlckNvbG9yJyxcclxuXHJcbiAgLy8gRFBJX05hdkFycm93SWRsZUNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBOYXZBcnJvd0lkbGVDb2xvciA9ICduYXZBcnJvd0lkbGVDb2xvcicsXHJcblxyXG4gIC8vIERQSV9OYXZBcnJvd1ByZXNzZWRDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgTmF2QXJyb3dQcmVzc2VkQ29sb3IgPSAnbmF2QXJyb3dQcmVzc2VkQ29sb3InLFxyXG5cclxuICAvLyBEUElfUGFuZUNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBQYW5lQ29sb3IgPSAncGFuZUNvbG9yJyxcclxuXHJcbiAgLy8gRFBJX1ByZXNzQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFByZXNzQ29sb3IgPSAncHJlc3NDb2xvcicsXHJcblxyXG4gIC8vIERQSV9SZXNpemVCb3JkZXJDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUmVzaXplQm9yZGVyQ29sb3IgPSAncmVzaXplQm9yZGVyQ29sb3InLFxyXG5cclxuICAvLyBEUElfU2VsZWN0QkdDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2VsZWN0QkdDb2xvciA9ICdzZWxlY3RCZ0NvbG9yJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGlvblRleHRDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgU2VsZWN0aW9uVGV4dENvbG9yID0gJ3NlbGVjdGlvblRleHRDb2xvcicsXHJcblxyXG4gIC8vIERQSV9Td2F0Y2hCYWNrZ3JvdW5kQ29sb3IsIGhhdmluZyB0eXBlIHN0cmluZ1xyXG4gIFN3YXRjaEJhY2tncm91bmRDb2xvciA9ICdzd2F0Y2hCZ0NvbG9yJyxcclxuXHJcbiAgLy8gRFBJX1N3YXRjaEJvcmRlckNvbG9yLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBTd2F0Y2hCb3JkZXJDb2xvciA9ICdzd2F0Y2hCb3JkZXJDb2xvcicsXHJcblxyXG4gIC8vIERQSV9UYWJDb2xvciwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgVGFiQ29sb3IgPSAndGFiQ29sb3InLFxyXG5cclxuICAvLyBEUElfQ29sb3JzLCBoYXZpbmcgdHlwZSBzdHJpbmdbXVxyXG4gIENvbG9ycyA9ICdjb2xvcnMnLFxyXG5cclxuICAvLyBEUElfQ29sb3JNYXAsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2Ygc3RyaW5nKVxyXG4gIENvbG9yTWFwID0gJ2NvbG9yTWFwJyxcclxuXHJcbiAgLy8gRFBJX1BpeG1hcCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgUGl4bWFwID0gJ3BpeG1hcCcsXHJcblxyXG4gIC8vIERQSV9JbWFnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSW1hZ2UgPSAnaW1hZ2UnLFxyXG5cclxuICAvLyBEUElfT3ZlcmxheUltYWdlLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBPdmVybGF5SW1hZ2UgPSAnb3ZlcmxheUltYWdlJyxcclxuXHJcbiAgLy8gRFBJX0ljb25JbWFnZSwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgSWNvbkltYWdlID0gJ2ljb25JbWFnZScsXHJcblxyXG4gIC8vIERQSV9JbWFnZUxpc3QsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgSW1hZ2VMaXN0ID0gJ2ltYWdlTGlzdCcsXHJcblxyXG4gIC8vIERQSV9JbWFnZU1hcCwgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBzdHJpbmcpXHJcbiAgSW1hZ2VNYXAgPSAnaW1hZ2VNYXAnLFxyXG5cclxuICAvLyBEUElfVVVJRCwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgVVVJRCA9ICd1dWlkJyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZE9iamVjdEhhbmRsZSwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgRGFzaGJvYXJkT2JqZWN0SGFuZGxlID0gJ2Rhc2hib2FyZE9iamVjdEhhbmRsZScsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRPYmplY3ROZXdTdGF0ZUhhbmRsZSwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgRGFzaGJvYXJkT2JqZWN0TmV3U3RhdGVIYW5kbGUgPSAnZGFzaGJvYXJkT2JqZWN0TmV3U3RhdGVIYW5kbGUnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkT2JqZWN0Q3VycmVudFN0YXRlSGFuZGxlLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBEYXNoYm9hcmRPYmplY3RDdXJyZW50U3RhdGVIYW5kbGUgPSAnZGFzaGJvYXJkT2JqZWN0Q3VycmVudFN0YXRlSGFuZGxlJyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZE9iamVjdEJhdGNoSUQsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIERhc2hib2FyZE9iamVjdEJhdGNoSUQgPSAnZGFzaGJvYXJkT2JqZWN0QmF0Y2hJZCcsXHJcblxyXG4gIC8vIERQSV9OYW5vc2Vjb25kcywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgTmFub3NlY29uZHMgPSAnbmFub3NlY29uZHMnLFxyXG5cclxuICAvLyBEUElfTWljcm9zZWNvbmRzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBNaWNyb3NlY29uZHMgPSAnbWljcm9zZWNvbmRzJyxcclxuXHJcbiAgLy8gRFBJX01pbGxpc2Vjb25kcywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgTWlsbGlzZWNvbmRzID0gJ21pbGxpc2Vjb25kcycsXHJcblxyXG4gIC8vIERQSV9UaW1lb3V0UywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgVGltZW91dFMgPSAndGltZW91dFMnLFxyXG5cclxuICAvLyBEUElfTWludXRlcywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgTWludXRlcyA9ICdtaW51dGVzJyxcclxuXHJcbiAgLy8gRFBJX0hvdXJzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBIb3VycyA9ICdob3VycycsXHJcblxyXG4gIC8vIERQSV9DYXJkVHlwZSwgaGF2aW5nIHR5cGUgQ2FyZFR5cGVcclxuICBDYXJkVHlwZSA9ICdjYXJkVHlwZScsXHJcblxyXG4gIC8vIERQSV9Eb2NQYXJhbWV0ZXJJRCwgaGF2aW5nIHR5cGUgc3RyaW5nXHJcbiAgRG9jUGFyYW1ldGVySUQgPSAndHlwZScsXHJcblxyXG4gIC8vIERQSV9Bcmd1bWVudFBhcmFtLCBoYXZpbmcgdHlwZSBzdHJpbmdcclxuICBBcmd1bWVudFBhcmFtID0gJ2FyZ3VtZW50UGFyYW0nLFxyXG5cclxuICAvLyBEUElfQXJndW1lbnRQYXJhbXMsIGhhdmluZyB0eXBlIHN0cmluZ1tdXHJcbiAgQXJndW1lbnRQYXJhbXMgPSAnYXJndW1lbnRQYXJhbXMnLFxyXG5cclxuICAvLyBEUElfQWN0aW9uVHlwZSwgaGF2aW5nIHR5cGUgQWN0aW9uVHlwZVxyXG4gIEFjdGlvblR5cGUgPSAnYWN0aW9uVHlwZScsXHJcblxyXG4gIC8vIERQSV9Bbm5vdGF0ZUVudW0sIGhhdmluZyB0eXBlIEFubm90YXRlRW51bVxyXG4gIEFubm90YXRlRW51bSA9ICdhbm5vdGF0ZUVudW0nLFxyXG5cclxuICAvLyBEUElfSm9pblR5cGUsIGhhdmluZyB0eXBlIFNRTEpvaW5UeXBlXHJcbiAgSm9pblR5cGUgPSAnam9pblR5cGUnLFxyXG5cclxuICAvLyBEUElfU3VwcG9ydGVkSm9pblR5cGVzLCBoYXZpbmcgdHlwZSBTUUxKb2luVHlwZVtdXHJcbiAgU3VwcG9ydGVkSm9pblR5cGVzID0gJ3N1cHBvcnRlZEpvaW5UeXBlcycsXHJcblxyXG4gIC8vIERQSV9Sb3VuZGluZywgaGF2aW5nIHR5cGUgUm91bmRpbmdcclxuICBSb3VuZGluZyA9ICdyb3VuZGluZ0VudW0nLFxyXG5cclxuICAvLyBEUElfQm9keVR5cGUsIGhhdmluZyB0eXBlIEJvZHlUeXBlXHJcbiAgQm9keVR5cGUgPSAnYm9keVR5cGUnLFxyXG5cclxuICAvLyBEUElfTGluZUVuZCwgaGF2aW5nIHR5cGUgTGluZUVuZFxyXG4gIExpbmVFbmQgPSAnbGluZUVuZEVudW0nLFxyXG5cclxuICAvLyBEUElfTGluZUVuZFNpemUsIGhhdmluZyB0eXBlIExpbmVFbmRTaXplXHJcbiAgTGluZUVuZFNpemUgPSAnbGluZUVuZFNpemVFbnVtJyxcclxuXHJcbiAgLy8gRFBJX0JydXNoU3BlY2lhbEZpZWxkcywgaGF2aW5nIHR5cGUgQnJ1c2hTcGVjaWFsRmllbGRzXHJcbiAgQnJ1c2hTcGVjaWFsRmllbGRzID0gJ3NwZWNpYWxGaWVsZHMnLFxyXG5cclxuICAvLyBEUElfQ2VsbFNpemVDaGFuZ2UsIGhhdmluZyB0eXBlIENlbGxTaXplQ2hhbmdlXHJcbiAgQ2VsbFNpemVDaGFuZ2UgPSAnY2VsbFNpemVDaGFuZ2UnLFxyXG5cclxuICAvLyBEUElfQ2VsbFR5cGUsIGhhdmluZyB0eXBlIENlbGxUeXBlXHJcbiAgQ2VsbFR5cGUgPSAnY2VsbFR5cGUnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkF0dGVtcHRSZXN1bHQsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25BdHRlbXB0UmVzdWx0XHJcbiAgQ29ubmVjdGlvbkF0dGVtcHRSZXN1bHQgPSAnY29ubmVjdGlvbkF0dGVtcHRSZXN1bHQnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkVycm9yU3RhZ2UsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25FcnJvclN0YWdlXHJcbiAgQ29ubmVjdGlvbkVycm9yU3RhZ2UgPSAnY29ubmVjdGlvbkVycm9yU3RhZ2UnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkVycm9yVHlwZSwgaGF2aW5nIHR5cGUgQ29ubmVjdGlvbkVycm9yVHlwZVxyXG4gIENvbm5lY3Rpb25FcnJvclR5cGUgPSAnY29ubmVjdGlvbkVycm9yVHlwZScsXHJcblxyXG4gIC8vIERQSV9EYXRhU2VydmVyQ29ubmVjdGlvblJlc3VsdCwgaGF2aW5nIHR5cGUgRGF0YVNlcnZlckNvbm5lY3Rpb25SZXN1bHRcclxuICBEYXRhU2VydmVyQ29ubmVjdGlvblJlc3VsdCA9ICdkc0Nvbm5lY3Rpb25SZXN1bHQnLFxyXG5cclxuICAvLyBEUElfRHJvcFdoZW4sIGhhdmluZyB0eXBlIERyb3BXaGVuXHJcbiAgRHJvcFdoZW4gPSAnZHJvcFdoZW4nLFxyXG5cclxuICAvLyBEUElfRHJvcFR5cGUsIGhhdmluZyB0eXBlIERyb3BGaWVsZFJlc3VsdFxyXG4gIERyb3BUeXBlID0gJ2Ryb3BUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0VuY29kaW5nVHlwZSwgaGF2aW5nIHR5cGUgRW5jb2RpbmdUeXBlXHJcbiAgRW5jb2RpbmdUeXBlID0gJ2VuY29kaW5nVHlwZScsXHJcblxyXG4gIC8vIERQSV9Ecm9wZG93bkVuY29kaW5nVHlwZSwgaGF2aW5nIHR5cGUgRW5jb2RpbmdUeXBlXHJcbiAgRHJvcGRvd25FbmNvZGluZ1R5cGUgPSAnZHJvcGRvd25FbmNvZGluZ1R5cGUnLFxyXG5cclxuICAvLyBEUElfRW5jb2RpbmdUeXBlcywgaGF2aW5nIHR5cGUgRW5jb2RpbmdUeXBlW11cclxuICBFbmNvZGluZ1R5cGVzID0gJ2VuY29kaW5nVHlwZXMnLFxyXG5cclxuICAvLyBEUElfRmllbGRPcmRlclR5cGUsIGhhdmluZyB0eXBlIEZpZWxkT3JkZXJUeXBlXHJcbiAgRmllbGRPcmRlclR5cGUgPSAnZmllbGRPcmRlclR5cGUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVySWNvblR5cGUsIGhhdmluZyB0eXBlIEZpbHRlckljb25UeXBlXHJcbiAgRmlsdGVySWNvblR5cGUgPSAnZmlsdGVySWNvblR5cGUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVySWNvblR5cGVzLCBoYXZpbmcgdHlwZSBGaWx0ZXJJY29uVHlwZVtdXHJcbiAgRmlsdGVySWNvblR5cGVzID0gJ2ZpbHRlckljb25UeXBlcycsXHJcblxyXG4gIC8vIERQSV9GbG9hdGluZ1Rvb2xiYXJWaXMsIGhhdmluZyB0eXBlIEZsb2F0aW5nVG9vbGJhclZpc2liaWxpdHlcclxuICBGbG9hdGluZ1Rvb2xiYXJWaXMgPSAndG9vbGJhclZpc2liaWxpdHknLFxyXG5cclxuICAvLyBEUElfRm9sZGVyUm9sZSwgaGF2aW5nIHR5cGUgRm9sZGVyUm9sZVxyXG4gIEZvbGRlclJvbGUgPSAnZm9sZGVyUm9sZScsXHJcblxyXG4gIC8vIERQSV9MZWdlbmRUeXBlLCBoYXZpbmcgdHlwZSBFbnVtXHJcbiAgTGVnZW5kVHlwZSA9ICdsZWdlbmRUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0TW9kZWxUeXBlLCBoYXZpbmcgdHlwZSBGb3JlY2FzdE1vZGVsVHlwZVxyXG4gIEZvcmVjYXN0TW9kZWxUeXBlID0gJ2ZvcmVjYXN0TW9kZWxUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ZvcmVjYXN0VHJlbmRUeXBlLCBoYXZpbmcgdHlwZSBGb3JlY2FzdENvbXBvbmVudFR5cGVcclxuICBGb3JlY2FzdFRyZW5kVHlwZSA9ICdmb3JlY2FzdFRyZW5kVHlwZScsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdFNlYXNvblR5cGUsIGhhdmluZyB0eXBlIEZvcmVjYXN0Q29tcG9uZW50VHlwZVxyXG4gIEZvcmVjYXN0U2Vhc29uVHlwZSA9ICdmb3JlY2FzdFNlYXNvblR5cGUnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RSYW5nZVR5cGUsIGhhdmluZyB0eXBlIEZvcmVjYXN0UmFuZ2VUeXBlXHJcbiAgRm9yZWNhc3RSYW5nZVR5cGUgPSAnZm9yZWNhc3RSYW5nZVR5cGUnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3RTdGF0dXMsIGhhdmluZyB0eXBlIEZvcmVjYXN0U3RhdHVzXHJcbiAgRm9yZWNhc3RTdGF0dXMgPSAnZm9yZWNhc3RTdGF0dXMnLFxyXG5cclxuICAvLyBEUElfU2hlZXRGb3JlY2FzdFN0YXR1cywgaGF2aW5nIHR5cGUgRm9yZWNhc3RTdGF0dXNcclxuICBTaGVldEZvcmVjYXN0U3RhdHVzID0gJ3NoZWV0Rm9yZWNhc3RTdGF0dXMnLFxyXG5cclxuICAvLyBEUElfUERGb3JlY2FzdFN0YXR1c0xpc3QsIGhhdmluZyB0eXBlIEZvcmVjYXN0U3RhdHVzW11cclxuICBQREZvcmVjYXN0U3RhdHVzTGlzdCA9ICdwYW5lRGVzY3JpcHRvckZvcmVjYXN0U3RhdHVzTGlzdCcsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdENvbHVtblR5cGUsIGhhdmluZyB0eXBlIEZvcmVjYXN0Q29sdW1uVHlwZVxyXG4gIEZvcmVjYXN0Q29sdW1uVHlwZSA9ICdmb3JlY2FzdENvbHVtblR5cGUnLFxyXG5cclxuICAvLyBEUElfRGF0YVNjYWxpbmcsIGhhdmluZyB0eXBlIERhdGFTY2FsaW5nXHJcbiAgRGF0YVNjYWxpbmcgPSAnZGF0YVNjYWxpbmcnLFxyXG5cclxuICAvLyBEUElfR2V0RmlsdGVySXRlbXNKc29uUmVzcG9uc2UsIGhhdmluZyB0eXBlIEdldEpzb25SZXNwb25zZUVudW1cclxuICBHZXRGaWx0ZXJJdGVtc0pzb25SZXNwb25zZSA9ICdnZXRGaWx0ZXJJdGVtc0pzb25SZXNwb25zZScsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJTZWFyY2hKc29uUmVzcG9uc2UsIGhhdmluZyB0eXBlIEdldEpzb25SZXNwb25zZUVudW1cclxuICBGaWx0ZXJTZWFyY2hKc29uUmVzcG9uc2UgPSAnZmlsdGVyU2VhcmNoSnNvblJlc3BvbnNlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclNlYXJjaFdpdGhJbmRleEpzb25SZXNwb25zZSwgaGF2aW5nIHR5cGUgR2V0SnNvblJlc3BvbnNlRW51bVxyXG4gIEZpbHRlclNlYXJjaFdpdGhJbmRleEpzb25SZXNwb25zZSA9ICdmaWx0ZXJTZWFyY2hXaXRoSW5kZXhKc29uUmVzcG9uc2UnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyU2hvd0NoaWxkcmVuSnNvblJlc3BvbnNlLCBoYXZpbmcgdHlwZSBHZXRKc29uUmVzcG9uc2VFbnVtXHJcbiAgRmlsdGVyU2hvd0NoaWxkcmVuSnNvblJlc3BvbnNlID0gJ2ZpbHRlclNob3dDaGlsZHJlbkpzb25SZXNwb25zZScsXHJcblxyXG4gIC8vIERQSV9IQWxpZ25tZW50LCBoYXZpbmcgdHlwZSBMYWJlbEhBbGlnbm1lbnRcclxuICBIQWxpZ25tZW50ID0gJ2hvcml6b250YWxMYWJlbEFsaWdubWVudCcsXHJcblxyXG4gIC8vIERQSV9Kb2luVmFsaWRhdGlvbkVycm9yLCBoYXZpbmcgdHlwZSBKb2luVmFsaWRhdGlvbkVycm9yXHJcbiAgSm9pblZhbGlkYXRpb25FcnJvciA9ICdqb2luVmFsaWRhdGlvbkVycm9yJyxcclxuXHJcbiAgLy8gRFBJX05hbWVDb25mbGljdFJlc29sdXRpb24sIGhhdmluZyB0eXBlIE5hbWVDb25mbGljdFJlc29sdXRpb25cclxuICBOYW1lQ29uZmxpY3RSZXNvbHV0aW9uID0gJ25hbWVDb25mbGljdFJlc29sdXRpb24nLFxyXG5cclxuICAvLyBEUElfTGFiZWxEaXIsIGhhdmluZyB0eXBlIFRleHRPcmllbnRcclxuICBMYWJlbERpciA9ICdsYWJlbERpcmVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9MYWJlbEFsaWduLCBoYXZpbmcgdHlwZSBUZXh0QWxpZ25cclxuICBMYWJlbEFsaWduID0gJ2xhYmVsQWxpZ25tZW50JyxcclxuXHJcbiAgLy8gRFBJX0xhYmVsV3JhcCwgaGF2aW5nIHR5cGUgVGV4dFdyYXBNb2RlXHJcbiAgTGFiZWxXcmFwID0gJ2xhYmVsV3JhcCcsXHJcblxyXG4gIC8vIERQSV9XcmFwTW9kZSwgaGF2aW5nIHR5cGUgVGV4dFdyYXBNb2RlXHJcbiAgV3JhcE1vZGUgPSAnd3JhcE1vZGUnLFxyXG5cclxuICAvLyBEUElfTWFya0VudW0sIGhhdmluZyB0eXBlIE1hcmtFbnVtXHJcbiAgTWFya0VudW0gPSAnbWFya0VudW0nLFxyXG5cclxuICAvLyBEUElfUGVyY2VudE1vZGUsIGhhdmluZyB0eXBlIFBlcmNlbnRNb2RlXHJcbiAgUGVyY2VudE1vZGUgPSAncGVyY2VudGFnZU1vZGUnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlT3B0aW9uc1NldCwgaGF2aW5nIHR5cGUgUmVmZXJlbmNlT3B0aW9uc1NldFxyXG4gIFJlZmVyZW5jZU9wdGlvbnNTZXQgPSAncmVmZXJlbmNlT3B0aW9uc1NldCcsXHJcblxyXG4gIC8vIERQSV9SZWZlcmVuY2VPcHRpb25zU2V0cywgaGF2aW5nIHR5cGUgUmVmZXJlbmNlT3B0aW9uc1NldFtdXHJcbiAgUmVmZXJlbmNlT3B0aW9uc1NldHMgPSAncmVmZXJlbmNlT3B0aW9uc1NldHMnLFxyXG5cclxuICAvLyBEUElfUmFua1R5cGUsIGhhdmluZyB0eXBlIFJhbmtUeXBlXHJcbiAgUmFua1R5cGUgPSAncmFua1R5cGUnLFxyXG5cclxuICAvLyBEUElfUmFua1R5cGVWYWx1ZXMsIGhhdmluZyB0eXBlIFJhbmtUeXBlW11cclxuICBSYW5rVHlwZVZhbHVlcyA9ICdyYW5rVHlwZVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9TcGVjaWFsVmFsdWVzTW9kZSwgaGF2aW5nIHR5cGUgU3BlY2lhbFZhbHVlc01vZGVcclxuICBTcGVjaWFsVmFsdWVzTW9kZSA9ICdzcGVjaWFsVmFsdWVzTW9kZScsXHJcblxyXG4gIC8vIERQSV9WQWxpZ25tZW50LCBoYXZpbmcgdHlwZSBMYWJlbFZBbGlnbm1lbnRcclxuICBWQWxpZ25tZW50ID0gJ3ZlcnRpY2FsTGFiZWxBbGlnbm1lbnQnLFxyXG5cclxuICAvLyBEUElfQ29sb3JNb2RlLCBoYXZpbmcgdHlwZSBDb2xvck1vZGVcclxuICBDb2xvck1vZGUgPSAnY29sb3JNb2RlJyxcclxuXHJcbiAgLy8gRFBJX01hcmtMYWJlbHNNb2RlLCBoYXZpbmcgdHlwZSBNYXJrTGFiZWxzTW9kZVxyXG4gIE1hcmtMYWJlbHNNb2RlID0gJ21hcmtMYWJlbHNNb2RlJyxcclxuXHJcbiAgLy8gRFBJX01hcmtMYWJlbHNTY29wZSwgaGF2aW5nIHR5cGUgTWFya0xhYmVsc1Njb3BlXHJcbiAgTWFya0xhYmVsc1Njb3BlID0gJ21hcmtMYWJlbHNTY29wZScsXHJcblxyXG4gIC8vIERQSV9NYXJrTGFiZWxzVmlzaWJpbGl0eSwgaGF2aW5nIHR5cGUgTWFya0xhYmVsc1Zpc2liaWxpdHlcclxuICBNYXJrTGFiZWxzVmlzaWJpbGl0eSA9ICdtYXJrTGFiZWxzVmlzaWJpbGl0eScsXHJcblxyXG4gIC8vIERQSV9QcmltaXRpdmVUeXBlLCBoYXZpbmcgdHlwZSBQcmltaXRpdmVUeXBlXHJcbiAgUHJpbWl0aXZlVHlwZSA9ICdwcmltaXRpdmVUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0FjdHVhbFByaW1pdGl2ZVR5cGUsIGhhdmluZyB0eXBlIFByaW1pdGl2ZVR5cGVcclxuICBBY3R1YWxQcmltaXRpdmVUeXBlID0gJ2FjdHVhbFByaW1pdGl2ZVR5cGUnLFxyXG5cclxuICAvLyBEUElfUHJpbWl0aXZlVHlwZXMsIGhhdmluZyB0eXBlIFByaW1pdGl2ZVR5cGVbXVxyXG4gIFByaW1pdGl2ZVR5cGVzID0gJ3ByaW1pdGl2ZVR5cGVzJyxcclxuXHJcbiAgLy8gRFBJX1NoYXBlVHlwZSwgaGF2aW5nIHR5cGUgU2hhcGVUeXBlXHJcbiAgU2hhcGVUeXBlID0gJ3NoYXBlVHlwZScsXHJcblxyXG4gIC8vIERQSV9Tb3J0SW5kaWNhdG9yVHlwZSwgaGF2aW5nIHR5cGUgU29ydEluZGljYXRvclR5cGVcclxuICBTb3J0SW5kaWNhdG9yVHlwZSA9ICdzb3J0SW5kaWNhdG9yVHlwZScsXHJcblxyXG4gIC8vIERQSV9Tb3J0VHlwZSwgaGF2aW5nIHR5cGUgU29ydFR5cGVcclxuICBTb3J0VHlwZSA9ICdzb3J0QnknLFxyXG5cclxuICAvLyBEUElfU29ydEVuZCwgaGF2aW5nIHR5cGUgU29ydEVuZFxyXG4gIFNvcnRFbmQgPSAnc29ydEVuZCcsXHJcblxyXG4gIC8vIERQSV9TdGFja2luZ01vZGUsIGhhdmluZyB0eXBlIFN0YWNraW5nTW9kZVxyXG4gIFN0YWNraW5nTW9kZSA9ICdzdGFja2luZ01vZGUnLFxyXG5cclxuICAvLyBEUElfU3R5bGVUaGVtZSwgaGF2aW5nIHR5cGUgU3R5bGVUaGVtZVxyXG4gIFN0eWxlVGhlbWUgPSAnc3R5bGVUaGVtZScsXHJcblxyXG4gIC8vIERQSV9UcmVuZExpbmVGaXRUeXBlLCBoYXZpbmcgdHlwZSBUcmVuZExpbmVGaXRUeXBlXHJcbiAgVHJlbmRMaW5lRml0VHlwZSA9ICdmaXRUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1VwZGF0ZVNjb3BlLCBoYXZpbmcgdHlwZSBVcGRhdGVTY29wZVxyXG4gIFVwZGF0ZVNjb3BlID0gJ3VwZGF0ZVNjb3BlJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlckN0cmxEaXNwbGF5TW9kZSwgaGF2aW5nIHR5cGUgRGlzcGxheU1vZGVcclxuICBQYXJhbWV0ZXJDdHJsRGlzcGxheU1vZGUgPSAncGFyYW1EaXNwbGF5TW9kZScsXHJcblxyXG4gIC8vIERQSV9QYXJhbWV0ZXJDdHJsRGlzcGxheUZsYWcsIGhhdmluZyB0eXBlIFBhcmFtZXRlckN0cmxEaXNwbGF5RmxhZ1xyXG4gIFBhcmFtZXRlckN0cmxEaXNwbGF5RmxhZyA9ICdwYXJhbURpc3BsYXlGbGFnJyxcclxuXHJcbiAgLy8gRFBJX0luY2x1ZGVkLCBoYXZpbmcgdHlwZSBRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlc1xyXG4gIEluY2x1ZGVkID0gJ2luY2x1ZGVkJyxcclxuXHJcbiAgLy8gRFBJX0NvbW1hbmRzVHlwZSwgaGF2aW5nIHR5cGUgQ29tbWFuZHNUeXBlXHJcbiAgQ29tbWFuZHNUeXBlID0gJ2NvbW1hbmRzVHlwZScsXHJcblxyXG4gIC8vIERQSV9QYXJhbWV0ZXJEb21haW5UeXBlLCBoYXZpbmcgdHlwZSBEb21haW5UeXBlXHJcbiAgUGFyYW1ldGVyRG9tYWluVHlwZSA9ICdwYXJhbWV0ZXJEb21haW5UeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckRvbWFpblR5cGUsIGhhdmluZyB0eXBlIERvbWFpblR5cGVcclxuICBGaWx0ZXJEb21haW5UeXBlID0gJ2ZpbHRlckRvbWFpblR5cGUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyRG9tYWlucywgaGF2aW5nIHR5cGUgRG9tYWluVHlwZVtdXHJcbiAgRmlsdGVyRG9tYWlucyA9ICdmaWx0ZXJEb21haW5zJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckRvbWFpblR5cGVDYXB0aW9uLCBoYXZpbmcgdHlwZSBGaWx0ZXJEb21haW5UeXBlQ2FwdGlvblByZXNNb2RlbFxyXG4gIEZpbHRlckRvbWFpblR5cGVDYXB0aW9uID0gJ2ZpbHRlckRvbWFpblR5cGVDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckRvbWFpblR5cGVDYXB0aW9ucywgaGF2aW5nIHR5cGUgRmlsdGVyRG9tYWluVHlwZUNhcHRpb25QcmVzTW9kZWxbXVxyXG4gIEZpbHRlckRvbWFpblR5cGVDYXB0aW9ucyA9ICdmaWx0ZXJEb21haW5UeXBlQ2FwdGlvbnMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJUeXBlLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlclR5cGVcclxuICBDYXRlZ29yaWNhbEZpbHRlclR5cGUgPSAnY2F0ZWdvcmljYWxGaWx0ZXJUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1F1YW50aXRhdGl2ZUZpbHRlclR5cGUsIGhhdmluZyB0eXBlIFF1YW50aXRhdGl2ZUZpbHRlclR5cGVcclxuICBRdWFudGl0YXRpdmVGaWx0ZXJUeXBlID0gJ3F1YW50aXRhdGl2ZUZpbHRlclR5cGUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyUGF0dGVyblR5cGUsIGhhdmluZyB0eXBlIFBhdHRlcm5UeXBlXHJcbiAgRmlsdGVyUGF0dGVyblR5cGUgPSAnZmlsdGVyUGF0dGVyblR5cGUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyQ29uZGl0aW9uVHlwZSwgaGF2aW5nIHR5cGUgQ29uZGl0aW9uVHlwZVxyXG4gIEZpbHRlckNvbmRpdGlvblR5cGUgPSAnZmlsdGVyQ29uZGl0aW9uVHlwZScsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJzUHJlc2V0VHlwZSwgaGF2aW5nIHR5cGUgUHJlc2V0VHlwZVxyXG4gIEZpbHRlcnNQcmVzZXRUeXBlID0gJ2ZpbHRlcnNQcmVzZXRUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlcnNSYW5nZVR5cGUsIGhhdmluZyB0eXBlIFJhbmdlVHlwZVxyXG4gIEZpbHRlcnNSYW5nZVR5cGUgPSAnZmlsdGVyc1JhbmdlVHlwZScsXHJcblxyXG4gIC8vIERQSV9EYXRlUmFuZ2VUeXBlLCBoYXZpbmcgdHlwZSBSZWxhdGl2ZURhdGVSYW5nZVR5cGVcclxuICBEYXRlUmFuZ2VUeXBlID0gJ2RhdGVSYW5nZVR5cGUnLFxyXG5cclxuICAvLyBEUElfUGFnZUZsYWcsIGhhdmluZyB0eXBlIFBhZ2VOYXZGbGFnc1xyXG4gIFBhZ2VGbGFnID0gJ3BhZ2VGbGFnJyxcclxuXHJcbiAgLy8gRFBJX01hcmtzVG9UcmFpbCwgaGF2aW5nIHR5cGUgTWFya3NUb1RyYWlsXHJcbiAgTWFya3NUb1RyYWlsID0gJ21hcmtzVG9UcmFpbCcsXHJcblxyXG4gIC8vIERQSV9UcmFpbFR5cGUsIGhhdmluZyB0eXBlIFRyYWlsVHlwZVxyXG4gIFRyYWlsVHlwZSA9ICd0cmFpbFR5cGUnLFxyXG5cclxuICAvLyBEUElfQ2hhbmdlUGFnZURpcmVjdGlvbiwgaGF2aW5nIHR5cGUgQ2hhbmdlUGFnZVR5cGVcclxuICBDaGFuZ2VQYWdlRGlyZWN0aW9uID0gJ2NoYW5nZVRvJyxcclxuXHJcbiAgLy8gRFBJX0FuaW1hdGlvbkNvbnRyb2wsIGhhdmluZyB0eXBlIFBhZ2VBbmltYXRpb25Db250cm9sXHJcbiAgQW5pbWF0aW9uQ29udHJvbCA9ICdhbmltYXRpb25Db250cm9sJyxcclxuXHJcbiAgLy8gRFBJX0xpbmVQYXR0ZXJuLCBoYXZpbmcgdHlwZSBMaW5lUGF0dGVyblxyXG4gIExpbmVQYXR0ZXJuID0gJ2xpbmVQYXR0ZXJuJyxcclxuXHJcbiAgLy8gRFBJX0xpbmVDYXAsIGhhdmluZyB0eXBlIExpbmVDYXBcclxuICBMaW5lQ2FwID0gJ2xpbmVDYXAnLFxyXG5cclxuICAvLyBEUElfTGluZUpvaW4sIGhhdmluZyB0eXBlIExpbmVKb2luXHJcbiAgTGluZUpvaW4gPSAnbGluZUpvaW4nLFxyXG5cclxuICAvLyBEUElfTGluZUFsaWdubWVudCwgaGF2aW5nIHR5cGUgTGluZUFsaWdubWVudFxyXG4gIExpbmVBbGlnbm1lbnQgPSAnbGluZUFsaWdubWVudCcsXHJcblxyXG4gIC8vIERQSV9GaWxsTW9kZSwgaGF2aW5nIHR5cGUgRmlsbE1vZGVcclxuICBGaWxsTW9kZSA9ICdmaWxsTW9kZScsXHJcblxyXG4gIC8vIERQSV9DdXJzb3JTaGFwZSwgaGF2aW5nIHR5cGUgQ3Vyc29yU2hhcGVcclxuICBDdXJzb3JTaGFwZSA9ICdjdXJzb3JTaGFwZScsXHJcblxyXG4gIC8vIERQSV9TaG93TWVDb21tYW5kVHlwZSwgaGF2aW5nIHR5cGUgU2hvd01lQ29tbWFuZFR5cGVcclxuICBTaG93TWVDb21tYW5kVHlwZSA9ICdzaG93TWVDb21tYW5kVHlwZScsXHJcblxyXG4gIC8vIERQSV9TaGVsZkljb25UeXBlLCBoYXZpbmcgdHlwZSBTaGVsZkljb25UeXBlXHJcbiAgU2hlbGZJY29uVHlwZSA9ICdzaGVsZkljb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmSWNvblR5cGVzLCBoYXZpbmcgdHlwZSBTaGVsZkljb25UeXBlW11cclxuICBTaGVsZkljb25UeXBlcyA9ICdzaGVsZkljb25UeXBlcycsXHJcblxyXG4gIC8vIERQSV9JdGVtRHJhd1N0eWxlLCBoYXZpbmcgdHlwZSBJdGVtRHJhd1N0eWxlXHJcbiAgSXRlbURyYXdTdHlsZSA9ICdpdGVtRHJhd1N0eWxlJyxcclxuXHJcbiAgLy8gRFBJX1NjYWxlTW9kZSwgaGF2aW5nIHR5cGUgU2NhbGVNb2RlXHJcbiAgU2NhbGVNb2RlID0gJ3BhZ2VTY2FsZU1vZGUnLFxyXG5cclxuICAvLyBEUElfUGFnZU9yaWVudGF0aW9uT3B0aW9uLCBoYXZpbmcgdHlwZSBQYWdlT3JpZW50YXRpb25cclxuICBQYWdlT3JpZW50YXRpb25PcHRpb24gPSAncGFnZU9yaWVudGF0aW9uT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VTaXplT3B0aW9uLCBoYXZpbmcgdHlwZSBQYWdlU2l6ZU9wdGlvblxyXG4gIFBhZ2VTaXplT3B0aW9uID0gJ3BhZ2VTaXplT3B0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1NvcnRSZWdpb25UeXBlLCBoYXZpbmcgdHlwZSBTb3J0UmVnaW9uVHlwZVxyXG4gIFNvcnRSZWdpb25UeXBlID0gJ3NvcnRSZWdpb24nLFxyXG5cclxuICAvLyBEUElfTGVnZW5kSXRlbUxheW91dCwgaGF2aW5nIHR5cGUgTGVnZW5kSXRlbUxheW91dFxyXG4gIExlZ2VuZEl0ZW1MYXlvdXQgPSAnbGVnZW5kTGF5b3V0JyxcclxuXHJcbiAgLy8gRFBJX0xlZ2VuZEl0ZW1PcmRlciwgaGF2aW5nIHR5cGUgTGVnZW5kSXRlbU9yZGVyXHJcbiAgTGVnZW5kSXRlbU9yZGVyID0gJ2xlZ2VuZE9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX1ZpekltYWdlUmVnaW9uLCBoYXZpbmcgdHlwZSBWaXpJbWFnZVJlZ2lvblxyXG4gIFZpekltYWdlUmVnaW9uID0gJ3InLFxyXG5cclxuICAvLyBEUElfTGVnYWN5TWVudU5hbWUsIGhhdmluZyB0eXBlIExlZ2FjeU1lbnVOYW1lXHJcbiAgTGVnYWN5TWVudU5hbWUgPSAnbGVnYWN5TWVudU5hbWUnLFxyXG5cclxuICAvLyBEUElfTGVnYWN5TWVudVN0YXRlLCBoYXZpbmcgdHlwZSBMZWdhY3lNZW51U3RhdGVcclxuICBMZWdhY3lNZW51U3RhdGUgPSAnbGVnYWN5TWVudVN0YXRlJyxcclxuXHJcbiAgLy8gRFBJX0xlZ2FjeU1lbnVTdGF0ZUxpc3QsIGhhdmluZyB0eXBlIExlZ2FjeU1lbnVTdGF0ZVtdXHJcbiAgTGVnYWN5TWVudVN0YXRlTGlzdCA9ICdsZWdhY3lNZW51U3RhdGVzJyxcclxuXHJcbiAgLy8gRFBJX0RpbWVuc2lvblR5cGUsIGhhdmluZyB0eXBlIERpbWVuc2lvblR5cGVcclxuICBEaW1lbnNpb25UeXBlID0gJ2RpbWVuc2lvblR5cGUnLFxyXG5cclxuICAvLyBEUElfTGF5b3V0VHlwZSwgaGF2aW5nIHR5cGUgTGF5b3V0VHlwZVxyXG4gIExheW91dFR5cGUgPSAnbGF5b3V0VHlwZScsXHJcblxyXG4gIC8vIERQSV9TaGVsZlR5cGUsIGhhdmluZyB0eXBlIFNoZWxmVHlwZVxyXG4gIFNoZWxmVHlwZSA9ICdzaGVsZlR5cGUnLFxyXG5cclxuICAvLyBEUElfTGFzdFNlbGVjdGlvblNoZWxmLCBoYXZpbmcgdHlwZSBTaGVsZlR5cGVcclxuICBMYXN0U2VsZWN0aW9uU2hlbGYgPSAnbGFzdFNoZWxmJyxcclxuXHJcbiAgLy8gRFBJX1NjaGVtYVZpZXdlckRhdGFTb3VyY2VUeXBlLCBoYXZpbmcgdHlwZSBTY2hlbWFWaWV3ZXJEYXRhU291cmNlVHlwZVxyXG4gIFNjaGVtYVZpZXdlckRhdGFTb3VyY2VUeXBlID0gJ3NjaGVtYURhdGFzb3VyY2VUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1NjaGVtYUl0ZW1UeXBlLCBoYXZpbmcgdHlwZSBTY2hlbWFJdGVtVHlwZVxyXG4gIFNjaGVtYUl0ZW1UeXBlID0gJ3NjaGVtYUl0ZW1UeXBlJyxcclxuXHJcbiAgLy8gRFBJX0hTTVNlbGVjdGlvbk1vZGUsIGhhdmluZyB0eXBlIFNlbGVjdGlvbk1vZGVcclxuICBIU01TZWxlY3Rpb25Nb2RlID0gJ2hzbVNlbGVjdGlvbk1vZGUnLFxyXG5cclxuICAvLyBEUElfSFNNRGVmYXVsdE1lbWJlclR5cGUsIGhhdmluZyB0eXBlIERlZmF1bHRNZW1iZXJUeXBlXHJcbiAgSFNNRGVmYXVsdE1lbWJlclR5cGUgPSAnaHNtRGVmYXVsdE1lbWJlclR5cGUnLFxyXG5cclxuICAvLyBEUElfSFNNTm90aWZpY2F0aW9uVHlwZSwgaGF2aW5nIHR5cGUgTm90aWZpY2F0aW9uVHlwZVxyXG4gIEhTTU5vdGlmaWNhdGlvblR5cGUgPSAnaHNtTm90aWZpY2F0aW9uVHlwZScsXHJcblxyXG4gIC8vIERQSV9IU01TZWxlY3Rpb25SZXF1ZXN0VHlwZSwgaGF2aW5nIHR5cGUgU2VsZWN0aW9uUmVxdWVzdFR5cGVcclxuICBIU01TZWxlY3Rpb25SZXF1ZXN0VHlwZSA9ICdoc21TZWxlY3Rpb25SZXF1ZXN0VHlwZScsXHJcblxyXG4gIC8vIERQSV9IU01NZW1iZXJTZWxlY3RSZXF1ZXN0VHlwZSwgaGF2aW5nIHR5cGUgTWVtYmVyU2VsZWN0UmVxdWVzdFR5cGVcclxuICBIU01NZW1iZXJTZWxlY3RSZXF1ZXN0VHlwZSA9ICdoc21NZW1iZXJTZWxlY3RSZXF1ZXN0VHlwZScsXHJcblxyXG4gIC8vIERQSV9QaXZvdFN0cmF0ZWd5LCBoYXZpbmcgdHlwZSBGaWVsZFBpdm90U3RyYXRlZ3lcclxuICBQaXZvdFN0cmF0ZWd5ID0gJ3Bpdm90U3RyYXRlZ3knLFxyXG5cclxuICAvLyBEUElfQWxpYXNUeXBlLCBoYXZpbmcgdHlwZSBBbGlhc1R5cGVcclxuICBBbGlhc1R5cGUgPSAnYWxpYXNUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0RTT0RpbWVuc2lvblNvcnRPcmRlciwgaGF2aW5nIHR5cGUgRGF0YVNvdXJjZU9yZGVyXHJcbiAgRFNPRGltZW5zaW9uU29ydE9yZGVyID0gJ2Rzb0RpbWVuc2lvblNvcnRPcmRlcicsXHJcblxyXG4gIC8vIERQSV9EU09NZWFzdXJlU29ydE9yZGVyLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlT3JkZXJcclxuICBEU09NZWFzdXJlU29ydE9yZGVyID0gJ2Rzb01lYXN1cmVTb3J0T3JkZXInLFxyXG5cclxuICAvLyBEUElfRFNPU29ydE9yZGVyLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlT3JkZXJcclxuICBEU09Tb3J0T3JkZXIgPSAnZHNvU29ydE9yZGVyJyxcclxuXHJcbiAgLy8gRFBJX1ZUQWdnVHlwZSwgaGF2aW5nIHR5cGUgVlRBZ2dUeXBlXHJcbiAgVlRBZ2dUeXBlID0gJ3Z0QWdncmVnYXRpb24nLFxyXG5cclxuICAvLyBEUElfRmllbGRUeXBlSWNvblNldCwgaGF2aW5nIHR5cGUgRmllbGRUeXBlSWNvblNldFxyXG4gIEZpZWxkVHlwZUljb25TZXQgPSAnZmllbGRJY29uU2V0JyxcclxuXHJcbiAgLy8gRFBJX1Zpc3VhbFBhcnQsIGhhdmluZyB0eXBlIFZpc3VhbFBhcnRcclxuICBWaXN1YWxQYXJ0ID0gJ3Zpc3VhbFBhcnQnLFxyXG5cclxuICAvLyBEUElfRGVmYXVsdE1hcFRvb2xFbnVtLCBoYXZpbmcgdHlwZSBNYXBUb29sU2VsZWN0aW9uXHJcbiAgRGVmYXVsdE1hcFRvb2xFbnVtID0gJ2RlZmF1bHRNYXBUb29sRW51bScsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0TWFwVW5pdEVudW0sIGhhdmluZyB0eXBlIE1hcFVuaXRTZWxlY3Rpb25FbnVtXHJcbiAgRGVmYXVsdE1hcFVuaXRFbnVtID0gJ2RlZmF1bHRNYXBVbml0RW51bScsXHJcblxyXG4gIC8vIERQSV9TY2VuZU1vZGVsRGV0YWlsLCBoYXZpbmcgdHlwZSBEZXRhaWxcclxuICBTY2VuZU1vZGVsRGV0YWlsID0gJ3NjZW5lTW9kZWxEZXRhaWxFbnVtJyxcclxuXHJcbiAgLy8gRFBJX1NjZW5lTW9kZWxIaXRUeXBlLCBoYXZpbmcgdHlwZSBIaXRUeXBlXHJcbiAgU2NlbmVNb2RlbEhpdFR5cGUgPSAnc2NlbmVNb2RlbEhpdFR5cGUnLFxyXG5cclxuICAvLyBEUElfSGl0VGVzdFN0eWxlLCBoYXZpbmcgdHlwZSBIaXRUZXN0U3R5bGVcclxuICBIaXRUZXN0U3R5bGUgPSAnaGl0VGVzdFN0eWxlJyxcclxuXHJcbiAgLy8gRFBJX01hcmtTdGF0ZSwgaGF2aW5nIHR5cGUgTWFya1N0YXRlXHJcbiAgTWFya1N0YXRlID0gJ21hcmtTdGF0ZScsXHJcblxyXG4gIC8vIERQSV9TaGVldFR5cGUsIGhhdmluZyB0eXBlIFNoZWV0VHlwZVxyXG4gIFNoZWV0VHlwZSA9ICdzaGVldFR5cGUnLFxyXG5cclxuICAvLyBEUElfRHJhZ1NvdXJjZSwgaGF2aW5nIHR5cGUgRHJhZ0Ryb3BUeXBlXHJcbiAgRHJhZ1NvdXJjZSA9ICdkcmFnU291cmNlJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3BUYXJnZXQsIGhhdmluZyB0eXBlIERyYWdEcm9wVHlwZVxyXG4gIERyb3BUYXJnZXQgPSAnZHJvcFRhcmdldCcsXHJcblxyXG4gIC8vIERQSV9TaGVsZkRyb3BBY3Rpb24sIGhhdmluZyB0eXBlIFNoZWxmRHJvcEFjdGlvblxyXG4gIFNoZWxmRHJvcEFjdGlvbiA9ICdzaGVsZkRyb3BBY3Rpb24nLFxyXG5cclxuICAvLyBEUElfU2hlbGZEcm9wQ29udGV4dCwgaGF2aW5nIHR5cGUgU2hlbGZEcm9wQ29udGV4dFxyXG4gIFNoZWxmRHJvcENvbnRleHQgPSAnc2hlbGZEcm9wQ29udGV4dCcsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJTZWxlY3Rpb25UcmFja2luZywgaGF2aW5nIHR5cGUgU2VsZWN0aW9uVHJhY2tpbmdcclxuICBGaWx0ZXJTZWxlY3Rpb25UcmFja2luZyA9ICdmaWx0ZXJTZWxlY3Rpb25UcmFja2luZycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJVcGRhdGVUeXBlLCBoYXZpbmcgdHlwZSBGaWx0ZXJVcGRhdGVUeXBlXHJcbiAgRmlsdGVyVXBkYXRlVHlwZSA9ICdmaWx0ZXJVcGRhdGVUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclVwZGF0ZVF1YWxpZmllclR5cGUsIGhhdmluZyB0eXBlIEZpbHRlclVwZGF0ZVF1YWxpZmllclR5cGVcclxuICBGaWx0ZXJVcGRhdGVRdWFsaWZpZXJUeXBlID0gJ2ZpbHRlclVwZGF0ZVF1YWxpZmllclR5cGUnLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyRXJyb3IsIGhhdmluZyB0eXBlIFBhcmFtZXRlckVycm9yXHJcbiAgUGFyYW1ldGVyRXJyb3IgPSAncGFyYW1ldGVyRXJyb3InLFxyXG5cclxuICAvLyBEUElfU2VsZWN0aW9uVHlwZSwgaGF2aW5nIHR5cGUgU2VsZWN0aW9uVHlwZVxyXG4gIFNlbGVjdGlvblR5cGUgPSAnc2VsZWN0aW9uVHlwZScsXHJcblxyXG4gIC8vIERQSV9TZWxlY3Rpb25VcGRhdGVUeXBlLCBoYXZpbmcgdHlwZSBTZWxlY3Rpb25VcGRhdGVUeXBlXHJcbiAgU2VsZWN0aW9uVXBkYXRlVHlwZSA9ICdzZWxlY3Rpb25VcGRhdGVUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdE9wdGlvbnMsIGhhdmluZyB0eXBlIFNlbGVjdE9wdGlvbnNcclxuICBTZWxlY3RPcHRpb25zID0gJ3NlbGVjdE9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfV2hpdGVzcGFjZVNlbGVjdGlvbkJlaGF2aW9yLCBoYXZpbmcgdHlwZSBXaGl0ZXNwYWNlU2VsZWN0aW9uQmVoYXZpb3JcclxuICBXaGl0ZXNwYWNlU2VsZWN0aW9uQmVoYXZpb3IgPSAnd2hpdGVzcGFjZVNlbGVjdGlvbkJlaGF2aW9yJyxcclxuXHJcbiAgLy8gRFBJX0F4aXNPcmllbnRhdGlvbiwgaGF2aW5nIHR5cGUgT3JpZW50YXRpb25cclxuICBBeGlzT3JpZW50YXRpb24gPSAnYXhpc09yaWVudGF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RlY2ltYWxNb2RlLCBoYXZpbmcgdHlwZSBEZWNpbWFsTW9kZVxyXG4gIERlY2ltYWxNb2RlID0gJ2RlY2ltYWxNb2RlJyxcclxuXHJcbiAgLy8gRFBJX0FjdGl2YXRpb25NZXRob2QsIGhhdmluZyB0eXBlIEFjdGl2YXRpb25NZXRob2RcclxuICBBY3RpdmF0aW9uTWV0aG9kID0gJ2FjdGl2YXRpb24nLFxyXG5cclxuICAvLyBEUElfU291cmNlVHlwZSwgaGF2aW5nIHR5cGUgU291cmNlVHlwZVxyXG4gIFNvdXJjZVR5cGUgPSAnc291cmNlVHlwZScsXHJcblxyXG4gIC8vIERQSV9PbkNsZWFyLCBoYXZpbmcgdHlwZSBPbkNsZWFyXHJcbiAgT25DbGVhciA9ICdvbkNsZWFyJyxcclxuXHJcbiAgLy8gRFBJX01lcmdlT3JTcGxpdCwgaGF2aW5nIHR5cGUgTWVyZ2VPclNwbGl0XHJcbiAgTWVyZ2VPclNwbGl0ID0gJ21lcmdlT3JTcGxpdCcsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJNb2RlLCBoYXZpbmcgdHlwZSBGaWx0ZXJNb2RlXHJcbiAgRmlsdGVyTW9kZSA9ICdmaWx0ZXJNb2RlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclR5cGUsIGhhdmluZyB0eXBlIEZpbHRlclR5cGVcclxuICBGaWx0ZXJUeXBlID0gJ2ZpbHRlclR5cGUnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkT2JqZWN0VHlwZSwgaGF2aW5nIHR5cGUgRG9jRGFzaGJvYXJkT2JqZWN0VHlwZXNcclxuICBEYXNoYm9hcmRPYmplY3RUeXBlID0gJ2Rhc2hib2FyZE9iamVjdFR5cGUnLFxyXG5cclxuICAvLyBEUElfWm9uZVR5cGUsIGhhdmluZyB0eXBlIFpvbmVUeXBlXHJcbiAgWm9uZVR5cGUgPSAnem9uZVR5cGUnLFxyXG5cclxuICAvLyBEUElfWm9uZUxheW91dFR5cGUsIGhhdmluZyB0eXBlIFpvbmVMYXlvdXRUeXBlXHJcbiAgWm9uZUxheW91dFR5cGUgPSAnem9uZUxheW91dFR5cGUnLFxyXG5cclxuICAvLyBEUElfUXVpY2tUYWJsZUNhbGNUeXBlLCBoYXZpbmcgdHlwZSBRdWlja1RhYmxlQ2FsY0NvbW1hbmRUeXBlXHJcbiAgUXVpY2tUYWJsZUNhbGNUeXBlID0gJ3F1aWNrVGFibGVDYWxjVHlwZScsXHJcblxyXG4gIC8vIERQSV9UYWJsZUNhbGNDb21tYW5kVHlwZSwgaGF2aW5nIHR5cGUgVGFibGVDYWxjQ29tbWFuZFR5cGVcclxuICBUYWJsZUNhbGNDb21tYW5kVHlwZSA9ICd0YWJsZUNhbGNDb21tYW5kVHlwZScsXHJcblxyXG4gIC8vIERQSV9UYWJsZUNhbGNBZGRyZXNzVHlwZSwgaGF2aW5nIHR5cGUgVGFibGVDYWxjQWRkcmVzc0NvbW1hbmRUeXBlXHJcbiAgVGFibGVDYWxjQWRkcmVzc1R5cGUgPSAndGFibGVDYWxjQWRkcmVzc1R5cGUnLFxyXG5cclxuICAvLyBEUElfTWFya0xheW91dFByaW1pdGl2ZSwgaGF2aW5nIHR5cGUgUHJpbWl0aXZlXHJcbiAgTWFya0xheW91dFByaW1pdGl2ZSA9ICdtYXJrTGF5b3V0UHJpbWl0aXZlJyxcclxuXHJcbiAgLy8gRFBJX01hcmtMYXlvdXRWaXpUeXBlLCBoYXZpbmcgdHlwZSBWaXpUeXBlXHJcbiAgTWFya0xheW91dFZpelR5cGUgPSAnbWFya0xheW91dFZpelR5cGUnLFxyXG5cclxuICAvLyBEUElfTWFya0FsaWdubWVudCwgaGF2aW5nIHR5cGUgTWFya0FsaWdubWVudFxyXG4gIE1hcmtBbGlnbm1lbnQgPSAnbWFya0FsaWdubWVudCcsXHJcblxyXG4gIC8vIERQSV9Nb2RpZnlab25lWk9yZGVyVHlwZSwgaGF2aW5nIHR5cGUgTW9kaWZ5Wm9uZVpPcmRlckNvbW1hbmRUeXBlXHJcbiAgTW9kaWZ5Wm9uZVpPcmRlclR5cGUgPSAnbW9kaWZ5Wm9uZVpPcmRlclR5cGUnLFxyXG5cclxuICAvLyBEUElfVGV4dFJlZ2lvbkhBbGlnbiwgaGF2aW5nIHR5cGUgVGV4dFJlZ2lvbkhBbGlnblxyXG4gIFRleHRSZWdpb25IQWxpZ24gPSAnaGFsaWduJyxcclxuXHJcbiAgLy8gRFBJX1RleHRSZWdpb25WQWxpZ24sIGhhdmluZyB0eXBlIFRleHRSZWdpb25WQWxpZ25cclxuICBUZXh0UmVnaW9uVkFsaWduID0gJ3ZhbGlnbicsXHJcblxyXG4gIC8vIERQSV9QYXRoRWxlbWVudCwgaGF2aW5nIHR5cGUgUGF0aEVsZW1lbnRcclxuICBQYXRoRWxlbWVudCA9ICdwYXRoRWxlbWVudCcsXHJcblxyXG4gIC8vIERQSV9QYXRoRWxlbWVudHMsIGhhdmluZyB0eXBlIFBhdGhFbGVtZW50W11cclxuICBQYXRoRWxlbWVudHMgPSAncGF0aEVsZW1lbnRzJyxcclxuXHJcbiAgLy8gRFBJX1JlbmRlck1vZGUsIGhhdmluZyB0eXBlIFJlbmRlck1vZGVcclxuICBSZW5kZXJNb2RlID0gJ3JlbmRlck1vZGUnLFxyXG5cclxuICAvLyBEUElfRm9udFN0eWxlLCBoYXZpbmcgdHlwZSBUYWJsZWF1Rm9udFN0eWxlXHJcbiAgRm9udFN0eWxlID0gJ2ZvbnRTdHlsZScsXHJcblxyXG4gIC8vIERQSV9Gb250V2VpZ2h0LCBoYXZpbmcgdHlwZSBGb250V2VpZ2h0XHJcbiAgRm9udFdlaWdodCA9ICdmb250V2VpZ2h0JyxcclxuXHJcbiAgLy8gRFBJX1RleHREZWNvcmF0aW9uLCBoYXZpbmcgdHlwZSBUZXh0RGVjb3JhdGlvblxyXG4gIFRleHREZWNvcmF0aW9uID0gJ3RleHREZWNvcmF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlclN0eWxlLCBoYXZpbmcgdHlwZSBCb3JkZXJTdHlsZVxyXG4gIEJvcmRlclN0eWxlID0gJ2JvcmRlclN0eWxlJyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlclN0eWxlVG9wLCBoYXZpbmcgdHlwZSBCb3JkZXJTdHlsZVxyXG4gIEJvcmRlclN0eWxlVG9wID0gJ2JvcmRlclN0eWxlVG9wJyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlclN0eWxlUmlnaHQsIGhhdmluZyB0eXBlIEJvcmRlclN0eWxlXHJcbiAgQm9yZGVyU3R5bGVSaWdodCA9ICdib3JkZXJTdHlsZVJpZ2h0JyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlclN0eWxlQm90dG9tLCBoYXZpbmcgdHlwZSBCb3JkZXJTdHlsZVxyXG4gIEJvcmRlclN0eWxlQm90dG9tID0gJ2JvcmRlclN0eWxlQm90dG9tJyxcclxuXHJcbiAgLy8gRFBJX0JvcmRlclN0eWxlTGVmdCwgaGF2aW5nIHR5cGUgQm9yZGVyU3R5bGVcclxuICBCb3JkZXJTdHlsZUxlZnQgPSAnYm9yZGVyU3R5bGVMZWZ0JyxcclxuXHJcbiAgLy8gRFBJX0Zsb2F0aW5nVG9vbGJhclZpc2liaWxpdHksIGhhdmluZyB0eXBlIEZsb2F0aW5nVG9vbGJhclZpc2liaWxpdHlcclxuICBGbG9hdGluZ1Rvb2xiYXJWaXNpYmlsaXR5ID0gJ2Zsb2F0aW5nVG9vbGJhclZpc2liaWxpdHknLFxyXG5cclxuICAvLyBEUElfR2VvU2VhcmNoVmlzaWJpbGl0eSwgaGF2aW5nIHR5cGUgR2VvU2VhcmNoVmlzaWJpbGl0eVxyXG4gIEdlb1NlYXJjaFZpc2liaWxpdHkgPSAnZ2VvZ3JhcGhpY1NlYXJjaFZpc2liaWxpdHknLFxyXG5cclxuICAvLyBEUElfTWFwU2NhbGVWaXNpYmlsaXR5LCBoYXZpbmcgdHlwZSBNYXBTY2FsZVZpc2liaWxpdHlcclxuICBNYXBTY2FsZVZpc2liaWxpdHkgPSAnbWFwU2NhbGVWaXNpYmlsaXR5JyxcclxuXHJcbiAgLy8gRFBJX1Zpek5hdmlnYXRpb25TZXR0aW5nLCBoYXZpbmcgdHlwZSBWaXpOYXZpZ2F0aW9uU2V0dGluZ1xyXG4gIFZpek5hdmlnYXRpb25TZXR0aW5nID0gJ3Zpek5hdmlnYXRpb25TZXR0aW5nJyxcclxuXHJcbiAgLy8gRFBJX0F1dG9EcmlsbFZpc2liaWxpdHksIGhhdmluZyB0eXBlIEF1dG9EcmlsbFZpc2liaWxpdHlcclxuICBBdXRvRHJpbGxWaXNpYmlsaXR5ID0gJ2F1dG9EcmlsbFZpc2liaWxpdHknLFxyXG5cclxuICAvLyBEUElfQ2xpZW50VUlNZXRyaWNUeXBlLCBoYXZpbmcgdHlwZSBDbGllbnRVSU1ldHJpY1R5cGVcclxuICBDbGllbnRVSU1ldHJpY1R5cGUgPSAnY2xpZW50VWlNZXRyaWNUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0U2Nyb2xsRGlyZWN0aW9uLCBoYXZpbmcgdHlwZSBTaGVldFNjcm9sbERpcmVjdGlvblxyXG4gIFNoZWV0U2Nyb2xsRGlyZWN0aW9uID0gJ3NoZWV0U2Nyb2xsRGlyZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1NpemVNb2RlLCBoYXZpbmcgdHlwZSBTaXplTW9kZVxyXG4gIFNpemVNb2RlID0gJ3NpemVNb2RlJyxcclxuXHJcbiAgLy8gRFBJX1BlcnNwZWN0aXZlQWdncmVnYXRlLCBoYXZpbmcgdHlwZSBQZXJzcGVjdGl2ZUFnZ3JlZ2F0ZVxyXG4gIFBlcnNwZWN0aXZlQWdncmVnYXRlID0gJ3BlcnNwZWN0aXZlQWdncmVnYXRpb24nLFxyXG5cclxuICAvLyBEUElfU3R5bGVBdHRyaWJ1dGUsIGhhdmluZyB0eXBlIFN0eWxlQXR0cmlidXRlXHJcbiAgU3R5bGVBdHRyaWJ1dGUgPSAnc3R5bGVBdHRyaWJ1dGUnLFxyXG5cclxuICAvLyBEUElfU3R5bGVBdHRyaWJ1dGVzLCBoYXZpbmcgdHlwZSBTdHlsZUF0dHJpYnV0ZVtdXHJcbiAgU3R5bGVBdHRyaWJ1dGVzID0gJ3N0eWxlQXR0cmlidXRlcycsXHJcblxyXG4gIC8vIERQSV9TdHlsZUVsZW1lbnQsIGhhdmluZyB0eXBlIFN0eWxlRWxlbWVudFxyXG4gIFN0eWxlRWxlbWVudCA9ICdzdHlsZUVsZW1lbnQnLFxyXG5cclxuICAvLyBEUElfU3R5bGVEYXRhQ2xhc3MsIGhhdmluZyB0eXBlIFN0eWxlRGF0YUNsYXNzXHJcbiAgU3R5bGVEYXRhQ2xhc3MgPSAnc3R5bGVDbGFzcycsXHJcblxyXG4gIC8vIERQSV9TdHlsZUZpZWxkU2NvcGUsIGhhdmluZyB0eXBlIFN0eWxlRmllbGRTY29wZVxyXG4gIFN0eWxlRmllbGRTY29wZSA9ICdzdHlsZVNjb3BlJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdENvbnRyb2xUeXBlLCBoYXZpbmcgdHlwZSBGb3JtYXRDb250cm9sVHlwZVxyXG4gIEZvcm1hdENvbnRyb2xUeXBlID0gJ2Zvcm1hdFR5cGUnLFxyXG5cclxuICAvLyBEUElfTGluZUludGVycG9sYXRpb25Nb2RlLCBoYXZpbmcgdHlwZSBMaW5lSW50ZXJwb2xhdGlvbk1vZGVcclxuICBMaW5lSW50ZXJwb2xhdGlvbk1vZGUgPSAnbGluZUludGVycG9sYXRpb25Nb2RlJyxcclxuXHJcbiAgLy8gRFBJX01hcmtlcnNNb2RlLCBoYXZpbmcgdHlwZSBNYXJrTWFya2Vyc01vZGVcclxuICBNYXJrZXJzTW9kZSA9ICdtYXJrZXJzTW9kZScsXHJcblxyXG4gIC8vIERQSV9BcHBDb25maWdFbnVtLCBoYXZpbmcgdHlwZSBBcHBDb25maWdFbnVtXHJcbiAgQXBwQ29uZmlnRW51bSA9ICdhcHBDb25maWdFbnVtJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yUGFsZXR0ZVR5cGUsIGhhdmluZyB0eXBlIENvbG9yUGFsZXR0ZVR5cGVcclxuICBDb2xvclBhbGV0dGVUeXBlID0gJ2NvbG9yUGFsZXR0ZVR5cGUnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdFR5cGUsIGhhdmluZyB0eXBlIEV4dHJhY3RUeXBlXHJcbiAgRXh0cmFjdFR5cGUgPSAnZXh0cmFjdFR5cGUnLFxyXG5cclxuICAvLyBEUElfQWN0aXZpdHlEaXNwb3NpdGlvbiwgaGF2aW5nIHR5cGUgQWN0aXZpdHlEaXNwb3NpdGlvblxyXG4gIEFjdGl2aXR5RGlzcG9zaXRpb24gPSAnYWN0aXZpdHlEaXNwb3NpdGlvbicsXHJcblxyXG4gIC8vIERQSV9BY3Rpdml0eVJlc3VsdCwgaGF2aW5nIHR5cGUgQWN0aXZpdHlSZXN1bHRcclxuICBBY3Rpdml0eVJlc3VsdCA9ICdhY3Rpdml0eVJlc3VsdCcsXHJcblxyXG4gIC8vIERQSV9Ub29sdGlwTW9kZSwgaGF2aW5nIHR5cGUgVG9vbHRpcE1vZGVcclxuICBUb29sdGlwTW9kZSA9ICd0b29sdGlwTW9kZScsXHJcblxyXG4gIC8vIERQSV9SdW50aW1lT3V0cHV0LCBoYXZpbmcgdHlwZSBSdW50aW1lT3V0cHV0XHJcbiAgUnVudGltZU91dHB1dCA9ICdydW50aW1lT3V0cHV0JyxcclxuXHJcbiAgLy8gRFBJX0FuYWx5dGljc09iamVjdFR5cGUsIGhhdmluZyB0eXBlIEFuYWx5dGljc09iamVjdFR5cGVcclxuICBBbmFseXRpY3NPYmplY3RUeXBlID0gJ2FuYWx5dGljc09iamVjdFR5cGUnLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uU3RhdHVzLCBoYXZpbmcgdHlwZSBVSUF1dG9tYXRpb25Db21tYW5kU3RhdHVzXHJcbiAgVUlBdXRvbWF0aW9uU3RhdHVzID0gJ3VpQXV0b21hdGlvblN0YXR1cycsXHJcblxyXG4gIC8vIERQSV9UYWJsZVZpZXdEYXRhVHlwZSwgaGF2aW5nIHR5cGUgVGFibGVWaWV3RGF0YVR5cGVcclxuICBUYWJsZVZpZXdEYXRhVHlwZSA9ICd0YWJsZVZpZXdlckRhdGFUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1VuaXRzRm9ybWF0LCBoYXZpbmcgdHlwZSBVbml0c0Zvcm1hdEVudW1cclxuICBVbml0c0Zvcm1hdCA9ICd1bml0c0Zvcm1hdCcsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJMaW1pdFR5cGUsIGhhdmluZyB0eXBlIExpbWl0VHlwZVxyXG4gIEZpbHRlckxpbWl0VHlwZSA9ICdmaWx0ZXJMaW1pdFR5cGUnLFxyXG5cclxuICAvLyBEUElfRGlzdHJpYnV0aW9uU2VsZWN0ZWRUeXBlLCBoYXZpbmcgdHlwZSBEaXN0cmlidXRpb25UeXBlXHJcbiAgRGlzdHJpYnV0aW9uU2VsZWN0ZWRUeXBlID0gJ2Rpc3RyaWJ1dGlvblNlbGVjdGVkVHlwZScsXHJcblxyXG4gIC8vIERQSV9EaXN0cmlidXRpb25UeXBlLCBoYXZpbmcgdHlwZSBEaXN0cmlidXRpb25UeXBlXHJcbiAgRGlzdHJpYnV0aW9uVHlwZSA9ICdkaXN0cmlidXRpb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX1RyYW5zbGF0ZWREaXN0cmlidXRpb25UeXBlLCBoYXZpbmcgdHlwZSBUcmFuc2xhdGVkRGlzdHJpYnV0aW9uVHlwZVByZXNNb2RlbFxyXG4gIFRyYW5zbGF0ZWREaXN0cmlidXRpb25UeXBlID0gJ3RyYW5zbGF0ZWREaXN0cmlidXRpb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX1RyYW5zbGF0ZWREaXN0cmlidXRpb25UeXBlcywgaGF2aW5nIHR5cGUgVHJhbnNsYXRlZERpc3RyaWJ1dGlvblR5cGVQcmVzTW9kZWxbXVxyXG4gIFRyYW5zbGF0ZWREaXN0cmlidXRpb25UeXBlcyA9ICd0cmFuc2xhdGVkRGlzdHJpYnV0aW9uVHlwZXMnLFxyXG5cclxuICAvLyBEUElfUmVmTGluZUZvcm11bGFHcm91cCwgaGF2aW5nIHR5cGUgRm9ybXVsYUdyb3VwXHJcbiAgUmVmTGluZUZvcm11bGFHcm91cCA9ICdyZWZsaW5lRm9ybXVsYUdyb3VwJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZUxpbmVTY29wZVR5cGUsIGhhdmluZyB0eXBlIFNjb3BlVHlwZVxyXG4gIFJlZmVyZW5jZUxpbmVTY29wZVR5cGUgPSAncmVmZXJlbmNlTGluZVNjb3BlVHlwZScsXHJcblxyXG4gIC8vIERQSV9TdERldlR5cGUsIGhhdmluZyB0eXBlIFN0RGV2VHlwZVxyXG4gIFN0RGV2VHlwZSA9ICdzdGRldlR5cGUnLFxyXG5cclxuICAvLyBEUElfU2hvd0JvdW5kcywgaGF2aW5nIHR5cGUgU2hvd0JvdW5kc1xyXG4gIFNob3dCb3VuZHMgPSAnc2hvd0JvdW5kcycsXHJcblxyXG4gIC8vIERQSV9Cb3hwbG90V2hpc2tlclR5cGUsIGhhdmluZyB0eXBlIEJveHBsb3RXaGlza2VyVHlwZVxyXG4gIEJveHBsb3RXaGlza2VyVHlwZSA9ICdib3hwbG90V2hpc2tlclR5cGUnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlTGluZUxhYmVsVHlwZSwgaGF2aW5nIHR5cGUgTGFiZWxUeXBlXHJcbiAgUmVmZXJlbmNlTGluZUxhYmVsVHlwZSA9ICdyZWZlcmVuY2VMaW5lTGFiZWxUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1BhaXJlZFJlZmVyZW5jZUxpbmVMYWJlbFR5cGUsIGhhdmluZyB0eXBlIExhYmVsVHlwZVxyXG4gIFBhaXJlZFJlZmVyZW5jZUxpbmVMYWJlbFR5cGUgPSAncGFpcmVkUmVmZXJlbmNlTGluZUxhYmVsVHlwZScsXHJcblxyXG4gIC8vIERQSV9Db25maWRlbmNlSW50ZXJ2YWxTZWxlY3RlZFN0YXRlLCBoYXZpbmcgdHlwZSBDb25maWRlbmNlSW50ZXJ2YWxTdGF0ZVxyXG4gIENvbmZpZGVuY2VJbnRlcnZhbFNlbGVjdGVkU3RhdGUgPSAnY29uZmlkZW5jZUludGVydmFsU2VsZWN0ZWRTdGF0ZScsXHJcblxyXG4gIC8vIERQSV9Db25maWRlbmNlSW50ZXJ2YWxTdGF0ZSwgaGF2aW5nIHR5cGUgQ29uZmlkZW5jZUludGVydmFsU3RhdGVcclxuICBDb25maWRlbmNlSW50ZXJ2YWxTdGF0ZSA9ICdjb25maWRlbmNlSW50ZXJ2YWxTdGF0ZScsXHJcblxyXG4gIC8vIERQSV9UcmFuc2xhdGVkTGFiZWxUeXBlLCBoYXZpbmcgdHlwZSBUcmFuc2xhdGVkTGFiZWxUeXBlUHJlc01vZGVsXHJcbiAgVHJhbnNsYXRlZExhYmVsVHlwZSA9ICd0cmFuc2xhdGVkTGFiZWxUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZUxpbmVWYWxpZExhYmVsVHlwZXMsIGhhdmluZyB0eXBlIFRyYW5zbGF0ZWRMYWJlbFR5cGVQcmVzTW9kZWxbXVxyXG4gIFJlZmVyZW5jZUxpbmVWYWxpZExhYmVsVHlwZXMgPSAndmFsaWRSZWZlcmVuY2VMaW5lTGFiZWxUeXBlcycsXHJcblxyXG4gIC8vIERQSV9SZWZlcmVuY2VMaW5lRm9ybXVsYVR5cGUsIGhhdmluZyB0eXBlIEZvcm11bGFUeXBlXHJcbiAgUmVmZXJlbmNlTGluZUZvcm11bGFUeXBlID0gJ3JlZmVyZW5jZUxpbmVGb3JtdWxhVHlwZScsXHJcblxyXG4gIC8vIERQSV9QYWlyZWRSZWZlcmVuY2VMaW5lRm9ybXVsYVR5cGUsIGhhdmluZyB0eXBlIEZvcm11bGFUeXBlXHJcbiAgUGFpcmVkUmVmZXJlbmNlTGluZUZvcm11bGFUeXBlID0gJ3BhaXJlZFJlZmVyZW5jZUxpbmVGb3JtdWxhVHlwZScsXHJcblxyXG4gIC8vIERQSV9UcmFuc2xhdGVkRm9ybXVsYVR5cGUsIGhhdmluZyB0eXBlIFRyYW5zbGF0ZWRGb3JtdWxhVHlwZVByZXNNb2RlbFxyXG4gIFRyYW5zbGF0ZWRGb3JtdWxhVHlwZSA9ICd0cmFuc2xhdGVkRm9ybXVsYVR5cGUnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlTGluZVZhbGlkRm9ybXVsYVR5cGVzLCBoYXZpbmcgdHlwZSBUcmFuc2xhdGVkRm9ybXVsYVR5cGVQcmVzTW9kZWxbXVxyXG4gIFJlZmVyZW5jZUxpbmVWYWxpZEZvcm11bGFUeXBlcyA9ICd2YWxpZFJlZmVyZW5jZUxpbmVGb3JtdWxhVHlwZXMnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlTGluZVZhbGlkUGFpcmVkRm9ybXVsYVR5cGVzLCBoYXZpbmcgdHlwZSBUcmFuc2xhdGVkRm9ybXVsYVR5cGVQcmVzTW9kZWxbXVxyXG4gIFJlZmVyZW5jZUxpbmVWYWxpZFBhaXJlZEZvcm11bGFUeXBlcyA9ICd2YWxpZFJlZmVyZW5jZUxpbmVQYWlyZWRGb3JtdWxhVHlwZXMnLFxyXG5cclxuICAvLyBEUElfVHJhbnNsYXRlZENvbmZpZGVuY2VJbnRlcnZhbFN0YXRlLCBoYXZpbmcgdHlwZSBUcmFuc2xhdGVkQ29uZmlkZW5jZUludGVydmFsU3RhdGVQcmVzTW9kZWxcclxuICBUcmFuc2xhdGVkQ29uZmlkZW5jZUludGVydmFsU3RhdGUgPSAndHJhbnNsYXRlZENvbmZpZGVuY2VJbnRlcnZhbFN0YXRlJyxcclxuXHJcbiAgLy8gRFBJX1RyYW5zbGF0ZWRDb25maWRlbmNlSW50ZXJ2YWxTdGF0ZXMsIGhhdmluZyB0eXBlIFRyYW5zbGF0ZWRDb25maWRlbmNlSW50ZXJ2YWxTdGF0ZVByZXNNb2RlbFtdXHJcbiAgVHJhbnNsYXRlZENvbmZpZGVuY2VJbnRlcnZhbFN0YXRlcyA9ICd0cmFuc2xhdGVkQ29uZmlkZW5jZUludGVydmFsU3RhdGVzJyxcclxuXHJcbiAgLy8gRFBJX1RyYW5zbGF0ZWRTdERldlR5cGUsIGhhdmluZyB0eXBlIFRyYW5zbGF0ZWRTdERldlR5cGVQcmVzTW9kZWxcclxuICBUcmFuc2xhdGVkU3REZXZUeXBlID0gJ3RyYW5zbGF0ZWRTdGRldlR5cGUnLFxyXG5cclxuICAvLyBEUElfVHJhbnNsYXRlZFN0RGV2VHlwZXMsIGhhdmluZyB0eXBlIFRyYW5zbGF0ZWRTdERldlR5cGVQcmVzTW9kZWxbXVxyXG4gIFRyYW5zbGF0ZWRTdERldlR5cGVzID0gJ3RyYW5zbGF0ZWRTdGRldlR5cGVzJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZUxpbmVMT0RDYWxjVHlwZSwgaGF2aW5nIHR5cGUgTE9EQ2FsY1R5cGVcclxuICBSZWZlcmVuY2VMaW5lTE9EQ2FsY1R5cGUgPSAncmVmZXJlbmNlTGluZUxvZENhbGNUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1ZhbHVlRG9tYWluVHlwZSwgaGF2aW5nIHR5cGUgVmFsdWVEb21haW5UeXBlXHJcbiAgVmFsdWVEb21haW5UeXBlID0gJ3ZhbHVlRG9tYWluVHlwZScsXHJcblxyXG4gIC8vIERQSV9WYWx1ZURvbWFpblR5cGVzLCBoYXZpbmcgdHlwZSBWYWx1ZURvbWFpblR5cGVbXVxyXG4gIFZhbHVlRG9tYWluVHlwZXMgPSAndmFsdWVEb21haW5UeXBlcycsXHJcblxyXG4gIC8vIERQSV9PcGVyYXRpb25UeXBlLCBoYXZpbmcgdHlwZSBPcGVyYXRpb25UeXBlXHJcbiAgT3BlcmF0aW9uVHlwZSA9ICdvcGVyYXRpb25UeXBlJyxcclxuXHJcbiAgLy8gRFBJX09wZXJhdGlvblR5cGVzLCBoYXZpbmcgdHlwZSBPcGVyYXRpb25UeXBlW11cclxuICBPcGVyYXRpb25UeXBlcyA9ICdvcGVyYXRpb25UeXBlcycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uVHlwZUNhdGVnb3J5LCBoYXZpbmcgdHlwZSBDb25uZWN0aW9uVHlwZUNhdGVnb3J5XHJcbiAgQ29ubmVjdGlvblR5cGVDYXRlZ29yeSA9ICdjb25uZWN0aW9uVHlwZUNhdGVnb3J5JyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25UeXBlR3JvdXAsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25UeXBlR3JvdXBcclxuICBDb25uZWN0aW9uVHlwZUdyb3VwID0gJ2Nvbm5lY3Rpb25UeXBlR3JvdXAnLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZFJlZGlyZWN0VHlwZSwgaGF2aW5nIHR5cGUgQ29tbWFuZFJlZGlyZWN0VHlwZVxyXG4gIENvbW1hbmRSZWRpcmVjdFR5cGUgPSAnY29tbWFuZFJlZGlyZWN0VHlwZScsXHJcblxyXG4gIC8vIERQSV9DdXN0b21TcGxpdE1vZGUsIGhhdmluZyB0eXBlIFNwbGl0TW9kZVxyXG4gIEN1c3RvbVNwbGl0TW9kZSA9ICdjdXN0b21TcGxpdE1vZGUnLFxyXG5cclxuICAvLyBEUElfQ3VzdG9tU3BsaXRTZXBhcmF0b3JUeXBlLCBoYXZpbmcgdHlwZSBTZXBhcmF0b3JUeXBlXHJcbiAgQ3VzdG9tU3BsaXRTZXBhcmF0b3JUeXBlID0gJ2N1c3RvbVNwbGl0U2VwYXJhdG9yVHlwZScsXHJcblxyXG4gIC8vIERQSV9MZXZlbFNlbGVjdGlvblN0YXRlLCBoYXZpbmcgdHlwZSBMZXZlbFNlbGVjdGlvblN0YXRlXHJcbiAgTGV2ZWxTZWxlY3Rpb25TdGF0ZSA9ICdsZXZlbFNlbGVjdGlvblN0YXRlJyxcclxuXHJcbiAgLy8gRFBJX0xldmVsU2VsZWN0aW9uU3RhdGVzLCBoYXZpbmcgdHlwZSBMZXZlbFNlbGVjdGlvblN0YXRlW11cclxuICBMZXZlbFNlbGVjdGlvblN0YXRlcyA9ICdsZXZlbFNlbGVjdGlvblN0YXRlcycsXHJcblxyXG4gIC8vIERQSV9Tb3VyY2VEZXN0SWNvbiwgaGF2aW5nIHR5cGUgU291cmNlRGVzdEljb25cclxuICBTb3VyY2VEZXN0SWNvbiA9ICdzb3VyY2VEZXN0SWNvbicsXHJcblxyXG4gIC8vIERQSV9MZWdlbmRMYXlvdXQsIGhhdmluZyB0eXBlIExlZ2VuZExheW91dFxyXG4gIExlZ2VuZExheW91dCA9ICdwYWdlTGVnZW5kTGF5b3V0JyxcclxuXHJcbiAgLy8gRFBJX0ltYWdlc0VkaXRSZXN1bHRDb2RlLCBoYXZpbmcgdHlwZSBJbWFnZXNFZGl0UmVzdWx0Q29kZVxyXG4gIEltYWdlc0VkaXRSZXN1bHRDb2RlID0gJ2ltYWdlc0VkaXRSZXN1bHRDb2RlJyxcclxuXHJcbiAgLy8gRFBJX0NhbGN1bGF0aW9uQ29udGV4dCwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRpb25Db250ZXh0XHJcbiAgQ2FsY3VsYXRpb25Db250ZXh0ID0gJ2NhbGN1bGF0aW9uQ29udGV4dCcsXHJcblxyXG4gIC8vIERQSV9Xb3JrZ3JvdXBQdWJsaXNoRXJyb3JUeXBlLCBoYXZpbmcgdHlwZSBXb3JrZ3JvdXBQdWJsaXNoRXJyb3JUeXBlXHJcbiAgV29ya2dyb3VwUHVibGlzaEVycm9yVHlwZSA9ICd3b3JrZ3JvdXBQdWJsaXNoRXJyb3JUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0lzUGFyYW1ldGVyLCBoYXZpbmcgdHlwZSBUcmlCb29sXHJcbiAgSXNQYXJhbWV0ZXIgPSAnaXNQYXJhbWV0ZXInLFxyXG5cclxuICAvLyBEUElfQWRkcmVzc2luZ1N0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIEFkZHJlc3NpbmdTdGF0ZSA9ICdhZGRyZXNzaW5nU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQWxsUGFnZXNTdGF0ZSwgaGF2aW5nIHR5cGUgV2lkZ2V0U3RhdGVcclxuICBBbGxQYWdlc1N0YXRlID0gJ2FsbFBhZ2VzU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQXRUaGVMZXZlbFN0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIEF0VGhlTGV2ZWxTdGF0ZSA9ICdhdFRoZUxldmVsU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQ29tcHV0ZUNvbXBvdW5kZWRSYXRlU3RhdGUsIGhhdmluZyB0eXBlIFdpZGdldFN0YXRlXHJcbiAgQ29tcHV0ZUNvbXBvdW5kZWRSYXRlU3RhdGUgPSAnY29tcHV0ZUNvbXBvdW5kZWRSYXRlU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQ3VzdG9tTnVsbElmSW5jb21wbGV0ZVN0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIEN1c3RvbU51bGxJZkluY29tcGxldGVTdGF0ZSA9ICdjdXN0b21OdWxsSWZJbmNvbXBsZXRlU3RhdGUnLFxyXG5cclxuICAvLyBEUElfTmVzdGVkQ2FsY3NTdGF0ZSwgaGF2aW5nIHR5cGUgV2lkZ2V0U3RhdGVcclxuICBOZXN0ZWRDYWxjc1N0YXRlID0gJ25lc3RlZENhbGNzU3RhdGUnLFxyXG5cclxuICAvLyBEUElfUmFua1R5cGVTdGF0ZSwgaGF2aW5nIHR5cGUgV2lkZ2V0U3RhdGVcclxuICBSYW5rVHlwZVN0YXRlID0gJ3JhbmtUeXBlU3RhdGUnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlT3B0aW9uc1N0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIFJlZmVyZW5jZU9wdGlvbnNTdGF0ZSA9ICdyZWZlcmVuY2VPcHRpb25zU3RhdGUnLFxyXG5cclxuICAvLyBEUElfUmVzdGFydEV2ZXJ5U3RhdGUsIGhhdmluZyB0eXBlIFdpZGdldFN0YXRlXHJcbiAgUmVzdGFydEV2ZXJ5U3RhdGUgPSAncmVzdGFydEV2ZXJ5U3RhdGUnLFxyXG5cclxuICAvLyBEUElfU29ydEFnZ1N0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIFNvcnRBZ2dTdGF0ZSA9ICdzb3J0QWdnU3RhdGUnLFxyXG5cclxuICAvLyBEUElfU29ydFN0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIFNvcnRTdGF0ZSA9ICdzb3J0U3RhdGUnLFxyXG5cclxuICAvLyBEUElfVGFibGVDYWxjVHlwZVN0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIFRhYmxlQ2FsY1R5cGVTdGF0ZSA9ICd0YWJsZUNhbGNUeXBlU3RhdGUnLFxyXG5cclxuICAvLyBEUElfVGFibGVDYWxjQXNzaXN0YW5jZVdpZGdldFN0YXRlLCBoYXZpbmcgdHlwZSBXaWRnZXRTdGF0ZVxyXG4gIFRhYmxlQ2FsY0Fzc2lzdGFuY2VXaWRnZXRTdGF0ZSA9ICd0YWJsZUNhbGNBc3Npc3RhbmNlV2lkZ2V0U3RhdGUnLFxyXG5cclxuICAvLyBEUElfQ2FsY05lc3RpbmdMZXZlbCwgaGF2aW5nIHR5cGUgQ2FsY05lc3RpbmdMZXZlbFxyXG4gIENhbGNOZXN0aW5nTGV2ZWwgPSAnY2FsY05lc3RpbmdMZXZlbCcsXHJcblxyXG4gIC8vIERQSV9EYXRhUHJvdmlkZXJUeXBlLCBoYXZpbmcgdHlwZSBEYXRhUHJvdmlkZXJUeXBlXHJcbiAgRGF0YVByb3ZpZGVyVHlwZSA9ICdkYXRhUHJvdmlkZXJUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0hldXJpc3RpY0NvbW1hbmRSZWludGVycHJldGF0aW9uLCBoYXZpbmcgdHlwZSBIZXVyaXN0aWNDb21tYW5kUmVpbnRlcnByZXRhdGlvblxyXG4gIEhldXJpc3RpY0NvbW1hbmRSZWludGVycHJldGF0aW9uID0gJ2hldXJpc3RpY0NvbW1hbmRSZWludGVycHJldGF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0V4dHJhY3RSZWZyZXNoU3RhdHVzLCBoYXZpbmcgdHlwZSBFeHRyYWN0UmVmcmVzaFN0YXR1c1xyXG4gIEV4dHJhY3RSZWZyZXNoU3RhdHVzID0gJ2V4dHJhY3RSZWZyZXNoU3RhdHVzJyxcclxuXHJcbiAgLy8gRFBJX1JpY2hUZXh0RWRpdG9yV2lkZ2V0S2V5LCBoYXZpbmcgdHlwZSBSaWNoVGV4dEVkaXRvcldpZGdldEtleVxyXG4gIFJpY2hUZXh0RWRpdG9yV2lkZ2V0S2V5ID0gJ3JpY2hUZXh0RWRpdG9yV2lkZ2V0S2V5JyxcclxuXHJcbiAgLy8gRFBJX1JpY2hUZXh0V2lkZ2V0S2V5cywgaGF2aW5nIHR5cGUgUmljaFRleHRFZGl0b3JXaWRnZXRLZXlbXVxyXG4gIFJpY2hUZXh0V2lkZ2V0S2V5cyA9ICdyaWNoVGV4dFdpZGdldEtleXMnLFxyXG5cclxuICAvLyBEUElfVHlwZU9mRm9ybWF0SXRlbSwgaGF2aW5nIHR5cGUgVHlwZU9mRm9ybWF0SXRlbVxyXG4gIFR5cGVPZkZvcm1hdEl0ZW0gPSAndHlwZU9mRm9ybWF0SXRlbScsXHJcblxyXG4gIC8vIERQSV9UeXBlT2ZGb3JtYXRDb250YWluZXIsIGhhdmluZyB0eXBlIFR5cGVPZkZvcm1hdENvbnRhaW5lclxyXG4gIFR5cGVPZkZvcm1hdENvbnRhaW5lciA9ICd0eXBlT2ZGb3JtYXRDb250YWluZXInLFxyXG5cclxuICAvLyBEUElfVHlwZU9mRm9ybWF0Q29udHJvbCwgaGF2aW5nIHR5cGUgVHlwZU9mRm9ybWF0Q29udHJvbFxyXG4gIFR5cGVPZkZvcm1hdENvbnRyb2wgPSAndHlwZU9mRm9ybWF0Q29udHJvbCcsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXRXaWRnZXRLZXksIGhhdmluZyB0eXBlIEZvcm1hdFdpZGdldEtleVxyXG4gIEZvcm1hdFdpZGdldEtleSA9ICdmb3JtYXRXaWRnZXRLZXknLFxyXG5cclxuICAvLyBEUElfQ29sb3JTd2F0Y2hUeXBlLCBoYXZpbmcgdHlwZSBDb2xvclN3YXRjaFR5cGVcclxuICBDb2xvclN3YXRjaFR5cGUgPSAnZm9ybWF0Q29sb3JTd2F0Y2hUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1BpY2tlclR5cGUsIGhhdmluZyB0eXBlIFBpY2tlclR5cGVcclxuICBQaWNrZXJUeXBlID0gJ3BpY2tlclR5cGUnLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdEhpc3RvcnlSZWZyZXNoVHlwZSwgaGF2aW5nIHR5cGUgUmVmcmVzaFR5cGVcclxuICBFeHRyYWN0SGlzdG9yeVJlZnJlc2hUeXBlID0gJ2V4dHJhY3RIaXN0b3J5UmVmcmVzaFR5cGVFbnVtJyxcclxuXHJcbiAgLy8gRFBJX0F4aXNGb2xkU3RhdGUsIGhhdmluZyB0eXBlIEF4aXNGb2xkU3RhdGVcclxuICBBeGlzRm9sZFN0YXRlID0gJ2F4aXNGb2xkU3RhdGUnLFxyXG5cclxuICAvLyBEUElfVGlja01hcmtTcGFjaW5nVW5pdHMsIGhhdmluZyB0eXBlIFRpY2tTcGFjaW5nVW5pdHNcclxuICBUaWNrTWFya1NwYWNpbmdVbml0cyA9ICd0aWNrU3BhY2luZ1VuaXRzJyxcclxuXHJcbiAgLy8gRFBJX1RpY2tNYXJrU3RhdGUsIGhhdmluZyB0eXBlIFRpY2tNYXJrU3RhdGVcclxuICBUaWNrTWFya1N0YXRlID0gJ3RpY2tNYXJrU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQXhpc1JhbmdlVHlwZSwgaGF2aW5nIHR5cGUgQXhpc1JhbmdlVHlwZVxyXG4gIEF4aXNSYW5nZVR5cGUgPSAnYXhpc1JhbmdlVHlwZScsXHJcblxyXG4gIC8vIERQSV9TY2FsZVR5cGUsIGhhdmluZyB0eXBlIFNjYWxlVHlwZVxyXG4gIFNjYWxlVHlwZSA9ICdzY2FsZVR5cGUnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkRGV2aWNlTGF5b3V0LCBoYXZpbmcgdHlwZSBEYXNoYm9hcmREZXZpY2VMYXlvdXRcclxuICBEYXNoYm9hcmREZXZpY2VMYXlvdXQgPSAnZGFzaGJvYXJkRGV2aWNlTGF5b3V0JyxcclxuXHJcbiAgLy8gRFBJX0FjdGl2YXRlRGV2aWNlTGF5b3V0LCBoYXZpbmcgdHlwZSBEYXNoYm9hcmREZXZpY2VMYXlvdXRcclxuICBBY3RpdmF0ZURldmljZUxheW91dCA9ICdhY3RpdmF0ZURldmljZUxheW91dCcsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmREZXZpY2VMYXlvdXRzLCBoYXZpbmcgdHlwZSBEYXNoYm9hcmREZXZpY2VMYXlvdXRbXVxyXG4gIERhc2hib2FyZERldmljZUxheW91dHMgPSAnZGFzaGJvYXJkRGV2aWNlTGF5b3V0cycsXHJcblxyXG4gIC8vIERQSV9EZXZpY2VTb3VyY2UsIGhhdmluZyB0eXBlIERldmljZVNvdXJjZVxyXG4gIERldmljZVNvdXJjZSA9ICdkZXZpY2VTb3VyY2UnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkU2l6aW5nRGltZW5zaW9uLCBoYXZpbmcgdHlwZSBEYXNoYm9hcmRTaXppbmdEaW1lbnNpb25cclxuICBEYXNoYm9hcmRTaXppbmdEaW1lbnNpb24gPSAnZGFzaGJvYXJkU2l6aW5nRGltZW5zaW9uJyxcclxuXHJcbiAgLy8gRFBJX0dyaWRPdmVybGF5TW9kZSwgaGF2aW5nIHR5cGUgR3JpZE92ZXJsYXlNb2RlXHJcbiAgR3JpZE92ZXJsYXlNb2RlID0gJ2dyaWRPdmVybGF5TW9kZScsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRTaXppbmdNb2RlLCBoYXZpbmcgdHlwZSBEYXNoYm9hcmRTaXppbmdNb2RlXHJcbiAgRGFzaGJvYXJkU2l6aW5nTW9kZSA9ICdkYXNoYm9hcmRTaXppbmdNb2RlJyxcclxuXHJcbiAgLy8gRFBJX0ZsaXBib2FyZE5hdlR5cGUsIGhhdmluZyB0eXBlIEZsaXBib2FyZE5hdlR5cGVcclxuICBGbGlwYm9hcmROYXZUeXBlID0gJ2ZsaXBib2FyZE5hdlR5cGUnLFxyXG5cclxuICAvLyBEUElfRmllbGRQaWNrZXJEaWFsb2dVc2VDYXNlLCBoYXZpbmcgdHlwZSBGaWVsZFBpY2tlckRpYWxvZ1VzZUNhc2VcclxuICBGaWVsZFBpY2tlckRpYWxvZ1VzZUNhc2UgPSAnZmllbGRQaWNrZXJEaWFsb2dVc2VDYXNlJyxcclxuXHJcbiAgLy8gRFBJX1N0YXJ0T2ZXZWVrRW51bSwgaGF2aW5nIHR5cGUgU09XVmFsdWVcclxuICBTdGFydE9mV2Vla0VudW0gPSAnc3RhcnRPZldlZWtFbnVtJyxcclxuXHJcbiAgLy8gRFBJX1N0YXJ0T2ZGaXNjYWxZZWFyLCBoYXZpbmcgdHlwZSBGWVNWYWx1ZXNcclxuICBTdGFydE9mRmlzY2FsWWVhciA9ICdzdGFydE9mRmlzY2FsWWVhcicsXHJcblxyXG4gIC8vIERQSV9Ub3RhbHNJbmNsdXNpb25WYWx1ZSwgaGF2aW5nIHR5cGUgVG90YWxzSW5jbHVzaW9uXHJcbiAgVG90YWxzSW5jbHVzaW9uVmFsdWUgPSAndG90YWxzSW5jbHVzaW9uVmFsdWUnLFxyXG5cclxuICAvLyBEUElfRm9ybWF0Q29kZSwgaGF2aW5nIHR5cGUgRm9ybWF0Q29kZVxyXG4gIEZvcm1hdENvZGUgPSAnZm9ybWF0Q29kZScsXHJcblxyXG4gIC8vIERQSV9GaW5kVHlwZSwgaGF2aW5nIHR5cGUgRmluZFR5cGVcclxuICBGaW5kVHlwZSA9ICdmaW5kVHlwZScsXHJcblxyXG4gIC8vIERQSV9QZXJzcGVjdGl2ZVR5cGUsIGhhdmluZyB0eXBlIFBlcnNwZWN0aXZlVHlwZVxyXG4gIFBlcnNwZWN0aXZlVHlwZSA9ICdwZXJzcGVjdGl2ZVR5cGUnLFxyXG5cclxuICAvLyBEUElfR2VvbWV0cnlUeXBlLCBoYXZpbmcgdHlwZSBHZW9tZXRyeVR5cGVcclxuICBHZW9tZXRyeVR5cGUgPSAnZ2VvbWV0cnlUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1BhbmVMYWJlbENvbXBvc2l0aW9uLCBoYXZpbmcgdHlwZSBQYW5lTGFiZWxDb21wb3NpdGlvblxyXG4gIFBhbmVMYWJlbENvbXBvc2l0aW9uID0gJ3BhbmVMYWJlbENvbXBvc2l0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1dhcm5pbmdUeXBlLCBoYXZpbmcgdHlwZSBXYXJuaW5nVHlwZVxyXG4gIFdhcm5pbmdUeXBlID0gJ3dhcm5pbmdUeXBlJyxcclxuXHJcbiAgLy8gRFBJX1VJTW9kZSwgaGF2aW5nIHR5cGUgV29ya2Jvb2tVSU1vZGVcclxuICBVSU1vZGUgPSAndWlNb2RlJyxcclxuXHJcbiAgLy8gRFBJX01lbnVJdGVtSWQsIGhhdmluZyB0eXBlIFRvcExldmVsTWVudUl0ZW1cclxuICBNZW51SXRlbUlkID0gJ21lbnVJdGVtSWQnLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZFJldHVybiwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgQ29tbWFuZFJldHVybiA9ICdjb21tYW5kUmV0dXJuJyxcclxuXHJcbiAgLy8gRFBJX0xlZ2FjeVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgTGVnYWN5UHJlc01vZGVsID0gJ2xlZ2FjeVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9QcmVzZW50YXRpb25Nb2RlbCwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgUHJlc2VudGF0aW9uTW9kZWwgPSAncHJlc01vZGVsSG9sZGVyJyxcclxuXHJcbiAgLy8gRFBJX0V2ZW50LCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBFdmVudCA9ICdldmVudENvbnRhaW5lcicsXHJcblxyXG4gIC8vIERQSV9MaW5lU3R5bGUsIGhhdmluZyB0eXBlIEFycmF5XHJcbiAgTGluZVN0eWxlID0gJ2xpbmVTdHlsZScsXHJcblxyXG4gIC8vIERQSV9TdHJva2VTdHlsZSwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBTdHJva2VTdHlsZSA9ICdzdHJva2VTdHlsZScsXHJcblxyXG4gIC8vIERQSV9TY2hlbWEsIGhhdmluZyB0eXBlIEFycmF5XHJcbiAgU2NoZW1hID0gJ3NjaGVtYScsXHJcblxyXG4gIC8vIERQSV9TdGFydFR1cGxlLCBoYXZpbmcgdHlwZSBBcnJheVxyXG4gIFN0YXJ0VHVwbGUgPSAnc3RhcnRUdXBsZScsXHJcblxyXG4gIC8vIERQSV9FbmRUdXBsZSwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBFbmRUdXBsZSA9ICdlbmRUdXBsZScsXHJcblxyXG4gIC8vIERQSV9UdXBsZSwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBUdXBsZSA9ICd0dXBsZScsXHJcblxyXG4gIC8vIERQSV9UdXBsZXMsIGhhdmluZyB0eXBlIEFycmF5W11cclxuICBUdXBsZXMgPSAndHVwbGVzJyxcclxuXHJcbiAgLy8gRFBJX0N1c3RvbURvbWFpblR1cGxlcywgaGF2aW5nIHR5cGUgQXJyYXlbXVxyXG4gIEN1c3RvbURvbWFpblR1cGxlcyA9ICdjdXN0b21Eb21haW5UdXBsZXMnLFxyXG5cclxuICAvLyBEUElfVXBkYXRlZFR1cGxlcywgaGF2aW5nIHR5cGUgQXJyYXlbXVxyXG4gIFVwZGF0ZWRUdXBsZXMgPSAndXBkYXRlZFR1cGxlcycsXHJcblxyXG4gIC8vIERQSV9UYWJsZSwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBUYWJsZSA9ICd0YWJsZScsXHJcblxyXG4gIC8vIERQSV9BbGlhc2VkVmFsdWUsIGhhdmluZyB0eXBlIEFycmF5XHJcbiAgQWxpYXNlZFZhbHVlID0gJ3ZhbHVlQWxpYXMnLFxyXG5cclxuICAvLyBEUElfRmlyc3RBbGlhc2VkVmFsdWUsIGhhdmluZyB0eXBlIEFycmF5XHJcbiAgRmlyc3RBbGlhc2VkVmFsdWUgPSAnZmlyc3RBbGlzZWRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9NYXhpbXVtUmFuZ2UsIGhhdmluZyB0eXBlIEFycmF5XHJcbiAgTWF4aW11bVJhbmdlID0gJ21heGltdW1SYW5nZVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX01pbmltdW1SYW5nZSwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBNaW5pbXVtUmFuZ2UgPSAnbWluaW11bVJhbmdlVmFsdWUnLFxyXG5cclxuICAvLyBEUElfU2Vjb25kQWxpYXNlZFZhbHVlLCBoYXZpbmcgdHlwZSBBcnJheVxyXG4gIFNlY29uZEFsaWFzZWRWYWx1ZSA9ICdzZWNvbmRBbGlzZWRWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9BbGlhc2VkU2VsZWN0aW9uTGlzdCwgaGF2aW5nIHR5cGUgQXJyYXlbXVxyXG4gIEFsaWFzZWRTZWxlY3Rpb25MaXN0ID0gJ2FsaWFzZWRTZWxlY3Rpb25MaXN0JyxcclxuXHJcbiAgLy8gRFBJX0FsaWFzZWRWYWx1ZXMsIGhhdmluZyB0eXBlIEFycmF5W11cclxuICBBbGlhc2VkVmFsdWVzID0gJ3ZhbHVlc0FsaWFzZXMnLFxyXG5cclxuICAvLyBEUElfVmVyYm9zZUFsaWFzZWRSYW5nZU1heCwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBWZXJib3NlQWxpYXNlZFJhbmdlTWF4ID0gJ3ZlcmJvc2VBbGlhc2VkUmFuZ2VNYXgnLFxyXG5cclxuICAvLyBEUElfVmVyYm9zZUFsaWFzZWRWYWx1ZSwgaGF2aW5nIHR5cGUgQXJyYXlcclxuICBWZXJib3NlQWxpYXNlZFZhbHVlID0gJ3ZlcmJvc2VBbGlhc2VkVmFsdWUnLFxyXG5cclxuICAvLyBEUElfTXVsdGlCdWNrZXQsIGhhdmluZyB0eXBlIE11bHRpQnVja2V0XHJcbiAgTXVsdGlCdWNrZXQgPSAneFZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9QYWdlTmFtZSwgaGF2aW5nIHR5cGUgUGFnZU5hbWVcclxuICBQYWdlTmFtZSA9ICdwYWdlTmFtZScsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RvciwgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgU2VsZWN0b3IgPSAnc2VsZWN0b3InLFxyXG5cclxuICAvLyBEUElfUGFuZUlkLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBQYW5lSWQgPSAncGFuZUlkJyxcclxuXHJcbiAgLy8gRFBJX1BhbmVJZHMsIGhhdmluZyB0eXBlIFBhbmVJZFtdXHJcbiAgUGFuZUlkcyA9ICdwYW5lSWRzJyxcclxuXHJcbiAgLy8gRFBJX0ltYWdlUmVnaW9uSW5mbywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgSW1hZ2VSZWdpb25JbmZvID0gJ3ZpelJlZ2lvblJlY3QnLFxyXG5cclxuICAvLyBEUElfSW1hZ2VSZWdpb25JbmZvTGlzdCwgaGF2aW5nIHR5cGUgb2JqZWN0W11cclxuICBJbWFnZVJlZ2lvbkluZm9MaXN0ID0gJ3ZpelJlZ2lvblJlY3RMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1Zpc3VhbElELCBoYXZpbmcgdHlwZSBWaXN1YWxJRFxyXG4gIFZpc3VhbElEID0gJ3Zpc3VhbElkJyxcclxuXHJcbiAgLy8gRFBJX1Zpc3VhbElEUE0sIGhhdmluZyB0eXBlIFZpc3VhbElEUHJlc01vZGVsXHJcbiAgVmlzdWFsSURQTSA9ICd2aXN1YWxJZFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9JbnZhbGlkU2hlZXRzLCBoYXZpbmcgdHlwZSBWaXN1YWxJRFByZXNNb2RlbFtdXHJcbiAgSW52YWxpZFNoZWV0cyA9ICdpbnZhbGlkU2hlZXRzJyxcclxuXHJcbiAgLy8gRFBJX1Zpc3VhbElEUE1zLCBoYXZpbmcgdHlwZSBWaXN1YWxJRFByZXNNb2RlbFtdXHJcbiAgVmlzdWFsSURQTXMgPSAndmlzdWFsSWRzJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0UGF0aFBNLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxcclxuICBTaGVldFBhdGhQTSA9ICdzaGVldFBhdGgnLFxyXG5cclxuICAvLyBEUElfQ2FwdHVyZWRTaGVldFBNLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxcclxuICBDYXB0dXJlZFNoZWV0UE0gPSAnY2FwdHVyZWRTaGVldFBtJyxcclxuXHJcbiAgLy8gRFBJX0N1cnJlbnRTaGVldFBNLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxcclxuICBDdXJyZW50U2hlZXRQTSA9ICdjdXJyZW50U2hlZXRQbScsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRQTSwgaGF2aW5nIHR5cGUgU2hlZXRQYXRoUHJlc01vZGVsXHJcbiAgRGFzaGJvYXJkUE0gPSAnZGFzaGJvYXJkUG0nLFxyXG5cclxuICAvLyBEUElfTmV3U2hlZXRQTSwgaGF2aW5nIHR5cGUgU2hlZXRQYXRoUHJlc01vZGVsXHJcbiAgTmV3U2hlZXRQTSA9ICduZXdTaGVldFBtJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0TmFtZVBNLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxcclxuICBTaGVldE5hbWVQTSA9ICdzaGVldE5hbWVQbScsXHJcblxyXG4gIC8vIERQSV9TaGVldFBNLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxcclxuICBTaGVldFBNID0gJ3NoZWV0UG0nLFxyXG5cclxuICAvLyBEUElfU291cmNlRGFzaGJvYXJkUE0sIGhhdmluZyB0eXBlIFNoZWV0UGF0aFByZXNNb2RlbFxyXG4gIFNvdXJjZURhc2hib2FyZFBNID0gJ3NvdXJjZURhc2hib2FyZFBtJyxcclxuXHJcbiAgLy8gRFBJX1NvdXJjZVNoZWV0UE0sIGhhdmluZyB0eXBlIFNoZWV0UGF0aFByZXNNb2RlbFxyXG4gIFNvdXJjZVNoZWV0UE0gPSAnc291cmNlU2hlZXRQbScsXHJcblxyXG4gIC8vIERQSV9UYXJnZXRTaGVldFBNLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxcclxuICBUYXJnZXRTaGVldFBNID0gJ3RhcmdldFNoZWV0UG0nLFxyXG5cclxuICAvLyBEUElfV29ya3NoZWV0UE0sIGhhdmluZyB0eXBlIFNoZWV0UGF0aFByZXNNb2RlbFxyXG4gIFdvcmtzaGVldFBNID0gJ3dvcmtzaGVldFBtJyxcclxuXHJcbiAgLy8gRFBJX01vZGlmaWVkU2hlZXRzLCBoYXZpbmcgdHlwZSBTaGVldFBhdGhQcmVzTW9kZWxbXVxyXG4gIE1vZGlmaWVkU2hlZXRzID0gJ21vZGlmaWVkU2hlZXRzJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFDb2x1bW4sIGhhdmluZyB0eXBlIERhdGFDb2x1bW5QcmVzTW9kZWxcclxuICBEYXRhQ29sdW1uID0gJ2RhdGFDb2x1bW4nLFxyXG5cclxuICAvLyBEUElfRGF0YUNvbHVtbnMsIGhhdmluZyB0eXBlIERhdGFDb2x1bW5QcmVzTW9kZWxbXVxyXG4gIERhdGFDb2x1bW5zID0gJ2RhdGFDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX0FkZHJlc3NlcywgaGF2aW5nIHR5cGUgRGF0YUNvbHVtblByZXNNb2RlbFtdXHJcbiAgQWRkcmVzc2VzID0gJ2FkZHJlc3NlcycsXHJcblxyXG4gIC8vIERQSV9FbmNvZGluZ0NvbHVtbnMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2YgRGF0YUNvbHVtblByZXNNb2RlbClcclxuICBFbmNvZGluZ0NvbHVtbnMgPSAnZW5jb2RpbmdDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX1RleHRSdW5Db2x1bW5zLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIERhdGFDb2x1bW5QcmVzTW9kZWwpXHJcbiAgVGV4dFJ1bkNvbHVtbnMgPSAndGV4dFJ1bkNvbHVtbnMnLFxyXG5cclxuICAvLyBEUElfVGV4dFN0eWxlQ29sdW1ucywgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBEYXRhQ29sdW1uUHJlc01vZGVsKVxyXG4gIFRleHRTdHlsZUNvbHVtbnMgPSAndGV4dFN0eWxlQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9OYW1lZERhdGFDb2x1bW4sIGhhdmluZyB0eXBlIE5hbWVkRGF0YUNvbHVtblByZXNNb2RlbFxyXG4gIE5hbWVkRGF0YUNvbHVtbiA9ICduYW1lZERhdGFDb2x1bW4nLFxyXG5cclxuICAvLyBEUElfTmFtZWREYXRhQ29sdW1ucywgaGF2aW5nIHR5cGUgTmFtZWREYXRhQ29sdW1uUHJlc01vZGVsW11cclxuICBOYW1lZERhdGFDb2x1bW5zID0gJ25hbWVkRGF0YUNvbHVtbnMnLFxyXG5cclxuICAvLyBEUElfRGF0YVRhYmxlLCBoYXZpbmcgdHlwZSBEYXRhVGFibGVQcmVzTW9kZWxcclxuICBEYXRhVGFibGUgPSAnZGF0YVRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0FjdGlvblNwZWNpZmljYXRpb24sIGhhdmluZyB0eXBlIE5vbmVcclxuICBBY3Rpb25TcGVjaWZpY2F0aW9uID0gJ2FjdGlvblNwZWMnLFxyXG5cclxuICAvLyBEUElfQ29sdW1uLCBoYXZpbmcgdHlwZSBDb2x1bW5cclxuICBDb2x1bW4gPSAnY29sdW1uQ29udGV4dCcsXHJcblxyXG4gIC8vIERQSV9TZXRGdW5jdGlvbiwgaGF2aW5nIHR5cGUgU2V0RnVuY3Rpb25cclxuICBTZXRGdW5jdGlvbiA9ICdzZXRGdW5jdGlvbicsXHJcblxyXG4gIC8vIERQSV9TZXRGdW5jdGlvbnMsIGhhdmluZyB0eXBlIFNldEZ1bmN0aW9uc1xyXG4gIFNldEZ1bmN0aW9ucyA9ICdzZXRGdW5jdGlvbnMnLFxyXG5cclxuICAvLyBEUElfVmlzdWFsUHJvZmlsZVNob3dNZSwgaGF2aW5nIHR5cGUgVmlzdWFsUHJvZmlsZVNob3dNZVxyXG4gIFZpc3VhbFByb2ZpbGVTaG93TWUgPSAndnBzbScsXHJcblxyXG4gIC8vIERQSV9EYXRhU291cmNlUHRyLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlXHJcbiAgRGF0YVNvdXJjZVB0ciA9ICdkYXRhc291cmNlUHRyJyxcclxuXHJcbiAgLy8gRFBJX1dvcmtncm91cENvbm5lY3Rpb24sIGhhdmluZyB0eXBlIFdvcmtncm91cENvbm5lY3Rpb25cclxuICBXb3JrZ3JvdXBDb25uZWN0aW9uID0gJ3dvcmtncm91cENvbm5lY3Rpb24nLFxyXG5cclxuICAvLyBEUElfQXV0aGVudGljYXRvciwgaGF2aW5nIHR5cGUgQXV0aGVudGljYXRvclJhd1B0clxyXG4gIEF1dGhlbnRpY2F0b3IgPSAnYXV0aGVudGljYXRvcicsXHJcblxyXG4gIC8vIERQSV9VcGdyYWRlQXR0ciwgaGF2aW5nIHR5cGUgVXBncmFkZUF0dHJcclxuICBVcGdyYWRlQXR0ciA9ICd1cGdyYWRlQXR0cicsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0QXR0ciwgaGF2aW5nIHR5cGUgRXh0cmFjdEF0dHJcclxuICBFeHRyYWN0QXR0ciA9ICdleHRyYWN0QXR0cicsXHJcblxyXG4gIC8vIERQSV9SZWZyZXNoQXR0ciwgaGF2aW5nIHR5cGUgUmVmcmVzaEF0dHJcclxuICBSZWZyZXNoQXR0ciA9ICdyZWZyZXNoQXR0cicsXHJcblxyXG4gIC8vIERQSV9Db250ZXh0U3BlY2lmaWNhdGlvbiwgaGF2aW5nIHR5cGUgQ29udGV4dFNwZWNpZmljYXRpb25cclxuICBDb250ZXh0U3BlY2lmaWNhdGlvbiA9ICdjb250ZXh0U3BlY2lmaWNhdGlvbicsXHJcblxyXG4gIC8vIERQSV9TY2hlbWFWaWV3ZXJTZWxlY3RvciwgaGF2aW5nIHR5cGUgU2NoZW1hVmlld2VyU2VsZWN0b3JQdHJcclxuICBTY2hlbWFWaWV3ZXJTZWxlY3RvciA9ICdzY2hlbWFWaWV3ZXJTZWxlY3RvcicsXHJcblxyXG4gIC8vIERQSV9MZWdlbmRJdGVtcywgaGF2aW5nIHR5cGUgTXVsdGlCdWNrZXRzXHJcbiAgTGVnZW5kSXRlbXMgPSAnbGVnZW5kSXRlbXMnLFxyXG5cclxuICAvLyBEUElfTGVnZW5kSXRlbSwgaGF2aW5nIHR5cGUgTXVsdGlCdWNrZXRcclxuICBMZWdlbmRJdGVtID0gJ2xlZ2VuZEl0ZW0nLFxyXG5cclxuICAvLyBEUElfU291cmNlSXRlbSwgaGF2aW5nIHR5cGUgTXVsdGlCdWNrZXRcclxuICBTb3VyY2VJdGVtID0gJ3NvdXJjZUl0ZW0nLFxyXG5cclxuICAvLyBEUElfRGVzdEl0ZW0sIGhhdmluZyB0eXBlIE11bHRpQnVja2V0XHJcbiAgRGVzdEl0ZW0gPSAnZGVzdEl0ZW0nLFxyXG5cclxuICAvLyBEUElfSVF1aWNrU29ydFN0YXRlLCBoYXZpbmcgdHlwZSBJUXVpY2tTb3J0U3RhdGVcclxuICBJUXVpY2tTb3J0U3RhdGUgPSAncXVpY2tTb3J0U3RhdGUnLFxyXG5cclxuICAvLyBEUElfQXBwQnVpbGREYXRlLCBoYXZpbmcgdHlwZSBEYXRlVGltZVxyXG4gIEFwcEJ1aWxkRGF0ZSA9ICdhcHBCdWlsZERhdGUnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3REYXRlUmFuZ2VFbmQsIGhhdmluZyB0eXBlIERhdGVUaW1lXHJcbiAgRm9yZWNhc3REYXRlUmFuZ2VFbmQgPSAnZm9yZWNhc3REYXRlUmFuZ2VFbmQnLFxyXG5cclxuICAvLyBEUElfRm9yZWNhc3REYXRlUmFuZ2VTdGFydCwgaGF2aW5nIHR5cGUgRGF0ZVRpbWVcclxuICBGb3JlY2FzdERhdGVSYW5nZVN0YXJ0ID0gJ2ZvcmVjYXN0RGF0ZVJhbmdlU3RhcnQnLFxyXG5cclxuICAvLyBEUElfTGFzdE1vZGlmaWVkLCBoYXZpbmcgdHlwZSBEYXRlVGltZVxyXG4gIExhc3RNb2RpZmllZCA9ICdsYXN0TW9kaWZpZWQnLFxyXG5cclxuICAvLyBEUElfU2VhcmNoRG9tYWluUHRyLCBoYXZpbmcgdHlwZSBNdWx0aURvbWFpblxyXG4gIFNlYXJjaERvbWFpblB0ciA9ICdzZWFyY2hEb21haW5QdHInLFxyXG5cclxuICAvLyBEUElfUmVzdWx0c0RvbWFpblB0ciwgaGF2aW5nIHR5cGUgTXVsdGlEb21haW5cclxuICBSZXN1bHRzRG9tYWluUHRyID0gJ3Jlc3VsdHNEb21haW5QdHInLFxyXG5cclxuICAvLyBEUElfQWN0aW9ucywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgQWN0aW9ucyA9ICdhY3Rpb25zJyxcclxuXHJcbiAgLy8gRFBJX1NSQ29tbWFuZHMsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIFNSQ29tbWFuZHMgPSAnc2VsZWN0aW9uUmVsYXhhdGlvbkNvbW1hbmRzJyxcclxuXHJcbiAgLy8gRFBJX0NvbW1hbmRzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBDb21tYW5kcyA9ICdjb21tYW5kcycsXHJcblxyXG4gIC8vIERQSV9EYXRhVHlwZUNvbW1hbmRzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBEYXRhVHlwZUNvbW1hbmRzID0gJ2RhdGF0eXBlQ29tbWFuZHMnLFxyXG5cclxuICAvLyBEUElfTXVsdGlTZWxlY3RDb21tYW5kcywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgTXVsdGlTZWxlY3RDb21tYW5kcyA9ICdtdWx0aXNlbGVjdENvbW1hbmRzJyxcclxuXHJcbiAgLy8gRFBJX05vblZpekNvbW1hbmRzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBOb25WaXpDb21tYW5kcyA9ICdub25WaXpDb21tYW5kcycsXHJcblxyXG4gIC8vIERQSV9RdWlja0ZpbHRlckNvbW1hbmRzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBRdWlja0ZpbHRlckNvbW1hbmRzID0gJ3F1aWNrRmlsdGVyQ29tbWFuZHMnLFxyXG5cclxuICAvLyBEUElfU2hvd01lQ29tbWFuZHMsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIFNob3dNZUNvbW1hbmRzID0gJ3Nob3dNZUNvbW1hbmRzJyxcclxuXHJcbiAgLy8gRFBJX1NvcnRJbmRpY2F0b3JNZW51LCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBTb3J0SW5kaWNhdG9yTWVudSA9ICdzb3J0SW5kaWNhdG9yTWVudScsXHJcblxyXG4gIC8vIERQSV9TdGFuZGFyZENvbW1hbmRzLCBoYXZpbmcgdHlwZSBvYmplY3RcclxuICBTdGFuZGFyZENvbW1hbmRzID0gJ3N0YW5kYXJkQ29tbWFuZHMnLFxyXG5cclxuICAvLyBEUElfVml6Q29tbWFuZHMsIGhhdmluZyB0eXBlIG9iamVjdFxyXG4gIFZpekNvbW1hbmRzID0gJ3ZpekNvbW1hbmRzJyxcclxuXHJcbiAgLy8gRFBJX1pvbmVDaHJvbWVDb21tYW5kcywgaGF2aW5nIHR5cGUgb2JqZWN0XHJcbiAgWm9uZUNocm9tZUNvbW1hbmRzID0gJ3pvbmVDaHJvbWVDb21tYW5kcycsXHJcblxyXG4gIC8vIERQSV9Db21tYW5kSXRlbSwgaGF2aW5nIHR5cGUgQ29tbWFuZHNJdGVtXHJcbiAgQ29tbWFuZEl0ZW0gPSAnY29tbWFuZEl0ZW0nLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZEl0ZW1zLCBoYXZpbmcgdHlwZSBDb21tYW5kc0l0ZW1bXVxyXG4gIENvbW1hbmRJdGVtcyA9ICdjb21tYW5kSXRlbXMnLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBDb21tYW5kID0gJ3NpbXBsZUNvbW1hbmRNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BZGRDb21tYW5kLCBoYXZpbmcgdHlwZSBTaW1wbGVDb21tYW5kc1ByZXNNb2RlbFxyXG4gIEFkZENvbW1hbmQgPSAnYWRkU2ltcGxlQ29tbWFuZE1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1JlbW92ZUNvbW1hbmQsIGhhdmluZyB0eXBlIFNpbXBsZUNvbW1hbmRzUHJlc01vZGVsXHJcbiAgUmVtb3ZlQ29tbWFuZCA9ICdyZW1vdmVTaW1wbGVDb21tYW5kTW9kZWwnLFxyXG5cclxuICAvLyBEUElfQWNjZXB0Q29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBBY2NlcHRDb21tYW5kID0gJ2FjY2VwdFNpbXBsZUNvbW1hbmRNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9EZWNsaW5lQ29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBEZWNsaW5lQ29tbWFuZCA9ICdkZWNsaW5lU2ltcGxlQ29tbWFuZE1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3BDb21tYW5kLCBoYXZpbmcgdHlwZSBTaW1wbGVDb21tYW5kc1ByZXNNb2RlbFxyXG4gIERyb3BDb21tYW5kID0gJ2Ryb3BDb21tYW5kTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRWRpdENhcHRpb25Db21tYW5kLCBoYXZpbmcgdHlwZSBTaW1wbGVDb21tYW5kc1ByZXNNb2RlbFxyXG4gIEVkaXRDYXB0aW9uQ29tbWFuZCA9ICdlZGl0Q2FwdGlvbkNvbW1hbmRNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9Gb250Q29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBGb250Q29tbWFuZCA9ICdmb250Q29tbWFuZE1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0xpbmVTdHlsZUNvbW1hbmQsIGhhdmluZyB0eXBlIFNpbXBsZUNvbW1hbmRzUHJlc01vZGVsXHJcbiAgTGluZVN0eWxlQ29tbWFuZCA9ICdsaW5lU3R5bGVDb21tYW5kTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRm9ybWF0Q29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBGb3JtYXRDb21tYW5kID0gJ2Zvcm1hdENvbW1hbmRNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9EZXN0cnVjdG9yQ29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBEZXN0cnVjdG9yQ29tbWFuZCA9ICdkZXN0cnVjdG9yQ29tbWFuZCcsXHJcblxyXG4gIC8vIERQSV9DbGVhckZvcm1hdENvbW1hbmQsIGhhdmluZyB0eXBlIFNpbXBsZUNvbW1hbmRzUHJlc01vZGVsXHJcbiAgQ2xlYXJGb3JtYXRDb21tYW5kID0gJ2NsZWFyRm9ybWF0Q29tbWFuZE1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1JpY2hUZXh0Q29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBSaWNoVGV4dENvbW1hbmQgPSAncmljaFRleHRDb21tYW5kTW9kZWwnLFxyXG5cclxuICAvLyBEUElfU29ydEluZGljYXRvckNvbW1hbmQsIGhhdmluZyB0eXBlIFNpbXBsZUNvbW1hbmRzUHJlc01vZGVsXHJcbiAgU29ydEluZGljYXRvckNvbW1hbmQgPSAnc29ydEluZGljYXRvckNvbW1hbmQnLFxyXG5cclxuICAvLyBEUElfUmVsZWFzZVN0b3JlQ29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBSZWxlYXNlU3RvcmVDb21tYW5kID0gJ3JlbGVhc2VTdG9yZUNvbW1hbmQnLFxyXG5cclxuICAvLyBEUElfQ29uZmlybWF0aW9uQ29tbWFuZCwgaGF2aW5nIHR5cGUgU2ltcGxlQ29tbWFuZHNQcmVzTW9kZWxcclxuICBDb25maXJtYXRpb25Db21tYW5kID0gJ2NvbmZpcm1hdGlvbkNvbW1hbmQnLFxyXG5cclxuICAvLyBEUElfQ29tbWFuZExpc3QsIGhhdmluZyB0eXBlIFNpbXBsZUNvbW1hbmRzUHJlc01vZGVsW11cclxuICBDb21tYW5kTGlzdCA9ICdjb21tYW5kTGlzdCcsXHJcblxyXG4gIC8vIERQSV9QYXJhbWV0ZXJDdHJsLCBoYXZpbmcgdHlwZSBQYXJhbWV0ZXJDdHJsUHJlc01vZGVsXHJcbiAgUGFyYW1ldGVyQ3RybCA9ICdwYXJhbWV0ZXJDb250cm9sJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlckN0cmxzLCBoYXZpbmcgdHlwZSBQYXJhbWV0ZXJDdHJsUHJlc01vZGVsW11cclxuICBQYXJhbWV0ZXJDdHJscyA9ICdwYXJhbWV0ZXJDb250cm9scycsXHJcblxyXG4gIC8vIERQSV9QYWdlTW9kZWwsIGhhdmluZyB0eXBlIFBhZ2VQcmVzTW9kZWxcclxuICBQYWdlTW9kZWwgPSAncGFnZU1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VUcmFpbE9wdGlvbnMsIGhhdmluZyB0eXBlIFBhZ2VUcmFpbE9wdGlvbnNQcmVzTW9kZWxcclxuICBQYWdlVHJhaWxPcHRpb25zID0gJ3BhZ2VUcmFpbE9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfRmllbGQsIGhhdmluZyB0eXBlIEZpZWxkUHJlc01vZGVsXHJcbiAgRmllbGQgPSAnZmllbGQnLFxyXG5cclxuICAvLyBEUElfRmllbGRMaXN0LCBoYXZpbmcgdHlwZSBGaWVsZFByZXNNb2RlbFtdXHJcbiAgRmllbGRMaXN0ID0gJ2ZpZWxkTGlzdCcsXHJcblxyXG4gIC8vIERQSV9EaW1lbnNpb25zRmllbGRMaXN0LCBoYXZpbmcgdHlwZSBGaWVsZFByZXNNb2RlbFtdXHJcbiAgRGltZW5zaW9uc0ZpZWxkTGlzdCA9ICdkaW1lbnNpb25zRmllbGRMaXN0JyxcclxuXHJcbiAgLy8gRFBJX01lYXN1cmVzRmllbGRMaXN0LCBoYXZpbmcgdHlwZSBGaWVsZFByZXNNb2RlbFtdXHJcbiAgTWVhc3VyZXNGaWVsZExpc3QgPSAnbWVhc3VyZXNGaWVsZExpc3QnLFxyXG5cclxuICAvLyBEUElfU2V0c0ZpZWxkTGlzdCwgaGF2aW5nIHR5cGUgRmllbGRQcmVzTW9kZWxbXVxyXG4gIFNldHNGaWVsZExpc3QgPSAnc2V0c0ZpZWxkTGlzdCcsXHJcblxyXG4gIC8vIERQSV9QYXJhbWV0ZXJzRmllbGRMaXN0LCBoYXZpbmcgdHlwZSBGaWVsZFByZXNNb2RlbFtdXHJcbiAgUGFyYW1ldGVyc0ZpZWxkTGlzdCA9ICdwYXJhbWV0ZXJzRmllbGRMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkQ29sdW1uLCBoYXZpbmcgdHlwZSBGaWVsZENvbHVtblByZXNNb2RlbFxyXG4gIEZpZWxkQ29sdW1uID0gJ2NvbHVtbicsXHJcblxyXG4gIC8vIERQSV9GaWVsZENvbHVtbkxpc3QsIGhhdmluZyB0eXBlIEZpZWxkQ29sdW1uUHJlc01vZGVsW11cclxuICBGaWVsZENvbHVtbkxpc3QgPSAnY29sdW1uTGlzdCcsXHJcblxyXG4gIC8vIERQSV9TdHJ1Y3R1cmVkTWVhc3VyZSwgaGF2aW5nIHR5cGUgU3RydWN0dXJlZE1lYXN1cmVQcmVzTW9kZWxcclxuICBTdHJ1Y3R1cmVkTWVhc3VyZSA9ICdzdHJ1Y3R1cmVkTWVhc3VyZScsXHJcblxyXG4gIC8vIERQSV9TdHJ1Y3R1cmVkTWVhc3VyZUxpc3QsIGhhdmluZyB0eXBlIFN0cnVjdHVyZWRNZWFzdXJlUHJlc01vZGVsW11cclxuICBTdHJ1Y3R1cmVkTWVhc3VyZUxpc3QgPSAnc3RydWN0dXJlZE1lYXN1cmVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0xldmVsLCBoYXZpbmcgdHlwZSBMZXZlbFByZXNNb2RlbFxyXG4gIExldmVsID0gJ2xldmVsJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlciwgaGF2aW5nIHR5cGUgUGFyYW1ldGVyUHJlc01vZGVsXHJcbiAgUGFyYW1ldGVyID0gJ3BhcmFtZXRlcicsXHJcblxyXG4gIC8vIERQSV9CYXNlRGltZW5zaW9uLCBoYXZpbmcgdHlwZSBCYXNlRGltZW5zaW9uUHJlc01vZGVsXHJcbiAgQmFzZURpbWVuc2lvbiA9ICdiYXNlRGltZW5zaW9uJyxcclxuXHJcbiAgLy8gRFBJX0RpbWVuc2lvbiwgaGF2aW5nIHR5cGUgRGltZW5zaW9uUHJlc01vZGVsXHJcbiAgRGltZW5zaW9uID0gJ2RpbWVuc2lvbicsXHJcblxyXG4gIC8vIERQSV9BdHRyaWJ1dGVEaW1lbnNpb25MaXN0LCBoYXZpbmcgdHlwZSBEaW1lbnNpb25QcmVzTW9kZWxbXVxyXG4gIEF0dHJpYnV0ZURpbWVuc2lvbkxpc3QgPSAnYXR0cmlidXRlRGltZW5zaW9uTGlzdCcsXHJcblxyXG4gIC8vIERQSV9BdHRyaWJ1dGVEaW1lbnNpb24sIGhhdmluZyB0eXBlIEF0dHJpYnV0ZURpbWVuc2lvblByZXNNb2RlbFxyXG4gIEF0dHJpYnV0ZURpbWVuc2lvbiA9ICdhdHRyaWJ1dGVEaW1lbnNpb24nLFxyXG5cclxuICAvLyBEUElfQXR0cmlidXRlQXR0cmlidXRlRGltZW5zaW9uTGlzdCwgaGF2aW5nIHR5cGUgQXR0cmlidXRlRGltZW5zaW9uUHJlc01vZGVsW11cclxuICBBdHRyaWJ1dGVBdHRyaWJ1dGVEaW1lbnNpb25MaXN0ID0gJ2F0dHJpYnV0ZUF0dHJpYnV0ZURpbWVuc2lvbkxpc3QnLFxyXG5cclxuICAvLyBEUElfU3RhbmRhcmREaW1lbnNpb24sIGhhdmluZyB0eXBlIFN0YW5kYXJkRGltZW5zaW9uUHJlc01vZGVsXHJcbiAgU3RhbmRhcmREaW1lbnNpb24gPSAnc3RhbmRhcmREaW1lbnNpb24nLFxyXG5cclxuICAvLyBEUElfUmVsYXRpb25hbFRhYmxlLCBoYXZpbmcgdHlwZSBSZWxhdGlvbmFsVGFibGVQcmVzTW9kZWxcclxuICBSZWxhdGlvbmFsVGFibGUgPSAncmVsYXRpb25hbFRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0RyaWxsUGF0aCwgaGF2aW5nIHR5cGUgRHJpbGxQYXRoUHJlc01vZGVsXHJcbiAgRHJpbGxQYXRoID0gJ2RyaWxsUGF0aCcsXHJcblxyXG4gIC8vIERQSV9GaWVsZEZvbGRlciwgaGF2aW5nIHR5cGUgRmllbGRGb2xkZXJQcmVzTW9kZWxcclxuICBGaWVsZEZvbGRlciA9ICdmaWVsZEZvbGRlcicsXHJcblxyXG4gIC8vIERQSV9Hcm91cCwgaGF2aW5nIHR5cGUgR3JvdXBQcmVzTW9kZWxcclxuICBHcm91cCA9ICdncm91cCcsXHJcblxyXG4gIC8vIERQSV9Vc2VyRGVmaW5lZEF0dHJpYnV0ZUxpc3QsIGhhdmluZyB0eXBlIEdyb3VwUHJlc01vZGVsW11cclxuICBVc2VyRGVmaW5lZEF0dHJpYnV0ZUxpc3QgPSAndXNlckRlZmluZWRBdHRyaWJ1dGVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0hpZXJhcmNoeSwgaGF2aW5nIHR5cGUgSGllcmFyY2h5UHJlc01vZGVsXHJcbiAgSGllcmFyY2h5ID0gJ2hpZXJhcmNoeScsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlMaXN0LCBoYXZpbmcgdHlwZSBIaWVyYXJjaHlQcmVzTW9kZWxbXVxyXG4gIEhpZXJhcmNoeUxpc3QgPSAnaGllcmFyY2h5TGlzdCcsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlNZW1iZXJTZWxlY3RlZFN0YXRlLCBoYXZpbmcgdHlwZSBIaWVyYXJjaHlTZWxlY3RfTWVtYmVyU2VsZWN0ZWRTdGF0ZVByZXNNb2RlbFxyXG4gIEhpZXJhcmNoeU1lbWJlclNlbGVjdGVkU3RhdGUgPSAnaGllcmFyY2h5TWVtYmVyU2VsZWN0ZWRTdGF0ZScsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlTZWxlY3Rpb25DaGFuZ2VzLCBoYXZpbmcgdHlwZSBIaWVyYXJjaHlTZWxlY3RfTWVtYmVyU2VsZWN0ZWRTdGF0ZVByZXNNb2RlbFtdXHJcbiAgSGllcmFyY2h5U2VsZWN0aW9uQ2hhbmdlcyA9ICdoaWVyYXJjaHlTZWxlY3Rpb25DaGFuZ2VzJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3BsYXlGb2xkZXIsIGhhdmluZyB0eXBlIERpc3BsYXlGb2xkZXJQcmVzTW9kZWxcclxuICBEaXNwbGF5Rm9sZGVyID0gJ2Rpc3BsYXlGb2xkZXInLFxyXG5cclxuICAvLyBEUElfRGlzcGxheUZvbGRlckxpc3QsIGhhdmluZyB0eXBlIERpc3BsYXlGb2xkZXJQcmVzTW9kZWxbXVxyXG4gIERpc3BsYXlGb2xkZXJMaXN0ID0gJ2Rpc3BsYXlGb2xkZXJMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VMYXlvdXQsIGhhdmluZyB0eXBlIERhdGFTb3VyY2VMYXlvdXRQcmVzTW9kZWxcclxuICBEYXRhU291cmNlTGF5b3V0ID0gJ2RhdGFTb3VyY2VMYXlvdXQnLFxyXG5cclxuICAvLyBEUElfQmFzZURhdGFTb3VyY2UsIGhhdmluZyB0eXBlIEJhc2VEYXRhU291cmNlUHJlc01vZGVsXHJcbiAgQmFzZURhdGFTb3VyY2UgPSAnYmFzZURhdGFTb3VyY2UnLFxyXG5cclxuICAvLyBEUElfQmFzZURhdGFTb3VyY2VzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIEJhc2VEYXRhU291cmNlUHJlc01vZGVsKVxyXG4gIEJhc2VEYXRhU291cmNlcyA9ICdiYXNlRGF0YVNvdXJjZXMnLFxyXG5cclxuICAvLyBEUElfRGF0YVNvdXJjZSwgaGF2aW5nIHR5cGUgRGF0YVNvdXJjZVByZXNNb2RlbFxyXG4gIERhdGFTb3VyY2UgPSAnZGF0YVNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9EYXRhU291cmNlcywgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBEYXRhU291cmNlUHJlc01vZGVsKVxyXG4gIERhdGFTb3VyY2VzID0gJ2RhdGFTb3VyY2VzJyxcclxuXHJcbiAgLy8gRFBJX1NjaGVtYVZpZXdlckRhdGFTb3VyY2UsIGhhdmluZyB0eXBlIFNjaGVtYVZpZXdlckRhdGFTb3VyY2VQcmVzTW9kZWxcclxuICBTY2hlbWFWaWV3ZXJEYXRhU291cmNlID0gJ3NjaGVtYVZpZXdlckRhdGFTb3VyY2UnLFxyXG5cclxuICAvLyBEUElfU2NoZW1hVmlld2VyUGFyYW1ldGVyRGF0YVNvdXJjZSwgaGF2aW5nIHR5cGUgU2NoZW1hVmlld2VyRGF0YVNvdXJjZVByZXNNb2RlbFxyXG4gIFNjaGVtYVZpZXdlclBhcmFtZXRlckRhdGFTb3VyY2UgPSAnc2NoZW1hVmlld2VyUGFyYW1ldGVyRGF0YVNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9TY2hlbWFWaWV3ZXJEYXRhU291cmNlcywgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBTY2hlbWFWaWV3ZXJEYXRhU291cmNlUHJlc01vZGVsKVxyXG4gIFNjaGVtYVZpZXdlckRhdGFTb3VyY2VzID0gJ3NjaGVtYVZpZXdlckRhdGFTb3VyY2VzJyxcclxuXHJcbiAgLy8gRFBJX0Jhc2VEYXRhU2NoZW1hLCBoYXZpbmcgdHlwZSBCYXNlRGF0YVNjaGVtYVByZXNNb2RlbFxyXG4gIEJhc2VEYXRhU2NoZW1hID0gJ2Jhc2VEYXRhU2NoZW1hJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTY2hlbWEsIGhhdmluZyB0eXBlIERhdGFTY2hlbWFQcmVzTW9kZWxcclxuICBEYXRhU2NoZW1hID0gJ2RhdGFTY2hlbWEnLFxyXG5cclxuICAvLyBEUElfU2NoZW1hVmlld2VyRGF0YVNjaGVtYSwgaGF2aW5nIHR5cGUgU2NoZW1hVmlld2VyRGF0YVNjaGVtYVByZXNNb2RlbFxyXG4gIFNjaGVtYVZpZXdlckRhdGFTY2hlbWEgPSAnc2NoZW1hVmlld2VyRGF0YVNjaGVtYScsXHJcblxyXG4gIC8vIERQSV9TY2hlbWFWaWV3ZXJNZW51VHlwZSwgaGF2aW5nIHR5cGUgU2NoZW1hVmlld2VyTWVudVR5cGVcclxuICBTY2hlbWFWaWV3ZXJNZW51VHlwZSA9ICdzY2hlbWFWaWV3ZXJNZW51VHlwZScsXHJcblxyXG4gIC8vIERQSV9TaGVldExpc3RJdGVtLCBoYXZpbmcgdHlwZSBTaGVldExpc3RJdGVtUHJlc01vZGVsXHJcbiAgU2hlZXRMaXN0SXRlbSA9ICdzaGVldExpc3RJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0TGlzdEl0ZW1zLCBoYXZpbmcgdHlwZSBTaGVldExpc3RJdGVtUHJlc01vZGVsW11cclxuICBTaGVldExpc3RJdGVtcyA9ICdzaGVldExpc3RJdGVtcycsXHJcblxyXG4gIC8vIERQSV9TaGVldExpc3QsIGhhdmluZyB0eXBlIFNoZWV0TGlzdFByZXNNb2RlbFxyXG4gIFNoZWV0TGlzdCA9ICdzaGVldExpc3QnLFxyXG5cclxuICAvLyBEUElfU2l6ZU1vZGVPcHRpb24sIGhhdmluZyB0eXBlIFNpemVNb2RlT3B0aW9uUHJlc01vZGVsXHJcbiAgU2l6ZU1vZGVPcHRpb24gPSAnc2l6ZU1vZGVPcHRpb24nLFxyXG5cclxuICAvLyBEUElfU2l6ZU1vZGVPcHRpb25zLCBoYXZpbmcgdHlwZSBTaXplTW9kZU9wdGlvblByZXNNb2RlbFtdXHJcbiAgU2l6ZU1vZGVPcHRpb25zID0gJ3NpemVNb2RlT3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRTaXplQ29udHJvbCwgaGF2aW5nIHR5cGUgRGFzaGJvYXJkU2l6ZUNvbnRyb2xQcmVzTW9kZWxcclxuICBEYXNoYm9hcmRTaXplQ29udHJvbCA9ICdkYXNoYm9hcmRTaXplQ29udHJvbCcsXHJcblxyXG4gIC8vIERQSV9EZXZpY2VMYXlvdXRJbmZvSXRlbSwgaGF2aW5nIHR5cGUgRGV2aWNlTGF5b3V0SW5mb0l0ZW1QcmVzTW9kZWxcclxuICBEZXZpY2VMYXlvdXRJbmZvSXRlbSA9ICdkZXZpY2VMYXlvdXRJbmZvSXRlbScsXHJcblxyXG4gIC8vIERQSV9EZXZpY2VMYXlvdXRJbmZvSXRlbXMsIGhhdmluZyB0eXBlIERldmljZUxheW91dEluZm9JdGVtUHJlc01vZGVsW11cclxuICBEZXZpY2VMYXlvdXRJbmZvSXRlbXMgPSAnZGV2aWNlTGF5b3V0SW5mb0l0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0RldmljZUxheW91dEluZm9MaXN0LCBoYXZpbmcgdHlwZSBEZXZpY2VMYXlvdXRJbmZvTGlzdFByZXNNb2RlbFxyXG4gIERldmljZUxheW91dEluZm9MaXN0ID0gJ2RldmljZUxheW91dEluZm9MaXN0JyxcclxuXHJcbiAgLy8gRFBJX1NwZWNpYWxpemVkRGV2aWNlTGF5b3V0SXRlbSwgaGF2aW5nIHR5cGUgU3BlY2lhbGl6ZWREZXZpY2VMYXlvdXRJdGVtUHJlc01vZGVsXHJcbiAgU3BlY2lhbGl6ZWREZXZpY2VMYXlvdXRJdGVtID0gJ3NwZWNpYWxpemVkRGV2aWNlTGF5b3V0SXRlbScsXHJcblxyXG4gIC8vIERQSV9TcGVjaWFsaXplZERldmljZUxheW91dEl0ZW1zLCBoYXZpbmcgdHlwZSBTcGVjaWFsaXplZERldmljZUxheW91dEl0ZW1QcmVzTW9kZWxbXVxyXG4gIFNwZWNpYWxpemVkRGV2aWNlTGF5b3V0SXRlbXMgPSAnc3BlY2lhbGl6ZWREZXZpY2VMYXlvdXRJdGVtcycsXHJcblxyXG4gIC8vIERQSV9TcGVjaWFsaXplZERldmljZUxheW91dExpc3QsIGhhdmluZyB0eXBlIFNwZWNpYWxpemVkRGV2aWNlTGF5b3V0TGlzdFByZXNNb2RlbFxyXG4gIFNwZWNpYWxpemVkRGV2aWNlTGF5b3V0TGlzdCA9ICdzcGVjaWFsaXplZERldmljZUxheW91dExpc3QnLFxyXG5cclxuICAvLyBEUElfU2l6ZUl0ZW0sIGhhdmluZyB0eXBlIFNpemVJdGVtUHJlc01vZGVsXHJcbiAgU2l6ZUl0ZW0gPSAnc2l6ZUl0ZW0nLFxyXG5cclxuICAvLyBEUElfU2l6ZUl0ZW1zLCBoYXZpbmcgdHlwZSBTaXplSXRlbVByZXNNb2RlbFtdXHJcbiAgU2l6ZUl0ZW1zID0gJ3NpemVJdGVtcycsXHJcblxyXG4gIC8vIERQSV9EZXZpY2VTaXplc0xpc3QsIGhhdmluZyB0eXBlIFNpemVJdGVtTGlzdFByZXNNb2RlbFxyXG4gIERldmljZVNpemVzTGlzdCA9ICdkZXZpY2VTaXplc0xpc3QnLFxyXG5cclxuICAvLyBEUElfUHJlc2V0U2l6ZXNMaXN0LCBoYXZpbmcgdHlwZSBTaXplSXRlbUxpc3RQcmVzTW9kZWxcclxuICBQcmVzZXRTaXplc0xpc3QgPSAncHJlc2V0U2l6ZXNMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1NpemVJdGVtTGlzdCwgaGF2aW5nIHR5cGUgU2l6ZUl0ZW1MaXN0UHJlc01vZGVsXHJcbiAgU2l6ZUl0ZW1MaXN0ID0gJ3NpemVJdGVtTGlzdCcsXHJcblxyXG4gIC8vIERQSV9TdWJzdGl0dXRpb25LZXl3b3JkLCBoYXZpbmcgdHlwZSBTdWJzdGl0dXRpb25LZXl3b3JkUHJlc01vZGVsXHJcbiAgU3Vic3RpdHV0aW9uS2V5d29yZCA9ICdzdWJzdGl0dXRpb25LZXl3b3JkJyxcclxuXHJcbiAgLy8gRFBJX1N1YnN0aXR1dGlvbktleXdvcmRzLCBoYXZpbmcgdHlwZSBTdWJzdGl0dXRpb25LZXl3b3JkUHJlc01vZGVsW11cclxuICBTdWJzdGl0dXRpb25LZXl3b3JkcyA9ICdzdWJzdGl0dXRpb25LZXl3b3JkcycsXHJcblxyXG4gIC8vIERQSV9TdWJzdGl0dXRpb25LZXl3b3JkU3ViTGlzdCwgaGF2aW5nIHR5cGUgU3Vic3RpdHV0aW9uS2V5d29yZFN1Ykxpc3RQcmVzTW9kZWxcclxuICBTdWJzdGl0dXRpb25LZXl3b3JkU3ViTGlzdCA9ICdzdWJzdGl0dXRpb25LZXl3b3Jkc1N1Ymxpc3QnLFxyXG5cclxuICAvLyBEUElfU3Vic3RpdHV0aW9uS2V5d29yZFN1Ykxpc3RzLCBoYXZpbmcgdHlwZSBTdWJzdGl0dXRpb25LZXl3b3JkU3ViTGlzdFByZXNNb2RlbFtdXHJcbiAgU3Vic3RpdHV0aW9uS2V5d29yZFN1Ykxpc3RzID0gJ3N1YnN0aXR1dGlvbktleXdvcmRTdWJsaXN0cycsXHJcblxyXG4gIC8vIERQSV9TdWJzdGl0dXRpb25LZXl3b3JkTGlzdCwgaGF2aW5nIHR5cGUgU3Vic3RpdHV0aW9uS2V5d29yZExpc3RQcmVzTW9kZWxcclxuICBTdWJzdGl0dXRpb25LZXl3b3JkTGlzdCA9ICdzdWJzdGl0dXRpb25LZXl3b3Jkc0xpc3QnLFxyXG5cclxuICAvLyBEUElfRGV2aWNlWm9uZUxpc3RJdGVtLCBoYXZpbmcgdHlwZSBEZXZpY2Vab25lTGlzdEl0ZW1QcmVzTW9kZWxcclxuICBEZXZpY2Vab25lTGlzdEl0ZW0gPSAnZGV2aWNlWm9uZUxpc3RJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0RldmljZVpvbmVMaXN0SXRlbXMsIGhhdmluZyB0eXBlIERldmljZVpvbmVMaXN0SXRlbVByZXNNb2RlbFtdXHJcbiAgRGV2aWNlWm9uZUxpc3RJdGVtcyA9ICdkZXZpY2Vab25lTGlzdEl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0RldmljZVpvbmVMaXN0LCBoYXZpbmcgdHlwZSBEZXZpY2Vab25lTGlzdFByZXNNb2RlbFxyXG4gIERldmljZVpvbmVMaXN0ID0gJ2RldmljZVpvbmVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1pvbmVTbmFwTGluZUxpc3RJdGVtLCBoYXZpbmcgdHlwZSBab25lU25hcExpbmVMaXN0SXRlbVByZXNNb2RlbFxyXG4gIFpvbmVTbmFwTGluZUxpc3RJdGVtID0gJ3NuYXBMaW5lTGlzdEl0ZW0nLFxyXG5cclxuICAvLyBEUElfT3V0ZXJIb3Jpem9udGFsU25hcExpbmVzLCBoYXZpbmcgdHlwZSBab25lU25hcExpbmVMaXN0SXRlbVByZXNNb2RlbFtdXHJcbiAgT3V0ZXJIb3Jpem9udGFsU25hcExpbmVzID0gJ291dGVySG9yaXpvbnRhbFNuYXBMaW5lcycsXHJcblxyXG4gIC8vIERQSV9PdXRlclZlcnRpY2FsU25hcExpbmVzLCBoYXZpbmcgdHlwZSBab25lU25hcExpbmVMaXN0SXRlbVByZXNNb2RlbFtdXHJcbiAgT3V0ZXJWZXJ0aWNhbFNuYXBMaW5lcyA9ICdvdXRlclZlcnRpY2FsU25hcExpbmVzJyxcclxuXHJcbiAgLy8gRFBJX0lubmVySG9yaXpvbnRhbFNuYXBMaW5lcywgaGF2aW5nIHR5cGUgWm9uZVNuYXBMaW5lTGlzdEl0ZW1QcmVzTW9kZWxbXVxyXG4gIElubmVySG9yaXpvbnRhbFNuYXBMaW5lcyA9ICdpbm5lckhvcml6b250YWxTbmFwTGluZXMnLFxyXG5cclxuICAvLyBEUElfSW5uZXJWZXJ0aWNhbFNuYXBMaW5lcywgaGF2aW5nIHR5cGUgWm9uZVNuYXBMaW5lTGlzdEl0ZW1QcmVzTW9kZWxbXVxyXG4gIElubmVyVmVydGljYWxTbmFwTGluZXMgPSAnaW5uZXJWZXJ0aWNhbFNuYXBMaW5lcycsXHJcblxyXG4gIC8vIERQSV9ab25lU25hcExpbmVMaXN0LCBoYXZpbmcgdHlwZSBab25lU25hcExpbmVMaXN0UHJlc01vZGVsXHJcbiAgWm9uZVNuYXBMaW5lTGlzdCA9ICdzbmFwTGluZUxpc3QnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkWm9uZUhpZXJhcmNoeSwgaGF2aW5nIHR5cGUgRGFzaGJvYXJkWm9uZUhpZXJhcmNoeVByZXNNb2RlbFxyXG4gIERhc2hib2FyZFpvbmVIaWVyYXJjaHkgPSAnZGFzaGJvYXJkWm9uZUhpZXJhcmNoeScsXHJcblxyXG4gIC8vIERQSV9EZXZpY2Vab25lVmlzaWJpbGl0eUxpc3RJdGVtLCBoYXZpbmcgdHlwZSBEZXZpY2Vab25lVmlzaWJpbGl0eUxpc3RJdGVtUHJlc01vZGVsXHJcbiAgRGV2aWNlWm9uZVZpc2liaWxpdHlMaXN0SXRlbSA9ICdkZXZpY2Vab25lVmlzaWJpbGl0eUxpc3RJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0RldmljZVpvbmVWaXNpYmlsaXR5TGlzdEl0ZW1zLCBoYXZpbmcgdHlwZSBEZXZpY2Vab25lVmlzaWJpbGl0eUxpc3RJdGVtUHJlc01vZGVsW11cclxuICBEZXZpY2Vab25lVmlzaWJpbGl0eUxpc3RJdGVtcyA9ICdkZXZpY2Vab25lVmlzaWJpbGl0eUxpc3RJdGVtcycsXHJcblxyXG4gIC8vIERQSV9EZXZpY2Vab25lVmlzaWJpbGl0eUxpc3QsIGhhdmluZyB0eXBlIERldmljZVpvbmVWaXNpYmlsaXR5TGlzdFByZXNNb2RlbFxyXG4gIERldmljZVpvbmVWaXNpYmlsaXR5TGlzdCA9ICdkZXZpY2Vab25lVmlzaWJpbGl0eUxpc3QnLFxyXG5cclxuICAvLyBEUElfV29ya3NoZWV0RGF0YVNjaGVtYSwgaGF2aW5nIHR5cGUgV29ya3NoZWV0RGF0YVNjaGVtYVByZXNNb2RlbFxyXG4gIFdvcmtzaGVldERhdGFTY2hlbWEgPSAnd29ya3NoZWV0RGF0YVNjaGVtYScsXHJcblxyXG4gIC8vIERQSV9Xb3Jrc2hlZXREYXRhU2NoZW1hTWFwLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIFdvcmtzaGVldERhdGFTY2hlbWFQcmVzTW9kZWwpXHJcbiAgV29ya3NoZWV0RGF0YVNjaGVtYU1hcCA9ICd3b3Jrc2hlZXREYXRhU2NoZW1hTWFwJyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmLCBoYXZpbmcgdHlwZSBTaGVsZlByZXNNb2RlbFxyXG4gIFNoZWxmID0gJ3NoZWxmJyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmRGV0YWlsLCBoYXZpbmcgdHlwZSBTaGVsZlByZXNNb2RlbFxyXG4gIFNoZWxmRGV0YWlsID0gJ3NoZWxmRGV0YWlsJyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmTGlzdCwgaGF2aW5nIHR5cGUgU2hlbGZQcmVzTW9kZWxbXVxyXG4gIFNoZWxmTGlzdCA9ICdzaGVsZkxpc3QnLFxyXG5cclxuICAvLyBEUElfU2hlbGZJdGVtLCBoYXZpbmcgdHlwZSBTaGVsZkl0ZW1QcmVzTW9kZWxcclxuICBTaGVsZkl0ZW0gPSAnc2hlbGZJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmSXRlbXMsIGhhdmluZyB0eXBlIFNoZWxmSXRlbVByZXNNb2RlbFtdXHJcbiAgU2hlbGZJdGVtcyA9ICdzaGVsZkl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX1NoZWx2ZXMsIGhhdmluZyB0eXBlIFNoZWx2ZXNQcmVzTW9kZWxcclxuICBTaGVsdmVzID0gJ3NoZWx2ZXMnLFxyXG5cclxuICAvLyBEUElfRmllbGRFbmNvZGluZywgaGF2aW5nIHR5cGUgRmllbGRFbmNvZGluZ1ByZXNNb2RlbFxyXG4gIEZpZWxkRW5jb2RpbmcgPSAnZmllbGRFbmNvZGluZycsXHJcblxyXG4gIC8vIERQSV9GaWVsZEVuY29kaW5ncywgaGF2aW5nIHR5cGUgRmllbGRFbmNvZGluZ1ByZXNNb2RlbFtdXHJcbiAgRmllbGRFbmNvZGluZ3MgPSAnZmllbGRFbmNvZGluZ3MnLFxyXG5cclxuICAvLyBEUElfVWJlclRpcCwgaGF2aW5nIHR5cGUgVWJlclRpcFByZXNNb2RlbFxyXG4gIFViZXJUaXAgPSAndWJlclRpcCcsXHJcblxyXG4gIC8vIERQSV9BbmFseXRpY3NPYmplY3REcmFnSW5mbywgaGF2aW5nIHR5cGUgQW5hbHl0aWNzT2JqZWN0RHJhZ0luZm9QcmVzTW9kZWxcclxuICBBbmFseXRpY3NPYmplY3REcmFnSW5mbyA9ICdhbmFseXRpY3NPYmplY3REcmFnSW5mbycsXHJcblxyXG4gIC8vIERQSV9UcmVuZExpbmUsIGhhdmluZyB0eXBlIFRyZW5kTGluZVByZXNNb2RlbFxyXG4gIFRyZW5kTGluZSA9ICd0cmVuZExpbmUnLFxyXG5cclxuICAvLyBEUElfVHJlbmRMaW5lRGlhbG9nLCBoYXZpbmcgdHlwZSBUcmVuZExpbmVEaWFsb2dQcmVzTW9kZWxcclxuICBUcmVuZExpbmVEaWFsb2cgPSAndHJlbmRMaW5lRGlhbG9nJyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZURlc2NyaWJlUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUcmVuZExpbmVEZXNjcmliZVByZXNNb2RlbFxyXG4gIFRyZW5kTGluZURlc2NyaWJlUHJlc01vZGVsID0gJ3RyZW5kTGluZURlc2NyaWJlUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZUFPVk1vZGVsUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUcmVuZExpbmVBT1ZNb2RlbFByZXNNb2RlbFxyXG4gIFRyZW5kTGluZUFPVk1vZGVsUHJlc01vZGVsID0gJ3RyZW5kTGluZUFvdk1vZGVsUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZUFPVk1vZGVsc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgVHJlbmRMaW5lQU9WTW9kZWxQcmVzTW9kZWxbXVxyXG4gIFRyZW5kTGluZUFPVk1vZGVsc1ByZXNNb2RlbCA9ICd0cmVuZE1vZGVsRGVzY3JpcHRpb25WZWN0b3InLFxyXG5cclxuICAvLyBEUElfVHJlbmRMaW5lTGluZUNvZWZmaWNpZW50UHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUcmVuZExpbmVMaW5lQ29lZmZpY2llbnRQcmVzTW9kZWxcclxuICBUcmVuZExpbmVMaW5lQ29lZmZpY2llbnRQcmVzTW9kZWwgPSAndHJlbmRMaW5lTGluZUNvZWZmaWNpZW50JyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZUxpbmVDb2VmZmljaWVudHNQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFRyZW5kTGluZUxpbmVDb2VmZmljaWVudFByZXNNb2RlbFtdXHJcbiAgVHJlbmRMaW5lTGluZUNvZWZmaWNpZW50c1ByZXNNb2RlbCA9ICd0cmVuZExpbmVMaW5lQ29lZmZpY2llbnRzUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZUxpbmVzUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUcmVuZExpbmVMaW5lc1ByZXNNb2RlbFxyXG4gIFRyZW5kTGluZUxpbmVzUHJlc01vZGVsID0gJ3RyZW5kTGluZUxpbmVzUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1RyZW5kTGluZUFPVlByZXNNb2RlbCwgaGF2aW5nIHR5cGUgVHJlbmRMaW5lQU9WUHJlc01vZGVsXHJcbiAgVHJlbmRMaW5lQU9WUHJlc01vZGVsID0gJ3RyZW5kTGluZUFub3ZhUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1JlZmVyZW5jZUxpbmUsIGhhdmluZyB0eXBlIFJlZmVyZW5jZUxpbmVQcmVzTW9kZWxcclxuICBSZWZlcmVuY2VMaW5lID0gJ3JlZmVyZW5jZUxpbmUnLFxyXG5cclxuICAvLyBEUElfUmVmZXJlbmNlTGluZXMsIGhhdmluZyB0eXBlIFJlZmVyZW5jZUxpbmVQcmVzTW9kZWxbXVxyXG4gIFJlZmVyZW5jZUxpbmVzID0gJ3JlZmVyZW5jZUxpbmVzJyxcclxuXHJcbiAgLy8gRFBJX1BlcmNlbnRpbGVFZGl0RGF0YVZhbHVlLCBoYXZpbmcgdHlwZSBFZGl0RGF0YVZhbHVlUHJlc01vZGVsXHJcbiAgUGVyY2VudGlsZUVkaXREYXRhVmFsdWUgPSAncGVyY2VudGlsZUVkaXREYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfTGltaXRFZGl0RGF0YVZhbHVlLCBoYXZpbmcgdHlwZSBFZGl0RGF0YVZhbHVlUHJlc01vZGVsXHJcbiAgTGltaXRFZGl0RGF0YVZhbHVlID0gJ2xpbWl0RWRpdERhdGFWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9Db25maWRlbmNlTGV2ZWxDb21ibywgaGF2aW5nIHR5cGUgRWRpdFZhbHVlV2lkZ2V0UHJlc01vZGVsXHJcbiAgQ29uZmlkZW5jZUxldmVsQ29tYm8gPSAnY29uZmlkZW5jZUxldmVsQ29tYm8nLFxyXG5cclxuICAvLyBEUElfRGlzdHJpYnV0aW9uUXVhbnRpbGVzQ29tYm8sIGhhdmluZyB0eXBlIEVkaXRWYWx1ZVdpZGdldFByZXNNb2RlbFxyXG4gIERpc3RyaWJ1dGlvblF1YW50aWxlc0NvbWJvID0gJ2Rpc3RyaWJ1dGlvblF1YW50aWxlc0xldmVsQ29tYm8nLFxyXG5cclxuICAvLyBEUElfUGVyY2VudGlsZXNDb21ibywgaGF2aW5nIHR5cGUgRWRpdFZhbHVlV2lkZ2V0UHJlc01vZGVsXHJcbiAgUGVyY2VudGlsZXNDb21ibyA9ICdkaXN0cmlidXRpb25QZXJjZW50aWxlc0xldmVsQ29tYm8nLFxyXG5cclxuICAvLyBEUElfTnVtZXJpY0JpblNpemVDb21ibywgaGF2aW5nIHR5cGUgRWRpdFZhbHVlV2lkZ2V0UHJlc01vZGVsXHJcbiAgTnVtZXJpY0JpblNpemVDb21ibyA9ICdudW1lcmljQmluU2l6ZUNvbWJvJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkUGlja2VyRmllbGQsIGhhdmluZyB0eXBlIEZpZWxkUGlja2VyRmllbGRQcmVzTW9kZWxcclxuICBGaWVsZFBpY2tlckZpZWxkID0gJ2ZpZWxkUGlja2VyRmllbGQnLFxyXG5cclxuICAvLyBEUElfRmllbGRQaWNrZXJGaWVsZHMsIGhhdmluZyB0eXBlIEZpZWxkUGlja2VyRmllbGRQcmVzTW9kZWxbXVxyXG4gIEZpZWxkUGlja2VyRmllbGRzID0gJ2ZpZWxkUGlja2VyRmllbGRzJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkUGlja2VyQ29tYm8sIGhhdmluZyB0eXBlIEZpZWxkUGlja2VyQ29tYm9QcmVzTW9kZWxcclxuICBGaWVsZFBpY2tlckNvbWJvID0gJ2ZpZWxkUGlja2VyQ29tYm8nLFxyXG5cclxuICAvLyBEUElfUGFpcmVkRmllbGRQaWNrZXJDb21ibywgaGF2aW5nIHR5cGUgRmllbGRQaWNrZXJDb21ib1ByZXNNb2RlbFxyXG4gIFBhaXJlZEZpZWxkUGlja2VyQ29tYm8gPSAncGFpcmVkRmllbGRQaWNrZXJDb21ibycsXHJcblxyXG4gIC8vIERQSV9SZWZlcmVuY2VMaW5lRWRpdG9yUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBSZWZlcmVuY2VMaW5lRWRpdG9yUHJlc01vZGVsXHJcbiAgUmVmZXJlbmNlTGluZUVkaXRvclByZXNNb2RlbCA9ICdyZWZlcmVuY2VMaW5lRWRpdG9yJyxcclxuXHJcbiAgLy8gRFBJX0Nsb3NlRGF0YVNvdXJjZUVycm9yRGlhbG9nUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBDbG9zZURhdGFTb3VyY2VFcnJvckRpYWxvZ1ByZXNNb2RlbFxyXG4gIENsb3NlRGF0YVNvdXJjZUVycm9yRGlhbG9nUHJlc01vZGVsID0gJ2Nsb3NlRHNFcnJvckRpYWxvZycsXHJcblxyXG4gIC8vIERQSV9FZGl0UmVmZXJlbmNlTGluZSwgaGF2aW5nIHR5cGUgRWRpdFJlZmVyZW5jZUxpbmVQcmVzTW9kZWxcclxuICBFZGl0UmVmZXJlbmNlTGluZSA9ICdlZGl0UmVmZXJlbmNlTGluZScsXHJcblxyXG4gIC8vIERQSV9FZGl0UmVmZXJlbmNlQmFuZCwgaGF2aW5nIHR5cGUgRWRpdFJlZmVyZW5jZUJhbmRQcmVzTW9kZWxcclxuICBFZGl0UmVmZXJlbmNlQmFuZCA9ICdlZGl0UmVmZXJlbmNlQmFuZCcsXHJcblxyXG4gIC8vIERQSV9FZGl0RGlzdHJpYnV0aW9uLCBoYXZpbmcgdHlwZSBFZGl0RGlzdHJpYnV0aW9uUHJlc01vZGVsXHJcbiAgRWRpdERpc3RyaWJ1dGlvbiA9ICdlZGl0RGlzdHJpYnV0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3RyaWJ1dGlvblBlcmNlbnRhZ2VzLCBoYXZpbmcgdHlwZSBEaXN0cmlidXRpb25QZXJjZW50YWdlc1ByZXNNb2RlbFxyXG4gIERpc3RyaWJ1dGlvblBlcmNlbnRhZ2VzID0gJ2Rpc3RyaWJ1dGlvblBlcmNlbnRhZ2VzJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3RyaWJ1dGlvblBlcmNlbnRpbGVzLCBoYXZpbmcgdHlwZSBEaXN0cmlidXRpb25QZXJjZW50aWxlc1ByZXNNb2RlbFxyXG4gIERpc3RyaWJ1dGlvblBlcmNlbnRpbGVzID0gJ2Rpc3RyaWJ1dGlvblBlcmNlbnRpbGVzJyxcclxuXHJcbiAgLy8gRFBJX0Rpc3RyaWJ1dGlvblF1YW50aWxlcywgaGF2aW5nIHR5cGUgRGlzdHJpYnV0aW9uUXVhbnRpbGVzUHJlc01vZGVsXHJcbiAgRGlzdHJpYnV0aW9uUXVhbnRpbGVzID0gJ2Rpc3RyaWJ1dGlvblF1YW50aWxlcycsXHJcblxyXG4gIC8vIERQSV9EaXN0cmlidXRpb25TdGFuZGFyZERldmlhdGlvbiwgaGF2aW5nIHR5cGUgRGlzdHJpYnV0aW9uU3RhbmRhcmREZXZpYXRpb25QcmVzTW9kZWxcclxuICBEaXN0cmlidXRpb25TdGFuZGFyZERldmlhdGlvbiA9ICdkaXN0cmlidXRpb25TdGRkZXYnLFxyXG5cclxuICAvLyBEUElfU29ydEluZGljYXRvcnMsIGhhdmluZyB0eXBlIFNvcnRJbmRpY2F0b3JzUHJlc01vZGVsXHJcbiAgU29ydEluZGljYXRvcnMgPSAnc29ydEluZGljYXRvcnMnLFxyXG5cclxuICAvLyBEUElfU29ydEluZGljYXRvclJlZ2lvbiwgaGF2aW5nIHR5cGUgU29ydEluZGljYXRvclJlZ2lvblByZXNNb2RlbFxyXG4gIFNvcnRJbmRpY2F0b3JSZWdpb24gPSAnc29ydEluZGljYXRvclJlZ2lvbicsXHJcblxyXG4gIC8vIERQSV9Tb3J0SW5kaWNhdG9yUmVnaW9ucywgaGF2aW5nIHR5cGUgU29ydEluZGljYXRvclJlZ2lvblByZXNNb2RlbFtdXHJcbiAgU29ydEluZGljYXRvclJlZ2lvbnMgPSAnc29ydEluZGljYXRvclJlZ2lvbnMnLFxyXG5cclxuICAvLyBEUElfU29ydEluZGljYXRvckl0ZW0sIGhhdmluZyB0eXBlIFNvcnRJbmRpY2F0b3JJdGVtUHJlc01vZGVsXHJcbiAgU29ydEluZGljYXRvckl0ZW0gPSAnc29ydEluZGljYXRvckl0ZW0nLFxyXG5cclxuICAvLyBEUElfU29ydEluZGljYXRvckl0ZW1zLCBoYXZpbmcgdHlwZSBTb3J0SW5kaWNhdG9ySXRlbVByZXNNb2RlbFtdXHJcbiAgU29ydEluZGljYXRvckl0ZW1zID0gJ3NvcnRJbmRpY2F0b3JJdGVtcycsXHJcblxyXG4gIC8vIERQSV9CdWlsZGVyQ29uZmlnLCBoYXZpbmcgdHlwZSBCdWlsZGVyQ29uZmlnUHJlc01vZGVsXHJcbiAgQnVpbGRlckNvbmZpZyA9ICdidWlsZGVyQ29uZmlnJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0TGF5b3V0SW5mbywgaGF2aW5nIHR5cGUgU2hlZXRMYXlvdXRJbmZvUHJlc01vZGVsXHJcbiAgU2hlZXRMYXlvdXRJbmZvID0gJ3NoZWV0TGF5b3V0SW5mbycsXHJcblxyXG4gIC8vIERQSV9BcmVhUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgQXJlYVJlY3QgPSAnYXJlYVJlY3QnLFxyXG5cclxuICAvLyBEUElfQm9yZGVyLCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBCb3JkZXIgPSAnYm9yZGVyUmVjdCcsXHJcblxyXG4gIC8vIERQSV9Cb3VuZHNSZWN0LCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBCb3VuZHNSZWN0ID0gJ2JvdW5kc1JlY3QnLFxyXG5cclxuICAvLyBEUElfQnV0dG9uUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgQnV0dG9uUmVjdCA9ICdidXR0b25SZWN0JyxcclxuXHJcbiAgLy8gRFBJX0RyYWdSZWN0LCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBEcmFnUmVjdCA9ICdkcmFnUmVjdCcsXHJcblxyXG4gIC8vIERQSV9Gb2N1c1JlY3QsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIEZvY3VzUmVjdCA9ICdmb2N1c1JlY3QnLFxyXG5cclxuICAvLyBEUElfSW1hZ2VUaWxlUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgSW1hZ2VUaWxlUmVjdCA9ICd0aWxlUmVjdCcsXHJcblxyXG4gIC8vIERQSV9JdGVtUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgSXRlbVJlY3QgPSAnaXRlbVJlY3QnLFxyXG5cclxuICAvLyBEUElfTGFiZWxSZWN0LCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBMYWJlbFJlY3QgPSAnbGFiZWxSZWN0JyxcclxuXHJcbiAgLy8gRFBJX01hcmtSZWN0LCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBNYXJrUmVjdCA9ICdtYXJrUmVjdCcsXHJcblxyXG4gIC8vIERQSV9NYXJrVG9vbHRpcFJlY3QsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIE1hcmtUb29sdGlwUmVjdCA9ICdtYXJrVG9vbHRpcFJlY3QnLFxyXG5cclxuICAvLyBEUElfTWVudUJ1dHRvblJlY3QsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIE1lbnVCdXR0b25SZWN0ID0gJ21lbnVCdXR0b25SZWN0JyxcclxuXHJcbiAgLy8gRFBJX091dFJlZ2lvblJlY3QsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIE91dFJlZ2lvblJlY3QgPSAnb3V0UmVnaW9uUmVjdCcsXHJcblxyXG4gIC8vIERQSV9QYW5lUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgUGFuZVJlY3QgPSAncGFuZVJlY3QnLFxyXG5cclxuICAvLyBEUElfUGl4ZWxFeHRlbnRzLCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBQaXhlbEV4dGVudHMgPSAncGl4ZWxFeHRlbnRzJyxcclxuXHJcbiAgLy8gRFBJX1JlY3RNYXhMYWJlbCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgUmVjdE1heExhYmVsID0gJ3JlY3RNYXhMYWJlbCcsXHJcblxyXG4gIC8vIERQSV9SZWN0TWluTGFiZWwsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIFJlY3RNaW5MYWJlbCA9ICdyZWN0TWluTGFiZWwnLFxyXG5cclxuICAvLyBEUElfUmVjdFJhbXAsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIFJlY3RSYW1wID0gJ3JlY3RSYW1wJyxcclxuXHJcbiAgLy8gRFBJX1JlY3RUaXRsZSwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgUmVjdFRpdGxlID0gJ3JlY3RUaXRsZScsXHJcblxyXG4gIC8vIERQSV9SZWdpb25SZWN0LCBoYXZpbmcgdHlwZSBSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBSZWdpb25SZWN0ID0gJ3JlZ2lvblJlY3QnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0aW9uUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgU2VsZWN0aW9uUmVjdCA9ICdzZWxlY3Rpb25SZWN0JyxcclxuXHJcbiAgLy8gRFBJX1VudXNlZFJlY3QsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIFVudXNlZFJlY3QgPSAndW51c2VkUmVjdCcsXHJcblxyXG4gIC8vIERQSV9ab25lRWRnZVJlY3QsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIFpvbmVFZGdlUmVjdCA9ICd6b25lRWRnZScsXHJcblxyXG4gIC8vIERQSV9ab25lRWRnZVJlY3RQaXgsIGhhdmluZyB0eXBlIFJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIFpvbmVFZGdlUmVjdFBpeCA9ICd6b25lRWRnZVBpeCcsXHJcblxyXG4gIC8vIERQSV9ab25lRWRnZVJlY3RQcCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgWm9uZUVkZ2VSZWN0UHAgPSAnem9uZUVkZ2VQcCcsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25MaW5rUmVjdCwgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsXHJcbiAgVUlBdXRvbWF0aW9uTGlua1JlY3QgPSAnbGlua1JlY3QnLFxyXG5cclxuICAvLyBEUElfQm9yZGVycywgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsW11cclxuICBCb3JkZXJzID0gJ2JvcmRlclJlY3RzJyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbkxpbmtSZWN0cywgaGF2aW5nIHR5cGUgUmVjdGFuZ2xlUHJlc01vZGVsW11cclxuICBVSUF1dG9tYXRpb25MaW5rUmVjdHMgPSAnbGlua1JlY3RzJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpbkV4dGVudHMsIGhhdmluZyB0eXBlIERvdWJsZVJlY3RhbmdsZVByZXNNb2RlbFxyXG4gIERvbWFpbkV4dGVudHMgPSAnZG9tYWluRXh0ZW50cycsXHJcblxyXG4gIC8vIERQSV9NYXBEb21haW5FeHRlbnRzLCBoYXZpbmcgdHlwZSBEb3VibGVSZWN0YW5nbGVQcmVzTW9kZWxcclxuICBNYXBEb21haW5FeHRlbnRzID0gJ21hcERvbWFpbkV4dGVudHMnLFxyXG5cclxuICAvLyBEUElfTWFwTGF0TG9uZ1JlY3QsIGhhdmluZyB0eXBlIE1hcFJlY3RQcmVzTW9kZWxcclxuICBNYXBMYXRMb25nUmVjdCA9ICdtYXBMYXRMb25nUmVjdCcsXHJcblxyXG4gIC8vIERQSV9DZW50ZXIsIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgQ2VudGVyID0gJ2NlbnRlcicsXHJcblxyXG4gIC8vIERQSV9DZW50ZXJNYXJrTGluZUJlZ2luLCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIENlbnRlck1hcmtMaW5lQmVnaW4gPSAnY2VudGVyTWFya0xpbmVCZWdpbicsXHJcblxyXG4gIC8vIERQSV9DZW50ZXJNYXJrTGluZUVuZCwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBDZW50ZXJNYXJrTGluZUVuZCA9ICdjZW50ZXJNYXJrTGluZUVuZCcsXHJcblxyXG4gIC8vIERQSV9Ecm9wTG9jYXRpb24sIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgRHJvcExvY2F0aW9uID0gJ2Ryb3BMb2NhdGlvbicsXHJcblxyXG4gIC8vIERQSV9FbmRQdCwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBFbmRQdCA9ICdlbmRQb2ludCcsXHJcblxyXG4gIC8vIERQSV9HcmFiTG9jYXRpb24sIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgR3JhYkxvY2F0aW9uID0gJ2dyYWJMb2NhdGlvbicsXHJcblxyXG4gIC8vIERQSV9HcmlkT3JpZ2luLCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIEdyaWRPcmlnaW4gPSAnZ3JpZE9yaWdpbicsXHJcblxyXG4gIC8vIERQSV9MYXNzb1NlbGVjdGlvblBvaW50LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIExhc3NvU2VsZWN0aW9uUG9pbnQgPSAnbGFzc29TZWxlY3Rpb25Qb2ludCcsXHJcblxyXG4gIC8vIERQSV9NZW51TG9jYXRpb24sIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgTWVudUxvY2F0aW9uID0gJ21lbnVMb2NhdGlvbicsXHJcblxyXG4gIC8vIERQSV9Nb3ZlT2Zmc2V0LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIE1vdmVPZmZzZXQgPSAnbW92ZU9mZnNldCcsXHJcblxyXG4gIC8vIERQSV9PdmVybGF5QW5jaG9yLCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIE92ZXJsYXlBbmNob3IgPSAnb3ZlcmxheUFuY2hvcicsXHJcblxyXG4gIC8vIERQSV9QYW5BbW91bnQsIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgUGFuQW1vdW50ID0gJ3BhbkFtb3VudCcsXHJcblxyXG4gIC8vIERQSV9QYW5Mb2NhdGlvbiwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBQYW5Mb2NhdGlvbiA9ICdwYW5Mb2NhdGlvbicsXHJcblxyXG4gIC8vIERQSV9QYW5lUmVzb2x2ZXJMb2NhdGlvbiwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBQYW5lUmVzb2x2ZXJMb2NhdGlvbiA9ICdwYW5lUmVzb2x2ZXJMb2NhdGlvbicsXHJcblxyXG4gIC8vIERQSV9QaXhlbEV4dGVudHNPZmZzZXQsIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgUGl4ZWxFeHRlbnRzT2Zmc2V0ID0gJ2V4dGVudHNPZmZzZXQnLFxyXG5cclxuICAvLyBEUElfUG9pbnQxLCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFBvaW50MSA9ICdwdDEnLFxyXG5cclxuICAvLyBEUElfUG9pbnQyLCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFBvaW50MiA9ICdwdDInLFxyXG5cclxuICAvLyBEUElfUG9pbnQzLCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFBvaW50MyA9ICdwdDMnLFxyXG5cclxuICAvLyBEUElfUmVnaW9uUG9pbnQsIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgUmVnaW9uUG9pbnQgPSAncmVnaW9uUG9pbnQnLFxyXG5cclxuICAvLyBEUElfU2Nyb2xsT2Zmc2V0LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFNjcm9sbE9mZnNldCA9ICdzY3JvbGxPZmZzZXQnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0QXRQb2ludCwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBTZWxlY3RBdFBvaW50ID0gJ3NlbGVjdEF0UG9pbnQnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0T2Zmc2V0LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFNlbGVjdE9mZnNldCA9ICdzZWxlY3RPZmZzZXQnLFxyXG5cclxuICAvLyBEUElfVGFyZ2V0UHQsIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgVGFyZ2V0UHQgPSAndGFyZ2V0UG9pbnQnLFxyXG5cclxuICAvLyBEUElfVGV4dE9yaWdpbiwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBUZXh0T3JpZ2luID0gJ3RleHRPcmlnaW4nLFxyXG5cclxuICAvLyBEUElfVG9vbHRpcEFuY2hvclBvaW50LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFRvb2x0aXBBbmNob3JQb2ludCA9ICd0b29sdGlwQW5jaG9yUG9pbnQnLFxyXG5cclxuICAvLyBEUElfVG9vbHRpcE9mZnNldCwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxcclxuICBUb29sdGlwT2Zmc2V0ID0gJ3Rvb2x0aXBPZmZzZXQnLFxyXG5cclxuICAvLyBEUElfVml6TG9jYXRpb24sIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsXHJcbiAgVml6TG9jYXRpb24gPSAndml6TG9jYXRpb24nLFxyXG5cclxuICAvLyBEUElfWm9vbUFuY2hvclBvaW50LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIFpvb21BbmNob3JQb2ludCA9ICd6b29tQW5jaG9yUG9pbnQnLFxyXG5cclxuICAvLyBEUElfTWVudUFuY2hvclBvaW50LCBoYXZpbmcgdHlwZSBQb2ludFByZXNNb2RlbFxyXG4gIE1lbnVBbmNob3JQb2ludCA9ICdtZW51QW5jaG9yUG9pbnQnLFxyXG5cclxuICAvLyBEUElfT3ZlcmxheUFuY2hvcnMsIGhhdmluZyB0eXBlIFBvaW50UHJlc01vZGVsW11cclxuICBPdmVybGF5QW5jaG9ycyA9ICdvdmVybGF5QW5jaG9ycycsXHJcblxyXG4gIC8vIERQSV9MYXNzb1NlbGVjdGlvbiwgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxbXVxyXG4gIExhc3NvU2VsZWN0aW9uID0gJ2xhc3NvU2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1Njcm9sbE9mZnNldFBvaW50cywgaGF2aW5nIHR5cGUgUG9pbnRQcmVzTW9kZWxbXVxyXG4gIFNjcm9sbE9mZnNldFBvaW50cyA9ICdzY3JvbGxPZmZzZXRQb2ludHMnLFxyXG5cclxuICAvLyBEUElfUmFkaWFsU2VsZWN0aW9uLCBoYXZpbmcgdHlwZSBDaXJjbGVQcmVzTW9kZWxcclxuICBSYWRpYWxTZWxlY3Rpb24gPSAncmFkaWFsU2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpbk9yaWdpbiwgaGF2aW5nIHR5cGUgRmxvYXRQb2ludFByZXNNb2RlbFxyXG4gIERvbWFpbk9yaWdpbiA9ICdkb21haW5PcmlnaW4nLFxyXG5cclxuICAvLyBEUElfRmxvYXRDZW50ZXIsIGhhdmluZyB0eXBlIEZsb2F0UG9pbnRQcmVzTW9kZWxcclxuICBGbG9hdENlbnRlciA9ICdmbG9hdENlbnRlcicsXHJcblxyXG4gIC8vIERQSV9GbG9hdFBvaW50LCBoYXZpbmcgdHlwZSBGbG9hdFBvaW50UHJlc01vZGVsXHJcbiAgRmxvYXRQb2ludCA9ICdmbG9hdFBvaW50JyxcclxuXHJcbiAgLy8gRFBJX0NsaWVudEF2YWlsYWJsZVNwYWNlLCBoYXZpbmcgdHlwZSBTaXplUHJlc01vZGVsXHJcbiAgQ2xpZW50QXZhaWxhYmxlU3BhY2UgPSAnY2xpZW50QXZhaWxhYmxlU3BhY2UnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkUG9ydFNpemUsIGhhdmluZyB0eXBlIFNpemVQcmVzTW9kZWxcclxuICBEYXNoYm9hcmRQb3J0U2l6ZSA9ICdkYXNoYm9hcmRQb3J0JyxcclxuXHJcbiAgLy8gRFBJX0xlZ2VuZFNpemUsIGhhdmluZyB0eXBlIFNpemVQcmVzTW9kZWxcclxuICBMZWdlbmRTaXplID0gJ2xlZ2VuZFNpemUnLFxyXG5cclxuICAvLyBEUElfU3RvcnlQb3J0U2l6ZSwgaGF2aW5nIHR5cGUgU2l6ZVByZXNNb2RlbFxyXG4gIFN0b3J5UG9ydFNpemUgPSAnc3RvcnlQb3J0JyxcclxuXHJcbiAgLy8gRFBJX1N3YXRjaEFyZWFTaXplLCBoYXZpbmcgdHlwZSBTaXplUHJlc01vZGVsXHJcbiAgU3dhdGNoQXJlYVNpemUgPSAnYXJlYVNpemUnLFxyXG5cclxuICAvLyBEUElfU3dhdGNoSW1hZ2VTaXplLCBoYXZpbmcgdHlwZSBTaXplUHJlc01vZGVsXHJcbiAgU3dhdGNoSW1hZ2VTaXplID0gJ2ltYWdlU2l6ZScsXHJcblxyXG4gIC8vIERQSV9WaWV3cG9ydFNpemUsIGhhdmluZyB0eXBlIFNpemVQcmVzTW9kZWxcclxuICBWaWV3cG9ydFNpemUgPSAndmlld3BvcnRTaXplJyxcclxuXHJcbiAgLy8gRFBJX1dvcmtzaGVldFBvcnRTaXplLCBoYXZpbmcgdHlwZSBTaXplUHJlc01vZGVsXHJcbiAgV29ya3NoZWV0UG9ydFNpemUgPSAnd29ya3NoZWV0UG9ydCcsXHJcblxyXG4gIC8vIERQSV9SZXNpemVFbnRpdHksIGhhdmluZyB0eXBlIFJlc2l6ZUVudGl0eVByZXNNb2RlbFxyXG4gIFJlc2l6ZUVudGl0eSA9ICdyZXNpemVFbnRpdHknLFxyXG5cclxuICAvLyBEUElfUm93UmVzaXplcnMsIGhhdmluZyB0eXBlIFJlc2l6ZUVudGl0eVByZXNNb2RlbFtdXHJcbiAgUm93UmVzaXplcnMgPSAncm93UmVzaXplcnMnLFxyXG5cclxuICAvLyBEUElfQ29sUmVzaXplcnMsIGhhdmluZyB0eXBlIFJlc2l6ZUVudGl0eVByZXNNb2RlbFtdXHJcbiAgQ29sUmVzaXplcnMgPSAnY29sUmVzaXplcnMnLFxyXG5cclxuICAvLyBEUElfUmVzaXplSW5mb1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgUmVzaXplSW5mb1ByZXNNb2RlbFxyXG4gIFJlc2l6ZUluZm9QcmVzTW9kZWwgPSAncmVzaXplSW5mbycsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJTaGVldCwgaGF2aW5nIHR5cGUgU2VydmVyU2hlZXRQcmVzTW9kZWxcclxuICBTZXJ2ZXJTaGVldCA9ICdzZXJ2ZXJTaGVldCcsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJTaGVldHMsIGhhdmluZyB0eXBlIFNlcnZlclNoZWV0UHJlc01vZGVsW11cclxuICBTZXJ2ZXJTaGVldHMgPSAnc2VydmVyU2hlZXRzJyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0SW5mbywgaGF2aW5nIHR5cGUgU2hlZXRJbmZvUHJlc01vZGVsXHJcbiAgU2hlZXRJbmZvID0gJ3NoZWV0SW5mbycsXHJcblxyXG4gIC8vIERQSV9TaGVldHNJbmZvLCBoYXZpbmcgdHlwZSBTaGVldEluZm9QcmVzTW9kZWxbXVxyXG4gIFNoZWV0c0luZm8gPSAnc2hlZXRzSW5mbycsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJXb3JrYm9vaywgaGF2aW5nIHR5cGUgU2VydmVyV29ya2Jvb2tQcmVzTW9kZWxcclxuICBTZXJ2ZXJXb3JrYm9vayA9ICdzZXJ2ZXJXb3JrYm9vaycsXHJcblxyXG4gIC8vIERQSV9QREZFeHBvcnRPcHRpb25zUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBQREZFeHBvcnRPcHRpb25zUHJlc01vZGVsXHJcbiAgUERGRXhwb3J0T3B0aW9uc1ByZXNNb2RlbCA9ICdwZGZFeHBvcnQnLFxyXG5cclxuICAvLyBEUElfRXhwb3J0RmlsZVJlc3VsdFByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRXhwb3J0RmlsZVJlc3VsdFByZXNNb2RlbFxyXG4gIEV4cG9ydEZpbGVSZXN1bHRQcmVzTW9kZWwgPSAncGRmUmVzdWx0JyxcclxuXHJcbiAgLy8gRFBJX1BERlNoZWV0LCBoYXZpbmcgdHlwZSBQREZTaGVldFByZXNNb2RlbFxyXG4gIFBERlNoZWV0ID0gJ3BkZlNoZWV0JyxcclxuXHJcbiAgLy8gRFBJX1NoZWV0T3B0aW9ucywgaGF2aW5nIHR5cGUgUERGU2hlZXRQcmVzTW9kZWxbXVxyXG4gIFNoZWV0T3B0aW9ucyA9ICdzaGVldE9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfRXhwb3J0TGF5b3V0T3B0aW9ucywgaGF2aW5nIHR5cGUgRXhwb3J0TGF5b3V0T3B0aW9uc1ByZXNNb2RlbFxyXG4gIEV4cG9ydExheW91dE9wdGlvbnMgPSAnZXhwb3J0TGF5b3V0T3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9EYXRhQWxlcnRDb25kaXRpb25PcGVyYXRpb25UeXBlLCBoYXZpbmcgdHlwZSBEYXRhQWxlcnRDb25kaXRpb25PcGVyYXRpb25UeXBlXHJcbiAgRGF0YUFsZXJ0Q29uZGl0aW9uT3BlcmF0aW9uVHlwZSA9ICdkYXRhQWxlcnRDb25kaXRpb25PcCcsXHJcblxyXG4gIC8vIERQSV9EYXRhQWxlcnREaWFsb2dQcmVzTW9kZWwsIGhhdmluZyB0eXBlIERhdGFBbGVydERpYWxvZ1ByZXNNb2RlbFxyXG4gIERhdGFBbGVydERpYWxvZ1ByZXNNb2RlbCA9ICdkYXRhQWxlcnREaWFsb2dQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRGF0YUFsZXJ0TWVhc3VyZSwgaGF2aW5nIHR5cGUgRGF0YUFsZXJ0TWVhc3VyZVByZXNNb2RlbFxyXG4gIERhdGFBbGVydE1lYXN1cmUgPSAnZGF0YUFsZXJ0TWVhc3VyZScsXHJcblxyXG4gIC8vIERQSV9EYXRhQWxlcnRNZWFzdXJlcywgaGF2aW5nIHR5cGUgRGF0YUFsZXJ0TWVhc3VyZVByZXNNb2RlbFtdXHJcbiAgRGF0YUFsZXJ0TWVhc3VyZXMgPSAnZGF0YUFsZXJ0TWVhc3VyZXMnLFxyXG5cclxuICAvLyBEUElfRGF0YUFsZXJ0Q29uc3RhbnRDb25kaXRpb24sIGhhdmluZyB0eXBlIERhdGFBbGVydENvbnN0YW50Q29uZGl0aW9uUHJlc01vZGVsXHJcbiAgRGF0YUFsZXJ0Q29uc3RhbnRDb25kaXRpb24gPSAnZGF0YUFsZXJ0Q29uc3RhbnRDb25kaXRpb24nLFxyXG5cclxuICAvLyBEUElfRGF0YUFsZXJ0RGlhbG9nTW9kZSwgaGF2aW5nIHR5cGUgRGF0YUFsZXJ0RGlhbG9nTW9kZVxyXG4gIERhdGFBbGVydERpYWxvZ01vZGUgPSAnZGF0YUFsZXJ0RGlhbG9nTW9kZScsXHJcblxyXG4gIC8vIERQSV9MaWdodHdlaWdodE1hcE9wdGlvbnMsIGhhdmluZyB0eXBlIExpZ2h0d2VpZ2h0TWFwT3B0aW9uc1ByZXNNb2RlbFxyXG4gIExpZ2h0d2VpZ2h0TWFwT3B0aW9ucyA9ICdsaWdodHdlaWdodE1hcE9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfRGF0YUhpZ2hsaWdodGVyLCBoYXZpbmcgdHlwZSBEYXRhSGlnaGxpZ2h0ZXJQcmVzTW9kZWxcclxuICBEYXRhSGlnaGxpZ2h0ZXIgPSAnZGF0YUhpZ2hsaWdodGVyJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFIaWdobGlnaHRlckl0ZW1TZXQsIGhhdmluZyB0eXBlIERhdGFIaWdobGlnaHRlckl0ZW1TZXRQcmVzTW9kZWxcclxuICBEYXRhSGlnaGxpZ2h0ZXJJdGVtU2V0ID0gJ2RhdGFIaWdobGlnaHRlckl0ZW1TZXQnLFxyXG5cclxuICAvLyBEUElfRGF0YUhpZ2hsaWdodGVySXRlbSwgaGF2aW5nIHR5cGUgRGF0YUhpZ2hsaWdodGVySXRlbVByZXNNb2RlbFxyXG4gIERhdGFIaWdobGlnaHRlckl0ZW0gPSAnZGF0YUhpZ2hsaWdodGVySXRlbScsXHJcblxyXG4gIC8vIERQSV9EYXRhSGlnaGxpZ2h0ZXJJdGVtcywgaGF2aW5nIHR5cGUgRGF0YUhpZ2hsaWdodGVySXRlbVByZXNNb2RlbFtdXHJcbiAgRGF0YUhpZ2hsaWdodGVySXRlbXMgPSAnZGF0YUhpZ2hsaWdodGVySXRlbXMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxMZWdlbmRMYXlvdXQsIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsTGVnZW5kTGF5b3V0UHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxMZWdlbmRMYXlvdXQgPSAnY2F0TGVnZW5kTGF5b3V0JyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsTGVnZW5kLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbExlZ2VuZFByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsTGVnZW5kID0gJ2NhdGVnb3JpY2FsTGVnZW5kJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsTGVnZW5kcywgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxMZWdlbmRQcmVzTW9kZWxbXVxyXG4gIENhdGVnb3JpY2FsTGVnZW5kcyA9ICdjYXRlZ29yaWNhbExlZ2VuZHMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxDb2xvckxlZ2VuZCwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxDb2xvckxlZ2VuZFByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsQ29sb3JMZWdlbmQgPSAnY29sb3JMZWdlbmQnLFxyXG5cclxuICAvLyBEUElfQ29sb3JMZWdlbmRJdGVtLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbENvbG9yTGVnZW5kSXRlbVByZXNNb2RlbFxyXG4gIENvbG9yTGVnZW5kSXRlbSA9ICdjb2xvckxlZ2VuZEl0ZW0nLFxyXG5cclxuICAvLyBEUElfQ29sb3JMZWdlbmRJdGVtcywgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxDb2xvckxlZ2VuZEl0ZW1QcmVzTW9kZWxbXVxyXG4gIENvbG9yTGVnZW5kSXRlbXMgPSAnY29sb3JMZWdlbmRJdGVtcycsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbFNoYXBlTGVnZW5kLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbFNoYXBlTGVnZW5kUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxTaGFwZUxlZ2VuZCA9ICdjYXRlZ29yaWNhbFNoYXBlTGVnZW5kJyxcclxuXHJcbiAgLy8gRFBJX1NoYXBlTGVnZW5kSXRlbSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxTaGFwZUxlZ2VuZEl0ZW1QcmVzTW9kZWxcclxuICBTaGFwZUxlZ2VuZEl0ZW0gPSAnc2hhcGVMZWdlbmRJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1NoYXBlTGVnZW5kSXRlbXMsIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsU2hhcGVMZWdlbmRJdGVtUHJlc01vZGVsW11cclxuICBTaGFwZUxlZ2VuZEl0ZW1zID0gJ3NoYXBlTGVnZW5kSXRlbXMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxIaWdobGlnaHRMZWdlbmQsIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsSGlnaGxpZ2h0TGVnZW5kUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxIaWdobGlnaHRMZWdlbmQgPSAnY2F0ZWdvcmljYWxIaWdobGlnaHRMZWdlbmQnLFxyXG5cclxuICAvLyBEUElfSGlnaGxpZ2h0TGVnZW5kSXRlbSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxMZWdlbmRJdGVtUHJlc01vZGVsXHJcbiAgSGlnaGxpZ2h0TGVnZW5kSXRlbSA9ICdoaWdobGlnaHRMZWdlbmRJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0hpZ2hsaWdodExlZ2VuZEl0ZW1zLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbExlZ2VuZEl0ZW1QcmVzTW9kZWxbXVxyXG4gIEhpZ2hsaWdodExlZ2VuZEl0ZW1zID0gJ2hpZ2hsaWdodExlZ2VuZEl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsU2l6ZUxlZ2VuZCwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxTaXplTGVnZW5kUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxTaXplTGVnZW5kID0gJ2NhdGVnb3JpY2FsU2l6ZUxlZ2VuZCcsXHJcblxyXG4gIC8vIERQSV9TaXplTGVnZW5kSXRlbSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxTaXplTGVnZW5kSXRlbVByZXNNb2RlbFxyXG4gIFNpemVMZWdlbmRJdGVtID0gJ3NpemVMZWdlbmRJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1NpemVMZWdlbmRJdGVtcywgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxTaXplTGVnZW5kSXRlbVByZXNNb2RlbFtdXHJcbiAgU2l6ZUxlZ2VuZEl0ZW1zID0gJ3NpemVMZWdlbmRJdGVtcycsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbE1hcExlZ2VuZCwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxNYXBMZWdlbmRQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbE1hcExlZ2VuZCA9ICdjYXRlZ29yaWNhbE1hcExlZ2VuZCcsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVDb2xvckxlZ2VuZCwgaGF2aW5nIHR5cGUgUXVhbnRpdGF0aXZlQ29sb3JMZWdlbmRQcmVzTW9kZWxcclxuICBRdWFudGl0YXRpdmVDb2xvckxlZ2VuZCA9ICdxdWFudGl0YXRpdmVDb2xvckxlZ2VuZCcsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVDb2xvckxlZ2VuZHMsIGhhdmluZyB0eXBlIFF1YW50aXRhdGl2ZUNvbG9yTGVnZW5kUHJlc01vZGVsW11cclxuICBRdWFudGl0YXRpdmVDb2xvckxlZ2VuZHMgPSAncXVhbnRpdGF0aXZlQ29sb3JMZWdlbmRzJyxcclxuXHJcbiAgLy8gRFBJX1F1YW50aXRhdGl2ZUxlZ2VuZExheW91dCwgaGF2aW5nIHR5cGUgUXVhbnRpdGF0aXZlTGVnZW5kTGF5b3V0UHJlc01vZGVsXHJcbiAgUXVhbnRpdGF0aXZlTGVnZW5kTGF5b3V0ID0gJ3F1YW50aXRhdGl2ZUxlZ2VuZExheW91dCcsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJSZW5kZXJlZExlZ2VuZCwgaGF2aW5nIHR5cGUgU2VydmVyUmVuZGVyZWRMZWdlbmRQcmVzTW9kZWxcclxuICBTZXJ2ZXJSZW5kZXJlZExlZ2VuZCA9ICdzZXJ2ZXJSZW5kZXJlZExlZ2VuZCcsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlciwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlciA9ICdjYXRlZ29yaWNhbEZpbHRlcicsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlclJlbGF0aW9uYWwsIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsRmlsdGVyUmVsYXRpb25hbFByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsRmlsdGVyUmVsYXRpb25hbCA9ICdjYXRlZ29yaWNhbEZpbHRlclJlbGF0aW9uYWwnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJNZW1iZXJEb21haW5QYWdlLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlck1lbWJlckRvbWFpblBhZ2VQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlck1lbWJlckRvbWFpblBhZ2UgPSAnY2F0ZWdvcmljYWxGaWx0ZXJNZW1iZXJEb21haW5QYWdlJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsRmlsdGVyQ2FjaGVJbmZvLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlckNhY2hlSW5mb1ByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsRmlsdGVyQ2FjaGVJbmZvID0gJ2NhdGVnb3JpY2FsRmlsdGVyQ2FjaGVJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsRmlsdGVyUGF0dGVybkRpc3BsYXksIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsRmlsdGVyUGF0dGVybkRpc3BsYXlQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlclBhdHRlcm5EaXNwbGF5ID0gJ2NhdGVnb3JpY2FsRmlsdGVyUGF0dGVybkRpc3BsYXknLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJQYXR0ZXJuVXBkYXRlLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlclBhdHRlcm5VcGRhdGVQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlclBhdHRlcm5VcGRhdGUgPSAnY2F0ZWdvcmljYWxGaWx0ZXJQYXR0ZXJuVXBkYXRlJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsRmlsdGVyQ29uZGl0aW9uRGlzcGxheSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJDb25kaXRpb25EaXNwbGF5UHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxGaWx0ZXJDb25kaXRpb25EaXNwbGF5ID0gJ2NhdGVnb3JpY2FsRmlsdGVyQ29uZGl0aW9uRGlzcGxheScsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlckNvbmRpdGlvblVwZGF0ZSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJDb25kaXRpb25VcGRhdGVQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlckNvbmRpdGlvblVwZGF0ZSA9ICdjYXRlZ29yaWNhbEZpbHRlckNvbmRpdGlvblVwZGF0ZScsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlckxpbWl0RGlzcGxheSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJMaW1pdERpc3BsYXlQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlckxpbWl0RGlzcGxheSA9ICdjYXRlZ29yaWNhbEZpbHRlckxpbWl0RGlzcGxheScsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlckxpbWl0VXBkYXRlLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlckxpbWl0VXBkYXRlUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxGaWx0ZXJMaW1pdFVwZGF0ZSA9ICdjYXRlZ29yaWNhbEZpbHRlckxpbWl0VXBkYXRlJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsRmlsdGVyTmV3LCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlcl9OZXdQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlck5ldyA9ICdjYXRlZ29yaWNhbEZpbHRlck5ldycsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlckhpZXJhcmNoeSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJIaWVyYXJjaHlQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbHRlckhpZXJhcmNoeSA9ICdjYXRlZ29yaWNhbEZpbHRlckhpcmVyYXJjaHknLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJVcGRhdGUsIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsRmlsdGVyVXBkYXRlUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxGaWx0ZXJVcGRhdGUgPSAnY2F0ZWdvcmljYWxGaWx0ZXJVcGRhdGUnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsU3RhdGUsIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsRmlsdGVyUmVsYXRpb25hbFN0YXRlUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsU3RhdGUgPSAnY2F0ZWdvcmljYWxSZWxhdGlvbmFsU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsVXBkYXRlZFN0YXRlLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlclJlbGF0aW9uYWxTdGF0ZVByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsRmlsdGVyUmVsYXRpb25hbFVwZGF0ZWRTdGF0ZSA9ICdjYXRlZ29yaWNhbFJlbGF0aW9uYWxVcGRhdGVkU3RhdGUnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsRG9tYWluSW5mbywgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsRG9tYWluSW5mb1ByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsRmlsdGVyUmVsYXRpb25hbERvbWFpbkluZm8gPSAnY2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsRG9tYWluSW5mbycsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEZpbHRlclJlbGF0aW9uYWxEaXNwbGF5LCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbHRlclJlbGF0aW9uYWxEaXNwbGF5UHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxGaWx0ZXJSZWxhdGlvbmFsRGlzcGxheSA9ICdjYXRlZ29yaWNhbEZpbHRlclJlbGF0aW9uYWxEaXNwbGF5JyxcclxuXHJcbiAgLy8gRFBJX0V4cHJlc3Npb25Ub2tlbiwgaGF2aW5nIHR5cGUgRXhwcmVzc2lvblRva2VuUHJlc01vZGVsXHJcbiAgRXhwcmVzc2lvblRva2VuID0gJ2V4cHJlc3Npb25Ub2tlbicsXHJcblxyXG4gIC8vIERQSV9FeHByZXNzaW9uVG9rZW5zLCBoYXZpbmcgdHlwZSBFeHByZXNzaW9uVG9rZW5QcmVzTW9kZWxbXVxyXG4gIEV4cHJlc3Npb25Ub2tlbnMgPSAnZXhwcmVzc2lvblRva2VucycsXHJcblxyXG4gIC8vIERQSV9Gb3JtdWxhVmFsaWRhdGlvbiwgaGF2aW5nIHR5cGUgRm9ybXVsYVZhbGlkYXRpb25QcmVzTW9kZWxcclxuICBGb3JtdWxhVmFsaWRhdGlvbiA9ICdmb3JtdWxhVmFsaWRhdGlvbicsXHJcblxyXG4gIC8vIERQSV9DYXB0aW9uZWRGaWx0ZXJWYWx1ZSwgaGF2aW5nIHR5cGUgRmlsdGVyVmFsdWVQcmVzTW9kZWxcclxuICBDYXB0aW9uZWRGaWx0ZXJWYWx1ZSA9ICdjYXB0aW9uZWRGaWx0ZXJWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9DYXB0aW9uZWRSYW5nZU1pbiwgaGF2aW5nIHR5cGUgRmlsdGVyVmFsdWVQcmVzTW9kZWxcclxuICBDYXB0aW9uZWRSYW5nZU1pbiA9ICdjYXB0aW9uZWRSYW5nZU1pbicsXHJcblxyXG4gIC8vIERQSV9DYXB0aW9uZWRSYW5nZU1heCwgaGF2aW5nIHR5cGUgRmlsdGVyVmFsdWVQcmVzTW9kZWxcclxuICBDYXB0aW9uZWRSYW5nZU1heCA9ICdjYXB0aW9uZWRSYW5nZU1heCcsXHJcblxyXG4gIC8vIERQSV9DYXB0aW9uZWRBbmNob3JEYXRlLCBoYXZpbmcgdHlwZSBGaWx0ZXJWYWx1ZVByZXNNb2RlbFxyXG4gIENhcHRpb25lZEFuY2hvckRhdGUgPSAnY2FwdGlvbmVkQW5jaG9yRGF0ZScsXHJcblxyXG4gIC8vIERQSV9DYXB0aW9uZWRGaWx0ZXJWYWx1ZUxpc3QsIGhhdmluZyB0eXBlIEZpbHRlclZhbHVlUHJlc01vZGVsW11cclxuICBDYXB0aW9uZWRGaWx0ZXJWYWx1ZUxpc3QgPSAnY2FwdGlvbmVkRmlsdGVyVmFsdWVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsRmlsdGVySW5mbywgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxGaWx0ZXJJbmZvUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxGaWx0ZXJJbmZvID0gJ2NhdGVnb3JpY2FsRmlsdGVySW5mbycsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVGaWx0ZXJJbmZvLCBoYXZpbmcgdHlwZSBRdWFudGl0YXRpdmVGaWx0ZXJJbmZvUHJlc01vZGVsXHJcbiAgUXVhbnRpdGF0aXZlRmlsdGVySW5mbyA9ICdxdWFudGl0YXRpdmVGaWx0ZXJJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1JlbGF0aXZlRGF0ZUZpbHRlckluZm8sIGhhdmluZyB0eXBlIFJlbGF0aXZlRGF0ZUZpbHRlckluZm9QcmVzTW9kZWxcclxuICBSZWxhdGl2ZURhdGVGaWx0ZXJJbmZvID0gJ3JlbGF0aXZlRGF0ZUZpbHRlckluZm8nLFxyXG5cclxuICAvLyBEUElfUmVsYXRpdmVEYXRlRmlsdGVyTGFiZWxzLCBoYXZpbmcgdHlwZSBSZWxhdGl2ZURhdGVGaWx0ZXJMYWJlbHNQcmVzTW9kZWxcclxuICBSZWxhdGl2ZURhdGVGaWx0ZXJMYWJlbHMgPSAncmVsYXRpdmVEYXRlRmlsdGVyTGFibGVzJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclNlbGVjdE1lYXN1cmUsIGhhdmluZyB0eXBlIEZpbHRlclNlbGVjdE1lYXN1cmVQcmVzTW9kZWxcclxuICBGaWx0ZXJTZWxlY3RNZWFzdXJlID0gJ2ZpbHRlclNlbGVjdE1lYXN1cmUnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyTGlzdEl0ZW0sIGhhdmluZyB0eXBlIEZpbHRlckxpc3RJdGVtUHJlc01vZGVsXHJcbiAgRmlsdGVyTGlzdEl0ZW0gPSAnZmlsdGVyTGlzdEl0ZW0nLFxyXG5cclxuICAvLyBEUElfRmlsdGVyTGlzdEl0ZW1zLCBoYXZpbmcgdHlwZSBGaWx0ZXJMaXN0SXRlbVByZXNNb2RlbFtdXHJcbiAgRmlsdGVyTGlzdEl0ZW1zID0gJ2ZpbHRlckl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlckZpZWxkSW5mbywgaGF2aW5nIHR5cGUgRmlsdGVyRmllbGRJbmZvUHJlc01vZGVsXHJcbiAgRmlsdGVyRmllbGRJbmZvID0gJ2ZpbHRlckZpZWxkSW5mbycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJJbmZvLCBoYXZpbmcgdHlwZSBGaWx0ZXJJbmZvUHJlc01vZGVsXHJcbiAgRmlsdGVySW5mbyA9ICdmaWx0ZXJJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlcnNJbmZvLCBoYXZpbmcgdHlwZSBGaWx0ZXJJbmZvclByZXNNb2RlbFtdXHJcbiAgRmlsdGVyc0luZm8gPSAnZmlsdGVyc0luZm8nLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxEb21haW4sIGhhdmluZyB0eXBlIENhdGVnb3JpY2FsRG9tYWluUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxEb21haW4gPSAnY2F0ZWdvcmljYWxEb21haW4nLFxyXG5cclxuICAvLyBEUElfUXVhbnRpdGF0aXZlRG9tYWluLCBoYXZpbmcgdHlwZSBRdWFudGl0YXRpdmVEb21haW5QcmVzTW9kZWxcclxuICBRdWFudGl0YXRpdmVEb21haW4gPSAncXVhbnRpdGF0aXZlRG9tYWluJyxcclxuXHJcbiAgLy8gRFBJX1F1YW50aXRhdGl2ZUZpbHRlciwgaGF2aW5nIHR5cGUgUXVhbnRpdGF0aXZlRmlsdGVyUHJlc01vZGVsXHJcbiAgUXVhbnRpdGF0aXZlRmlsdGVyID0gJ3F1YW50aXRhdGl2ZUZpbHRlcicsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVGaWx0ZXJSYW5nZSwgaGF2aW5nIHR5cGUgUXVhbnRpdGF0aXZlRmlsdGVyUmFuZ2VQcmVzTW9kZWxcclxuICBRdWFudGl0YXRpdmVGaWx0ZXJSYW5nZSA9ICdxdWFudGl0YXRpdmVGaWx0ZXJSYW5nZScsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVGaWx0ZXJEb21haW4sIGhhdmluZyB0eXBlIFF1YW50aXRhdGl2ZUZpbHRlckRvbWFpblByZXNNb2RlbFxyXG4gIFF1YW50aXRhdGl2ZUZpbHRlckRvbWFpbiA9ICdxdWFudGl0YXRpdmVGaWx0ZXJEb21haW4nLFxyXG5cclxuICAvLyBEUElfRGF0ZVRpbWVQZXJpb2QsIGhhdmluZyB0eXBlIERhdGVUaW1lUGVyaW9kUHJlc01vZGVsXHJcbiAgRGF0ZVRpbWVQZXJpb2QgPSAnZGF0ZVRpbWVQZXJpb2QnLFxyXG5cclxuICAvLyBEUElfRGF0ZVRpbWVQZXJpb2RzLCBoYXZpbmcgdHlwZSBEYXRlVGltZVBlcmlvZFByZXNNb2RlbFtdXHJcbiAgRGF0ZVRpbWVQZXJpb2RzID0gJ2RhdGVUaW1lUGVyaW9kcycsXHJcblxyXG4gIC8vIERQSV9SZWxhdGl2ZURhdGVGaWx0ZXIsIGhhdmluZyB0eXBlIFJlbGF0aXZlRGF0ZUZpbHRlclByZXNNb2RlbFxyXG4gIFJlbGF0aXZlRGF0ZUZpbHRlciA9ICdyZWxhdGl2ZURhdGVGaWx0ZXInLFxyXG5cclxuICAvLyBEUElfVmFsaWRhdGlvblJlc3VsdHMsIGhhdmluZyB0eXBlIFZhbGlkYXRpb25SZXN1bHRzUHJlc01vZGVsXHJcbiAgVmFsaWRhdGlvblJlc3VsdHMgPSAndmFsaWRhdGlvblJlc3VsdHMnLFxyXG5cclxuICAvLyBEUElfRG9tYWluTWVtYmVyLCBoYXZpbmcgdHlwZSBEb21haW5NZW1iZXJQcmVzTW9kZWxcclxuICBEb21haW5NZW1iZXIgPSAnZG9tYWluTWVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpbk1lbWJlcnMsIGhhdmluZyB0eXBlIERvbWFpbk1lbWJlclByZXNNb2RlbFtdXHJcbiAgRG9tYWluTWVtYmVycyA9ICdkb21haW5NZW1iZXJzJyxcclxuXHJcbiAgLy8gRFBJX1F1aWNrRmlsdGVyRGlzcGxheSwgaGF2aW5nIHR5cGUgUXVpY2tGaWx0ZXJEaXNwbGF5UHJlc01vZGVsXHJcbiAgUXVpY2tGaWx0ZXJEaXNwbGF5ID0gJ3F1aWNrRmlsdGVyRGlzcGxheScsXHJcblxyXG4gIC8vIERQSV9RdWlja0ZpbHRlciwgaGF2aW5nIHR5cGUgUXVpY2tGaWx0ZXJQcmVzTW9kZWxcclxuICBRdWlja0ZpbHRlciA9ICdxdWlja0ZpbHRlcicsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVRdWlja0ZpbHRlciwgaGF2aW5nIHR5cGUgUXVhbnRpdGF0aXZlUXVpY2tGaWx0ZXJQcmVzTW9kZWxcclxuICBRdWFudGl0YXRpdmVRdWlja0ZpbHRlciA9ICdxdWFudGl0YXRpdmVRdWlja0ZpbHRlcicsXHJcblxyXG4gIC8vIERQSV9SZWxhdGl2ZURhdGVRdWlja0ZpbHRlciwgaGF2aW5nIHR5cGUgUmVsYXRpdmVEYXRlUXVpY2tGaWx0ZXJQcmVzTW9kZWxcclxuICBSZWxhdGl2ZURhdGVRdWlja0ZpbHRlciA9ICdyZWxhdGl2ZURhdGVRdWlja0ZpbHRlcicsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbFF1aWNrRmlsdGVyLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbFF1aWNrRmlsdGVyUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxRdWlja0ZpbHRlciA9ICdjYXRlZ29yaWNhbFF1aWNrRmlsdGVyJyxcclxuXHJcbiAgLy8gRFBJX0hpZXJhcmNoaWNhbFF1aWNrRmlsdGVyLCBoYXZpbmcgdHlwZSBIaWVyYXJjaGljYWxRdWlja0ZpbHRlclByZXNNb2RlbFxyXG4gIEhpZXJhcmNoaWNhbFF1aWNrRmlsdGVyID0gJ2hpZXJhcmNoaWNhbFF1aWNrRmlsdGVyJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpblRhYmxlLCBoYXZpbmcgdHlwZSBEb21haW5UYWJsZVByZXNNb2RlbFxyXG4gIERvbWFpblRhYmxlID0gJ2RvbWFpblRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpblRhYmxlcywgaGF2aW5nIHR5cGUgRG9tYWluVGFibGVQcmVzTW9kZWxbXVxyXG4gIERvbWFpblRhYmxlcyA9ICdkb21haW5UYWJsZXMnLFxyXG5cclxuICAvLyBEUElfRG9tYWluVHVwbGVzLCBoYXZpbmcgdHlwZSBUdXBsZXNcclxuICBEb21haW5UdXBsZXMgPSAnZG9tYWluVHVwbGVzJyxcclxuXHJcbiAgLy8gRFBJX1NlYXJjaFR1cGxlcywgaGF2aW5nIHR5cGUgVHVwbGVzXHJcbiAgU2VhcmNoVHVwbGVzID0gJ3NlYXJjaFR1cGxlcycsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZFR1cGxlcywgaGF2aW5nIHR5cGUgVHVwbGVIYXNoXHJcbiAgU2VsZWN0ZWRUdXBsZXMgPSAnc2VsZWN0ZWRUdXBsZXMnLFxyXG5cclxuICAvLyBEUElfUGVuZGluZ1R1cGxlcywgaGF2aW5nIHR5cGUgVHVwbGVIYXNoXHJcbiAgUGVuZGluZ1R1cGxlcyA9ICdwZW5kaW5nVHVwbGVzJyxcclxuXHJcbiAgLy8gRFBJX0RvbWFpbiwgaGF2aW5nIHR5cGUgTXVsdGlEb21haW5cclxuICBEb21haW4gPSAnZG9tYWluJyxcclxuXHJcbiAgLy8gRFBJX0RhdGVPcHRpb24sIGhhdmluZyB0eXBlIERhdGVCaW5EaWFsb2dPcHRpb25QcmVzTW9kZWxcclxuICBEYXRlT3B0aW9uID0gJ2RhdGVPcHRpb24nLFxyXG5cclxuICAvLyBEUElfRGF0ZU9wdGlvbnMsIGhhdmluZyB0eXBlIERhdGVCaW5EaWFsb2dPcHRpb25QcmVzTW9kZWxbXVxyXG4gIERhdGVPcHRpb25zID0gJ2RhdGVPcHRpb25zJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclJhbmdlQWRkLCBoYXZpbmcgdHlwZSBGaWx0ZXJSYW5nZVByZXNNb2RlbFxyXG4gIEZpbHRlclJhbmdlQWRkID0gJ2ZpbHRlclJhbmdlQWRkJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlclJhbmdlUmVtb3ZlLCBoYXZpbmcgdHlwZSBGaWx0ZXJSYW5nZVByZXNNb2RlbFxyXG4gIEZpbHRlclJhbmdlUmVtb3ZlID0gJ2ZpbHRlclJhbmdlUmVtb3ZlJyxcclxuXHJcbiAgLy8gRFBJX0ZpbHRlck9wdGlvbnMsIGhhdmluZyB0eXBlIEZpbHRlck9wdGlvbnNQcmVzTW9kZWxcclxuICBGaWx0ZXJPcHRpb25zID0gJ2ZpbHRlck9wdGlvbnMnLFxyXG5cclxuICAvLyBEUElfTGF5ZXIsIGhhdmluZyB0eXBlIExheWVyUHJlc01vZGVsXHJcbiAgTGF5ZXIgPSAnbGF5ZXInLFxyXG5cclxuICAvLyBEUElfTGF5ZXJzLCBoYXZpbmcgdHlwZSBMYXllclByZXNNb2RlbFtdXHJcbiAgTGF5ZXJzID0gJ2xheWVycycsXHJcblxyXG4gIC8vIERQSV9NYXJrc0NhcmRQcmVzTW9kZWwsIGhhdmluZyB0eXBlIE1hcmtzQ2FyZFByZXNNb2RlbFxyXG4gIE1hcmtzQ2FyZFByZXNNb2RlbCA9ICdtYXJrc0NhcmRQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfVUlJdGVtLCBoYXZpbmcgdHlwZSBVSUl0ZW1QcmVzTW9kZWxcclxuICBVSUl0ZW0gPSAndWlJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0VuY29kaW5nVUlJdGVtLCBoYXZpbmcgdHlwZSBFbmNvZGluZ1VJSXRlbVByZXNNb2RlbFxyXG4gIEVuY29kaW5nVUlJdGVtID0gJ2VuY29kaW5nVWlJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0VuY29kaW5nVUlJdGVtcywgaGF2aW5nIHR5cGUgRW5jb2RpbmdVSUl0ZW1QcmVzTW9kZWxbXVxyXG4gIEVuY29kaW5nVUlJdGVtcyA9ICdlbmNvZGluZ1VpSXRlbXMnLFxyXG5cclxuICAvLyBEUElfUHJpbVR5cGVVSUl0ZW0sIGhhdmluZyB0eXBlIFByaW1pdGl2ZVR5cGVVSUl0ZW1QcmVzTW9kZWxcclxuICBQcmltVHlwZVVJSXRlbSA9ICdwcmltaXRpdmVUeXBlVWlJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1ByaW1UeXBlVUlJdGVtcywgaGF2aW5nIHR5cGUgUHJpbWl0aXZlVHlwZVVJSXRlbVByZXNNb2RlbFtdXHJcbiAgUHJpbVR5cGVVSUl0ZW1zID0gJ3ByaW1pdGl2ZVR5cGVVaUl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0xpbmVJbnRlcnBvbGF0aW9uTW9kZVVJSXRlbSwgaGF2aW5nIHR5cGUgTGluZUludGVycG9sYXRpb25Nb2RlVUlJdGVtUHJlc01vZGVsXHJcbiAgTGluZUludGVycG9sYXRpb25Nb2RlVUlJdGVtID0gJ2xpbmVJbnRlcnBvbGF0aW9uTW9kZVVpSXRlbScsXHJcblxyXG4gIC8vIERQSV9MaW5lSW50ZXJwb2xhdGlvbk1vZGVVSUl0ZW1TZXQsIGhhdmluZyB0eXBlIExpbmVJbnRlcnBvbGF0aW9uTW9kZVVJSXRlbVByZXNNb2RlbFtdXHJcbiAgTGluZUludGVycG9sYXRpb25Nb2RlVUlJdGVtU2V0ID0gJ2xpbmVJbnRlcnBvbGF0aW9uTW9kZVVpSXRlbVNldCcsXHJcblxyXG4gIC8vIERQSV9NYXJrc0NhcmREcm9wZG93bkl0ZW0sIGhhdmluZyB0eXBlIE1hcmtzQ2FyZERyb3Bkb3duSXRlbVByZXNNb2RlbFxyXG4gIE1hcmtzQ2FyZERyb3Bkb3duSXRlbSA9ICdtYXJrc0NhcmREcm9wZG93bkl0ZW0nLFxyXG5cclxuICAvLyBEUElfVG9vbHRpcERyb3Bkb3duSXRlbSwgaGF2aW5nIHR5cGUgVG9vbHRpcERyb3Bkb3duSXRlbVByZXNNb2RlbFxyXG4gIFRvb2x0aXBEcm9wZG93bkl0ZW0gPSAndG9vbHRpcERyb3Bkb3duSXRlbScsXHJcblxyXG4gIC8vIERQSV9UZXh0RHJvcGRvd25JdGVtLCBoYXZpbmcgdHlwZSBUZXh0RHJvcGRvd25JdGVtUHJlc01vZGVsXHJcbiAgVGV4dERyb3Bkb3duSXRlbSA9ICd0ZXh0RHJvcGRvd25JdGVtJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yRHJvcGRvd25JdGVtLCBoYXZpbmcgdHlwZSBDb2xvckRyb3Bkb3duSXRlbVByZXNNb2RlbFxyXG4gIENvbG9yRHJvcGRvd25JdGVtID0gJ2NvbG9yRHJvcGRvd25JdGVtJyxcclxuXHJcbiAgLy8gRFBJX1NpemVTbGlkZXJQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNpemVTbGlkZXJQcmVzTW9kZWxcclxuICBTaXplU2xpZGVyUHJlc01vZGVsID0gJ3NpemVTbGlkZXJQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfSW5mbGVjdGlvblBvaW50LCBoYXZpbmcgdHlwZSBJbmZsZWN0aW9uUG9pbnRQcmVzTW9kZWxcclxuICBJbmZsZWN0aW9uUG9pbnQgPSAnaW5mbGVjdGlvblBvaW50JyxcclxuXHJcbiAgLy8gRFBJX0luZmxlY3Rpb25Qb2ludHMsIGhhdmluZyB0eXBlIEluZmxlY3Rpb25Qb2ludFByZXNNb2RlbFtdXHJcbiAgSW5mbGVjdGlvblBvaW50cyA9ICdpbmZsZWN0aW9uUG9pbnRzJyxcclxuXHJcbiAgLy8gRFBJX05vdGNoLCBoYXZpbmcgdHlwZSBOb3RjaFByZXNNb2RlbFxyXG4gIE5vdGNoID0gJ25vdGNoJyxcclxuXHJcbiAgLy8gRFBJX05vdGNoZXMsIGhhdmluZyB0eXBlIE5vdGNoUHJlc01vZGVsW11cclxuICBOb3RjaGVzID0gJ25vdGNoZXMnLFxyXG5cclxuICAvLyBEUElfTWFya1NpemVPcHRpb25zUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBNYXJrU2l6ZU9wdGlvbnNQcmVzTW9kZWxcclxuICBNYXJrU2l6ZU9wdGlvbnNQcmVzTW9kZWwgPSAnbWFya1NpemVPcHRpb25zUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX01vZGlmeU1hcmtzSW5TZXQsIGhhdmluZyB0eXBlIEFkZE9yUmVtb3ZlTWFya3NcclxuICBNb2RpZnlNYXJrc0luU2V0ID0gJ2FkZE9yUmVtb3ZlTWFya3MnLFxyXG5cclxuICAvLyBEUElfTWFya0xhYmVsc1NwZWNpZmljYXRpb24sIGhhdmluZyB0eXBlIE1hcmtMYWJlbHNTcGVjaWZpY2F0aW9uUHJlc01vZGVsXHJcbiAgTWFya0xhYmVsc1NwZWNpZmljYXRpb24gPSAnbWFya0xhYmVsc1NwZWNpZmljYXRpb24nLFxyXG5cclxuICAvLyBEUElfQ29sb3JQYWxldHRlLCBoYXZpbmcgdHlwZSBDb2xvclBhbGV0dGVQcmVzTW9kZWxcclxuICBDb2xvclBhbGV0dGUgPSAnY29sb3JQYWxldHRlJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkQ29sb3JQYWxldHRlLCBoYXZpbmcgdHlwZSBDb2xvclBhbGV0dGVQcmVzTW9kZWxcclxuICBTZWxlY3RlZENvbG9yUGFsZXR0ZSA9ICdzZWxlY3RlZENvbG9yUGFsZXR0ZScsXHJcblxyXG4gIC8vIERQSV9Db2xvclBhbGV0dGVzLCBoYXZpbmcgdHlwZSBDb2xvclBhbGV0dGVQcmVzTW9kZWxbXVxyXG4gIENvbG9yUGFsZXR0ZXMgPSAnY29sb3JQYWxldHRlcycsXHJcblxyXG4gIC8vIERQSV9Db2xvclBhbGV0dGVHcm91cCwgaGF2aW5nIHR5cGUgQ29sb3JQYWxldHRlR3JvdXBQcmVzTW9kZWxcclxuICBDb2xvclBhbGV0dGVHcm91cCA9ICdjb2xvclBhbGV0dGVHcm91cCcsXHJcblxyXG4gIC8vIERQSV9DYXRDb2xvclBhbGV0dGVHcm91cHMsIGhhdmluZyB0eXBlIENvbG9yUGFsZXR0ZUdyb3VwUHJlc01vZGVsW11cclxuICBDYXRDb2xvclBhbGV0dGVHcm91cHMgPSAnY2F0Q29sb3JQYWxldHRlR3JvdXBzJyxcclxuXHJcbiAgLy8gRFBJX1FDb2xvclBhbGV0dGVHcm91cHMsIGhhdmluZyB0eXBlIENvbG9yUGFsZXR0ZUdyb3VwUHJlc01vZGVsW11cclxuICBRQ29sb3JQYWxldHRlR3JvdXBzID0gJ3FDb2xvclBhbGV0dGVHcm91cHMnLFxyXG5cclxuICAvLyBEUElfQ29sb3JQYWxldHRlQ29sbGVjdGlvbiwgaGF2aW5nIHR5cGUgQ29sb3JQYWxldHRlQ29sbGVjdGlvblByZXNNb2RlbFxyXG4gIENvbG9yUGFsZXR0ZUNvbGxlY3Rpb24gPSAnY29sb3JQYWxldHRlQ29sbGVjdGlvbicsXHJcblxyXG4gIC8vIERQSV9RdWFudGl0YXRpdmVDb2xvciwgaGF2aW5nIHR5cGUgUXVhbnRpdGF0aXZlQ29sb3JQcmVzTW9kZWxcclxuICBRdWFudGl0YXRpdmVDb2xvciA9ICdxdWFudGl0YXRpdmVDb2xvcicsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbENvbG9yLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbENvbG9yUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxDb2xvciA9ICdjYXRlZ29yaWNhbENvbG9yJyxcclxuXHJcbiAgLy8gRFBJX0l0ZW1Db2xvclBhaXIsIGhhdmluZyB0eXBlIEl0ZW1Db2xvclBhaXJQcmVzTW9kZWxcclxuICBJdGVtQ29sb3JQYWlyID0gJ2l0ZW1Db2xvclBhaXInLFxyXG5cclxuICAvLyBEUElfSXRlbUNvbG9yUGFpcnMsIGhhdmluZyB0eXBlIEl0ZW1Db2xvclBhaXJQcmVzTW9kZWxbXVxyXG4gIEl0ZW1Db2xvclBhaXJzID0gJ2l0ZW1Db2xvclBhaXJzJyxcclxuXHJcbiAgLy8gRFBJX1ZRTENvbW1hbmRSZXNwb25zZSwgaGF2aW5nIHR5cGUgVlFMQ29tbWFuZFJlc3BvbnNlUHJlc01vZGVsXHJcbiAgVlFMQ29tbWFuZFJlc3BvbnNlID0gJ3ZxbENtZFJlc3BvbnNlJyxcclxuXHJcbiAgLy8gRFBJX0xheW91dFN0YXR1cywgaGF2aW5nIHR5cGUgTGF5b3V0U3RhdHVzUHJlc01vZGVsXHJcbiAgTGF5b3V0U3RhdHVzID0gJ2xheW91dFN0YXR1cycsXHJcblxyXG4gIC8vIERQSV9WaXpTdGF0ZSwgaGF2aW5nIHR5cGUgVml6U3RhdGVQcmVzTW9kZWxcclxuICBWaXpTdGF0ZSA9ICd2aXpTdGF0ZScsXHJcblxyXG4gIC8vIERQSV9WaXpTdGF0ZUxpc3QsIGhhdmluZyB0eXBlIFZpelN0YXRlUHJlc01vZGVsW11cclxuICBWaXpTdGF0ZUxpc3QgPSAndml6U3RhdGVMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0NvbW1hbmRSZXN1bHQsIGhhdmluZyB0eXBlIENvbW1hbmRSZXN1bHRQcmVzTW9kZWxcclxuICBDb21tYW5kUmVzdWx0ID0gJ2NtZFJlc3VsdCcsXHJcblxyXG4gIC8vIERQSV9Db21tYW5kUmVzdWx0TGlzdCwgaGF2aW5nIHR5cGUgQ29tbWFuZFJlc3VsdFByZXNNb2RlbFtdXHJcbiAgQ29tbWFuZFJlc3VsdExpc3QgPSAnY21kUmVzdWx0TGlzdCcsXHJcblxyXG4gIC8vIERQSV9VUkxBY3Rpb24sIGhhdmluZyB0eXBlIFVSTEFjdGlvblByZXNNb2RlbFxyXG4gIFVSTEFjdGlvbiA9ICd1cmxBY3Rpb24nLFxyXG5cclxuICAvLyBEUElfVVJMQWN0aW9uTGlzdCwgaGF2aW5nIHR5cGUgVVJMQWN0aW9uUHJlc01vZGVsW11cclxuICBVUkxBY3Rpb25MaXN0ID0gJ3VybEFjdGlvbkxpc3QnLFxyXG5cclxuICAvLyBEUElfTGVnYWN5TWVudSwgaGF2aW5nIHR5cGUgTGVnYWN5TWVudVByZXNNb2RlbFxyXG4gIExlZ2FjeU1lbnUgPSAnbGVnYWN5TWVudScsXHJcblxyXG4gIC8vIERQSV9MZWdhY3lNZW51cywgaGF2aW5nIHR5cGUgTGVnYWN5TWVudVByZXNNb2RlbFtdXHJcbiAgTGVnYWN5TWVudXMgPSAnbGVnYWN5TWVudXMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkF0dGVtcHRJbmZvLCBoYXZpbmcgdHlwZSBDb25uZWN0aW9uQXR0ZW1wdEluZm9QcmVzTW9kZWxcclxuICBDb25uZWN0aW9uQXR0ZW1wdEluZm8gPSAnY29ubmVjdGlvbkF0dGVtcHRJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VDb25uZWN0aW9uQXR0ZW1wdEluZm8sIGhhdmluZyB0eXBlIERhdGFTb3VyY2VDb25uZWN0aW9uQXR0ZW1wdEluZm9QcmVzTW9kZWxcclxuICBEYXRhU291cmNlQ29ubmVjdGlvbkF0dGVtcHRJbmZvID0gJ2RhdGFTb3VyY2VDb25uZWN0aW9uQXR0ZW1wdEluZm8nLFxyXG5cclxuICAvLyBEUElfRGF0YVNvdXJjZUNvbm5lY3Rpb25BdHRlbXB0SW5mb3MsIGhhdmluZyB0eXBlIERhdGFTb3VyY2VDb25uZWN0aW9uQXR0ZW1wdEluZm9QcmVzTW9kZWxbXVxyXG4gIERhdGFTb3VyY2VDb25uZWN0aW9uQXR0ZW1wdEluZm9zID0gJ2RhdGFTb3VyY2VDb25uZWN0aW9uQXR0ZW1wdEluZm9zJyxcclxuXHJcbiAgLy8gRFBJX0NvbW1hbmRWYWxpZGF0aW9uUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBDb21tYW5kVmFsaWRhdGlvblByZXNNb2RlbFxyXG4gIENvbW1hbmRWYWxpZGF0aW9uUHJlc01vZGVsID0gJ2NvbW1hbmRWYWxpZGF0aW9uUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1dhcm5pbmdNZXNzYWdlLCBoYXZpbmcgdHlwZSBXYXJuaW5nTWVzc2FnZVByZXNNb2RlbFxyXG4gIFdhcm5pbmdNZXNzYWdlID0gJ3dhcm5pbmdNZXNzYWdlUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0FwcGxpY2F0aW9uUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBBcHBsaWNhdGlvblByZXNNb2RlbFxyXG4gIEFwcGxpY2F0aW9uUHJlc01vZGVsID0gJ2FwcGxpY2F0aW9uUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1Rvb2xiYXJQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFRvb2xiYXJQcmVzTW9kZWxcclxuICBUb29sYmFyUHJlc01vZGVsID0gJ3Rvb2xiYXJQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfV29ya2Jvb2tQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFdvcmtib29rUHJlc01vZGVsXHJcbiAgV29ya2Jvb2tQcmVzTW9kZWwgPSAnd29ya2Jvb2tQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfU2VydmVyRm9udHMsIGhhdmluZyB0eXBlIFNlcnZlckZvbnRzUHJlc01vZGVsXHJcbiAgU2VydmVyRm9udHMgPSAnc2VydmVyRm9udHMnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaERhdGFTb3VyY2VNZXRhZGF0YVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgUHVibGlzaERhdGFTb3VyY2VNZXRhZGF0YVByZXNNb2RlbFxyXG4gIFB1Ymxpc2hEYXRhU291cmNlTWV0YWRhdGFQcmVzTW9kZWwgPSAncHVibGlzaERhdGFTb3VyY2VNZXRhZGF0YVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRQcmVzTW9kZWwsIGhhdmluZyB0eXBlIERhc2hib2FyZFByZXNNb2RlbFxyXG4gIERhc2hib2FyZFByZXNNb2RlbCA9ICdkYXNoYm9hcmRQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkU2l6ZVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRGFzaGJvYXJkU2l6ZVByZXNNb2RlbFxyXG4gIERhc2hib2FyZFNpemVQcmVzTW9kZWwgPSAnZGFzaGJvYXJkU2l6ZVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRTaXplV2l0aFZhbGlkYXRpb25QcmVzTW9kZWwsIGhhdmluZyB0eXBlIERhc2hib2FyZFNpemVXaXRoVmFsaWRhdGlvblByZXNNb2RlbFxyXG4gIERhc2hib2FyZFNpemVXaXRoVmFsaWRhdGlvblByZXNNb2RlbCA9ICdkYXNoYm9hcmRTaXplV2l0aFZhbGlkYXRpb25QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRGFzaGJvYXJkSW5mb1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRGFzaGJvYXJkSW5mb1ByZXNNb2RlbFxyXG4gIERhc2hib2FyZEluZm9QcmVzTW9kZWwgPSAnZGFzaGJvYXJkSW5mb1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9WaXN1YWxQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFZpc3VhbFByZXNNb2RlbFxyXG4gIFZpc3VhbFByZXNNb2RlbCA9ICd2aXN1YWwnLFxyXG5cclxuICAvLyBEUElfVmlzdWFsUHJlc01vZGVscywgaGF2aW5nIHR5cGUgVmlzdWFsUHJlc01vZGVsW11cclxuICBWaXN1YWxQcmVzTW9kZWxzID0gJ3Zpc3VhbHMnLFxyXG5cclxuICAvLyBEUElfRHJvcExpbmVzUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBEcm9wTGluZXNQcmVzTW9kZWxcclxuICBEcm9wTGluZXNQcmVzTW9kZWwgPSAnZHJvcExpbmVzUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3BGaWVsZFByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRHJvcEZpZWxkUHJlc01vZGVsXHJcbiAgRHJvcEZpZWxkUHJlc01vZGVsID0gJ2Ryb3BGaWVsZFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9Ecm9wRmllbGRSZXN1bHRQcmVzTW9kZWwsIGhhdmluZyB0eXBlIERyb3BGaWVsZFJlc3VsdFByZXNNb2RlbFxyXG4gIERyb3BGaWVsZFJlc3VsdFByZXNNb2RlbCA9ICdkcm9wRmllbGRSZXN1bHRQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfQ3VycmVudEF4aXNSYW5nZSwgaGF2aW5nIHR5cGUgRGF0YVZhbHVlUmFuZ2VQcmVzTW9kZWxcclxuICBDdXJyZW50QXhpc1JhbmdlID0gJ2N1cnJlbnRBeGlzUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfQ3VycmVudEF4aXNSYW5nZU5vVGltZSwgaGF2aW5nIHR5cGUgRGF0YVZhbHVlUmFuZ2VQcmVzTW9kZWxcclxuICBDdXJyZW50QXhpc1JhbmdlTm9UaW1lID0gJ2N1cnJlbnRBeGlzUmFuZ2VOb1RpbWUnLFxyXG5cclxuICAvLyBEUElfRGVmYXVsdEF4aXNSYW5nZSwgaGF2aW5nIHR5cGUgRGF0YVZhbHVlUmFuZ2VQcmVzTW9kZWxcclxuICBEZWZhdWx0QXhpc1JhbmdlID0gJ2RlZmF1bHRBeGlzUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfTmV3QXhpc1JhbmdlLCBoYXZpbmcgdHlwZSBEYXRhVmFsdWVSYW5nZVByZXNNb2RlbFxyXG4gIE5ld0F4aXNSYW5nZSA9ICduZXdBeGlzUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfQXhpc09wdGlvbnMsIGhhdmluZyB0eXBlIEF4aXNPcHRpb25zUHJlc01vZGVsXHJcbiAgQXhpc09wdGlvbnMgPSAnYXhpcycsXHJcblxyXG4gIC8vIERQSV9BeGlzTWFqb3JUaWNrcywgaGF2aW5nIHR5cGUgVGlja01hcmtJbmZvUHJlc01vZGVsXHJcbiAgQXhpc01ham9yVGlja3MgPSAnYXhpc01ham9yVGlja3MnLFxyXG5cclxuICAvLyBEUElfQXhpc01pbm9yVGlja3MsIGhhdmluZyB0eXBlIFRpY2tNYXJrSW5mb1ByZXNNb2RlbFxyXG4gIEF4aXNNaW5vclRpY2tzID0gJ2F4aXNNaW5vclRpY2tzJyxcclxuXHJcbiAgLy8gRFBJX0VkaXRBeGlzRGlhbG9nLCBoYXZpbmcgdHlwZSBFZGl0QXhpc0RpYWxvZ1ByZXNNb2RlbFxyXG4gIEVkaXRBeGlzRGlhbG9nID0gJ2VkaXRBeGlzRGlhbG9nJyxcclxuXHJcbiAgLy8gRFBJX01hcmtMYWJlbHMsIGhhdmluZyB0eXBlIFNjZW5lUHJlc01vZGVsXHJcbiAgTWFya0xhYmVscyA9ICdtYXJrTGFiZWxzJyxcclxuXHJcbiAgLy8gRFBJX1NjZW5lLCBoYXZpbmcgdHlwZSBTY2VuZVByZXNNb2RlbFxyXG4gIFNjZW5lID0gJ3NjZW5lJyxcclxuXHJcbiAgLy8gRFBJX01hcFNlcnZlciwgaGF2aW5nIHR5cGUgTWFwU2VydmVyUHJlc01vZGVsXHJcbiAgTWFwU2VydmVyID0gJ21hcFNlcnZlcicsXHJcblxyXG4gIC8vIERQSV9WaXN1YWxMaXN0LCBoYXZpbmcgdHlwZSBWaXN1YWxMaXN0UHJlc01vZGVsXHJcbiAgVmlzdWFsTGlzdCA9ICd2aXN1YWxMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0RyYXdGaXJzdCwgaGF2aW5nIHR5cGUgVmlzdWFsTGlzdFByZXNNb2RlbFtdXHJcbiAgRHJhd0ZpcnN0ID0gJ2RyYXdGaXJzdCcsXHJcblxyXG4gIC8vIERQSV9EcmF3TGFzdCwgaGF2aW5nIHR5cGUgVmlzdWFsTGlzdFByZXNNb2RlbFtdXHJcbiAgRHJhd0xhc3QgPSAnZHJhd0xhc3QnLFxyXG5cclxuICAvLyBEUElfRHJhd1BhbmUsIGhhdmluZyB0eXBlIFZpc3VhbExpc3RQcmVzTW9kZWxbXVxyXG4gIERyYXdQYW5lID0gJ2RyYXdQYW5lJyxcclxuXHJcbiAgLy8gRFBJX1VzZXJQYW5lSW5mbywgaGF2aW5nIHR5cGUgVXNlclBhbmVJbmZvUHJlc01vZGVsXHJcbiAgVXNlclBhbmVJbmZvID0gJ3VzZXJQYW5lSW5mbycsXHJcblxyXG4gIC8vIERQSV9BbmFseXRpY3NQYW5lLCBoYXZpbmcgdHlwZSBBbmFseXRpY3NQYW5lUHJlc01vZGVsXHJcbiAgQW5hbHl0aWNzUGFuZSA9ICdhbmFseXRpY3NQYW5lJyxcclxuXHJcbiAgLy8gRFBJX0FuYWx5dGljc09iamVjdEl0ZW0sIGhhdmluZyB0eXBlIEFuYWx5dGljc09iamVjdEl0ZW1QcmVzTW9kZWxcclxuICBBbmFseXRpY3NPYmplY3RJdGVtID0gJ2FuYWx5dGljc09iamVjdEl0ZW0nLFxyXG5cclxuICAvLyBEUElfQW5hbHl0aWNzT2JqZWN0SXRlbXMsIGhhdmluZyB0eXBlIEFuYWx5dGljc09iamVjdEl0ZW1QcmVzTW9kZWxbXVxyXG4gIEFuYWx5dGljc09iamVjdEl0ZW1zID0gJ2FuYWx5dGljc09iamVjdEl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0FuYWx5dGljc09iamVjdEdyb3VwLCBoYXZpbmcgdHlwZSBBbmFseXRpY3NPYmplY3RHcm91cFByZXNNb2RlbFxyXG4gIEFuYWx5dGljc09iamVjdEdyb3VwID0gJ2FuYWx5dGljc09iamVjdEdyb3VwJyxcclxuXHJcbiAgLy8gRFBJX0FuYWx5dGljc09iamVjdEdyb3VwcywgaGF2aW5nIHR5cGUgQW5hbHl0aWNzT2JqZWN0R3JvdXBQcmVzTW9kZWxbXVxyXG4gIEFuYWx5dGljc09iamVjdEdyb3VwcyA9ICdhbmFseXRpY3NPYmplY3RHcm91cHMnLFxyXG5cclxuICAvLyBEUElfRHJvcFpvbmVJdGVtLCBoYXZpbmcgdHlwZSBEcm9wWm9uZUl0ZW1QcmVzTW9kZWxcclxuICBEcm9wWm9uZUl0ZW0gPSAnZHJvcFpvbmVJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3Bab25lSXRlbXMsIGhhdmluZyB0eXBlIERyb3Bab25lSXRlbVByZXNNb2RlbFtdXHJcbiAgRHJvcFpvbmVJdGVtcyA9ICdkcm9wWm9uZUl0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3BUYXJnZXRJbmZvLCBoYXZpbmcgdHlwZSBEcm9wVGFyZ2V0SW5mb1ByZXNNb2RlbFxyXG4gIERyb3BUYXJnZXRJbmZvID0gJ2Ryb3BUYXJnZXRJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1BhbmUsIGhhdmluZyB0eXBlIFBhbmVQcmVzTW9kZWxcclxuICBQYW5lID0gJ3BhbmUnLFxyXG5cclxuICAvLyBEUElfUGFuZXMsIGhhdmluZyB0eXBlIFBhbmVQcmVzTW9kZWxbXVxyXG4gIFBhbmVzID0gJ3BhbmVzJyxcclxuXHJcbiAgLy8gRFBJX1JhZGlhbFNlbGVjdGlvbkRpc3RhbmNlSW5mbywgaGF2aW5nIHR5cGUgUmFkaWFsU2VsZWN0aW9uRGlzdGFuY2VJbmZvUHJlc01vZGVsXHJcbiAgUmFkaWFsU2VsZWN0aW9uRGlzdGFuY2VJbmZvID0gJ3JhZGlhbFNlbGVjdGlvbkRpc3RhbmNlSW5mbycsXHJcblxyXG4gIC8vIERQSV9NYXBTY2FsZUluZm8sIGhhdmluZyB0eXBlIE1hcFNjYWxlSW5mb1ByZXNNb2RlbFxyXG4gIE1hcFNjYWxlSW5mbyA9ICdtYXBTY2FsZUluZm8nLFxyXG5cclxuICAvLyBEUElfUmVuZGVyTm9kZSwgaGF2aW5nIHR5cGUgUmVuZGVyTm9kZVByZXNNb2RlbFxyXG4gIFJlbmRlck5vZGUgPSAncmVuZGVyTm9kZScsXHJcblxyXG4gIC8vIERQSV9SZW5kZXJOb2RlcywgaGF2aW5nIHR5cGUgUmVuZGVyTm9kZVByZXNNb2RlbFtdXHJcbiAgUmVuZGVyTm9kZXMgPSAncmVuZGVyTm9kZXMnLFxyXG5cclxuICAvLyBEUElfUHJlZGljdGlvbkJhbmQsIGhhdmluZyB0eXBlIFByZWRpY3Rpb25CYW5kUHJlc01vZGVsXHJcbiAgUHJlZGljdGlvbkJhbmQgPSAncHJlZGljdGlvbkJhbmQnLFxyXG5cclxuICAvLyBEUElfUHJlZGljdGlvbldoaXNrZXIsIGhhdmluZyB0eXBlIFByZWRpY3Rpb25XaGlza2VyUHJlc01vZGVsXHJcbiAgUHJlZGljdGlvbldoaXNrZXIgPSAncHJlZGljdGlvbldoaXNrZXInLFxyXG5cclxuICAvLyBEUElfRHJhd0dyb3VwLCBoYXZpbmcgdHlwZSBEcmF3UG9pbnRzUHJlc01vZGVsXHJcbiAgRHJhd0dyb3VwID0gJ2RyYXdHcm91cCcsXHJcblxyXG4gIC8vIERQSV9DbGlwUmVzZXQsIGhhdmluZyB0eXBlIERyYXdJdGVtUHJlc01vZGVsXHJcbiAgQ2xpcFJlc2V0ID0gJ2NsaXBSZXNldCcsXHJcblxyXG4gIC8vIERQSV9EcmF3SXRlbSwgaGF2aW5nIHR5cGUgRHJhd0l0ZW1QcmVzTW9kZWxcclxuICBEcmF3SXRlbSA9ICdkcmF3SXRlbScsXHJcblxyXG4gIC8vIERQSV9UcmFuc2Zvcm1Qb3AsIGhhdmluZyB0eXBlIERyYXdJdGVtUHJlc01vZGVsXHJcbiAgVHJhbnNmb3JtUG9wID0gJ3RyYW5zZm9ybVBvcCcsXHJcblxyXG4gIC8vIERQSV9UcmFuc2Zvcm1QdXNoLCBoYXZpbmcgdHlwZSBEcmF3SXRlbVByZXNNb2RlbFxyXG4gIFRyYW5zZm9ybVB1c2ggPSAndHJhbnNmb3JtUHVzaCcsXHJcblxyXG4gIC8vIERQSV9EcmF3SXRlbXMsIGhhdmluZyB0eXBlIERyYXdJdGVtUHJlc01vZGVsW11cclxuICBEcmF3SXRlbXMgPSAnZHJhd0l0ZW1zJyxcclxuXHJcbiAgLy8gRFBJX0NsaXBSZWN0LCBoYXZpbmcgdHlwZSBEcmF3UG9pbnRzUHJlc01vZGVsXHJcbiAgQ2xpcFJlY3QgPSAnY2xpcFJlY3QnLFxyXG5cclxuICAvLyBEUElfRHJhd0VsbGlwc2UsIGhhdmluZyB0eXBlIERyYXdQb2ludHNQcmVzTW9kZWxcclxuICBEcmF3RWxsaXBzZSA9ICdkcmF3RWxsaXBzZScsXHJcblxyXG4gIC8vIERQSV9EcmF3RmlsbEVsbGlwc2UsIGhhdmluZyB0eXBlIERyYXdQb2ludHNQcmVzTW9kZWxcclxuICBEcmF3RmlsbEVsbGlwc2UgPSAnZHJhd0ZpbGxFbGxpcHNlJyxcclxuXHJcbiAgLy8gRFBJX0RyYXdGaWxsUG9seWdvbiwgaGF2aW5nIHR5cGUgRHJhd1BvaW50c1ByZXNNb2RlbFxyXG4gIERyYXdGaWxsUG9seWdvbiA9ICdkcmF3RmlsbFBvbHlnb24nLFxyXG5cclxuICAvLyBEUElfRHJhd0ZpbGxSZWN0LCBoYXZpbmcgdHlwZSBEcmF3UG9pbnRzUHJlc01vZGVsXHJcbiAgRHJhd0ZpbGxSZWN0ID0gJ2RyYXdGaWxsUmVjdCcsXHJcblxyXG4gIC8vIERQSV9EcmF3UG9seWdvbiwgaGF2aW5nIHR5cGUgRHJhd1BvaW50c1ByZXNNb2RlbFxyXG4gIERyYXdQb2x5Z29uID0gJ2RyYXdQb2x5Z29uJyxcclxuXHJcbiAgLy8gRFBJX0RyYXdQb2x5bGluZSwgaGF2aW5nIHR5cGUgRHJhd1BvaW50c1ByZXNNb2RlbFxyXG4gIERyYXdQb2x5bGluZSA9ICdkcmF3UG9seWxpbmUnLFxyXG5cclxuICAvLyBEUElfRHJhd1JlY3QsIGhhdmluZyB0eXBlIERyYXdQb2ludHNQcmVzTW9kZWxcclxuICBEcmF3UmVjdCA9ICdkcmF3UmVjdCcsXHJcblxyXG4gIC8vIERQSV9EcmF3RmlsbFBhdGgsIGhhdmluZyB0eXBlIERyYXdQYXRoUHJlc01vZGVsXHJcbiAgRHJhd0ZpbGxQYXRoID0gJ2RyYXdGaWxsUGF0aCcsXHJcblxyXG4gIC8vIERQSV9EcmF3UGF0aCwgaGF2aW5nIHR5cGUgRHJhd1BhdGhQcmVzTW9kZWxcclxuICBEcmF3UGF0aCA9ICdkcmF3UGF0aCcsXHJcblxyXG4gIC8vIERQSV9EcmF3VGV4dCwgaGF2aW5nIHR5cGUgRHJhd1RleHRQcmVzTW9kZWxcclxuICBEcmF3VGV4dCA9ICdkcmF3VGV4dCcsXHJcblxyXG4gIC8vIERQSV9EcmF3SW1hZ2UsIGhhdmluZyB0eXBlIERyYXdJbWFnZVByZXNNb2RlbFxyXG4gIERyYXdJbWFnZSA9ICdkcmF3SW1hZ2UnLFxyXG5cclxuICAvLyBEUElfSW1hZ2VUaWxlSW5mbywgaGF2aW5nIHR5cGUgSW1hZ2VUaWxlSW5mb1ByZXNNb2RlbFxyXG4gIEltYWdlVGlsZUluZm8gPSAndGlsZUluZm8nLFxyXG5cclxuICAvLyBEUElfSW1hZ2VUaWxlSW5mb3MsIGhhdmluZyB0eXBlIEltYWdlVGlsZUluZm9QcmVzTW9kZWxbXVxyXG4gIEltYWdlVGlsZUluZm9zID0gJ3RpbGVJbmZvcycsXHJcblxyXG4gIC8vIERQSV9EcmF3SW1hZ2VUaWxlcywgaGF2aW5nIHR5cGUgRHJhd0ltYWdlVGlsZXNQcmVzTW9kZWxcclxuICBEcmF3SW1hZ2VUaWxlcyA9ICdkcmF3SW1hZ2VUaWxlcycsXHJcblxyXG4gIC8vIERQSV9EcmF3UGVuLCBoYXZpbmcgdHlwZSBEcmF3UGVuUHJlc01vZGVsXHJcbiAgRHJhd1BlbiA9ICdkcmF3UGVuJyxcclxuXHJcbiAgLy8gRFBJX0RyYXdTb2xpZEJydXNoLCBoYXZpbmcgdHlwZSBEcmF3U29saWRCcnVzaFByZXNNb2RlbFxyXG4gIERyYXdTb2xpZEJydXNoID0gJ2RyYXdTb2xpZEJydXNoJyxcclxuXHJcbiAgLy8gRFBJX0RyYXdUZXh0UHJvcGVydGllcywgaGF2aW5nIHR5cGUgRHJhd1RleHRQcm9wZXJ0aWVzUHJlc01vZGVsXHJcbiAgRHJhd1RleHRQcm9wZXJ0aWVzID0gJ2RyYXdUZXh0UHJvcHMnLFxyXG5cclxuICAvLyBEUElfRHJhd0dyYWRpZW50QnJ1c2gsIGhhdmluZyB0eXBlIERyYXdHcmFkaWVudEJydXNoUHJlc01vZGVsXHJcbiAgRHJhd0dyYWRpZW50QnJ1c2ggPSAnZHJhd0dyYWRpZW50QnJ1c2gnLFxyXG5cclxuICAvLyBEUElfRHJhd1RyYW5zZm9ybSwgaGF2aW5nIHR5cGUgRHJhd1RyYW5zZm9ybVByZXNNb2RlbFxyXG4gIERyYXdUcmFuc2Zvcm0gPSAndHJhbnNmb3JtJyxcclxuXHJcbiAgLy8gRFBJX0RyYXdBbnRpYWxpYXMsIGhhdmluZyB0eXBlIERyYXdBbnRpYWxpYXNQcmVzTW9kZWxcclxuICBEcmF3QW50aWFsaWFzID0gJ2RyYXdBbnRpYWxpYXMnLFxyXG5cclxuICAvLyBEUElfSW1hZ2VEaWN0aW9uYXJ5LCBoYXZpbmcgdHlwZSBJbWFnZURpY3Rpb25hcnlQcmVzTW9kZWxcclxuICBJbWFnZURpY3Rpb25hcnkgPSAnaW1hZ2VEaWN0aW9uYXJ5JyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yRGljdGlvbmFyeSwgaGF2aW5nIHR5cGUgQ29sb3JEaWN0aW9uYXJ5UHJlc01vZGVsXHJcbiAgQ29sb3JEaWN0aW9uYXJ5ID0gJ2NvbG9yRGljdGlvbmFyeScsXHJcblxyXG4gIC8vIERQSV9NYXJrU2hhcGUsIGhhdmluZyB0eXBlIE1hcmtTaGFwZVByZXNNb2RlbFxyXG4gIE1hcmtTaGFwZSA9ICdtYXJrU2hhcGUnLFxyXG5cclxuICAvLyBEUElfTWFya1NoYXBlTGlzdCwgaGF2aW5nIHR5cGUgTWFya1NoYXBlUHJlc01vZGVsW11cclxuICBNYXJrU2hhcGVMaXN0ID0gJ21hcmtTaGFwZUxpc3QnLFxyXG5cclxuICAvLyBEUElfUGFuZURlc2NyaXB0b3IsIGhhdmluZyB0eXBlIFBhbmVEZXNjcmlwdG9yUHJlc01vZGVsXHJcbiAgUGFuZURlc2NyaXB0b3IgPSAncGFuZURlc2NyaXB0b3InLFxyXG5cclxuICAvLyBEUElfUERNYXJrcywgaGF2aW5nIHR5cGUgUERNYXJrc1ByZXNNb2RlbFxyXG4gIFBETWFya3MgPSAncGRNYXJrcycsXHJcblxyXG4gIC8vIERQSV9QRE1hcmtzTWFwLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIFBETWFya3NQcmVzTW9kZWwpXHJcbiAgUERNYXJrc01hcCA9ICdwZE1hcmtzTWFwJyxcclxuXHJcbiAgLy8gRFBJX0xhYmVsVGV4dFRhYmxlLCBoYXZpbmcgdHlwZSBMYWJlbFRleHRUYWJsZVxyXG4gIExhYmVsVGV4dFRhYmxlID0gJ2xhYmVsVGV4dFRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX1RleHRUYWJsZUhlbHBlciwgaGF2aW5nIHR5cGUgVGV4dFRhYmxlSGVscGVyXHJcbiAgVGV4dFRhYmxlSGVscGVyID0gJ3RleHRUYWJsZUhlbHBlcicsXHJcblxyXG4gIC8vIERQSV9HZW9tZXRyeVRhYmxlLCBoYXZpbmcgdHlwZSBHZW9tZXRyeVRhYmxlXHJcbiAgR2VvbWV0cnlUYWJsZSA9ICdnZW9tZXRyeVRhYmxlJyxcclxuXHJcbiAgLy8gRFBJX1BhbmVNYXJrcywgaGF2aW5nIHR5cGUgUGFuZU1hcmtzUHJlc01vZGVsXHJcbiAgUGFuZU1hcmtzID0gJ3BhbmVNYXJrcycsXHJcblxyXG4gIC8vIERQSV9QYW5lTWFya3NMaXN0LCBoYXZpbmcgdHlwZSBQYW5lTWFya3NQcmVzTW9kZWxbXVxyXG4gIFBhbmVNYXJrc0xpc3QgPSAncGFuZU1hcmtzTGlzdCcsXHJcblxyXG4gIC8vIERQSV9CcnVzaGluZ1NlbGVjdGlvbiwgaGF2aW5nIHR5cGUgU2VsZWN0aW9uUHJlc01vZGVsXHJcbiAgQnJ1c2hpbmdTZWxlY3Rpb24gPSAnYnJ1c2hpbmcnLFxyXG5cclxuICAvLyBEUElfU2VsZWN0aW9uLCBoYXZpbmcgdHlwZSBTZWxlY3Rpb25QcmVzTW9kZWxcclxuICBTZWxlY3Rpb24gPSAnc2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0JydXNoaW5nU2VsZWN0aW9uTGlzdCwgaGF2aW5nIHR5cGUgU2VsZWN0aW9uUHJlc01vZGVsW11cclxuICBCcnVzaGluZ1NlbGVjdGlvbkxpc3QgPSAnYnJ1c2hpbmdTZWxlY3Rpb25MaXN0JyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGlvbkxpc3QsIGhhdmluZyB0eXBlIFNlbGVjdGlvblByZXNNb2RlbFtdXHJcbiAgU2VsZWN0aW9uTGlzdCA9ICdzZWxlY3Rpb25MaXN0JyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmU2VsZWN0aW9uTW9kZWwsIGhhdmluZyB0eXBlIFNoZWxmU2VsZWN0aW9uUHJlc01vZGVsXHJcbiAgU2hlbGZTZWxlY3Rpb25Nb2RlbCA9ICdzaGVsZlNlbGVjdGlvbk1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1NoZWxmU2VsZWN0aW9uTW9kZWxzLCBoYXZpbmcgdHlwZSBTaGVsZlNlbGVjdGlvblByZXNNb2RlbFtdXHJcbiAgU2hlbGZTZWxlY3Rpb25Nb2RlbHMgPSAnc2hlbGZTZWxlY3Rpb25Nb2RlbHMnLFxyXG5cclxuICAvLyBEUElfU2hlbGZTZWxlY3Rpb25zTW9kZWwsIGhhdmluZyB0eXBlIFNoZWxmU2VsZWN0aW9uc1ByZXNNb2RlbFxyXG4gIFNoZWxmU2VsZWN0aW9uc01vZGVsID0gJ3NoZWxmU2VsZWN0aW9uc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0RpbVZhbFNlbGVjdGlvbk1vZGVsLCBoYXZpbmcgdHlwZSBEaW1lbnNpb25WYWx1ZVNlbGVjdGlvblByZXNNb2RlbFxyXG4gIERpbVZhbFNlbGVjdGlvbk1vZGVsID0gJ2RpbWVuc2lvblZhbHVlU2VsZWN0aW9uTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRGltVmFsU2VsZWN0aW9uTW9kZWxzLCBoYXZpbmcgdHlwZSBEaW1lbnNpb25WYWx1ZVNlbGVjdGlvblByZXNNb2RlbFtdXHJcbiAgRGltVmFsU2VsZWN0aW9uTW9kZWxzID0gJ2RpbWVuc2lvblZhbHVlU2VsZWN0aW9uTW9kZWxzJyxcclxuXHJcbiAgLy8gRFBJX0hpZXJWYWxTZWxlY3Rpb25Nb2RlbCwgaGF2aW5nIHR5cGUgSGllcmFyY2hpY2FsVmFsdWVTZWxlY3Rpb25QcmVzTW9kZWxcclxuICBIaWVyVmFsU2VsZWN0aW9uTW9kZWwgPSAnaGllcmFyY2hpY2FsVmFsdWVTZWxlY3Rpb25Nb2RlbCcsXHJcblxyXG4gIC8vIERQSV9IaWVyVmFsU2VsZWN0aW9uTW9kZWxzLCBoYXZpbmcgdHlwZSBIaWVyYXJjaGljYWxWYWx1ZVNlbGVjdGlvblByZXNNb2RlbFtdXHJcbiAgSGllclZhbFNlbGVjdGlvbk1vZGVscyA9ICdoaWVyYXJjaGljYWxWYWx1ZVNlbGVjdGlvbk1vZGVscycsXHJcblxyXG4gIC8vIERQSV9RdWFudFJhbmdlU2VsZWN0aW9uTW9kZWwsIGhhdmluZyB0eXBlIFF1YW50YXRpdmVSYW5nZVNlbGVjdGlvblByZXNNb2RlbFxyXG4gIFF1YW50UmFuZ2VTZWxlY3Rpb25Nb2RlbCA9ICdxdWFudGF0aXZlUmFuZ2VTZWxlY3Rpb25Nb2RlbCcsXHJcblxyXG4gIC8vIERQSV9RdWFudFJhbmdlU2VsZWN0aW9uTW9kZWxzLCBoYXZpbmcgdHlwZSBRdWFudGF0aXZlUmFuZ2VTZWxlY3Rpb25QcmVzTW9kZWxbXVxyXG4gIFF1YW50UmFuZ2VTZWxlY3Rpb25Nb2RlbHMgPSAncXVhbnRhdGl2ZVJhbmdlU2VsZWN0aW9uTW9kZWxzJyxcclxuXHJcbiAgLy8gRFBJX1F1YW50VmFsdWVTZWxlY3Rpb25Nb2RlbCwgaGF2aW5nIHR5cGUgUXVhbnRhdGl2ZVZhbHVlU2VsZWN0aW9uUHJlc01vZGVsXHJcbiAgUXVhbnRWYWx1ZVNlbGVjdGlvbk1vZGVsID0gJ3F1YW50YXRpdmVWYWx1ZVNlbGVjdGlvbk1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1F1YW50VmFsdWVTZWxlY3Rpb25Nb2RlbHMsIGhhdmluZyB0eXBlIFF1YW50YXRpdmVWYWx1ZVNlbGVjdGlvblByZXNNb2RlbFtdXHJcbiAgUXVhbnRWYWx1ZVNlbGVjdGlvbk1vZGVscyA9ICdxdWFudGF0aXZlVmFsdWVTZWxlY3Rpb25Nb2RlbHMnLFxyXG5cclxuICAvLyBEUElfTGVnZW5kU2VsZWN0aW9uSW5mbywgaGF2aW5nIHR5cGUgTGVnZW5kU2VsZWN0aW9uSW5mb1ByZXNNb2RlbFxyXG4gIExlZ2VuZFNlbGVjdGlvbkluZm8gPSAnbGVnZW5kU2VsZWN0aW9uSW5mbycsXHJcblxyXG4gIC8vIERQSV9Ob2RlUmVmZXJlbmNlLCBoYXZpbmcgdHlwZSBOb2RlUmVmZXJlbmNlUHJlc01vZGVsXHJcbiAgTm9kZVJlZmVyZW5jZSA9ICdub2RlUmVmZXJlbmNlJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VSZWZlcmVuY2UsIGhhdmluZyB0eXBlIFBhZ2VSZWZlcmVuY2VQcmVzTW9kZWxcclxuICBQYWdlUmVmZXJlbmNlID0gJ3BhZ2VSZWZlcmVuY2UnLFxyXG5cclxuICAvLyBEUElfT3JpZW50ZWROb2RlUmVmZXJlbmNlLCBoYXZpbmcgdHlwZSBPcmllbnRlZE5vZGVSZWZlcmVuY2VQcmVzTW9kZWxcclxuICBPcmllbnRlZE5vZGVSZWZlcmVuY2UgPSAnb3JpZW50ZWROb2RlUmVmZXJlbmNlJyxcclxuXHJcbiAgLy8gRFBJX09yaWVudGVkTm9kZVJlZmVyZW5jZXMsIGhhdmluZyB0eXBlIE9yaWVudGVkTm9kZVJlZmVyZW5jZVByZXNNb2RlbFtdXHJcbiAgT3JpZW50ZWROb2RlUmVmZXJlbmNlcyA9ICdvcmllbnRlZE5vZGVSZWZlcmVuY2VzJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGlvbkRhdGEsIGhhdmluZyB0eXBlIFNlbGVjdGlvbkRhdGFQcmVzTW9kZWxcclxuICBTZWxlY3Rpb25EYXRhID0gJ3NlbGVjdGlvbkRhdGEnLFxyXG5cclxuICAvLyBEUElfSGlnaGxpZ2h0ZWREYXRhLCBoYXZpbmcgdHlwZSBIaWdobGlnaHRlZERhdGFQcmVzTW9kZWxcclxuICBIaWdobGlnaHRlZERhdGEgPSAnaGlnaGxpZ2h0ZWREYXRhJyxcclxuXHJcbiAgLy8gRFBJX05vZGUsIGhhdmluZyB0eXBlIE5vZGVQcmVzTW9kZWxcclxuICBOb2RlID0gJ25vZGUnLFxyXG5cclxuICAvLyBEUElfTm9kZXMsIGhhdmluZyB0eXBlIE5vZGVQcmVzTW9kZWxbXVxyXG4gIE5vZGVzID0gJ25vZGVzJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkTm9kZXMsIGhhdmluZyB0eXBlIE5vZGVQcmVzTW9kZWxbXVxyXG4gIFNlbGVjdGVkTm9kZXMgPSAnc2VsZWN0ZWROb2RlcycsXHJcblxyXG4gIC8vIERQSV9Vc2VyQWN0aW9uLCBoYXZpbmcgdHlwZSBBY3Rpb25QcmVzTW9kZWxcclxuICBVc2VyQWN0aW9uID0gJ3VzZXJBY3Rpb24nLFxyXG5cclxuICAvLyBEUElfVXNlckFjdGlvbnMsIGhhdmluZyB0eXBlIEFjdGlvblByZXNNb2RlbFtdXHJcbiAgVXNlckFjdGlvbnMgPSAndXNlckFjdGlvbnMnLFxyXG5cclxuICAvLyBEUElfTGlua1NwZWMsIGhhdmluZyB0eXBlIExpbmtTcGVjUHJlc01vZGVsXHJcbiAgTGlua1NwZWMgPSAnbGlua1NwZWMnLFxyXG5cclxuICAvLyBEUElfQWN0aW9uU3BlY2lmaWNhdGlvbk1vZGVsLCBoYXZpbmcgdHlwZSBBY3Rpb25TcGVjaWZpY2F0aW9uUHJlc01vZGVsXHJcbiAgQWN0aW9uU3BlY2lmaWNhdGlvbk1vZGVsID0gJ2FjdGlvblNwZWNpZmljYXRpb24nLFxyXG5cclxuICAvLyBEUElfTGlua1NwZWNpZmljYXRpb24sIGhhdmluZyB0eXBlIExpbmtTcGVjaWZpY2F0aW9uUHJlc01vZGVsXHJcbiAgTGlua1NwZWNpZmljYXRpb24gPSAnbGlua1NwZWNpZmljYXRpb24nLFxyXG5cclxuICAvLyBEUElfU2NyaXB0RGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIFNjcmlwdERlc2NyaXB0aW9uUHJlc01vZGVsXHJcbiAgU2NyaXB0RGVzY3JpcHRpb24gPSAnc2NyaXB0RGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfQWN0aW9uU291cmNlLCBoYXZpbmcgdHlwZSBBY3Rpb25Tb3VyY2VQcmVzTW9kZWxcclxuICBBY3Rpb25Tb3VyY2UgPSAnYWN0aW9uU291cmNlJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkRXhwckl0ZW0sIGhhdmluZyB0eXBlIEZpZWxkRXhwckl0ZW1QcmVzTW9kZWxcclxuICBGaWVsZEV4cHJJdGVtID0gJ2ZpZWxkRXhwcmVzc2lvbkl0ZW0nLFxyXG5cclxuICAvLyBEUElfRmllbGRFeHByVmVjdG9yLCBoYXZpbmcgdHlwZSBGaWVsZEV4cHJJdGVtUHJlc01vZGVsW11cclxuICBGaWVsZEV4cHJWZWN0b3IgPSAnZmllbGRFeHByZXNzaW9uVmVjdG9yJyxcclxuXHJcbiAgLy8gRFBJX0FjdGlvbkNvbWJvSXRlbSwgaGF2aW5nIHR5cGUgQWN0aW9uQ29tYm9JdGVtUHJlc01vZGVsXHJcbiAgQWN0aW9uQ29tYm9JdGVtID0gJ2FjdGlvbkNvbWJvSXRlbScsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25Db21ib1ZlY3RvciwgaGF2aW5nIHR5cGUgQWN0aW9uQ29tYm9JdGVtUHJlc01vZGVsW11cclxuICBBY3Rpb25Db21ib1ZlY3RvciA9ICdhY3Rpb25Db21ib1ZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25Tb3VyY2VDb21ibywgaGF2aW5nIHR5cGUgQWN0aW9uU291cmNlQ29tYm9QcmVzTW9kZWxcclxuICBBY3Rpb25Tb3VyY2VDb21ibyA9ICdhY3Rpb25Tb3VyY2VDb21ibycsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25EZXN0Q29tYm8sIGhhdmluZyB0eXBlIEFjdGlvbkNvbWJvUHJlc01vZGVsXHJcbiAgQWN0aW9uRGVzdENvbWJvID0gJ2FjdGlvbkRlc3RDb21ibycsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25GaWVsZExpc3QsIGhhdmluZyB0eXBlIEFjdGlvbkZpZWxkTGlzdFByZXNNb2RlbFxyXG4gIEFjdGlvbkZpZWxkTGlzdCA9ICdhY3Rpb25GaWVsZExpc3QnLFxyXG5cclxuICAvLyBEUElfRWRpdEJydXNoQWN0aW9uLCBoYXZpbmcgdHlwZSBFZGl0QnJ1c2hBY3Rpb25QcmVzTW9kZWxcclxuICBFZGl0QnJ1c2hBY3Rpb24gPSAnZWRpdEJydXNoQWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1VwZGF0ZUFjdGlvblNvdXJjZSwgaGF2aW5nIHR5cGUgVXBkYXRlQWN0aW9uU291cmNlUHJlc01vZGVsXHJcbiAgVXBkYXRlQWN0aW9uU291cmNlID0gJ3VwZGF0ZUFjdGlvblNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9VcGRhdGVCcnVzaEFjdGlvbiwgaGF2aW5nIHR5cGUgVXBkYXRlQnJ1c2hBY3Rpb25QcmVzTW9kZWxcclxuICBVcGRhdGVCcnVzaEFjdGlvbiA9ICd1cGRhdGVCcnVzaEFjdGlvbicsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25XYXJuaW5ncywgaGF2aW5nIHR5cGUgQWN0aW9uV2FybmluZ3NQcmVzTW9kZWxcclxuICBBY3Rpb25XYXJuaW5ncyA9ICdhY3Rpb25XYXJuaW5ncycsXHJcblxyXG4gIC8vIERQSV9FZGl0SHlwZXJsaW5rQWN0aW9uLCBoYXZpbmcgdHlwZSBFZGl0SHlwZXJsaW5rQWN0aW9uUHJlc01vZGVsXHJcbiAgRWRpdEh5cGVybGlua0FjdGlvbiA9ICdlZGl0SHlwZXJsaW5rQWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1VwZGF0ZUh5cGVybGlua0FjdGlvbiwgaGF2aW5nIHR5cGUgVXBkYXRlSHlwZXJsaW5rQWN0aW9uUHJlc01vZGVsXHJcbiAgVXBkYXRlSHlwZXJsaW5rQWN0aW9uID0gJ3VwZGF0ZUh5cGVybGlua0FjdGlvbicsXHJcblxyXG4gIC8vIERQSV9FZGl0U2hlZXRMaW5rQWN0aW9uLCBoYXZpbmcgdHlwZSBFZGl0U2hlZXRMaW5rQWN0aW9uUHJlc01vZGVsXHJcbiAgRWRpdFNoZWV0TGlua0FjdGlvbiA9ICdlZGl0U2hlZXRsaW5rQWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1VwZGF0ZVNoZWV0TGlua0FjdGlvbiwgaGF2aW5nIHR5cGUgVXBkYXRlU2hlZXRMaW5rQWN0aW9uUHJlc01vZGVsXHJcbiAgVXBkYXRlU2hlZXRMaW5rQWN0aW9uID0gJ3VwZGF0ZVNoZWV0bGlua0FjdGlvbicsXHJcblxyXG4gIC8vIERQSV9BY3Rpb25JdGVtLCBoYXZpbmcgdHlwZSBBY3Rpb25JdGVtUHJlc01vZGVsXHJcbiAgQWN0aW9uSXRlbSA9ICdhY3Rpb25JdGVtJyxcclxuXHJcbiAgLy8gRFBJX0FjdGlvbkl0ZW1MaXN0LCBoYXZpbmcgdHlwZSBBY3Rpb25JdGVtUHJlc01vZGVsW11cclxuICBBY3Rpb25JdGVtTGlzdCA9ICdhY3Rpb25JdGVtTGlzdCcsXHJcblxyXG4gIC8vIERQSV9EYXRhU2VnbWVudCwgaGF2aW5nIHR5cGUgRGF0YVNlZ21lbnRQcmVzTW9kZWxcclxuICBEYXRhU2VnbWVudCA9ICdkYXRhU2VnbWVudCcsXHJcblxyXG4gIC8vIERQSV9EYXRhU2VnbWVudHMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2YgRGF0YVNlZ21lbnRQcmVzTW9kZWwpXHJcbiAgRGF0YVNlZ21lbnRzID0gJ2RhdGFTZWdtZW50cycsXHJcblxyXG4gIC8vIERQSV9EYXRhRGljdGlvbmFyeSwgaGF2aW5nIHR5cGUgRGF0YURpY3Rpb25hcnlQcmVzTW9kZWxcclxuICBEYXRhRGljdGlvbmFyeSA9ICdkYXRhRGljdGlvbmFyeScsXHJcblxyXG4gIC8vIERQSV9WaXpEYXRhLCBoYXZpbmcgdHlwZSBWaXpEYXRhUHJlc01vZGVsXHJcbiAgVml6RGF0YSA9ICd2aXpEYXRhJyxcclxuXHJcbiAgLy8gRFBJX1ZpekNvbHVtbiwgaGF2aW5nIHR5cGUgVml6Q29sdW1uUHJlc01vZGVsXHJcbiAgVml6Q29sdW1uID0gJ3ZpekNvbHVtbicsXHJcblxyXG4gIC8vIERQSV9WaXpDb2x1bW5zLCBoYXZpbmcgdHlwZSBWaXpDb2x1bW5QcmVzTW9kZWxbXVxyXG4gIFZpekNvbHVtbnMgPSAndml6Q29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9WaXpEYXRhQ29sdW1uLCBoYXZpbmcgdHlwZSBWaXpEYXRhQ29sdW1uUHJlc01vZGVsXHJcbiAgVml6RGF0YUNvbHVtbiA9ICd2aXpEYXRhQ29sdW1uJyxcclxuXHJcbiAgLy8gRFBJX1ZpekRhdGFDb2x1bW5zLCBoYXZpbmcgdHlwZSBWaXpEYXRhQ29sdW1uUHJlc01vZGVsW11cclxuICBWaXpEYXRhQ29sdW1ucyA9ICd2aXpEYXRhQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9WaXpQYW5lQ29sdW1uLCBoYXZpbmcgdHlwZSBWaXpQYW5lQ29sdW1uUHJlc01vZGVsXHJcbiAgVml6UGFuZUNvbHVtbiA9ICd2aXpQYW5lQ29sdW1uJyxcclxuXHJcbiAgLy8gRFBJX1ZpelBhbmVDb2x1bW5zLCBoYXZpbmcgdHlwZSBWaXpQYW5lQ29sdW1uUHJlc01vZGVsW11cclxuICBWaXpQYW5lQ29sdW1ucyA9ICd2aXpQYW5lQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9QYW5lQ29sdW1ucywgaGF2aW5nIHR5cGUgUGFuZUNvbHVtbnNQcmVzTW9kZWxcclxuICBQYW5lQ29sdW1ucyA9ICdwYW5lQ29sdW1ucycsXHJcblxyXG4gIC8vIERQSV9QYW5lQ29sdW1uc0xpc3QsIGhhdmluZyB0eXBlIFBhbmVDb2x1bW5zUHJlc01vZGVsW11cclxuICBQYW5lQ29sdW1uc0xpc3QgPSAncGFuZUNvbHVtbnNMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1BhbmVDb2x1bW5zRGF0YSwgaGF2aW5nIHR5cGUgUGFuZUNvbHVtbnNEYXRhUHJlc01vZGVsXHJcbiAgUGFuZUNvbHVtbnNEYXRhID0gJ3BhbmVDb2x1bW5zRGF0YScsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJDb250ZXh0LCBoYXZpbmcgdHlwZSBGaWx0ZXJDb250ZXh0UHJlc01vZGVsXHJcbiAgRmlsdGVyQ29udGV4dCA9ICdmaWx0ZXJDb250ZXh0JyxcclxuXHJcbiAgLy8gRFBJX1ViZXJUaXBQYW5lRGF0YSwgaGF2aW5nIHR5cGUgVWJlclRpcFBhbmVEYXRhUHJlc01vZGVsXHJcbiAgVWJlclRpcFBhbmVEYXRhID0gJ3ViZXJ0aXBQYW5lRGF0YScsXHJcblxyXG4gIC8vIERQSV9VYmVyVGlwUGFuZURhdGFzLCBoYXZpbmcgdHlwZSBVYmVyVGlwUGFuZURhdGFQcmVzTW9kZWxbXVxyXG4gIFViZXJUaXBQYW5lRGF0YXMgPSAndWJlcnRpcFBhbmVEYXRhcycsXHJcblxyXG4gIC8vIERQSV9VYmVyVGlwRGF0YSwgaGF2aW5nIHR5cGUgVWJlclRpcERhdGFQcmVzTW9kZWxcclxuICBVYmVyVGlwRGF0YSA9ICd1YmVydGlwRGF0YScsXHJcblxyXG4gIC8vIERQSV9SZWZMaW5lVGlwLCBoYXZpbmcgdHlwZSBSZWZMaW5lVGlwUHJlc01vZGVsXHJcbiAgUmVmTGluZVRpcCA9ICdyZWZMaW5lVGlwJyxcclxuXHJcbiAgLy8gRFBJX1JlZkxpbmVUaXBzLCBoYXZpbmcgdHlwZSBSZWZMaW5lVGlwUHJlc01vZGVsW11cclxuICBSZWZMaW5lVGlwcyA9ICdyZWZMaW5lVGlwcycsXHJcblxyXG4gIC8vIERQSV9OdW1lcmljQmluLCBoYXZpbmcgdHlwZSBOdW1lcmljQmluUHJlc01vZGVsXHJcbiAgTnVtZXJpY0JpbiA9ICdudW1lcmljQmluJyxcclxuXHJcbiAgLy8gRFBJX051bWVyaWNCaW5EaWFsb2csIGhhdmluZyB0eXBlIE51bWVyaWNCaW5EaWFsb2dQcmVzTW9kZWxcclxuICBOdW1lcmljQmluRGlhbG9nID0gJ251bWVyaWNCaW5EaWFsb2cnLFxyXG5cclxuICAvLyBEUElfRG9tYWluUmFuZ2UsIGhhdmluZyB0eXBlIERvbWFpblJhbmdlUHJlc01vZGVsXHJcbiAgRG9tYWluUmFuZ2UgPSAnZG9tYWluUmFuZ2UnLFxyXG5cclxuICAvLyBEUElfQmluU2l6ZUluZm8sIGhhdmluZyB0eXBlIEJpblNpemVJbmZvUHJlc01vZGVsXHJcbiAgQmluU2l6ZUluZm8gPSAnYmluU2l6ZUluZm8nLFxyXG5cclxuICAvLyBEUElfRGV0YWlsZWRFcnJvckRpYWxvZywgaGF2aW5nIHR5cGUgRGV0YWlsZWRFcnJvclByZXNNb2RlbFxyXG4gIERldGFpbGVkRXJyb3JEaWFsb2cgPSAnZGV0YWlsZWRFcnJvckRpYWxvZycsXHJcblxyXG4gIC8vIERQSV9EcmFnU291cmNlUG9zaXRpb24sIGhhdmluZyB0eXBlIFNoZWxmRHJvcFBvc2l0aW9uUHJlc01vZGVsXHJcbiAgRHJhZ1NvdXJjZVBvc2l0aW9uID0gJ3NoZWxmRHJhZ1NvdXJjZVBvc2l0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0Ryb3BUYXJnZXRQb3NpdGlvbiwgaGF2aW5nIHR5cGUgU2hlbGZEcm9wUG9zaXRpb25QcmVzTW9kZWxcclxuICBEcm9wVGFyZ2V0UG9zaXRpb24gPSAnc2hlbGZEcm9wVGFyZ2V0UG9zaXRpb24nLFxyXG5cclxuICAvLyBEUElfU2hlbGZEcm9wUG9zaXRpb24sIGhhdmluZyB0eXBlIFNoZWxmRHJvcFBvc2l0aW9uUHJlc01vZGVsXHJcbiAgU2hlbGZEcm9wUG9zaXRpb24gPSAnc2hlbGZEcm9wUG9zaXRpb24nLFxyXG5cclxuICAvLyBEUElfU2hlbGZEcm9wUG9zaXRpb25zLCBoYXZpbmcgdHlwZSBTaGVsZkRyb3BQb3NpdGlvblByZXNNb2RlbFtdXHJcbiAgU2hlbGZEcm9wUG9zaXRpb25zID0gJ3NoZWxmRHJvcFBvc2l0aW9ucycsXHJcblxyXG4gIC8vIERQSV9TaGVsZkRyb3BNb2RlbCwgaGF2aW5nIHR5cGUgU2hlbGZEcm9wUHJlc01vZGVsXHJcbiAgU2hlbGZEcm9wTW9kZWwgPSAnc2hlbGZEcm9wTW9kZWwnLFxyXG5cclxuICAvLyBEUElfU2hlbGZEcm9wTW9kZWxzLCBoYXZpbmcgdHlwZSBTaGVsZkRyb3BQcmVzTW9kZWxbXVxyXG4gIFNoZWxmRHJvcE1vZGVscyA9ICdzaGVsZkRyb3BNb2RlbHMnLFxyXG5cclxuICAvLyBEUElfRHJhZywgaGF2aW5nIHR5cGUgRHJhZ1ByZXNNb2RlbFxyXG4gIERyYWcgPSAnZHJhZycsXHJcblxyXG4gIC8vIERQSV9TY2VuZUVsZW1lbnQsIGhhdmluZyB0eXBlIFNjZW5lRWxlbWVudFByZXNNb2RlbFxyXG4gIFNjZW5lRWxlbWVudCA9ICdzY2VuZUVsZW1lbnQnLFxyXG5cclxuICAvLyBEUElfU2NlbmVFbGVtZW50cywgaGF2aW5nIHR5cGUgU2NlbmVFbGVtZW50UHJlc01vZGVsW11cclxuICBTY2VuZUVsZW1lbnRzID0gJ3NjZW5lRWxlbWVudHMnLFxyXG5cclxuICAvLyBEUElfUXVpY2tGaWx0ZXJUeXBlLCBoYXZpbmcgdHlwZSBRdWlja0ZpbHRlclR5cGVcclxuICBRdWlja0ZpbHRlclR5cGUgPSAncXVpY2tGaWx0ZXJUeXBlJyxcclxuXHJcbiAgLy8gRFBJX0NhdE1vZGUsIGhhdmluZyB0eXBlIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxNb2RlXHJcbiAgQ2F0TW9kZSA9ICdjYXRlZ29yaWNhbE1vZGUnLFxyXG5cclxuICAvLyBEUElfQ2F0Q3RybCwgaGF2aW5nIHR5cGUgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbEN0cmxcclxuICBDYXRDdHJsID0gJ2NhdGVnb3JpY2FsQ29udHJvbCcsXHJcblxyXG4gIC8vIERQSV9RdWFudE1vZGUsIGhhdmluZyB0eXBlIFF1aWNrRmlsdGVyUXVhbnRpdGF0aXZlTW9kZVxyXG4gIFF1YW50TW9kZSA9ICdxdWFudGl0YXRpdmVNb2RlJyxcclxuXHJcbiAgLy8gRFBJX1F1YW50Q3RybCwgaGF2aW5nIHR5cGUgUXVpY2tGaWx0ZXJRdWFudGl0YXRpdmVDdHJsXHJcbiAgUXVhbnRDdHJsID0gJ3F1YW50aXRhdGl2ZUNvbnRyb2wnLFxyXG5cclxuICAvLyBEUElfWm9uZUNvbW1vbiwgaGF2aW5nIHR5cGUgWm9uZUNvbW1vblByZXNNb2RlbFxyXG4gIFpvbmVDb21tb24gPSAnem9uZUNvbW1vbicsXHJcblxyXG4gIC8vIERQSV9ab25lQ29tbW9uTGlzdEl0ZW1zLCBoYXZpbmcgdHlwZSBab25lQ29tbW9uUHJlc01vZGVsW11cclxuICBab25lQ29tbW9uTGlzdEl0ZW1zID0gJ3pvbmVDb21tb25MaXN0SXRlbXMnLFxyXG5cclxuICAvLyBEUElfWm9uZSwgaGF2aW5nIHR5cGUgWm9uZVByZXNNb2RlbFxyXG4gIFpvbmUgPSAnem9uZScsXHJcblxyXG4gIC8vIERQSV9ab25lcywgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBab25lUHJlc01vZGVsKVxyXG4gIFpvbmVzID0gJ3pvbmVzJyxcclxuXHJcbiAgLy8gRFBJX0ltYWdlWm9uZSwgaGF2aW5nIHR5cGUgSW1hZ2Vab25lUHJlc01vZGVsXHJcbiAgSW1hZ2Vab25lID0gJ2ltYWdlWm9uZScsXHJcblxyXG4gIC8vIERQSV9XZWJab25lLCBoYXZpbmcgdHlwZSBXZWJab25lUHJlc01vZGVsXHJcbiAgV2ViWm9uZSA9ICd3ZWJab25lJyxcclxuXHJcbiAgLy8gRFBJX0FkZEluWm9uZSwgaGF2aW5nIHR5cGUgQWRkSW5ab25lUHJlc01vZGVsXHJcbiAgQWRkSW5ab25lID0gJ2FkZEluWm9uZScsXHJcblxyXG4gIC8vIERQSV9CdXR0b25ab25lUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBCdXR0b25ab25lUHJlc01vZGVsXHJcbiAgQnV0dG9uWm9uZVByZXNNb2RlbCA9ICdidXR0b25ab25lJyxcclxuXHJcbiAgLy8gRFBJX0J1dHRvbkNvbmZpZ0RpYWxvZywgaGF2aW5nIHR5cGUgQnV0dG9uQ29uZmlnRGlhbG9nUHJlc01vZGVsXHJcbiAgQnV0dG9uQ29uZmlnRGlhbG9nID0gJ2J1dHRvbkNvbmZpZ0RpYWxvZycsXHJcblxyXG4gIC8vIERQSV9ab25lRWRnZU1vdmVUeXBlLCBoYXZpbmcgdHlwZSBab25lRWRnZU1vdmVcclxuICBab25lRWRnZU1vdmVUeXBlID0gJ3pvbmVFZGdlTW92ZVR5cGUnLFxyXG5cclxuICAvLyBEUElfWm9uZVNpZGUsIGhhdmluZyB0eXBlIFNpZGVUeXBlXHJcbiAgWm9uZVNpZGUgPSAnem9uZVNpZGUnLFxyXG5cclxuICAvLyBEUElfU25hcFBvaW50LCBoYXZpbmcgdHlwZSBTbmFwUG9pbnRQcmVzTW9kZWxcclxuICBTbmFwUG9pbnQgPSAnc25hcFBvaW50JyxcclxuXHJcbiAgLy8gRFBJX1NuYXBQb2ludHMsIGhhdmluZyB0eXBlIFNuYXBQb2ludFByZXNNb2RlbFtdXHJcbiAgU25hcFBvaW50cyA9ICdzbmFwUG9pbnRzJyxcclxuXHJcbiAgLy8gRFBJX1RhcmdldFByZXZpZXdQYWlyLCBoYXZpbmcgdHlwZSBEcmFnRHJvcFRhcmdldFByZXZpZXdQYWlyUHJlc01vZGVsXHJcbiAgVGFyZ2V0UHJldmlld1BhaXIgPSAndGFyZ2V0UHJldmlld1BhaXInLFxyXG5cclxuICAvLyBEUElfVGFyZ2V0UHJldmlld1BhaXJzLCBoYXZpbmcgdHlwZSBEcmFnRHJvcFRhcmdldFByZXZpZXdQYWlyUHJlc01vZGVsW11cclxuICBUYXJnZXRQcmV2aWV3UGFpcnMgPSAndGFyZ2V0UHJldmlld1BhaXJzJyxcclxuXHJcbiAgLy8gRFBJX0NvbnRhaW5lckd1aWRlLCBoYXZpbmcgdHlwZSBEcmFnRHJvcENvbnRhaW5lckd1aWRlUHJlc01vZGVsXHJcbiAgQ29udGFpbmVyR3VpZGUgPSAnY29udGFpbmVyR3VpZGUnLFxyXG5cclxuICAvLyBEUElfQ29udGFpbmVyR3VpZGVzLCBoYXZpbmcgdHlwZSBEcmFnRHJvcENvbnRhaW5lckd1aWRlUHJlc01vZGVsW11cclxuICBDb250YWluZXJHdWlkZXMgPSAnY29udGFpbmVyR3VpZGVzJyxcclxuXHJcbiAgLy8gRFBJX1pvbmVCb3JkZXIsIGhhdmluZyB0eXBlIERyYWdEcm9wWm9uZUJvcmRlclByZXNNb2RlbFxyXG4gIFpvbmVCb3JkZXIgPSAnem9uZUJvcmRlcicsXHJcblxyXG4gIC8vIERQSV9ab25lQm9yZGVycywgaGF2aW5nIHR5cGUgRHJhZ0Ryb3Bab25lQm9yZGVyUHJlc01vZGVsW11cclxuICBab25lQm9yZGVycyA9ICd6b25lQm9yZGVycycsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmREcmFnRHJvcCwgaGF2aW5nIHR5cGUgRGFzaGJvYXJkRHJhZ0Ryb3BQcmVzTW9kZWxcclxuICBEYXNoYm9hcmREcmFnRHJvcCA9ICd6b25lRHJhZ0Ryb3AnLFxyXG5cclxuICAvLyBEUElfRHJhZ1pvbmVSZXNpemUsIGhhdmluZyB0eXBlIERyYWdab25lUmVzaXplUHJlc01vZGVsXHJcbiAgRHJhZ1pvbmVSZXNpemUgPSAnem9uZVJlc2l6ZScsXHJcblxyXG4gIC8vIERQSV9EYXNoYm9hcmRUZXh0LCBoYXZpbmcgdHlwZSBUZXh0UmVnaW9uUHJlc01vZGVsXHJcbiAgRGFzaGJvYXJkVGV4dCA9ICdkYXNoYm9hcmRUZXh0JyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZFRpdGxlLCBoYXZpbmcgdHlwZSBUZXh0UmVnaW9uUHJlc01vZGVsXHJcbiAgRGFzaGJvYXJkVGl0bGUgPSAnZGFzaGJvYXJkVGl0bGUnLFxyXG5cclxuICAvLyBEUElfUXVpY2tGaWx0ZXJUaXRsZSwgaGF2aW5nIHR5cGUgVGV4dFJlZ2lvblByZXNNb2RlbFxyXG4gIFF1aWNrRmlsdGVyVGl0bGUgPSAncXVpY2tGaWx0ZXJUaXRsZScsXHJcblxyXG4gIC8vIERQSV9WaXN1YWxDYXB0aW9uLCBoYXZpbmcgdHlwZSBUZXh0UmVnaW9uUHJlc01vZGVsXHJcbiAgVmlzdWFsQ2FwdGlvbiA9ICd2aXN1YWxDYXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1Zpc3VhbFRpdGxlLCBoYXZpbmcgdHlwZSBUZXh0UmVnaW9uUHJlc01vZGVsXHJcbiAgVmlzdWFsVGl0bGUgPSAndmlzdWFsVGl0bGUnLFxyXG5cclxuICAvLyBEUElfWm9uZVRpdGxlUmVnaW9uLCBoYXZpbmcgdHlwZSBUZXh0UmVnaW9uUHJlc01vZGVsXHJcbiAgWm9uZVRpdGxlUmVnaW9uID0gJ3pvbmVUaXRsZScsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdE9wdGlvbnMsIGhhdmluZyB0eXBlIEZvcmVjYXN0UHJlc01vZGVsXHJcbiAgRm9yZWNhc3RPcHRpb25zID0gJ2ZvcmVjYXN0T3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Gb3JlY2FzdERlc2NyaXB0aW9uLCBoYXZpbmcgdHlwZSBGb3JlY2FzdERlc2NyaWJlUHJlc01vZGVsXHJcbiAgRm9yZWNhc3REZXNjcmlwdGlvbiA9ICdmb3JlY2FzdERlc2NyaXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX1dvcmtncm91cFB1Ymxpc2hPYmplY3QsIGhhdmluZyB0eXBlIFdvcmtncm91cFB1Ymxpc2hPYmplY3RQcmVzTW9kZWxcclxuICBXb3JrZ3JvdXBQdWJsaXNoT2JqZWN0ID0gJ3B1Ymxpc2hEYXRhU291cmNlJyxcclxuXHJcbiAgLy8gRFBJX1B1Ymxpc2hQZXJtaXNzaW9uc1N1bW1hcnksIGhhdmluZyB0eXBlIFB1Ymxpc2hQZXJtaXNzaW9uc1N1bW1hcnlQcmVzTW9kZWxcclxuICBQdWJsaXNoUGVybWlzc2lvbnNTdW1tYXJ5ID0gJ3B1Ymxpc2hQZXJtaXNzaW9uc1N1bW1hcnknLFxyXG5cclxuICAvLyBEUElfQ2hlY2tOYW1lUmVzdWx0cywgaGF2aW5nIHR5cGUgQ2hlY2tOYW1lUmVzdWx0c1ByZXNNb2RlbFxyXG4gIENoZWNrTmFtZVJlc3VsdHMgPSAnY2hlY2tOYW1lUmVzdWx0cycsXHJcblxyXG4gIC8vIERQSV9WYWxpZGF0ZVB1Ymxpc2hWaWV3c1Jlc3VsdCwgaGF2aW5nIHR5cGUgVmFsaWRhdGVQdWJsaXNoVmlld3NSZXN1bHRQcmVzTW9kZWxcclxuICBWYWxpZGF0ZVB1Ymxpc2hWaWV3c1Jlc3VsdCA9ICd2YWxpZGF0ZVB1Ymxpc2hWaWV3c1Jlc3VsdCcsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoQXV0aGVudGljYXRpb25TZXR0aW5ncywgaGF2aW5nIHR5cGUgUHVibGlzaEF1dGhlbnRpY2F0aW9uU2V0dGluZ3NQcmVzTW9kZWxcclxuICBQdWJsaXNoQXV0aGVudGljYXRpb25TZXR0aW5ncyA9ICdwdWJsaXNoQXV0aGVudGljYXRpb25TZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9NYW5hZ2VEYXRhc291cmNlcywgaGF2aW5nIHR5cGUgTWFuYWdlRGF0YXNvdXJjZXNQcmVzTW9kZWxcclxuICBNYW5hZ2VEYXRhc291cmNlcyA9ICdtYW5hZ2VEYXRhc291cmNlcycsXHJcblxyXG4gIC8vIERQSV9DcmVkZW50aWFsc0F1dGhTZXR0aW5ncywgaGF2aW5nIHR5cGUgQ3JlZGVudGlhbHNBdXRoU2V0dGluZ3NQcmVzTW9kZWxcclxuICBDcmVkZW50aWFsc0F1dGhTZXR0aW5ncyA9ICdjcmVkZW50aWFsc0F1dGhTZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uQ3JlZGVudGlhbHNBdXRoU2V0dGluZ3MsIGhhdmluZyB0eXBlIENvbm5lY3Rpb25DcmVkZW50aWFsc0F1dGhTZXR0aW5nc1ByZXNNb2RlbFxyXG4gIENvbm5lY3Rpb25DcmVkZW50aWFsc0F1dGhTZXR0aW5ncyA9ICdjb25uZWN0aW9uQ3JlZGVudGlhbHNBdXRoU2V0dGluZ3MnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvbkNyZWRlbnRpYWxzQXV0aFNldHRpbmdzTGlzdCwgaGF2aW5nIHR5cGUgQ29ubmVjdGlvbkNyZWRlbnRpYWxzQXV0aFNldHRpbmdzUHJlc01vZGVsW11cclxuICBDb25uZWN0aW9uQ3JlZGVudGlhbHNBdXRoU2V0dGluZ3NMaXN0ID0gJ2Nvbm5lY3Rpb25DcmVkZW50aWFsc0F1dGhTZXR0aW5nc0xpc3QnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaERhdGFzb3VyY2VGcm9tV29ya2Jvb2tJbmZvLCBoYXZpbmcgdHlwZSBQdWJsaXNoRGF0YXNvdXJjZUZyb21Xb3JrYm9va0luZm9QcmVzTW9kZWxcclxuICBQdWJsaXNoRGF0YXNvdXJjZUZyb21Xb3JrYm9va0luZm8gPSAncHVibGlzaERhdGFzb3VyY2VGcm9tV29ya2Jvb2tJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1B1Ymxpc2hEYXRhc291cmNlc0Zyb21Xb3JrYm9va0luZm8sIGhhdmluZyB0eXBlIFB1Ymxpc2hEYXRhc291cmNlRnJvbVdvcmtib29rSW5mb1ByZXNNb2RlbFtdXHJcbiAgUHVibGlzaERhdGFzb3VyY2VzRnJvbVdvcmtib29rSW5mbyA9ICdwdWJsaXNoRGF0YXNvdXJjZXNGcm9tV29ya2Jvb2tJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1B1Ymxpc2hTaGVldCwgaGF2aW5nIHR5cGUgUHVibGlzaFNoZWV0UHJlc01vZGVsXHJcbiAgUHVibGlzaFNoZWV0ID0gJ3B1Ymxpc2hTaGVldCcsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoU2hlZXRzLCBoYXZpbmcgdHlwZSBQdWJsaXNoU2hlZXRQcmVzTW9kZWxbXVxyXG4gIFB1Ymxpc2hTaGVldHMgPSAncHVibGlzaFNoZWV0cycsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoT2JqZWN0Vmlld3MsIGhhdmluZyB0eXBlIFB1Ymxpc2hPYmplY3RWaWV3c1ByZXNNb2RlbFxyXG4gIFB1Ymxpc2hPYmplY3RWaWV3cyA9ICdwdWJsaXNoT2JqZWN0Vmlld3MnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaE9iamVjdFB1Ymxpc2hTaGVldFJlc3VsdHMsIGhhdmluZyB0eXBlIFB1Ymxpc2hPYmplY3RQdWJsaXNoU2hlZXRSZXN1bHRzUHJlc01vZGVsXHJcbiAgUHVibGlzaE9iamVjdFB1Ymxpc2hTaGVldFJlc3VsdHMgPSAncHVibGlzaE9iamVjdFB1Ymxpc2hTaGVldFJlc3VsdHMnLFxyXG5cclxuICAvLyBEUElfUmVmcmVzaEV4dHJhY3RTY2hlZHVsaW5nU2V0dGluZ3MsIGhhdmluZyB0eXBlIFJlZnJlc2hFeHRyYWN0U2NoZWR1bGluZ1NldHRpbmdzUHJlc01vZGVsXHJcbiAgUmVmcmVzaEV4dHJhY3RTY2hlZHVsaW5nU2V0dGluZ3MgPSAncmVmcmVzaEV4dHJhY3RTY2hlZHVsaW5nU2V0dGluZ3MnLFxyXG5cclxuICAvLyBEUElfU2V0UmVmcmVzaEV4dHJhY3RTY2hlZHVsZVJlc3VsdCwgaGF2aW5nIHR5cGUgU2V0UmVmcmVzaEV4dHJhY3RTY2hlZHVsZVJlc3VsdFByZXNNb2RlbFxyXG4gIFNldFJlZnJlc2hFeHRyYWN0U2NoZWR1bGVSZXN1bHQgPSAnc2V0UmVmcmVzaEV4dHJhY3RTY2hlZHVsZVJlc3VsdCcsXHJcblxyXG4gIC8vIERQSV9DaGVja1B1Ymxpc2hPYmplY3ROYW1lV2FybmluZ3NSZXN1bHRzLCBoYXZpbmcgdHlwZSBDaGVja1B1Ymxpc2hPYmplY3ROYW1lV2FybmluZ3NSZXN1bHRzUHJlc01vZGVsXHJcbiAgQ2hlY2tQdWJsaXNoT2JqZWN0TmFtZVdhcm5pbmdzUmVzdWx0cyA9ICdjaGVja1B1Ymxpc2hPYmplY3ROYW1lV2FybmluZ3NSZXN1bHRzJyxcclxuXHJcbiAgLy8gRFBJX1B1Ymxpc2hEYXRhc291cmNlT25Xb3JrYm9va1B1Ymxpc2hSZXN1bHRzLCBoYXZpbmcgdHlwZSBQdWJsaXNoRGF0YXNvdXJjZU9uV29ya2Jvb2tQdWJsaXNoUmVzdWx0c1ByZXNNb2RlbFxyXG4gIFB1Ymxpc2hEYXRhc291cmNlT25Xb3JrYm9va1B1Ymxpc2hSZXN1bHRzID0gJ3B1Ymxpc2hEYXRhc291cmNlT25Xb3JrYm9va1B1Ymxpc2hSZXN1bHQnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaERhdGFTb3VyY2VSZXN1bHQsIGhhdmluZyB0eXBlIFB1Ymxpc2hEYXRhU291cmNlUmVzdWx0UHJlc01vZGVsXHJcbiAgUHVibGlzaERhdGFTb3VyY2VSZXN1bHQgPSAncHVibGlzaERhdGFTb3VyY2VSZXN1bHQnLFxyXG5cclxuICAvLyBEUElfUHVibGlzaFdhcm5pbmdNZXNzYWdlLCBoYXZpbmcgdHlwZSBQdWJsaXNoV2FybmluZ01lc3NhZ2VQcmVzTW9kZWxcclxuICBQdWJsaXNoV2FybmluZ01lc3NhZ2UgPSAncHVibGlzaFdhcm5pbmdNZXNzYWdlJyxcclxuXHJcbiAgLy8gRFBJX011c3REb3duZ3JhZGVUb1B1Ymxpc2hXYXJuaW5nTWVzc2FnZVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgUHVibGlzaFdhcm5pbmdNZXNzYWdlUHJlc01vZGVsXHJcbiAgTXVzdERvd25ncmFkZVRvUHVibGlzaFdhcm5pbmdNZXNzYWdlUHJlc01vZGVsID0gJ211c3REb3duZ3JhZGVUb1B1Ymxpc2hXYXJuaW5nTWVzc2FnZVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9QdWJsaXNoU2VsZWN0ZWRBdHRyaWJ1dGVzLCBoYXZpbmcgdHlwZSBQdWJsaXNoU2VsZWN0ZWRBdHRyaWJ1dGVzUHJlc01vZGVsXHJcbiAgUHVibGlzaFNlbGVjdGVkQXR0cmlidXRlcyA9ICdwdWJsaXNoU2VsZWN0ZWRBdHRyaWJ1dGVzJyxcclxuXHJcbiAgLy8gRFBJX0F1dG9zYXZlRmlsZSwgaGF2aW5nIHR5cGUgQXV0b3NhdmVGaWxlUHJlc01vZGVsXHJcbiAgQXV0b3NhdmVGaWxlID0gJ2F1dG9zYXZlRmlsZScsXHJcblxyXG4gIC8vIERQSV9BdXRvc2F2ZUZpbGVzLCBoYXZpbmcgdHlwZSBBdXRvc2F2ZUZpbGVQcmVzTW9kZWxbXVxyXG4gIEF1dG9zYXZlRmlsZXMgPSAnYXV0b3NhdmVGaWxlcycsXHJcblxyXG4gIC8vIERQSV9GdW5jdGlvbkdyb3VwLCBoYXZpbmcgdHlwZSBGdW5jdGlvbkdyb3VwXHJcbiAgRnVuY3Rpb25Hcm91cCA9ICdmdW5jR3JwJyxcclxuXHJcbiAgLy8gRFBJX0Z1bmN0aW9uR3JvdXBzLCBoYXZpbmcgdHlwZSBGdW5jdGlvbkdyb3VwW11cclxuICBGdW5jdGlvbkdyb3VwcyA9ICdmdW5jR3JwcycsXHJcblxyXG4gIC8vIERQSV9GdW5jdGlvbkFyZ1R5cGUsIGhhdmluZyB0eXBlIEZ1bmN0aW9uQXJnVHlwZVxyXG4gIEZ1bmN0aW9uQXJnVHlwZSA9ICdmdW5jQXJnVHlwZScsXHJcblxyXG4gIC8vIERQSV9GdW5jdGlvbkFyZ1R5cGVzLCBoYXZpbmcgdHlwZSBGdW5jdGlvbkFyZ1R5cGVbXVxyXG4gIEZ1bmN0aW9uQXJnVHlwZXMgPSAnZnVuY0FyZ1R5cGVzJyxcclxuXHJcbiAgLy8gRFBJX0NhbGN1bGF0aW9uU3R5bGUsIGhhdmluZyB0eXBlIENhbGNTdHlsZVxyXG4gIENhbGN1bGF0aW9uU3R5bGUgPSAnY2FsY3VsYXRpb25TdHlsZScsXHJcblxyXG4gIC8vIERQSV9DYWxjdWxhdGlvbiwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRpb25QcmVzTW9kZWxcclxuICBDYWxjdWxhdGlvbiA9ICdjYWxjdWxhdGlvbicsXHJcblxyXG4gIC8vIERQSV9UeXBlSW5QaWxsLCBoYXZpbmcgdHlwZSBDYWxjdWxhdGlvblByZXNNb2RlbFxyXG4gIFR5cGVJblBpbGwgPSAndHlwZUluUGlsbCcsXHJcblxyXG4gIC8vIERQSV9DYWxjRXJyb3JJbmZvLCBoYXZpbmcgdHlwZSBDYWxjRXJyb3JJbmZvUHJlc01vZGVsXHJcbiAgQ2FsY0Vycm9ySW5mbyA9ICdlcnJvckluZm8nLFxyXG5cclxuICAvLyBEUElfQ2FsY0Vycm9ySW5mb3MsIGhhdmluZyB0eXBlIENhbGNFcnJvckluZm9QcmVzTW9kZWxbXVxyXG4gIENhbGNFcnJvckluZm9zID0gJ2Vycm9ySW5mb0xpc3QnLFxyXG5cclxuICAvLyBEUElfQ2FsY3VhbHRpb25WYWxpZGF0aW9uLCBoYXZpbmcgdHlwZSBDYWxjdWxhdGlvblZhbGlkYXRpb25QcmVzTW9kZWxcclxuICBDYWxjdWFsdGlvblZhbGlkYXRpb24gPSAnY2FsY3VsYXRpb25WYWxpZGF0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0V4cHJlc3Npb25GdW5jdGlvbiwgaGF2aW5nIHR5cGUgRXhwcmVzc2lvbkZ1bmN0aW9uUHJlc01vZGVsXHJcbiAgRXhwcmVzc2lvbkZ1bmN0aW9uID0gJ2V4cHJlc3Npb25GdW5jJyxcclxuXHJcbiAgLy8gRFBJX0V4cHJlc3Npb25GdW5jdGlvbnMsIGhhdmluZyB0eXBlIEV4cHJlc3Npb25GdW5jdGlvblByZXNNb2RlbFtdXHJcbiAgRXhwcmVzc2lvbkZ1bmN0aW9ucyA9ICdleHByZXNzaW9uRnVuY0xpc3QnLFxyXG5cclxuICAvLyBEUElfRXhwcmVzc2lvbkZ1bmN0aW9uc1BNLCBoYXZpbmcgdHlwZSBFeHByZXNzaW9uRnVuY3Rpb25zUHJlc01vZGVsXHJcbiAgRXhwcmVzc2lvbkZ1bmN0aW9uc1BNID0gJ2V4cHJlc3Npb25GdW5jUG0nLFxyXG5cclxuICAvLyBEUElfU3R5bGVUb2tlbiwgaGF2aW5nIHR5cGUgU3R5bGVUb2tlblByZXNNb2RlbFxyXG4gIFN0eWxlVG9rZW4gPSAnc3R5bGVUb2tlbicsXHJcblxyXG4gIC8vIERQSV9TdHlsZVRva2VucywgaGF2aW5nIHR5cGUgU3R5bGVUb2tlblByZXNNb2RlbFtdXHJcbiAgU3R5bGVUb2tlbnMgPSAnc3R5bGVUb2tlbkxpc3QnLFxyXG5cclxuICAvLyBEUElfQ2FsY0VkaXRvclRleHRTZWxlY3Rpb24sIGhhdmluZyB0eXBlIENhbGNFZGl0b3JUZXh0U2VsZWN0aW9uUHJlc01vZGVsXHJcbiAgQ2FsY0VkaXRvclRleHRTZWxlY3Rpb24gPSAnY2FsY0VkaXRvclRleHRTZWxlY3Rpb24nLFxyXG5cclxuICAvLyBEUElfQXV0b0NvbXBsZXRlSXRlbVR5cGUsIGhhdmluZyB0eXBlIEF1dG9Db21wbGV0ZUl0ZW1UeXBlXHJcbiAgQXV0b0NvbXBsZXRlSXRlbVR5cGUgPSAnYXV0b2NvbXBsZXRlVHlwZScsXHJcblxyXG4gIC8vIERQSV9BdXRvQ29tcGxldGVJdGVtLCBoYXZpbmcgdHlwZSBBdXRvQ29tcGxldGVJdGVtUHJlc01vZGVsXHJcbiAgQXV0b0NvbXBsZXRlSXRlbSA9ICdhdXRvY29tcGxldGVJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0F1dG9Db21wbGV0ZUl0ZW1zLCBoYXZpbmcgdHlwZSBBdXRvQ29tcGxldGVJdGVtUHJlc01vZGVsW11cclxuICBBdXRvQ29tcGxldGVJdGVtcyA9ICdhdXRvY29tcGxldGVJdGVtTGlzdCcsXHJcblxyXG4gIC8vIERQSV9DYWxjdWxhdGlvbkF1dG9Db21wbGV0ZUNvbnRleHRNZW51LCBoYXZpbmcgdHlwZSBDYWxjdWxhdGlvbkF1dG9Db21wbGV0ZUNvbnRleHRNZW51UHJlc01vZGVsXHJcbiAgQ2FsY3VsYXRpb25BdXRvQ29tcGxldGVDb250ZXh0TWVudSA9ICdjYWxjdWxhdGlvbkF1dG9jb21wbGV0ZUNvbnRleHRNZW51JyxcclxuXHJcbiAgLy8gRFBJX0NhbGNBcHBseVJlc3VsdCwgaGF2aW5nIHR5cGUgQ2FsY0FwcGx5UmVzdWx0XHJcbiAgQ2FsY0FwcGx5UmVzdWx0ID0gJ2NhbGN1bGF0aW9uQXBwbHlSZXN1bHQnLFxyXG5cclxuICAvLyBEUElfUmFtcEJvcmRlclN0eWxlZEJveCwgaGF2aW5nIHR5cGUgU3R5bGVkQm94UHJlc01vZGVsXHJcbiAgUmFtcEJvcmRlclN0eWxlZEJveCA9ICdyYW1wQm9yZGVyU3R5bGVkQm94JyxcclxuXHJcbiAgLy8gRFBJX1N0eWxlZEJveCwgaGF2aW5nIHR5cGUgU3R5bGVkQm94UHJlc01vZGVsXHJcbiAgU3R5bGVkQm94ID0gJ3N0eWxlZEJveCcsXHJcblxyXG4gIC8vIERQSV9HbG9iYWxTdHlsZWRCb3gsIGhhdmluZyB0eXBlIFN0eWxlZEJveFByZXNNb2RlbFxyXG4gIEdsb2JhbFN0eWxlZEJveCA9ICdnbG9iYWxTdHlsZWRCb3gnLFxyXG5cclxuICAvLyBEUElfU3R5bGVDb250ZXh0LCBoYXZpbmcgdHlwZSBTdHlsZUNvbnRleHRQcmVzTW9kZWxcclxuICBTdHlsZUNvbnRleHQgPSAnc3R5bGVDb250ZXh0JyxcclxuXHJcbiAgLy8gRFBJX0N1cnJlbnRUZXh0U3R5bGUsIGhhdmluZyB0eXBlIFRleHRTdHlsZVByZXNNb2RlbFxyXG4gIEN1cnJlbnRUZXh0U3R5bGUgPSAnY3VycmVudFRleHRTdHlsZScsXHJcblxyXG4gIC8vIERQSV9MYWJlbFRleHRTdHlsZSwgaGF2aW5nIHR5cGUgVGV4dFN0eWxlUHJlc01vZGVsXHJcbiAgTGFiZWxUZXh0U3R5bGUgPSAnbGFiZWxUZXh0U3R5bGUnLFxyXG5cclxuICAvLyBEUElfT3JpZ2luYWxUZXh0U3R5bGUsIGhhdmluZyB0eXBlIFRleHRTdHlsZVByZXNNb2RlbFxyXG4gIE9yaWdpbmFsVGV4dFN0eWxlID0gJ29yaWdpbmFsVGV4dFN0eWxlJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkVGV4dFN0eWxlTW9kZWwsIGhhdmluZyB0eXBlIFRleHRTdHlsZVByZXNNb2RlbFxyXG4gIFNlbGVjdGVkVGV4dFN0eWxlTW9kZWwgPSAnc2VsZWN0ZWRUZXh0U3R5bGVNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9Td2F0Y2hUZXh0U3R5bGVNb2RlbCwgaGF2aW5nIHR5cGUgVGV4dFN0eWxlUHJlc01vZGVsXHJcbiAgU3dhdGNoVGV4dFN0eWxlTW9kZWwgPSAnc3dhdGNoVGV4dFN0eWxlJyxcclxuXHJcbiAgLy8gRFBJX1RleHRTdHlsZU1vZGVsLCBoYXZpbmcgdHlwZSBUZXh0U3R5bGVQcmVzTW9kZWxcclxuICBUZXh0U3R5bGVNb2RlbCA9ICd0ZXh0U3R5bGUnLFxyXG5cclxuICAvLyBEUElfVGl0bGVTdHlsZU1vZGVsLCBoYXZpbmcgdHlwZSBUZXh0U3R5bGVQcmVzTW9kZWxcclxuICBUaXRsZVN0eWxlTW9kZWwgPSAndGl0bGVTdHlsZU1vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1Byb3BlcnR5QmFnLCBoYXZpbmcgdHlwZSBQcm9wZXJ0eUJhZ1ByZXNNb2RlbFxyXG4gIFByb3BlcnR5QmFnID0gJ3Byb3BCYWdXcmFwcGVyJyxcclxuXHJcbiAgLy8gRFBJX1ByZXNNb2RlbE1hcCwgaGF2aW5nIHR5cGUgRGljdGlvbmFyeShvZiBQcm9wZXJ0eUJhZ1ByZXNNb2RlbClcclxuICBQcmVzTW9kZWxNYXAgPSAncHJlc01vZGVsTWFwJyxcclxuXHJcbiAgLy8gRFBJX1ByZXNlbnRhdGlvbkxheWVyTm90aWZpY2F0aW9ucywgaGF2aW5nIHR5cGUgUHJlc01vZGVsTWFwUHJlc01vZGVsXHJcbiAgUHJlc2VudGF0aW9uTGF5ZXJOb3RpZmljYXRpb25zID0gJ3ByZXNlbnRhdGlvbkxheWVyTm90aWZpY2F0aW9ucycsXHJcblxyXG4gIC8vIERQSV9TZWNvbmRhcnlJbmZvLCBoYXZpbmcgdHlwZSBQcmVzTW9kZWxNYXBQcmVzTW9kZWxcclxuICBTZWNvbmRhcnlJbmZvID0gJ3NlY29uZGFyeUluZm8nLFxyXG5cclxuICAvLyBEUElfQ2xpZW50RGFzaGJvYXJkVUlNZXRyaWMsIGhhdmluZyB0eXBlIENsaWVudERhc2hib2FyZFVJTWV0cmljUHJlc01vZGVsXHJcbiAgQ2xpZW50RGFzaGJvYXJkVUlNZXRyaWMgPSAnY2xpZW50RGFzaGJvYXJkVWlNZXRyaWMnLFxyXG5cclxuICAvLyBEUElfQ2xpZW50RGFzaGJvYXJkVUlNZXRyaWNzLCBoYXZpbmcgdHlwZSBDbGllbnREYXNoYm9hcmRVSU1ldHJpY1ByZXNNb2RlbFtdXHJcbiAgQ2xpZW50RGFzaGJvYXJkVUlNZXRyaWNzID0gJ2NsaWVudERhc2hib2FyZFVpTWV0cmljcycsXHJcblxyXG4gIC8vIERQSV9DbGllbnREYXNoYm9hcmRVSU1ldHJpY0NvbnRhaW5lciwgaGF2aW5nIHR5cGUgQ2xpZW50RGFzaGJvYXJkVUlNZXRyaWNDb250YWluZXJQcmVzTW9kZWxcclxuICBDbGllbnREYXNoYm9hcmRVSU1ldHJpY0NvbnRhaW5lciA9ICdjbGllbnREYXNoYm9hcmRVaU1ldHJpY0NvbnRhaW5lcicsXHJcblxyXG4gIC8vIERQSV9FeHRTdmNDb25maWcsIGhhdmluZyB0eXBlIEV4dFN2Y0NvbmZpZ1ByZXNNb2RlbFxyXG4gIEV4dFN2Y0NvbmZpZyA9ICdleHRTdmNDb25maWcnLFxyXG5cclxuICAvLyBEUElfU3Rvcnlib2FyZFNoZWV0SXRlbSwgaGF2aW5nIHR5cGUgU3Rvcnlib2FyZFNoZWV0SXRlbVByZXNNb2RlbFxyXG4gIFN0b3J5Ym9hcmRTaGVldEl0ZW0gPSAnc3Rvcnlib2FyZFNoZWV0SXRlbScsXHJcblxyXG4gIC8vIERQSV9TdG9yeWJvYXJkU2hlZXRJdGVtcywgaGF2aW5nIHR5cGUgU3Rvcnlib2FyZFNoZWV0SXRlbVByZXNNb2RlbFtdXHJcbiAgU3Rvcnlib2FyZFNoZWV0SXRlbXMgPSAnc3Rvcnlib2FyZFNoZWV0SXRlbXMnLFxyXG5cclxuICAvLyBEUElfU3Rvcnlib2FyZFNoZWV0TGlzdCwgaGF2aW5nIHR5cGUgU3Rvcnlib2FyZFNoZWV0TGlzdFByZXNNb2RlbFxyXG4gIFN0b3J5Ym9hcmRTaGVldExpc3QgPSAnc3Rvcnlib2FyZFNoZWV0TGlzdCcsXHJcblxyXG4gIC8vIERQSV9GaXRUb1N0b3J5Qm9hcmRPcHRpb25JdGVtLCBoYXZpbmcgdHlwZSBGaXRUb1N0b3J5Qm9hcmRPcHRpb25JdGVtUHJlc01vZGVsXHJcbiAgRml0VG9TdG9yeUJvYXJkT3B0aW9uSXRlbSA9ICdmaXRUb1N0b3J5Ym9hcmRPcHRpb25JdGVtJyxcclxuXHJcbiAgLy8gRFBJX0ZpdFRvU3RvcnlCb2FyZE9wdGlvbkl0ZW1zLCBoYXZpbmcgdHlwZSBGaXRUb1N0b3J5Qm9hcmRPcHRpb25JdGVtUHJlc01vZGVsW11cclxuICBGaXRUb1N0b3J5Qm9hcmRPcHRpb25JdGVtcyA9ICdmaXRUb1N0b3J5Ym9hcmRPcHRpb25JdGVtcycsXHJcblxyXG4gIC8vIERQSV9GaXRUb1N0b3J5Qm9hcmRPcHRpb25MaXN0LCBoYXZpbmcgdHlwZSBGaXRUb1N0b3J5Qm9hcmRPcHRpb25MaXN0UHJlc01vZGVsXHJcbiAgRml0VG9TdG9yeUJvYXJkT3B0aW9uTGlzdCA9ICdmaXRUb1N0b3J5Ym9hcmRPcHRpb25MaXN0JyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5UG9pbnROYXZJdGVtLCBoYXZpbmcgdHlwZSBTdG9yeVBvaW50TmF2SXRlbVByZXNNb2RlbFxyXG4gIFN0b3J5UG9pbnROYXZJdGVtID0gJ3N0b3J5cG9pbnROYXZJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5UG9pbnROYXZJdGVtcywgaGF2aW5nIHR5cGUgU3RvcnlQb2ludE5hdkl0ZW1QcmVzTW9kZWxbXVxyXG4gIFN0b3J5UG9pbnROYXZJdGVtcyA9ICdzdG9yeXBvaW50TmF2SXRlbXMnLFxyXG5cclxuICAvLyBEUElfRmxpcGJvYXJkTmF2LCBoYXZpbmcgdHlwZSBGbGlwYm9hcmROYXZQcmVzTW9kZWxcclxuICBGbGlwYm9hcmROYXYgPSAnZmxpcGJvYXJkTmF2JyxcclxuXHJcbiAgLy8gRFBJX1Njcm9sbEJhclN0eWxlLCBoYXZpbmcgdHlwZSBTY3JvbGxCYXJTdHlsZVByZXNNb2RlbFxyXG4gIFNjcm9sbEJhclN0eWxlID0gJ3Njcm9sbEJhclN0eWxlJyxcclxuXHJcbiAgLy8gRFBJX0Rhc2hib2FyZFpvbmVMYXlvdXRQYW5lLCBoYXZpbmcgdHlwZSBEYXNoYm9hcmRab25lTGF5b3V0UGFuZVByZXNNb2RlbFxyXG4gIERhc2hib2FyZFpvbmVMYXlvdXRQYW5lID0gJ2Rhc2hib2FyZFpvbmVMYXlvdXRQYW5lJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdGVkU3RvcnlQb2ludFN0eWxlLCBoYXZpbmcgdHlwZSBTdG9yeVBvaW50Q2FwdGlvblN0eWxlUHJlc01vZGVsXHJcbiAgU2VsZWN0ZWRTdG9yeVBvaW50U3R5bGUgPSAnc2VsZWN0ZWRTdG9yeVBvaW50U3R5bGUnLFxyXG5cclxuICAvLyBEUElfVW5zZWxlY3RlZFN0b3J5UG9pbnRTdHlsZSwgaGF2aW5nIHR5cGUgU3RvcnlQb2ludENhcHRpb25TdHlsZVByZXNNb2RlbFxyXG4gIFVuc2VsZWN0ZWRTdG9yeVBvaW50U3R5bGUgPSAndW5zZWxlY3RlZFN0b3J5UG9pbnRTdHlsZScsXHJcblxyXG4gIC8vIERQSV9GbGlwYm9hcmROYXZTdHlsZSwgaGF2aW5nIHR5cGUgRmxpcGJvYXJkTmF2U3R5bGVQcmVzTW9kZWxcclxuICBGbGlwYm9hcmROYXZTdHlsZSA9ICdmbGlwYm9hcmROYXZTdHlsZScsXHJcblxyXG4gIC8vIERQSV9TdG9yeVBvaW50LCBoYXZpbmcgdHlwZSBTdG9yeVBvaW50UHJlc01vZGVsXHJcbiAgU3RvcnlQb2ludCA9ICdzdG9yeVBvaW50JyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5UG9pbnRzLCBoYXZpbmcgdHlwZSBEaWN0aW9uYXJ5KG9mIFN0b3J5UG9pbnRQcmVzTW9kZWwpXHJcbiAgU3RvcnlQb2ludHMgPSAnc3RvcnlQb2ludHMnLFxyXG5cclxuICAvLyBEUElfRmxpcGJvYXJkLCBoYXZpbmcgdHlwZSBGbGlwYm9hcmRQcmVzTW9kZWxcclxuICBGbGlwYm9hcmQgPSAnZmxpcGJvYXJkJyxcclxuXHJcbiAgLy8gRFBJX1N0b3J5UGFpciwgaGF2aW5nIHR5cGUgU3RvcnlQYWlyUHJlc01vZGVsXHJcbiAgU3RvcnlQYWlyID0gJ3N0b3J5UGFpcicsXHJcblxyXG4gIC8vIERQSV9TdG9yeVBhaXJzLCBoYXZpbmcgdHlwZSBTdG9yeVBhaXJQcmVzTW9kZWxbXVxyXG4gIFN0b3J5UGFpcnMgPSAnc3RvcnlQYWlycycsXHJcblxyXG4gIC8vIERQSV9TdG9yeWJvYXJkUE0sIGhhdmluZyB0eXBlIFN0b3J5Ym9hcmRQcmVzTW9kZWxcclxuICBTdG9yeWJvYXJkUE0gPSAnc3Rvcnlib2FyZFBtJyxcclxuXHJcbiAgLy8gRFBJX0hpRHBpSWNvbkRpY3Rpb25hcnksIGhhdmluZyB0eXBlIEltYWdlQ29sbGVjdGlvblByZXNNb2RlbFxyXG4gIEhpRHBpSWNvbkRpY3Rpb25hcnkgPSAnaGlEcGlJY29uRGljdGlvbmFyeScsXHJcblxyXG4gIC8vIERQSV9JY29uRGljdGlvbmFyeSwgaGF2aW5nIHR5cGUgSW1hZ2VDb2xsZWN0aW9uUHJlc01vZGVsXHJcbiAgSWNvbkRpY3Rpb25hcnkgPSAnaWNvbkRpY3Rpb25hcnknLFxyXG5cclxuICAvLyBEUElfSWNvblJlc291cmNlRGljdGlvbmFyeSwgaGF2aW5nIHR5cGUgSW1hZ2VSZXNvdXJjZUNvbGxlY3Rpb25QcmVzTW9kZWxcclxuICBJY29uUmVzb3VyY2VEaWN0aW9uYXJ5ID0gJ2ljb25SZXNEaWN0aW9uYXJ5JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFQcmV2aWV3V2luZG93TWVzc2FnZSwgaGF2aW5nIHR5cGUgRGF0YVByZXZpZXdXaW5kb3dNZXNzYWdlUHJlc01vZGVsXHJcbiAgRGF0YVByZXZpZXdXaW5kb3dNZXNzYWdlID0gJ2RhdGFQcmV2aWV3V2luZG93TWVzc2FnZScsXHJcblxyXG4gIC8vIERQSV9EYXRhU291cmNlRGF0YSwgaGF2aW5nIHR5cGUgRGF0YVNvdXJjZURhdGFQcmVzTW9kZWxcclxuICBEYXRhU291cmNlRGF0YSA9ICdkYXRhU3JjRGF0YScsXHJcblxyXG4gIC8vIERQSV9EYXRhU291cmNlU29ydCwgaGF2aW5nIHR5cGUgRGF0YVNvdXJjZVNvcnRQcmVzTW9kZWxcclxuICBEYXRhU291cmNlU29ydCA9ICdkYXRhU3JjU29ydCcsXHJcblxyXG4gIC8vIERQSV9Db2x1bW5JbmZvLCBoYXZpbmcgdHlwZSBEU0NvbHVtbkluZm9QcmVzTW9kZWxcclxuICBDb2x1bW5JbmZvID0gJ2NvbHVtbkluZm8nLFxyXG5cclxuICAvLyBEUElfQ29sdW1uSW5mb3MsIGhhdmluZyB0eXBlIERTQ29sdW1uSW5mb1ByZXNNb2RlbFtdXHJcbiAgQ29sdW1uSW5mb3MgPSAnY29sdW1uSW5mb3MnLFxyXG5cclxuICAvLyBEUElfRGF0YUZvcm1hdHRlciwgaGF2aW5nIHR5cGUgRFZGb3JtYXR0ZXJcclxuICBEYXRhRm9ybWF0dGVyID0gJ2RhdGFGb3JtYXR0ZXInLFxyXG5cclxuICAvLyBEUElfSm9pbkRlc2NyaXB0aW9uLCBoYXZpbmcgdHlwZSBKb2luRGVzY3JpcHRpb25QcmVzTW9kZWxcclxuICBKb2luRGVzY3JpcHRpb24gPSAnam9pbkRlc2NyaXB0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0pvaW5EZXNjcmlwdGlvbnMsIGhhdmluZyB0eXBlIERpY3Rpb25hcnkob2YgSm9pbkRlc2NyaXB0aW9uUHJlc01vZGVsKVxyXG4gIEpvaW5EZXNjcmlwdGlvbnMgPSAnam9pbkRlc2NyaXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9GaWxlVGFibGVJbmZvLCBoYXZpbmcgdHlwZSBGaWxlVGFibGVJbmZvUHJlc01vZGVsXHJcbiAgRmlsZVRhYmxlSW5mbyA9ICdmaWxlVGFibGVJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkTWFwcGluZywgaGF2aW5nIHR5cGUgRmllbGRNYXBwaW5nUHJlc01vZGVsXHJcbiAgRmllbGRNYXBwaW5nID0gJ2ZpZWxkTWFwcGluZycsXHJcblxyXG4gIC8vIERQSV9GaWVsZE1hcHBpbmdEYXRhLCBoYXZpbmcgdHlwZSBGaWVsZE1hcHBpbmdEYXRhUHJlc01vZGVsXHJcbiAgRmllbGRNYXBwaW5nRGF0YSA9ICdmaWVsZE1hcHBpbmdEYXRhJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkTWFwcGluZ0RhdGFWZWN0b3IsIGhhdmluZyB0eXBlIEZpZWxkTWFwcGluZ0RhdGFQcmVzTW9kZWxbXVxyXG4gIEZpZWxkTWFwcGluZ0RhdGFWZWN0b3IgPSAnZmllbGRNYXBwaW5nRGF0YVZlY3RvcicsXHJcblxyXG4gIC8vIERQSV9GcmFtZUZpbmRlciwgaGF2aW5nIHR5cGUgRnJhbWVGaW5kZXJQcmVzTW9kZWxcclxuICBGcmFtZUZpbmRlciA9ICdmcmFtZUZpbmRlcicsXHJcblxyXG4gIC8vIERQSV9TaGVldExpbmtGaWVsZE1hcHBpbmcsIGhhdmluZyB0eXBlIFNoZWV0TGlua0ZpZWxkTWFwcGluZ1ByZXNNb2RlbFxyXG4gIFNoZWV0TGlua0ZpZWxkTWFwcGluZyA9ICdzaGVldExpbmtGaWVsZE1hcHBpbmcnLFxyXG5cclxuICAvLyBEUElfVW5pb25JbmZvLCBoYXZpbmcgdHlwZSBVbmlvbkluZm9QcmVzTW9kZWxcclxuICBVbmlvbkluZm8gPSAndW5pb25JbmZvJyxcclxuXHJcbiAgLy8gRFBJX1VuaW9uVGFibGVJbmZvLCBoYXZpbmcgdHlwZSBVbmlvblRhYmxlSW5mb1ByZXNNb2RlXHJcbiAgVW5pb25UYWJsZUluZm8gPSAndW5pb25UYWJsZUluZm8nLFxyXG5cclxuICAvLyBEUElfVW5pb25UYWJsZUluZm9zLCBoYXZpbmcgdHlwZSBVbmlvblRhYmxlSW5mb1ByZXNNb2RlbFtdXHJcbiAgVW5pb25UYWJsZUluZm9zID0gJ3VuaW9uVGFibGVJbmZvcycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uUEJVbmlvbkluZm8sIGhhdmluZyB0eXBlIFBCVW5pb25JbmZvUHJlc01vZGVsXHJcbiAgQ29ubmVjdGlvblBCVW5pb25JbmZvID0gJ2Nvbm5lY3Rpb25QYnVuaW9uSW5mbycsXHJcblxyXG4gIC8vIERQSV9Db25uZWN0aW9uUEJVbmlvbkluZm9zLCBoYXZpbmcgdHlwZSBQQlVuaW9uSW5mb1ByZXNNb2RlbFtdXHJcbiAgQ29ubmVjdGlvblBCVW5pb25JbmZvcyA9ICdjb25uZWN0aW9uUGJ1bmlvbkluZm9zJyxcclxuXHJcbiAgLy8gRFBJX0pvaW5DbGF1c2UsIGhhdmluZyB0eXBlIEpvaW5DbGF1c2VQcmVzTW9kZWxcclxuICBKb2luQ2xhdXNlID0gJ2pvaW5DbGF1c2UnLFxyXG5cclxuICAvLyBEUElfSm9pbkNsYXVzZXMsIGhhdmluZyB0eXBlIEpvaW5DbGF1c2VQcmVzTW9kZWxbXVxyXG4gIEpvaW5DbGF1c2VzID0gJ2pvaW5DbGF1c2VzJyxcclxuXHJcbiAgLy8gRFBJX0pvaW5WYWxpZGF0aW9uUmVzdWx0LCBoYXZpbmcgdHlwZSBKb2luVmFsaWRhdGlvblJlc3VsdFByZXNNb2RlbFxyXG4gIEpvaW5WYWxpZGF0aW9uUmVzdWx0ID0gJ2pvaW5WYWxpZGF0aW9uUmVzdWx0JyxcclxuXHJcbiAgLy8gRFBJX0pvaW5UYWJsZUluZm8sIGhhdmluZyB0eXBlIEpvaW5UYWJsZUluZm9QcmVzTW9kZWxcclxuICBKb2luVGFibGVJbmZvID0gJ2pvaW5UYWJsZUluZm8nLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVySW5mbywgaGF2aW5nIHR5cGUgSm9pblRhYmxlSW5mb1ByZXNNb2RlbFxyXG4gIFBhcmFtZXRlckluZm8gPSAncGFyYW1ldGVySW5mbycsXHJcblxyXG4gIC8vIERQSV9Kb2luVGFibGVJbmZvcywgaGF2aW5nIHR5cGUgSm9pblRhYmxlSW5mb1ByZXNNb2RlbFtdXHJcbiAgSm9pblRhYmxlSW5mb3MgPSAnam9pblRhYmxlSW5mb3MnLFxyXG5cclxuICAvLyBEUElfSm9pbk9uQ2FsY0luZm8sIGhhdmluZyB0eXBlIEpvaW5PbkNhbGNJbmZvUHJlc01vZGVsXHJcbiAgSm9pbk9uQ2FsY0luZm8gPSAnam9pbk9uQ2FsY0luZm8nLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblN1bW1hcnksIGhhdmluZyB0eXBlIENvbm5lY3Rpb25TdW1tYXJ5UHJlc01vZGVsXHJcbiAgQ29ubmVjdGlvblN1bW1hcnkgPSAnY29ubmVjdGlvblN1bW1hcnknLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblN1bW1hcmllcywgaGF2aW5nIHR5cGUgQ29ubmVjdGlvblN1bW1hcnlQcmVzTW9kZWxbXVxyXG4gIENvbm5lY3Rpb25TdW1tYXJpZXMgPSAnY29ubmVjdGlvblN1bW1hcmllcycsXHJcblxyXG4gIC8vIERQSV9Ub3BMZXZlbENvbm5lY3Rpb25EZXNjcmlwdGlvbiwgaGF2aW5nIHR5cGUgVG9wTGV2ZWxDb25uZWN0aW9uRGVzY3JpcHRpb25QcmVzTW9kZWxcclxuICBUb3BMZXZlbENvbm5lY3Rpb25EZXNjcmlwdGlvbiA9ICd0b3BMZXZlbENvbm5lY3Rpb25EZXNjcmlwdGlvbicsXHJcblxyXG4gIC8vIERQSV9EYXRhQ29ubmVjdGlvblRhYmxlVmlld01lc3NhZ2VzLCBoYXZpbmcgdHlwZSBEYXRhQ29ubmVjdGlvblRhYmxlVmlld01lc3NhZ2VzUHJlc01vZGVsXHJcbiAgRGF0YUNvbm5lY3Rpb25UYWJsZVZpZXdNZXNzYWdlcyA9ICdkYXRhQ29ubmVjdGlvblRhYmxlVmlld01lc3NhZ2VzJyxcclxuXHJcbiAgLy8gRFBJX1RleHRUcmFuc2Zvcm1TY3JpcHQsIGhhdmluZyB0eXBlIFRleHRUcmFuc2Zvcm1TY3JpcHRQcmVzTW9kZWxcclxuICBUZXh0VHJhbnNmb3JtU2NyaXB0ID0gJ3RleHRUcmFuc2Zvcm1TY3JpcHQnLFxyXG5cclxuICAvLyBEUElfQ2FsZW5kYXJEYXRlT3B0aW9ucywgaGF2aW5nIHR5cGUgQ2FsZW5kYXJEYXRlT3B0aW9uc1ByZXNNb2RlbFxyXG4gIENhbGVuZGFyRGF0ZU9wdGlvbnMgPSAnY2FsZW5kYXJEYXRlT3B0aW9ucycsXHJcblxyXG4gIC8vIERQSV9Hb1RvV29ya3NoZWV0VG9vbHRpcFByZXNNb2RlbCwgaGF2aW5nIHR5cGUgR29Ub1dvcmtzaGVldFRvb2x0aXBQcmVzTW9kZWxcclxuICBHb1RvV29ya3NoZWV0VG9vbHRpcFByZXNNb2RlbCA9ICdnb1RvV29ya3NoZWV0VG9vbHRpcFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZUNsZWFuaW5nUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUYWJsZUNsZWFuaW5nUHJlc01vZGVsXHJcbiAgVGFibGVDbGVhbmluZ1ByZXNNb2RlbCA9ICd0YWJsZUNsZWFuaW5nUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1Bpdm90UHJlc01vZGVsLCBoYXZpbmcgdHlwZSBQaXZvdFByZXNNb2RlbFxyXG4gIFBpdm90UHJlc01vZGVsID0gJ3Bpdm90UHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1Bpdm90VHJlZUl0ZW1QcmVzTW9kZWwsIGhhdmluZyB0eXBlIFBpdm90VHJlZUl0ZW1QcmVzTW9kZWxcclxuICBQaXZvdFRyZWVJdGVtUHJlc01vZGVsID0gJ3Bpdm90VHJlZUl0ZW1QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfUGl2b3RUcmVlSXRlbXMsIGhhdmluZyB0eXBlIFBpdm90VHJlZUl0ZW1QcmVzTW9kZWxbXVxyXG4gIFBpdm90VHJlZUl0ZW1zID0gJ3Bpdm90VHJlZUl0ZW1zUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1Bpdm90RGlzcGxheSwgaGF2aW5nIHR5cGUgUGl2b3REaXNwbGF5UHJlc01vZGVsXHJcbiAgUGl2b3REaXNwbGF5ID0gJ3Bpdm90RGlzcGxheScsXHJcblxyXG4gIC8vIERQSV9QaXZvdFRhZywgaGF2aW5nIHR5cGUgTmFtZUNvbHVtbnNQYWlyUHJlc01vZGVsXHJcbiAgUGl2b3RUYWcgPSAncGl2b3RUYWcnLFxyXG5cclxuICAvLyBEUElfUGl2b3RHcm91cHMsIGhhdmluZyB0eXBlIE5hbWVDb2x1bW5zUGFpclByZXNNb2RlbFtdXHJcbiAgUGl2b3RHcm91cHMgPSAncGl2b3RHcm91cHMnLFxyXG5cclxuICAvLyBEUElfRGF0YVNvdXJjZURyb3Bkb3duLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlRHJvcGRvd25QcmVzTW9kZWxcclxuICBEYXRhU291cmNlRHJvcGRvd24gPSAnZGF0YVNvdXJjZURyb3Bkb3duJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25Ecm9wZG93biwgaGF2aW5nIHR5cGUgQ29ubmVjdGlvbkRyb3Bkb3duUHJlc01vZGVsXHJcbiAgQ29ubmVjdGlvbkRyb3Bkb3duID0gJ2Nvbm5lY3Rpb25Ecm9wZG93bicsXHJcblxyXG4gIC8vIERQSV9BY3Rpdml0eUV2ZW50LCBoYXZpbmcgdHlwZSBBY3Rpdml0eUV2ZW50UHJlc01vZGVsXHJcbiAgQWN0aXZpdHlFdmVudCA9ICdhY3Rpdml0eUV2ZW50JyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbiwgaGF2aW5nIHR5cGUgVUlBdXRvbWF0aW9uUHJlc01vZGVsXHJcbiAgVUlBdXRvbWF0aW9uID0gJ3VpQXV0b21hdGlvbicsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25JbmRleCwgaGF2aW5nIHR5cGUgVUlBdXRvbWF0aW9uSW5kZXhQcmVzTW9kZWxcclxuICBVSUF1dG9tYXRpb25JbmRleCA9ICd1aUF1dG9tYXRpb25JbmRleCcsXHJcblxyXG4gIC8vIERQSV9VSUF1dG9tYXRpb25JbmRleExpc3QsIGhhdmluZyB0eXBlIFVJQXV0b21hdGlvbkluZGV4UHJlc01vZGVsW11cclxuICBVSUF1dG9tYXRpb25JbmRleExpc3QgPSAndWlBdXRvbWF0aW9uSW5kZXhMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1VJQXV0b21hdGlvbkNvbXBvbmVudEluZm8sIGhhdmluZyB0eXBlIFVJQXV0b21hdGlvbkNvbXBvbmVudEluZm9QcmVzTW9kZWxcclxuICBVSUF1dG9tYXRpb25Db21wb25lbnRJbmZvID0gJ3VpQXV0b21hdGlvbkNvbXBvbmVudEluZm8nLFxyXG5cclxuICAvLyBEUElfVUlBdXRvbWF0aW9uQ29tcG9uZW50SW5mb0xpc3QsIGhhdmluZyB0eXBlIFVJQXV0b21hdGlvbkNvbXBvbmVudEluZm9QcmVzTW9kZWxbXVxyXG4gIFVJQXV0b21hdGlvbkNvbXBvbmVudEluZm9MaXN0ID0gJ3VpQXV0b21hdGlvbkNvbXBvbmVudEluZm9MaXN0JyxcclxuXHJcbiAgLy8gRFBJX0dlb21ldHJ5LCBoYXZpbmcgdHlwZSBHZW9tZXRyeVByZXNNb2RlbFxyXG4gIEdlb21ldHJ5ID0gJ2dlb21ldHJ5JyxcclxuXHJcbiAgLy8gRFBJX011bHRpUG9pbnQsIGhhdmluZyB0eXBlIE11bHRpUG9pbnRQcmVzTW9kZWxcclxuICBNdWx0aVBvaW50ID0gJ211bHRpUG9pbnQnLFxyXG5cclxuICAvLyBEUElfTXVsdGlMaW5lLCBoYXZpbmcgdHlwZSBNdWx0aUxpbmVQcmVzTW9kZWxcclxuICBNdWx0aUxpbmUgPSAnbXVsdGlMaW5lJyxcclxuXHJcbiAgLy8gRFBJX011bHRpUG9seWdvbiwgaGF2aW5nIHR5cGUgTXVsdGlQb2x5Z29uUHJlc01vZGVsXHJcbiAgTXVsdGlQb2x5Z29uID0gJ211bHRpUG9seWdvbicsXHJcblxyXG4gIC8vIERQSV9Qb2x5Z29uLCBoYXZpbmcgdHlwZSBQb2x5Z29uUHJlc01vZGVsXHJcbiAgUG9seWdvbiA9ICdwb2x5Z29uJyxcclxuXHJcbiAgLy8gRFBJX1BvbHlnb25MaXN0LCBoYXZpbmcgdHlwZSBQb2x5Z29uUHJlc01vZGVsW11cclxuICBQb2x5Z29uTGlzdCA9ICdwb2x5Z29uTGlzdCcsXHJcblxyXG4gIC8vIERQSV9MaW5lLCBoYXZpbmcgdHlwZSBMaW5lUHJlc01vZGVsXHJcbiAgTGluZSA9ICdsaW5lJyxcclxuXHJcbiAgLy8gRFBJX0xpbmVMaXN0LCBoYXZpbmcgdHlwZSBMaW5lUHJlc01vZGVsW11cclxuICBMaW5lTGlzdCA9ICdsaW5lTGlzdCcsXHJcblxyXG4gIC8vIERQSV9UYWJiZWRBdXRoZW50aWNhdGlvbiwgaGF2aW5nIHR5cGUgVGFiYmVkQXV0aGVudGljYXRpb25QcmVzTW9kZWxcclxuICBUYWJiZWRBdXRoZW50aWNhdGlvbiA9ICd0YWJiZWRBdXRoZW50aWNhdGlvbicsXHJcblxyXG4gIC8vIERQSV9UYWJiZWRBdXRoZW50aWNhdGlvblRhYkluZm8sIGhhdmluZyB0eXBlIFRhYmJlZEF1dGhlbnRpY2F0aW9uVGFiSW5mb1ByZXNNb2RlbFxyXG4gIFRhYmJlZEF1dGhlbnRpY2F0aW9uVGFiSW5mbyA9ICd0YWJiZWRBdXRoZW50aWNhdGlvblRhYkluZm8nLFxyXG5cclxuICAvLyBEUElfVGFiYmVkQXV0aGVudGljYXRpb25UYWJJbmZvcywgaGF2aW5nIHR5cGUgVGFiYmVkQXV0aGVudGljYXRpb25UYWJJbmZvUHJlc01vZGVsW11cclxuICBUYWJiZWRBdXRoZW50aWNhdGlvblRhYkluZm9zID0gJ3RhYmJlZEF1dGhlbnRpY2F0aW9uVGFiSW5mb3MnLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZSwgaGF2aW5nIHR5cGUgR2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZVByZXNNb2RlbFxyXG4gIEdlb2dyYXBoaWNTZWFyY2hDYW5kaWRhdGUgPSAnZ2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZScsXHJcblxyXG4gIC8vIERQSV9HZW9ncmFwaGljU2VhcmNoQ2FuZGlkYXRlTGlzdCwgaGF2aW5nIHR5cGUgR2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZVByZXNNb2RlbFtdXHJcbiAgR2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZUxpc3QgPSAnZ2VvZ3JhcGhpY1NlYXJjaENhbmRpZGF0ZUxpc3QnLFxyXG5cclxuICAvLyBEUElfR2VvZ3JhcGhpY1NlYXJjaFJlc3VsdHMsIGhhdmluZyB0eXBlIEdlb2dyYXBoaWNTZWFyY2hQcmVzTW9kZWxcclxuICBHZW9ncmFwaGljU2VhcmNoUmVzdWx0cyA9ICdnZW9ncmFwaGljU2VhcmNoUmVzdWx0cycsXHJcblxyXG4gIC8vIERQSV9QYXJhbUluZm8sIGhhdmluZyB0eXBlIFBhcmFtZXRlckluZm9QcmVzTW9kZWxcclxuICBQYXJhbUluZm8gPSAncGFyYW1JbmZvJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtSW5mb3MsIGhhdmluZyB0eXBlIFBhcmFtZXRlckluZm9QcmVzTW9kZWxbXVxyXG4gIFBhcmFtSW5mb3MgPSAncGFyYW1JbmZvcycsXHJcblxyXG4gIC8vIERQSV9QYXJhbU5hbWVzcGFjZUluZm8sIGhhdmluZyB0eXBlIFBhcmFtZXRlck5hbWVzcGFjZUluZm9JbmZvUHJlc01vZGVsXHJcbiAgUGFyYW1OYW1lc3BhY2VJbmZvID0gJ3BhcmFtTmFtZXNwYWNlSW5mbycsXHJcblxyXG4gIC8vIERQSV9QYXJhbU5hbWVzcGFjZUluZm9zLCBoYXZpbmcgdHlwZSBQYXJhbWV0ZXJOYW1lc3BhY2VJbmZvUHJlc01vZGVsW11cclxuICBQYXJhbU5hbWVzcGFjZUluZm9zID0gJ3BhcmFtTmFtZXNwYWNlSW5mb3MnLFxyXG5cclxuICAvLyBEUElfUGFyYW1SZWdpc3RyeUluZm8sIGhhdmluZyB0eXBlIFBhcmFtZXRlclJlZ2lzdHJ5SW5mb1ByZXNNb2RlbFxyXG4gIFBhcmFtUmVnaXN0cnlJbmZvID0gJ3BhcmFtUmVnaXN0cnlJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VQcm9wZXJ0aWVzLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlUHJvcGVydGllc1ByZXNNb2RlbFxyXG4gIERhdGFTb3VyY2VQcm9wZXJ0aWVzID0gJ2Nvbm5lY3Rpb25Qcm9wZXJ0aWVzJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25UeXBlUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBDb25uZWN0aW9uVHlwZVByZXNNb2RlbFxyXG4gIENvbm5lY3Rpb25UeXBlUHJlc01vZGVsID0gJ2Nvbm5lY3Rpb25UeXBlUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0Nvbm5lY3Rpb25UeXBlcywgaGF2aW5nIHR5cGUgQ29ubmVjdGlvblR5cGVQcmVzTW9kZWxbXVxyXG4gIENvbm5lY3Rpb25UeXBlcyA9ICdjb25uZWN0aW9uVHlwZXMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdGlvblR5cGVHcm91cFByZXNNb2RlbCwgaGF2aW5nIHR5cGUgQ29ubmVjdGlvblR5cGVHcm91cFByZXNNb2RlbFxyXG4gIENvbm5lY3Rpb25UeXBlR3JvdXBQcmVzTW9kZWwgPSAnY29ubmVjdGlvblR5cGVHcm91cFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9TYXZlZERhdGFTb3VyY2VQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNhdmVkRGF0YVNvdXJjZVByZXNNb2RlbFxyXG4gIFNhdmVkRGF0YVNvdXJjZVByZXNNb2RlbCA9ICdzYXZlZERhdGFzb3VyY2VQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfU2F2ZWREYXRhU291cmNlcywgaGF2aW5nIHR5cGUgU2F2ZWREYXRhU291cmNlUHJlc01vZGVsW11cclxuICBTYXZlZERhdGFTb3VyY2VzID0gJ3NhdmVkRGF0YXNvdXJjZXMnLFxyXG5cclxuICAvLyBEUElfU2F2ZWREYXRhU291cmNlc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgU2F2ZWREYXRhU291cmNlc1ByZXNNb2RlbFxyXG4gIFNhdmVkRGF0YVNvdXJjZXNQcmVzTW9kZWwgPSAnc2F2ZWREYXRhc291cmNlc1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9PcGVuUGFuZUl0ZW1QcmVzTW9kZWwsIGhhdmluZyB0eXBlIE9wZW5QYW5lSXRlbVByZXNNb2RlbFxyXG4gIE9wZW5QYW5lSXRlbVByZXNNb2RlbCA9ICdvcGVuUGFuZUl0ZW1QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfT3BlblBhbmVJdGVtcywgaGF2aW5nIHR5cGUgT3BlblBhbmVJdGVtUHJlc01vZGVsW11cclxuICBPcGVuUGFuZUl0ZW1zID0gJ29wZW5QYW5lSXRlbXMnLFxyXG5cclxuICAvLyBEUElfT3BlblBhbmVJdGVtc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgT3BlblBhbmVJdGVtc1ByZXNNb2RlbFxyXG4gIE9wZW5QYW5lSXRlbXNQcmVzTW9kZWwgPSAnb3BlblBhbmVJdGVtc1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9WYXJpYWJsZVZhbHVlLCBoYXZpbmcgdHlwZSBWYXJpYWJsZVZhbHVlUHJlc01vZGVsXHJcbiAgVmFyaWFibGVWYWx1ZSA9ICd2YXJpYWJsZVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX1ZhcmlhYmxlVmFsdWVzLCBoYXZpbmcgdHlwZSBWYXJpYWJsZVZhbHVlUHJlc01vZGVsW11cclxuICBWYXJpYWJsZVZhbHVlcyA9ICd2YXJpYWJsZVZhbHVlcycsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJWYXJpYWJsZVZhbHVlLCBoYXZpbmcgdHlwZSBTZXJ2ZXJWYXJpYWJsZVZhbHVlUHJlc01vZGVsXHJcbiAgU2VydmVyVmFyaWFibGVWYWx1ZSA9ICdzZXJ2ZXJWYXJpYWJsZVZhbHVlJyxcclxuXHJcbiAgLy8gRFBJX0VkaXRhYmxlVmFyaWFibGVWYWx1ZSwgaGF2aW5nIHR5cGUgRWRpdGFibGVWYXJpYWJsZVZhbHVlUHJlc01vZGVsXHJcbiAgRWRpdGFibGVWYXJpYWJsZVZhbHVlID0gJ2VkaXRhYmxlVmFyaWFibGVWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJWYXJpYWJsZU1ldGFkYXRhLCBoYXZpbmcgdHlwZSBTZXJ2ZXJWYXJpYWJsZU1ldGFkYXRhUHJlc01vZGVsXHJcbiAgU2VydmVyVmFyaWFibGVNZXRhZGF0YSA9ICdzZXJ2ZXJWYXJpYWJsZU1ldGFkYXRhJyxcclxuXHJcbiAgLy8gRFBJX1Byb21wdFZhcmlhYmxlLCBoYXZpbmcgdHlwZSBQcm9tcHRWYXJpYWJsZVByZXNNb2RlbFxyXG4gIFByb21wdFZhcmlhYmxlID0gJ3Byb21wdFZhcmlhYmxlJyxcclxuXHJcbiAgLy8gRFBJX1Byb21wdFZhcmlhYmxlcywgaGF2aW5nIHR5cGUgUHJvbXB0VmFyaWFibGVQcmVzTW9kZWxbXVxyXG4gIFByb21wdFZhcmlhYmxlcyA9ICdwcm9tcHRWYXJpYWJsZXMnLFxyXG5cclxuICAvLyBEUElfVmFyaWFibGVQcm9tcHREaWFsb2csIGhhdmluZyB0eXBlIFZhcmlhYmxlUHJvbXB0RGlhbG9nUHJlc01vZGVsXHJcbiAgVmFyaWFibGVQcm9tcHREaWFsb2cgPSAndmFyaWFibGVQcm9tcHREaWFsb2cnLFxyXG5cclxuICAvLyBEUElfVmFyaWFibGVWYWx1ZU9wZXJhdGlvbiwgaGF2aW5nIHR5cGUgVmFyaWFibGVWYWx1ZU9wZXJhdGlvblByZXNNb2RlbFxyXG4gIFZhcmlhYmxlVmFsdWVPcGVyYXRpb24gPSAndmFyaWFibGVWYWx1ZU9wZXJhdGlvbicsXHJcblxyXG4gIC8vIERQSV9WYXJpYWJsZVZhbHVlT3BlcmF0aW9ucywgaGF2aW5nIHR5cGUgVmFyaWFibGVWYWx1ZU9wZXJhdGlvblByZXNNb2RlbFtdXHJcbiAgVmFyaWFibGVWYWx1ZU9wZXJhdGlvbnMgPSAndmFyaWFibGVWYWx1ZU9wZXJhdGlvbnMnLFxyXG5cclxuICAvLyBEUElfVGFibGVPcHRpb25zUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUYWJsZU9wdGlvbnNQcmVzTW9kZWxcclxuICBUYWJsZU9wdGlvbnNQcmVzTW9kZWwgPSAndGFibGVPcHRpb25zUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0NsaWVudEluZm9QcmVzTW9kZWwsIGhhdmluZyB0eXBlIENsaWVudEluZm9QcmVzTW9kZWxcclxuICBDbGllbnRJbmZvUHJlc01vZGVsID0gJ2NsaWVudEluZm9QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfVGFibGVhdUZpbGVJbmZvUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBUYWJsZWF1RmlsZUluZm9QcmVzTW9kZWxcclxuICBUYWJsZWF1RmlsZUluZm9QcmVzTW9kZWwgPSAndGFibGVhdUZpbGVJbmZvUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0RlYnVnZ2luZ0luZm9QcmVzTW9kZWwsIGhhdmluZyB0eXBlIERlYnVnZ2luZ0luZm9QcmVzTW9kZWxcclxuICBEZWJ1Z2dpbmdJbmZvUHJlc01vZGVsID0gJ2RlYnVnZ2luZ0luZm9QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfUnVubmluZ1RocmVhZEluZm9QcmVzTW9kZWwsIGhhdmluZyB0eXBlIFJ1bm5pbmdUaHJlYWRJbmZvUHJlc01vZGVsXHJcbiAgUnVubmluZ1RocmVhZEluZm9QcmVzTW9kZWwgPSAncnVubmluZ1RocmVhZEluZm9QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfQWJvdXREaWFsb2dJbmZvUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBBYm91dERpYWxvZ0luZm9QcmVzTW9kZWxcclxuICBBYm91dERpYWxvZ0luZm9QcmVzTW9kZWwgPSAnYWJvdXREaWFsb2dJbmZvUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0h5YnJpZFVJU2hvd2Nhc2VQcmVzTW9kZWwsIGhhdmluZyB0eXBlIEh5YnJpZFVJU2hvd2Nhc2VQcmVzTW9kZWxcclxuICBIeWJyaWRVSVNob3djYXNlUHJlc01vZGVsID0gJ2h5YnJpZFVpU2hvd2Nhc2VQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfTWVudUNvbmZpZ3VyYXRpb24sIGhhdmluZyB0eXBlIE1lbnVDb25maWd1cmF0aW9uUHJlc01vZGVsXHJcbiAgTWVudUNvbmZpZ3VyYXRpb24gPSAnbWVudUNvbmZpZ3VyYXRpb24nLFxyXG5cclxuICAvLyBEUElfTWVudUl0ZW0sIGhhdmluZyB0eXBlIE1lbnVJdGVtUHJlc01vZGVsXHJcbiAgTWVudUl0ZW0gPSAnbWVudUl0ZW0nLFxyXG5cclxuICAvLyBEUElfTWVudUl0ZW1Nb2RlbHMsIGhhdmluZyB0eXBlIE1lbnVJdGVtUHJlc01vZGVsW11cclxuICBNZW51SXRlbU1vZGVscyA9ICdtZW51SXRlbU1vZGVscycsXHJcblxyXG4gIC8vIERQSV9EZWZhdWx0VGV4dEZvcm1hdCwgaGF2aW5nIHR5cGUgRGVmYXVsdFRleHRGb3JtYXRQcmVzTW9kZWxcclxuICBEZWZhdWx0VGV4dEZvcm1hdCA9ICdkZWZhdWx0VGV4dEZvcm1hdCcsXHJcblxyXG4gIC8vIERQSV9NYXBCb3hTZXJ2ZXJJbmZvUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBNYXBCb3hTZXJ2ZXJJbmZvUHJlc01vZGVsXHJcbiAgTWFwQm94U2VydmVySW5mb1ByZXNNb2RlbCA9ICdtYXBib3hTZXJ2ZXJJbmZvUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1dNU1NlcnZlckluZm9QcmVzTW9kZWwsIGhhdmluZyB0eXBlIFdNU1NlcnZlckluZm9QcmVzTW9kZWxcclxuICBXTVNTZXJ2ZXJJbmZvUHJlc01vZGVsID0gJ3dtc1NlcnZlckluZm9QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfTWFwU291cmNlQ29uZmxpY3RQcmVzTW9kZWwsIGhhdmluZyB0eXBlIE1hcFNvdXJjZUNvbmZsaWN0UHJlc01vZGVsXHJcbiAgTWFwU291cmNlQ29uZmxpY3RQcmVzTW9kZWwgPSAnbWFwU291cmNlQ29uZmxpY3RQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRW51bWVyYXRlZFNldERpYWxvZ1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRW51bWVyYXRlZFNldERpYWxvZ1ByZXNNb2RlbFxyXG4gIEVudW1lcmF0ZWRTZXREaWFsb2dQcmVzTW9kZWwgPSAnZW51bWVyYXRlZFNldERpYWxvZ1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9FZGl0QWxpYXNlc0RpYWxvZywgaGF2aW5nIHR5cGUgRWRpdEFsaWFzZXNEaWFsb2dQcmVzTW9kZWxcclxuICBFZGl0QWxpYXNlc0RpYWxvZyA9ICdlZGl0QWxpYXNlc0RpYWxvZ1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BbGlhc2VzUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBBbGlhc2VzUHJlc01vZGVsXHJcbiAgQWxpYXNlc1ByZXNNb2RlbCA9ICdhbGlhc2VzUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0NsZWFyQWxpYXNlc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgQWxpYXNlc1ByZXNNb2RlbFxyXG4gIENsZWFyQWxpYXNlc1ByZXNNb2RlbCA9ICdjbGVhckFsaWFzZXNQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfTmV3QWxpYXNlc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgTmV3QWxpYXNlc1ByZXNNb2RlbFxyXG4gIE5ld0FsaWFzZXNQcmVzTW9kZWwgPSAnbmV3QWxpYXNlc1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BbGlhc1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgQWxpYXNQcmVzTW9kZWxcclxuICBBbGlhc1ByZXNNb2RlbCA9ICdhbGlhc1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BbGlhc0l0ZW0sIGhhdmluZyB0eXBlIEFsaWFzSXRlbVByZXNNb2RlbFxyXG4gIEFsaWFzSXRlbSA9ICdhbGlhc0l0ZW0nLFxyXG5cclxuICAvLyBEUElfRHVwbGljYXRlQWxpYXNJdGVtLCBoYXZpbmcgdHlwZSBBbGlhc0l0ZW1QcmVzTW9kZWxcclxuICBEdXBsaWNhdGVBbGlhc0l0ZW0gPSAnZHVwbGljYXRlQWxpYXNJdGVtJyxcclxuXHJcbiAgLy8gRFBJX0FsaWFzTGlzdCwgaGF2aW5nIHR5cGUgQWxpYXNJdGVtUHJlc01vZGVsW11cclxuICBBbGlhc0xpc3QgPSAnYWxpYXNMaXN0JyxcclxuXHJcbiAgLy8gRFBJX0FsaWFzUmVzdWx0SXRlbSwgaGF2aW5nIHR5cGUgQWxpYXNSZXN1bHRJdGVtUHJlc01vZGVsXHJcbiAgQWxpYXNSZXN1bHRJdGVtID0gJ2FsaWFzUmVzdWx0SXRlbScsXHJcblxyXG4gIC8vIERQSV9BbGlhc1Jlc3VsdExpc3QsIGhhdmluZyB0eXBlIEFsaWFzUmVzdWx0SXRlbVByZXNNb2RlbFtdXHJcbiAgQWxpYXNSZXN1bHRMaXN0ID0gJ2FsaWFzUmVzdWx0TGlzdCcsXHJcblxyXG4gIC8vIERQSV9BbGlhc1Jlc3VsdHMsIGhhdmluZyB0eXBlIEFsaWFzUmVzdWx0c1ByZXNNb2RlbFxyXG4gIEFsaWFzUmVzdWx0cyA9ICdhbGlhc1Jlc3VsdHMnLFxyXG5cclxuICAvLyBEUElfRWRpdFNldERpYWxvZ1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRWRpdFNldERpYWxvZ1ByZXNNb2RlbFxyXG4gIEVkaXRTZXREaWFsb2dQcmVzTW9kZWwgPSAnZWRpdFNldERpYWxvZ1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9Db25maXJtYXRpb25QcmVzTW9kZWwsIGhhdmluZyB0eXBlIENvbmZpcm1hdGlvblByZXNNb2RlbFxyXG4gIENvbmZpcm1hdGlvblByZXNNb2RlbCA9ICdjb25maXJtYXRpb25QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfTm90aWZpY2F0aW9uUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBOb3RpZmljYXRpb25QcmVzTW9kZWxcclxuICBOb3RpZmljYXRpb25QcmVzTW9kZWwgPSAnbm90aWZpY2F0aW9uUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1JldGFyZ2V0RGF0YVNvdXJjZURpYWxvZ1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgUmV0YXJnZXREYXRhU291cmNlRGlhbG9nUHJlc01vZGVsXHJcbiAgUmV0YXJnZXREYXRhU291cmNlRGlhbG9nUHJlc01vZGVsID0gJ3JldGFyZ2V0RGF0YXNvdXJjZURpYWxvZ1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9TaGFyZWRGaWx0ZXJQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNoYXJlZEZpbHRlclByZXNNb2RlbFxyXG4gIFNoYXJlZEZpbHRlclByZXNNb2RlbCA9ICdzaGFyZWRGaWx0ZXJQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfU2hhcmVkRmlsdGVyV29ya3NoZWV0SW5mbywgaGF2aW5nIHR5cGUgU2hhcmVkRmlsdGVyV29ya3NoZWV0SW5mb1ByZXNNb2RlbFxyXG4gIFNoYXJlZEZpbHRlcldvcmtzaGVldEluZm8gPSAnc2hhcmVkRmlsdGVyV29ya3NoZWV0SW5mbycsXHJcblxyXG4gIC8vIERQSV9TaGFyZWRGaWx0ZXJXb3Jrc2hlZXRJbmZvTGlzdCwgaGF2aW5nIHR5cGUgU2hhcmVkRmlsdGVyV29ya3NoZWV0SW5mb1ByZXNNb2RlbFtdXHJcbiAgU2hhcmVkRmlsdGVyV29ya3NoZWV0SW5mb0xpc3QgPSAnc2hhcmVkRmlsdGVyV29ya3NoZWV0SW5mb0xpc3QnLFxyXG5cclxuICAvLyBEUElfRmllbGRQaWNrZXJUcmVlUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBGaWVsZFBpY2tlclRyZWVQcmVzTW9kZWxcclxuICBGaWVsZFBpY2tlclRyZWVQcmVzTW9kZWwgPSAnZmllbGRQaWNrZXJUcmVlUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkUGlja2VyVHJlZVByZXNNb2RlbFNvdXJjZSwgaGF2aW5nIHR5cGUgRmllbGRQaWNrZXJUcmVlUHJlc01vZGVsXHJcbiAgRmllbGRQaWNrZXJUcmVlUHJlc01vZGVsU291cmNlID0gJ2ZpZWxkUGlja2VyVHJlZVByZXNNb2RlbFNvdXJjZScsXHJcblxyXG4gIC8vIERQSV9GaWVsZFBpY2tlclRyZWVQcmVzTW9kZWxUYXJnZXQsIGhhdmluZyB0eXBlIEZpZWxkUGlja2VyVHJlZVByZXNNb2RlbFxyXG4gIEZpZWxkUGlja2VyVHJlZVByZXNNb2RlbFRhcmdldCA9ICdmaWVsZFBpY2tlclRyZWVQcmVzTW9kZWxUYXJnZXQnLFxyXG5cclxuICAvLyBEUElfRXJyb3JJbmZvLCBoYXZpbmcgdHlwZSBFcnJvckluZm9QcmVzTW9kZWxcclxuICBFcnJvckluZm8gPSAnZXJyb3JJbmZvUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0N1c3RvbVNwbGl0UHJlc01vZGVsLCBoYXZpbmcgdHlwZSBDdXN0b21TcGxpdFByZXNNb2RlbFxyXG4gIEN1c3RvbVNwbGl0UHJlc01vZGVsID0gJ2N1c3RvbVNwbGl0UHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VTZXR1cCwgaGF2aW5nIHR5cGUgUGFnZVNldHVwUHJlc01vZGVsXHJcbiAgUGFnZVNldHVwID0gJ3BhZ2VTZXR1cCcsXHJcblxyXG4gIC8vIERQSV9TZXJ2ZXJDb25uZWN0U3RhdHVzLCBoYXZpbmcgdHlwZSBTZXJ2ZXJDb25uZWN0aW9uU3RhdHVzXHJcbiAgU2VydmVyQ29ubmVjdFN0YXR1cyA9ICdzZXJ2ZXJDb25uZWN0aW9uU3RhdHVzJyxcclxuXHJcbiAgLy8gRFBJX0dldEZpbHRlckl0ZW1zUmVzcG9uc2UsIGhhdmluZyB0eXBlIEdldEZpbHRlckl0ZW1zUmVzcG9uc2VQcmVzTW9kZWxcclxuICBHZXRGaWx0ZXJJdGVtc1Jlc3BvbnNlID0gJ2dldEZpbHRlckl0ZW1zUmVzcG9uc2UnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyU2VhcmNoUmVzcG9uc2UsIGhhdmluZyB0eXBlIEZpbHRlclNlYXJjaFJlc3BvbnNlUHJlc01vZGVsXHJcbiAgRmlsdGVyU2VhcmNoUmVzcG9uc2UgPSAnZmlsdGVyU2VhcmNoUmVzcG9uc2UnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyU2VhcmNoV2l0aEluZGV4UmVzcG9uc2UsIGhhdmluZyB0eXBlIEZpbHRlclNlYXJjaFdpdGhJbmRleFJlc3BvbnNlUHJlc01vZGVsXHJcbiAgRmlsdGVyU2VhcmNoV2l0aEluZGV4UmVzcG9uc2UgPSAnZmlsdGVyU2VhcmNoV2l0aEluZGV4UmVzcG9uc2UnLFxyXG5cclxuICAvLyBEUElfRmlsdGVyU2hvd0NoaWxkcmVuUmVzcG9uc2UsIGhhdmluZyB0eXBlIEZpbHRlclNob3dDaGlsZHJlblJlc3BvbnNlUHJlc01vZGVsXHJcbiAgRmlsdGVyU2hvd0NoaWxkcmVuUmVzcG9uc2UgPSAnZmlsdGVyU2hvd0NoaWxkcmVuUmVzcG9uc2UnLFxyXG5cclxuICAvLyBEUElfRWRpdERhdGFTZXJ2ZXJDb25uZWN0aW9uLCBoYXZpbmcgdHlwZSBFZGl0RGF0YVNlcnZlckNvbm5lY3Rpb25QcmVzTW9kZWxcclxuICBFZGl0RGF0YVNlcnZlckNvbm5lY3Rpb24gPSAnZWRpdERhdGFTZXJ2ZXJDb25uZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0ltYWdlc0VkaXQsIGhhdmluZyB0eXBlIEltYWdlc0VkaXRQcmVzTW9kZWxcclxuICBJbWFnZXNFZGl0ID0gJ2ltYWdlc0VkaXQnLFxyXG5cclxuICAvLyBEUElfQmFja2dyb3VuZEltYWdlLCBoYXZpbmcgdHlwZSBCYWNrZ3JvdW5kSW1hZ2VQcmVzTW9kZWxcclxuICBCYWNrZ3JvdW5kSW1hZ2UgPSAnYmFja2dyb3VuZEltYWdlJyxcclxuXHJcbiAgLy8gRFBJX0JhY2tncm91bmRJbWFnZXMsIGhhdmluZyB0eXBlIEJhY2tncm91bmRJbWFnZVByZXNNb2RlbFtdXHJcbiAgQmFja2dyb3VuZEltYWdlcyA9ICdiYWNrZ3JvdW5kSW1hZ2VzJyxcclxuXHJcbiAgLy8gRFBJX1ByZWRpY2F0ZSwgaGF2aW5nIHR5cGUgUHJlZGljYXRlUHJlc01vZGVsXHJcbiAgUHJlZGljYXRlID0gJ3ByZWRpY2F0ZScsXHJcblxyXG4gIC8vIERQSV9QcmVkaWNhdGVzLCBoYXZpbmcgdHlwZSBQcmVkaWNhdGVQcmVzTW9kZWxbXVxyXG4gIFByZWRpY2F0ZXMgPSAncHJlZGljYXRlcycsXHJcblxyXG4gIC8vIERQSV9JbWFnZXNFZGl0UmVzdWx0LCBoYXZpbmcgdHlwZSBJbWFnZXNFZGl0UmVzdWx0UHJlc01vZGVsXHJcbiAgSW1hZ2VzRWRpdFJlc3VsdCA9ICdpbWFnZXNFZGl0UmVzdWx0JyxcclxuXHJcbiAgLy8gRFBJX1NvcnREaWFsb2dQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNvcnREaWFsb2dQcmVzTW9kZWxcclxuICBTb3J0RGlhbG9nUHJlc01vZGVsID0gJ3NvcnREaWFsb2dQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfQ29tcG91bmRUYWJsZUNhbGMsIGhhdmluZyB0eXBlIENvbXBvdW5kVGFibGVDYWxjdWxhdGlvblByZXNNb2RlbFxyXG4gIENvbXBvdW5kVGFibGVDYWxjID0gJ2NvbXBvdW5kVGFibGVDYWxjdWxhdGlvblByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZUNhbGMsIGhhdmluZyB0eXBlIFRhYmxlQ2FsY3VsYXRpb25QcmVzTW9kZWxcclxuICBUYWJsZUNhbGMgPSAndGFibGVDYWxjdWxhdGlvblByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9UYWJsZUNhbGNzLCBoYXZpbmcgdHlwZSBUYWJsZUNhbGN1bGF0aW9uUHJlc01vZGVsW11cclxuICBUYWJsZUNhbGNzID0gJ3RhYmxlQ2FsY3VsYXRpb25QcmVzTW9kZWxzJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlQ2FsY0lkZW50aWZpZXIsIGhhdmluZyB0eXBlIFRhYmxlQ2FsY0lkZW50aWZpZXJQcmVzTW9kZWxcclxuICBUYWJsZUNhbGNJZGVudGlmaWVyID0gJ3RhYmxlQ2FsY0lkZW50aWZpZXInLFxyXG5cclxuICAvLyBEUElfTmVzdGVkVGFibGVDYWxjSW5mbywgaGF2aW5nIHR5cGUgTmVzdGVkVGFibGVDYWxjSW5mb1ByZXNNb2RlbFxyXG4gIE5lc3RlZFRhYmxlQ2FsY0luZm8gPSAnbmVzdGVkVGFibGVDYWxjSW5mbycsXHJcblxyXG4gIC8vIERQSV9OZXN0ZWRUYWJsZUNhbGNJbmZvcywgaGF2aW5nIHR5cGUgTmVzdGVkVGFibGVDYWxjSW5mb1ByZXNNb2RlbFtdXHJcbiAgTmVzdGVkVGFibGVDYWxjSW5mb3MgPSAnbmVzdGVkVGFibGVDYWxjSW5mb3MnLFxyXG5cclxuICAvLyBEUElfT3JkZXJpbmcsIGhhdmluZyB0eXBlIFRhYmxlQ2FsY09yZGVyaW5nUHJlc01vZGVsXHJcbiAgT3JkZXJpbmcgPSAndGFibGVDYWxjT3JkZXJpbmdQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfQ3VtdWxhdGl2ZSwgaGF2aW5nIHR5cGUgQ3VtdWxhdGl2ZVRhYmxlQ2FsY1ByZXNNb2RlbFxyXG4gIEN1bXVsYXRpdmUgPSAnY3VtdWxhdGl2ZVRhYmxlQ2FsY1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9SZWZlcmVuY2VPcHRpb25zLCBoYXZpbmcgdHlwZSBUYWJsZUNhbGNSZWZlcmVuY2VPcHRpb25zUHJlc01vZGVsXHJcbiAgUmVmZXJlbmNlT3B0aW9ucyA9ICd0YWJsZUNhbGNSZWZlcmVuY2VPcHRpb25zUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0RpZmZlcmVuY2UsIGhhdmluZyB0eXBlIERpZmZlcmVuY2VUYWJsZUNhbGNQcmVzTW9kZWxcclxuICBEaWZmZXJlbmNlID0gJ2RpZmZlcmVuY2VUYWJsZUNhbGNQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfV2luZG93LCBoYXZpbmcgdHlwZSBXaW5kb3dUYWJsZUNhbGNQcmVzTW9kZWxcclxuICBXaW5kb3cgPSAnd2luZG93VGFibGVDYWxjUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1BlcmNlbnRUb3RhbCwgaGF2aW5nIHR5cGUgUGVyY2VudFRvdGFsVGFibGVDYWxjUHJlc01vZGVsXHJcbiAgUGVyY2VudFRvdGFsID0gJ3BlcmNlbnRUb3RhbFRhYmxlQ2FsY1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9SYW5rLCBoYXZpbmcgdHlwZSBSYW5rVGFibGVDYWxjUHJlc01vZGVsXHJcbiAgUmFuayA9ICdyYW5rVGFibGVDYWxjUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0N1c3RvbSwgaGF2aW5nIHR5cGUgQ3VzdG9tVGFibGVDYWxjUHJlc01vZGVsXHJcbiAgQ3VzdG9tID0gJ2N1c3RvbVRhYmxlQ2FsY1ByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9XZWJEYXRhVXJsLCBoYXZpbmcgdHlwZSBXZWJEYXRhVXJsUHJlc01vZGVsXHJcbiAgV2ViRGF0YVVybCA9ICd3ZWJEYXRhVXJsJyxcclxuXHJcbiAgLy8gRFBJX1Zpc2l0ZWRXZWJEYXRhQ29ubmVjdG9ycywgaGF2aW5nIHR5cGUgV2ViRGF0YVVybFByZXNNb2RlbFtdXHJcbiAgVmlzaXRlZFdlYkRhdGFDb25uZWN0b3JzID0gJ3Zpc2l0ZWRXZWJEYXRhQ29ubmVjdG9ycycsXHJcblxyXG4gIC8vIERQSV9XZWJEYXRhU2Vzc2lvblVybHMsIGhhdmluZyB0eXBlIFdlYkRhdGFVcmxQcmVzTW9kZWxbXVxyXG4gIFdlYkRhdGFTZXNzaW9uVXJscyA9ICd3ZWJEYXRhU2Vzc2lvblVybHMnLFxyXG5cclxuICAvLyBEUElfV2ViRGF0YVVybHMsIGhhdmluZyB0eXBlIFdlYkRhdGFVcmxQcmVzTW9kZWxbXVxyXG4gIFdlYkRhdGFVcmxzID0gJ3dlYkRhdGFVcmxzJyxcclxuXHJcbiAgLy8gRFBJX0ZpZWxkUGlja2VyLCBoYXZpbmcgdHlwZSBGaWVsZFBpY2tlclByZXNNb2RlbFxyXG4gIEZpZWxkUGlja2VyID0gJ2ZpZWxkUGlja2VyJyxcclxuXHJcbiAgLy8gRFBJX0Rlc2NyaWJlRmllbGQsIGhhdmluZyB0eXBlIERlc2NyaWJlRmllbGRQcmVzTW9kZWxcclxuICBEZXNjcmliZUZpZWxkID0gJ2Rlc2NyaWJlRmllbGQnLFxyXG5cclxuICAvLyBEUElfU2hvd0RhdGFQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNob3dEYXRhUHJlc01vZGVsXHJcbiAgU2hvd0RhdGFQcmVzTW9kZWwgPSAnc2hvd0RhdGFQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRGF0YVRhYmxlUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBTaG93RGF0YVRhYmxlUHJlc01vZGVsXHJcbiAgRGF0YVRhYmxlUHJlc01vZGVsID0gJ2RhdGFUYWJsZVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9EYXRhVGFibGVQcmVzTW9kZWxzLCBoYXZpbmcgdHlwZSBTaG93RGF0YVRhYmxlUHJlc01vZGVsW11cclxuICBEYXRhVGFibGVQcmVzTW9kZWxzID0gJ2RhdGFUYWJsZVByZXNNb2RlbHMnLFxyXG5cclxuICAvLyBEUElfU3VtbWFyeVRhYmxlUHJlc01vZGVscywgaGF2aW5nIHR5cGUgU2hvd0RhdGFUYWJsZVByZXNNb2RlbFtdXHJcbiAgU3VtbWFyeVRhYmxlUHJlc01vZGVscyA9ICdzdW1tYXJ5VGFibGVQcmVzTW9kZWxzJyxcclxuXHJcbiAgLy8gRFBJX1JlZnJlc2hBbGxFeHRyYWN0c1ByZXNNb2RlbCwgaGF2aW5nIHR5cGUgUmVmcmVzaEFsbEV4dHJhY3RzUHJlc01vZGVsXHJcbiAgUmVmcmVzaEFsbEV4dHJhY3RzUHJlc01vZGVsID0gJ3JlZmVzaEFsbEV4dHJhY3RzUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX1JlZnJlc2hFeHRyYWN0RGF0YVNvdXJjZVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgUmVmcmVzaEV4dHJhY3REYXRhU291cmNlUHJlc01vZGVsXHJcbiAgUmVmcmVzaEV4dHJhY3REYXRhU291cmNlUHJlc01vZGVsID0gJ3JlZnJlc2hFeHRyYWN0RGF0YXNvdXJjZVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9SZWZyZXNoRXh0cmFjdERhdGFTb3VyY2VMaXN0LCBoYXZpbmcgdHlwZSBSZWZyZXNoRXh0cmFjdERhdGFTb3VyY2VQcmVzTW9kZWxbXVxyXG4gIFJlZnJlc2hFeHRyYWN0RGF0YVNvdXJjZUxpc3QgPSAncmVmcmVzaEV4dHJhY3REYXRhc291cmNlTGlzdCcsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0SGlzdG9yeVByZXNNb2RlbCwgaGF2aW5nIHR5cGUgRXh0cmFjdEhpc3RvcnlQcmVzTW9kZWxcclxuICBFeHRyYWN0SGlzdG9yeVByZXNNb2RlbCA9ICdleHRyYWN0SGlzdG9yeVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9FeHRyYWN0SGlzdG9yeUl0ZW1QcmVzTW9kZWwsIGhhdmluZyB0eXBlIEV4dHJhY3RIaXN0b3J5SXRlbVByZXNNb2RlbFxyXG4gIEV4dHJhY3RIaXN0b3J5SXRlbVByZXNNb2RlbCA9ICdleHRyYWN0SGlzdG9yeUl0ZW0nLFxyXG5cclxuICAvLyBEUElfRXh0cmFjdEhpc3RvcnlMaXN0LCBoYXZpbmcgdHlwZSBFeHRyYWN0SGlzdG9yeUl0ZW1QcmVzTW9kZWxbXVxyXG4gIEV4dHJhY3RIaXN0b3J5TGlzdCA9ICdleHRyYWN0SGlzdG9yeUxpc3QnLFxyXG5cclxuICAvLyBEUElfRGF0YVByb3ZpZGVyUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBEYXRhUHJvdmlkZXJQcmVzTW9kZWxcclxuICBEYXRhUHJvdmlkZXJQcmVzTW9kZWwgPSAnZGF0YVByb3ZpZGVyUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdEl0ZW0sIGhhdmluZyB0eXBlIEZvcm1hdEl0ZW1QcmVzTW9kZWxcclxuICBGb3JtYXRJdGVtID0gJ2Zvcm1hdEl0ZW0nLFxyXG5cclxuICAvLyBEUElfRm9ybWF0SXRlbUxpc3QsIGhhdmluZyB0eXBlIEZvcm1hdEl0ZW1QcmVzTW9kZWxbXVxyXG4gIEZvcm1hdEl0ZW1MaXN0ID0gJ2Zvcm1hdEl0ZW1MaXN0JyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdENvbnRhaW5lciwgaGF2aW5nIHR5cGUgRm9ybWF0Q29udGFpbmVyUHJlc01vZGVsXHJcbiAgRm9ybWF0Q29udGFpbmVyID0gJ2Zvcm1hdENvbnRhaW5lcicsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXRQYW5lLCBoYXZpbmcgdHlwZSBGb3JtYXRQYW5lUHJlc01vZGVsXHJcbiAgRm9ybWF0UGFuZSA9ICdmb3JtYXRQYW5lJyxcclxuXHJcbiAgLy8gRFBJX0Zvcm1hdFNlY3Rpb24sIGhhdmluZyB0eXBlIEZvcm1hdFNlY3Rpb25QcmVzTW9kZWxcclxuICBGb3JtYXRTZWN0aW9uID0gJ2Zvcm1hdFNlY3Rpb24nLFxyXG5cclxuICAvLyBEUElfQ29sbGFwc2libGVTZWN0aW9uLCBoYXZpbmcgdHlwZSBDb2xsYXBzaWJsZVNlY3Rpb25QcmVzTW9kZWxcclxuICBDb2xsYXBzaWJsZVNlY3Rpb24gPSAnY29sbGFwc2libGVTZWN0aW9uJyxcclxuXHJcbiAgLy8gRFBJX0NvbXBvc2l0ZUNvbnRhaW5lciwgaGF2aW5nIHR5cGUgQ29tcG9zaXRlQ29udGFpbmVyUHJlc01vZGVsXHJcbiAgQ29tcG9zaXRlQ29udGFpbmVyID0gJ2NvbXBvc2l0ZUNvbnRhaW5lcicsXHJcblxyXG4gIC8vIERQSV9Vbml0Q29udGFpbmVyLCBoYXZpbmcgdHlwZSBVbml0Q29udGFpbmVyUHJlc01vZGVsXHJcbiAgVW5pdENvbnRhaW5lciA9ICd1bml0Q29udGFpbmVyJyxcclxuXHJcbiAgLy8gRFBJX1RhYkdyb3VwLCBoYXZpbmcgdHlwZSBUYWJHcm91cFByZXNNb2RlbFxyXG4gIFRhYkdyb3VwID0gJ3RhYkdyb3VwJyxcclxuXHJcbiAgLy8gRFBJX1RhYiwgaGF2aW5nIHR5cGUgVGFiUHJlc01vZGVsXHJcbiAgVGFiID0gJ3RhYicsXHJcblxyXG4gIC8vIERQSV9Gb3JtYXRDb250cm9sLCBoYXZpbmcgdHlwZSBGb3JtYXRDb250cm9sUHJlc01vZGVsXHJcbiAgRm9ybWF0Q29udHJvbCA9ICdmb3JtYXRDb250cm9sJyxcclxuXHJcbiAgLy8gRFBJX1RleHRDb250cm9sLCBoYXZpbmcgdHlwZSBUZXh0Q29udHJvbFByZXNNb2RlbFxyXG4gIFRleHRDb250cm9sID0gJ3RleHRDb250cm9sJyxcclxuXHJcbiAgLy8gRFBJX051bWVyaWNDb250cm9sLCBoYXZpbmcgdHlwZSBOdW1lcmljQ29udHJvbFByZXNNb2RlbFxyXG4gIE51bWVyaWNDb250cm9sID0gJ251bWVyaWNDb250cm9sJyxcclxuXHJcbiAgLy8gRFBJX0NvbG9yQ29udHJvbCwgaGF2aW5nIHR5cGUgQ29sb3JDb250cm9sUHJlc01vZGVsXHJcbiAgQ29sb3JDb250cm9sID0gJ2NvbG9yQ29udHJvbCcsXHJcblxyXG4gIC8vIERQSV9Ub2dnbGVDb250cm9sLCBoYXZpbmcgdHlwZSBUb2dnbGVDb250cm9sUHJlc01vZGVsXHJcbiAgVG9nZ2xlQ29udHJvbCA9ICd0b2dnbGVDb250cm9sJyxcclxuXHJcbiAgLy8gRFBJX1NlbGVjdG9yQ29udHJvbCwgaGF2aW5nIHR5cGUgU2VsZWN0b3JDb250cm9sUHJlc01vZGVsXHJcbiAgU2VsZWN0b3JDb250cm9sID0gJ2VudW1TdHJpbmdTdHlsZScsXHJcblxyXG4gIC8vIERQSV9TdGF0c0FuYWx5dGljU3BlYywgaGF2aW5nIHR5cGUgU3RhdHNBbmFseXRpY1NwZWNQcmVzTW9kZWxcclxuICBTdGF0c0FuYWx5dGljU3BlYyA9ICdzdGF0c0FuYWx5dGljU3BlYycsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyU3BlYywgaGF2aW5nIHR5cGUgQ2x1c3RlclNwZWNQcmVzTW9kZWxcclxuICBDbHVzdGVyU3BlYyA9ICdjbHVzdGVyaW5nU3BlYycsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyUmVzdWx0cywgaGF2aW5nIHR5cGUgQ2x1c3RlclJlc3VsdHNQcmVzTW9kZWxcclxuICBDbHVzdGVyUmVzdWx0cyA9ICdjbHVzdGVyUmVzdWx0cycsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyVW5pdCwgaGF2aW5nIHR5cGUgQ2x1c3RlclVuaXRQcmVzTW9kZWxcclxuICBDbHVzdGVyVW5pdCA9ICdjbHVzdGVyJyxcclxuXHJcbiAgLy8gRFBJX0NsdXN0ZXJVbml0cywgaGF2aW5nIHR5cGUgQ2x1c3RlclVuaXRQcmVzTW9kZWxbXVxyXG4gIENsdXN0ZXJVbml0cyA9ICdjbHVzdGVyVW5pdFByZXNNb2RlbHMnLFxyXG5cclxuICAvLyBEUElfQ2x1c3RlckZpZWxkQU5PVkEsIGhhdmluZyB0eXBlIENsdXN0ZXJGaWVsZEFOT1ZBUHJlc01vZGVsXHJcbiAgQ2x1c3RlckZpZWxkQU5PVkEgPSAnY2x1c3RlckZpZWxkQW5vdmEnLFxyXG5cclxuICAvLyBEUElfQ2x1c3RlckZpZWxkQU5PVkFUYWJsZSwgaGF2aW5nIHR5cGUgQ2x1c3RlckZpZWxkQU5PVkFQcmVzTW9kZWxbXVxyXG4gIENsdXN0ZXJGaWVsZEFOT1ZBVGFibGUgPSAnY2x1c3RlckZpZWxkQW5vdmFUYWJsZVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyRWRpdCwgaGF2aW5nIHR5cGUgQ2x1c3RlckVkaXRQcmVzTW9kZWxcclxuICBDbHVzdGVyRWRpdCA9ICdjbHVzdGVyRWRpdFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9DbHVzdGVyRGVzY3JpcHRpb24sIGhhdmluZyB0eXBlIENsdXN0ZXJEZXNjcmliZVByZXNNb2RlbFxyXG4gIENsdXN0ZXJEZXNjcmlwdGlvbiA9ICdjbHVzdGVyRGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBEUElfT3V0bGllclJlc3VsdHMsIGhhdmluZyB0eXBlIE91dGxpZXJSZXN1bHRzUHJlc01vZGVsXHJcbiAgT3V0bGllclJlc3VsdHMgPSAnb3V0bGllclJlc3VsdHMnLFxyXG5cclxuICAvLyBEUElfQ29ubmVjdFRvRGF0YVNlcnZlclNvdXJjZVJlc3VsdCwgaGF2aW5nIHR5cGUgQ29ubmVjdFRvRGF0YVNlcnZlclNvdXJjZVJlc3VsdFByZXNNb2RlbFxyXG4gIENvbm5lY3RUb0RhdGFTZXJ2ZXJTb3VyY2VSZXN1bHQgPSAnY29ubmVjdFRvRGF0YVNlcnZlclNvdXJjZVJlc3VsdCcsXHJcblxyXG4gIC8vIERQSV9EYXRhU2VydmVyQ29ubmVjdGlvblJldHVyblN0YXR1cywgaGF2aW5nIHR5cGUgQ29ubmVjdFRvRGF0YVNlcnZlclNvdXJjZVJlc3VsdFByZXNNb2RlbFxyXG4gIERhdGFTZXJ2ZXJDb25uZWN0aW9uUmV0dXJuU3RhdHVzID0gJ2RhdGFTZXJ2ZXJDb25uZWN0aW9uUmV0dXJuU3RhdHVzJyxcclxuXHJcbiAgLy8gRFBJX1dlYlF1YW50aXRhdGl2ZUNvbG9yRGlhbG9nLCBoYXZpbmcgdHlwZSBXZWJRdWFudGl0YXRpdmVDb2xvckRpYWxvZ1ByZXNNb2RlbFxyXG4gIFdlYlF1YW50aXRhdGl2ZUNvbG9yRGlhbG9nID0gJ3F1YW50aXRhdGl2ZUNvbG9yRGlhbG9nJyxcclxuXHJcbiAgLy8gRFBJX1dlYkNhdGVnb3JpY2FsQ29sb3JEaWFsb2csIGhhdmluZyB0eXBlIFdlYkNhdGVnb3JpY2FsQ29sb3JEaWFsb2dQcmVzTW9kZWxcclxuICBXZWJDYXRlZ29yaWNhbENvbG9yRGlhbG9nID0gJ2NhdGVnb3JpY2FsQ29sb3JEaWFsb2cnLFxyXG5cclxuICAvLyBEUElfV2ViU2F2ZURhdGFzb3VyY2VEaWFsb2csIGhhdmluZyB0eXBlIFdlYlNhdmVEYXRhc291cmNlRGlhbG9nUHJlc01vZGVsXHJcbiAgV2ViU2F2ZURhdGFzb3VyY2VEaWFsb2cgPSAnc2F2ZURhdGFzb3VyY2VEaWFsb2cnLFxyXG5cclxuICAvLyBEUElfQm9yZGVyU3R5bGVTcGVjLCBoYXZpbmcgdHlwZSBTdHlsZVNwZWNQcmVzTW9kZWxcclxuICBCb3JkZXJTdHlsZVNwZWMgPSAnYm9yZGVyU3R5bGVTcGVjJyxcclxuXHJcbiAgLy8gRFBJX0hhbG9TdHlsZVNwZWMsIGhhdmluZyB0eXBlIFN0eWxlU3BlY1ByZXNNb2RlbFxyXG4gIEhhbG9TdHlsZVNwZWMgPSAnaGFsb1N0eWxlU3BlYycsXHJcblxyXG4gIC8vIERQSV9NYXJrc0NvbG9yVWJlckVmZmVjdHMsIGhhdmluZyB0eXBlIE1hcmtzQ29sb3JVYmVyRWZmZWN0c1ByZXNNb2RlbFxyXG4gIE1hcmtzQ29sb3JVYmVyRWZmZWN0cyA9ICdtYXJrc0NvbG9yVWJlckVmZmVjdHMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxDb2xvckVuY29kaW5nLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbENvbG9yRW5jb2RpbmdQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbENvbG9yRW5jb2RpbmcgPSAnY2F0ZWdvcmljYWxDb2xvckVuY29kaW5nJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsU2hhcGVFbmNvZGluZywgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxTaGFwZUVuY29kaW5nUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxTaGFwZUVuY29kaW5nID0gJ2NhdGVnb3JpY2FsU2hhcGVFbmNvZGluZycsXHJcblxyXG4gIC8vIERQSV9TaGFwZVBhbGV0dGVQcmVzTW9kZWwsIGhhdmluZyB0eXBlIFNoYXBlUGFsZXR0ZVByZXNNb2RlbFxyXG4gIFNoYXBlUGFsZXR0ZVByZXNNb2RlbCA9ICdzaGFwZVBhbGV0dGVQcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfU2hhcGVQYWxldHRlUHJlc01vZGVscywgaGF2aW5nIHR5cGUgU2hhcGVQYWxldHRlUHJlc01vZGVsW11cclxuICBTaGFwZVBhbGV0dGVQcmVzTW9kZWxzID0gJ3NoYXBlUGFsZXR0ZVByZXNNb2RlbHMnLFxyXG5cclxuICAvLyBEUElfRGF0YVNvdXJjZURhdGVQcm9wZXJ0aWVzLCBoYXZpbmcgdHlwZSBEYXRhU291cmNlRGF0ZVByb3BlcnRpZXNQcmVzTW9kZWxcclxuICBEYXRhU291cmNlRGF0ZVByb3BlcnRpZXMgPSAnZGF0YXNvdXJjZURhdGVQcm9wZXJ0aWVzJyxcclxuXHJcbiAgLy8gRFBJX0RhdGVQcm9wZXJ0aWVzRGF0ZUZvcm1hdCwgaGF2aW5nIHR5cGUgRGF0ZVByb3BlcnRpZXNEYXRlRm9ybWF0UHJlc01vZGVsXHJcbiAgRGF0ZVByb3BlcnRpZXNEYXRlRm9ybWF0ID0gJ2RhdGVQcm9wZXJ0aWVzRGF0ZUZvcm1hdCcsXHJcblxyXG4gIC8vIERQSV9EYXRlUHJvcGVydGllc0RhdGVGb3JtYXRzLCBoYXZpbmcgdHlwZSBEYXRlUHJvcGVydGllc0RhdGVGb3JtYXRQcmVzTW9kZWxbXVxyXG4gIERhdGVQcm9wZXJ0aWVzRGF0ZUZvcm1hdHMgPSAnZGF0ZVByb3BlcnRpZXNEYXRlRm9ybWF0cycsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlTZWxlY3QsIGhhdmluZyB0eXBlIEhpZXJhcmNoeVNlbGVjdE1vZGVsXHJcbiAgSGllcmFyY2h5U2VsZWN0ID0gJ2hpZXJhcmNoeVNlbGVjdCcsXHJcblxyXG4gIC8vIERQSV9IaWVyYXJjaHlTZWxlY3RNZW1iZXIsIGhhdmluZyB0eXBlIEhpZXJhcmNoeVNlbGVjdE1lbWJlclByZXNNb2RlbFxyXG4gIEhpZXJhcmNoeVNlbGVjdE1lbWJlciA9ICdoaWVyYXJjaHlTZWxlY3RNZW1iZXInLFxyXG5cclxuICAvLyBEUElfSGllcmFyY2h5U2VsZWN0TWVtYmVyTGlzdCwgaGF2aW5nIHR5cGUgSGllcmFyY2h5U2VsZWN0TWVtYmVyUHJlc01vZGVsW11cclxuICBIaWVyYXJjaHlTZWxlY3RNZW1iZXJMaXN0ID0gJ2hpZXJhcmNoeVNlbGVjdE1lbWJlckxpc3QnLFxyXG5cclxuICAvLyBEUElfSGllcmFyY2h5U2V0RGVmYXVsdE1lbWJlciwgaGF2aW5nIHR5cGUgSGllcmFyY2h5U2V0RGVmYXVsdE1lbWJlclByZXNNb2RlbFxyXG4gIEhpZXJhcmNoeVNldERlZmF1bHRNZW1iZXIgPSAnaGllcmFyY2h5U2V0RGVmYXVsdE1lbWJlcicsXHJcblxyXG4gIC8vIERQSV9TZW1pU3RydWN0U2NoZW1hLCBoYXZpbmcgdHlwZSBTZW1pU3RydWN0U2NoZW1hUHJlc01vZGVsXHJcbiAgU2VtaVN0cnVjdFNjaGVtYSA9ICdzZW1pU3RydWN0U2NoZW1hJyxcclxuXHJcbiAgLy8gRFBJX1NlbWlTdHJ1Y3RTY2hlbWFNZW1iZXIsIGhhdmluZyB0eXBlIFNlbWlTdHJ1Y3RTY2hlbWFNZW1iZXJQcmVzTW9kZWxcclxuICBTZW1pU3RydWN0U2NoZW1hTWVtYmVyID0gJ3NlbWlTdHJ1Y3RTY2hlbWFNZW1iZXInLFxyXG5cclxuICAvLyBEUElfU2VtaVN0cnVjdFNjaGVtYU1lbWJlckxpc3QsIGhhdmluZyB0eXBlIFNlbWlTdHJ1Y3RTY2hlbWFNZW1iZXJQcmVzTW9kZWxbXVxyXG4gIFNlbWlTdHJ1Y3RTY2hlbWFNZW1iZXJMaXN0ID0gJ3NlbWlTdHJ1Y3RTY2hlbWFNZW1iZXJMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlckVkaXRJbmZvLCBoYXZpbmcgdHlwZSBQYXJhbWV0ZXJFZGl0SW5mb1ByZXNNb2RlbFxyXG4gIFBhcmFtZXRlckVkaXRJbmZvID0gJ3BhcmFtZXRlckVkaXRJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1Byb2R1Y3RQYXJhbWV0ZXJJbmZvLCBoYXZpbmcgdHlwZSBQcm9kdWN0UGFyYW1ldGVySW5mb1ByZXNNb2RlbFxyXG4gIFByb2R1Y3RQYXJhbWV0ZXJJbmZvID0gJ3Byb2R1Y3RQYXJhbWV0ZXJJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0NhcHRpb25lZERhdGFzb3VyY2VGaWVsZCwgaGF2aW5nIHR5cGUgQ2FwdGlvbmVkRGF0YXNvdXJjZUluZm9QcmVzTW9kZWxcclxuICBDYXB0aW9uZWREYXRhc291cmNlRmllbGQgPSAnY2FwdGlvbmVkRGF0YXNvdXJjZUZpZWxkJyxcclxuXHJcbiAgLy8gRFBJX0NhcHRpb25lZERhdGFzb3VyY2VGaWVsZHMsIGhhdmluZyB0eXBlIENhcHRpb25lZERhdGFzb3VyY2VJbmZvUHJlc01vZGVsW11cclxuICBDYXB0aW9uZWREYXRhc291cmNlRmllbGRzID0gJ2NhcHRpb25lZERhdGFzb3VyY2VGaWVsZHMnLFxyXG5cclxuICAvLyBEUElfRWRpdGVkUGFyYW1ldGVyUmFuZ2VEb21haW4sIGhhdmluZyB0eXBlIFBhcmFtZXRlclJhbmdlRG9tYWluUHJlc01vZGVsXHJcbiAgRWRpdGVkUGFyYW1ldGVyUmFuZ2VEb21haW4gPSAnZWRpdGVkUGFyYW1ldGVyUmFuZ2VEb21haW4nLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyUmFuZ2VEb21haW4sIGhhdmluZyB0eXBlIFBhcmFtZXRlclJhbmdlRG9tYWluUHJlc01vZGVsXHJcbiAgUGFyYW1ldGVyUmFuZ2VEb21haW4gPSAncGFyYW1ldGVyUmFuZ2VEb21haW4nLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyTGlzdERvbWFpbiwgaGF2aW5nIHR5cGUgUGFyYW1ldGVyTGlzdERvbWFpblByZXNNb2RlbFxyXG4gIFBhcmFtZXRlckxpc3REb21haW4gPSAncGFyYW1ldGVyTGlzdERvbWFpbicsXHJcblxyXG4gIC8vIERQSV9QYXJhbWV0ZXJMaXN0RG9tYWluTWVtYmVyLCBoYXZpbmcgdHlwZSBQYXJhbWV0ZXJMaXN0RG9tYWluTWVtYmVyUHJlc01vZGVsXHJcbiAgUGFyYW1ldGVyTGlzdERvbWFpbk1lbWJlciA9ICdwYXJhbWV0ZXJMaXN0RG9tYWluTWVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX1BhcmFtZXRlckxpc3REb21haW5NZW1iZXJzLCBoYXZpbmcgdHlwZSBQYXJhbWV0ZXJMaXN0RG9tYWluTWVtYmVyUHJlc01vZGVsW11cclxuICBQYXJhbWV0ZXJMaXN0RG9tYWluTWVtYmVycyA9ICdwYXJhbWV0ZXJMaXN0RG9tYWluTWVtYmVycycsXHJcblxyXG4gIC8vIERQSV9JbmRleGVkRG9tYWluTWVtYmVyLCBoYXZpbmcgdHlwZSBJbmRleGVkRG9tYWluTWVtYmVyUHJlc01vZGVsXHJcbiAgSW5kZXhlZERvbWFpbk1lbWJlciA9ICdpbmRleGVkRG9tYWluTWVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX0luZGV4ZWREb21haW5NZW1iZXJzLCBoYXZpbmcgdHlwZSBJbmRleGVkRG9tYWluTWVtYmVyUHJlc01vZGVsW11cclxuICBJbmRleGVkRG9tYWluTWVtYmVycyA9ICdpbmRleGVkRG9tYWluTWVtYmVycycsXHJcblxyXG4gIC8vIERQSV9OZXdJbmRleGVkRG9tYWluTWVtYmVycywgaGF2aW5nIHR5cGUgSW5kZXhlZERvbWFpbk1lbWJlclByZXNNb2RlbFtdXHJcbiAgTmV3SW5kZXhlZERvbWFpbk1lbWJlcnMgPSAnbmV3SW5kZXhlZERvbWFpbk1lbWJlcnMnLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyTGlzdERvbWFpbkRpZmYsIGhhdmluZyB0eXBlIHBhcmFtZXRlci1saXN0LWRvbWFpbi1kaWZmXHJcbiAgUGFyYW1ldGVyTGlzdERvbWFpbkRpZmYgPSAncGFyYW1ldGVyTGlzdERvbWFpbkRpZmYnLFxyXG5cclxuICAvLyBEUElfSW5kZXhSYW5nZSwgaGF2aW5nIHR5cGUgSW5kZXhSYW5nZVByZXNNb2RlbFxyXG4gIEluZGV4UmFuZ2UgPSAnaW5kZXhSYW5nZScsXHJcblxyXG4gIC8vIERQSV9JbmRleFJhbmdlcywgaGF2aW5nIHR5cGUgSW5kZXhSYW5nZVByZXNNb2RlbFtdXHJcbiAgSW5kZXhSYW5nZXMgPSAnaW5kZXhSYW5nZXMnLFxyXG5cclxuICAvLyBEUElfQ2F0ZWdvcmljYWxGaW5kLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEZpbmRQcmVzTW9kZWxcclxuICBDYXRlZ29yaWNhbEZpbmQgPSAnY2F0ZWdvcmljYWxGaW5kJyxcclxuXHJcbiAgLy8gRFBJX0NhcHRpb25lZERhdGFWYWx1ZSwgaGF2aW5nIHR5cGUgQ2FwdGlvbmVkRGF0YVZhbHVlUHJlc01vZGVsXHJcbiAgQ2FwdGlvbmVkRGF0YVZhbHVlID0gJ2NhcHRpb25lZERhdGFWYWx1ZScsXHJcblxyXG4gIC8vIERQSV9TZWxlY3RlZFZhbHVlQ2FwdGlvbiwgaGF2aW5nIHR5cGUgQ2FwdGlvbmVkRGF0YVZhbHVlUHJlc01vZGVsXHJcbiAgU2VsZWN0ZWRWYWx1ZUNhcHRpb24gPSAnc2VsZWN0ZWRWYWx1ZUNhcHRpb24nLFxyXG5cclxuICAvLyBEUElfRGF0YVZhbHVlQ2FwdGlvbkxpc3QsIGhhdmluZyB0eXBlIENhcHRpb25lZERhdGFWYWx1ZVByZXNNb2RlbFtdXHJcbiAgRGF0YVZhbHVlQ2FwdGlvbkxpc3QgPSAnZGF0YVZhbHVlQ2F0cGlvbkxpc3QnLFxyXG5cclxuICAvLyBEUElfUmFuZ2VEYXRhVmFsdWUsIGhhdmluZyB0eXBlIFJhbmdlRGF0YVZhbHVlUHJlc01vZGVsXHJcbiAgUmFuZ2VEYXRhVmFsdWUgPSAncmFuZ2VEYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfUGFyYW1ldGVyUmFuZ2VEYXRhVmFsdWUsIGhhdmluZyB0eXBlIFJhbmdlRGF0YVZhbHVlUHJlc01vZGVsXHJcbiAgUGFyYW1ldGVyUmFuZ2VEYXRhVmFsdWUgPSAncGFyYW1ldGVyUmFuZ2VEYXRhVmFsdWUnLFxyXG5cclxuICAvLyBEUElfRGF0YVZhbHVlUmFuZ2VDYXB0aW9ucywgaGF2aW5nIHR5cGUgRGF0YVZhbHVlUmFuZ2VDYXB0aW9uc1ByZXNNb2RlbFxyXG4gIERhdGFWYWx1ZVJhbmdlQ2FwdGlvbnMgPSAnZGF0YVZhbHVlUmFuZ2VDYXB0aW9ucycsXHJcblxyXG4gIC8vIERQSV9JbmRlcGVuZGVudERpbWVuc2lvbiwgaGF2aW5nIHR5cGUgSW5kZXBlbmRlbnREaW1lbnNpb25QcmVzTW9kZWxcclxuICBJbmRlcGVuZGVudERpbWVuc2lvbiA9ICdpbmRlcGVuZGVudERpbWVuc2lvbicsXHJcblxyXG4gIC8vIERQSV9JbmRlcGVuZGVudERpbWVuc2lvbnMsIGhhdmluZyB0eXBlIEluZGVwZW5kZW50RGltZW5zaW9uUHJlc01vZGVsW11cclxuICBJbmRlcGVuZGVudERpbWVuc2lvbnMgPSAnaW5kZXBlbmRlbnREaW1lbnNpb25zJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJpYnV0ZVBlcnNwZWN0aXZlLCBoYXZpbmcgdHlwZSBQZXJzcGVjdGl2ZVByZXNNb2RlbFxyXG4gIEF0dHJpYnV0ZVBlcnNwZWN0aXZlID0gJ2F0dHJpYnV0ZVBlcnNwZWN0aXZlJyxcclxuXHJcbiAgLy8gRFBJX0N1YmVQZXJzcGVjdGl2ZSwgaGF2aW5nIHR5cGUgUGVyc3BlY3RpdmVQcmVzTW9kZWxcclxuICBDdWJlUGVyc3BlY3RpdmUgPSAnY3ViZVBlcnNwZWN0aXZlJyxcclxuXHJcbiAgLy8gRFBJX0F0dHJpYnV0ZVBlcnNwZWN0aXZlcywgaGF2aW5nIHR5cGUgUGVyc3BlY3RpdmVQcmVzTW9kZWxbXVxyXG4gIEF0dHJpYnV0ZVBlcnNwZWN0aXZlcyA9ICdhdHRyaWJ1dGVQZXJzcGVjdGl2ZXMnLFxyXG5cclxuICAvLyBEUElfQ2FsY3VsYXRlZE1lbWJlcnNGb3JFZGl0aW5nUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBFZGl0Q2FsY3VsYXRlZE1lbWJlcnNQcmVzTW9kZWxcclxuICBDYWxjdWxhdGVkTWVtYmVyc0ZvckVkaXRpbmdQcmVzTW9kZWwgPSAnY2FsY3VsYXRlZE1lbWJlcnNGb3JFZGl0aW5nUHJlc21vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0NhbGN1bGF0ZWRNZW1iZXIsIGhhdmluZyB0eXBlIENhbGN1bGF0ZWRNZW1iZXJQcmVzTW9kZWxcclxuICBDYWxjdWxhdGVkTWVtYmVyID0gJ2NhbGN1bGF0ZWRNZW1iZXInLFxyXG5cclxuICAvLyBEUElfTmV3Q2FsY3VsYXRlZE1lbWJlciwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRlZE1lbWJlclByZXNNb2RlbFxyXG4gIE5ld0NhbGN1bGF0ZWRNZW1iZXIgPSAnbmV3Q2FsY3VsYXRlZE1lbWJlcicsXHJcblxyXG4gIC8vIERQSV9VcGRhdGVkQ2FsY3VsYXRlZE1lbWJlciwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRlZE1lbWJlclByZXNNb2RlbFxyXG4gIFVwZGF0ZWRDYWxjdWxhdGVkTWVtYmVyID0gJ3VwZGF0ZWRDYWxjdWxhdGVkTWVtYmVyJyxcclxuXHJcbiAgLy8gRFBJX0NhbGN1bGF0ZWRNZW1iZXJzTGlzdCwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRlZE1lbWJlclByZXNNb2RlbFtdXHJcbiAgQ2FsY3VsYXRlZE1lbWJlcnNMaXN0ID0gJ2NhbGN1bGF0ZWRNZW1iZXJzTGlzdCcsXHJcblxyXG4gIC8vIERQSV9DYWxjdWxhdGVkTWVtYmVySGllcmFyY2h5SXRlbSwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRlZE1lbWJlckhpZXJhcmNoeUl0ZW1QcmVzTW9kZWxcclxuICBDYWxjdWxhdGVkTWVtYmVySGllcmFyY2h5SXRlbSA9ICdjYWxjdWxhdGVkTWVtYmVySGllcmFyY2h5SXRlbScsXHJcblxyXG4gIC8vIERQSV9DYWxjdWxhdGVkTWVtYmVySGllcmFyY2h5TGlzdCwgaGF2aW5nIHR5cGUgQ2FsY3VsYXRlZE1lbWJlckhpZXJhcmNoeUl0ZW1QcmVzTW9kZWxbXVxyXG4gIENhbGN1bGF0ZWRNZW1iZXJIaWVyYXJjaHlMaXN0ID0gJ2NhbGN1bGF0ZWRNZW1iZXJIaWVyYXJjaHlMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1N1bW1hcnlDYXJkUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBTdW1tYXJ5Q2FyZFByZXNNb2RlbFxyXG4gIFN1bW1hcnlDYXJkUHJlc01vZGVsID0gJ3N1bW1hcnlDYXJkJyxcclxuXHJcbiAgLy8gRFBJX01lYXN1cmVTdW1tYXJ5LCBoYXZpbmcgdHlwZSBNZWFzdXJlU3VtbWFyeVByZXNNb2RlbFxyXG4gIE1lYXN1cmVTdW1tYXJ5ID0gJ21lYXN1cmVTdW1tYXJ5JyxcclxuXHJcbiAgLy8gRFBJX01lYXN1cmVTdW1tYXJ5TGlzdCwgaGF2aW5nIHR5cGUgTWVhc3VyZVN1bW1hcnlQcmVzTW9kZWxbXVxyXG4gIE1lYXN1cmVTdW1tYXJ5TGlzdCA9ICdtZWFzdXJlU3VtbWFyeUxpc3QnLFxyXG5cclxuICAvLyBEUElfQW5ub3RhdGlvblByZXNNb2RlbCwgaGF2aW5nIHR5cGUgQW5ub3RhdGlvblByZXNNb2RlbFxyXG4gIEFubm90YXRpb25QcmVzTW9kZWwgPSAnYW5ub3RhdGlvbicsXHJcblxyXG4gIC8vIERQSV9Bbm5vdGF0aW9uTGlzdCwgaGF2aW5nIHR5cGUgQW5ub3RhdGlvblByZXNNb2RlbFtdXHJcbiAgQW5ub3RhdGlvbkxpc3QgPSAnYW5ub3RhdGlvbkxpc3QnLFxyXG5cclxuICAvLyBEUElfQW5ub3RhdGlvblNoYXBlU3R5bGUsIGhhdmluZyB0eXBlIEFubm90YXRpb25TaGFwZVN0eWxlUHJlc01vZGVsXHJcbiAgQW5ub3RhdGlvblNoYXBlU3R5bGUgPSAnYW5ub3RhdGlvblNoYXBlU3R5bGUnLFxyXG5cclxuICAvLyBEUElfVGVsZW1ldHJ5LCBoYXZpbmcgdHlwZSBUZWxlbWV0cnlQcmVzTW9kZWxcclxuICBUZWxlbWV0cnkgPSAndGVsZW1ldHJ5JyxcclxuXHJcbiAgLy8gRFBJX0RhdGFTb3VyY2VUZWxlbWV0cnksIGhhdmluZyB0eXBlIERhdGFTb3VyY2VUZWxlbWV0cnlQcmVzTW9kZWxcclxuICBEYXRhU291cmNlVGVsZW1ldHJ5ID0gJ2RhdGFTb3VyY2VUZWxlbWV0cnknLFxyXG5cclxuICAvLyBEUElfRGF0YVNvdXJjZVRlbGVtZXRyeUxpc3QsIGhhdmluZyB0eXBlIERhdGFTb3VyY2VUZWxlbWV0cnlQcmVzTW9kZWxbXVxyXG4gIERhdGFTb3VyY2VUZWxlbWV0cnlMaXN0ID0gJ2RhdGFTb3VyY2VUZWxlbWV0cnlMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1Zpc3VhbFNwZWNpZmljYXRpb25UZWxlbWV0cnksIGhhdmluZyB0eXBlIFZpc3VhbFNwZWNpZmljYXRpb25UZWxlbWV0cnlQcmVzTW9kZWxcclxuICBWaXN1YWxTcGVjaWZpY2F0aW9uVGVsZW1ldHJ5ID0gJ3Zpc3VhbFNwZWNpZmljYXRpb25UZWxlbWV0cnknLFxyXG5cclxuICAvLyBEUElfVmlzdWFsU3BlY2lmaWNhdGlvblRlbGVtZXRyeUxpc3QsIGhhdmluZyB0eXBlIFZpc3VhbFNwZWNpZmljYXRpb25UZWxlbWV0cnlQcmVzTW9kZWxbXVxyXG4gIFZpc3VhbFNwZWNpZmljYXRpb25UZWxlbWV0cnlMaXN0ID0gJ3Zpc3VhbFNwZWNpZmljYXRpb25UZWxlbWV0cnlMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1VuZGVybHlpbmdEYXRhVGFibGUsIGhhdmluZyB0eXBlIFVuZGVybHlpbmdEYXRhVGFibGVQcmVzTW9kZWxcclxuICBVbmRlcmx5aW5nRGF0YVRhYmxlID0gJ3VuZGVybHlpbmdEYXRhVGFibGUnLFxyXG5cclxuICAvLyBEUElfVW5kZXJseWluZ0RhdGFUYWJsZXMsIGhhdmluZyB0eXBlIFVuZGVybHlpbmdEYXRhVGFibGVQcmVzTW9kZWxbXVxyXG4gIFVuZGVybHlpbmdEYXRhVGFibGVzID0gJ3VuZGVybHlpbmdEYXRhVGFibGVzJyxcclxuXHJcbiAgLy8gRFBJX1VuZGVybHlpbmdEYXRhVGFibGVDb2x1bW4sIGhhdmluZyB0eXBlIFVuZGVybHlpbmdEYXRhVGFibGVDb2x1bW5QcmVzTW9kZWxcclxuICBVbmRlcmx5aW5nRGF0YVRhYmxlQ29sdW1uID0gJ3VuZGVybHlpbmdEYXRhVGFibGVDb2x1bW4nLFxyXG5cclxuICAvLyBEUElfVW5kZXJseWluZ0RhdGFUYWJsZUNvbHVtbnMsIGhhdmluZyB0eXBlIFVuZGVybHlpbmdEYXRhVGFibGVDb2x1bW5QcmVzTW9kZWxbXVxyXG4gIFVuZGVybHlpbmdEYXRhVGFibGVDb2x1bW5zID0gJ3VuZGVybHlpbmdEYXRhVGFibGVDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VDYWNoZUlELCBoYXZpbmcgdHlwZSBQYWdlQ2FjaGVJRFByZXNNb2RlbFxyXG4gIFBhZ2VDYWNoZUlEID0gJ3BhZ2VDYWNoZUlkJyxcclxuXHJcbiAgLy8gRFBJX1JlbGF0aW9uYWxQYWdlQ2FjaGVJRCwgaGF2aW5nIHR5cGUgUGFnZUNhY2hlSURQcmVzTW9kZWxcclxuICBSZWxhdGlvbmFsUGFnZUNhY2hlSUQgPSAncmVsYXRpb25hbFBhZ2VDYWNoZUlkJyxcclxuXHJcbiAgLy8gRFBJX1NlYXJjaFJlc3VsdHNDYWNoZUlELCBoYXZpbmcgdHlwZSBQYWdlQ2FjaGVJRFByZXNNb2RlbFxyXG4gIFNlYXJjaFJlc3VsdHNDYWNoZUlEID0gJ3NlYXJjaFJlc3VsdHNDYWNoZUlkJyxcclxuXHJcbiAgLy8gRFBJX1BhZ2VJbmZvLCBoYXZpbmcgdHlwZSBQYWdlSW5mb1ByZXNNb2RlbFxyXG4gIFBhZ2VJbmZvID0gJ3BhZ2VJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1Jvd0NvbFBhaXIsIGhhdmluZyB0eXBlIFJvd0NvbFBhaXJQcmVzTW9kZWxcclxuICBSb3dDb2xQYWlyID0gJ3Jvd0NvbFBhaXInLFxyXG5cclxuICAvLyBEUElfVG9wTGVmdFJvd0NvbCwgaGF2aW5nIHR5cGUgUm93Q29sUGFpclByZXNNb2RlbFxyXG4gIFRvcExlZnRSb3dDb2wgPSAndG9wTGVmdFJvd0NvbCcsXHJcblxyXG4gIC8vIERQSV9Cb3RSaWdodFJvd0NvbCwgaGF2aW5nIHR5cGUgUm93Q29sUGFpclByZXNNb2RlbFxyXG4gIEJvdFJpZ2h0Um93Q29sID0gJ2JvdFJpZ2h0Um93Q29sJyxcclxuXHJcbiAgLy8gRFBJX1Jvd0NvbFBhaXJzLCBoYXZpbmcgdHlwZSBSb3dDb2xQYWlyUHJlc01vZGVsW11cclxuICBSb3dDb2xQYWlycyA9ICdyb3dDb2xQYWlycycsXHJcblxyXG4gIC8vIERQSV9UYWJsZVZpZXdDYWNoZUluZm8sIGhhdmluZyB0eXBlIFRhYmxlVmlld0NhY2hlUHJlc01vZGVsXHJcbiAgVGFibGVWaWV3Q2FjaGVJbmZvID0gJ3RhYmxlVmlld0NhY2hlSW5mbycsXHJcblxyXG4gIC8vIERQSV9UYWJsZVZpZXdJbmZvLCBoYXZpbmcgdHlwZSB0YWJsZVZpZXdJbmZvUHJlc01vZGVsXHJcbiAgVGFibGVWaWV3SW5mbyA9ICd0YWJsZVZpZXdJbmZvJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlVmlld0NvbHVtbkluZm8sIGhhdmluZyB0eXBlIFRhYmxlVmlld0NvbHVtbkluZm9QcmVzTW9kZWxcclxuICBUYWJsZVZpZXdDb2x1bW5JbmZvID0gJ3RhYmxlVmlld0NvbHVtbkluZm8nLFxyXG5cclxuICAvLyBEUElfVGFibGVWaWV3Q29sdW1ucywgaGF2aW5nIHR5cGUgVGFibGVWaWV3Q29sdW1uSW5mb1ByZXNNb2RlbFtdXHJcbiAgVGFibGVWaWV3Q29sdW1ucyA9ICd0YWJsZVZpZXdDb2x1bW5zJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlVmlld1BhZ2VJdGVtLCBoYXZpbmcgdHlwZSBUYWJsZVZpZXdQYWdlSXRlbVByZXNNb2RlbFxyXG4gIFRhYmxlVmlld1BhZ2VJdGVtID0gJ3RhYmxlVmlld1BhZ2VJdGVtJyxcclxuXHJcbiAgLy8gRFBJX1RhYmxlVmlld1BhZ2VDb2x1bW5zLCBoYXZpbmcgdHlwZSBUYWJsZVZpZXdQYWdlSXRlbVByZXNNb2RlbFtdXHJcbiAgVGFibGVWaWV3UGFnZUNvbHVtbnMgPSAndGFibGVWaWV3UGFnZUNvbHVtbnMnLFxyXG5cclxuICAvLyBEUElfVGFibGVWaWV3UGFnZVJvdywgaGF2aW5nIHR5cGUgVGFibGVWaWV3UGFnZVJvd1ByZXNNb2RlbFxyXG4gIFRhYmxlVmlld1BhZ2VSb3cgPSAndGFibGVWaWV3UGFnZVJvdycsXHJcblxyXG4gIC8vIERQSV9UYWJsZVZpZXdQYWdlUm93cywgaGF2aW5nIHR5cGUgVGFibGVWaWV3UGFnZVJvd1ByZXNNb2RlbFtdXHJcbiAgVGFibGVWaWV3UGFnZVJvd3MgPSAndGFibGVWaWV3UGFnZVJvd3MnLFxyXG5cclxuICAvLyBEUElfVGFibGVWaWV3UGFnZSwgaGF2aW5nIHR5cGUgVGFibGVWaWV3UGFnZVByZXNNb2RlbFxyXG4gIFRhYmxlVmlld1BhZ2UgPSAndGFibGVWaWV3UGFnZScsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbFZhbHVlUGlja2VyLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbFZhbHVlUGlja2VyUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxWYWx1ZVBpY2tlciA9ICdjYXRlZ29yaWNhbFZhbHVlUGlja2VyJyxcclxuXHJcbiAgLy8gRFBJX0Fubm90YXRpb25TaGFwZUJvcmRlclN0eWxlLCBoYXZpbmcgdHlwZSBMaW5lU3R5bGVQcmVzTW9kZWxcclxuICBBbm5vdGF0aW9uU2hhcGVCb3JkZXJTdHlsZSA9ICdhbm5vdGF0aW9uU2hhcGVCb3JkZXJTdHlsZScsXHJcblxyXG4gIC8vIERQSV9Bbm90YXRpb25TaGFwZVN0cm9rZVN0eWxlLCBoYXZpbmcgdHlwZSBMaW5lU3R5bGVQcmVzTW9kZWxcclxuICBBbm90YXRpb25TaGFwZVN0cm9rZVN0eWxlID0gJ2Fubm90YXRpb25TaGFwZVN0cm9rZVN0eWxlJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsQmluRWRpdG9yUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEJpbkVkaXRvclByZXNNb2RlbFxyXG4gIENhdGVnb3JpY2FsQmluRWRpdG9yUHJlc01vZGVsID0gJ2NhdGVnb3JpY2FsQmluRWRpdG9yJyxcclxuXHJcbiAgLy8gRFBJX0NhdGVnb3JpY2FsQmluSXRlbSwgaGF2aW5nIHR5cGUgQ2F0ZWdvcmljYWxCaW5JdGVtUHJlc01vZGVsXHJcbiAgQ2F0ZWdvcmljYWxCaW5JdGVtID0gJ2NhdGVnb3JpY2FsQmluSXRlbVByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9DYXRlZ29yaWNhbEJpbkl0ZW1zLCBoYXZpbmcgdHlwZSBDYXRlZ29yaWNhbEJpbkl0ZW1QcmVzTW9kZWxbXVxyXG4gIENhdGVnb3JpY2FsQmluSXRlbXMgPSAnY2F0ZWdvcmljYWxCaW5JdGVtUHJlc01vZGVscycsXHJcblxyXG4gIC8vIERQSV9NZWFzdXJlUGlja2VyRmllbGRJbmZvLCBoYXZpbmcgdHlwZSBNZWFzdXJlUGlja2VyRmllbGRJbmZvUHJlc01vZGVsXHJcbiAgTWVhc3VyZVBpY2tlckZpZWxkSW5mbyA9ICdtZWFzdXJlUGlja2VyRmllbGRJbmZvJyxcclxuXHJcbiAgLy8gRFBJX01lYXN1cmVQaWNrZXJGaWVsZHMsIGhhdmluZyB0eXBlIE1lYXN1cmVQaWNrZXJGaWVsZEluZm9QcmVzTW9kZWxbXVxyXG4gIE1lYXN1cmVQaWNrZXJGaWVsZHMgPSAnbWVhc3VyZVBpY2tlckZpZWxkcycsXHJcblxyXG4gIC8vIERQSV9NZWFzdXJlQWdncmVnYXRpb25JbmZvLCBoYXZpbmcgdHlwZSBNZWFzdXJlQWdncmVnYXRpb25JbmZvUHJlc01vZGVsXHJcbiAgTWVhc3VyZUFnZ3JlZ2F0aW9uSW5mbyA9ICdtZWFzdXJlQWdncmVnYXRpb25JbmZvJyxcclxuXHJcbiAgLy8gRFBJX01lYXN1cmVBZ2dyZWdhdGlvbnMsIGhhdmluZyB0eXBlIE1lYXN1cmVBZ2dyZWdhdGlvbkluZm9QcmVzTW9kZWxbXVxyXG4gIE1lYXN1cmVBZ2dyZWdhdGlvbnMgPSAnbWVhc3VyZUFnZ3JlZ2F0aW9ucycsXHJcblxyXG4gIC8vIERQSV9UdXBsZVBhaXIsIGhhdmluZyB0eXBlIFR1cGxlUGFpclByZXNNb2RlbFxyXG4gIFR1cGxlUGFpciA9ICd0dXBsZVBhaXInLFxyXG5cclxuICAvLyBEUElfRGltZW5zaW9uQm91bmQsIGhhdmluZyB0eXBlIERpbWVuc2lvbkJvdW5kUHJlc01vZGVsXHJcbiAgRGltZW5zaW9uQm91bmQgPSAnZGltZW5zaW9uQm91bmQnLFxyXG5cclxuICAvLyBEUElfUGVyc3BlY3RpdmVCb3VuZHMsIGhhdmluZyB0eXBlIERpbWVuc2lvbkJvdW5kUHJlc01vZGVsW11cclxuICBQZXJzcGVjdGl2ZUJvdW5kcyA9ICdwZXJzcGVjdGl2ZUJvdW5kcycsXHJcblxyXG4gIC8vIERQSV9GaWx0ZXJQZXJzcGVjdGl2ZUluZm9QcmVzTW9kZWwsIGhhdmluZyB0eXBlIEZpbHRlclBlcnNwZWN0aXZlSW5mb1ByZXNNb2RlbFxyXG4gIEZpbHRlclBlcnNwZWN0aXZlSW5mb1ByZXNNb2RlbCA9ICdmaWx0ZXJQZXJzcGVjdGl2ZUluZm8nLFxyXG5cclxuICAvLyBEUElfVGFibGVSZWxldmFuY2UsIGhhdmluZyB0eXBlIFRhYmxlUmVsZXZhbmNlUHJlc01vZGVsXHJcbiAgVGFibGVSZWxldmFuY2UgPSAndGFibGVSZWxldmFuY2UnLFxyXG5cclxuICAvLyBEUElfRXh0ZW5zaW9uUmVnaXN0cmF0aW9uUHJlc01vZGVsLCBoYXZpbmcgdHlwZSBFeHRlbnNpb25SZWdpc3RyYXRpb25QcmVzTW9kZWxcclxuICBFeHRlbnNpb25SZWdpc3RyYXRpb25QcmVzTW9kZWwgPSAnYWRkSW5SZWdpc3RyYXRpb25QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfRXh0ZW5zaW9uUmVnaXN0cmF0aW9uUHJlc01vZGVsTGlzdCwgaGF2aW5nIHR5cGUgRXh0ZW5zaW9uUmVnaXN0cmF0aW9uUHJlc01vZGVsW11cclxuICBFeHRlbnNpb25SZWdpc3RyYXRpb25QcmVzTW9kZWxMaXN0ID0gJ2FkZEluUmVnaXN0cmF0aW9uUHJlc01vZGVsTGlzdCcsXHJcblxyXG4gIC8vIERQSV9BZGRJbkRhc2hib2FyZEF1dGhvcmluZ1dpZGdldCwgaGF2aW5nIHR5cGUgQWRkSW5EYXNoYm9hcmRXaWRnZXRQcmVzTW9kZWxcclxuICBBZGRJbkRhc2hib2FyZEF1dGhvcmluZ1dpZGdldCA9ICdhZGRJbkRhc2hib2FyZEF1dGhvcmluZ1dpZGdldFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BZGRJbkluc3RhbmNlLCBoYXZpbmcgdHlwZSBBZGRJbkluc3RhbmNlUHJlc01vZGVsXHJcbiAgQWRkSW5JbnN0YW5jZSA9ICdhZGRJbkluc3RhbmNlUHJlc01vZGVsJyxcclxuXHJcbiAgLy8gRFBJX0FkZEluTG9jYXRvciwgaGF2aW5nIHR5cGUgQWRkSW5Mb2NhdG9yUHJlc01vZGVsXHJcbiAgQWRkSW5Mb2NhdG9yID0gJ2FkZEluTG9jYXRvclByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BZGRJbkNvbnRleHQsIGhhdmluZyB0eXBlIEFkZEluQ29udGV4dFxyXG4gIEFkZEluQ29udGV4dCA9ICdhZGRJbkNvbnRleHQnLFxyXG5cclxuICAvLyBEUElfQWRkSW5Nb2RlLCBoYXZpbmcgdHlwZSBBZGRJbk1vZGVcclxuICBBZGRJbk1vZGUgPSAnYWRkSW5Nb2RlJyxcclxuXHJcbiAgLy8gRFBJX1NldEF4aXNEYXRhVmFsdWVSZXN1bHQsIGhhdmluZyB0eXBlIFNldEF4aXNEYXRhVmFsdWVSZXN1bHRcclxuICBTZXRBeGlzRGF0YVZhbHVlUmVzdWx0ID0gJ3NldEF4aXNEYXRhVmFsdWVSZXN1bHQnLFxyXG5cclxuICAvLyBEUElfQXhpc0V4dGVudFN0YXJ0VHlwZSwgaGF2aW5nIHR5cGUgQXhpc0V4dGVudFR5cGVcclxuICBBeGlzRXh0ZW50U3RhcnRUeXBlID0gJ2F4aXNFeHRlbnRTdGFydFR5cGUnLFxyXG5cclxuICAvLyBEUElfQXhpc0V4dGVudEVuZFR5cGUsIGhhdmluZyB0eXBlIEF4aXNFeHRlbnRUeXBlXHJcbiAgQXhpc0V4dGVudEVuZFR5cGUgPSAnYXhpc0V4dGVudEVuZFR5cGUnLFxyXG5cclxuICAvLyBEUElfQXhpc0V4dGVudHNUeXBlLCBoYXZpbmcgdHlwZSBBeGlzRXh0ZW50VHlwZVxyXG4gIEF4aXNFeHRlbnRzVHlwZSA9ICdheGlzRXh0ZW50c1R5cGUnLFxyXG5cclxuICAvLyBEUElfQWRkSW5FbnZpcm9ubWVudCwgaGF2aW5nIHR5cGUgQWRkSW5FbnZpcm9ubWVudFByZXNNb2RlbFxyXG4gIEFkZEluRW52aXJvbm1lbnQgPSAnYWRkSW5FbnZpcm9ubWVudFByZXNNb2RlbCcsXHJcblxyXG4gIC8vIERQSV9BZGRJbkRhc2hib2FyZEluZm8sIGhhdmluZyB0eXBlIEFkZEluRGFzaGJvYXJkSW5mb1ByZXNNb2RlbFxyXG4gIEFkZEluRGFzaGJvYXJkSW5mbyA9ICdhZGRJbkRhc2hib2FyZEluZm9QcmVzTW9kZWwnLFxyXG5cclxuICAvLyBEUElfQWRkSW5TZXR0aW5nc0luZm8sIGhhdmluZyB0eXBlIEFkZEluU2V0dGluZ3NJbmZvUHJlc01vZGVsXHJcbiAgQWRkSW5TZXR0aW5nc0luZm8gPSAnYWRkSW5TZXR0aW5nc0luZm8nLFxyXG5cclxuICAvLyBEUElfQWRkSW5Cb290c3RyYXBJbmZvLCBoYXZpbmcgdHlwZSBBZGRJbkJvb3RzdHJhcEluZm9QcmVzTW9kZWxcclxuICBBZGRJbkJvb3RzdHJhcEluZm8gPSAnYWRkSW5Cb290c3RyYXBJbmZvJyxcclxuXHJcbiAgLy8gRFBJX0V4dGVuc2lvbkRlYnVnU2V0dGluZ3MsIGhhdmluZyB0eXBlIEV4dGVuc2lvbkRlYnVnU2V0dGluZ3NQcmVzTW9kZWxcclxuICBFeHRlbnNpb25EZWJ1Z1NldHRpbmdzID0gJ2FkZEluRGVidWdTZXR0aW5ncycsXHJcblxyXG4gIC8vIERQSV9OTFBJbnRlcnByZXRSZXN1bHQsIGhhdmluZyB0eXBlIE5MUEludGVycHJldFJlc3VsdFByZXNNb2RlbFxyXG4gIE5MUEludGVycHJldFJlc3VsdCA9ICdubHBJbnRlcnByZXRSZXN1bHQnLFxyXG5cclxuICAvLyBEUElfTkxQSW50ZXJwcmV0UmVzdWx0QXJyYXksIGhhdmluZyB0eXBlIE5MUEludGVycHJldFJlc3VsdFByZXNNb2RlbFtdXHJcbiAgTkxQSW50ZXJwcmV0UmVzdWx0QXJyYXkgPSAnbmxwSW50ZXJwcmV0UmVzdWx0QXJyYXknLFxyXG5cclxuICAvLyBEUElfUmljaFRleHQsIGhhdmluZyB0eXBlIFJpY2hUZXh0UHJlc01vZGVsXHJcbiAgUmljaFRleHQgPSAncmljaFRleHQnLFxyXG5cclxuICAvLyBEUElfUmljaFRleHRLZXl3b3JkU3ViTGlzdCwgaGF2aW5nIHR5cGUgUmljaFRleHRLZXl3b3JkU3ViTGlzdFByZXNNb2RlbFxyXG4gIFJpY2hUZXh0S2V5d29yZFN1Ykxpc3QgPSAncmljaFRleHRLZXl3b3Jkc1N1Ymxpc3QnLFxyXG5cclxuICAvLyBEUElfUmljaFRleHRLZXl3b3JkU3ViTGlzdHMsIGhhdmluZyB0eXBlIFJpY2hUZXh0S2V5d29yZFN1Ykxpc3RQcmVzTW9kZWxbXVxyXG4gIFJpY2hUZXh0S2V5d29yZFN1Ykxpc3RzID0gJ3JpY2hUZXh0S2V5d29yZFN1Ymxpc3RzJyxcclxuXHJcbiAgLy8gRFBJX1JpY2hUZXh0S2V5d29yZExpc3QsIGhhdmluZyB0eXBlIFJpY2hUZXh0S2V5d29yZExpc3RQcmVzTW9kZWxcclxuICBSaWNoVGV4dEtleXdvcmRMaXN0ID0gJ3JpY2hUZXh0S2V5d29yZHNMaXN0JyxcclxuXHJcbiAgLy8gRFBJX1JpY2hUZXh0QmxvY2tTdHlsZSwgaGF2aW5nIHR5cGUgUmljaFRleHRCbG9ja1N0eWxlUHJlc01vZGVsXHJcbiAgUmljaFRleHRCbG9ja1N0eWxlID0gJ3JpY2hUZXh0QmxvY2tTdHlsZScsXHJcblxyXG4gIC8vIERQSV9SaWNoVGV4dENvbnRlbnRTdHlsZSwgaGF2aW5nIHR5cGUgUmljaFRleHRDb250ZW50U3R5bGVQcmVzTW9kZWxcclxuICBSaWNoVGV4dENvbnRlbnRTdHlsZSA9ICdyaWNoVGV4dENvbnRlbnRTdHlsZScsXHJcblxyXG4gIC8vIERQSV9Tb3J0SW5kaWNhdG9yU3RhdGUsIGhhdmluZyB0eXBlIFNvcnRJbmRpY2F0b3JTdGF0ZVByZXNNb2RlbFxyXG4gIFNvcnRJbmRpY2F0b3JTdGF0ZSA9ICdzb3J0SW5kaWNhdG9yU3RhdGUnXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktY29yZS9nZW4tc3JjL3ByZXNsYXllci9QYXJhbXMudHNcbiAqKi8iLCJpbXBvcnQgeyBQYXJhbWV0ZXJJZCBhcyBBcGksIFZlcmJJZCBhcyBBcGlWZXJiSWQsIFZlcnNpb25OdW1iZXIgfSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHtcclxuICBEb2NDb21tYW5kcyBhcyBQcmVzTGF5ZXJEb2NDb21tYW5kSWQsXHJcbiAgU3J2Q29tbWFuZHMgYXMgUHJlc0xheWVyU3J2Q29tbWFuZElkLFxyXG4gIFVJQ29tbWFuZHMgYXMgUHJlc0xheWVyVUlDb21tYW5kSWRcclxufSBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9Db21tYW5kSWRzJztcclxuXHJcbmltcG9ydCB7IFBhcmFtZXRlcklkIGFzIFBMIH0gZnJvbSAnLi4vLi4vZ2VuLXNyYy9wcmVzbGF5ZXIvUGFyYW1zJztcclxuaW1wb3J0IHsgQ29tbWFuZE1hcHBpbmdSZWdpc3RyeSB9IGZyb20gJy4vQ29tbWFuZE1hcHBpbmdSZWdpc3RyeSc7XHJcbmltcG9ydCB7IENvbW1hbmROYW1lc3BhY2UsIENvbW1hbmRQYXJhbWV0ZXIsIENvbW1hbmRSZWdpc3RyYXRpb24gfSBmcm9tICcuL0NvbW1hbmRSZWdpc3RyYXRpb24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbW1hbmRNYXBwaW5nUmVnaXN0cnlGYWN0b3J5IHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuZCBwb3B1bGF0ZXMgYSBuZXcgQ29tbWFuZE1hcHBpbmdSZWdpc3RyeSBmb3IgdGhlIHNwZWNpZmljIHZlcnNpb24gbnVtYmVyIHJlcXVlc3RlZFxyXG4gICAqXHJcbiAgICogQHN0YXRpY1xyXG4gICAqIEBwYXJhbSB7VmVyc2lvbk51bWJlcn0gdmVyc2lvbk51bWJlclxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcnVubmluZ0luRGVza3RvcFxyXG4gICAqIEByZXR1cm5zIHtDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5fVxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlQ29tbWFuZE1hcHBpbmdSZWdpc3RyeSh2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uTnVtYmVyLCBydW5uaW5nSW5EZXNrdG9wOiBib29sZWFuKTogQ29tbWFuZE1hcHBpbmdSZWdpc3RyeSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IENvbW1hbmRNYXBwaW5nUmVnaXN0cnkoKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkluaXRpYWxpemVFeHRlbnNpb24sXHJcbiAgICAgIFByZXNMYXllckRvY0NvbW1hbmRJZC5Jbml0aWFsaXplQWRkSW5JbnN0YW5jZSxcclxuICAgICAgWyBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRXh0ZW5zaW9uTG9jYXRvciwgUEwuQWRkSW5Mb2NhdG9yKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSXNFeHRlbnNpb25EaWFsb2csIFBMLklzRXh0ZW5zaW9uRGlhbG9nKSBdLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRXh0ZW5zaW9uQm9vdHN0cmFwSW5mbywgUEwuQWRkSW5Cb290c3RyYXBJbmZvKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0VW5kZXJseWluZ0RhdGEsXHJcbiAgICAgIFByZXNMYXllckRvY0NvbW1hbmRJZC5HZXRVbmRlcmx5aW5nRGF0YSxcclxuICAgICAgWyBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSWdub3JlQWxpYXNlcywgUEwuSWdub3JlQWxpYXNlcyksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLklnbm9yZVNlbGVjdGlvbiwgUEwuSWdub3JlU2VsZWN0aW9uKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSW5jbHVkZUFsbENvbHVtbnMsIFBMLkluY2x1ZGVBbGxDb2x1bW5zKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuTWF4Um93cywgUEwuTWF4Um93cyksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlZpc3VhbElkLCBQTC5WaXN1YWxJRFBNKSBdLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuVW5kZXJseWluZ0RhdGFUYWJsZSwgUEwuVW5kZXJseWluZ0RhdGFUYWJsZSkpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkdldERhdGFTdW1tYXJ5RGF0YSxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldFN1bW1hcnlEYXRhLFxyXG4gICAgICBbIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5JZ25vcmVBbGlhc2VzLCBQTC5JZ25vcmVBbGlhc2VzKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSWdub3JlU2VsZWN0aW9uLCBQTC5JZ25vcmVTZWxlY3Rpb24pLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5WaXN1YWxJZCwgUEwuVmlzdWFsSURQTSkgXSxcclxuICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlVuZGVybHlpbmdTdW1tYXJ5RGF0YVRhYmxlLCBQTC5VbmRlcmx5aW5nRGF0YVRhYmxlKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0RGF0YVNvdXJjZURhdGEsXHJcbiAgICAgIFByZXNMYXllckRvY0NvbW1hbmRJZC5HZXREYXRhU291cmNlRGF0YSxcclxuICAgICAgWyBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRGF0YVNvdXJjZUlkLCBQTC5EYXRhc291cmNlKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSWdub3JlQWxpYXNlcywgUEwuSWdub3JlQWxpYXNlcyksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLk1heFJvd3MsIFBMLk1heFJvd3MpLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5Db2x1bW5zVG9JbmNsdWRlLCBQTC5GaWVsZERpc3BsYXlOYW1lcykgXSxcclxuICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkRhdGFTb3VyY2VEYXRhVGFibGUsIFBMLlVuZGVybHlpbmdEYXRhVGFibGUpKSk7XHJcblxyXG4gICAgcmVzdWx0LmFkZENvbW1hbmQobmV3IENvbW1hbmRSZWdpc3RyYXRpb24oXHJcbiAgICAgIEFwaVZlcmJJZC5BcHBseUNhdGVnb3JpY2FsRmlsdGVyLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuQ2F0ZWdvcmljYWxGaWx0ZXIsXHJcbiAgICAgIFsgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkZpZWxkTmFtZSwgUEwuUXVhbGlmaWVkRmllbGRDYXB0aW9uKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmlsdGVyVmFsdWVzLCBQTC5GaWx0ZXJBbGlhc2VzKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmlsdGVyVXBkYXRlVHlwZSwgUEwuRmlsdGVyVXBkYXRlVHlwZSksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLklzRXhjbHVkZU1vZGUsIFBMLkV4Y2x1ZGUsIHRydWUpLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5WaXN1YWxJZCwgUEwuV29ya3NoZWV0KSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuVmlzdWFsSWQsIFBMLkRhc2hib2FyZCldLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmllbGROYW1lLCBQTC5GaWVsZENhcHRpb24pKSk7XHJcblxyXG4gICAgcmVzdWx0LmFkZENvbW1hbmQobmV3IENvbW1hbmRSZWdpc3RyYXRpb24oXHJcbiAgICAgIEFwaVZlcmJJZC5BcHBseVJhbmdlRmlsdGVyLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuUmFuZ2VGaWx0ZXIsXHJcbiAgICAgIFsgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkZpZWxkTmFtZSwgUEwuUXVhbGlmaWVkRmllbGRDYXB0aW9uKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmlsdGVyUmFuZ2VNaW4sIFBMLlJhbmdlTWluLCB0cnVlKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmlsdGVyUmFuZ2VNYXgsIFBMLlJhbmdlTWF4LCB0cnVlKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmlsdGVyUmFuZ2VOdWxsT3B0aW9uLCBQTC5JbmNsdWRlZCwgdHJ1ZSksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlZpc3VhbElkLCBQTC5Xb3Jrc2hlZXQpLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5WaXN1YWxJZCwgUEwuRGFzaGJvYXJkKV0sXHJcbiAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5GaWVsZE5hbWUsIFBMLkZpZWxkQ2FwdGlvbikpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkNsZWFyRmlsdGVyLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuUmVzZXRGaWx0ZXIsXHJcbiAgICAgIFsgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkZpZWxkTmFtZSwgUEwuUXVhbGlmaWVkRmllbGRDYXB0aW9uKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuVmlzdWFsSWQsIFBMLldvcmtzaGVldCksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlZpc3VhbElkLCBQTC5EYXNoYm9hcmQpXSxcclxuICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkZpZWxkTmFtZSwgUEwuRmllbGRDYXB0aW9uKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0U2VsZWN0ZWRNYXJrcyxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldFNlbGVjdGlvbkRhdGEsXHJcbiAgICAgIFsgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlZpc3VhbElkLCBQTC5WaXN1YWxJRFBNKSBdLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuU2VsZWN0ZWREYXRhLCBQTC5TZWxlY3Rpb25EYXRhKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0SGlnaGxpZ2h0ZWRNYXJrcyxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldEhpZ2hsaWdodGVkRGF0YSxcclxuICAgICAgWyBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuVmlzdWFsSWQsIFBMLlZpc3VhbElEUE0pIF0sXHJcbiAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5IaWdobGlnaHRlZERhdGEsIFBMLkhpZ2hsaWdodGVkRGF0YSkpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLlNhdmVFeHRlbnNpb25TZXR0aW5ncyxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLlNhdmVBZGRJblNldHRpbmdzLFxyXG4gICAgICBbIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5FeHRlbnNpb25Mb2NhdG9yLCBQTC5BZGRJbkxvY2F0b3IpLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5TZXR0aW5nc1ZhbHVlcywgUEwuQWRkSW5TZXR0aW5ncyldLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRXh0ZW5zaW9uU2V0dGluZ3NJbmZvLCBQTC5BZGRJblNldHRpbmdzSW5mbykpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkdldFBhcmFtZXRlcnNGb3JTaGVldCxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldFBhcmFtZXRlck1vZGVscyxcclxuICAgICAgW10sXHJcbiAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5QYXJhbWV0ZXJJbmZvcywgUEwuUGFyYW1ldGVyQ3RybHMpKSk7XHJcblxyXG4gICAgcmVzdWx0LmFkZENvbW1hbmQobmV3IENvbW1hbmRSZWdpc3RyYXRpb24oXHJcbiAgICAgIEFwaVZlcmJJZC5GaW5kUGFyYW1ldGVyLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuRmluZFBhcmFtZXRlck1vZGVsLFxyXG4gICAgICBbIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5QYXJhbWV0ZXJDYXB0aW9uLCBQTC5GaWVsZENhcHRpb24sIHRydWUpLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5QYXJhbWV0ZXJGaWVsZE5hbWUsIFBMLkZpZWxkTmFtZVN0cmluZywgdHJ1ZSldLFxyXG4gICAgICAvLyBXZSBtaWdodCBub3QgZ2V0IGEgcmVzcG9uc2UgaWYgdGhlIHBhcmFtZXRlciBpc24ndCBmb3VuZFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuUGFyYW1ldGVySW5mbywgUEwuUGFyYW1ldGVyQ3RybCwgdHJ1ZSkpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkNoYW5nZVBhcmFtZXRlclZhbHVlLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuU2V0UGFyYW1ldGVyVmFsdWUsXHJcbiAgICAgIFsgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlBhcmFtZXRlckZpZWxkTmFtZSwgUEwuR2xvYmFsRmllbGROYW1lKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuUGFyYW1ldGVyVmFsdWUsIFBMLlZhbHVlU3RyKV0sXHJcbiAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5QYXJhbWV0ZXJJbmZvLCBQTC5QYXJhbWV0ZXJDdHJsKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuQ2xlYXJTZWxlY3RlZE1hcmtzLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuQ2xlYXJTZWxlY3RlZE1hcmtzLFxyXG4gICAgICBbbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlZpc3VhbElkLCBQTC5WaXN1YWxJRFBNKV0pKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLlNlbGVjdEJ5VmFsdWUsXHJcbiAgICAgIFByZXNMYXllckRvY0NvbW1hbmRJZC5TZWxlY3RCeVZhbHVlLFxyXG4gICAgICBbbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlZpc3VhbElkLCBQTC5WaXN1YWxJRFBNKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuU2VsZWN0aW9uLCBQTC5TZWxlY3Rpb24sIHRydWUpLFxyXG4gICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5TZWxlY3Rpb25VcGRhdGVUeXBlLCBQTC5TZWxlY3Rpb25VcGRhdGVUeXBlKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSGllclZhbFNlbGVjdGlvbk1vZGVscywgUEwuSGllclZhbFNlbGVjdGlvbk1vZGVscywgdHJ1ZSksXHJcbiAgICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkRpbVZhbFNlbGVjdGlvbk1vZGVscywgUEwuRGltVmFsU2VsZWN0aW9uTW9kZWxzLCB0cnVlKSxcclxuICAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuUXVhbnRSYW5nZVNlbGVjdGlvbk1vZGVscywgUEwuUXVhbnRSYW5nZVNlbGVjdGlvbk1vZGVscywgdHJ1ZSldKSk7XHJcblxyXG4gICAgcmVzdWx0LmFkZENvbW1hbmQobmV3IENvbW1hbmRSZWdpc3RyYXRpb24oXHJcbiAgICAgIEFwaVZlcmJJZC5HZXREYXRhU291cmNlcyxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldFNjaGVtYSxcclxuICAgICAgW25ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5WaXN1YWxJZCwgUEwuVmlzdWFsSURQTSldLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRGF0YVNjaGVtYSwgUEwuRGF0YVNjaGVtYSkpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLlJlZnJlc2hEYXRhU291cmNlLFxyXG4gICAgICAocnVubmluZ0luRGVza3RvcCkgPyBQcmVzTGF5ZXJVSUNvbW1hbmRJZC5SZWZyZXNoRGF0YVNvdXJjZVVJIDogUHJlc0xheWVyU3J2Q29tbWFuZElkLlJlZnJlc2hEYXRhLFxyXG4gICAgICBbbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkRhdGFTb3VyY2VJZCwgUEwuRGF0YXNvdXJjZSldLFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIChydW5uaW5nSW5EZXNrdG9wKSA/IENvbW1hbmROYW1lc3BhY2UuVGFiVUkgOiBDb21tYW5kTmFtZXNwYWNlLlRhYlNydikpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0RmlsdGVycyxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldFdvcmtzaGVldEZpbHRlcnMsXHJcbiAgICAgIFtuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuVmlzdWFsSWQsIFBMLlZpc3VhbElEUE0pXSxcclxuICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLldvcmtzaGVldEZpbHRlcnMsIFBMLkZpbHRlcnNJbmZvKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0Q2F0ZWdvcmljYWxEb21haW4sXHJcbiAgICAgIFByZXNMYXllckRvY0NvbW1hbmRJZC5HZXRDYXRlZ29yaWNhbERvbWFpbixcclxuICAgICAgW25ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5WaXN1YWxJZCwgUEwuVmlzdWFsSURQTSksXHJcbiAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRmllbGRJZCwgUEwuRmllbGROYW1lKSxcclxuICAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5Eb21haW5UeXBlLCBQTC5GaWx0ZXJEb21haW5UeXBlKV0sXHJcbiAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuQ2F0ZWdvcmljYWxEb21haW4sIFBMLkNhdGVnb3JpY2FsRG9tYWluKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0UmFuZ2VEb21haW4sXHJcbiAgICAgIFByZXNMYXllckRvY0NvbW1hbmRJZC5HZXRRdWFudGl0YXRpdmVEb21haW4sXHJcbiAgICAgIFtuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuVmlzdWFsSWQsIFBMLlZpc3VhbElEUE0pLFxyXG4gICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkZpZWxkSWQsIFBMLkZpZWxkTmFtZSksXHJcbiAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRG9tYWluVHlwZSwgUEwuRmlsdGVyRG9tYWluVHlwZSldLFxyXG4gICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLlF1YW50aXRhdGl2ZURvbWFpbiwgUEwuUXVhbnRpdGF0aXZlRG9tYWluKSkpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRDb21tYW5kKG5ldyBDb21tYW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICBBcGlWZXJiSWQuR2V0Sm9pbkRlc2NyaXB0aW9uLFxyXG4gICAgICBQcmVzTGF5ZXJEb2NDb21tYW5kSWQuR2V0Sm9pbkRlc2NyaXB0aW9uUHJlc01vZGVsLFxyXG4gICAgICBbbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkRhdGFTb3VyY2VJZCwgUEwuRGF0YXNvdXJjZSldLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuSm9pbkRlc2NyaXB0aW9uLCBQTC5Kb2luRGVzY3JpcHRpb24pKSk7XHJcblxyXG4gICAgcmVzdWx0LmFkZENvbW1hbmQobmV3IENvbW1hbmRSZWdpc3RyYXRpb24oXHJcbiAgICAgIEFwaVZlcmJJZC5EaXNwbGF5RGlhbG9nLFxyXG4gICAgICBQcmVzTGF5ZXJVSUNvbW1hbmRJZC5EaXNwbGF5RXh0ZW5zaW9uRGlhbG9nLFxyXG4gICAgICBbbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkV4dGVuc2lvbkxvY2F0b3IsIFBMLkFkZEluTG9jYXRvciksXHJcbiAgICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRXh0ZW5zaW9uRGlhbG9nVXJsLCBQTC5FeHRlbnNpb25EaWFsb2dVcmwpLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCwgUEwuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCwgdHJ1ZSldLFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIENvbW1hbmROYW1lc3BhY2UuVGFiVUkpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkNsb3NlRGlhbG9nLFxyXG4gICAgICBQcmVzTGF5ZXJVSUNvbW1hbmRJZC5DbG9zZUV4dGVuc2lvbkRpYWxvZyxcclxuICAgICAgW25ldyBDb21tYW5kUGFyYW1ldGVyKEFwaS5FeHRlbnNpb25Mb2NhdG9yLCBQTC5BZGRJbkxvY2F0b3IpLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCwgUEwuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCwgdHJ1ZSldLFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIENvbW1hbmROYW1lc3BhY2UuVGFiVUkpKTtcclxuXHJcbiAgICByZXN1bHQuYWRkQ29tbWFuZChuZXcgQ29tbWFuZFJlZ2lzdHJhdGlvbihcclxuICAgICAgQXBpVmVyYklkLkdldENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcmllcyxcclxuICAgICAgUHJlc0xheWVyRG9jQ29tbWFuZElkLkdldENvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnlQcmVzTW9kZWxzLFxyXG4gICAgICBbbmV3IENvbW1hbmRQYXJhbWV0ZXIoQXBpLkRhdGFTb3VyY2VJZCwgUEwuRGF0YXNvdXJjZSldLFxyXG4gICAgICBuZXcgQ29tbWFuZFBhcmFtZXRlcihBcGkuQ29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyaWVzLCBQTC5Db25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJpZXMpKSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvQ29tbWFuZE1hcHBpbmdSZWdpc3RyeUZhY3RvcnkudHNcbiAqKi8iLCIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vL1xyXG4vLyBUaGlzIGZpbGUgaXMgdGhlIGNvcHlyaWdodGVkIHByb3BlcnR5IG9mIFRhYmxlYXUgU29mdHdhcmUgYW5kIGlzIHByb3RlY3RlZFxyXG4vLyBieSByZWdpc3RlcmVkIHBhdGVudHMgYW5kIG90aGVyIGFwcGxpY2FibGUgVS5TLiBhbmQgaW50ZXJuYXRpb25hbCBsYXdzIGFuZFxyXG4vLyByZWd1bGF0aW9ucy5cclxuLy9cclxuLy8gVW5saWNlbnNlZCB1c2Ugb2YgdGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBpcyBwcm9oaWJpdGVkLiBQbGVhc2UgcmVmZXIgdG9cclxuLy8gdGhlIE5PVElDRVMudHh0IGZpbGUgZm9yIGZ1cnRoZXIgZGV0YWlscy5cclxuLy9cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gV0FSTklORzogQ29tcHV0ZXIgZ2VuZXJhdGVkIGZpbGUuICBEbyBub3QgaGFuZCBtb2RpZnkuXHJcbi8vIERFUEVORFMgT046IFsnLi4vanMtYXBpL2FwaS1jb3JlL25vZGVfbW9kdWxlcy9AdGFibGVhdS9wcmVzbGF5ZXItY29kZWdlbi10eXBlc2NyaXB0L3RlbXBsYXRlcy9jb21tYW5kcy1lbnVtLXRzLnRlbXBsYXRlJywgdScuLi9qcy1hcGkvYXBpLWNvcmUvdGVtcC1wcmVzLWxheWVyL2FsbC1jbWQtd3JhcHBlcnMuZGF0YSddXHJcblxyXG5leHBvcnQgZW51bSBEb2NDb21tYW5kcyB7XHJcblxyXG4gICAgLy8gU2F2ZXMgdGhlIHNldHRpbmdzIGZvciB0aGUgc3BlY2lmaWVkIGFkZC1pbiBpZFxyXG4gICAgU2F2ZUFkZEluU2V0dGluZ3MgPSAnc2F2ZS1hZGQtaW4tc2V0dGluZ3MnLFxyXG5cclxuICAgIC8vIEdldHMgdGhlIHByZXMgbW9kZWwgZm9yIGFuIGFkZC1pbiBpbnN0YW5jZS5cclxuICAgIEdldEFkZEluSW5zdGFuY2VQcmVzTW9kZWwgPSAnZ2V0LWFkZC1pbi1pbnN0YW5jZS1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBHZXRzIHRoZSBwcmVzIG1vZGVsIGZvciB0aGUgZGFzaGJvYXJkIGF1dGhvcmluZyB3aWRnZXQgZm9yIGFkZC1pbnMuXHJcbiAgICBHZXRBZGRJbkRhc2hib2FyZEF1dGhvcmluZ1dpZGdldFByZXNNb2RlbCA9ICdnZXQtYWRkLWluLWRhc2hib2FyZC1hdXRob3Jpbmctd2lkZ2V0LXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIEdldHMgdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiBmb3IgYW4gYWRkLWluIHRvIGluaXRpYWxpemUgaXRzZWxmLlxyXG4gICAgSW5pdGlhbGl6ZUFkZEluSW5zdGFuY2UgPSAnaW5pdGlhbGl6ZS1hZGQtaW4taW5zdGFuY2UnLFxyXG5cclxuICAgIC8vIEVuYWJsZXMgb3IgZGlzYWJsZSBqYXZhc2NyaXB0IGRlYnVnZ2luZyBvZiBhbiBhZGQtaW4uXHJcbiAgICBTZXRBZGRJbkpzRGVidWdnaW5nRW5hYmxlZCA9ICdzZXQtYWRkLWluLWpzLWRlYnVnZ2luZy1lbmFibGVkJyxcclxuXHJcbiAgICAvLyBXaGV0aGVyIG9yIG5vdCB3ZSBzaG91bGQgcGF1c2UgYmVmb3JlIGxvYWRpbmcuIElmIG1pc3NpbmcsIHRvZ2dsZSB0aGUgdmFsdWVcclxuICAgIFNldFBhdXNlQmVmb3JlTG9hZGluZ0FkZEluID0gJ3NldC1wYXVzZS1iZWZvcmUtbG9hZGluZy1hZGQtaW4nLFxyXG5cclxuICAgIC8vIFJlbG9hZHMgdGhlIEFkZC1JbiB3aWRnZXQgYW5kIHdlYiBwYWdlLlxyXG4gICAgUmVsb2FkQWRkSW4gPSAncmVsb2FkLWFkZC1pbicsXHJcblxyXG4gICAgLy8gUmV0cmlldmVzIHRoZSBjb250ZXh0IG1lbnUgZm9yIGEgZGFzaGJvYXJkIGFkZC1pbi5cclxuICAgIEdldEFkZEluWm9uZUNvbnRleHRNZW51ID0gJ2dldC1hZGQtaW4tem9uZS1jb250ZXh0LW1lbnUnLFxyXG5cclxuICAgIC8vIEdldHMgdGhlIHByZXMgbW9kZWwgd2hpY2ggaW5kaWNhdGVzIHdoYXQgdGhlIGRlYnVnIHNldHRpbmdzIGZvciBhZGQtaW5zIGlzLlxyXG4gICAgR2V0RXh0ZW5zaW9uRGVidWdTZXR0aW5nc1ByZXNNb2RlbCA9ICdnZXQtZXh0ZW5zaW9uLWRlYnVnLXNldHRpbmdzLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFByaW1hcnkgdXNlIGlzIGZvciBidWlsZGluZyBjb250ZXh0IG1lbnVzXHJcbiAgICBJc1NlbGVjdGlvbkFuRWRpdGFibGVQYXJhbWV0ZXIgPSAnaXMtc2VsZWN0aW9uLWFuLWVkaXRhYmxlLXBhcmFtZXRlcicsXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgc2VsZWN0aW9uIGNhbiBiZSB1c2VkIGFzIGJhc2UgZm9yIGNyZWF0aW5nIGEgbmV3IHBhcmFtZXRlci4gUHJpbWFyeSB1c2UgaXMgZm9yIGJ1aWxkaW5nIGNvbnRleHQgbWVudXNcclxuICAgIEdldENyZWF0ZVBhcmFtZXRlclN0YXRlID0gJ2dldC1jcmVhdGUtcGFyYW1ldGVyLXN0YXRlJyxcclxuXHJcbiAgICAvLyBVc2VzIEVkaXRQYXJhbWV0ZXIgdG8gZ2V0IGFuZCByZXR1cm4gaW5mbyBhYm91dCB0aGUgcHJlc21vZGVsIHdpdGhvdXQgbWFpbnRhaW5pbmcgdGhlIGNvbnRyb2xsZXJcclxuICAgIEdldFBhcmFtZXRlckVkaXRJbmZvID0gJ2dldC1wYXJhbWV0ZXItZWRpdC1pbmZvJyxcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHRoZSBjb250cm9sbGVyIGFuZCBpdHMgc3RvcmVkIHBhcmFtZXRlciB0aGVuIHJldHVybiBhIHBvcHVsYXRlZCBwcmVzbW9kZWxcclxuICAgIENyZWF0ZVBhcmFtZXRlciA9ICdjcmVhdGUtcGFyYW1ldGVyJyxcclxuXHJcbiAgICAvLyBTYW1lIHVuZGVybHlpbmcgbG9naWMgYXMgQ3JlYXRlUGFyYW1ldGVyIGJ1dCBlZGl0cyByYXRoZXIgdGhhbiBjcmVhdGluZyBhIG5ldyBwYXJhbWV0ZXJcclxuICAgIEVkaXRQYXJhbWV0ZXJfTmV3ID0gJ2VkaXQtcGFyYW1ldGVyLW5ldycsXHJcblxyXG4gICAgLy8gQWRkIGEgbWVtYmVyIG9mIGEgcGFyYW1ldGVyIGRvbWFpbi4gQ2hhbmdlcyBhcmUgYXBwbGllZCB0byBpbnRlcm1lZGlhdGUgc3RhdGUgYW5kIHNhdmVkIG9uIGNvbW1pdFxyXG4gICAgQWRkUGFyYW1ldGVyTWVtYmVyID0gJ2FkZC1wYXJhbWV0ZXItbWVtYmVyJyxcclxuXHJcbiAgICAvLyBFZGl0IGEgbWVtYmVyIG9mIGEgcGFyYW1ldGVyIGRvbWFpbi4gQ2hhbmdlcyBhcmUgYXBwbGllZCB0byBpbnRlcm1lZGlhdGUgc3RhdGUgYW5kIHNhdmVkIG9uIGNvbW1pdFxyXG4gICAgRWRpdFBhcmFtZXRlck1lbWJlciA9ICdlZGl0LXBhcmFtZXRlci1tZW1iZXInLFxyXG5cclxuICAgIC8vIERlbGV0ZSBhIHNlcmllcyBvZiByYW5nZXMgb2YgbWVtYmVycyBmcm9tIHRoZSBwYXJhbWV0ZXIgbGlzdC5cclxuICAgIERlbGV0ZVBhcmFtZXRlck1lbWJlcnMgPSAnZGVsZXRlLXBhcmFtZXRlci1tZW1iZXJzJyxcclxuXHJcbiAgICAvLyBDb3B5IGEgc2VyaWVzIG9mIHJhbmdlcyBvZiBtZW1iZXJzIG9mIGEgcGFyYW1ldGVyIGxpc3RcclxuICAgIENvcHlQYXJhbWV0ZXJNZW1iZXJzID0gJ2NvcHktcGFyYW1ldGVyLW1lbWJlcnMnLFxyXG5cclxuICAgIC8vIE1vdmUgYSBzZXJpZXMgb2YgcmFuZ2VzIG9mIG1lbWJlcnMgb2YgYSBwYXJhbWV0ZXIgbGlzdFxyXG4gICAgTW92ZVBhcmFtZXRlck1lbWJlcnMgPSAnbW92ZS1wYXJhbWV0ZXItbWVtYmVycycsXHJcblxyXG4gICAgLy8gQ2hhbmdlIGRvbWFpbiBvZiBhIHBhcmFtZXRlci4gQ2hhbmdlcyBhcmUgYXBwbGllZCB0byBpbnRlcm1lZGlhdGUgc3RhdGUgYW5kIHNhdmVkIG9uIGNvbW1pdFxyXG4gICAgRWRpdFBhcmFtZXRlckRvbWFpblR5cGUgPSAnZWRpdC1wYXJhbWV0ZXItZG9tYWluLXR5cGUnLFxyXG5cclxuICAgIC8vIENoYW5nZSBkYXRhdHlwZSBvZiBhIHBhcmFtZXRlci4gQ2hhbmdlcyBhcmUgYXBwbGllZCB0byBpbnRlcm1lZGlhdGUgc3RhdGUgYW5kIHNhdmVkIG9uIGNvbW1pdFxyXG4gICAgRWRpdFBhcmFtZXRlckRhdGFUeXBlID0gJ2VkaXQtcGFyYW1ldGVyLWRhdGEtdHlwZScsXHJcblxyXG4gICAgLy8gQ2hhbmdlIGRpc3BsYXkgZm9ybWF0IG9mIGEgcGFyYW1ldGVyLiBDaGFuZ2VzIGFyZSBhcHBsaWVkIHRvIGludGVybWVkaWF0ZSBzdGF0ZSBhbmQgc2F2ZWQgb24gY29tbWl0XHJcbiAgICBFZGl0UGFyYW1ldGVyRm9ybWF0ID0gJ2VkaXQtcGFyYW1ldGVyLWZvcm1hdCcsXHJcblxyXG4gICAgLy8gVmFsaWRhdGUgY2hhbmdlcyB0byBhIHBhcmFtZXRlcidzIHJhbmdlIGRvbWFpbiBhbmQgYXBwbHkgdG8gaW50ZXJtZWRpYXRlIHN0YXRlLiBDaGFuZ2VzIGFyZSBzYXZlZCBvbiBjb21taXRcclxuICAgIEVkaXRQYXJhbWV0ZXJSYW5nZSA9ICdlZGl0LXBhcmFtZXRlci1yYW5nZScsXHJcblxyXG4gICAgLy8gRWRpdCB0aGUgdmFsdWUgb2YgYSBub24tbGlzdCBkb21haW4gcGFyYW1ldGVyXHJcbiAgICBFZGl0UGFyYW1ldGVyVmFsdWUgPSAnZWRpdC1wYXJhbWV0ZXItdmFsdWUnLFxyXG5cclxuICAgIC8vIEVkaXQgdGhlIHZhbHVlIG9mIGEgbGlzdCBkb21haW4gcGFyYW1ldGVyXHJcbiAgICBFZGl0UGFyYW1ldGVyVmFsdWVJbmRleCA9ICdlZGl0LXBhcmFtZXRlci12YWx1ZS1pbmRleCcsXHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBwYXJhbWV0ZXIgY2FwdGlvbiBhbmQgZGVzY3JpcHRpb24gLSB1c2VkIHRvIGtlZXAgYmFja2VuZCBpbiBzeW5jLiBObyB2ZXJpZmljYXRpb24vcmV0dXJuIGlzIHJlcXVyaWVkLlxyXG4gICAgRWRpdFBhcmFtZXRlckRpc3BsYXlJbmZvID0gJ2VkaXQtcGFyYW1ldGVyLWRpc3BsYXktaW5mbycsXHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBkb21haW4gb2YgdGhlIHBhcmFtZXRlciB1c2luZyBhIGZpZWxkIChjb2x1bW4gb3IgcGFyYW1ldGVyKSBhcyBhIGJhc2VcclxuICAgIFVwZGF0ZVBhcmFtZXRlckZyb21GaWVsZCA9ICd1cGRhdGUtcGFyYW1ldGVyLWZyb20tZmllbGQnLFxyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgbGlzdCBkb21haW4gb2YgYSBwYXJhbWV0ZXIgZnJvbSBhIHBsYWluIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVzXHJcbiAgICBQYXJzZVBhcmFtZXRlckxpc3REb21haW4gPSAncGFyc2UtcGFyYW1ldGVyLWxpc3QtZG9tYWluJyxcclxuXHJcbiAgICAvLyBDbGVhcnMgdGhlIHBhcmFtZXRlcidzIGRvbWFpbiBvZiBhbGwgbWVtYmVyc1xyXG4gICAgQ2xlYXJQYXJhbWV0ZXJMaXN0RG9tYWluID0gJ2NsZWFyLXBhcmFtZXRlci1saXN0LWRvbWFpbicsXHJcblxyXG4gICAgLy8gQ3JlYXRlcyBvciBlZGl0cyBwYXJhbWV0ZXIgZnJvbSBpbnRlcm1lZGlhdGUgc3RhdGUuIFRha2VzIGEgZmV3IHByb3BlcnRpZXMgdGhhdCBhcmUgY2FjaGVkIGluIGRpYWxvZyBhbmQgYXBwbGllcyB0aGVtIHByZS1jb21taXQuXHJcbiAgICBDb21taXRQYXJhbWV0ZXJFZGl0cyA9ICdjb21taXQtcGFyYW1ldGVyLWVkaXRzJyxcclxuXHJcbiAgICAvLyBHZXRzIHRoZSBtb2RlbCBmb3IgYSBwYXJ0aWN1bGFyIHBhcmFtZXRlciBvciByZXR1cm5zIGFuIGVtcHR5IHJlc3BvbnNlIGlmIG9uZSBpcyBub3QgZm91bmQuXHJcbiAgICBGaW5kUGFyYW1ldGVyTW9kZWwgPSAnZmluZC1wYXJhbWV0ZXItbW9kZWwnLFxyXG5cclxuICAgIC8vIEdldHMgdGhlIHByZXMgbW9kZWwgZm9yIHRoZSBzaG93IGRhdGEgZGlhbG9nXHJcbiAgICBHZXRTaG93RGF0YVByZXNNb2RlbCA9ICdnZXQtc2hvdy1kYXRhLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIEV4cG9ydCB1bmRlcmx5aW5nIGRhdGEgZnJvbSB0aGUgU2hvd0RhdGFEaWFsb2cgdG8gYSBDU1YgZmlsZVxyXG4gICAgU2hvd0RhdGFFeHBvcnRUb0NTViA9ICdzaG93LWRhdGEtZXhwb3J0LXRvLWNzdicsXHJcblxyXG4gICAgLy8gR2V0cyB0aGUgc3VtbWFyeSBkYXRhIGZvciBhIHdvcmtzaGVldFxyXG4gICAgR2V0U3VtbWFyeURhdGEgPSAnZ2V0LXN1bW1hcnktZGF0YScsXHJcblxyXG4gICAgLy8gR2V0cyB0aGUgdW5kZXJseWluZyBkYXRhIGZvciBhIHdvcmtzaGVldFxyXG4gICAgR2V0VW5kZXJseWluZ0RhdGEgPSAnZ2V0LXVuZGVybHlpbmctZGF0YScsXHJcblxyXG4gICAgLy8gR2V0cyB0aGUgdW5kZXJseWluZyBkYXRhIGZvciBhIHNwZWNpZmljIGRhdGEgc291cmNlLlxyXG4gICAgR2V0RGF0YVNvdXJjZURhdGEgPSAnZ2V0LWRhdGEtc291cmNlLWRhdGEnLFxyXG5cclxuICAgIC8vIFNlbGVjdCBhbGwgbWFya3MgdGhhdCBoYXZlIHRoZSB0dXBsZSdzIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZmllbGQgLlxyXG4gICAgU2VsZWN0QnlUdXBsZVZhbHVlID0gJ3NlbGVjdC1ieS10dXBsZS12YWx1ZScsXHJcblxyXG4gICAgLy8gQ2xlYXIgYWxsIHRoZSBzZWxlY3RlZCBtYXJrcyBmb3IgdGhlIGdpdmVuIHdvcmtzaGVldFxyXG4gICAgQ2xlYXJTZWxlY3RlZE1hcmtzID0gJ2NsZWFyLXNlbGVjdGVkLW1hcmtzJyxcclxuXHJcbiAgICAvLyBDcmVhdGVzIG9yIHVwZGF0ZXMgYW5kIGV4aXN0aW5nIGZpbHRlciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgdXBkYXRlcy5cclxuICAgIEFwcGx5Q2F0ZWdvcmljYWxGaWx0ZXJVcGRhdGVzID0gJ2FwcGx5LWNhdGVnb3JpY2FsLWZpbHRlci11cGRhdGVzJyxcclxuXHJcbiAgICAvLyBTZWFyY2ggZmlsdGVyIGRvbWFpbiBmb3IgdGV4dCBhbmQgcmV0dXJuIGFueSBtYXRjaGluZyB0dXBsZXMuXHJcbiAgICBDYXRlZ29yaWNhbEZpbHRlclNlYXJjaCA9ICdjYXRlZ29yaWNhbC1maWx0ZXItc2VhcmNoJyxcclxuXHJcbiAgICAvLyBDbGVhciBhbGwgbWVtYmVycyBmcm9tIHRoZSB0YWJsZSBvZiB0aGUgaWRlbnRpZmllZCBjYWNoZS5cclxuICAgIENhdGVnb3JpY2FsRmlsdGVyQ2xlYXJSZWxhdGlvbmFsQ2FjaGUgPSAnY2F0ZWdvcmljYWwtZmlsdGVyLWNsZWFyLXJlbGF0aW9uYWwtY2FjaGUnLFxyXG5cclxuICAgIC8vIENyZWF0ZSB0dXBsZXMgZm9yIGFuIGV4aXN0aW5nIGZpbHRlciBmcm9tIHN1cHBsaWVkIHRleHQuXHJcbiAgICBHZXRDYXRlZ29yaWNhbEZpbHRlclR1cGxlc0Zyb21UZXh0ID0gJ2dldC1jYXRlZ29yaWNhbC1maWx0ZXItdHVwbGVzLWZyb20tdGV4dCcsXHJcblxyXG4gICAgLy8gUmV0dXJucyBhIHByZXNtb2RlbCBiYWNraW5nIGEgY2F0ZWdvcmljYWwgZmlsdGVyLCBpbml0aWFsaXppbmcgYSBkYXRhIGNhY2hlIGZvciBmYXN0IGxvb2t1cCBvZiB0aGUgZmlsdGVyJ3MgbWVtYmVyIGRvbWFpbi5cclxuICAgIEdldENhdGVnb3JpY2FsRmlsdGVyID0gJ2dldC1jYXRlZ29yaWNhbC1maWx0ZXInLFxyXG5cclxuICAgIC8vIFJldHJpZXZlcyBhIHBhZ2Ugb2YgZGF0YSB0byBkaXNwbGF5IGluIHRoZSBmaWx0ZXIncyBsaXN0IGRvbWFpblxyXG4gICAgR2V0Q2F0ZWdvcmljYWxGaWx0ZXJEb21haW5QYWdlID0gJ2dldC1jYXRlZ29yaWNhbC1maWx0ZXItZG9tYWluLXBhZ2UnLFxyXG5cclxuICAgIC8vIFJlc2V0IGZpbHRlciB0byBjb21taXR0ZWQgc3RhdGVcclxuICAgIFJlc2V0Q2F0ZWdvcmljYWxGaWx0ZXJEZWZlcnJlZCA9ICdyZXNldC1jYXRlZ29yaWNhbC1maWx0ZXItZGVmZXJyZWQnLFxyXG5cclxuICAgIC8vIFVzZSB1bmNvbW1pdHRlZCBzdGF0ZSB0byByZXNldCB0aGUgZmlsdGVyJ3MgY29udHJvbGxlclxyXG4gICAgUmVjcmVhdGVDYXRlZ29yaWNhbEZpbHRlckNvbnRyb2xsZXIgPSAncmVjcmVhdGUtY2F0ZWdvcmljYWwtZmlsdGVyLWNvbnRyb2xsZXInLFxyXG5cclxuICAgIC8vIFZhbGlkYXRlcyBhIENhdGVncm9pY2FsIEZpbHRlciBuYW1lLlxyXG4gICAgVmFsaWRhdGVDYXRlZ29yaWNhbEZpbHRlck5hbWUgPSAndmFsaWRhdGUtY2F0ZWdvcmljYWwtZmlsdGVyLW5hbWUnLFxyXG5cclxuICAgIC8vIFJldHJpZXZlcyB0aGUgZmllbGQgYWdncmVnYXRpb25zIGFsbG93ZWQgZm9yIHRoZSBmaWVsZCBiZWluZyBmaWx0ZXJlZC5cclxuICAgIEdldEZpbHRlckZpZWxkQWdncmVnYXRpb25zID0gJ2dldC1maWx0ZXItZmllbGQtYWdncmVnYXRpb25zJyxcclxuXHJcbiAgICAvLyBHZXRzIGEgc3VtbWFyeSBvZiB0aGUgZmlsdGVyIHBhdHRlcm4uXHJcbiAgICBHZXRDYXRlZ29yaWNhbEZpbHRlclBhdHRlcm5TdW1tYXJ5ID0gJ2dldC1jYXRlZ29yaWNhbC1maWx0ZXItcGF0dGVybi1zdW1tYXJ5JyxcclxuXHJcbiAgICAvLyBHZXRzIGEgc3VtbWVyeSBvZiB0aGUgZmlsdGVyIGNvbmRpdGlvbi5cclxuICAgIEdldENhdGVnb3JpY2FsRmlsdGVyQ29uZGl0aW9uU3VtbWFyeSA9ICdnZXQtY2F0ZWdvcmljYWwtZmlsdGVyLWNvbmRpdGlvbi1zdW1tYXJ5JyxcclxuXHJcbiAgICAvLyBMb2FkIHRoZSBjdXJyZW50IG1pbmltdW0gYW5kIG1heGltdW0gZGF0YSB2YWx1ZSByYW5nZSBmb3IgdGhlIGNvbmRpdGlvbiBmaWVsZC5cclxuICAgIExvYWRDYXRlZ29yaWNhbEZpbHRlckNvbmRpdGlvbkZpZWxkVmFsdWVSYW5nZSA9ICdsb2FkLWNhdGVnb3JpY2FsLWZpbHRlci1jb25kaXRpb24tZmllbGQtdmFsdWUtcmFuZ2UnLFxyXG5cclxuICAgIC8vIFZhbGlkYXRlcyBhIENhdGVnb3JpY2FsIEZpbHRlcidzIGNvbmRpdGlvbiBmb3JtdWxhIGFuZCByZS13cml0ZXMgaXQuXHJcbiAgICBWYWxpZGF0ZUNhdGVnb3JpY2FsRmlsdGVyQ29uZGl0aW9uRm9ybXVsYSA9ICd2YWxpZGF0ZS1jYXRlZ29yaWNhbC1maWx0ZXItY29uZGl0aW9uLWZvcm11bGEnLFxyXG5cclxuICAgIC8vIEdldHMgYSBzdW1tZXJ5IG9mIHRoZSBmaWx0ZXIgbGltaXQuXHJcbiAgICBHZXRDYXRlZ29yaWNhbEZpbHRlckxpbWl0U3VtbWFyeSA9ICdnZXQtY2F0ZWdvcmljYWwtZmlsdGVyLWxpbWl0LXN1bW1hcnknLFxyXG5cclxuICAgIC8vIFZhbGlkYXRlcyBhIENhdGVnb3JpY2FsIEZpbHRlcidzIGxpbWl0IGNvdW50LlxyXG4gICAgVmFsaWRhdGVDYXRlZ29yaWNhbEZpbHRlckxpbWl0Q291bnQgPSAndmFsaWRhdGUtY2F0ZWdvcmljYWwtZmlsdGVyLWxpbWl0LWNvdW50JyxcclxuXHJcbiAgICAvLyBWYWxpZGF0ZXMgYSBDYXRlZ29yaWNhbCBGaWx0ZXIncyBsaW1pdCBmb3JtdWxhLCBhbmQgcmUtd3JpdGVzIHRoZSBmb3JtdWxhLlxyXG4gICAgVmFsaWRhdGVDYXRlZ29yaWNhbEZpbHRlckxpbWl0Rm9ybXVsYSA9ICd2YWxpZGF0ZS1jYXRlZ29yaWNhbC1maWx0ZXItbGltaXQtZm9ybXVsYScsXHJcblxyXG4gICAgLy8gVmFsaWRhdGVzIGEgQ2F0ZWdvcmljYWwgRmlsdGVyJ3MgbGltaXQuXHJcbiAgICBWYWxpZGF0ZUNhdGVnb3JpY2FsRmlsdGVyTGltaXQgPSAndmFsaWRhdGUtY2F0ZWdvcmljYWwtZmlsdGVyLWxpbWl0JyxcclxuXHJcbiAgICAvLyBJbmZvcm0gY2FjaGUgd2hlbiBhIHVzZXIgY2hhbmdlcyB0aGUgcmFuZ2VcclxuICAgIENhdGVnb3JpY2FsRmlsdGVyU2V0UmFuZ2VUeXBlRGVmZXJyZWQgPSAnY2F0ZWdvcmljYWwtZmlsdGVyLXNldC1yYW5nZS10eXBlLWRlZmVycmVkJyxcclxuXHJcbiAgICAvLyBJbmZvcm0gY2FjaGUgd2hlbiBhIHVzZXIgY2hhbmdlcyB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZXhjbHVzaXZlXHJcbiAgICBDYXRlZ29yaWNhbEZpbHRlclNldFNlbGVjdGlvbkV4Y2x1c2l2ZURlZmVycmVkID0gJ2NhdGVnb3JpY2FsLWZpbHRlci1zZXQtc2VsZWN0aW9uLWV4Y2x1c2l2ZS1kZWZlcnJlZCcsXHJcblxyXG4gICAgLy8gSW5mb3JtIGNhY2hlIHdoZW4gYSB1c2VyIGNoYW5nZXMgd2hldGhlciBhbiBlbXB0eSBzZWxlY3Rpb24gc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBzZWxlY3Rpb24gb2YgJ0FsbCcgaW4gYSBNYW51YWwgc2VsZWN0aW9uIG1vZGVcclxuICAgIENhdGVnb3JpY2FsRmlsdGVyU2V0VXNlQWxsV2hlbk1hbnVhbElzRW1wdHlEZWZlcnJlZCA9ICdjYXRlZ29yaWNhbC1maWx0ZXItc2V0LXVzZS1hbGwtd2hlbi1tYW51YWwtaXMtZW1wdHktZGVmZXJyZWQnLFxyXG5cclxuICAgIC8vIEluZm9ybSBjYWNoZSB3aGVuIGEgdXNlciBhbHRlcnMgdGhlIHByZXNldCB0eXBlXHJcbiAgICBDYXRlZ29yaWNhbEZpbHRlclNldFByZXNldFR5cGVEZWZlcnJlZCA9ICdjYXRlZ29yaWNhbC1maWx0ZXItc2V0LXByZXNldC10eXBlLWRlZmVycmVkJyxcclxuXHJcbiAgICAvLyBJbmZvcm0gY2FjaGUgdGhlIHVzZXIgaGFzIHNlbGVjdGVkIG9uZSBvciBtb3JlIG1lbWJlcnNcclxuICAgIENhdGVnb3JpY2FsRmlsdGVyU2VsZWN0UmVsYXRpb25hbE1lbWJlcnNEZWZlcnJlZCA9ICdjYXRlZ29yaWNhbC1maWx0ZXItc2VsZWN0LXJlbGF0aW9uYWwtbWVtYmVycy1kZWZlcnJlZCcsXHJcblxyXG4gICAgLy8gSW5mb3JtIGNhY2hlIHRoZSB1c2VyIGhhcyBkZXNlbGVjdGVkIG9uZSBvciBtb3JlIG1lbWJlcnNcclxuICAgIENhdGVnb3JpY2FsRmlsdGVyRGVzZWxlY3RSZWxhdGlvbmFsTWVtYmVyc0RlZmVycmVkID0gJ2NhdGVnb3JpY2FsLWZpbHRlci1kZXNlbGVjdC1yZWxhdGlvbmFsLW1lbWJlcnMtZGVmZXJyZWQnLFxyXG5cclxuICAgIC8vIEluZm9ybSBjYWNoZSB3aGVuIGEgdXNlciBzZWxlY3RzIGV2ZXJ5dGhpbmcgaW4gdGhlIGRvbWFpblxyXG4gICAgQ2F0ZWdvcmljYWxGaWx0ZXJTZWxlY3RBbGxSZWxhdGlvbmFsTWVtYmVyc0RlZmVycmVkID0gJ2NhdGVnb3JpY2FsLWZpbHRlci1zZWxlY3QtYWxsLXJlbGF0aW9uYWwtbWVtYmVycy1kZWZlcnJlZCcsXHJcblxyXG4gICAgLy8gSW5mb3JtIGNhY2hlIHdoZW4gYSB1c2VyIGRlc2VsZWN0cyBldmVyeXRoaW5nIGluIHRoZSBkb21haW5cclxuICAgIENhdGVnb3JpY2FsRmlsdGVyRGVzZWxlY3RBbGxSZWxhdGlvbmFsTWVtYmVyc0RlZmVycmVkID0gJ2NhdGVnb3JpY2FsLWZpbHRlci1kZXNlbGVjdC1hbGwtcmVsYXRpb25hbC1tZW1iZXJzLWRlZmVycmVkJyxcclxuXHJcbiAgICAvLyBJbmZvcm0gY2FjaGUgdGhlIHVzZXIgd2FudHMgdG8gc2VlIGEgZGlmZmVyZW50IGRvbWFpbiAoZS5nLiByZWxldmFudCB2YWx1ZXMgb25seSlcclxuICAgIENhdGVnb3JpY2FsRmlsdGVyU2V0RG9tYWluVHlwZURlZmVycmVkID0gJ2NhdGVnb3JpY2FsLWZpbHRlci1zZXQtZG9tYWluLXR5cGUtZGVmZXJyZWQnLFxyXG5cclxuICAgIC8vIEdldHMgYSBxdWFudGl0YXRpdmUgZmlsdGVyIGRpc3BsYXkgcHJlc2VudGF0aW9uIG1vZGVsIGZvciB0aGUgc3BlY2lmaWVkIGZpZWxkLlxyXG4gICAgR2V0UXVhbnRpdGF0aXZlRmlsdGVyID0gJ2dldC1xdWFudGl0YXRpdmUtZmlsdGVyJyxcclxuXHJcbiAgICAvLyBMb2FkcyB0aGUgcXVhbnRpdGF0aXZlIGZpbHRlciBkb21haW4gdmFsdWVzIGZyb20gdGhlIGRhdGEuXHJcbiAgICBMb2FkUXVhbnRpdGF0aXZlRmlsdGVyRG9tYWluID0gJ2xvYWQtcXVhbnRpdGF0aXZlLWZpbHRlci1kb21haW4nLFxyXG5cclxuICAgIC8vIExvYWRzIHRoZSBxdWFudGl0YXRpdmUgZmlsdGVyIGRvbWFpbiByYW5nZSB2YWx1ZXMgZnJvbSB0aGUgZGF0YS5cclxuICAgIExvYWRRdWFudGl0YXRpdmVGaWx0ZXJSYW5nZSA9ICdsb2FkLXF1YW50aXRhdGl2ZS1maWx0ZXItcmFuZ2UnLFxyXG5cclxuICAgIC8vIEFwcGxpZXMgdGhlIGNoYW5nZXMgdG8gYSBxdWFudGl0YXRpdmUgZmlsdGVyLlxyXG4gICAgQXBwbHlRdWFudGl0YXRpdmVGaWx0ZXJSYW5nZSA9ICdhcHBseS1xdWFudGl0YXRpdmUtZmlsdGVyLXJhbmdlJyxcclxuXHJcbiAgICAvLyBHZXRzIGEgcmVsYXRpdmUgZGF0ZSBmaWx0ZXIgZGlzcGxheSBwcmVzZW50YXRpb24gbW9kZWwgZm9yIHRoZSBzcGVjaWZpZWQgZmllbGQuXHJcbiAgICBHZXRSZWxhdGl2ZURhdGVGaWx0ZXIgPSAnZ2V0LXJlbGF0aXZlLWRhdGUtZmlsdGVyJyxcclxuXHJcbiAgICAvLyBHZXRzIHRoZSByZWxhdGl2ZSBkYXRlIGZpbHRlciB3aWRnZXQgbGFiZWxzIGJhc2VkIG9uIHRoZSBkaXNwbGF5IHByZXNlbmF0aW9uIG1vZGVsLlxyXG4gICAgR2V0UmVsYXRpdmVEYXRlRmlsdGVyTGFiZWxzID0gJ2dldC1yZWxhdGl2ZS1kYXRlLWZpbHRlci1sYWJlbHMnLFxyXG5cclxuICAgIC8vIEFwcGxpZXMgYSByZWxhdGl2ZSBkYXRlIHRvIGEgZmlsdGVyLlxyXG4gICAgQXBwbHlSZWxhdGl2ZURhdGVGaWx0ZXIgPSAnYXBwbHktcmVsYXRpdmUtZGF0ZS1maWx0ZXInLFxyXG5cclxuICAgIC8vIFNldCB3aGV0aGVyIGZpbHRlcnMgYXBwbHkgdG8gdG90YWxzIGFzIHdlbGwgYXMgbm9uLXRvdGFscyB0YWJsZSBjYWxjc1xyXG4gICAgRmlsdGVyQXBwbHlUb1RvdGFsVGFibGVDYWxjcyA9ICdmaWx0ZXItYXBwbHktdG8tdG90YWwtdGFibGUtY2FsY3MnLFxyXG5cclxuICAgIC8vIEdldHMgdGhlIGxpc3Qgb2YgZmlsdGVycyB1c2VkIGluIGEgd29ya3NoZWV0XHJcbiAgICBHZXRXb3Jrc2hlZXRGaWx0ZXJzID0gJ2dldC13b3Jrc2hlZXQtZmlsdGVycycsXHJcblxyXG4gICAgLy8gR2V0cyB0aGUgZG9tYWluIGZvciBhIGNhdGVnb3JpY2FsIEZpbHRlclxyXG4gICAgR2V0Q2F0ZWdvcmljYWxEb21haW4gPSAnZ2V0LWNhdGVnb3JpY2FsLWRvbWFpbicsXHJcblxyXG4gICAgLy8gR2V0cyB0aGUgZG9tYWluIGZvciBhIHF1YW50aXRhdGl2ZSBGaWx0ZXJcclxuICAgIEdldFF1YW50aXRhdGl2ZURvbWFpbiA9ICdnZXQtcXVhbnRpdGF0aXZlLWRvbWFpbicsXHJcblxyXG4gICAgLy8gQ3JlYXRlcyBhIG5ldyBmaWx0ZXIgZm9yIGEgY29tYmluZWQgZmllbGQgKEdyb3VwKS5cclxuICAgIENyZWF0ZUdyb3VwRmlsdGVyID0gJ2NyZWF0ZS1ncm91cC1maWx0ZXInLFxyXG5cclxuICAgIC8vIENyZWF0ZXMgYSBkYXRhc291cmNlIGZpbHRlciBzdG9yZSBhbmQgcmV0dXJucyBhIGxpc3Qgb2YgdGhlIGN1cnJlbnQgZGF0YXNvdXJjZSBmaWx0ZXJzLlxyXG4gICAgQ3JlYXRlRGF0YXNvdXJjZUZpbHRlclN0b3JlID0gJ2NyZWF0ZS1kYXRhc291cmNlLWZpbHRlci1zdG9yZScsXHJcblxyXG4gICAgLy8gQ29tbWl0cyB0aGUgcGVuZGluZyBkYXRhc291cmNlIGZpbHRlciBjaGFuZ2VzIGluIHRoZSBmaWx0ZXIgc3RvcmUuXHJcbiAgICBDb21taXREYXRhc291cmNlRmlsdGVyU3RvcmUgPSAnY29tbWl0LWRhdGFzb3VyY2UtZmlsdGVyLXN0b3JlJyxcclxuXHJcbiAgICAvLyBHZXRzIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2UgZmllbGRzIHRoYXQgY2FuIGJlIGZpbHRlcmVkLlxyXG4gICAgR2V0RGF0YXNvdXJjZUZpbHRlckZpZWxkUGlja2VyTW9kZWwgPSAnZ2V0LWRhdGFzb3VyY2UtZmlsdGVyLWZpZWxkLXBpY2tlci1tb2RlbCcsXHJcblxyXG4gICAgLy8gR2V0IGZpZWxkIGluZm9ybWF0aW9uIG5lZWRlZCBmb3IgY3JlYXRpbmcgYSBkYXRhc291cmNlIGZpbHRlci5cclxuICAgIEdldERhdGFzb3VyY2VGaWx0ZXJGaWVsZEluZm8gPSAnZ2V0LWRhdGFzb3VyY2UtZmlsdGVyLWZpZWxkLWluZm8nLFxyXG5cclxuICAgIC8vIEdldHMgYSBmaWx0ZXIgcHJlc2VudGF0aW9uIG1vZGVsIGZvcm0gYSBmaWx0ZXIgc3RvcmUuXHJcbiAgICBHZXRGaWx0ZXJGcm9tU3RvcmUgPSAnZ2V0LWZpbHRlci1mcm9tLXN0b3JlJyxcclxuXHJcbiAgICAvLyBSZW1vdmVzIGEgZmlsdGVyIGZyb20gYSBmaWx0ZXIgc3RvcmUuXHJcbiAgICBSZW1vdmVGaWx0ZXJGcm9tU3RvcmUgPSAncmVtb3ZlLWZpbHRlci1mcm9tLXN0b3JlJyxcclxuXHJcbiAgICAvLyBSZWxlYXNlcyBhIGZpbHRlciBzdG9yZSwgYW5kIGl0cyByZXNvdXJjZXMsIG9uY2UgaXQgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cclxuICAgIFJlbGVhc2VGaWx0ZXJTdG9yZSA9ICdyZWxlYXNlLWZpbHRlci1zdG9yZScsXHJcblxyXG4gICAgLy8gUmV0dXJucyB3aGV0aGVyIGRhdGUgcHJvcGVydGllcyBzaG91bGQgYmUgZW5hYmxlZFxyXG4gICAgR2V0RGF0YVNvdXJjZURhdGVQcm9wZXJ0aWVzQXJlRW5hYmxlZCA9ICdnZXQtZGF0YXNvdXJjZS1kYXRlLXByb3BlcnRpZXMtYXJlLWVuYWJsZWQnLFxyXG5cclxuICAgIC8vIEdldCBwcmVzbW9kZWwgdG8gcG9wdWxhdGUgZGF0ZSBwcm9wZXJ0aWVzIGRpYWxvZ1xyXG4gICAgR2V0RGF0YVNvdXJjZURhdGVQcm9wZXJ0aWVzID0gJ2dldC1kYXRhc291cmNlLWRhdGUtcHJvcGVydGllcycsXHJcblxyXG4gICAgLy8gQXBwbHkgbmV3IHNldHRpbmdzIGZvciBkYXRlIHByb3BlcnRpZXNcclxuICAgIEVkaXREYXRhU291cmNlRGF0ZVByb3BlcnRpZXMgPSAnZWRpdC1kYXRhc291cmNlLWRhdGUtcHJvcGVydGllcycsXHJcblxyXG4gICAgLy8gQXBwbHkgZGF0YSBzb3VyY2UgZGVsdGEgdG8gZGF0YSBzb3VyY2VcclxuICAgIEFwcGx5RGF0YVNvdXJjZURlbHRhID0gJ2FwcGx5LWRhdGFzb3VyY2UtZGVsdGEnLFxyXG5cclxuICAgIC8vIEdlbmVyYXRlIGRhdGEgc291cmNlIGRlbHRhIGZyb20gbG9jYWwgZGF0YSBzb3VyY2VcclxuICAgIEdldERhdGFTb3VyY2VEZWx0YSA9ICdnZXQtZGF0YXNvdXJjZS1kZWx0YScsXHJcblxyXG4gICAgLy8gR2V0cyB0aGUgcHJlcyBtb2RlbCBmb3IgdGhlIFNhdmUgRGF0YXNvdXJjZSBkaWFsb2dcclxuICAgIEdldFdlYlNhdmVEYXRhc291cmNlRGlhbG9nID0gJ2dldC13ZWItc2F2ZS1kYXRhc291cmNlLWRpYWxvZycsXHJcblxyXG4gICAgLy8gQ3JlYXRlcyBhIGRpYWxvZyBpbiB0aGUgYnJvd3NlciB0byByZW5hbWUgdGhlIGRhdGFzb3VyY2VcclxuICAgIFdlYlJlbmFtZURhdGFzb3VyY2VEaWFsb2cgPSAnd2ViLXJlbmFtZS1kYXRhc291cmNlLWRpYWxvZycsXHJcblxyXG4gICAgLy8gU3dpdGNoZXMgdGhlIHZpZXcgdG8gdGhlIGRhdGEgdGFiIGZvciBlZGl0aW5nXHJcbiAgICBXZWJFZGl0RGF0YVNvdXJjZSA9ICd3ZWItZWRpdC1kYXRhLXNvdXJjZScsXHJcblxyXG4gICAgLy8gVG9nZ2xlcyBqb2luaW5nIG9uIG51bGwgdmFsdWVzXHJcbiAgICBUb2dnbGVJTkRKb2luU2VtYW50aWNzID0gJ3RvZ2dsZS1pbmQtam9pbi1zZW1hbnRpY3MnLFxyXG5cclxuICAgIC8vIEpvaW4gTnVsbCBWYWx1ZXMgdG8gTnVsbCBWYWx1ZXNcclxuICAgIFRvZ2dsZUlOREpvaW5TZW1hbnRpY3NXcmFwcGVyID0gJ3RvZ2dsZS1pbmRqb2luLXNlbWFudGljcy13cmFwcGVyJyxcclxuXHJcbiAgICAvLyBUb2dnbGVzIHJlZmVyZW50aWFsIGludGVncml0eVxyXG4gICAgVG9nZ2xlUmVmZXJlbnRpYWxJbnRlZ3JpdHkgPSAndG9nZ2xlLXJlZmVyZW50aWFsLWludGVncml0eScsXHJcblxyXG4gICAgLy8gUmV0cmlldmVzIGxpc3Qgb2Ygc3VtbWFyeSBvYmplY3RzLCBvbmUgZm9yIGVhY2ggY29ubmVjdGlvbiBpbiBhIGRhdGFzb3VyY2UuXHJcbiAgICBHZXRDb25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJ5UHJlc01vZGVscyA9ICdnZXQtY29ubmVjdGlvbi1kZXNjcmlwdGlvbi1zdW1tYXJ5LXByZXMtbW9kZWxzJyxcclxuXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRIaWdobGlnaHRlZERhdGEgPSAnZ2V0LWhpZ2hsaWdodGVkLWRhdGEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U2VsZWN0aW9uRGF0YSA9ICdnZXQtc2VsZWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNlbGVjdCA9ICdzZWxlY3QnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2VsZWN0QWxsID0gJ3NlbGVjdC1hbGwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2VsZWN0QnlWYWx1ZSA9ICdzZWxlY3QtYnktdmFsdWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2VsZWN0Tm9uZUluY2x1ZGluZ01hc3RlciA9ICdzZWxlY3Qtbm9uZS1pbmNsdWRpbmctbWFzdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZE1hbnVhbEl0ZW1zVG9GaWx0ZXIgPSAnYWRkLW1hbnVhbC1pdGVtcy10by1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2F0ZWdvcmljYWxGaWx0ZXIgPSAnY2F0ZWdvcmljYWwtZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENhdGVnb3JpY2FsRmlsdGVyQnlJbmRleCA9ICdjYXRlZ29yaWNhbC1maWx0ZXItYnktaW5kZXgnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2hhbmdlU2hhcmVkRmlsdGVyID0gJ2NoYW5nZS1zaGFyZWQtZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyQ29udGV4dEZpbHRlcnMgPSAnY2xlYXItY29udGV4dC1maWx0ZXJzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyRXhpc3RpbmdGaWx0ZXIgPSAnY2xlYXItZXhpc3RpbmctZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlZmF1bHRGaWx0ZXIgPSAnZGVmYXVsdC1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRmlsdGVyR2VvID0gJ2ZpbHRlci1nZW8nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRmlsdGVyTmVnID0gJ2ZpbHRlci1uZWcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRmlsdGVyTnVsbHMgPSAnZmlsdGVyLW51bGxzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZpbHRlclRhcmdldHMgPSAnZmlsdGVyLXRhcmdldHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U2hhcmVkRmlsdGVyUHJlc01vZGVsID0gJ2dldC1zaGFyZWQtZmlsdGVyLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGllcmFyY2hpY2FsRmlsdGVyID0gJ2hpZXJhcmNoaWNhbC1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgS2VlcE9ubHlPckV4Y2x1ZGUgPSAna2VlcC1vbmx5LW9yLWV4Y2x1ZGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmFuZ2VGaWx0ZXIgPSAncmFuZ2UtZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbERhdGVGaWx0ZXIgPSAncmVsYXRpdmUtZGF0ZS1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzZXRGaWx0ZXIgPSAncmVzZXQtZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dHZW9BdERlZmF1bHQgPSAnc2hvdy1nZW8tYXQtZGVmYXVsdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93U1ZBdERlZmF1bHQgPSAnc2hvdy1zdi1hdC1kZWZhdWx0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFRvZ2dsZUxvY2tRdWlja0ZpbHRlcnMgPSAndG9nZ2xlLWxvY2stcXVpY2stZmlsdGVycycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZGREYXRhQ29ubmVjdGlvbiA9ICdhZGQtZGF0YS1jb25uZWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZERyaWxsUGF0aCA9ICdhZGQtZHJpbGwtcGF0aCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZGRDcmVkZW50aWFsc0Zyb21LZXljaGFpbiA9ICdhZGQtY3JlZGVudGlhbHMtZnJvbS1rZXljaGFpbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZGRDcmVkZW50aWFsc0Zyb21LZXljaGFpbkZpbGUgPSAnYWRkLWNyZWRlbnRpYWxzLWZyb20ta2V5Y2hhaW4tZmlsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZGRGaWVsZEZvbGRlciA9ICdhZGQtZmllbGQtZm9sZGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFN1YnRvdGFscyA9ICdhZGQtc3VidG90YWxzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFRvRHJpbGxQYXRoID0gJ2FkZC10by1kcmlsbC1wYXRoJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFRvRmllbGRGb2xkZXIgPSAnYWRkLXRvLWZpZWxkLWZvbGRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZ2dyZWdhdGVNZWFzdXJlc0ZsYWcgPSAnYWdncmVnYXRlLW1lYXN1cmVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFwcGx5Q2FsY3VsYXRpb24gPSAnYXBwbHktY2FsY3VsYXRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXBwbHlQYWdlU2V0dXBPcHRpb25zID0gJ2FwcGx5LXBhZ2Utc2V0dXAtb3B0aW9ucycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBcHBseVRhYmxlT3B0aW9ucyA9ICdhcHBseS10YWJsZS1vcHRpb25zJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFwcGx5VHlwZUluUGlsbCA9ICdhcHBseS10eXBlLWluLXBpbGwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXNzZXJ0ID0gJ2Fzc2VydCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBdHRlbXB0Q29ubmVjdERhdGFTb3VyY2VzT25TaGVldCA9ICdhdHRlbXB0LWNvbm5lY3QtZGF0YXNvdXJjZXMtb24tc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXR0ZW1wdENvbm5lY3RXb3JrYm9vayA9ICdhdHRlbXB0LWNvbm5lY3Qtd29ya2Jvb2snLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXR0ZW1wdERhdGFTb3VyY2VzQ29ubmVjdGlvbiA9ICdhdHRlbXB0LWRhdGFzb3VyY2VzLWNvbm5lY3Rpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXV0b1VwZGF0ZXMgPSAnYXV0by11cGRhdGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQnJ1c2ggPSAnaGlnaGxpZ2h0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEJydXNoU3BlY2lhbCA9ICdoaWdobGlnaHQtc3BlY2lhbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBCdWlsZERhdGFTY2hlbWFEYXRhU291cmNlQ29udGV4dE1lbnUgPSAnYnVpbGQtZGF0YS1zY2hlbWEtZGF0YS1zb3VyY2UtY29udGV4dC1tZW51JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEJ1aWxkRGF0YVNjaGVtYUNvbnRleHRNZW51ID0gJ2J1aWxkLWRhdGEtc2NoZW1hLWNvbnRleHQtbWVudScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBCdWlsZERhdGFTY2hlbWFGaWVsZENvbnRleHRNZW51ID0gJ2J1aWxkLWRhdGEtc2NoZW1hLWZpZWxkLWNvbnRleHQtbWVudScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBCdWlsZERhdGFTY2hlbWFEcmlsbFBhdGhDb250ZXh0TWVudSA9ICdidWlsZC1kYXRhLXNjaGVtYS1kcmlsbC1wYXRoLWNvbnRleHQtbWVudScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBCdWlsZEZpbGVUYWJsZUluZm9QcmVzTW9kZWwgPSAnYnVpbGQtZmlsZS10YWJsZS1pbmZvLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQnVpbGRTaGVldFRhYkNvbnRleHRNZW51ID0gJ2J1aWxkLXNoZWV0LXRhYi1jb250ZXh0LW1lbnUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2FuY2VsRGF0YVNvdXJjZVByZXNNb2RlbCA9ICdjYW5jZWwtZGF0YXNvdXJjZS1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENhdEJpbk1lcmdlU3BsaXRMYWJlbCA9ICdjYXRlZ29yaWNhbC1iaW4tbWVyZ2Utc3BsaXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2F0ZWdvcmljYWxRdWlja0ZpbHRlckVkaXQgPSAnY2F0ZWdvcmljYWwtcXVpY2stZmlsdGVyLWVkaXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2F0ZWdvcmljYWxRdWlja0ZpbHRlckV4Y2x1ZGVWYWx1ZXMgPSAnY2F0ZWdvcmljYWwtcXVpY2stZmlsdGVyLWV4Y2x1ZGUtdmFsdWVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENhdGVnb3JpY2FsUXVpY2tGaWx0ZXJJbmNsdWRlQWxsV2hlbkVtcHR5ID0gJ2NhdGVnb3JpY2FsLXF1aWNrLWZpbHRlci1pbmNsdWRlLWFsbC13aGVuLWVtcHR5JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENhdGVnb3JpY2FsUXVpY2tGaWx0ZXJNb2RlID0gJ2NhdGVnb3JpY2FsLXF1aWNrLWZpbHRlci1tb2RlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENhdGVnb3JpY2FsUXVpY2tGaWx0ZXJQYXR0ZXJuID0gJ2NhdGVnb3JpY2FsLXF1aWNrLWZpbHRlci1wYXR0ZXJuJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENoYW5nZUFnZ3JlZ2F0aW9uID0gJ2NoYW5nZS1hZ2dyZWdhdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VBbHBoYUxldmVsID0gJ2NoYW5nZS1hbHBoYS1sZXZlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VCb3JkZXIgPSAnY2hhbmdlLWJvcmRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VGaWVsZFR5cGUgPSAnY2hhbmdlLWZpZWxkLXR5cGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2hhbmdlRm9yZWNhc3RDb2x1bW5UeXBlID0gJ2NoYW5nZS1mb3JlY2FzdC1jb2x1bW4tdHlwZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VIYWxvID0gJ2NoYW5nZS1oYWxvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENoYW5nZU1hcmtlcnMgPSAnY2hhbmdlLW1hcmtlcnMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2hhbmdlU2l6ZSA9ICdjaGFuZ2Utc2l6ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VTaGVldFRhYkNvbG9yID0gJ2NoYW5nZS1zaGVldC10YWItY29sb3InLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2xlYXJBbGxBeGlzUmFuZ2VzID0gJ2NsZWFyLWF4aXMtcmFuZ2VzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyQ2FsY01vZGVsID0gJ2NsZWFyLWNhbGN1bGF0aW9uLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyRmlsdGVycyA9ICdjbGVhci1maWx0ZXJzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyRm9ybWF0dGluZyA9ICdjbGVhci1mb3JtYXR0aW5nJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyRnV0dXJlID0gJ2NsZWFyLWZ1dHVyZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbGVhckxheW91dCA9ICdjbGVhci1sYXlvdXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2xlYXJRdWlja0ZpbHRlciA9ICdjbGVhci1xdWljay1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2xlYXJTb3J0cyA9ICdjbGVhci1zb3J0cycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbG9zZUNvbm5lY3Rpb24gPSAnY2xvc2UtY29ubmVjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbG9zZURhdGFTb3VyY2UgPSAnY2xvc2UtZGF0YS1zb3VyY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkFkZEdvb2dsZUFuYWx5dGljc0RpbWVuc2lvbiA9ICdjb25uZWN0aW9uLWFkZC1nb29nbGUtYW5hbHl0aWNzLWRpbWVuc2lvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uQWRkR29vZ2xlQW5hbHl0aWNzTWVhc3VyZSA9ICdjb25uZWN0aW9uLWFkZC1nb29nbGUtYW5hbHl0aWNzLW1lYXN1cmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkFkZE5ld1RhYmxlID0gJ2Nvbm5lY3Rpb24tYWRkLW5ldy10YWJsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uQWRkQ29hbGVzY2UgPSAnY29ubmVjdGlvbi1hZGQtY29hbGVzY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkFkZFBpdm90ID0gJ2Nvbm5lY3Rpb24tYWRkLXBpdm90JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25Db252ZXJ0VG9VbmlvbkFuZEVkaXQgPSAnY29ubmVjdGlvbi1jb252ZXJ0LXRvLXVuaW9uLWFuZC1lZGl0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25Db252ZXJ0VG9VbmlvbiA9ICdjb25uZWN0aW9uLWNvbnZlcnQtdG8tdW5pb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkVkaXRVbmlvbiA9ICdjb25uZWN0aW9uLWVkaXQtdW5pb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkFkZE9yRWRpdEJhdGNoVW5pb24gPSAnY29ubmVjdGlvbi1hZGQtb3ItZWRpdC1iYXRjaC11bmlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uQ2hhbmdlVGFibGVQcm9wZXJ0eSA9ICdjb25uZWN0aW9uLWNoYW5nZS10YWJsZS1wcm9wZXJ0eScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uQ291bnRFbnRpdHkgPSAnY29ubmVjdGlvbi1jb3VudC1lbnRpdHknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkRhdGFTZXJ2ZXJGZXRjaE1vcmVEYXRhc291cmNlcyA9ICdjb25uZWN0aW9uLWRhdGFzZXJ2ZXItZmV0Y2gtbW9yZS1kYXRhc291cmNlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRGF0YVNlcnZlclByb2plY3RTZWxlY3QgPSAnY29ubmVjdGlvbi1kYXRhc2VydmVyLWNoYW5nZS1zZWxlY3RlZC1wcm9qZWN0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25EYXRhU2VydmVyVXBkYXRlRmV0Y2hQYXJhbWV0ZXJzID0gJ2Nvbm5lY3Rpb24tZGF0YXNlcnZlci11cGRhdGUtZmV0Y2gtcGFyYW1ldGVycycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRGF0YVNlcnZlckZsdXNoQ2FjaGUgPSAnY29ubmVjdGlvbi1kYXRhc2VydmVyLWZsdXNoLWNhY2hlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25EZWxldGVBbGxUYWJsZXMgPSAnY29ubmVjdGlvbi1kZWxldGUtYWxsLXRhYmxlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRGVsZXRlVGFibGUgPSAnY29ubmVjdGlvbi1kZWxldGUtdGFibGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkVkaXRHb29nbGVBbmFseXRpY3NBY2NvdW50ID0gJ2Nvbm5lY3Rpb24tZWRpdC1nb29nbGUtYW5hbHl0aWNzLWFjY291bnQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkVkaXRHb29nbGVBbmFseXRpY3NEYXRlUmFuZ2UgPSAnY29ubmVjdGlvbi1lZGl0LWdvb2dsZS1hbmFseXRpY3MtZGF0ZS1yYW5nZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRWRpdEdvb2dsZUFuYWx5dGljc01lYXN1cmVHcm91cCA9ICdjb25uZWN0aW9uLWVkaXQtZ29vZ2xlLWFuYWx5dGljcy1tZWFzdXJlLWdyb3VwJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25Ub2dnbGVHQVF1ZXJ5UGFydGl0aW9uaW5nID0gJ2Nvbm5lY3Rpb24tdG9nZ2xlLWdhLXF1ZXJ5LXBhcnRpdGlvbmluZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRWRpdEdvb2dsZUFuYWx5dGljc1Byb3BlcnR5ID0gJ2Nvbm5lY3Rpb24tZWRpdC1nb29nbGUtYW5hbHl0aWNzLXByb3BlcnR5JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25FZGl0R29vZ2xlQW5hbHl0aWNzVmlldyA9ICdjb25uZWN0aW9uLWVkaXQtZ29vZ2xlLWFuYWx5dGljcy12aWV3JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25FZGl0R29vZ2xlQW5hbHl0aWNzU2VnbWVudCA9ICdjb25uZWN0aW9uLWVkaXQtZ29vZ2xlLWFuYWx5dGljcy1zZWdtZW50JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25FZGl0Sm9pbkNsYXVzZXMgPSAnY29ubmVjdGlvbi1lZGl0LWpvaW4tY2xhdXNlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRWRpdEpvaW5UeXBlID0gJ2Nvbm5lY3Rpb24tZWRpdC1qb2luLXR5cGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkVkaXRTUUxUZXh0ID0gJ2Nvbm5lY3Rpb24tZWRpdC1zcWwtdGV4dCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRmV0Y2hFbnRpdHkgPSAnY29ubmVjdGlvbi1mZXRjaC1lbnRpdHknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblNldEZvcmNlRXh0cmFjdFJlZnJlc2ggPSAnY29ubmVjdGlvbi1zZXQtZm9yY2UtZXh0cmFjdC1yZWZyZXNoJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25QcmVwYXJlRGF0YVNvdXJjZUZvckVkaXQgPSAnY29ubmVjdGlvbi1wcmVwYXJlLWRhdGFzb3VyY2UtZm9yLWVkaXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkNsZWFyUmVmcmVzaEF0dHJpYnV0ZXMgPSAnY29ubmVjdGlvbi1jbGVhci1yZWZyZXNoLWF0dHJpYnV0ZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblJlbW92ZUdvb2dsZUFuYWx5dGljc0RpbWVuc2lvbiA9ICdjb25uZWN0aW9uLXJlbW92ZS1nb29nbGUtYW5hbHl0aWNzLWRpbWVuc2lvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uUmVtb3ZlR29vZ2xlQW5hbHl0aWNzTWVhc3VyZSA9ICdjb25uZWN0aW9uLXJlbW92ZS1nb29nbGUtYW5hbHl0aWNzLW1lYXN1cmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblJlbW92ZUNvYWxlc2NlID0gJ2Nvbm5lY3Rpb24tcmVtb3ZlLWNvYWxlc2NlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25SZW1vdmVQaXZvdCA9ICdjb25uZWN0aW9uLXJlbW92ZS1waXZvdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uQWRkRGF0ZVBhcnNlRm9ybWF0cyA9ICdjb25uZWN0aW9uLWFkZC1kYXRlLXBhcnNlLWZvcm1hdHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblJlbmFtZVRhYmxlID0gJ2Nvbm5lY3Rpb24tcmVuYW1lLXRhYmxlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25SZXBsYWNlUmVsYXRpb25XaXRoU1FMVGV4dCA9ICdjb25uZWN0aW9uLXJlcGxhY2UtcmVsYXRpb24td2l0aC1zcWwtdGV4dCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uUmVwbGFjZVRhYmxlID0gJ2Nvbm5lY3Rpb24tcmVwbGFjZS10YWJsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uUmVzZXRUYWJsZUFsaWFzID0gJ2Nvbm5lY3Rpb24tcmVzZXQtdGFibGUtYWxpYXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblNlbGVjdENhdGFsb2cgPSAnY29ubmVjdGlvbi1zZWxlY3QtY2F0YWxvZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU2VsZWN0Q3ViZSA9ICdjb25uZWN0aW9uLXNlbGVjdC1jdWJlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25TZWxlY3RTdG9yZWRQcm9jZWR1cmUgPSAnY29ubmVjdGlvbi1zZWxlY3Qtc3RvcmVkLXByb2NlZHVyZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU2VsZWN0QmlnUXVlcnlMZWdhY3lTUUxDaGVja0JveCA9ICdjb25uZWN0aW9uLXNlbGVjdC1iaWdxdWVyeS1sZWdhY3ktY2hlY2snLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblRvZ2dsZUhhc0hlYWRlclJvdyA9ICdjb25uZWN0aW9uLXRvZ2dsZS1oYXMtaGVhZGVyLXJvdycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uVG9nZ2xlVGFibGVDbGVhbmluZyA9ICdjb25uZWN0aW9uLXRvZ2dsZS10YWJsZS1jbGVhbmluZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uVG9nZ2xlVXNlRXh0cmFjdCA9ICdjb25uZWN0aW9uLXRvZ2dsZS11c2UtZXh0cmFjdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uVmlld1RhYmxlQ2xlYW5pbmdSZXN1bHRzID0gJ2Nvbm5lY3Rpb24tdmlldy10YWJsZS1jbGVhbmluZy1yZXN1bHRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3RUb0RhdGFTZXJ2ZXJTb3VyY2UgPSAnY29ubmVjdC1kYXRhLXNlcnZlci1kYXRhc291cmNlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbnNpZGVyWmVyb3NFbXB0eUZsYWcgPSAnY29uc2lkZXItemVyb3MtZW1wdHknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29udmVydFVubmFtZWRGaWVsZHMgPSAnY29udmVydC11bm5hbWVkLWZpZWxkcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDcmFzaCA9ICdjcmFzaCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDcmVhdGVBZ2dyZWdhdGVSb2xlID0gJ2NyZWF0ZS1hZ2dyZWdhdGUtcm9sZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDcmVhdGVDb25uZWN0aW9uID0gJ2NyZWF0ZS1jb25uZWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZURlZmF1bHRRdWlja0ZpbHRlciA9ICdjcmVhdGUtZGVmYXVsdC1xdWljay1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3JlYXRlVHlwZUluUGlsbCA9ICdjcmVhdGUtdHlwZS1pbi1waWxsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEN1c3RvbURhdGFHcmlkRmllbGRPcmRlciA9ICdjdXN0b20tZGF0YWdyaWQtZmllbGQtb3JkZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3VzdG9tRGF0ZUFnZ3JlZ2F0aW9uID0gJ2N1c3RvbS1kYXRlLWFnZ3JlZ2F0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEN1c3RvbVNwbGl0RmllbGQgPSAnY3VzdG9tLXNwbGl0LWZpZWxkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlYnVnQXNzZXJ0aW9uID0gJ2RlYnVnLWFzc2VydGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEZWNyZW1lbnRQYXJhbWV0ZXJWYWx1ZSA9ICdkZWNyLXBhcmFtZXRlci12YWx1ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEZWxldGVGaWVsZHMgPSAnZGVsZXRlLWNhbGN1bGF0aW9uLWZpZWxkcy1jb21tYW5kJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlbGV0ZVNoZWV0ID0gJ2RlbGV0ZS1zaGVldCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEZXNjcmliZURyaWxsUGF0aCA9ICdkZXNjcmliZS1kcmlsbC1wYXRoJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlc2NyaWJlU29ydEZpbHRlciA9ICdkZXNjcmliZS1zb3J0LWZpbHRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEaXNtaXNzTnVsbFdhcnQgPSAnZGlzbWlzcy1udWxsLXdhcnQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRG9tYWluUXVpY2tGaWx0ZXIgPSAnZG9tYWluLXF1aWNrLWZpbHRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEb3VibGVGcmVlQ3Jhc2ggPSAnZG91YmxlLWZyZWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRHJvcE5vd2hlcmUgPSAnZHJvcC1ub3doZXJlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERyb3BPblNjaGVtYVZpZXdlciA9ICdkcm9wLW9uLXNjaGVtYS12aWV3ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRHJvcE9uU2hlbGYgPSAnZHJvcC1vbi1zaGVsZicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEcm9wT25DYWxjRWRpdG9yID0gJ2Ryb3Atb24tY2FsYy1lZGl0b3InLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRHJvcE9uU2hvd01lID0gJ2Ryb3Atb24tc2hvd21lJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERyb3BQcmVwYXJlID0gJ2Ryb3AtcHJlcGFyZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEdWFsQXhpcyA9ICdkdWFsLWF4aXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRHVwbGljYXRlU2hlZXQgPSAnZHVwbGljYXRlLXNoZWV0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRDb3B5Q2FsYyA9ICdlZGl0LWNvcHktY2FsYycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0RHJvcExpbmVzID0gJ2VkaXQtZHJvcC1saW5lcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0RW51bWVyYXRlZEdyb3VwID0gJ2VkaXQtZW51bWVyYXRlZC1ncm91cCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0TmVzdGVkR3JvdXAgPSAnZWRpdC1uZXN0ZWQtZ3JvdXAnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFBpbGwgPSAnZWRpdC1waWxsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRQcmltaXRpdmVUeXBlID0gJ2VkaXQtcHJpbWl0aXZlLXR5cGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRW5hYmxlQWxsQnJ1c2hpbmcgPSAnZW5hYmxlLWFsbC1oaWdobGlnaHRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVuYWJsZVF1aWNrRmlsdGVyID0gJ2VuYWJsZS1xdWljay1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRW5hYmxlU2hlZXRCcnVzaGluZyA9ICdlbmFibGUtc2hlZXQtaGlnaGxpZ2h0cycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFbmFibGVUaGVtZWRCcnVzaGluZyA9ICdlbmFibGUtdGhlbWVkLWhpZ2hsaWdodHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRW51bWVyYXRlVmFyaWFibGVzID0gJ2VudW1lcmF0ZS12YXJpYWJsZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRW51bWVyYXRlVmFyaWFibGVTZWxlY3Rpb25WYWx1ZXMgPSAnZW51bWVyYXRlLXZhcmlhYmxlLXNlbGVjdGlvbi12YWx1ZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXN0YWJsaXNoQ29ubmVjdGlvbiA9ICdlc3RhYmxpc2gtY29ubmVjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFc3RhYmxpc2hNYXRjaGluZ0Nvbm5lY3Rpb25zID0gJ2VzdGFibGlzaC1tYXRjaGluZy1jb25uZWN0aW9ucycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeHBvcnREYXRhVG9UZXh0ID0gJ2V4cG9ydC1kYXRhLXRvLXRleHQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXh0U3ZjQ29uZmlnID0gJ2V4dC1zdmMtY29uZmlnJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4dFN2Y0NvbmZpZ0Nvbm5lY3QgPSAnZXh0LXN2Yy1jb25maWctY29ubmVjdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeHRyYWN0ID0gJ2V4dHJhY3QnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RGF0YUdyaWRDdXJyZW50VGFibGUgPSAnc2V0LWRhdGEtZ3JpZC1jdXJyZW50LXRhYmxlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZldGNoVGFibGVSZWxldmFuY2UgPSAnZmV0Y2gtdGFibGUtcmVsZXZhbmNlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZldGNoQ2FjaGVkVGFibGVSZWxldmFuY2UgPSAnZmV0Y2gtY2FjaGVkLXRhYmxlLXJlbGV2YW5jZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGbGlwTGFiZWxzID0gJ2ZsaXAtbGFiZWxzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZsb2F0aW5nVG9vbGJhciA9ICd6b29tLWNvbnRyb2xzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZsb2F0aW5nVG9vbGJhclRvZ2dsZSA9ICd6b29tLWNvbnRyb2xzLXRvZ2dsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGb3JlY2FzdENvbmZpZyA9ICdmb3JlY2FzdC1jb25maWcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRm9yZWNhc3RUb2dnbGUgPSAnZm9yZWNhc3QtdG9nZ2xlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZvcm1hdFdvcmtib29rID0gJ2Zvcm1hdC13b3JrYm9vaycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZW9ncmFwaGljU2VhcmNoUXVlcnkgPSAnZ2VvZ3JhcGhpYy1zZWFyY2gtcXVlcnknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2VvZ3JhcGhpY1NlYXJjaExvYWREYXRhID0gJ2dlb2dyYXBoaWMtc2VhcmNoLWxvYWQtZGF0YScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZW9ncmFwaGljU2VhcmNoSXNEYXRhRG9uZUxvYWRpbmcgPSAnZ2VvZ3JhcGhpYy1zZWFyY2gtZGF0YS1kb25lLWxvYWRpbmcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2VvZ3JhcGhpY1NlYXJjaFRvZ2dsZVZpc2liaWxpdHkgPSAnZ2VvZ3JhcGhpYy1zZWFyY2gtdG9nZ2xlLXZpc2liaWxpdHknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0RWRpdENvbm5lY3Rpb25QcmVzTW9kZWwgPSAnZ2V0LWVkaXQtY29ubmVjdGlvbi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEVkaXRFbnVtZXJhdGVkR3JvdXBQcmVzTW9kZWwgPSAnZ2V0LWVkaXQtZW51bWVyYXRlZC1ncm91cC1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEVkaXROZXN0ZWRHcm91cFByZXNNb2RlbCA9ICdnZXQtZWRpdC1uZXN0ZWQtZ3JvdXAtcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRGcmFtZUZpbmRlclByZXNNb2RlbCA9ICdnZXQtZnJhbWUtZmluZGVyLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0R29vZ2xlU2hlZXRzTGlzdFByZXNNb2RlbCA9ICdnZXQtZ29vZ2xlLXNoZWV0cy1saXN0LXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0R29vZ2xlU2hlZXRQYW5lUHJlc01vZGVsID0gJ2dldC1nb29nbGUtc2hlZXQtcGFuZS1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEluaXRpYWxTUUxQcmVzTW9kZWwgPSAnZ2V0LWluaXRpYWwtc3FsLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0UXVlcnlCYW5kaW5nUHJlc01vZGVsID0gJ2dldC1xdWVyeS1iYW5kaW5nLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0VGFiYmVkQXV0aGVudGljYXRpb25QcmVzTW9kZWwgPSAnZ2V0LXRhYmJlZC1hdXRoZW50aWNhdGlvbi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEFjdGl2ZVNoZWV0ID0gJ2dldC1hY3RpdmUtc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0QWxwaGFMZXZlbCA9ICdnZXQtYWxwaGEtbGV2ZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0QXBwQ29uZmlnID0gJ2dldC1hcHAtY29uZmlnJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERpc2FibGVkU2Vjb25kYXJ5RFNGaWVsZHMgPSAnZ2V0LWRpc2FibGVkLXNlY29uZGFyeWRzLWZpZWxkcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRCbGVuZGluZ0ZpZWxkcyA9ICdnZXQtYmxlbmRpbmctZmllbGRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldENhbGN1bGF0aW9uUHJlc01vZGVsID0gJ2dldC1jYWxjdWxhdGlvbi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldENhdGVnb3JpY2FsQ29sb3IgPSAnZ2V0LWNhdGVnb3JpY2FsLWNvbG9yJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldENsaWVudEluZm8gPSAnZ2V0LWNsaWVudC1pbmZvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldENvbW1hbmRzID0gJ2dldC1jb21tYW5kcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRDb25uZWN0aW9uRGVzY3JpcHRpb25QcmVzTW9kZWwgPSAnZ2V0LWNvbm5lY3Rpb24tZGVzY3JpcHRpb24tcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXREU0Ryb3Bkb3duUHJlc01vZGVsID0gJ2dldC1kcy1kcm9wZG93bi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERhdGFQcmV2aWV3V2luZG93TWVzc2FnZVByZXNNb2RlbCA9ICdnZXQtZGF0YS1wcmV2aWV3LXdpbmRvdy1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERhdGFTb3VyY2VQcmVzTW9kZWwgPSAnZ2V0LWRhdGFzb3VyY2UtcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXREYXRhU291cmNlU29ydFByZXNNb2RlbCA9ICdnZXQtZGF0YXNvdXJjZS1zb3J0LXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0RGF0YVNvdXJjZVByb3BlcnRpZXNQcmVzTW9kZWwgPSAnZ2V0LWRhdGFzb3VyY2UtcHJvcGVydGllcy1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldENvbm5lY3Rpb25TZXR0aW5nc1ByZXNNb2RlbCA9ICdnZXQtY29ubmVjdGlvbi1zZXR0aW5ncy1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERhc2hib2FyZCA9ICdnZXQtZGFzaGJvYXJkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERhdGFQcmV2aWV3ID0gJ2dldC1kYXRhLXByZXZpZXcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0RGF0YWJhc2VFbnVtZXJhdGlvblByZXNNb2RlbCA9ICdnZXQtZGF0YWJhc2UtZW51bWVyYXRpb24tcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXREZWZhdWx0Q29sb3IgPSAnZ2V0LWRlZmF1bHQtY29sb3InLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0RGVmYXVsdFNoYXBlID0gJ2dldC1kZWZhdWx0LXNoYXBlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERyYWdQcmVzTW9kZWxGb3JUZXh0ID0gJ2dldC1kcmFnLXByZXMtbW9kZWwtZm9yLXRleHQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0RHJvcFRhcmdldFByZXNNb2RlbCA9ICdnZXQtZHJvcC10YXJnZXQtcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRFZGl0RGF0YVNlcnZlckNvbm5lY3Rpb25QcmVzTW9kZWwgPSAnZ2V0LWVkaXQtZGF0YS1zZXJ2ZXItY29ubmVjdGlvbi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEVkaXREcm9wTGluZXNNb2RlbCA9ICdnZXQtZWRpdC1kcm9wLWxpbmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEVuY29kaW5nU3RhdGUgPSAnZ2V0LWVuY29kaW5nLXN0YXRlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEVuY29kaW5nVHlwZU1lbnVNb2RlbCA9ICdnZXQtZW5jb2RpbmctdHlwZS1tZW51JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEV4dFN2Y0NvbmZpZyA9ICdnZXQtZXh0LXN2Yy1jb25maWcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0Rm9yZWNhc3RQcmVzTW9kZWwgPSAnZ2V0LWZvcmVjYXN0LXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0Sm9pbkRlc2NyaXB0aW9uUHJlc01vZGVsID0gJ2dldC1qb2luLWRlc2NyaXB0aW9uLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0UXVpY2tGaWx0ZXIgPSAnZ2V0LXF1aWNrLWZpbHRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRRdWlja0ZpbHRlcnMgPSAnZ2V0LXF1aWNrLWZpbHRlcnMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0UmVmZXJlbmNlTGluZVByZXNNb2RlbCA9ICdnZXQtcmVmZXJlbmNlLWxpbmUtcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRQYXJhbWV0ZXJzID0gJ2dldC1wYXJhbWV0ZXJzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFBhcmFtZXRlck1vZGVscyA9ICdnZXQtcGFyYW1ldGVyLW1vZGVscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRQYXJhbWV0ZXJzUmVnaXN0cnlJbmZvID0gJ2dldC1wYXJhbXMtcmVnaXN0cnktaW5mbycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRQaXZvdFByZXNNb2RlbCA9ICdnZXQtcGl2b3QtcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRTY2VuZSA9ICdnZXQtc2NlbmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U2NoZW1hRW51bWVyYXRpb25QcmVzTW9kZWwgPSAnZ2V0LXNjaGVtYS1lbnVtZXJhdGlvbi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFNoZWV0c0luZm8gPSAnZ2V0LXNoZWV0cy1pbmZvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFNob3dNZSA9ICdnZXQtc2hvdy1tZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRTdGFuZGFyZENvbm5lY3Rpb25FbnVtZXJhdGlvblByZXNNb2RlbCA9ICdnZXQtc3RhbmRhcmQtY29ubmVjdGlvbi1lbnVtZXJhdGlvbi1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFN0b3JlZFByb2NlZHVyZUVudW1lcmF0aW9uUHJlc01vZGVsID0gJ2dldC1zdG9yZWQtcHJvY2VkdXJlLWVudW1lcmF0aW9uLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVyc1ByZXNNb2RlbCA9ICdnZXQtc3RvcmVkLXByb2NlZHVyZS1wYXJhbWV0ZXJzLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0VGFibGVFbnVtZXJhdGlvblByZXNNb2RlbCA9ICdnZXQtdGFibGUtZW51bWVyYXRpb24tcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRUYWJsZUNsZWFuaW5nUHJlc01vZGVsID0gJ2dldC10YWJsZS1jbGVhbmluZy1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFRhcmdldEZpZWxkTGlzdCA9ICdnZXQtdGFyZ2V0LWZpZWxkLWxpc3QnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0VG9wTGV2ZWxDb25uZWN0aW9uRGVzY3JpcHRpb25QcmVzTW9kZWwgPSAnZ2V0LXRvcC1sZXZlbC1jb25uZWN0aW9uLWRlc2NyaXB0aW9uLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0VHlwZUluUGlsbFByZXNNb2RlbCA9ICdnZXQtdHlwZS1pbi1waWxsLXByZXMtbW9kZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0VWJlclRpcFByZXNNb2RlbCA9ICdnZXQtdWJlcnRpcC1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFVuaW9uSW5mb1ByZXNNb2RlbCA9ICdnZXQtdW5pb24taW5mby1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFZpc3VhbCA9ICdnZXQtdmlzdWFsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFZpekRhdGEgPSAnZ2V0LXZpei1kYXRhJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFdhcmVob3VzZUVudW1lcmF0aW9uUHJlc01vZGVsID0gJ2dldC13YXJlaG91c2UtZW51bWVyYXRpb24tcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRXb3JrYm9vayA9ICdnZXQtd29ya2Jvb2snLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0V29ybGRVcGRhdGUgPSAnZ2V0LXdvcmxkLXVwZGF0ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHb1RvU2hlZXQgPSAnZ290by1zaGVldCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBIZWFwQ29ycnVwdGlvbkNyYXNoID0gJ2NvcnJ1cHQtaGVhcCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBIaWRlQ29sdW1uRmllbGRMYWJlbCA9ICdoaWRlLWNvbHVtbi1maWVsZC1sYWJlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBIaWRlRW1wdHlDb2xzRmxhZyA9ICdoaWRlLWVtcHR5LWNvbHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGlkZUVtcHR5Um93c0ZsYWcgPSAnaGlkZS1lbXB0eS1yb3dzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEhpZGVMYWJlbCA9ICdoaWRlLWxhYmVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEhpZGVSb3dGaWVsZExhYmVsID0gJ2hpZGUtcm93LWZpZWxkLWxhYmVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEhpZXJhcmNoaWNhbFF1aWNrRmlsdGVyVXBkYXRlU2V0RnVuY3Rpb24gPSAnaGllcmFyY2hpY2FsLXF1aWNrLWZpbHRlci11cGRhdGUtc2V0LWZ1bmN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEluY2x1ZGVJblRvb2x0aXAgPSAnaW5jbHVkZS1pbi10b29sdGlwJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEluY2x1ZGVPdGhlckNhdGVnb3JpY2FsQmluID0gJ2luY2x1ZGUtb3RoZXItY2F0LWJpbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBJbmNyZW1lbnRFeHRyYWN0ID0gJ2luY3JlbWVudC1leHRyYWN0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEluY3JlbWVudFBhcmFtZXRlclZhbHVlID0gJ2luY3ItcGFyYW1ldGVyLXZhbHVlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZUNhbGMgPSAnY3JlYXRlLWNhbGMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdENhbGMgPSAnZWRpdC1jYWxjJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEludm9rZUh5cGVybGluayA9ICdpbnZva2UtaHlwZXJsaW5rJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEtlZXBPbmx5T3JFeGNsdWRlU2VsZWN0aW9uID0gJ2tlZXAtb25seS1vci1leGNsdWRlLXNlbGVjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBMYWJlbERyaWxsID0gJ2xhYmVsLWRyaWxsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIExhYmVsRHJpbGxDdHggPSAnbGFiZWwtZHJpbGwtY3R4JyxcclxuXHJcbiAgICAvLyBcclxuICAgIExldmVsRHJpbGwgPSAnbGV2ZWwtZHJpbGwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTG9hZFVybCA9ICdsb2FkLXVybCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBMaXN0UHVibGlzaGVkRGF0YVNvdXJjZXMgPSAnbGlzdC1wdWJsaXNoZWQtZGF0YXNvdXJjZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWFya0xhYmVsID0gJ21hcmstbGFiZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWFya1RyYWlsID0gJ21hcmstdHJhaWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWVtb3J5RHVtcE9iamVjdENvdW50cyA9ICdtZW1vcnktZHVtcC1vYmplY3QtY291bnRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE1lbW9yeUxlYWsgPSAnbWVtb3J5LWxlYWsnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWVyZ2UgPSAnbWVyZ2Utb3Itc3BsaXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWlncmF0ZURhdGFTb3VyY2UgPSAnbWlncmF0ZS1kYXRhLXNvdXJjZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBNb2RpZnlNYXJrc0luU2V0ID0gJ2FkZC1vci1yZW1vdmUtbWFya3MnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTW92ZUFyZWFBbm5vdGF0aW9uVGV4dCA9ICdtb3ZlLWFyZWEtYW5ub3RhdGlvbi10ZXh0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIE1vdmVDb2x1bW5Ub3RhbHMgPSAnbW92ZS1jb2x1bW4tdG90YWxzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE1vdmVNYXJrID0gJ21vdmUtbWFyaycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBNb3ZlUG9pbnRBbm5vdGF0aW9uID0gJ21vdmUtcG9pbnQtYW5ub3RhdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBNb3ZlUG9pbnRBbm5vdGF0aW9uVGFyZ2V0ID0gJ21vdmUtcG9pbnQtYW5ub3RhdGlvbi10YXJnZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTW92ZVJlZmVyZW5jZUxpbmUgPSAnbW92ZS1yZWZlcmVuY2UtbGluZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBNb3ZlUm93VG90YWxzID0gJ21vdmUtcm93LXRvdGFscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBOYXZpZ2F0ZVRvU2hlZXQgPSAnbmF2aWdhdGUtdG8tc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUG9zdENhbGNKb2luQ2xhdXNlUmVzdWx0ID0gJ3Bvc3QtY2FsYy1qb2luLWNsYXVzZS1yZXN1bHQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTmV3RG9jRGFzaGJvYXJkID0gJ25ldy1kYXNoYm9hcmQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTmV3RG9jV29ya3NoZWV0ID0gJ25ldy13b3Jrc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTm9uUmFuZ2VkUmVtb3ZlUmVmZXJlbmNlTGluZSA9ICdub24tcmFuZ2VkLXJlbW92ZS1yZWZlcmVuY2UtbGluZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcHRpbWl6ZUV4dHJhY3QgPSAnb3B0aW1pemUtZXh0cmFjdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcHRPdXRBY3Rpb25zID0gJ29wdC1vdXQtYWN0aW9ucycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQYWdlSGlzdG9yeVNldHRpbmdzID0gJ3BhZ2UtaGlzdG9yeS1zZXR0aW5ncycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQYWdlVG9nZ2xlVHJhaWxzID0gJ3BhZ2UtdG9nZ2xlLXRyYWlscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQYXJzZVVJTmFtZSA9ICdwYXJzZS11aS1uYW1lJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBlcmNlbnRhZ2VzID0gJ3BlcmNlbnRhZ2VzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBlcnNwZWN0aXZlcyA9ICdwZXJzcGVjdGl2ZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUG9zaXRpb25Qb2ludEFubm90YXRpb24gPSAncG9zaXRpb24tcG9pbnQtYW5ub3RhdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQcm90b2NvbFBvb2xMb2cgPSAncHJvdG9jb2wtcG9vbC1sb2cnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUHVibGlzaFRvV29ya2dyb3VwID0gJ3B1Ymxpc2gtdG8td29ya2dyb3VwJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFB1Ymxpc2hEYXRhU291cmNlID0gJ3B1Ymxpc2gtZGF0YXNvdXJjZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQdWJsaXNoRGF0YVNvdXJjZUZyb21EYXRhID0gJ3B1Ymxpc2gtZGF0YS1zb3VyY2UtZnJvbS1kYXRhJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFB1Ymxpc2hEYXRhU291cmNlRnJvbVdvcmtib29rRGF0YSA9ICdwdWJsaXNoLWRhdGEtc291cmNlLWZyb20td29ya2Jvb2stZGF0YScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBRdWFudGl0YXRpdmVRdWlja0ZpbHRlckVkaXQgPSAncXVhbnRpdGF0aXZlLXF1aWNrLWZpbHRlci1lZGl0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFF1YW50aXRhdGl2ZU1vZGVRdWlja0ZpbHRlciA9ICdxdWFudGl0YXRpdmUtbW9kZS1xdWljay1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUXVlcnlNaWdyYXRlRGF0YVNvdXJjZXMgPSAncXVlcnktbWlncmF0ZS1kYXRhLXNvdXJjZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUXVpY2tTb3J0ID0gJ3F1aWNrLXNvcnQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmFuZ2VkQnlJbmRleE1lcmdlID0gJ3JhbmdlZC1ieS1pbmRleC1tZXJnZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSYW5nZWRCeVZhbHVlTWVyZ2UgPSAncmFuZ2VkLWJ5LXZhbHVlLW1lcmdlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlY29yZCA9ICdyZWNvcmQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVkbyA9ICdyZWRvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlZnJlc2hFeHRyYWN0ID0gJ3JlZnJlc2gtZXh0cmFjdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZWZyZXNoRnJvbVNvdXJjZSA9ICdyZWZyZXNoLWZyb20tc291cmNlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbGF0aXZlRGF0ZVF1aWNrRmlsdGVyRWRpdCA9ICdyZWxhdGl2ZS1kYXRlLXF1aWNrLWZpbHRlci1lZGl0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZUFsbFJlZmVyZW5jZUxpbmVzID0gJ3JlbW92ZS1hbGwtcmVmZXJlbmNlLWxpbmVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZURyaWxsUGF0aCA9ICdyZW1vdmUtZHJpbGwtcGF0aCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW1vdmVFeHRyYWN0ID0gJ3JlbW92ZS1leHRyYWN0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZUZpZWxkRm9sZGVyID0gJ3JlbW92ZS1maWVsZC1mb2xkZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlRmllbGRMYWJlbCA9ICdyZW1vdmUtZmllbGQtbGFiZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlRmllbGRzID0gJ3JlbW92ZS1maWVsZHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlRmllbGRzRnJvbVNoZWxmID0gJ3JlbW92ZS1maWVsZHMtZnJvbS1zaGVsZicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW1vdmVGcm9tRHJpbGxQYXRoID0gJ3JlbW92ZS1mcm9tLWRyaWxsLXBhdGgnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlRnJvbUZpZWxkRm9sZGVyID0gJ3JlbW92ZS1mcm9tLWZpZWxkLWZvbGRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW1vdmVSZWZlcmVuY2VMaW5lID0gJ3JlbW92ZS1yZWZlcmVuY2UtbGluZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW1vdmVTdWJ0b3RhbHMgPSAncmVtb3ZlLXN1YnRvdGFscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW5hbWVEYXRhU291cmNlID0gJ3JlbmFtZS1kYXRhLXNvdXJjZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW5hbWVEcmlsbFBhdGggPSAncmVuYW1lLWRyaWxsLXBhdGgnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVuYW1lRmllbGRGb2xkZXIgPSAncmVuYW1lLWZpZWxkLWZvbGRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW5hbWVTaGVldCA9ICdyZW5hbWUtc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVvcmRlckxhYmVscyA9ICdyZW9yZGVyLWxhYmVscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXBvcnRCdWcgPSAncmVwb3J0LWJ1ZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXF1ZXN0RGF0YVNvdXJjZVByZXNNb2RlbCA9ICdyZXF1ZXN0LWRhdGFzb3VyY2UtcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNldFBhcmFtZXRlckN0cmxUaXRsZSA9ICdyZXNldC1wYXJhbWV0ZXItY3RybC10aXRsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNldFRvb2x0aXAgPSAncmVzZXQtdG9vbHRpcCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNpemVBcmVhQW5ub3RhdGlvblRleHQgPSAncmVzaXplLWFyZWEtYW5ub3RhdGlvbi10ZXh0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlc2l6ZUF4aXMgPSAncmVzaXplLWF4aXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzaXplQ2VsbCA9ICdyZXNpemUtY2VsbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNpemVIZWFkZXIgPSAncmVzaXplLWhlYWRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNpemVQb2ludEFubm90YXRpb24gPSAncmVzaXplLXBvaW50LWFubm90YXRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmV2ZXJ0ID0gJ3JldmVydCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSb3RhdGVGaWVsZExhYmVsID0gJ3JvdGF0ZS1maWVsZC1sYWJlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSb3RhdGVMYWJlbCA9ICdyb3RhdGUtbGFiZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3BsaXRGaWVsZExhYmVsID0gJ3NwbGl0LWZpZWxkLWxhYmVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJ1bkFjdGlvbiA9ICdydW4tYWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJ1blNjcmlwdCA9ICdydW4tc2NyaXB0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJ1blVwZGF0ZXMgPSAncnVuLXVwZGF0ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTYXZlTW9kZWwgPSAnc2F2ZS1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTYXZlUHVibGlzaGVkRFN0b0ZpbGUgPSAnc2F2ZS1wdWJsaXNoZWQtZHMtdG8tZmlsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZWxlY3REYXRhU291cmNlID0gJ3NlbGVjdC1kYXRhLXNvdXJjZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZWxlY3RGaWVsZHNJblNoZWxmID0gJ3NlbGVjdC1maWVsZHMtaW4tc2hlbGYnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2VuZERhdGFDb25uZWN0aW9uVGFibGVWaWV3TWVzc2FnZSA9ICdzZW5kLWRhdGEtY29ubmVjdGlvbi10YWJsZXZpZXctbWVzc2FnZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRBY3RpdmVEYXRhU291cmNlTmFtZSA9ICdzZXQtYWN0aXZlLWRhdGEtc291cmNlLW5hbWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0QWN0aXZlQ29ubmVjdGlvbk5hbWUgPSAnc2V0LWFjdGl2ZS1jb25uZWN0aW9uLW5hbWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0QWN0aXZlRGF0YVNvdXJjZSA9ICdzZXQtYWN0aXZlLWRhdGFzb3VyY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0QmFzZVBhbGV0dGUgPSAnc2V0LWJhc2UtcGFsZXR0ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRDYXRlZ29yaWNhbENvbG9yID0gJ3NldC1jYXRlZ29yaWNhbC1jb2xvcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXREYXRhQ2FjaGVEZWx0YSA9ICdzZXQtZGF0YS1jYWNoZS1kZWx0YScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXREYXRhUHJldmlld0F1dG9VcGRhdGUgPSAnc2V0LWRhdGEtcHJldmlldy1hdXRvLXVwZGF0ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXREYXRhUHJldmlld0N1c3RvbUZpZWxkT3JkZXIgPSAnc2V0LWRhdGEtcHJldmlldy1jdXN0b20tZmllbGQtb3JkZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RGVmYXVsdENvbG9yID0gJ3NldC1kZWZhdWx0LWNvbG9yJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldERlZmF1bHRTaGFwZSA9ICdzZXQtZGVmYXVsdC1zaGFwZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRGaWx0ZXJDb250ZXh0ID0gJ3NldC1maWx0ZXItY29udGV4dCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRGaWx0ZXJTaGFyZWQgPSAnc2V0LWZpbHRlci1zaGFyZWQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0SW5pdGlhbFNRTCA9ICdzZXQtaW5pdGlhbC1zcWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0SXRlbUNvbG9yID0gJ3NldC1pdGVtLWNvbG9yJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldEl0ZW1Db2xvclJlc2V0Q3VzdG9taXphdGlvbiA9ICdzZXQtaXRlbS1jb2xvci1yZXNldC1jdXN0b21pemF0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldEl0ZW1FbmNvZGluZ1R5cGUgPSAnc2V0LWl0ZW0tZW5jb2RpbmctdHlwZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRNYXJrU2l6ZSA9ICdzZXQtbWFyay1zaXplJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldFBhZ2VOYXZGbGFnID0gJ3NldC1wYWdlLWZsYWcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0UGFyYW1ldGVyQ3RybERpc3BsYXlGbGFncyA9ICdzZXQtcGFyYW1ldGVyLWN0cmwtZGlzcGxheS1mbGFncycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRQYXJhbWV0ZXJDdHJsRGlzcGxheU1vZGUgPSAnc2V0LXBhcmFtZXRlci1jdHJsLWRpc3BsYXktbW9kZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRQYXJhbWV0ZXJDdHJsVGl0bGUgPSAnc2V0LXBhcmFtZXRlci1jdHJsLXRpdGxlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldFBhcmFtZXRlclZhbHVlID0gJ3NldC1wYXJhbWV0ZXItdmFsdWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0UHJpbWl0aXZlID0gJ3NldC1wcmltaXRpdmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0UXVlcnlCYW5kaW5nID0gJ3NldC1xdWVyeS1iYW5kaW5nJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldFF1aWNrRmlsdGVySW5jbHVkZWRWYWx1ZXMgPSAnc2V0LXF1aWNrLWZpbHRlci1pbmNsdWRlZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRSZWZlcmVuY2VMaW5lRm9ybXVsYSA9ICdzZXQtcmVmZXJlbmNlLWxpbmUtZm9ybXVsYScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRSZWZlcmVuY2VMaW5lQ29uc3RhbnRWYWx1ZSA9ICdzZXQtcmVmZXJlbmNlLWxpbmUtY29uc3RhbnQtdmFsdWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0U2hlZXRGb3JtYXR0aW5nID0gJ3NldC1zaGVldC1mb3JtYXR0aW5nJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldFNoZWV0U2l6ZSA9ICdzZXQtc2hlZXQtc2l6ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRUb3RhbHNUeXBlID0gJ3NldC10b3RhbHMtdHlwZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRXb3JrYm9va0xvY2FsZSA9ICdzZXQtd29ya2Jvb2stbG9jYWxlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dDYXRDdHJsUXVpY2tGaWx0ZXIgPSAnc2hvdy1jYXQtY3RybC1xdWljay1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0NvbEZpZWxkTmFtZXNGbGFnID0gJ3Nob3ctY29sLWZpZWxkLW5hbWVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dDb2xUb3RhbHNGbGFnID0gJ3Nob3ctY29sLXRvdGFscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93Q29sdW1uRmllbGRMYWJlbCA9ICdzaG93LWNvbHVtbi1maWVsZC1sYWJlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93RW1wdHlDb2xzRmxhZyA9ICdzaG93LWVtcHR5LWNvbHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0VtcHR5Um93c0ZsYWcgPSAnc2hvdy1lbXB0eS1yb3dzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dGb3JlY2FzdEVkaXRvciA9ICdzaG93LWZvcmVjYXN0LWVkaXRvcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93RnVsbFJhbmdlID0gJ3Nob3ctZnVsbC1yYW5nZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93SGVhZGVyID0gJ3Nob3ctaGVhZGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dIaWRkZW5EYXRhID0gJ3Nob3ctaGlkZGVuLWRhdGEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd01lID0gJ3Nob3ctbWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd1F1YW50Q3RybFF1aWNrRmlsdGVyID0gJ3Nob3ctcXVhbnQtY3RybC1xdWljay1maWx0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd1F1aWNrRmlsdGVyRG9jID0gJ3Nob3ctcXVpY2tmaWx0ZXItZG9jJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dSZWZlcmVuY2VMaW5lRWRpdG9yID0gJ3Nob3ctcmVmZXJlbmNlLWxpbmUtZWRpdG9yJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dSZWZlcmVuY2VMaW5lQ29uc3RhbnRWYWx1ZUVkaXRvciA9ICdzaG93LXJlZmVyZW5jZS1saW5lLWNvbnN0YW50LXZhbHVlLWVkaXRvcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93UmVmZXJlbmNlTGluZUZvcm1hdHRlciA9ICdzaG93LXJlZmVyZW5jZS1saW5lLWZvcm1hdHRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93Um93RmllbGRMYWJlbCA9ICdzaG93LXJvdy1maWVsZC1sYWJlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93Um93RmllbGROYW1lc0ZsYWcgPSAnc2hvdy1yb3ctZmllbGQtbmFtZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd1Jvd1RvdGFsc0ZsYWcgPSAnc2hvdy1yb3ctdG90YWxzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNpbXBsZUNvbW1hbmRMaXN0ID0gJ3NpbXBsZS1jb21tYW5kLWxpc3QnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2xlZXAgPSAnc2xlZXAnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2xlZXBCYWNrZ3JvdW5kVGhyZWFkID0gJ3NsZWVwLWJhY2tncm91bmQtdGhyZWFkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNvcnREYXRhR3JpZEJ5Q29sdW1uID0gJ3NvcnQtZGF0YWdyaWQtYnktY29sdW1uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNvcnREYXRhR3JpZEZpZWxkcyA9ICdzb3J0LWRhdGFncmlkLWZpZWxkcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTcGVjaWFsVmFsdWVzID0gJ3NwZWNpYWwtdmFsdWVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNwbGl0RmllbGQgPSAnc3BsaXQtZmllbGQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3RhY2tNYXJrcyA9ICdzdGFjay1tYXJrcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTdGFja092ZXJmbG93Q3Jhc2ggPSAnc3RhY2stb3ZlcmZsb3cnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3VidG90YWxBZ2dyZWdhdGlvbiA9ICdzdWJ0b3RhbC1hZ2dyZWdhdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTdWJ0b3RhbHMgPSAnc3VidG90YWxzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFN3YXBGaWVsZHMgPSAnc3dhcC1maWVsZHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3dhcFJvd3NBbmRDb2x1bW5zID0gJ3N3YXAtcm93cy1hbmQtY29sdW1ucycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUYWJsZWF1RXhjZXB0aW9uID0gJ3RhYmxlYXUtZXhjZXB0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFRvZ2dsZURyb3BMaW5lcyA9ICd0b2dnbGUtZHJvcC1saW5lcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVGaWVsZEJsZW5kaW5nID0gJ3RvZ2dsZS1maWVsZC1ibGVuZGluZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVNYXJrTGFiZWxzID0gJ3RvZ2dsZS1tYXJrLWxhYmVscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVQYWdlVGl0bGUgPSAndG9nZ2xlLXBhZ2UtdGl0bGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVG9nZ2xlUGFyYW1ldGVyQ3RybERpc3BsYXlGbGFnID0gJ3RvZ2dsZS1wYXJhbWV0ZXItY3RybC1kaXNwbGF5LWZsYWcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVG9nZ2xlUGFyYW1ldGVyQ3RybFRpdGxlID0gJ3RvZ2dsZS1wYXJhbWV0ZXItY3RybC10aXRsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVRdWlja0ZpbHRlclRpdGxlID0gJ3RvZ2dsZS1xdWljay1maWx0ZXItdGl0bGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVG9nZ2xlVml6TmF2aWdhdGlvblNldHRpbmcgPSAndG9nZ2xlLXZpei1uYXZpZ2F0aW9uLXNldHRpbmcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVW5kbyA9ICd1bmRvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVuaGlkZURhdGEgPSAndW5oaWRlLWRhdGEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVW5oaWRlTGFiZWwgPSAndW5oaWRlLWxhYmVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVwZGF0ZUFyZWFBbm5vdGF0aW9uID0gJ3VwZGF0ZS1hcmVhLWFubm90YXRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVXBkYXRlQ2FsY1Njb3BlSXNvbGF0aW9uID0gJ3VwZGF0ZS1zY29wZS1pc29sYXRpb24tZm9yLWNhbGN1bGF0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVwZGF0ZURhdGFTZXJ2ZXJDb25uZWN0aW9uSW5mbyA9ICd1cGRhdGUtZGF0YS1zZXJ2ZXItY29ubmVjdGlvbi1pbmZvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVwZGF0ZVBvaW50QW5ub3RhdGlvblB1bGxiYWNrID0gJ3VwZGF0ZS1wb2ludC1hbm5vdGF0aW9uLXB1bGxiYWNrJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVwZGF0ZVRhYmxlQ2FsY0luZm8gPSAndXBkYXRlLXRhYmxlLWNhbGMtaW5mb21hdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBVcGdyYWRlRXh0cmFjdCA9ICd1cGdyYWRlLWV4dHJhY3QnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVXNlRXh0cmFjdCA9ICd1c2UtZXh0cmFjdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWYWxpZGF0ZURyaWxsUGF0aE5hbWUgPSAndmFsaWRhdGUtZHJpbGwtcGF0aC1uYW1lJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZhbGlkYXRlRm9ybXVsYSA9ICd2YWxpZGF0ZS1mb3JtdWxhJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZhbGlkYXRlSW5pdGlhbFNRTCA9ICd2YWxpZGF0ZS1pbml0aWFsLXNxbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWYWxpZGF0ZVF1ZXJ5QmFuZGluZyA9ICd2YWxpZGF0ZS1xdWVyeS1iYW5kaW5nJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZhbGlkYXRlVHlwZUluUGlsbCA9ICd2YWxpZGF0ZS10eXBlLWluLXBpbGwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld1BhcmFtZXRlckN0cmxzID0gJ3ZpZXctcGFyYW0tY3RybHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld1F1aWNrRmlsdGVycyA9ICd2aWV3LXF1aWNrLWZpbHRlcnMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U2NoZW1hID0gJ2dldC1zY2hlbWEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U2NoZW1hVmlld2VyRGF0YVNjaGVtYSA9ICdnZXQtc2NoZW1hLXZpZXdlci1kYXRhLXNjaGVtYScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb252ZXJ0VG9EaW1lbnNpb24gPSAnY29udmVydC10by1kaW1lbnNpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29udmVydFRvTWVhc3VyZSA9ICdjb252ZXJ0LXRvLW1lYXN1cmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29udmVydFRvQ29udGludW91cyA9ICdjb252ZXJ0LXRvLWNvbnRpbnVvdXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29udmVydFRvRGlzY3JldGUgPSAnY29udmVydC10by1kaXNjcmV0ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW5hbWVGaWVsZCA9ICdyZW5hbWUtZmllbGQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGlkZUZpZWxkID0gJ2hpZGUtZmllbGQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVW5oaWRlRmllbGQgPSAndW5oaWRlLWZpZWxkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEhpZGVVbnVzZWRGaWVsZHMgPSAnaGlkZS11bnVzZWQtZmllbGRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIER1cGxpY2F0ZUZpZWxkcyA9ICdkdXBsaWNhdGUtZmllbGRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFuVmFsdWVzID0gJ2NsZWFuLXZhbHVlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQYXJzZURhdGUgPSAncGFyc2UtZGF0ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBNYWtlRGF0ZSA9ICdtYWtlLWRhdGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0UXVhbGlmeU5hbWVzID0gJ3NldC1xdWFsaWZ5LW5hbWVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZU1lYXN1cmVGcm9tQ29sdW1uID0gJ2NyZWF0ZS1tZWFzdXJlLWZyb20tY29sdW1uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZUZyb21TY2hlbWFEcmlsbFBhdGggPSAncmVtb3ZlLWZyb20tc2NoZW1hLWRyaWxsLXBhdGgnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkVG9TY2hlbWFEcmlsbFBhdGggPSAnYWRkLXRvLXNjaGVtYS1kcmlsbC1wYXRoJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZVNjaGVtYURyaWxsUGF0aCA9ICdyZW1vdmUtc2NoZW1hLWRyaWxsLXBhdGgnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0hpZGRlbkZpZWxkcyA9ICdzaG93LWhpZGRlbi1maWVsZHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0FsaWFzZXMgPSAnc2hvdy1hbGlhc2VzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldFJvd0Rpc3BsYXlDb3VudCA9ICdzZXQtcm93LWRpc3BsYXktY291bnQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd1N0cnVjdHVyZSA9ICdzaG93LXN0cnVjdHVyZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHcm91cEJ5VGFibGUgPSAnZ3JvdXAtYnktdGFibGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2hhbmdlRGF0YVR5cGUgPSAnY2hhbmdlLWRhdGEtdHlwZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VQaXZvdFN0cmF0ZWd5ID0gJ2NoYW5nZS1waXZvdC1zdHJhdGVneScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VEaXNwbGF5QWxpYXMgPSAnY2hhbmdlLWRpc3BsYXktYWxpYXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0SW5jbHVkZVNoYXJlZE1lbWJlcnMgPSAnc2V0LWluY2x1ZGUtc2hhcmVkLW1lbWJlcnMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0VXRpbGl0eURpbWVuc2lvbiA9ICdzZXQtdXRpbGl0eS1kaW1lbnNpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RGVmYXVsdEhpZXJhcmNoeSA9ICdzZXQtZGVmYXVsdC1oaWVyYXJjaHknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGF0YVNvdXJjZVNvcnRPcmRlciA9ICdkYXRhLXNvdXJjZS1zb3J0LW9yZGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyVXRpbGl0eURpbWVuc2lvbiA9ICdjbGVhci11dGlsaXR5LWRpbWVuc2lvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbGVhckRlZmF1bHRTb3J0ID0gJ2NsZWFyLWRlZmF1bHQtc29ydCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXREZWZhdWx0QWdncmVnYXRpb24gPSAnc2V0LWRlZmF1bHQtYWdncmVnYXRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RGVmYXVsdFZUQWdncmVnYXRpb24gPSAnc2V0LWRlZmF1bHQtdnRhZ2dyZWdhdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VGaXNjYWxZZWFyID0gJ2NoYW5nZS1maXNjYWwteWVhcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VTZW1hbnRpY1JvbGUgPSAnY2hhbmdlLXNlbWFudGljLXJvbGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkVG9TaGVldCA9ICdhZGQtdG8tc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRHJvcFNjaGVtYVNlbE9uU2hlbGYgPSAnZHJvcC1zY2hlbWEtc2VsLW9uLXNoZWxmJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFRvU2NoZW1hRmllbGRGb2xkZXIgPSAnYWRkLXRvLXNjaGVtYS1maWVsZC1mb2xkZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlRnJvbVNjaGVtYUZpZWxkRm9sZGVyID0gJ3JlbW92ZS1mcm9tLXNjaGVtYS1maWVsZC1mb2xkZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlU2NoZW1hRmllbGRGb2xkZXIgPSAncmVtb3ZlLXNjaGVtYS1maWVsZC1mb2xkZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGVmYXVsdFRleHRGb3JtYXQgPSAnZGVmYXVsdC10ZXh0LWZvcm1hdCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0U2NoZW1hQ2FwdGlvbiA9ICdlZGl0LXNjaGVtYS1jYXB0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlc2V0U2NoZW1hQ2FwdGlvbiA9ICdyZXNldC1zY2hlbWEtY2FwdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDcmVhdGVPdXRsaWVyU2V0ID0gJ2NyZWF0ZS1vdXRsaWVyLXNldCcsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFVJQ29tbWFuZHMge1xyXG5cclxuICAgIC8vIExhdW5jaGVzIGEgZGlhbG9nIHdpdGggYSBnaXZlbiBVUkwgdGhhdCBjYW4gY29tbXVuaWNhdGUgd2l0aCBwYXJlbnQgem9uZS5cclxuICAgIERpc3BsYXlFeHRlbnNpb25EaWFsb2cgPSAnZGlzcGxheS1leHRlbnNpb24tZGlhbG9nJyxcclxuXHJcbiAgICAvLyBDbG9zZXMgdGhlIGRpYWxvZy5cclxuICAgIENsb3NlRXh0ZW5zaW9uRGlhbG9nID0gJ2Nsb3NlLWV4dGVuc2lvbi1kaWFsb2cnLFxyXG5cclxuXHJcbiAgICAvLyBcclxuICAgIEFib3V0ID0gJ2Fib3V0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZERhdGFTZXJ2ZXJEYXRhU291cmNlVUkgPSAnYWRkLWRhdGEtc2VydmVyLWRhdGFzb3VyY2UtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3dpdGNoVG9Eb2N1bWVudEFuZEFkZERhdGFTZXJ2ZXJEYXRhU291cmNlVUkgPSAnc3dpdGNoLXRvLWRvY3VtZW50LWFuZC1hZGQtZGF0YS1zZXJ2ZXItZHMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkRHJpbGxQYXRoVUkgPSAnYWRkLWRyaWxscGF0aC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZGRGaWVsZEZvbGRlclVJID0gJ2FkZC1maWVsZC1mb2xkZXItdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkRmlsZVRvRXh0cmFjdFVJID0gJ2FkZC1maWxlLXRvLWV4dHJhY3QtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkRGF0YVNvdXJjZVRvRXh0cmFjdFVJID0gJ2FkZC1kYXRhLXNvdXJjZS10by1leHRyYWN0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFFDVG9TaGVldFVJID0gJ2FkZC1xYy10by1zaGVldC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBZGRSZWZlcmVuY2VMaW5lVUkgPSAnYWRkLXJlZmVyZW5jZS1saW5lLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFNjaGVtYUZpZWxkRm9sZGVyVUkgPSAnYWRkLXRvLXNjaGVtYS1maWVsZC1mb2xkZXItdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkVGFibGVhdVNlcnZlckRTQ29ubmVjdGlvblVJID0gJ2FkZC10YWJsZWF1LXNlcnZlci1kcy1jb25uZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFkZFRvU2NoZW1hRHJpbGxQYXRoVUkgPSAnYWRkLXRvLXNjaGVtYS1kcmlsbHBhdGgtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQWRkVG9TaGVldFVJID0gJ2FkZC10by1zaGVldC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBBbm5vdGF0ZVVJID0gJ2Fubm90YXRlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEFwcGVuZERhdGFTb3VyY2VUb1JlbW90ZUV4dHJhY3RVSSA9ICdhcHBlbmQtZGF0YS1zb3VyY2UtdG8tcmVtb3RlLWV4dHJhY3QtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXR0ZW1wdENvbm5lY3REYXRhU291cmNlc09uU2hlZXRVSSA9ICdhdHRlbXB0LWNvbm5lY3QtZGF0YXNvdXJjZXMtb24tc2hlZXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXR0ZW1wdERhdGFTb3VyY2VDb25uZWN0aW9uVUkgPSAnYXR0ZW1wdC1kYXRhc291cmNlLWNvbm5lY3QtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXV0b0hpZGVTaGVldCA9ICdhdXRvLWhpZGUtc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQXV0b21hdGlvbkNsaWNrTVJVSXRlbSA9ICdjbGljay1tcnUtaXRlbScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDYWxjdWxhdGVkTWVtYmVyc1VJID0gJ2NhbGN1bGF0ZWQtbWVtYmVycy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VBZ2dyZWdhdGlvblVJID0gJ2NoYW5nZS1hZ2dyZWdhdGlvbi11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGFuZ2VEYXRhU2VydmVyTG9nb25VSSA9ICdjaGFuZ2UtZGF0YS1zZXJ2ZXItbG9nb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2hhbmdlRXNzYmFzZUFsaWFzRmlsZSA9ICdjaGFuZ2UtZXNzYmFzZS1hbGlhcy1maWxlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENoYW5nZUZpZWxkVHlwZVVJID0gJ2NoYW5nZS1maWVsZC10eXBlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENoYW5nZVRhYkNvbG9yU2hlZXQgPSAnY2hhbmdlLXRhYi1jb2xvci1zaGVldCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDaGVja0ZvclByb2R1Y3RVcGRhdGVzID0gJ2NoZWNrLWZvci1wcm9kdWN0LXVwZGF0ZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2xlYXJEYXNoYm9hcmRVSSA9ICdjbGVhci1kYXNoYm9hcmQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2xlYXJTaGVldFVJID0gJ2NsZWFyLXNoZWV0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENsZWFyU3RvcnlVSSA9ICdjbGVhci1zdG9yeS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbGVhclZpelVJID0gJ2NsZWFyLXZpei11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbG9zZUNhbGN1bGF0aW9uVUkgPSAnY2xvc2UtY2FsY3VsYXRpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ2xvc2VEYXRhU291cmNlVUkgPSAnY2xvc2UtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDbG9zZVdvcmtib29rID0gJ2Nsb3NlLXdvcmtib29rJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbG9yTGVnZW5kRWRpdFVJID0gJ2NvbG9yLWxlZ2VuZC1lZGl0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbW1pdFBpbGxFZGl0VUkgPSAnY29tbWl0LXBpbGwtZWRpdC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0RGF0YVNvdXJjZVVJID0gJ2Nvbm5lY3QtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0UmVwcm9tcHRVSSA9ICdjb25uZWN0LXJlcHJvbXB0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3RWYXJpYWJsZVByb21wdFVJID0gJ2Nvbm5lY3QtdmFyaWFibGUtcHJvbXB0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3RWYXJpYWJsZVByb21wdE1hdGNoaW5nVUkgPSAnY29ubmVjdC12YXJpYWJsZS1wcm9tcHQtbWF0Y2hpbmctdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkFkZE5ld0N1c3RvbVNRTFVJID0gJ2Nvbm5lY3Rpb24tYWRkLW5ldy1jdXN0b20tc3FsLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25BZGROZXdUYWJsZVVJID0gJ2Nvbm5lY3Rpb24tYWRkLW5ldy10YWJsZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRGF0YUdyaWRDb3B5VUkgPSAnY29ubmVjdGlvbi1kYXRhLWdyaWQtY29weS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRWRpdEN1c3RvbVNRTFVJID0gJ2Nvbm5lY3Rpb24tY3VzdG9tLXNxbC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRWRpdEV4dHJhY3RVSSA9ICdjb25uZWN0aW9uLWV4dHJhY3QtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkVkaXREQlZhcmlhYmxlc1VJID0gJ2Nvbm5lY3Rpb24tZWRpdC1kYi12YXJpYWJsZXMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkVkaXRDb25uZWN0aW9uVUkgPSAnY29ubmVjdGlvbi1lZGl0LWNvbm5lY3Rpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvbkZpbmFsaXplRGF0YVNvdXJjZVVJID0gJ2Nvbm5lY3Rpb24tZmluYWxpemUtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uRmluYWxpemVFeHRyYWN0U3RhdGVzVUkgPSAnY29ubmVjdGlvbi1maW5hbGl6ZS1leHRyYWN0LXN0YXRlcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uR2V0VHlwZUdyb3VwUHJlc01vZGVsVUkgPSAnY29ubmVjdGlvbi1nZXQtdHlwZS1ncm91cC1wcmVzLW1vZGVsLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25HZXRTYXZlZERhdGFTb3VyY2VzUHJlc01vZGVsVUkgPSAnY29ubmVjdGlvbi1nZXQtc2F2ZWQtZHMtcHJlcy1tb2RlbC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uUGFydGl0aW9uaW5nRmFpbHVyZVVJID0gJ2Nvbm5lY3Rpb24tcGFydGl0aW9uaW5nLWZhaWx1cmUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblJlcGxhY2VUYWJsZVVJID0gJ2Nvbm5lY3Rpb24tcmVwbGFjZS10YWJsZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU2VhcmNoQ2F0YWxvZ1VJID0gJ2Nvbm5lY3Rpb24tc2VhcmNoLWNhdGFsb2ctdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblNlYXJjaEN1YmVVSSA9ICdjb25uZWN0aW9uLXNlYXJjaC1jdWJlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25TZWxlY3RDYXRhbG9nVUkgPSAnY29ubmVjdGlvbi1zZWxlY3QtY2F0YWxvZy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU2VsZWN0Q3ViZVVJID0gJ2Nvbm5lY3Rpb24tc2VsZWN0LWN1YmUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblNlbGVjdFN0YW5kYXJkQ29ubmVjdGlvblVJID0gJ2Nvbm5lY3Rpb24tc2VsZWN0LXN0YW5kYXJkLWNvbm5lY3Rpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblNlbGVjdFN0b3JlZFByb2NlZHVyZVVJID0gJ2Nvbm5lY3Rpb24tc2VsZWN0LXN0b3JlZC1wcm9jZWR1cmUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdGlvblNob3dFZGl0VGFibGVEaWFsb2dVSSA9ICdjb25uZWN0aW9uLXNob3ctZWRpdC10YWJsZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU2hvd1Bpdm90RGlhbG9nVUkgPSAnY29ubmVjaXRvbi1zaG93LXBpdm90LWRpYWxvZy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU29ydENhdGFsb2dVSSA9ICdjb25uZWN0aW9uLXNvcnQtY2F0YWxvZy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uU29ydEN1YmVVSSA9ICdjb25uZWN0aW9uLXNvcnQtY3ViZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0aW9uVmFsaWRhdGVDdXN0b21TUUxVSSA9ICdjb25uZWN0aW9uLXZhbGlkYXRlLWN1c3RvbS1zcWwtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29ubmVjdFRvQ2xvdWRGaWxlID0gJ2Nvbm5lY3QtdG8tY2xvdWQtZmlsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb25uZWN0VG9EYXRhU2VydmVyU291cmNlVUkgPSAnY29ubmVjdC1kYXRhLXNlcnZlci1kYXRhc291cmNlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25Db252ZXJ0VG9TUUxVSSA9ICdjb25uZWN0aW9uLWNvbnZlcnQtdG8tc3FsLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3Rpb25SZW5hbWVDb25uZWN0aW9uVUkgPSAnY29ubmVjdGlvbi1yZW5hbWUtY29ubmVjdGlvbi11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeHBvcnRVbmRlcmx5aW5nRGF0YVRvQ1NWVUkgPSAnZXhwb3J0LXRvLWNzdi13aXRoLXByb2dyZXNzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvbm5lY3RPREJDVUkgPSAnY29ubmVjdC1vZGJjLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvcHlDcm9zc3RhYiA9ICdjb3B5LWNyb3NzdGFiJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvcHlEYXRhID0gJ2NvcHktZGF0YScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb3B5RHJpbGxQYXRoRmllbGRzVUkgPSAnY29weS1kcmlsbC1wYXRoLWZpZWxkcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb3B5RmllbGRzRGVmblVJID0gJ2NvcHktZmllbGRzLWRlZm4tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29weUltYWdlID0gJ2NvcHktaW1hZ2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ29weUltYWdlRGFzaGJvYXJkID0gJ2NvcHktaW1hZ2UtZGFzaGJvYXJkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvcHlJbWFnZVdvcmtzaGVldCA9ICdjb3B5LWltYWdlLXdvcmtzaGVldCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDb3B5SW1hZ2VTdG9yeSA9ICdjb3B5LWltYWdlLXN0b3J5JyxcclxuXHJcbiAgICAvLyBcclxuICAgIENvcHlXb3Jrc2hlZXRGb3JtYXR0aW5nID0gJ2NvcHktZm9ybWF0dGluZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDcmVhdGVDYWxjdWxhdGVkU2V0VUkgPSAnY3JlYXRlLWNhbGN1bGF0ZWQtc2V0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZUNhbGN1bGF0aW9uVUkgPSAnY3JlYXRlLWNhbGN1bGF0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZUNvbWJpbmVkRmllbGRVSSA9ICdjcmVhdGUtY29tYmluZWQtZmllbGQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3JlYXRlQ29ubmVjdGlvblVJID0gJ2NyZWF0ZS1jb25uZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZURhdGVCaW5VSSA9ICdjcmVhdGUtRGF0ZS1iaW4tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3JlYXRlR3JvdXBTZWxlY3Rpb25VSSA9ICdjcmVhdGUtZ3JvdXAtc2VsZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZUdyb3VwVUkgPSAnY3JlYXRlLWdyb3VwLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZUlkZW50aXR5U2V0ID0gJ2NyZWF0ZS11c2VyLWZpbHRlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBDcmVhdGVMZWFmQ29ubmVjdGlvblVJID0gJ2NyZWF0ZS1sZWFmLWNvbm5lY3Rpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3JlYXRlTnVtZXJpY0JpbnNVSSA9ICdjcmVhdGUtbnVtZXJpYy1iaW5zLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIENyZWF0ZVNldFVJID0gJ2NyZWF0ZS1zZXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3VzdG9tRGF0ZUFnZ3JlZ2F0aW9uVUkgPSAnY3VzdG9tLWRhdGUtYWdncmVnYXRpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgQ3V0RHJpbGxQYXRoRmllbGRzVUkgPSAnY3V0LWRyaWxsLXBhdGgtZmllbGRzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEN1dEZpZWxkc0RlZm5VSSA9ICdjdXQtZmllbGRzLWRlZm4tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGVhY3RpdmF0ZURhc2hib2FyZCA9ICdkZWFjdGl2YXRlLWRhc2hib2FyZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEZWxldGVDb29raWVzID0gJ2RlbGV0ZS1jb29raWVzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlbGV0ZUZpZWxkc1VJID0gJ2RlbGV0ZS1maWVsZHMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGVsZXRlU2hlZXRVSSA9ICdkZWxldGUtc2hlZXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGVzY3JpYmVBZGhvY0NsdXN0ZXJVSSA9ICdkZXNjcmliZS1hZGhvYy1jbHVzdGVyLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlc2NyaWJlRHJpbGxQYXRoVUkgPSAnZGVzY3JpYmUtZHJpbGxwYXRoLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlc2NyaWJlRmllbGRVSSA9ICdkZXNjcmliZS1maWVsZC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEZXNjcmliZUZvcmVjYXN0VUkgPSAnZGVzY3JpYmUtZm9yZWNhc3QtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGVzY3JpYmVTY2hlbWFEcmlsbFBhdGhVSSA9ICdkZXNjcmliZS1zY2hlbWEtZHJpbGxwYXRoLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERlc2NyaWJlVHJlbmRMaW5lID0gJ2Rlc2NyaWJlLXRyZW5kLWxpbmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGVzY3JpYmVUcmVuZE1vZGVsID0gJ2Rlc2NyaWJlLXRyZW5kLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE9wZW5EaXNjb3ZlclBhbmVMaW5rcyA9ICdvcGVuLWRpc2NvdmVyLXBhbmUtbGlua3MnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRGlzbWlzc0dvVG9Xb3Jrc2hlZXRUb29sdGlwVUkgPSAnZGlzbWlzcy1nby10by13b3Jrc2hlZXQtdG9vbHRpcC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEb3dubG9hZENvcHlEYXRhU291cmNlID0gJ2Rvd25sb2FkLWNvcHktZGF0YS1zb3VyY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRHJpbGxkb3duVUkgPSAnZHJpbGxkb3duLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERyb3BTY2hlbWFTZWxPblNoZWxmVUkgPSAnZHJvcC1zY2hlbWEtc2VsLW9uLXNoZWxmLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIERyb3BVSSA9ICdkcm9wLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIER1cGxpY2F0ZURhdGFTb3VyY2VVSSA9ICdkdXBsaWNhdGUtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEdXBsaWNhdGVTaGVldEFzQ3Jvc3N0YWIgPSAnZHVwbGljYXRlLXNoZWV0LWFzLWNyb3NzdGFiJyxcclxuXHJcbiAgICAvLyBcclxuICAgIER1cGxpY2F0ZVNoZWV0T3JDcm9zc3RhYlVJID0gJ2R1cGxpY2F0ZS1zaGVldC1vci1jcm9zc3RhYi11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBEdXBsaWNhdGVTaGVldFVJID0gJ2R1cGxpY2F0ZS1zaGVldC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0QWxpYXNlc1VJID0gJ2VkaXQtYWxpYXNlcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0QW5ub3RhdGlvbiA9ICdlZGl0LWFubm90YXRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdEF4aXNVSSA9ICdlZGl0LWF4aXMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdENhbGN1bGF0ZWRTZXRVSSA9ICdlZGl0LWNhbGN1bGF0ZWQtc2V0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRDYWxjdWxhdGlvblVJID0gJ2VkaXQtY2FsY3VsYXRpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdENhcHRpb25VSSA9ICdlZGl0LWNhcHRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdENvbWJpbmVkRmllbGRVSSA9ICdlZGl0LWNvbWJpbmVkLWZpZWxkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRDb3B5RmllbGRVSSA9ICdlZGl0LWNvcHktZmllbGQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdERhdGFTb3VyY2VVSSA9ICdlZGl0LWRhdGFzb3VyY2UtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdERhdGFTb3VyY2VGaWVsZEFsaWFzZXMgPSAnZWRpdC1kYXRhc291cmNlLWZpZWxkLWFsaWFzZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdERhdGFTb3VyY2VGaWx0ZXJzVUkgPSAnZWRpdC1kYXRhc291cmNlLWZpbHRlcnMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdERhdGFTb3VyY2VTaXRlUGF0aHNVSSA9ICdlZGl0LWRhdGFzb3VyY2Utc2l0ZS1wYXRocy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0RGF0ZUJpblVJID0gJ2VkaXQtZGF0ZS1iaW4tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdERlZmF1bHRTb3J0VUkgPSAnZWRpdC1kZWZhdWx0LXNvcnQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdERyb3BMaW5lc1VJID0gJ2VkaXQtZHJvcC1saW5lcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0RHJvcEZpZWxkVUkgPSAnZWRpdC1kcm9wLWZpZWxkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXREYXRhU291cmNlUmVsYXRpb25zaGlwc1VJID0gJ2VkaXQtZGF0YXNvdXJjZS1yZWxhdGlvbnNoaXBzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRFbnVtZXJhdGVkU2V0VUkgPSAnZWRpdC1lbnVtZXJhdGVkLXNldCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0RmlsdGVyUXVpY2tGaWx0ZXIgPSAnZWRpdC1maWx0ZXItcXVpY2stZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRGaWx0ZXJVSSA9ICdlZGl0LWZpbHRlci11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0Rm9yZWNhc3RVSSA9ICdlZGl0LWZvcmVjYXN0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRHcm91cFVJID0gJ2VkaXQtZ3JvdXAtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdEdyb3VwVmFsdWUgPSAnZWRpdC1ncm91cC12YWx1ZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0R3JvdXBWYWx1ZUxhYmVsID0gJ2VkaXQtZ3JvdXAtdmFsdWUtbGFiZWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdExlZ2VuZEdyb3VwVmFsdWVVSSA9ICdlZGl0LWdyb3VwLXZhbHVlLWxlZ2VuZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0SW1hZ2VVSSA9ICdlZGl0LWltYWdlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRMZWdlbmRNZW1iZXJBbGlhc1VJID0gJ2VkaXQtbGVnZW5kLW1lbWJlci1hbGlhcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0TGVnZW5kVGl0bGVVSSA9ICdlZGl0LWxlZ2VuZC10aXRsZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0TWFya0NvbG9yVUkgPSAnZWRpdC1tYXJrLWNvbG9yLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRNYXJrU2hhcGVVSSA9ICdlZGl0LW1hcmstc2hhcGUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdE1lbWJlckFsaWFzID0gJ2VkaXQtbWVtYmVyLWFsaWFzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRNZW1iZXJBbGlhc0xhYmVsID0gJ2VkaXQtbWVtYmVyLWFsaWFzLWxhYmVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRQYWdlVGl0bGVVSSA9ICdlZGl0LXBhZ2UtdGl0bGUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFBhcmFtZXRlckN0cmxUaXRsZSA9ICdlZGl0LXBhcmFtLWNvbnRyb2wtdGl0bGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFBkZlBhZ2VTZWxlY3Rpb25VSSA9ICdlZGl0LXBkZi1wYWdlLXNlbGVjdGlvbi11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0UHJpbWFyeUFsaWFzZXNVSSA9ICdlZGl0LXByaW1hcnktYWxpYXNlcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0UmVmZXJlbmNlTGluZSA9ICdlZGl0LXJlZmVyZW5jZS1saW5lJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRTY2hlbWFDYWxjdWxhdGlvblVJID0gJ2VkaXQtc2NoZW1hLWNhbGN1bGF0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRTY2hlbWFDYWxjdWxhdGlvblJhbmdlVUkgPSAnZWRpdC1zY2hlbWEtY2FsY3VsYXRpb24tcmFuZ2UtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFNjaGVtYUNhcHRpb25VSSA9ICdlZGl0LXNjaGVtYS1jYXB0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRTY2hlbWFGaWVsZEFsaWFzVUkgPSAnZWRpdC1zY2hlbWEtZmllbGQtYWxpYXMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzZXRTY2hlbWFDYXB0aW9uVUkgPSAncmVzZXQtc2NoZW1hLWZpZWxkLWFsaWFzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlc2V0TXVsdGlwbGVTY2hlbWFDYXB0aW9uc1VJID0gJ3Jlc2V0LW11bHRpcGxlLXNjaGVtYS1maWVsZC1hbGlhcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFZGl0U2NoZW1hTnVtZXJpY0JpbnNVSSA9ICdlZGl0LXNjaGVtYS1udW1lcmljLWJpbnMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFNldFVJID0gJ2VkaXQtc2V0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRUaXRsZVF1aWNrRmlsdGVyID0gJ2VkaXQtdGl0bGUtcXVpY2stZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRUaXRsZVVJID0gJ2VkaXQtdGl0bGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFRvb2x0aXBVSSA9ICdlZGl0LXRvb2x0aXAnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFRyZW5kTGluZXNVSSA9ICdlZGl0LXRyZW5kLWxpbmVzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRVc2VyRGVzY3JpcHRpb25VSSA9ICdlZGl0LXVzZXItZGVzY3JpcHRpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRWRpdFdNU01hcFRpbGVTZXJ2ZXIgPSAnZWRpdC13bXMtbWFwLXRpbGUtc2VydmVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRab25lUGFyYW0gPSAnZWRpdC16b25lLXBhcmFtJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVkaXRab25lVXJsID0gJ2VkaXQtem9uZS11cmwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXN0YWJsaXNoQ29ubmVjdGlvblVJID0gJ2VzdGFibGlzaC1jb25uZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEVzdGFibGlzaFRhYmxlYXVTZXJ2ZXJDb25uZWN0aW9uVUkgPSAnZXN0YWJsaXNoLXRhYmxlYXUtc2VydmVyLWNvbm5lY3Rpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXhlY3V0ZVVJQXV0b21hdGlvbkJ1dHRvbiA9ICdleGVjdXRlLXVpLWJ1dHRvbi1hY3Rpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXhlY3V0ZVVJQXV0b21hdGlvbkNvbWJvQm94ID0gJ2V4ZWN1dGUtdWktY29tYm8tYm94LWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uR2VuZXJpY1dpZGdldCA9ICdleGVjdXRlLXVpLWdlbmVyaWMtd2lkZ2V0LWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uTGFiZWwgPSAnZXhlY3V0ZS11aS1sYWJlbC1hY3Rpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXhlY3V0ZVVJQXV0b21hdGlvbk1lbnUgPSAnZXhlY3V0ZS11aS1tZW51LWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uSXRlbVZpZXcgPSAnZXhlY3V0ZS11aS1pdGVtLXZpZXctYWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4ZWN1dGVVSUF1dG9tYXRpb25UZXh0Qm94ID0gJ2V4ZWN1dGUtdWktdGV4dC1ib3gtYWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4ZWN1dGVVSUF1dG9tYXRpb25Ub2dnbGVCdXR0b24gPSAnZXhlY3V0ZS11aS10b2dnbGUtYnV0dG9uLWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uU2xpZGVyID0gJ2V4ZWN1dGUtdWktc2xpZGVyLWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uV2luZG93ID0gJ2V4ZWN1dGUtdWktd2luZG93LWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uV2ViVmlldyA9ICdleGVjdXRlLXVpLXdlYi12aWV3LWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uVGFiID0gJ2V4ZWN1dGUtdWktdGFiLWFjdGlvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeGVjdXRlVUlBdXRvbWF0aW9uVGV4dEJyb3dzZXIgPSAnZXhlY3V0ZS11aS10ZXh0LWJyb3dzZXItYWN0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4aXRBcHBsaWNhdGlvbiA9ICdleGl0LWFwcGxpY2F0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4cG9ydERhdGEgPSAnZXhwb3J0LWRhdGEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXhwb3J0RGF0YVNvdXJjZVVJID0gJ2V4cG9ydC1kYXRhc291cmNlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4cG9ydFBhY2thZ2VkV29ya2Jvb2sgPSAnZXhwb3J0LXBhY2thZ2VkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEV4cG9ydFdvcmtib29rU2hlZXRzVUkgPSAnZXhwb3J0LXdvcmtib29rLXNoZWV0cy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeHRTdmNDb25maWdVSSA9ICdleHQtc3ZjLWNvbmZpZy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBFeHRyYWN0SGlzdG9yeSA9ICdleHRyYWN0LWhpc3RvcnknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXh0cmFjdFByb3BlcnRpZXNVSSA9ICdleHRyYWN0LXByb3BlcnRpZXMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRXh0cmFjdFVJID0gJ2V4dHJhY3QtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRmlsdGVyRmllbGRMYWJlbFVJID0gJ2ZpbHRlci1maWVsZC1sYWJlbC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGb3JtYXRBbm5vdGF0aW9uID0gJ2Zvcm1hdC1hbm5vdGF0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZvcm1hdEF4aXNVSSA9ICdmb3JtYXQtYXhpcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGb3JtYXRDYXB0aW9uVGl0bGVVSSA9ICdmb3JtYXQtY2FwdGlvbi10aXRsZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGb3JtYXRGaWVsZCA9ICdmb3JtYXQtcGFuZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGb3JtYXRGaWVsZExhYmVsVUkgPSAnZm9ybWF0LWZpZWxkLWxhYmVsLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZvcm1hdExhYmVsID0gJ2Zvcm1hdC1sYWJlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBGb3JtYXRMZWdlbmRzVUkgPSAnZm9ybWF0LWxlZ2VuZHMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRm9ybWF0UmVmZXJlbmNlTGluZSA9ICdmb3JtYXQtcmVmZXJlbmNlLWxpbmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgRm9ybWF0VUkgPSAnZm9ybWF0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEZ1bGxTY3JlZW4gPSAnZnVsbHNjcmVlbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXREYXNoYm9hcmRTaWRlUGFuZU1vZGUgPSAnZ2V0LWRhc2hib2FyZC1zaWRlcGFuZS1tb2RlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldERlYnVnZ2luZ0luZm8gPSAnZ2V0LWRlYnVnZ2luZy1pbmZvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldEljb25QYXRoRm9yRW5jb2RpbmdUeXBlID0gJ2dldC1pY29uLXBhdGgtZm9yLWVuY29kaW5nLXR5cGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0SWNvblBhdGhGb3JQcmltaXRpdmVUeXBlID0gJ2dldC1pY29uLXBhdGgtZm9yLXByaW1pdGl2ZS10eXBlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFRhYmxlT3B0aW9uc1ByZXNNb2RlbCA9ICdnZXQtdGFibGUtb3B0aW9ucy1wcmVzLW1vZGVsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFdpbmRvd05hbWVVSSA9ICdnZXQtd2luZG93LW5hbWUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0V29ya3NoZWV0U2lkZVBhbmVNb2RlID0gJ2dldC13b3Jrc2hlZXQtc2lkZXBhbmUtbW9kZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRIaWRkZW5TaGVldHMgPSAnZ2V0LWhpZGRlbi1zaGVldHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0T3BlblBhbmVNUlVzID0gJ2dldC1vcGVuLXBhbmUtbXJ1cycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRPcGVuUGFuZVNhbXBsZVdvcmtib29rcyA9ICdnZXQtb3Blbi1wYW5lLXNhbXBsZS13b3JrYm9va3MnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0UmV0YXJnZXREYXRhU291cmNlUHJlc01vZGVsVUkgPSAnZ2V0LXJldGFyZ2V0LWRhdGFzb3VyY2UtcHJlcy1tb2RlbC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRTY2hlbWFWaWV3ZXJQcmVzTW9kZWwgPSAnZ2V0LXNjaGVtYS12aWV3ZXItcHJlcy1tb2RlbCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHZXRTZWxlY3RlZFNoZWV0cyA9ICdnZXQtc2VsZWN0ZWQtc2hlZXRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFNoZWV0U29ydGVyVGh1bWJuYWlsID0gJ2dldC1zaGVldC1zb3J0ZXItdGh1bWJuYWlsJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFNoZWV0VGFiVUlUaHVtYm5haWwgPSAnZ2V0LXNoZWV0LXRhYi11aS10aHVtYm5haWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgR2V0U2hlZXRUYWJVSVRleHQgPSAnZ2V0LXNoZWV0LXRhYi11aS10ZXh0JyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdldFZpc2libGVUcmVlSXRlbXMgPSAnZ2V0LXZpc2libGUtdHJlZS1pdGVtcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBHb3RvU2hlZXRSYW5nZSA9ICdnb3RvJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEdvdG9VUkwgPSAnZ290by11cmwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGlkZUNhcHRpb25VSSA9ICdoaWRlLWNhcHRpb24nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGlkZUZpbG1zdHJpcFVJID0gJ2hpZGUtZmlsbXN0cmlwLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIEhpZGVUaXRsZVVJID0gJ2hpZGUtdGl0bGUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGlkZVpvbmVVSSA9ICdoaWRlLXpvbmUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSGlkZUFsbFNoZWV0c1VJID0gJ2hpZGUtYWxsLXNoZWV0cy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBVbmhpZGVBbGxTaGVldHNVSSA9ICd1bmhpZGUtYWxsLXNoZWV0cy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBJbXBvcnRMb2NhbERhdGFVSSA9ICdpbXBvcnQtbG9jYWwtZGF0YS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBJbXBvcnRNYXBTb3VyY2UgPSAnaW1wb3J0LW1hcC1zb3VyY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSW1wb3J0TWFwU291cmNlVUkgPSAnaW1wb3J0LW1hcC1zb3VyY2UtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgSW1wb3J0V29ya2Jvb2tVSSA9ICdpbXBvcnQtd29ya2Jvb2stdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTG9hZERlZmF1bHRGb3JtYXR0aW5nVUkgPSAnbG9hZC1mb3JtYXR0aW5nLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIExvY2F0ZUZpZWxkVUkgPSAnbG9jYXRlLWZpZWxkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIExvZ01lbW9yeVVzYWdlID0gJ2xvZy1tZW1vcnktdXNhZ2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWFuYWdlTGljZW5zaW5nID0gJ21hbmFnZS1saWNlbnNpbmcnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWFuYWdlTWFwYm94ID0gJ21hbmFnZS1tYXBib3gnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWFuYWdlUHVibGljV29ya2Jvb2tzID0gJ21hbmFnZS1wdWJsaWMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTWFuYWdlTWFwU2VydmljZXMgPSAnbWFuYWdlLW1hcC1zZXJ2aWNlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBNYXBMYXllcnNVSSA9ICdtYXAtbGF5ZXJzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE1hbmFnZVdNUyA9ICdtYW5hZ2Utd21zJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVwZ3JhZGVEYXRhU291cmNlc1VJID0gJ3VwZ3JhZGUtZGF0YXNvdXJjZXMtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVXBncmFkZURhdGFTb3VyY2VVSSA9ICd1cGdyYWRlLWRhdGFzb3VyY2UtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTW92ZVJlcG9zaXRvcnkgPSAnbW92ZS1yZXBvc2l0b3J5JyxcclxuXHJcbiAgICAvLyBcclxuICAgIE5ld1NjaGVtYURyaWxsUGF0aFVJID0gJ25ldy1zY2hlbWEtZHJpbGwtcGF0aC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBOZXdVSURhc2hib2FyZCA9ICduZXctZGFzaGJvYXJkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE5ld1VJV29ya3NoZWV0ID0gJ25ldy13b3Jrc2hlZXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgTmV3VUlTdG9yeWJvYXJkID0gJ25ldy1zdG9yeWJvYXJkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE5ld1dvcmtib29rID0gJ25ldy13b3JrYm9vaycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBOZXh0U2hlZXQgPSAnbmV4dC1zaGVldCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBOb25SYW5nZWRFZGl0UmVmZXJlbmNlTGluZSA9ICdub24tcmFuZ2VkLWVkaXQtcmVmZXJlbmNlLWxpbmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgT3BlbkJvb2ttYXJrID0gJ29wZW4tYm9va21hcmsnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgT3BlbkZyb21Xb3JrZ3JvdXAgPSAnb3Blbi13b3JrYm9vay1mcm9tLXdvcmtncm91cCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcGVuTWFwU291cmNlID0gJ29wZW4tbWFwLXNvdXJjZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcGVuTWFwU291cmNlVUkgPSAnb3Blbi1tYXAtc291cmNlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE9wZW5TYW1wbGVXb3JrYm9vayA9ICdvcGVuLXNhbXBsZS13b3JrYm9vaycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcGVuV29ya2Jvb2sgPSAnb3Blbi13b3JrYm9vaycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcGVuUmVjZW50V29ya2Jvb2sgPSAnb3Blbi1yZWNlbnQtd29ya2Jvb2snLFxyXG5cclxuICAgIC8vIFxyXG4gICAgT3Blbk90aGVyRmlsZXMgPSAnb3Blbi1vdGhlci1maWxlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBPcHRpbWl6ZUV4dHJhY3RVSSA9ICdvcHRpbWl6ZS1leHRyYWN0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBhZ2VTZXR1cCA9ICdwYWdlLXNldHVwJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBhc3RlID0gJ3Bhc3RlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBhc3RlRmllbGRzRGVmblVJID0gJ3Bhc3RlLWZpZWxkcy1kZWZuLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBhc3RlV29ya3NoZWV0Rm9ybWF0dGluZyA9ICdwYXN0ZS1mb3JtYXR0aW5nJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBERkV4cG9ydCA9ICdleHBvcnQtcGRmJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFBlcnNwZWN0aXZlc1VJID0gJ3BlcnNwZWN0aXZlcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQcmVzZW50YXRpb25Nb2RlID0gJ3ByZXNlbnRhdGlvbi1tb2RlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFByaW50ID0gJ3ByaW50JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFByb21wdFNjcmlwdCA9ICdwcm9tcHQtY29tbWFuZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQcm9wZXJ0aWVzRGF0YVNvdXJjZVVJID0gJ3Byb3BlcnRpZXMtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQdWJsaXNoRGF0YXNvdXJjZVRvV29ya2dyb3VwID0gJ3B1Ymxpc2gtZGF0YXNvdXJjZS10by13b3JrZ3JvdXAnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUHVibGlzaERhdGFzb3VyY2VUb1dvcmtncm91cEZyb21EYXRhID0gJ3B1Ymxpc2gtZGF0YXNvdXJjZS10by13b3JrZ3JvdXAtZnJvbS1kYXRhJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFB1Ymxpc2hEYXRhc291cmNlVG9Xb3JrZ3JvdXBSYW5nZSA9ICdwdWJsaXNoLWRhdGFzb3VyY2UtdG8td29ya2dyb3VwLXJhbmdlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFB1Ymxpc2hXb3JrYm9va1RvV29ya2dyb3VwID0gJ3B1Ymxpc2gtd29ya2Jvb2stdG8td29ya2dyb3VwJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFB1Ymxpc2hEYXRhc291cmNlVG9Xb3JrZ3JvdXBGcm9tV29ya2Jvb2tEYXRhID0gJ3B1Ymxpc2gtZGF0YXNvdXJjZS10by13b3JrZ3JvdXAtZnJvbS13b3JrYm9vay1kYXRhJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFByb21wdEZvckRhdGFTb3VyY2VGaWxlVUkgPSAncHJvbXB0LWZvci1kYXRhc291cmNlLWZpbGUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUHJvbXB0VW5rbm93bldEQ1VybFVJID0gJ3Byb21wdC11bmtub3duLXdkYy11cmwtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUXVlcnlEYXRhU291cmNlVUkgPSAncXVlcnktZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBRdWlja0ZpbHRlckZpZWxkTGFiZWxVSSA9ICdxdWljay1maWx0ZXItZmllbGQtbGFiZWwtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUXVpY2tUYWJsZUNhbGNVSSA9ICdxdWljay10YWJsZS1jYWxjLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlY29ubmVjdE1hcFNvdXJjZVVJID0gJ3JlY29ubmVjdC1tYXAtc291cmNlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlY29yZFBlcmZvcm1hbmNlID0gJ3JlY29yZC1wZXJmJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlZnJlc2hBbGxFeHRyYWN0c1VJID0gJ3JlZnJlc2gtYWxsLWV4dHJhY3RzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlZnJlc2hBbGxUaHVtYm5haWxzVUkgPSAncmVmcmVzaC1hbGwtdGh1bWJuYWlscycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZWZyZXNoQXV0b0V4dHJhY3RVSSA9ICdyZWZyZXNoLWF1dG8tZXh0cmFjdC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZWZyZXNoRGF0YVNvdXJjZVVJID0gJ3JlZnJlc2gtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZWZyZXNoRXh0cmFjdFVJID0gJ3JlZnJlc2gtZXh0cmFjdC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZWZyZXNoRnJvbVNvdXJjZVVJID0gJ3JlZnJlc2gtZnJvbS1zb3VyY2UtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVmcmVzaExvY2FsRGF0YVVJID0gJ3JlZnJlc2gtbG9jYWwtZGF0YS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZWZyZXNoVGh1bWJuYWlsVUkgPSAncmVmcmVzaC10aHVtYm5haWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVsZWFzZU1lbW9yeSA9ICdyZWxlYXNlLW1lbW9yeScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW1vdmVBbm5vdGF0aW9uID0gJ3JlbW92ZS1hbm5vdGF0aW9uJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZUV4dHJhY3RVSSA9ICdyZW1vdmUtZXh0cmFjdC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW1vdmVNUlVJdGVtID0gJ3JlbW92ZS1tcnUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlU2F2ZWREYXRhU291cmNlVUkgPSAncmVtb3ZlLXNhdmVkLWRhdGFzb3VyY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVtb3ZlU2hlZXRGcm9tRGFzaGJvYXJkVUkgPSAncmVtb3ZlLXNoZWV0LWZyb20tZGFzaGJvYXJkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbW92ZVRhYmxlVUkgPSAncmVtb3ZlLXRhYmxlLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlbmFtZURhdGFTb3VyY2VVSSA9ICdyZW5hbWUtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZW5hbWVTY2hlbWFGaWVsZEZvbGRlclVJID0gJ3JlbmFtZS1maWVsZC1mb2xkZXItdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVuYW1lU2NoZW1hRHJpbGxQYXRoVUkgPSAncmVuYW1lLXNjaGVtYS1kcmlsbHBhdGgtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVuYW1lU2hlZXRVSSA9ICdyZW5hbWUtc2hlZXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVvcmRlclNoZWV0c1VJID0gJ3Jlb3JkZXItc2hlZXRzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlcGxhY2VEYXRhU291cmNlV2l0aERhdGFTZXJ2ZXJEYXRhU291cmNlVUkgPSAncmVwbGFjZS1kYXRhc291cmNlLXdpdGgtZGF0YS1zZXJ2ZXItZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXBsYWNlRmllbGRVSSA9ICdyZXBsYWNlLWZpZWxkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlc2V0Q2FwdGlvblVJID0gJ3Jlc2V0LWNhcHRpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzZXRDYXJkcyA9ICdyZXNldC1jYXJkcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNldExvY2FsRGF0YVVJID0gJ3JlbW92ZS1sb2NhbC1kYXRhLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlc2V0TWVzc2FnZXMgPSAncmVzZXQtbWVzc2FnZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3RhcnRPbmxpbmVTeW5jQ2xpZW50ID0gJ3N0YXJ0LW9ubGluZS1zeW5jLWNsaWVudCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBSZXNldFRpdGxlVUkgPSAncmVzZXQtdGl0bGUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzZXRUb0RlZmF1bHRzTWFwQ2FyZCA9ICdyZXNldC1tYXAtdG8tZGVmYXVsdHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzZXRXb3JrYm9vayA9ICdyZXZlcnQtd29ya2Jvb2stdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmV0YXJnZXREYXRhU291cmNlID0gJ3JldGFyZ2V0LWRhdGFzb3VyY2UnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmV0YXJnZXREYXRhU291cmNlVUkgPSAncmV0YXJnZXQtZGF0YXNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTYXZlQXNXb3JrYm9vayA9ICdzYXZlLWFzLXdvcmtib29rJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNhdmVCb29rbWFyayA9ICdzYXZlLWJvb2ttYXJrJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNhdmVEZWJ1Z2dpbmdXb3JrYm9vayA9ICdzYXZlLWRlYnVnZ2luZy13b3JrYm9vaycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTYXZlRGVmYXVsdEZvcm1hdHRpbmdVSSA9ICdzYXZlLWZvcm1hdHRpbmctdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2F2ZVdvcmtib29rID0gJ3NhdmUtd29ya2Jvb2snLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2NoZW1hRGVmYXVsdE1lbWJlclVJID0gJ3NjaGVtYS1kZWZhdWx0LW1lbWJlci11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTY3JvbGxTaGVldCA9ICdzY3JvbGwtc2hlZXQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0QWNjb3VudHNEaW1lbnNpb24gPSAnc2V0LWFjY291bnRzLWRpbWVuc2lvbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRBY3RpdmVDb25uZWN0aW9uVUkgPSAnc2V0LWFjdGl2ZS1jb25uZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldEFuYWx5dGljc0Ryb3BUYXJnZXRWaXNpYmlsaXR5ID0gJ3NldC1hbmFseXRpY3MtZHJvcC10YXJnZXQtdmlzaWJpbGl0eScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXREYXNoYm9hcmRTaWRlUGFuZU1vZGUgPSAnc2V0LWRhc2hib2FyZC1zaWRlcGFuZS1tb2RlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldERlZmF1bHREYXRlRm9ybWF0VUkgPSAnc2V0LWRlZmF1bHQtZGF0ZS1mb3JtYXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RGVmYXVsdExvY2F0aW9uVUkgPSAnc2V0LWRlZmF1bHQtbG9jYXRpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RGVmYXVsdE1hcFNvdXJjZVVJID0gJ3NldC1kZWZhdWx0LW1hcHNvdXJjZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXREZWZhdWx0VGV4dEZvcm1hdFVJID0gJ3NldC1kZWZhdWx0LXRleHQtZm9ybWF0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldERlZmF1bHRVdGlsaXR5TWVtYmVyID0gJ3NldC1kZWZhdWx0LXV0aWxpdHktbWVtYmVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldEZyZWVGb3JtRGFzaGJvYXJkVUkgPSAnc2V0LWZyZWUtZm9ybS1kYXNoYm9hcmQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0RmlsdGVyU2hhcmVkVUkgPSAnc2V0LWZpbHRlci1zaGFyZWQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0S2V5ID0gJ3NldC1rZXknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0UHJvZHVjdEF1dG9VcGRhdGUgPSAnc2V0LWF1dG8tdXBkYXRlJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNldFF1ZXJ5RmFpbHVyZSA9ICdzZXQtcXVlcnktZmFpbHVyZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRSZW5kZXJpbmcgPSAnc2V0LXJlbmRlcmluZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRSdW50aW1lSW1tZWRpYXRlTW9kZSA9ICdzZXQtcnVudGltZS1pbW1lZGlhdGUtbW9kZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRVSUxhbmd1YWdlID0gJ3NldC11aS1sYW5ndWFnZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRXb3JrYm9va0xvY2FsZVVJID0gJ3NldC13b3JrYm9vay1sb2NhbGUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2V0V29ya3NoZWV0U2lkZVBhbmVNb2RlID0gJ3NldC13b3Jrc2hlZXQtc2lkZXBhbmUtbW9kZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRab25lRml4ZWRTaXplVUkgPSAnc2V0LXpvbmUtZml4ZWQtc2l6ZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZXRzSW5PdXRVSSA9ICdzaG93LWluLW91dC1zZXRzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNoYXBlTGVnZW5kRWRpdFVJID0gJ3NoYXBlLWxlZ2VuZC1lZGl0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dDbG91ZEZpbGVPQXV0aFByb21wdEFuZFNlbGVjdGlvblVJID0gJ3Nob3ctY2xvdWRmaWxlLW9hdXRoLXByb21wdC1hbmQtc2VsZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dDb25uZWN0aW9uQXV0aFVJID0gJ3Nob3ctY29ubmVjdGlvbi1hdXRoLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dDb25uZWN0aW9uQXV0aEFuZEVzdGFibGlzaENvbm5lY3Rpb25VSSA9ICdzaG93LWNvbm5lY3Rpb24tYXV0aC1hbmQtZXN0YWJsaXNoLWNvbm5lY3Rpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0Nvbm5lY3RUYWIgPSAnc2hvdy1jb25uZWN0LXRhYicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93Q3VzdG9tU3BsaXREaWFsb2dVSSA9ICdzaG93LWN1c3RvbS1zcGxpdC1kaWFsb2ctdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0RvY3VtZW50ID0gJ2RvY3VtZW50JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dGZWF0dXJlRmxhZ0RpYWxvZyA9ICdzaG93LWZlYXR1cmUtZmxhZy1kaWFsb2cnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0ZpZWxkRm9ybWF0VUkgPSAnc2hvdy1maWVsZC1mb3JtYXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0ZpZWxkSW5TY2hlbWFVSSA9ICdzaG93LWZpZWxkLWluLXNjaGVtYScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93RmlsbXN0cmlwVUkgPSAnc2hvdy1maWxtc3RyaXAtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0dvb2dsZVNoZWV0c1NlbGVjdGlvblVJID0gJ3Nob3ctZ29vZ2xlLXNoZWV0cy1zZWxlY3Rpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0hlbHAgPSAnc2hvdy1oZWxwJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dIaWRlRGFzaGJvYXJkU2hlZXRVSSA9ICdzaG93LWhpZGUtZGFzaGJvYXJkLXNoZWV0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dIaWRlU3Rvcnlib2FyZFNoZWV0VUkgPSAnc2hvdy1oaWRlLXN0b3J5Ym9hcmQtc2hlZXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd0dyYXBoaWNzQVBJID0gJ3Nob3ctZ3JhcGhpY3MtYXBpLWNvbW1hbmQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd01hcE9wdGlvbnNEaWFsb2cgPSAnc2hvdy1tYXAtb3B0aW9ucy1kaWFsb2cnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd01lYXN1cmVzVUkgPSAnc2hvdy1tZWFzdXJlcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93TWVDeWNsZVVJID0gJ3Nob3ctbWUtY3ljbGUtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd01lSGlkZVVJID0gJ3Nob3ctbWUtaGlkZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93TWVtYmVyc1VJID0gJ3Nob3ctbWVtYmVycy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93TWVUb2dnbGVVSSA9ICdzaG93LW1lLXRvZ2dsZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93T0F1dGhQcm9tcHRVSSA9ICdzaG93LW9hdXRoLXByb21wdC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93UGFyYW1ldGVyQ29udHJvbCA9ICdzaG93LXBhcmFtZXRlci1jb250cm9sJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dQdWJsaWNTdGF0dXNEaWFsb2cgPSAnc2hvdy1wdWJsaWMtc3RhdHVzLWRpYWxvZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93UHVibGljUXVvdGFFeGNlZWRlZERpYWxvZyA9ICdzaG93LXB1YmxpYy1xdW90YS1leGNlZWRlZC1kaWFsb2cnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd1B1Ymxpc2hEYXRhc291cmNlVG9Xb3JrZ3JvdXBEaWFsb2cgPSAnc2hvdy1wdWJsaXNoLWRhdGFzb3VyY2UtdG8td29ya2dyb3VwLWRpYWxvZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93UXVlcnlCYW5kaW5nQW5kSW5pdGlhbFNRTERpYWxvZ1VJID0gJ3Nob3ctcXVlcnktYmFuZGluZy1hbmQtaW5pdGlhbC1zcWwtZGlhbG9nLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dRdWlja0ZpbHRlciA9ICdzaG93LXF1aWNrZmlsdGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dRdWlja0ZpbHRlclVJID0gJ3Nob3ctcXVpY2tmaWx0ZXItdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2hvd1J1bnRpbWVJbmRpY2F0b3IgPSAnc2hvdy1ydW50aW1lLWluZGljYXRvcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93U2hlZXRTb3J0ZXIgPSAnc2hlZXQtc29ydGVyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dUYWJsZU9wdGlvbnNEaWFsb2cgPSAnc2hvdy10YWJsZS1vcHRpb25zLWRpYWxvZycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaG93V2ViRGF0YUNvbm5lY3RvclVJID0gJ3Nob3ctd2ViLWRhdGEtY29ubmVjdG9yLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNob3dXaWRnZXRTYW5kYm94VUkgPSAnc2hvdy13aWRnZXQtc2FuZGJveC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTaXplTGVnZW5kRWRpdFVJID0gJ3NpemUtbGVnZW5kLWVkaXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU2xlZXBVSSA9ICdzbGVlcC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTb3J0QXNjZW5kaW5nRmllbGRMYWJlbFVJID0gJ3NvcnQtYXNjZW5kaW5nLWZpZWxkLWxhYmVsLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFNvcnREZXNjZW5kaW5nRmllbGRMYWJlbFVJID0gJ3NvcnQtZGVzY2VuZGluZy1maWVsZC1sYWJlbC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTb3J0RmllbGRMYWJlbFVJID0gJ3NvcnQtZmllbGQtbGFiZWwtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU29ydFVJID0gJ3NvcnQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3BsaXRGaWVsZFVJID0gJ3NwbGl0LWZpZWxkLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFN0YWNrTWFya3NVSSA9ICdzdGFjay1tYXJrcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTdGFydEZpbGVDb25uZWN0aW9uVUkgPSAnc3RhcnQtZmlsZS1jb25uZWN0aW9uLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFN0YXJ0UGlsbEVkaXRVSSA9ICdzdGFydC1waWxsLWVkaXQtdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgU3dpdGNoVG9Db25uZWN0VGFiID0gJ3N3aXRjaC10by1jb25uZWN0LXRhYicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTd2l0Y2hUb0RvY3VtZW50ID0gJ3N3aXRjaC10by1kb2N1bWVudCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTd2l0Y2hUb1NoZWV0U29ydGVyID0gJ3N3aXRjaC10by1zaGVldC1zb3J0ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVGFibGVDYWxjQWRkcmVzc1VJID0gJ3RhYmxlLWNhbGMtYWRkcmVzcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUYWJsZUNhbGNJZ25vcmVVSSA9ICd0YWJsZS1jYWxjLWlnbm9yZS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUYWJsZUNhbGNPcmRlcmluZ1VJID0gJ3RhYmxlLWNhbGMtb3JkZXJpbmctdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVGFibGVDYWxjVUkgPSAndGFibGUtY2FsYy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVDb25uZWN0UGFuZVVJID0gJ3RvZ2dsZS1jb25uZWN0LXBhbmUnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVG9nZ2xlRmlsbXN0cmlwVUkgPSAndG9nZ2xlLWZpbG1zdHJpcC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVJTkRKb2luU2VtYW50aWNzVUkgPSAndG9nZ2xlLWluZC1qb2luLXNlbWFudGljcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVQaW5NUlVJdGVtID0gJ3RvZ2dsZS1waW4tbXJ1JyxcclxuXHJcbiAgICAvLyBcclxuICAgIFRvZ2dsZVJlZmVyZW50aWFsSW50ZWdyaXR5VUkgPSAndG9nZ2xlLXJlZmVyZW50aWFsLWludGVncml0eS11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVTdGFydFBhZ2VVSSA9ICd0b2dnbGUtc3RhcnQtcGFnZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUcmFja01lbW9yeSA9ICd0cmFjay1tZW1vcnknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVHJlbmRMaW5lc0ZsYWdVSSA9ICd0cmVuZC1saW5lcy11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBVcGRhdGVEZWZhdWx0c01hcENhcmQgPSAndXBkYXRlLW1hcC1kZWZhdWx0cycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBVcGdyYWRlRXh0cmFjdHNVSSA9ICd1cGdyYWRlLWV4dHJhY3RzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVwZ3JhZGVFeHRyYWN0VUkgPSAndXBncmFkZS1leHRyYWN0LXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFVzZUV4dHJhY3RVSSA9ICd1c2UtZXh0cmFjdC11aScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBVc2VNZW1vcnkgPSAndXNlLW1lbW9yeScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBVdGlsaXR5RGltZW5zaW9uVUkgPSAndXRpbGl0eS1kaW1lbnNpb24tdWknLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmFsaWRhdGVFeHRyYWN0Q3JlZGVudGlhbHNVSSA9ICd2YWxpZGF0ZS1leHRyYWN0LWNyZWRlbnRpYWxzLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdDYXJkID0gJ3ZpZXctY2FyZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWaWV3VGl0bGVDYXJkID0gJ3ZpZXctdGl0bGUtY2FyZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWaWV3U3VtbWFyeUNhcmQgPSAndmlldy1zdW1tYXJ5LWNhcmQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld0NhcHRpb25DYXJkID0gJ3ZpZXctY2FwdGlvbi1jYXJkJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdDb2x1bW5zU2hlbGYgPSAndmlldy1jb2x1bW5zLXNoZWxmJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdSb3dzU2hlbGYgPSAndmlldy1yb3dzLXNoZWxmJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdQYWdlc1NoZWxmID0gJ3ZpZXctcGFnZXMtc2hlbGYnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld0ZpbHRlcnNTaGVsZiA9ICd2aWV3LWZpbHRlcnMtc2hlbGYnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld01lYXN1cmVzU2hlbGYgPSAndmlldy1tZWFzdXJlcy1zaGVsZicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWaWV3TWFya3NTaGVsZiA9ICd2aWV3LW1hcmtzLXNoZWxmJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdDdXJyZW50UGFnZUNhcmQgPSAndmlldy1jdXJyZW50LXBhZ2UtY2FyZCcsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWaWV3RGF0YSA9ICd2aWV3LWRhdGEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld1NRTERhdGFVSSA9ICd2aWV3LXNxbC1kYXRhLXVpJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdEYXRhU291cmNlRGF0YSA9ICd2aWV3LWRhdGFzb3VyY2UtZGF0YScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWaWV3TGVnZW5kID0gJ3ZpZXctbGVnZW5kJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdTaWRlUGFuZSA9ICd2aWV3LXNpZGUtcGFuZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBWaWV3U3RhdHVzQmFyID0gJ3ZpZXctc3RhdHVzYmFyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFZpZXdTdW1tYXJ5RGV0YWlsID0gJ3ZpZXctc3VtbWFyeS1kZXRhaWwnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld1RhYmxlRGF0YSA9ICd2aWV3LXRhYmxlLWRhdGEnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgVmlld1Rvb2xCYXIgPSAndmlldy10b29sYmFyJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFdlYlZpZXdFbmFibGVKYXZhc2NyaXB0ID0gJ3dlYnZpZXctZW5hYmxlLWphdmFzY3JpcHQnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgV2ViVmlld0VuYWJsZVBsdWdpbnMgPSAnd2Vidmlldy1lbmFibGUtcGx1Z2lucycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBXZWJWaWV3QmxvY2tQb3B1cHMgPSAnd2Vidmlldy1ibG9jay1wb3B1cHMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgV2ViVmlld0VuYWJsZVVSTEhvdmVyQWN0aW9ucyA9ICd3ZWJ2aWV3LWVuYWJsZS11cmwtaG92ZXItYWN0aW9ucycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBXb3JrZ3JvdXBDaGFuZ2VEYXRhc2VydmVyID0gJ3dvcmtncm91cC1jaGFuZ2UtZGF0YXNlcnZlcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBXb3JrZ3JvdXBDaGFuZ2VTZXJ2ZXIgPSAnd29ya2dyb3VwLWNoYW5nZS1zZXJ2ZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgV29ya2dyb3VwQ2hhbmdlVXNlciA9ICd3b3JrZ3JvdXAtY2hhbmdlLXVzZXInLFxyXG5cclxuICAgIC8vIFxyXG4gICAgV29ya2dyb3VwUmVtb3ZlTGFzdFNlcnZlciA9ICd3b3JrZ3JvdXAtcmVtb3ZlLWxhc3Qtc2VydmVyJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU3J2Q29tbWFuZHMge1xyXG5cclxuICAgIC8vIHBpbmdzIHRoZSBzZXJ2ZXIgdG8gdGVzdCBpZiB0aGUgc2Vzc2lvbiBpcyBleHBpcmVkXHJcbiAgICBQaW5nU2Vzc2lvbiA9ICdwaW5nLXNlc3Npb24nLFxyXG5cclxuICAgIC8vIEFwcGxpZXMgc25hcHNob3QgZnJvbSBjb21tZW50cyB0byB0aGUgdml6LlxyXG4gICAgQXBwbHlDdXN0b21pemVkVmlldyA9ICdhcHBseS1jdXN0b21pemVkLXZpZXcnLFxyXG5cclxuICAgIC8vIFJlZnJlc2hlcyBWUUxTZXNzaW9uIERhdGFcclxuICAgIFJlZnJlc2hEYXRhID0gJ3JlZnJlc2gtZGF0YScsXHJcblxyXG59XHJcblxyXG5leHBvcnQgZW51bSBEb2NDb21tYW5kcyB7XHJcblxyXG4gICAgLy8gR2V0cyB0aGUgYXhpcyBvcHRpb25zIC5cclxuICAgIEdldEF4aXNPcHRpb25zID0gJ2dldC1heGlzLW9wdGlvbnMnLFxyXG5cclxuICAgIC8vIFJlc2V0IHRoZSBheGlzIG9wdGlvbnMgLlxyXG4gICAgUmVzZXRBeGlzT3B0aW9ucyA9ICdyZXNldC1heGlzLW9wdGlvbnMnLFxyXG5cclxuICAgIC8vIFNob3cgYXhpcyBlZGl0IGRpYWxvZ1xyXG4gICAgU2hvd0VkaXRBeGlzRGlhbG9nID0gJ3Nob3ctZWRpdC1heGlzLWRpYWxvZycsXHJcblxyXG4gICAgLy8gU2V0cyB0aGUgYXhpcyBkaXJlY3Rpb25cclxuICAgIFNldEF4aXNSZXZlcnNlZCA9ICdzZXQtYXhpcy1yZXZlcnNlZCcsXHJcblxyXG4gICAgLy8gU2V0cyB0aGUgYXhpcyBzY2FsZSB0eXBlXHJcbiAgICBTZXRBeGlzU2NhbGVUeXBlID0gJ3NldC1heGlzLXNjYWxlLXR5cGUnLFxyXG5cclxuICAgIC8vIFNldHMgdGhlIG1haW4gdGl0bGUgb2YgYSBxdWFudGl0YXRpdmUgYXhpc1xyXG4gICAgU2V0QXhpc1RpdGxlID0gJ3NldC1heGlzLXRpdGxlJyxcclxuXHJcbiAgICAvLyBTZXRzIHRoZSBzdWJ0aXRsZSBvZiBhIHF1YW50aXRhdGl2ZSBheGlzXHJcbiAgICBTZXRBeGlzU3VidGl0bGUgPSAnc2V0LWF4aXMtc3VidGl0bGUnLFxyXG5cclxuICAgIC8vIFNldHMgd2hldGhlciB3ZSBzaG91bGQgdXNlIHRoZSBhdXRvbWF0aWMgc3VidGl0bGUgZm9yIGEgcXVhbnRpdGF0aXZlIGF4aXNcclxuICAgIFNldEF4aXNVc2VBdXRvbWF0aWNTdWJ0aXRsZSA9ICdzZXQtYXhpcy11c2UtYXV0b21hdGljLXN1YnRpdGxlJyxcclxuXHJcbiAgICAvLyBTZXRzIHRoZSBheGlzIHJhbmdlIHR5cGUgb2YgYSBxdWFudGl0YXRpdmUgYXhpc1xyXG4gICAgU2V0QXhpc0V4dGVudFN0YXJ0VHlwZSA9ICdzZXQtYXhpcy1leHRlbnQtc3RhcnQtdHlwZScsXHJcblxyXG4gICAgLy8gU2V0cyB0aGUgYXhpcyByYW5nZSB0eXBlIG9mIGEgcXVhbnRpdGF0aXZlIGF4aXNcclxuICAgIFNldEF4aXNFeHRlbnRFbmRUeXBlID0gJ3NldC1heGlzLWV4dGVudC1lbmQtdHlwZScsXHJcblxyXG4gICAgLy8gU2V0cyB0aGUgYXhpcyByYW5nZSB0eXBlIG9mIGEgcXVhbnRpdGF0aXZlIGF4aXNcclxuICAgIFNldEJvdGhBeGlzRXh0ZW50c1R5cGUgPSAnc2V0LWJvdGgtYXhpcy1leHRlbnRzLXR5cGUnLFxyXG5cclxuICAgIC8vIFNldHMgd2hldGhlciBvciBub3QgdG8gZm9yY2UtaW5jbHVkZSB6ZXJvIG9uIGEgcXVhbnRpdGF0aXZlIGF4aXNcclxuICAgIFNldEF4aXNJbmNsdWRlWmVybyA9ICdzZXQtYXhpcy1pbmNsdWRlLXplcm8nLFxyXG5cclxuICAgIC8vIFNldHMgbmV3IG1pbi9tYXggcmFuZ2UgZW5kaW5ncyBmb3IgYXhpc1xyXG4gICAgU2V0QXhpc1JhbmdlRW5kID0gJ3NldC1heGlzLXJhbmdlLWVuZCcsXHJcblxyXG4gICAgLy8gU2V0cyBuZXcgbWluL21heCByYW5nZSBlbmRpbmdzIGZvciBheGlzXHJcbiAgICBTZXRBeGlzUmFuZ2VTdGFydCA9ICdzZXQtYXhpcy1yYW5nZS1zdGFydCcsXHJcblxyXG4gICAgLy8gU3luY2hyb25pemUgZHVhbCBheGVzIG9uIGEgZm9sZGVkIHF1YW50aXRhdGl2ZSBheGlzXHJcbiAgICBTZXRBeGlzRm9sZFN0YXRlID0gJ3NldC1heGlzLWZvbGQtc3RhdGUnLFxyXG5cclxuICAgIC8vIFNldCB0aGUgbWFqb3IgdGljayBtYXJrIHN0YXRlXHJcbiAgICBTZXRNYWpvclRpY2tNYXJrU3RhdGUgPSAnc2V0LW1ham9yLXRpY2stbWFyay1zdGF0ZScsXHJcblxyXG4gICAgLy8gU2V0IHRoZSBtaW5vciB0aWNrIG1hcmsgc3RhdGVcclxuICAgIFNldE1pbm9yVGlja01hcmtTdGF0ZSA9ICdzZXQtbWlub3ItdGljay1tYXJrLXN0YXRlJyxcclxuXHJcbiAgICAvLyBTZXQgdGhlIG1ham9yIHRpY2sgbWFyayBvcmlnaW5cclxuICAgIFNldE1ham9yVGlja01hcmtPcmlnaW4gPSAnc2V0LW1ham9yLXRpY2stbWFyay1vcmlnaW4nLFxyXG5cclxuICAgIC8vIFNldCB0aGUgbWlub3IgdGljayBtYXJrIG9yaWdpblxyXG4gICAgU2V0TWlub3JUaWNrTWFya09yaWdpbiA9ICdzZXQtbWlub3ItdGljay1tYXJrLW9yaWdpbicsXHJcblxyXG4gICAgLy8gU2V0IHRoZSBtYWpvciB0aWNrIG1hcmsgc3BhY2luZ1xyXG4gICAgU2V0TWFqb3JUaWNrTWFya1NwYWNpbmcgPSAnc2V0LW1ham9yLXRpY2stbWFyay1zcGFjaW5nJyxcclxuXHJcbiAgICAvLyBTZXQgdGhlIG1pbm9yIHRpY2sgbWFyayBzcGFjaW5nXHJcbiAgICBTZXRNaW5vclRpY2tNYXJrU3BhY2luZyA9ICdzZXQtbWlub3ItdGljay1tYXJrLXNwYWNpbmcnLFxyXG5cclxuICAgIC8vIFNldCB0aGUgbWFqb3IgdGljayBtYXJrIHVuaXRzXHJcbiAgICBTZXRNYWpvclRpY2tNYXJrVW5pdHMgPSAnc2V0LW1ham9yLXRpY2stbWFyay11bml0cycsXHJcblxyXG4gICAgLy8gU2V0IHRoZSBtaW5vciB0aWNrIG1hcmsgdW5pdHNcclxuICAgIFNldE1pbm9yVGlja01hcmtVbml0cyA9ICdzZXQtbWlub3ItdGljay1tYXJrLXVuaXRzJyxcclxuXHJcblxyXG4gICAgLy8gXHJcbiAgICBCb3VuZGluZ0JveFBhbiA9ICdib3VuZGluZy1ib3gtcGFuJyxcclxuXHJcbiAgICAvLyBcclxuICAgIE9uVG9nZ2xlQXhpc1JhbmdlcyA9ICdvbi10b2dnbGUtYXhpcy1yYW5nZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUGFuZVBhbiA9ICdwYW5lLXBhbicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQYW5lWm9vbSA9ICdwYW5lLXpvb20nLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUGFuZVpvb21GYWN0b3IgPSAncGFuZS16b29tLWZhY3RvcicsXHJcblxyXG4gICAgLy8gXHJcbiAgICBQYW5lWm9vbVBhbiA9ICdwYW5lLXpvb20tcGFuJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFJlb3JkZXJGb2xkZWRBeGVzID0gJ3Jlb3JkZXItZm9sZGVkLWF4ZXMnLFxyXG5cclxuICAgIC8vIFxyXG4gICAgUmVzZXRBeGlzUmFuZ2UgPSAncmVzZXQtYXhpcy1yYW5nZScsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTZWxlY3RBeGlzVHVwbGVzID0gJ3NlbGVjdC1heGlzLXR1cGxlcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTd2FwUmVmZXJlbmNlTGluZUZpZWxkcyA9ICdzd2FwLXJlZmVyZW5jZS1saW5lLWZpZWxkcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBTeW5jaHJvbml6ZUF4aXMgPSAnc3luY2hyb25pemUtYXhpcycsXHJcblxyXG4gICAgLy8gXHJcbiAgICBUb2dnbGVEdWFsQXhpcyA9ICd0b2dnbGUtZHVhbC1heGlzJyxcclxuXHJcbiAgICAvLyBcclxuICAgIFpvb21MZXZlbCA9ICd6b29tLWxldmVsJyxcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1jb3JlL2dlbi1zcmMvcHJlc2xheWVyL0NvbW1hbmRJZHMudHNcbiAqKi8iLCJpbXBvcnQgeyBWZXJiSWQgYXMgQXBpVmVyYklkIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQgeyBDb21tYW5kUmVnaXN0cmF0aW9uIH0gZnJvbSAnLi9Db21tYW5kUmVnaXN0cmF0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RyeSB3aGljaCBjb250YWlucyBtYXBwaW5ncyBmcm9tIGFuIEFwaSBWZXJiSWQgdG8gYSBwcmVzLWxheWVyIGNvbW1hbmQuXHJcbiAqIFRoaXMgaW5jbHVkZXMgdGhlIHBhcmFtZXRlcnMgYW5kIHJldHVybiB2YWx1ZXMgb2YgdGhlIGNvbW1hbmQgYXMgd2VsbFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29tbWFuZE1hcHBpbmdSZWdpc3RyeSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgVU5LTk9XTl9BUElWRVJCOiBzdHJpbmcgPSAnVW5rbm93biBBcGlWZXJiOiAlMSc7XHJcbiAgcHJpdmF0ZSBfY29tbWFuZHM6IHsgW2FwaVZlcmI6IHN0cmluZ106IENvbW1hbmRSZWdpc3RyYXRpb24gfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5LlxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fY29tbWFuZHMgPSB7fTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYSBuZXcgY29tbWFuZCB0byB0aGUgcmVnaXN0cnlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q29tbWFuZFJlZ2lzdHJhdGlvbn0gY29tbWFuZFxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5XHJcbiAgICovXHJcbiAgcHVibGljIGFkZENvbW1hbmQoY29tbWFuZDogQ29tbWFuZFJlZ2lzdHJhdGlvbik6IHZvaWQge1xyXG4gICAgdGhpcy5fY29tbWFuZHNbY29tbWFuZC5hcGlWZXJiSWRdID0gY29tbWFuZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgcmVnaXN0cnkgY29udGFpbnMgYSBkZWZpbml0aW9uIGZvciB0aGlzIEFwaVZlcmJJZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcGlWZXJiSWR9IGFwaVZlcmJJZFxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kTWFwcGluZ1JlZ2lzdHJ5XHJcbiAgICovXHJcbiAgcHVibGljIGhhc0NvbW1hbmQoYXBpVmVyYklkOiBBcGlWZXJiSWQpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5fY29tbWFuZHMuaGFzT3duUHJvcGVydHkoYXBpVmVyYklkKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLl9jb21tYW5kc1thcGlWZXJiSWRdKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGNvbW1hbmQgcmVnaXN0cmF0aW9uIGZvciB0aGlzIGNvbW1hbmQgaWQgb3IgdGhyb3dzIGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXBpVmVyYklkfSBhcGlWZXJiSWRcclxuICAgKiBAcmV0dXJucyB7Q29tbWFuZFJlZ2lzdHJhdGlvbn1cclxuICAgKiBAbWVtYmVyb2YgQ29tbWFuZE1hcHBpbmdSZWdpc3RyeVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDb21tYW5kKGFwaVZlcmJJZDogQXBpVmVyYklkKTogQ29tbWFuZFJlZ2lzdHJhdGlvbiB7XHJcbiAgICBpZiAoIXRoaXMuaGFzQ29tbWFuZChhcGlWZXJiSWQpKSB7XHJcbiAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uZXJyb3IoQ29tbWFuZE1hcHBpbmdSZWdpc3RyeS5VTktOT1dOX0FQSVZFUkIsIFthcGlWZXJiSWRdKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY29tbWFuZHNbYXBpVmVyYklkXTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvQ29tbWFuZE1hcHBpbmdSZWdpc3RyeS50c1xuICoqLyIsImltcG9ydCB7XHJcbiAgRXhlY3V0ZVBhcmFtZXRlcnMsXHJcbiAgTW9kZWwsXHJcbiAgUGFyYW1ldGVySWQgYXMgQXBpUGFyYW1ldGVySWQsXHJcbiAgVmVyYklkIGFzIEFwaVZlcmJJZCxcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgRG9jQ29tbWFuZHMgYXMgUHJlc0xheWVyRG9jQ29tbWFuZElkLFxyXG4gIFNydkNvbW1hbmRzIGFzIFByZXNMYXllclNydkNvbW1hbmRJZCxcclxuICBVSUNvbW1hbmRzIGFzIFByZXNMYXllclVJQ29tbWFuZElkXHJcbn0gZnJvbSAnLi4vLi4vZ2VuLXNyYy9wcmVzbGF5ZXIvQ29tbWFuZElkcyc7XHJcblxyXG5pbXBvcnQgeyBQYXJhbWV0ZXJJZCBhcyBQcmVzTGF5ZXJQYXJhbWV0ZXJJZCB9IGZyb20gJy4uLy4uL2dlbi1zcmMvcHJlc2xheWVyL1BhcmFtcyc7XHJcbmltcG9ydCB7IEFwaVRvUHJlc0xheWVyTWFwcGluZ1JlZ2lzdHJ5LCBQcmVzTGF5ZXJUb0FwaU1hcHBpbmdSZWdpc3RyeSB9IGZyb20gJy4vUGFyYW1ldGVyTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhbiBlbnVtIHVzZWQgb25seSBpbnRlcm5hbGx5IGJ5IHRoZSBhcGktY29yZSBwcm9qZWN0LlxyXG4gKiBUaGlzIGVudW0gcmVwcmVzZW50cyB0aGUgZGlmZmVyZW5jZSBuYW1lc3BhY2VzIGF2YWlsYWJsZSBmb3IgY29tbWFuZHMuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBDb21tYW5kTmFtZXNwYWNlIHtcclxuICBUYWJEb2MgPSAndGFiZG9jJyxcclxuICBUYWJTcnYgPSAndGFic3J2JyxcclxuICBUYWJVSSA9ICd0YWJ1aSdcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gaW5wdXQgb3Igb3V0cHV0IHBhcmFtdGVyIGZvciBhIGNvbW1hbmQuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIENvbW1hbmRQYXJhbWV0ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb21tYW5kUGFyYW1ldGVyIHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENvbW1hbmRQYXJhbWV0ZXIuXHJcbiAgICogQHBhcmFtIHtBcGlQYXJhbWV0ZXJJZH0gYXBpSWRcclxuICAgKiBAcGFyYW0ge1ByZXNMYXllclBhcmFtZXRlcklkfSBwcmVzTGF5ZXJJZFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzT3B0aW9uYWxdXHJcbiAgICogQG1lbWJlcm9mIENvbW1hbmRQYXJhbWV0ZXJcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9hcGlJZDogQXBpUGFyYW1ldGVySWQsXHJcbiAgICBwcml2YXRlIF9wcmVzTGF5ZXJJZDogUHJlc0xheWVyUGFyYW1ldGVySWQsXHJcbiAgICBwcml2YXRlIF9pc09wdGlvbmFsPzogYm9vbGVhbikgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBJZCBvZiB0aGUgQXBpIFBhcmFtZXRlclxyXG4gICAqXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHR5cGUge0FwaVBhcmFtZXRlcklkfVxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kUGFyYW1ldGVyXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBhcGlJZCgpOiBBcGlQYXJhbWV0ZXJJZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXBpSWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgSWQgb2YgdGhlIFByZXMgTGF5ZXIgUGFyYW1ldGVyXHJcbiAgICpcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAdHlwZSB7UHJlc0xheWVyUGFyYW1ldGVySWR9XHJcbiAgICogQG1lbWJlcm9mIENvbW1hbmRQYXJhbWV0ZXJcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IHByZXNMYXllcklkKCk6IFByZXNMYXllclBhcmFtZXRlcklkIHtcclxuICAgIHJldHVybiB0aGlzLl9wcmVzTGF5ZXJJZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyXHJcbiAgICpcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgKiBAbWVtYmVyb2YgQ29tbWFuZFBhcmFtZXRlclxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgaXNPcHRpb25hbCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMuX2lzT3B0aW9uYWw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHRoZSBjb21wbGV0ZSBtYXBwaW5nIG9mIGFuIEFwaUNvbW1hbmQgdG8gaXRzIGNvcnJlc3BvbmRpbmcgcHJlcy1sYXllciBjb21tYW5kXHJcbiAqIGFuZCB0aGUgY29udmVyc2lvbiBvZiB0aGUgb3V0cHV0IHZhbHVlIGFzIHdlbGxcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgQ29tbWFuZFJlZ2lzdHJhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge0FwaVZlcmJJZH0gX2FwaVZlcmJJZCB0aGUgaW50ZXJuYWwgYXBpIHZlcmIgSUQgb2YgdGhpcyBjb21tYW5kLlxyXG4gKiBAcGFyYW0ge1ByZXNMYXllckRvY0NvbW1hbmRJZCB8IFByZXNMYXllclNydkNvbW1hbmRJZCB8IFByZXNMYXllclVJQ29tbWFuZElkfSBfY29tbWFuZElkXHJcbiAqICAgdGhlIHByZXMgbGF5ZXIgY29tbWFuZCB0byBleGVjdXRlXHJcbiAqIEBwYXJhbSB7QXJyYXk8Q29tbWFuZFBhcmFtZXRlcj59IF9pbnB1dFBhcmFtZXRlcnMgbGlzdCBvZiBwYXJhbWV0ZXJzIHRvIHNlbmQgd2l0aCB0aGlzIGNvbW1hbmQgdG8gdGhlIHBsYXRmb3JtLlxyXG4gKiBAcGFyYW0ge0NvbW1hbmRQYXJhbWV0ZXJ9IFtpc09wdGlvbmFsXSBleHBlY3RlZCByZXR1cm4gcGFyYW10ZXJzIGZyb20gdGhlIHBsYXRmb3JtLlxyXG4gKiBAcGFyYW0ge0NvbW1hbmROYW1lc3BhY2V9IFtpc09wdGlvbmFsXSBuYW1lc3BhY2Ugb2YgdGhlIGNvbW1hbmQgKGRlZmF1bHRzIHRvIFRhYkRvYyBpZiBub3QgcHJvdmlkZWQpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbW1hbmRSZWdpc3RyYXRpb24ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX2FwaVZlcmJJZDogQXBpVmVyYklkLFxyXG4gICAgcHJpdmF0ZSBfY29tbWFuZElkOiBQcmVzTGF5ZXJEb2NDb21tYW5kSWQgfCBQcmVzTGF5ZXJTcnZDb21tYW5kSWQgfCBQcmVzTGF5ZXJVSUNvbW1hbmRJZCxcclxuICAgIHByaXZhdGUgX2lucHV0UGFyYW1ldGVyczogQXJyYXk8Q29tbWFuZFBhcmFtZXRlcj4sXHJcbiAgICBwcml2YXRlIF9vdXRwdXRQYXJhbWV0ZXI/OiBDb21tYW5kUGFyYW1ldGVyLFxyXG4gICAgcHJpdmF0ZSBfbmFtZXNwYWNlPzogQ29tbWFuZE5hbWVzcGFjZSxcclxuICApIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGFwaVZlcmJJZCgpOiBBcGlWZXJiSWQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FwaVZlcmJJZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY29tbWFuZElkKCk6IFByZXNMYXllckRvY0NvbW1hbmRJZCB8IFByZXNMYXllclNydkNvbW1hbmRJZCB8IFByZXNMYXllclVJQ29tbWFuZElkIHtcclxuICAgIHJldHVybiB0aGlzLl9jb21tYW5kSWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWVzcGFjZSgpOiBDb21tYW5kTmFtZXNwYWNlIHtcclxuICAgIHJldHVybiB0aGlzLl9uYW1lc3BhY2UgfHwgQ29tbWFuZE5hbWVzcGFjZS5UYWJEb2M7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlucHV0cygpOiBBcnJheTxDb21tYW5kUGFyYW1ldGVyPiB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXRQYXJhbWV0ZXJzIHx8IG5ldyBBcnJheTxDb21tYW5kUGFyYW1ldGVyPigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBvdXRwdXQoKTogQ29tbWFuZFBhcmFtZXRlciB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fb3V0cHV0UGFyYW1ldGVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBvciBub3QgdGhpcyBjb21tYW5kIHJlcXVpcmVzIGFuIGFkZC1pbiBsb2NhdG9yIHRvIGJlIGluamVjdGVkIGludG8gaXRcclxuICAgKlxyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kUmVnaXN0cmF0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBuZWVkc0FkZEluTG9jYXRvcigpOiBib29sZWFuIHtcclxuICAgIGZvciAoY29uc3QgaW5wdXQgb2YgdGhpcy5pbnB1dHMpIHtcclxuICAgICAgaWYgKGlucHV0LmFwaUlkID09PSBBcGlQYXJhbWV0ZXJJZC5FeHRlbnNpb25Mb2NhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgZGljdGlvbmFyeSBvZiBwcmVzLWxheWVyIHBhcmFtZXRlcnMgZnJvbSB0aGUgaW5wdXQgZGljdGlvbmFyeVxyXG4gICAqIG9mIGFwaSBwYXJhbWV0ZXJzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtFeGVjdXRlUGFyYW1ldGVyc30gcGFyYW1ldGVycyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGNvbnZlcnRcclxuICAgKiBAcGFyYW0ge0FwaVRvUHJlc0xheWVyTWFwcGluZ1JlZ2lzdHJ5fSBhcGlUb1ByZXNMYXllciAtIG1hcHBpbmcgdG8gZGV0ZXJtaW5lIHRoZSBjb252ZXJzaW9uXHJcbiAgICogQHJldHVybnMge3sgW3BhcmFtSWQ6IHN0cmluZ106IG9iamVjdDsgfX0gLSBwYXJhbWV0ZXJzIHRvIHNlbmQgdG8gdGhlIHByZXMtbGF5ZXJcclxuICAgKiBAbWVtYmVyb2YgQ29tbWFuZFJlZ2lzdHJhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGVQYXJhbXMocGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMsIGFwaVRvUHJlc0xheWVyOiBBcGlUb1ByZXNMYXllck1hcHBpbmdSZWdpc3RyeSk6IHsgW3BhcmFtSWQ6IHN0cmluZ106IG9iamVjdDsgfSB7XHJcbiAgICBsZXQgcmVzdWx0OiB7IFtwYXJhbUlkOiBzdHJpbmddOiBvYmplY3Q7IH0gPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGlucHV0UGFyYW0gb2YgdGhpcy5pbnB1dHMpIHtcclxuICAgICAgLy8gRmlyc3QgbWFrZSBzdXJlIHRoZSBwYXJhbWV0ZXIgaXMgdGhlcmUgb3IgdGhhdCBpdCdzIG9wdGlvbmFsXHJcbiAgICAgIGlmICghcGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShpbnB1dFBhcmFtLmFwaUlkKSkge1xyXG4gICAgICAgIGlmIChpbnB1dFBhcmFtLmlzT3B0aW9uYWwpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLm1pc3NpbmdQYXJhbWV0ZXIoW2lucHV0UGFyYW0uYXBpSWRdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZpbmQgdGhlIGNvbnZlcnNpb24gZnVuY3Rpb24gZm9yIHRoaXMgcGFyYW1ldGVyXHJcbiAgICAgIGNvbnN0IGNvbnZlcnNpb25GbiA9IGFwaVRvUHJlc0xheWVyLmdldChpbnB1dFBhcmFtLmFwaUlkLCBpbnB1dFBhcmFtLnByZXNMYXllcklkKTtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgdGhlIHByZXMgbW9kZWwgYW5kIGluc2VydCBpdCBpbnRvIG91ciByZXN1bHRzIG9iamVjdFxyXG4gICAgICByZXN1bHRbaW5wdXRQYXJhbS5wcmVzTGF5ZXJJZF0gPSBjb252ZXJzaW9uRm4ocGFyYW1ldGVyc1tpbnB1dFBhcmFtLmFwaUlkXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2Nlc3NlcyB0aGUgcmVzdWx0IHJlY2VpdmVkIGJhY2sgYWZ0ZXIgZXhlY3V0aW5nIGEgcHJlcy1sYXllciBjb21tYW5kXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3sgW2RvY1BhcmFtSWQ6IHN0cmluZ106IG9iamVjdDsgfX0gcmVzdWx0UGFyYW1ldGVyc1xyXG4gICAqIEBwYXJhbSB7UHJlc0xheWVyVG9BcGlNYXBwaW5nUmVnaXN0cnl9IHByZXNMYXllclRvQXBpXHJcbiAgICogQHJldHVybnMge01vZGVsfVxyXG4gICAqIEBtZW1iZXJvZiBDb21tYW5kUmVnaXN0cmF0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIFByb2Nlc3NSZXN1bHQocmVzdWx0UGFyYW1ldGVyczogeyBbZG9jUGFyYW1JZDogc3RyaW5nXTogb2JqZWN0OyB9LCBwcmVzTGF5ZXJUb0FwaTogUHJlc0xheWVyVG9BcGlNYXBwaW5nUmVnaXN0cnkpOiBNb2RlbCB7XHJcbiAgICAvLyBUT0RPOiBBZGQgZXJyb3IgaGFuZGxpbmdcclxuICAgIGlmICh0aGlzLm91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IG5vT3V0cHV0TW9kZWw6IE1vZGVsID0ge307XHJcbiAgICAgIHJldHVybiBub091dHB1dE1vZGVsO1xyXG4gICAgfVxyXG4gICAgaWYgKCFyZXN1bHRQYXJhbWV0ZXJzIHx8ICFyZXN1bHRQYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KHRoaXMub3V0cHV0LnByZXNMYXllcklkKSkge1xyXG5cclxuICAgICAgLy8gaWYgdGhlIG91dHB1dCByZXN1bHQgaXMgbWFya2VkIGFzIG9wdGlvbmFsLCB3ZSBkb24ndCBjb25zaWRlciB0aGlzIGFuIGVycm9yIHNpdHVhdGlvbiBhbmQganVzdCByZXR1cm4gYW4gZW1wdHkgbW9kZWxcclxuICAgICAgaWYgKHRoaXMub3V0cHV0LmlzT3B0aW9uYWwpIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5taXNzaW5nUGFyYW1ldGVyKFt0aGlzLm91dHB1dC5wcmVzTGF5ZXJJZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbnZlcnNpb25GbiA9IHByZXNMYXllclRvQXBpLmdldCh0aGlzLm91dHB1dC5wcmVzTGF5ZXJJZCwgdGhpcy5vdXRwdXQuYXBpSWQpO1xyXG4gICAgcmV0dXJuIGNvbnZlcnNpb25GbihyZXN1bHRQYXJhbWV0ZXJzW3RoaXMub3V0cHV0LnByZXNMYXllcklkXSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL0NvbW1hbmRSZWdpc3RyYXRpb24udHNcbiAqKi8iLCJpbXBvcnQgeyBNb2RlbCwgTm90aWZpY2F0aW9uSWQgYXMgQXBpLCBWZXJzaW9uTnVtYmVyIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbklkIGFzIFBMIH0gZnJvbSAnLi4vLi4vZ2VuLXNyYy9wcmVzbGF5ZXIvRXZlbnRzJztcclxuaW1wb3J0IHsgUHJlc2VudGF0aW9uTW9kZWwgfSBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9QcmVzTW9kZWxzJztcclxuaW1wb3J0IHsgUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIgfSBmcm9tICcuL1ByZXNMYXllclRvQXBpQ29udmVydGVyJztcclxuXHJcbmV4cG9ydCB0eXBlIENvbnZlcnNpb25GbiA9IChwcmVzTW9kZWw6IFByZXNlbnRhdGlvbk1vZGVsKSA9PiBNb2RlbDtcclxuXHJcbi8qKlxyXG4gKiBTaW1wbGUgd3JhcHBlciB3aGljaCBob2xkcyBhIG1hcHBpbmcgdG8gZ28gZnJvbSBhIHByZXMtbGF5ZXIgZXZlbnQgdG8gYW4gQVBJIGV2ZW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNYXBwaW5nUmVnaXN0cmF0aW9uIHtcclxuICBwdWJsaWMgZ2V0IHByZXNMYXllcklkKCk6IFBMIHtcclxuICAgIHJldHVybiB0aGlzLl9wcmVzTGF5ZXJJZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgYXBpSWQoKTogQXBpIHtcclxuICAgIHJldHVybiB0aGlzLl9hcGlJZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY29udmVydGVyKCk6IENvbnZlcnNpb25GbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udmVydGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfcHJlc0xheWVySWQ6IFBMLFxyXG4gICAgcHJpdmF0ZSBfYXBpSWQ6IEFwaSxcclxuICAgIHByaXZhdGUgX2NvbnZlcnRlcjogQ29udmVyc2lvbkZuKSB7IH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNpbXBsZSB0eXBlIHdoaWNoIGhhcyBrZXlzIG9mIFBMIGV2ZW50IGlkcyB0byBFdmVudE1hcHBpbmdSZWdpc3RyYXRpb25zXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFdmVudE1hcHBpbmdSZWdpc3RyeSA9IHsgW2tleTogc3RyaW5nXTogRXZlbnRNYXBwaW5nUmVnaXN0cmF0aW9uOyB9O1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50TWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeSB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbmQgcG9wdWxhdGVzIGEgbmV3IEV2ZW50TWFwcGluZ1JlZ2lzdHJ5IGZvciB0aGUgc3BlY2lmaWMgdmVyc2lvbiBudW1iZXIgcmVxdWVzdGVkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1ZlcnNpb25OdW1iZXJ9IHZlcnNpb25OdW1iZXJcclxuICAgKiBAcmV0dXJucyB7RXZlbnRNYXBwaW5nUmVnaXN0cnl9XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVFdmVudE1hcHBpbmdSZWdpc3RyeSh2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uTnVtYmVyKTogRXZlbnRNYXBwaW5nUmVnaXN0cnkge1xyXG4gICAgbGV0IHJlZ2lzdHJ5OiBFdmVudE1hcHBpbmdSZWdpc3RyeSA9IHt9O1xyXG4gICAgcmVnaXN0cnlbUEwuU2VsZWN0aW9uQ2hhbmdlZF0gPSBuZXcgRXZlbnRNYXBwaW5nUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5TZWxlY3Rpb25DaGFuZ2VkLFxyXG4gICAgICBBcGkuU2VsZWN0ZWRNYXJrc0NoYW5nZWQsXHJcbiAgICAgIFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnRWaXN1YWxJZFxyXG4gICAgKTtcclxuXHJcbiAgICByZWdpc3RyeVtQTC5QYXJhbWV0ZXJDaGFuZ2VkXSA9IG5ldyBFdmVudE1hcHBpbmdSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLlBhcmFtZXRlckNoYW5nZWQsXHJcbiAgICAgIEFwaS5QYXJhbWV0ZXJDaGFuZ2VkLFxyXG4gICAgICBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RmllbGRDYXB0aW9uUGFpclxyXG4gICAgKTtcclxuXHJcbiAgICByZWdpc3RyeVtQTC5GaWx0ZXJDaGFuZ2VkXSA9IG5ldyBFdmVudE1hcHBpbmdSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLkZpbHRlckNoYW5nZWQsXHJcbiAgICAgIEFwaS5GaWx0ZXJDaGFuZ2VkLFxyXG4gICAgICBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RmlsdGVyRXZlbnRcclxuICAgICk7XHJcblxyXG4gICAgcmVnaXN0cnlbUEwuRXh0ZW5zaW9uRGlhbG9nVXBkYXRlXSA9IG5ldyBFdmVudE1hcHBpbmdSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLkV4dGVuc2lvbkRpYWxvZ1VwZGF0ZSxcclxuICAgICAgQXBpLkV4dGVuc2lvbkRpYWxvZ1VwZGF0ZSxcclxuICAgICAgUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuY29udmVydERpYWxvZ1VwZGF0ZUV2ZW50XHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZWdpc3RyeTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvRXZlbnRNYXBwaW5nUmVnaXN0cnlGYWN0b3J5LnRzXG4gKiovIiwiXHJcbi8qIHRzbGludDpkaXNhYmxlICovXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vXHJcbi8vIFRoaXMgZmlsZSBpcyB0aGUgY29weXJpZ2h0ZWQgcHJvcGVydHkgb2YgVGFibGVhdSBTb2Z0d2FyZSBhbmQgaXMgcHJvdGVjdGVkXHJcbi8vIGJ5IHJlZ2lzdGVyZWQgcGF0ZW50cyBhbmQgb3RoZXIgYXBwbGljYWJsZSBVLlMuIGFuZCBpbnRlcm5hdGlvbmFsIGxhd3MgYW5kXHJcbi8vIHJlZ3VsYXRpb25zLlxyXG4vL1xyXG4vLyBVbmxpY2Vuc2VkIHVzZSBvZiB0aGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGlzIHByb2hpYml0ZWQuIFBsZWFzZSByZWZlciB0b1xyXG4vLyB0aGUgTk9USUNFUy50eHQgZmlsZSBmb3IgZnVydGhlciBkZXRhaWxzLlxyXG4vL1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBXQVJOSU5HOiBDb21wdXRlciBnZW5lcmF0ZWQgZmlsZS4gIERvIG5vdCBoYW5kIG1vZGlmeS5cclxuLy8gREVQRU5EUyBPTjogWycuLi9qcy1hcGkvYXBpLWNvcmUvbm9kZV9tb2R1bGVzL0B0YWJsZWF1L3ByZXNsYXllci1jb2RlZ2VuLXR5cGVzY3JpcHQvdGVtcGxhdGVzL2V2ZW50cy10cy50ZW1wbGF0ZScsIHUnLi4vanMtYXBpL2FwaS1jb3JlL3RlbXAtcHJlcy1sYXllci9hbGwtZXZlbnRzLmRhdGEnLCAnLi4vanMtYXBpL2FwaS1jb3JlL25vZGVfbW9kdWxlcy9AdGFibGVhdS9wcmVzbGF5ZXItY29kZWdlbi10eXBlc2NyaXB0L3RlbXBsYXRlcy9ldmVudHMtY29tbW9uLnRlbXBsYXRlJ11cclxuXHJcbi8vIEV2ZW50cyB5b3UgY2FuIHJlZ2lzdGVyIHRvIHJlY2VpdmUgcHJlc2VudGF0aW9uIG1vZGVsc1xyXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25JZCB7XHJcblxyXG4gIC8vIFRyaWdnZXJlZCB3aGVuIGFsaWFzZXMgYXJlIHRvIGJlIGVkaXRlZC4gVXNlZCB0byBsYXVuY2ggYSBkaWFsb2cuXHJcbiAgRWRpdEFsaWFzZXNEaWFsb2dOb3RpZmljYXRpb24gPSAnZG9jOmVkaXQtYWxpYXNlcy1kaWFsb2ctbm90aWZpY2F0aW9uLWV2ZW50JyxcclxuXHJcbiAgLy8gZm9yIHRoZSBjYWxjdWxhdGlvbiBkaWFsb2dcclxuICBDYWxjdWxhdGlvbkRpYWxvZyA9ICdkb2M6Y2FsY3VsYXRpb24tZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gdXBkYXRlIGZvciBhbiBhZGhvYyBjYWxjIGluIGEgdHlwZSBpbiBwaWxsXHJcbiAgVHlwZUluUGlsbCA9ICdkb2M6dHlwZS1pbi1waWxsLWV2ZW50JyxcclxuXHJcbiAgLy8gcmVzdWx0cyBvZiBhIHZhbGlkYXRpb24gY29tbWFuZFxyXG4gIENvbW1hbmRWYWxpZGF0aW9uID0gJ2RvYzpjb21tYW5kLXZhbGlkYXRpb24tZXZlbnQnLFxyXG5cclxuICAvLyBldmVudCBmb3IgdGhlIGdyb3VwcyBkaWFsb2dcclxuICBVcGRhdGVDYXRlZ29yaWNhbEJpbkVkaXREaWFsb2cgPSAnZG9jOnVwZGF0ZS1jYXRlZ29yaWNhbC1iaW4tZWRpdC1kaWFsb2ctZXZlbnQnLFxyXG5cclxuICAvLyBmb3IgdGhlIGNhdGVnb3JpY2FsIGNvbG9yIGRpYWxvZ1xyXG4gIENhdGVnb3JpY2FsQ29sb3IgPSAnZG9jOmNhdGVnb3JpY2FsLWNvbG9yLWV2ZW50JyxcclxuXHJcbiAgLy8gdXBkYXRlIHRoZSB3ZWIgY2F0ZWdvcmljYWwgY29sb3IgZGlhbG9nXHJcbiAgV2ViQ2F0ZWdvcmljYWxDb2xvckRpYWxvZyA9ICdkb2M6d2ViLWNhdGVnb3JpY2FsLWNvbG9yLWRpYWxvZy1ldmVudCcsXHJcblxyXG4gIC8vIHVzZXIgaW52b2tlZCBhY3Rpb24gd2hpY2ggcmVxdWlyZXMgYSBEYXRhIEFsZXJ0IERpYWxvZ1xyXG4gIERhdGFBbGVydERpYWxvZyA9ICdkb2M6ZGF0YS1hbGVydC1kaWFsb2ctZXZlbnQnLFxyXG5cclxuICAvLyBldmVudCB0byBzZWxlY3QgZmllbGQocykgaW4gdGhlIGRhdGEgc2NoZW1hXHJcbiAgRGF0YVNjaGVtYVNlbGVjdGlvbiA9ICdkb2M6ZGF0YS1zY2hlbWEtc2VsZWN0aW9uLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHdoZW4gdGhlIGRhdGEgc291cmNlIGJlaW5nIGVkaXRlZCBpcyB1cGRhdGVkXHJcbiAgVXBkYXRlRGF0YVByZXBhcmF0aW9uID0gJ2RvYzp1cGRhdGUtZGF0YS1wcmVwYXJhdGlvbi1ldmVudCcsXHJcblxyXG4gIC8vIGV2ZW50IGZvciB3aGVuIHRoZSBkYXRhIHNvdXJjZSBkYXRhIGlzIHVwZGF0ZWRcclxuICBVcGRhdGVEYXRhU291cmNlRGF0YSA9ICdkb2M6dXBkYXRlLWRhdGEtc291cmNlLWRhdGEtZXZlbnQnLFxyXG5cclxuICAvLyBldmVudCBmb3Igd2hlbiBhIGNsaWVudCBzaG91bGQgcmVxdWVzdCBuZXcgZGF0YSBzb3VyY2Ugb3IgZGF0YSBzb3VyY2UgZGF0YSBwcmVzIG1vZGVsc1xyXG4gIERhdGFTb3VyY2VVcGRhdGVOZWVkZWQgPSAnZG9jOmRhdGEtc291cmNlLXVwZGF0ZS1uZWVkZWQtZXZlbnQnLFxyXG5cclxuICAvLyBldmVudCBmb3IgZ2V0dGluZyB0aGUgcHJlcyBtb2RlbCB0byB1cGRhdGUgZmlsZSBqb2luIHRhYmxlIHByb3BlcnRpZXNcclxuICBUZXh0RmlsZVByb3BlcnRpZXMgPSAnZG9jOnRleHQtZmlsZS1wcm9wZXJ0aWVzLWV2ZW50JyxcclxuXHJcbiAgLy8gbm90aWZ5IGNoYW5nZXMgdG8gdGhlIHN0YXRlIG9mIGEgZmlsdGVyJ3MgcmVsYXRpb25hbCBtb2RlbFxyXG4gIEZpbHRlclJlbGF0aW9uYWxTdGF0ZUNoYW5nZWQgPSAnZG9jOmZpbHRlci1yZWxhdGlvbmFsLXN0YXRlLWNoYW5nZWQtZXZlbnQnLFxyXG5cclxuICAvLyBub3RpZnkgY2hhbmdlcyB0byB0aGUgc2l6ZS9zZWxlY3Rpb24gY291bnQgb2YgYSByZWxhdGlvbmFsIGRvbWFpblxyXG4gIEZpbHRlclJlbGF0aW9uYWxEb21haW5DaGFuZ2VkID0gJ2RvYzpmaWx0ZXItcmVsYXRpb25hbC1kb21haW4tY2hhbmdlZC1ldmVudCcsXHJcblxyXG4gIC8vIG5vdGlmeSB3aGVuIGZpbHRlciBjYWNoZSB3YXMgcmVxdWVzdGVkIGJ1dCBub3QgZm91bmRcclxuICBGaWx0ZXJDYWNoZU5vdEZvdW5kID0gJ2RvYzpmaWx0ZXItY2FjaGUtbm90LWZvdW5kLWV2ZW50JyxcclxuXHJcbiAgLy8gSGllcmFyY2h5IFNlbGVjdCBtb2RlbCBvYnNlcnZhYmxlIG5vdGlmaWNhdGlvbi5cclxuICBIaWVyYXJjaHlOb3RpZmljYXRpb24gPSAnZG9jOmhpZXJhcmNoeS1ub3RpZmljYXRpb24tZXZlbnQnLFxyXG5cclxuICAvLyBIaWVyYXJjaHkgc2VsZWN0aW9uIGNoYW5nZSBub3RpZmljYXRpb25zLlxyXG4gIEhpZXJhcmNoeVNlbGVjdGlvbiA9ICdkb2M6aGllcmFyY2h5LXNlbGVjdGlvbi1ldmVudCcsXHJcblxyXG4gIC8vIGV2ZW50IGZvciB0aGUgbWFwIG9wdGlvbnMgZGlhbG9nXHJcbiAgTWFwT3B0aW9uc0RpYWxvZyA9ICdkb2M6bWFwLW9wdGlvbnMtZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gbm90aWZ5IHRoZSBQYWdlIFVJKGhpZGUvc2hvdyBzdGF0ZXMsIGxheW91dCkgbmVlZHMgdG8gYmUgdXBkYXRlZFxyXG4gIFVwZGF0ZVBhZ2VVSU5vdGlmaWNhdGlvbiA9ICdkb2M6dXBkYXRlLXBhZ2UtdWlub3RpZmljYXRpb24tZXZlbnQnLFxyXG5cclxuICAvLyBub3RpZnkgdG8gdGhlIFNjZW5lVmlldyBoYXMgYmVlbiBkcmF3bi5cclxuICBTY2VuZVZpZXdEcmF3bk5vdGlmaWNhdGlvbiA9ICdkb2M6c2NlbmUtdmlldy1kcmF3bi1ub3RpZmljYXRpb24tZXZlbnQnLFxyXG5cclxuICAvLyBUaGUgQW5pbWF0aW9uQ29udHJvbENoYW5nZSBldmVudCBmaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhbiBhbmltYXRpb24gcGxheWJhY2sgYnV0dG9uOiBmb3J3YXJkLCBzdG9wLCBzbG93LCBmYXN0LCBldGMuXHJcbiAgQW5pbWF0aW9uQ29udHJvbENoYW5nZSA9ICdkb2M6YW5pbWF0aW9uLWNvbnRyb2wtY2hhbmdlLWV2ZW50JyxcclxuXHJcbiAgLy8gbm90aWZ5IHRoZSBzaGVldCBoYXMgYmVlbiByZW5hbWVkXHJcbiAgUmVuYW1lU2hlZXROb3RpZmljYXRpb24gPSAnZG9jOnJlbmFtZS1zaGVldC1ub3RpZmljYXRpb24tZXZlbnQnLFxyXG5cclxuICAvLyB1cGRhdGUgdGhlIHdlYiBxdWFudGl0YXRpdmUgY29sb3IgZGlhbG9nXHJcbiAgV2ViUXVhbnRpdGF0aXZlQ29sb3JEaWFsb2cgPSAnZG9jOndlYi1xdWFudGl0YXRpdmUtY29sb3ItZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gdXBkYXRlIHRoZSBidXR0b24gY29uZmlnIGRpYWxvZ1xyXG4gIFVwZGF0ZUJ1dHRvbkNvbmZpZ0RpYWxvZyA9ICdkb2M6dXBkYXRlLWJ1dHRvbi1jb25maWctZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHRoZSByZWZlcmVuY2UgbGluZSBkaWFsb2csIHdoaWNoIGlzIG9ubHkgdmFsaWQgZHVyaW5nIHdlYiBhdXRob3JpbmdcclxuICBVcGRhdGVSZWZMaW5lRGlhbG9nID0gJ2RvYzp1cGRhdGUtcmVmLWxpbmUtZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgdG8gdHJpZ2dlciBvdGhlciByZWZlcmVuY2UgbGluZSBkaWFsb2dzIHRvIGNsb3NlXHJcbiAgUmVmTGluZURpYWxvZ09wZW5pbmcgPSAnZG9jOnJlZi1saW5lLWRpYWxvZy1vcGVuaW5nLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHRoZSBjbG9zZSBkYXRhIHNvdXJjZSBlcnJvciBkaWFsb2csIHdoaWNoIGlzIG9ubHkgdmFsaWQgZHVyaW5nIHdlYiBhdXRob3JpbmdcclxuICBDbG9zZURhdGFTb3VyY2VFcnJvckRpYWxvZyA9ICdkb2M6Y2xvc2UtZGF0YS1zb3VyY2UtZXJyb3ItZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gdXBkYXRlIHRoZSB3ZWIgU2F2ZSBEYXRhc291cmNlIGRpYWxvZ1xyXG4gIFdlYlNhdmVEYXRhc291cmNlRGlhbG9nID0gJ2RvYzp3ZWItc2F2ZS1kYXRhc291cmNlLWRpYWxvZy1ldmVudCcsXHJcblxyXG4gIC8vIHdhcm5pbmcgcmVzdWx0aW5nIGZyb20gV2FybmluZ01zZ1xyXG4gIFdhcm5pbmdNZXNzYWdlID0gJ2RvYzp3YXJuaW5nLW1lc3NhZ2UtZXZlbnQnLFxyXG5cclxuICAvLyBldmVudCBmb3IgdGhlIHRhYmxlIGNhbGMgZGlhbG9nLCBvbiB3ZWIsIHRoaXMgaXMgb25seSB2YWxpZCBkdXJpbmcgd2ViIGF1dGhvcmluZ1xyXG4gIFRhYmxlQ2FsY0RpYWxvZyA9ICdkb2M6dGFibGUtY2FsYy1kaWFsb2ctZXZlbnQnLFxyXG5cclxuICAvLyB1c2VyIGludm9rZWQgYWN0aW9uIHdoaWNoIHJlcXVpcmVzIFRhYmxlIENhbGMgRGlhbG9nXHJcbiAgVGFibGVDYWxjQWN0aXZhdGVEaWFsb2cgPSAnZG9jOnRhYmxlLWNhbGMtYWN0aXZhdGUtZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHRoZSB0cmVuZCBsaW5lIGRpYWxvZ1xyXG4gIFVwZGF0ZVRyZW5kTGluZUVkaXREaWFsb2cgPSAnZG9jOnVwZGF0ZS10cmVuZC1saW5lLWVkaXQtZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gVGhlIHRhYmxlIHBhZ2UgY2FjaGUgaGFzIGJlZW4gcmVmcmVzaGVkOyBwYWdlcyBtdXN0IGJlIHJlbG9hZGVkIGZyb20gdGhlIGNhY2hlLlxyXG4gIFBhZ2VDYWNoZVJlZnJlc2ggPSAnZG9jOnBhZ2UtY2FjaGUtcmVmcmVzaC1ldmVudCcsXHJcblxyXG4gIC8vIFRoZSB0YWJsZSBwYWdlIGNhY2hlIGhhcyBleHBpcmVkIGFuZCBhbGwgcmVzb3VyY2VzIGhhdmUgYmVlbiByZWxlYXNlZC5cclxuICBQYWdlQ2FjaGVFeHBpcmVkID0gJ2RvYzpwYWdlLWNhY2hlLWV4cGlyZWQtZXZlbnQnLFxyXG5cclxuICAvLyBBbGwgcGFnZXMsIGlkZW50aWZpZWQgYnkgcm93L2NvbCwgaW4gdGhlIHByb3ZpZGVkIGxpc3QgaGF2ZSBleHBpcmVkIGFuZCBzaG91bGQgYmUgcmVsb2FkZWQuXHJcbiAgUGFnZUNhY2hlUGFnZXNFeHBpcmVkID0gJ2RvYzpwYWdlLWNhY2hlLXBhZ2VzLWV4cGlyZWQtZXZlbnQnLFxyXG5cclxuICAvLyBBbGwgcGFnZXMgYmV0d2VlbSB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkgaW4gdGhlIHByb3ZpZGVkIGxpc3QgaGF2ZSBleHBpcmVkIGFuZCBzaG91bGQgYmUgcmVsb2FkZWQuXHJcbiAgUGFnZUNhY2hlUGFnZVJhbmdlRXhwaXJlZCA9ICdkb2M6cGFnZS1jYWNoZS1wYWdlLXJhbmdlLWV4cGlyZWQtZXZlbnQnLFxyXG5cclxuICAvLyBUcmlnZ2VyZWQgd2hlbiB0aGUgdXNlciB3YW50cyB0byByZWxvYWQgYW4gYWRkLWluIGluc3RhbmNlLlxyXG4gIFJlbG9hZEFkZEluID0gJ2RvYzpyZWxvYWQtYWRkLWluLWV2ZW50JyxcclxuXHJcbiAgLy8gVHJpZ2dlcmVkIHdoZW4gdGhlIHNlbGVjdGVkIG1hcmtzIGhhdmUgY2hhbmdlZC5cclxuICBTZWxlY3Rpb25DaGFuZ2VkID0gJ2RvYzpzZWxlY3Rpb24tY2hhbmdlZC1ldmVudCcsXHJcblxyXG4gIC8vIFRyaWdnZXJlZCB3aGVuIHRoZSB2YWx1ZSBvZiBhIHBhcmFtZXRlciBoYXMgY2hhbmdlZC4gRW1pdHMgdGhlIG5hbWUgYW5kIGNhcHRpb24gb2YgdGhlIHBhcmFtZXRlclxyXG4gIFBhcmFtZXRlckNoYW5nZWQgPSAnZG9jOnBhcmFtZXRlci1jaGFuZ2VkLWV2ZW50JyxcclxuXHJcbiAgLy8gVHJpZ2dlcmVkIHdoZW4gdGhlIGZpbHRlcnMgaGF2ZSBjaGFuZ2VkLlxyXG4gIEZpbHRlckNoYW5nZWQgPSAnZG9jOmZpbHRlci1jaGFuZ2VkLWV2ZW50JyxcclxuXHJcbiAgLy8gVHJpZ2dlcmVkIHdoZW4gc3RhdGUgb2YgZXh0ZW5zaW9uIGRpYWxvZyBjaGFuZ2VzLlxyXG4gIEV4dGVuc2lvbkRpYWxvZ1VwZGF0ZSA9ICdkb2M6ZXh0ZW5zaW9uLWRpYWxvZy11cGRhdGUtZXZlbnQnLFxyXG5cclxuICAvLyBUcmlnZ2VyZWQgd2hlbiBzYXZlZCBjbHVzdGVyIG5lZWRzIHRvIGJlIHJlY2FsY3VsYXRlZC5cclxuICBDbHVzdGVyUmVmaXROb3RpZmljYXRpb24gPSAnZG9jOmNsdXN0ZXItcmVmaXQtbm90aWZpY2F0aW9uLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHRoZSBkZXRhaWxlZCBlcnJvciBkaWFsb2dcclxuICBVcGRhdGVEZXRhaWxlZEVycm9yRGlhbG9nID0gJ2RvYzp1cGRhdGUtZGV0YWlsZWQtZXJyb3ItZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gdXBkYXRlIHRoZSBheGlzIGVkaXQgZGlhbG9nXHJcbiAgVXBkYXRlRWRpdEF4aXNEaWFsb2cgPSAnZG9jOnVwZGF0ZS1lZGl0LWF4aXMtZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gbm90aWZpY2F0aW9uIHRvIGxhdW5jaCB0aGUgaHlicmlkIFVJIHNob3djYXNlXHJcbiAgTGF1bmNoSHlicmlkVUlTaG93Y2FzZSA9ICdkb2M6bGF1bmNoLWh5YnJpZC11aXNob3djYXNlLWV2ZW50JyxcclxuXHJcbiAgLy8gbm90aWZpY2F0aW9uIG9mIG5ldyBlY2hvZWQgdGV4dCBmb3IgSHlicmlkVUkgc2hvd2Nhc2UgZGVtb1xyXG4gIEh5YnJpZFVJU2hvd2Nhc2VFY2hvID0gJ2RvYzpoeWJyaWQtdWlzaG93Y2FzZS1lY2hvLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHRoZSBiaW4gZGlhbG9nXHJcbiAgVXBkYXRlTnVtZXJpY0JpbkVkaXREaWFsb2cgPSAnZG9jOnVwZGF0ZS1udW1lcmljLWJpbi1lZGl0LWRpYWxvZy1ldmVudCcsXHJcblxyXG4gIC8vIFVwZGF0ZSBmb3IgdGhlIHJpY2ggdGV4dCBlZGl0b3IgZGlhbG9nXHJcbiAgUmljaFRleHRFZGl0b3JEaWFsb2cgPSAnZG9jOnJpY2gtdGV4dC1lZGl0b3ItZGlhbG9nLWV2ZW50JyxcclxuXHJcbiAgLy8gZXZlbnQgZm9yIHRoZSBzb3J0IGRpYWxvZ1xyXG4gIFVwZGF0ZVNvcnREaWFsb2cgPSAnZG9jOnVwZGF0ZS1zb3J0LWRpYWxvZy1ldmVudCcsXHJcblxyXG4gIC8vIGEgdGVzdCBldmVudCB3aXRoIGEgcHJlcyBtb2RlbFxyXG4gIFRlc3RFdmVudFdpdGhNb2RlbCA9ICdkb2M6dGVzdC1ldmVudC13aXRoLW1vZGVsLWV2ZW50JyxcclxuXHJcbiAgLy8gYSB0ZXN0IGV2ZW50IHdpdGhvdXQgYSBwcmVzIG1vZGVsXHJcbiAgVGVzdEV2ZW50V2l0aG91dE1vZGVsID0gJ2RvYzp0ZXN0LWV2ZW50LXdpdGhvdXQtbW9kZWwtZXZlbnQnXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktY29yZS9nZW4tc3JjL3ByZXNsYXllci9FdmVudHMudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBBcGkgZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgUGFyYW0gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuaW1wb3J0ICogYXMgUHJlc0xheWVyIGZyb20gJy4uLy4uL2dlbi1zcmMvcHJlc2xheWVyL1ByZXNNb2RlbHMnO1xyXG5pbXBvcnQgeyBQcmVzTGF5ZXJUb0FwaUVudW1NYXBwaW5ncyBhcyBFbnVtTWFwcGluZ3MgfSBmcm9tICcuL0VudW1NYXBwaW5ncyc7XHJcblxyXG4vKipcclxuICogQ2xhc3MgY29udGFpbmluZyBoZWxwZXIgbWV0aG9kcyBmb3IgY29udmVydGluZyBmcm9tIFByZXNMYXllclByZXNNb2RlbHMgdG8gdGhlaXIgQXBpUHJlc01vZGVscyBlcXVpdmFsZW50c1xyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFByZXNMYXllclRvQXBpQ29udmVydGVyIHtcclxuICBwdWJsaWMgc3RhdGljIFBBUkFNRVRFUlNfREJfTkFNRTogc3RyaW5nID0gJ1BhcmFtZXRlcnMnO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRTaGVldFBhdGgocGxTaGVldFBhdGg6IFByZXNMYXllci5TaGVldFBhdGhQcmVzTW9kZWwpOiBBcGkuU2hlZXRQYXRoIHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLlNoZWV0UGF0aCA9IHtcclxuICAgICAgc2hlZXROYW1lOiBwbFNoZWV0UGF0aC5zaGVldE5hbWUsXHJcbiAgICAgIGlzRGFzaGJvYXJkOiBwbFNoZWV0UGF0aC5pc0Rhc2hib2FyZCxcclxuICAgICAgc3Rvcnlib2FyZDogcGxTaGVldFBhdGguc3Rvcnlib2FyZCxcclxuICAgICAgZmxpcGJvYXJkWm9uZUlEOiBwbFNoZWV0UGF0aC5mbGlwYm9hcmRab25lSWQsXHJcbiAgICAgIHN0b3J5UG9pbnRJRDogcGxTaGVldFBhdGguc3RvcnlQb2ludElkLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0VmlzdWFsSWQocGxWaXN1YWxJZDogUHJlc0xheWVyLlZpc3VhbElEUHJlc01vZGVsKTogQXBpLlZpc3VhbElkIHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLlZpc3VhbElkID0ge1xyXG4gICAgICB3b3Jrc2hlZXQ6IHBsVmlzdWFsSWQud29ya3NoZWV0LFxyXG4gICAgICBkYXNoYm9hcmQ6IHBsVmlzdWFsSWQuZGFzaGJvYXJkLFxyXG4gICAgICBzdG9yeWJvYXJkOiBwbFZpc3VhbElkLnN0b3J5Ym9hcmQsXHJcbiAgICAgIGZsaXBib2FyZFpvbmVJRDogcGxWaXN1YWxJZC5mbGlwYm9hcmRab25lSWQsXHJcbiAgICAgIHN0b3J5UG9pbnRJRDogcGxWaXN1YWxJZC5zdG9yeVBvaW50SWQsXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRFeHRlbnNpb25Mb2NhdG9yKHBsQWRkSW5Mb2NhdG9yOiBQcmVzTGF5ZXIuQWRkSW5Mb2NhdG9yUHJlc01vZGVsKTogQXBpLkV4dGVuc2lvbkxvY2F0b3Ige1xyXG4gICAgbGV0IGRhc2hib2FyZFBhdGggPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAocGxBZGRJbkxvY2F0b3Iuc2hlZXRQYXRoKSB7XHJcbiAgICAgIGRhc2hib2FyZFBhdGggPSBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0U2hlZXRQYXRoKHBsQWRkSW5Mb2NhdG9yLnNoZWV0UGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVzdWx0OiBBcGkuRXh0ZW5zaW9uTG9jYXRvciA9IHtcclxuICAgICAgaW5zdGFuY2VJZDogcGxBZGRJbkxvY2F0b3IuYWRkSW5JbnN0YW5jZUlkLFxyXG4gICAgICBkYXNoYm9hcmRQYXRoOiBkYXNoYm9hcmRQYXRoXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnREYXNoYm9hcmRJblpvbmVzKHBsRGFzaGJvYXJkOiBQcmVzTGF5ZXIuRGFzaGJvYXJkUHJlc01vZGVsKTogQXJyYXk8QXBpLkRhc2hib2FyZFpvbmU+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxBcGkuRGFzaGJvYXJkWm9uZT4oKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHpvbmVLZXkgb2YgT2JqZWN0LmtleXMocGxEYXNoYm9hcmQuem9uZXMpKSB7XHJcbiAgICAgIGNvbnN0IHpvbmUgPSBwbERhc2hib2FyZC56b25lc1t6b25lS2V5XTtcclxuICAgICAgbGV0IGFwaVpvbmU6IEFwaS5EYXNoYm9hcmRab25lID0ge1xyXG4gICAgICAgIG5hbWU6IHpvbmUuem9uZUNvbW1vbi5uYW1lLFxyXG4gICAgICAgIHpvbmVJZDogem9uZS56b25lSWQsXHJcbiAgICAgICAgem9uZVR5cGU6IEVudW1NYXBwaW5ncy56b25lVHlwZS5jb252ZXJ0KHpvbmUuem9uZUNvbW1vbi56b25lVHlwZSksXHJcbiAgICAgICAgaGVpZ2h0OiB6b25lLnpvbmVDb21tb24uaCxcclxuICAgICAgICB3aWR0aDogem9uZS56b25lQ29tbW9uLncsXHJcbiAgICAgICAgeDogem9uZS56b25lQ29tbW9uLngsXHJcbiAgICAgICAgeTogem9uZS56b25lQ29tbW9uLnlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlc3VsdC5wdXNoKGFwaVpvbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnREYXNoYm9hcmRJbmZvKHBsRGFzaGJvYXJkSW5mbzogUHJlc0xheWVyLkFkZEluRGFzaGJvYXJkSW5mb1ByZXNNb2RlbCk6IEFwaS5FeHRlbnNpb25EYXNoYm9hcmRJbmZvIHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLkV4dGVuc2lvbkRhc2hib2FyZEluZm8gPSB7XHJcbiAgICAgIHpvbmVzOiBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RGFzaGJvYXJkSW5ab25lcyhwbERhc2hib2FyZEluZm8uZGFzaGJvYXJkUHJlc01vZGVsKSxcclxuICAgICAgbmFtZTogcGxEYXNoYm9hcmRJbmZvLmRhc2hib2FyZFByZXNNb2RlbC5zaGVldFBhdGguc2hlZXROYW1lLFxyXG4gICAgICBleHRlbnNpb25ab25lSWQ6IHBsRGFzaGJvYXJkSW5mby56b25lSWQsXHJcbiAgICAgIHNpemU6IHBsRGFzaGJvYXJkSW5mby5kYXNoYm9hcmRQcmVzTW9kZWwudmlld3BvcnRTaXplXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRFeHRlbnNpb25JbnN0YW5jZShwbEFkZEluSW5zdGFuY2U6IFByZXNMYXllci5BZGRJbkluc3RhbmNlUHJlc01vZGVsKTogQXBpLkV4dGVuc2lvbkluc3RhbmNlIHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLkV4dGVuc2lvbkluc3RhbmNlID0ge1xyXG4gICAgICB1cmw6IHBsQWRkSW5JbnN0YW5jZS5hZGRJblJlZ2lzdHJhdGlvblByZXNNb2RlbC51cmwsXHJcbiAgICAgIGxvY2F0b3I6IFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnRFeHRlbnNpb25Mb2NhdG9yKHBsQWRkSW5JbnN0YW5jZS5hZGRJbkxvY2F0b3JQcmVzTW9kZWwpXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRFeHRlbnNpb25Fbml2cmlvbm1lbnQocGxBZGRJbkVudmlyb25tZW50OiBQcmVzTGF5ZXIuQWRkSW5FbnZpcm9ubWVudFByZXNNb2RlbCk6IEFwaS5FeHRlbnNpb25FbnZpcm9ubWVudCB7XHJcbiAgICBjb25zdCByZXN1bHQ6IEFwaS5FeHRlbnNpb25FbnZpcm9ubWVudCA9IHtcclxuICAgICAgZXh0ZW5zaW9uQ29udGV4dDogRW51bU1hcHBpbmdzLmV4dGVuc2lvbkNvbnRleHQuY29udmVydChwbEFkZEluRW52aXJvbm1lbnQuYWRkSW5Db250ZXh0KSxcclxuICAgICAgZXh0ZW5zaW9uTW9kZTogRW51bU1hcHBpbmdzLmV4dGVuc2lvbk1vZGUuY29udmVydChwbEFkZEluRW52aXJvbm1lbnQuYWRkSW5Nb2RlKSxcclxuICAgICAgZXh0ZW5zaW9uTG9jYWxlOiBwbEFkZEluRW52aXJvbm1lbnQuYWRkSW5Mb2NhbGUsXHJcbiAgICAgIGV4dGVuc2lvbkxhbmd1YWdlOiBwbEFkZEluRW52aXJvbm1lbnQuYWRkSW5MYW5ndWFnZSxcclxuICAgICAgdGFibGVhdVZlcnNpb246IHBsQWRkSW5FbnZpcm9ubWVudC50YWJsZWF1VmVyc2lvbixcclxuICAgICAgb3BlcmF0aW5nU3lzdGVtOiBwbEFkZEluRW52aXJvbm1lbnQub3BlcmF0aW5nU3lzdGVtLFxyXG4gICAgICBhcGlWZXJzaW9uOiBwbEFkZEluRW52aXJvbm1lbnQuYXBpVmVyc2lvblxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RXh0ZW5zaW9uU2V0dGluZ3NJbmZvKHBsQWRkSW5TZXR0aW5nczogUHJlc0xheWVyLkFkZEluU2V0dGluZ3NJbmZvUHJlc01vZGVsKTogQXBpLkV4dGVuc2lvblNldHRpbmdzSW5mbyB7XHJcbiAgICBjb25zdCByZXN1bHQ6IEFwaS5FeHRlbnNpb25TZXR0aW5nc0luZm8gPSB7XHJcbiAgICAgIC8vIGFkZEluU2V0dGluZ3MgaXMgdW5kZWZpbmVkIGR1cmluZyBib290c3RyYXAgaW5pdGlhbGl6YXRpb25cclxuICAgICAgc2V0dGluZ3NWYWx1ZXM6IHBsQWRkSW5TZXR0aW5ncy5hZGRJblNldHRpbmdzIHx8IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRFeHRlbnNpb25Cb290c3RyYXBJbmZvKHBsQm9vdHN0cmFwSW5mbzogUHJlc0xheWVyLkFkZEluQm9vdHN0cmFwSW5mb1ByZXNNb2RlbCk6IEFwaS5FeHRlbnNpb25Cb290c3RyYXBJbmZvIHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLkV4dGVuc2lvbkJvb3RzdHJhcEluZm8gPSB7XHJcbiAgICAgIGV4dGVuc2lvbkRhc2hib2FyZEluZm86IFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnREYXNoYm9hcmRJbmZvKHBsQm9vdHN0cmFwSW5mby5hZGRJbkRhc2hib2FyZEluZm9QcmVzTW9kZWwpLFxyXG4gICAgICBleHRlbnNpb25FbnZpcm9ubWVudDogUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuY29udmVydEV4dGVuc2lvbkVuaXZyaW9ubWVudChwbEJvb3RzdHJhcEluZm8uYWRkSW5FbnZpcm9ubWVudFByZXNNb2RlbCksXHJcbiAgICAgIGV4dGVuc2lvbkluc3RhbmNlOiBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RXh0ZW5zaW9uSW5zdGFuY2UocGxCb290c3RyYXBJbmZvLmFkZEluSW5zdGFuY2VQcmVzTW9kZWwpLFxyXG4gICAgICBleHRlbnNpb25TZXR0aW5nc0luZm86IFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnRFeHRlbnNpb25TZXR0aW5nc0luZm8ocGxCb290c3RyYXBJbmZvLmFkZEluU2V0dGluZ3NJbmZvKVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RmllbGRDYXB0aW9uUGFpcihwbEZpZWxkQ2FwdGlvblBhaXI6IFByZXNMYXllci5GaWVsZENhcHRpb25QYWlyUHJlc01vZGVsKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBwbEZpZWxkQ2FwdGlvblBhaXIuZm47XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRGaWx0ZXJFdmVudChwbEZpbHRlckV2ZW50OiBQcmVzTGF5ZXIuRmlsdGVyQ2hhbmdlRXZlbnRQcmVzTW9kZWwpOiBBcGkuRmlsdGVyRXZlbnQge1xyXG4gICAgY29uc3QgcmVzdWx0OiBBcGkuRmlsdGVyRXZlbnQgPSB7XHJcbiAgICAgIHZpc3VhbElkOiBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0VmlzdWFsSWQocGxGaWx0ZXJFdmVudC52aXN1YWxJZFByZXNNb2RlbCksXHJcbiAgICAgIGZpZWxkTmFtZTogcGxGaWx0ZXJFdmVudC5maWVsZENhcHRpb25cclxuICAgIH07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RGlhbG9nVXBkYXRlRXZlbnQocGxEaWFsb2dVcGRhdGVFdmVudDogUHJlc0xheWVyLkV4dGVuc2lvbkRpYWxvZ0V2ZW50UHJlc01vZGVsKTogQXBpLkRpYWxvZ1VwZGF0ZUV2ZW50IHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLkRpYWxvZ1VwZGF0ZUV2ZW50ID0ge1xyXG4gICAgICBpc0Nsb3NlRXZlbnQ6IHBsRGlhbG9nVXBkYXRlRXZlbnQuaXNFeHRlbnNpb25DbG9zZUV2ZW50LFxyXG4gICAgICBjbG9zZVBheWxvYWQ6IHBsRGlhbG9nVXBkYXRlRXZlbnQuZXh0ZW5zaW9uRGlhbG9nUGF5bG9hZFxyXG4gICAgfTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnREYXRhU2NoZW1hKGRhdGFTY2hlbWE6IFByZXNMYXllci5EYXRhU2NoZW1hUHJlc01vZGVsKTogQXBpLkRhdGFTY2hlbWEge1xyXG4gICAgbGV0IGFwaURhdGFTb3VyY2VzOiBBcGkuRGF0YVNvdXJjZU1hcCA9IHsgfTtcclxuXHJcbiAgICBQYXJhbS52ZXJpZnlWYWx1ZShkYXRhU2NoZW1hLCAnZGF0YVNjaGVtYScpO1xyXG4gICAgUGFyYW0udmVyaWZ5VmFsdWUoZGF0YVNjaGVtYS5kYXRhU291cmNlcywgJ2RhdGFTY2hlbWEuZGF0YVNvdXJjZXMnKTtcclxuXHJcbiAgICAvLyBDb252ZXJ0IGVhY2ggcHJlcyBsYXllciBkYXRhc291cmNlIGluIHRoZSBzY2hlbWEgdG8gYW4gQXBpIGRhdGFzb3VyY2VcclxuICAgIE9iamVjdC5rZXlzKGRhdGFTY2hlbWEuZGF0YVNvdXJjZXMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAvLyBTa2lwIHRoZSBkZWZhdWx0IFBhcmFtZXRlcnMgZGF0YXNvdXJjZSB3ZSByZWNlaXZlIGZyb20gdGhlIHBsYXRmb3JtLlxyXG4gICAgICBpZiAoZGF0YVNjaGVtYS5kYXRhU291cmNlc1trZXldLmRhdGFzb3VyY2UgIT09IFByZXNMYXllclRvQXBpQ29udmVydGVyLlBBUkFNRVRFUlNfREJfTkFNRSkge1xyXG4gICAgICAgIGFwaURhdGFTb3VyY2VzW2tleV0gPSBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RGF0YVNvdXJjZShkYXRhU2NoZW1hLmRhdGFTb3VyY2VzW2tleV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBzY2hlbWFNYXAgPSBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0V29ya3NoZWV0RGF0YVNjaGVtYU1hcChkYXRhU2NoZW1hLndvcmtzaGVldERhdGFTY2hlbWFNYXApO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLkRhdGFTY2hlbWEgPSB7XHJcbiAgICAgIGRhdGFTb3VyY2VzOiBhcGlEYXRhU291cmNlcyxcclxuICAgICAgd29ya3NoZWV0RGF0YVNjaGVtYU1hcDogc2NoZW1hTWFwLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RGF0YVNvdXJjZShkYXRhU291cmNlOiBQcmVzTGF5ZXIuRGF0YVNvdXJjZVByZXNNb2RlbCk6IEFwaS5EYXRhU291cmNlIHtcclxuICAgIGNvbnN0IGV4dHJhY3RVcGRhdGVUaW1lID0gKGRhdGFTb3VyY2UuZXh0cmFjdFVwZGF0ZVRpbWUgPT09ICcnKSA/IHVuZGVmaW5lZCA6IGRhdGFTb3VyY2UuZXh0cmFjdFVwZGF0ZVRpbWU7XHJcbiAgICBjb25zdCBkYXRhU291cmNlRmllbGRzID0gbmV3IEFycmF5PEFwaS5GaWVsZD4oKTtcclxuXHJcbiAgICBQYXJhbS52ZXJpZnlWYWx1ZShkYXRhU291cmNlLCAnZGF0YVNvdXJjZScpO1xyXG4gICAgUGFyYW0udmVyaWZ5VmFsdWUoZGF0YVNvdXJjZS5maWVsZExpc3QsICdkYXRhU2NoZW1hLmZpZWxkTGlzdCcpO1xyXG5cclxuICAgIGRhdGFTb3VyY2UuZmllbGRMaXN0LmZvckVhY2goKHBsRmllbGQpID0+IHtcclxuICAgICAgLy8gSWYgdGhlIGRhdGFzb3VyY2UgY29udGFpbnMgaGllcmFyY2hpZXMgb3IgZm9sZGVycywgdGhlIGJhc2UgZmllbGQgd2lsbCBjb250YWluXHJcbiAgICAgIC8vIGEgbGlzdCBvZiB0aGUgZmllbGRzIGdyb3VwZWQgYmVuZWF0aCBpdCwgd2UgYXJlIGludGVyZXN0ZWQgaW4gdGhvc2UuXHJcbiAgICAgIC8vIFRhYmxlYXUgZG9lcyBub3Qgc3VwcG9ydCBuZXN0ZWQgZm9sZGVycyBvciBoaWVyYXJjaGllcywgc28gdGhpcyBkb2VzIG5vdCBuZWVkIHRvIGJlIHJlY3Vyc2l2ZS5cclxuICAgICAgY29uc3QgaGllcmFyY2h5TW9kZWwgPSBwbEZpZWxkIGFzIFByZXNMYXllci5IaWVyYXJjaHlQcmVzTW9kZWw7XHJcblxyXG4gICAgICBpZiAoaGllcmFyY2h5TW9kZWwuY29sdW1uTGlzdCkgeyAvLyBJZiBjb2x1bW4gbGlzdCBpcyBkZWZpbmVkLCB0aGlzIGlzIGEgaGllcmFyY2h5LlxyXG4gICAgICAgIGhpZXJhcmNoeU1vZGVsLmNvbHVtbkxpc3QuZm9yRWFjaChmaWVsZCA9PiBkYXRhU291cmNlRmllbGRzLnB1c2goUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuY29udmVydEZpZWxkKGZpZWxkKSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFRoaXMgaXMgYSBiaXQgYnJpdHRsZSBmb3Igbm93LCBidXQgdGhpcyB2YWx1ZSBpcyBub3QgZXhwb3NlZCB2aWEgdGhlIHBsYXRmb3JtIEZpZWxkVHlwZSBFbnVtLlxyXG4gICAgICAgIGlmIChwbEZpZWxkLnR5cGUgIT09ICdmaWVsZC1mb2xkZXInICYmIHBsRmllbGQudHlwZSAhPT0gJ2RpbWVuc2lvbicpIHtcclxuICAgICAgICAgIGRhdGFTb3VyY2VGaWVsZHMucHVzaChQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RmllbGQocGxGaWVsZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0OiBBcGkuRGF0YVNvdXJjZSA9IHtcclxuICAgICAgbmFtZTogZGF0YVNvdXJjZS5kYXRhc291cmNlQ2FwdGlvbixcclxuICAgICAgaWQ6IGRhdGFTb3VyY2UuZGF0YXNvdXJjZSxcclxuICAgICAgaXNFeHRyYWN0OiAoZXh0cmFjdFVwZGF0ZVRpbWUgIT09IHVuZGVmaW5lZCksXHJcbiAgICAgIGV4dHJhY3RVcGRhdGVUaW1lOiBleHRyYWN0VXBkYXRlVGltZSxcclxuICAgICAgZmllbGRzOiBkYXRhU291cmNlRmllbGRzXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRXb3Jrc2hlZXREYXRhU2NoZW1hTWFwKHNjaGVtYU1hcDogeyBba2V5OiBzdHJpbmddOiBQcmVzTGF5ZXIuV29ya3NoZWV0RGF0YVNjaGVtYVByZXNNb2RlbCB9KTpcclxuICAgIEFwaS5Xb3Jrc2hlZXREYXRhU2NoZW1hTWFwIHtcclxuXHJcbiAgICBsZXQgcmVzdWx0OiBBcGkuV29ya3NoZWV0RGF0YVNjaGVtYU1hcCA9IHt9O1xyXG5cclxuICAgIE9iamVjdC5rZXlzKHNjaGVtYU1hcCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIGFueSByZWZlcmVuY2VzIHRvIHRoZSBcIlBhcmFtZXRlcnNcIiBkYXRhc291cmNlLiAgVGhpcyBpcyB0cmVhdGVkIGFzIGEgc2VwYXJhdGVcclxuICAgICAgLy8gZGF0YXNvdXJjZSBieSB0aGUgcGxhdGZvcm0sIGJ1dCB0aGUgRXh0ZW5zaW9ucyBBUEkgYWNjZXNzZXMgUGFyYW1ldGVycyBkaXJlY3RseS5cclxuICAgICAgbGV0IGNsZWFuUmVmZXJlbmNlZERhdGFTb3VyY2VMaXN0ID0gc2NoZW1hTWFwW2tleV0ucmVmZXJlbmNlZERhdGFTb3VyY2VMaXN0LmZpbHRlcigoZHNOYW1lKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGRzTmFtZSAhPT0gUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuUEFSQU1FVEVSU19EQl9OQU1FO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdvcmtzaGVldERhdGFTb3VyY2VJbmZvOiBBcGkuV29ya3NoZWV0RGF0YVNvdXJjZUluZm8gPSB7XHJcbiAgICAgICAgcHJpbWFyeURhdGFTb3VyY2U6IHNjaGVtYU1hcFtrZXldLnByaW1hcnlEYXRhc291cmNlLFxyXG4gICAgICAgIHJlZmVyZW5jZWREYXRhU291cmNlTGlzdDogY2xlYW5SZWZlcmVuY2VkRGF0YVNvdXJjZUxpc3RcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlc3VsdFtrZXldID0gd29ya3NoZWV0RGF0YVNvdXJjZUluZm87XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RmllbGQocGxGaWVsZDogUHJlc0xheWVyLkZpZWxkUHJlc01vZGVsKTogQXBpLkZpZWxkIHtcclxuICAgIGNvbnN0IGZpZWxkQ29sdW1uID0gcGxGaWVsZCBhcyBQcmVzTGF5ZXIuRmllbGRDb2x1bW5QcmVzTW9kZWw7XHJcbiAgICBjb25zdCBncm91cENvbHVtbiA9IHBsRmllbGQgYXMgUHJlc0xheWVyLkdyb3VwUHJlc01vZGVsO1xyXG5cclxuICAgIGxldCBhZ2dyZWdhdGlvbiA9IEFwaS5GaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Ob25lO1xyXG4gICAgbGV0IHJvbGUgPSBBcGkuRmllbGRSb2xlVHlwZS5Vbmtub3duO1xyXG4gICAgbGV0IGlzQ2FsY3VsYXRlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIFdlIGV4cGVjdCB0aGF0IGV2ZXJ5IEZpZWxkUHJlc01vZGVsIHdlIGdldCBiYWNrIGZyb20gdGhlIGNvbW1hbmQgdGhhdCByZXR1cm5zIEZpZWxkUHJlc01vZGVsc1xyXG4gICAgLy8gaXMgYWN0dWFsbHkgYW4gaW5zdGFuY2Ugb2YgdGhlIGRlcml2ZWQgRmllbGRDb2x1bW5QcmVzTW9kZWwuXHJcbiAgICBpZiAoZmllbGRDb2x1bW4uYWdncmVnYXRpb24gJiYgZmllbGRDb2x1bW4uZmllbGRSb2xlKSB7XHJcbiAgICAgIGFnZ3JlZ2F0aW9uID0gRW51bU1hcHBpbmdzLmZpZWxkQWdncmVnYXRpb25UeXBlLmNvbnZlcnQoZmllbGRDb2x1bW4uYWdncmVnYXRpb24pO1xyXG4gICAgICByb2xlID0gRW51bU1hcHBpbmdzLmZpZWxkUm9sZVR5cGUuY29udmVydChmaWVsZENvbHVtbi5maWVsZFJvbGUpO1xyXG4gICAgICBpc0NhbGN1bGF0ZWQgPSBmaWVsZENvbHVtbi5pc0NhbGN1bGF0ZWQgfHwgZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgSW50ZXJuYWwgRXJyb3I6IGZpZWxkIHByZXMgbW9kZWwgaXMgbWlzc2luZyBleHBlY3RlZCBwcm9wZXJ0aWVzLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdDogQXBpLkZpZWxkID0ge1xyXG4gICAgICBuYW1lOiBwbEZpZWxkLmRlc2NyaXB0aW9uLFxyXG4gICAgICBpZDogcGxGaWVsZC5uYW1lLFxyXG4gICAgICBkZXNjcmlwdGlvbjogcGxGaWVsZC51c2VyQ2FwdGlvbixcclxuICAgICAgYWdncmVnYXRpb246IGFnZ3JlZ2F0aW9uLFxyXG4gICAgICBpc0hpZGRlbjogISEocGxGaWVsZC5pc0hpZGRlbiksXHJcbiAgICAgIGlzR2VuZXJhdGVkOiBwbEZpZWxkLmlzR2VuZXJhdGVkLFxyXG4gICAgICBpc0NhbGN1bGF0ZWRGaWVsZDogaXNDYWxjdWxhdGVkLFxyXG4gICAgICByb2xlOiByb2xlLFxyXG4gICAgICBpc0NvbWJpbmVkRmllbGQ6ICEhKGdyb3VwQ29sdW1uLmlzQ29tYmluZWRGaWVsZClcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydEpvaW5EZXNjcmlwdGlvbihwbEpvaW5EZXNjcmlwdGlvbjogUHJlc0xheWVyLkpvaW5EZXNjcmlwdGlvblByZXNNb2RlbCk6IEFwaS5Kb2luRGVzY3JpcHRpb24ge1xyXG4gICAgUGFyYW0udmVyaWZ5VmFsdWUocGxKb2luRGVzY3JpcHRpb24sICdwbEpvaW5EZXNjcmlwdGlvbicpO1xyXG4gICAgbGV0IGFwaVRhYmxlczogQXJyYXk8QXBpLlRhYmxlSW5mbz4gPSBwbEpvaW5EZXNjcmlwdGlvbi5qb2luVGFibGVJbmZvcy5tYXAoam9pblRhYmxlID0+IHtcclxuICAgICAgY29uc3QgYXBpVGFibGU6IEFwaS5UYWJsZUluZm8gPSB7XHJcbiAgICAgICAgbmFtZTogam9pblRhYmxlLnRhYmxlQWxpYXMsXHJcbiAgICAgICAgaWQ6IGpvaW5UYWJsZS50YWJsZU5hbWUsXHJcbiAgICAgICAgY3VzdG9tU1FMOiAoam9pblRhYmxlLmlzQ3VzdG9tU3FsKSA/IGpvaW5UYWJsZS5zcWxRdWVyeSA6IHVuZGVmaW5lZCxcclxuICAgICAgICBjb25uZWN0aW9uQ2xhc3NOYW1lOiBqb2luVGFibGUuY29ubmVjdGlvbkNsYXNzTmFtZSxcclxuICAgICAgICBjb25uZWN0aW9uSWQ6IGpvaW5UYWJsZS5jb25uZWN0aW9uTmFtZVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIGFwaVRhYmxlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0OiBBcGkuSm9pbkRlc2NyaXB0aW9uID0ge1xyXG4gICAgICB0YWJsZXM6IGFwaVRhYmxlc1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0Q29ubmVjdGlvbkRlc2NycHRpb25TdW1tYXJpZXMocGxDb25uZWN0aW9uRGVzY3JpcHRpb246IFByZXNMYXllci5Db25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJ5UHJlc01vZGVsW10pOlxyXG4gICAgQXBpLkNvbm5lY3Rpb25EZXNjcmlwdGlvblN1bW1hcnlbXSB7XHJcbiAgICByZXR1cm4gcGxDb25uZWN0aW9uRGVzY3JpcHRpb24ubWFwKHBsU3VtbWFyeSA9PiB7XHJcbiAgICAgIGNvbnN0IGFwaUNvbm5lY3Rpb246IEFwaS5Db25uZWN0aW9uRGVzY3JpcHRpb25TdW1tYXJ5ID0ge1xyXG4gICAgICAgIG5hbWU6IHBsU3VtbWFyeS5jb25uZWN0aW9uRGVzY3JpcHRpb25MYWJlbCxcclxuICAgICAgICBpZDogcGxTdW1tYXJ5LmNvbm5lY3Rpb25OYW1lLFxyXG4gICAgICAgIHR5cGU6IHBsU3VtbWFyeS5jb25uZWN0aW9uVHlwZUxhYmVsLFxyXG4gICAgICAgIHNlcnZlclVSSTogcGxTdW1tYXJ5LmNvbm5lY3Rpb25VcmlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBhcGlDb25uZWN0aW9uO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL1ByZXNMYXllclRvQXBpQ29udmVydGVyLnRzXG4gKiovIiwiaW1wb3J0IHtcclxuICBEYXNoYm9hcmRPYmplY3RUeXBlLFxyXG4gIERhdGFUeXBlLFxyXG4gIERhdGVSYW5nZVR5cGUsXHJcbiAgRGF0ZVN0ZXBQZXJpb2QsXHJcbiAgRG9tYWluUmVzdHJpY3Rpb25UeXBlLFxyXG4gIEV4dGVuc2lvbkNvbnRleHQsXHJcbiAgRXh0ZW5zaW9uTW9kZSxcclxuICBGaWVsZEFnZ3JlZ2F0aW9uVHlwZSxcclxuICBGaWVsZFJvbGVUeXBlLFxyXG4gIEZpbHRlckRvbWFpblR5cGUsXHJcbiAgRmlsdGVyTnVsbE9wdGlvbixcclxuICBGaWx0ZXJVcGRhdGVUeXBlXHJcbn0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgRW51bUNvbnZlcnRlciB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQgKiBhcyBFbnVtcyBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9FbnVtcyc7XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp0eXBlZGVmIC0gRGlzYWJsZSB0aGlzIHRvIG1ha2UgZGVjbGFyaW5nIHRoZXNlIGNsYXNzZXMgYSBiaXQgZWFzaWVyICovXHJcbmV4cG9ydCBjbGFzcyBQcmVzTGF5ZXJUb0FwaUVudW1NYXBwaW5ncyB7XHJcbiAgcHVibGljIHN0YXRpYyB6b25lVHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEVudW1zLlpvbmVUeXBlLCBEYXNoYm9hcmRPYmplY3RUeXBlPih7XHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfSW52YWxpZF06IERhc2hib2FyZE9iamVjdFR5cGUuQmxhbmssXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfVml6XTogRGFzaGJvYXJkT2JqZWN0VHlwZS5Xb3Jrc2hlZXQsXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfQ29sb3JMZWdlbmRdOiBEYXNoYm9hcmRPYmplY3RUeXBlLkxlZ2VuZCxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9TaGFwZUxlZ2VuZF06IERhc2hib2FyZE9iamVjdFR5cGUuTGVnZW5kLFxyXG4gICAgW0VudW1zLlpvbmVUeXBlLlpUX1NpemVMZWdlbmRdOiBEYXNoYm9hcmRPYmplY3RUeXBlLkxlZ2VuZCxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9NYXBMZWdlbmRdOiBEYXNoYm9hcmRPYmplY3RUeXBlLkxlZ2VuZCxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9RdWlja0ZpbHRlcl06IERhc2hib2FyZE9iamVjdFR5cGUuUXVpY2tGaWx0ZXIsXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfSGlnaGxpZ2h0ZXJdOiBEYXNoYm9hcmRPYmplY3RUeXBlLkJsYW5rLCAvLyBUT0RPXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfQ3VyclBhZ2VdOiBEYXNoYm9hcmRPYmplY3RUeXBlLlBhZ2VGaWx0ZXIsXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfRW1wdHldOiBEYXNoYm9hcmRPYmplY3RUeXBlLkJsYW5rLFxyXG4gICAgW0VudW1zLlpvbmVUeXBlLlpUX1RpdGxlXTogRGFzaGJvYXJkT2JqZWN0VHlwZS5UaXRsZSxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9UZXh0XTogRGFzaGJvYXJkT2JqZWN0VHlwZS5UZXh0LFxyXG4gICAgW0VudW1zLlpvbmVUeXBlLlpUX0JpdG1hcF06IERhc2hib2FyZE9iamVjdFR5cGUuSW1hZ2UsXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfV2ViXTogRGFzaGJvYXJkT2JqZWN0VHlwZS5XZWJQYWdlLFxyXG4gICAgW0VudW1zLlpvbmVUeXBlLlpUX0FkZEluXTogRGFzaGJvYXJkT2JqZWN0VHlwZS5FeHRlbnNpb24sIC8vIFRPRE9cclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9QYXJhbUN0cmxdOiBEYXNoYm9hcmRPYmplY3RUeXBlLlBhcmFtZXRlckNvbnRyb2wsXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfRmxpcGJvYXJkTmF2XTogRGFzaGJvYXJkT2JqZWN0VHlwZS5CbGFuayxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9GbGlwYm9hcmRdOiBEYXNoYm9hcmRPYmplY3RUeXBlLkJsYW5rLFxyXG4gICAgW0VudW1zLlpvbmVUeXBlLlpUX0xheW91dEJhc2ljXTogRGFzaGJvYXJkT2JqZWN0VHlwZS5CbGFuayxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9MYXlvdXRGbG93XTogRGFzaGJvYXJkT2JqZWN0VHlwZS5CbGFuayxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9MYXlvdXRGcmVlRm9ybV06IERhc2hib2FyZE9iamVjdFR5cGUuQmxhbmssXHJcbiAgICBbRW51bXMuWm9uZVR5cGUuWlRfRW5kXTogRGFzaGJvYXJkT2JqZWN0VHlwZS5CbGFuayxcclxuICAgIFtFbnVtcy5ab25lVHlwZS5aVF9EYXNoYm9hcmRPYmplY3RdOiBEYXNoYm9hcmRPYmplY3RUeXBlLkJsYW5rLFxyXG4gIH0sIERhc2hib2FyZE9iamVjdFR5cGUuQmxhbmspO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIGV4dGVuc2lvbkNvbnRleHQgPSBuZXcgRW51bUNvbnZlcnRlcjxFbnVtcy5BZGRJbkNvbnRleHQsIEV4dGVuc2lvbkNvbnRleHQ+KHtcclxuICAgIFtFbnVtcy5BZGRJbkNvbnRleHQuVW5rbm93bl06IEV4dGVuc2lvbkNvbnRleHQuVW5rbm93bixcclxuICAgIFtFbnVtcy5BZGRJbkNvbnRleHQuRGVza3RvcF06IEV4dGVuc2lvbkNvbnRleHQuRGVza3RvcCxcclxuICAgIFtFbnVtcy5BZGRJbkNvbnRleHQuU2VydmVyXTogRXh0ZW5zaW9uQ29udGV4dC5TZXJ2ZXJcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBleHRlbnNpb25Nb2RlID0gbmV3IEVudW1Db252ZXJ0ZXI8RW51bXMuQWRkSW5Nb2RlLCBFeHRlbnNpb25Nb2RlPih7XHJcbiAgICBbRW51bXMuQWRkSW5Nb2RlLlVua25vd25dOiBFeHRlbnNpb25Nb2RlLlVua25vd24sXHJcbiAgICBbRW51bXMuQWRkSW5Nb2RlLkF1dGhvcmluZ106IEV4dGVuc2lvbk1vZGUuQXV0aG9yaW5nLFxyXG4gICAgW0VudW1zLkFkZEluTW9kZS5WaWV3aW5nXTogRXh0ZW5zaW9uTW9kZS5WaWV3aW5nXHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZGF0YVR5cGUgPSBuZXcgRW51bUNvbnZlcnRlcjxFbnVtcy5EYXRhVHlwZSwgRGF0YVR5cGU+ICh7XHJcbiAgICBbRW51bXMuRGF0YVR5cGUuRFRfQk9PTEVBTl06IERhdGFUeXBlLkJvb2wsXHJcbiAgICBbRW51bXMuRGF0YVR5cGUuRFRfREFURV06IERhdGFUeXBlLkRhdGUsXHJcbiAgICBbRW51bXMuRGF0YVR5cGUuRFRfREFURVRJTUVdOiBEYXRhVHlwZS5EYXRlVGltZSxcclxuICAgIFtFbnVtcy5EYXRhVHlwZS5EVF9JTlRFR0VSXTogRGF0YVR5cGUuSW50LFxyXG4gICAgW0VudW1zLkRhdGFUeXBlLkRUX1JFQUxdOiBEYXRhVHlwZS5GbG9hdCxcclxuICAgIFtFbnVtcy5EYXRhVHlwZS5EVF9TVFJJTkddOiBEYXRhVHlwZS5TdHJpbmcsXHJcbiAgICBbRW51bXMuRGF0YVR5cGUuRFRfU1BBVElBTF06IERhdGFUeXBlLlNwYXRpYWxcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBmaWVsZEFnZ3JlZ2F0aW9uVHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEVudW1zLkFnZ1R5cGUsIEZpZWxkQWdncmVnYXRpb25UeXBlPih7XHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfQVRUUl06IEZpZWxkQWdncmVnYXRpb25UeXBlLkF0dHIsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfQVZHXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuQXZnLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX0NPVU5UXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuQ291bnQsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfQ09VTlREXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuQ291bnRkLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX0RBWV06IEZpZWxkQWdncmVnYXRpb25UeXBlLkRheSxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19FTkRdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5FbmQsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfSE9VUl06IEZpZWxkQWdncmVnYXRpb25UeXBlLkhvdXIsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfSU5PVVRdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Jbk91dCxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19LVVJUT1NJU106IEZpZWxkQWdncmVnYXRpb25UeXBlLkt1cnRvc2lzLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX01BWF06IEZpZWxkQWdncmVnYXRpb25UeXBlLk1heCxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19NRFldOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5NZHksXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfTUVESUFOXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuTWVkaWFuLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX01JTl06IEZpZWxkQWdncmVnYXRpb25UeXBlLk1pbixcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19NSU5VVEVdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5NaW51dGUsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfTU9OVEhZRUFSXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuTW9udGhZZWFyLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX05PTkVdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Ob25lLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX1FUUl06IEZpZWxkQWdncmVnYXRpb25UeXBlLlF0cixcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19RVUFSVDFdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5RdWFydDEsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfUVVBUlQzXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuUXVhcnQzLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX1NFQ09ORF06IEZpZWxkQWdncmVnYXRpb25UeXBlLlNlY29uZCxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19TS0VXTkVTU106IEZpZWxkQWdncmVnYXRpb25UeXBlLlNrZXduZXNzLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX1NUREVWXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuU3RkZXYsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5BR0dfU1RERVZQXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuU3RkZXZwLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX1NVTV06IEZpZWxkQWdncmVnYXRpb25UeXBlLlN1bSxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLlRSVU5DX0RBWV06IEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jRGF5LFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuVFJVTkNfSE9VUl06IEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jSG91cixcclxuICAgIFtFbnVtcy5BZ2dUeXBlLlRSVU5DX01JTlVURV06IEZpZWxkQWdncmVnYXRpb25UeXBlLlRydW5jTWludXRlLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuVFJVTkNfTU9OVEhdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY01vbnRoLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuVFJVTkNfUVRSXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuVHJ1bmNRdHIsXHJcbiAgICBbRW51bXMuQWdnVHlwZS5UUlVOQ19TRUNPTkRdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY1NlY29uZCxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLlRSVU5DX1dFRUtdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5UcnVuY1dlZWssXHJcbiAgICBbRW51bXMuQWdnVHlwZS5UUlVOQ19ZRUFSXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuVHJ1bmNZZWFyLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX1VTRVJdOiBGaWVsZEFnZ3JlZ2F0aW9uVHlwZS5Vc2VyLFxyXG4gICAgW0VudW1zLkFnZ1R5cGUuQUdHX1ZBUl06IEZpZWxkQWdncmVnYXRpb25UeXBlLlZhcixcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19WQVJQXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuVmFycCxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19XRUVLXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuV2VlayxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19XRUVLREFZXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuV2Vla2RheSxcclxuICAgIFtFbnVtcy5BZ2dUeXBlLkFHR19ZRUFSXTogRmllbGRBZ2dyZWdhdGlvblR5cGUuWWVhcixcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBmaWVsZFJvbGVUeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8RW51bXMuRmllbGRSb2xlLCBGaWVsZFJvbGVUeXBlPih7XHJcbiAgICBbRW51bXMuRmllbGRSb2xlLlJPTEVfRElNRU5TSU9OXTogRmllbGRSb2xlVHlwZS5EaW1lbnNpb24sXHJcbiAgICBbRW51bXMuRmllbGRSb2xlLlJPTEVfTUVBU1VSRV06IEZpZWxkUm9sZVR5cGUuTWVhc3VyZVxyXG4gIH0pO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHBhcmFtZXRlclR5cGVzRG9tYWluVHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEVudW1zLlBhcmFtZXRlclR5cGVzRG9tYWluVHlwZSwgRG9tYWluUmVzdHJpY3Rpb25UeXBlPih7XHJcbiAgICBbRW51bXMuUGFyYW1ldGVyVHlwZXNEb21haW5UeXBlLkRvbWFpbl9BbnldOiBEb21haW5SZXN0cmljdGlvblR5cGUuQWxsLFxyXG4gICAgW0VudW1zLlBhcmFtZXRlclR5cGVzRG9tYWluVHlwZS5Eb21haW5fTGlzdF06IERvbWFpblJlc3RyaWN0aW9uVHlwZS5MaXN0LFxyXG4gICAgW0VudW1zLlBhcmFtZXRlclR5cGVzRG9tYWluVHlwZS5Eb21haW5fUmFuZ2VdOiBEb21haW5SZXN0cmljdGlvblR5cGUuUmFuZ2UsXHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZGF0ZVN0ZXBQZXJpb2QgPSBuZXcgRW51bUNvbnZlcnRlcjxFbnVtcy5EYXRlUGVyaW9kVHlwZSwgRGF0ZVN0ZXBQZXJpb2Q+KHtcclxuICAgIFtFbnVtcy5EYXRlUGVyaW9kVHlwZS5QZXJpb2RZZWFyXTogRGF0ZVN0ZXBQZXJpb2QuWWVhcnMsXHJcbiAgICBbRW51bXMuRGF0ZVBlcmlvZFR5cGUuUGVyaW9kUXVhcnRlcl06IERhdGVTdGVwUGVyaW9kLlF1YXJ0ZXJzLFxyXG4gICAgW0VudW1zLkRhdGVQZXJpb2RUeXBlLlBlcmlvZE1vbnRoXTogRGF0ZVN0ZXBQZXJpb2QuTW9udGhzLFxyXG4gICAgW0VudW1zLkRhdGVQZXJpb2RUeXBlLlBlcmlvZFdlZWtdOiBEYXRlU3RlcFBlcmlvZC5XZWVrcyxcclxuICAgIFtFbnVtcy5EYXRlUGVyaW9kVHlwZS5QZXJpb2REYXldOiBEYXRlU3RlcFBlcmlvZC5EYXlzLFxyXG4gICAgW0VudW1zLkRhdGVQZXJpb2RUeXBlLlBlcmlvZEhvdXJdOiBEYXRlU3RlcFBlcmlvZC5Ib3VycyxcclxuICAgIFtFbnVtcy5EYXRlUGVyaW9kVHlwZS5QZXJpb2RNaW51dGVdOiBEYXRlU3RlcFBlcmlvZC5NaW51dGVzLFxyXG4gICAgW0VudW1zLkRhdGVQZXJpb2RUeXBlLlBlcmlvZFNlY29uZF06IERhdGVTdGVwUGVyaW9kLlNlY29uZHNcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBkYXRlUmFuZ2VUeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8RW51bXMuRmlsdGVyc1JlbGF0aXZlRGF0ZVJhbmdlVHlwZSwgRGF0ZVJhbmdlVHlwZT4oe1xyXG4gICAgW0VudW1zLkZpbHRlcnNSZWxhdGl2ZURhdGVSYW5nZVR5cGUuUmFuZ2VDdXJyZW50XTogRGF0ZVJhbmdlVHlwZS5DdXJyZW50LFxyXG4gICAgW0VudW1zLkZpbHRlcnNSZWxhdGl2ZURhdGVSYW5nZVR5cGUuUmFuZ2VDdXJyZW50VG9EYXRlXTogRGF0ZVJhbmdlVHlwZS5Ub0RhdGUsXHJcbiAgICBbRW51bXMuRmlsdGVyc1JlbGF0aXZlRGF0ZVJhbmdlVHlwZS5SYW5nZUxhc3QxXTogRGF0ZVJhbmdlVHlwZS5MYXN0LFxyXG4gICAgW0VudW1zLkZpbHRlcnNSZWxhdGl2ZURhdGVSYW5nZVR5cGUuUmFuZ2VMYXN0Tl06IERhdGVSYW5nZVR5cGUuTGFzdE4sXHJcbiAgICBbRW51bXMuRmlsdGVyc1JlbGF0aXZlRGF0ZVJhbmdlVHlwZS5SYW5nZU5leHQxXTogRGF0ZVJhbmdlVHlwZS5OZXh0LFxyXG4gICAgW0VudW1zLkZpbHRlcnNSZWxhdGl2ZURhdGVSYW5nZVR5cGUuUmFuZ2VOZXh0Tl06IERhdGVSYW5nZVR5cGUuTmV4dE5cclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJEb21haW5UeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8RW51bXMuRmlsdGVyc0RvbWFpblR5cGUsIEZpbHRlckRvbWFpblR5cGU+ICh7XHJcbiAgICBbRW51bXMuRmlsdGVyc0RvbWFpblR5cGUuUmVsZXZhbnRdOiBGaWx0ZXJEb21haW5UeXBlLlJlbGV2YW50LFxyXG4gICAgW0VudW1zLkZpbHRlcnNEb21haW5UeXBlLkRhdGFiYXNlXTogRmlsdGVyRG9tYWluVHlwZS5EYXRhYmFzZVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXBpVG9QcmVzTGF5ZXJFbnVtTWFwcGluZ3Mge1xyXG4gIHB1YmxpYyBzdGF0aWMgZmlsdGVyVXBkYXRlVHlwZSA9IG5ldyBFbnVtQ29udmVydGVyPEZpbHRlclVwZGF0ZVR5cGUsIEVudW1zLkZpbHRlclVwZGF0ZVR5cGU+ICh7XHJcbiAgICBbRmlsdGVyVXBkYXRlVHlwZS5BZGRdOiBFbnVtcy5GaWx0ZXJVcGRhdGVUeXBlLkFERCxcclxuICAgIFtGaWx0ZXJVcGRhdGVUeXBlLkFsbF06IEVudW1zLkZpbHRlclVwZGF0ZVR5cGUuQUxMLFxyXG4gICAgW0ZpbHRlclVwZGF0ZVR5cGUuUmVwbGFjZV06IEVudW1zLkZpbHRlclVwZGF0ZVR5cGUuUkVQTEFDRSxcclxuICAgIFtGaWx0ZXJVcGRhdGVUeXBlLlJlbW92ZV06IEVudW1zLkZpbHRlclVwZGF0ZVR5cGUuUkVNT1ZFXHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgbnVsbE9wdGlvbiA9IG5ldyBFbnVtQ29udmVydGVyPEZpbHRlck51bGxPcHRpb24sIEVudW1zLkZpbHRlcnNRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlcz4gKHtcclxuICAgIFtGaWx0ZXJOdWxsT3B0aW9uLkFsbFZhbHVlc106IEVudW1zLkZpbHRlcnNRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlcy5BbGwsXHJcbiAgICBbRmlsdGVyTnVsbE9wdGlvbi5Ob25OdWxsVmFsdWVzXTogRW51bXMuRmlsdGVyc1F1YW50aXRhdGl2ZUluY2x1ZGVkVmFsdWVzLk5vbk51bGwsXHJcbiAgICBbRmlsdGVyTnVsbE9wdGlvbi5OdWxsVmFsdWVzXTogRW51bXMuRmlsdGVyc1F1YW50aXRhdGl2ZUluY2x1ZGVkVmFsdWVzLk51bGxcclxuICB9KTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJEb21haW5UeXBlID0gbmV3IEVudW1Db252ZXJ0ZXI8RmlsdGVyRG9tYWluVHlwZSwgRW51bXMuRmlsdGVyc0RvbWFpblR5cGU+ICh7XHJcbiAgICBbRmlsdGVyRG9tYWluVHlwZS5SZWxldmFudF06IEVudW1zLkZpbHRlcnNEb21haW5UeXBlLlJlbGV2YW50LFxyXG4gICAgW0ZpbHRlckRvbWFpblR5cGUuRGF0YWJhc2VdOiBFbnVtcy5GaWx0ZXJzRG9tYWluVHlwZS5EYXRhYmFzZVxyXG4gIH0pO1xyXG59XHJcbi8qIHRzbGludDplbmFibGU6dHlwZWRlZiAqL1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9FbnVtTWFwcGluZ3MudHNcbiAqKi8iLCIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vL1xyXG4vLyBUaGlzIGZpbGUgaXMgdGhlIGNvcHlyaWdodGVkIHByb3BlcnR5IG9mIFRhYmxlYXUgU29mdHdhcmUgYW5kIGlzIHByb3RlY3RlZFxyXG4vLyBieSByZWdpc3RlcmVkIHBhdGVudHMgYW5kIG90aGVyIGFwcGxpY2FibGUgVS5TLiBhbmQgaW50ZXJuYXRpb25hbCBsYXdzIGFuZFxyXG4vLyByZWd1bGF0aW9ucy5cclxuLy9cclxuLy8gVW5saWNlbnNlZCB1c2Ugb2YgdGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBpcyBwcm9oaWJpdGVkLiBQbGVhc2UgcmVmZXIgdG9cclxuLy8gdGhlIE5PVElDRVMudHh0IGZpbGUgZm9yIGZ1cnRoZXIgZGV0YWlscy5cclxuLy9cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gV0FSTklORzogQ29tcHV0ZXIgZ2VuZXJhdGVkIGZpbGUuICBEbyBub3QgaGFuZCBtb2RpZnkuXHJcbi8vIERFUEVORFMgT046IFsnLi4vanMtYXBpL2FwaS1jb3JlL25vZGVfbW9kdWxlcy9AdGFibGVhdS9wcmVzbGF5ZXItY29kZWdlbi10eXBlc2NyaXB0L3RlbXBsYXRlcy9lbnVtLXRzLnRlbXBsYXRlJywgdScuLi9qcy1hcGkvYXBpLWNvcmUvdGVtcC1wcmVzLWxheWVyL2FsbC1lbnVtcy5kYXRhJ11cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBEYXRhU2NhbGluZyB7XHJcblxyXG4gIC8vIFxyXG4gIFNDQUxJTkdfTk9ORSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgU0NBTElOR19TVEFOREFSRElaRUQgPSAnc3RhbmRhcmRpemVkJyxcclxuXHJcbiAgLy8gXHJcbiAgU0NBTElOR19OT1JNQUxJWkVEID0gJ25vcm1hbGl6ZWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGb3JlY2FzdE1vZGVsVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEZvcmVjYXN0TW9kZWxUeXBlQXV0b1NlYXNvbiA9ICdhdXRvLXNlYXNvbicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcmVjYXN0TW9kZWxUeXBlQXV0byA9ICdhdXRvJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9yZWNhc3RNb2RlbFR5cGVDdXN0b20gPSAnY3VzdG9tJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRm9yZWNhc3RSYW5nZVR5cGUge1xyXG5cclxuICAvLyBcclxuICBGb3JlY2FzdFJhbmdlVHlwZUF1dG8gPSAnYXV0bycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcmVjYXN0UmFuZ2VUeXBlTmV4dCA9ICduZXh0JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9yZWNhc3RSYW5nZVR5cGVFbmRPZiA9ICdlbmQtb2YnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGb3JlY2FzdFN0YXR1cyB7XHJcblxyXG4gIC8vIFxyXG4gIEZTX1ZBTElEID0gJ2ZzLXZhbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfSU5WQUxJRF9EQVRFVElNRSA9ICdmcy1pbnZhbGlkLWRhdGV0aW1lJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfSU5WQUxJRF9SRVNQT05TRSA9ICdmcy1pbnZhbGlkLXJlc3BvbnNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfTkVFRF9NT1JFX0RBVEEgPSAnZnMtbmVlZC1tb3JlLWRhdGEnLFxyXG5cclxuICAvLyBcclxuICBGU19USU1FX1NFUklFU19UT09fU0hPUlQgPSAnZnMtdGltZS1zZXJpZXMtdG9vLXNob3J0JyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfVElNRV9TRVJJRVNfSVJSRUdVTEFSID0gJ2ZzLXRpbWUtc2VyaWVzLWlycmVndWxhcicsXHJcblxyXG4gIC8vIFxyXG4gIEZTX05VTExfREFURVRJTUUgPSAnZnMtbnVsbC1kYXRldGltZScsXHJcblxyXG4gIC8vIFxyXG4gIEZTX05VTExfUkVTUE9OU0UgPSAnZnMtbnVsbC1yZXNwb25zZScsXHJcblxyXG4gIC8vIFxyXG4gIEZTX01FVEFEQVRBX0lOVkFMSUQgPSAnZnMtbWV0YWRhdGEtaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZTX05PX1JFU1BPTlNFID0gJ2ZzLW5vLXJlc3BvbnNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfRVhDRVNTX0RBVEEgPSAnZnMtZXhjZXNzLWRhdGEnLFxyXG5cclxuICAvLyBcclxuICBGU19FWENFU1NfUEFSVElUSU9OUyA9ICdmcy1leGNlc3MtcGFydGl0aW9ucycsXHJcblxyXG4gIC8vIFxyXG4gIEZTX0RJTUVOU0lPTl9JTlZBTElEID0gJ2ZzLWRpbWVuc2lvbi1pbnZhbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfVEFCTEVDQUxDX0lOVkFMSUQgPSAnZnMtdGFibGVjYWxjLWludmFsaWQnLFxyXG5cclxuICAvLyBcclxuICBGU19USU1FX1NFUklFU19UT09fSVJSRUdVTEFSID0gJ2ZzLXRpbWUtc2VyaWVzLXRvby1pcnJlZ3VsYXInLFxyXG5cclxuICAvLyBcclxuICBGU19BR0dSRUdBVEVfRklMVEVSID0gJ2ZzLWFnZ3JlZ2F0ZS1maWx0ZXInLFxyXG5cclxuICAvLyBcclxuICBGU19ESVNBR0dSRUdBVEVfUkVTUE9OU0UgPSAnZnMtZGlzYWdncmVnYXRlLXJlc3BvbnNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfUEVSQ0VOVEFHRV9JTlZBTElEID0gJ2ZzLXBlcmNlbnRhZ2UtaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZTX1RPVEFMX0lOVkFMSUQgPSAnZnMtdG90YWwtaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZTX0VYQ0VTU19EQVRFVElNRSA9ICdmcy1leGNlc3MtZGF0ZXRpbWUnLFxyXG5cclxuICAvLyBcclxuICBGU19EQVRFX0FHR19JTkNPTVBBVElCTEUgPSAnZnMtZGF0ZS1hZ2ctaW5jb21wYXRpYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfVElNRV9TRVJJRVNfTk9UX1BPU0lUSVZFID0gJ2ZzLXRpbWUtc2VyaWVzLW5vdC1wb3NpdGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIEZTX1JFUVVFU1RFRF9NT0RFTF9JTlZBTElEID0gJ2ZzLXJlcXVlc3RlZC1tb2RlbC1pbnZhbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfVE9PX1NIT1JUX0ZPUl9TRUFTT04gPSAnZnMtdG9vLXNob3J0LWZvci1zZWFzb24nLFxyXG5cclxuICAvLyBcclxuICBGU19SRVFVRVNURURfTU9ERUxfVU5TVEFCTEUgPSAnZnMtcmVxdWVzdGVkLW1vZGVsLXVuc3RhYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgRlNfVU5ERUZJTkVEID0gJ2ZzLXVuZGVmaW5lZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFN0eWxlQXR0cmlidXRlIHtcclxuXHJcbiAgLy8gXHJcbiAgc2FBbHRlcm5hdGVUZXh0ID0gJ3NhQWx0ZXJuYXRlVGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhQWx0TWFya0NvbG9yID0gJ3NhQWx0TWFya0NvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FBc3BlY3QgPSAnc2FBc3BlY3QnLFxyXG5cclxuICAvLyBcclxuICBzYUF1dG9TdWJ0aXRsZSA9ICdzYUF1dG9TdWJ0aXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhQmFja2dyb3VuZENvbG9yID0gJ3NhQmFja2dyb3VuZENvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gJ3NhQmFja2dyb3VuZFRyYW5zcGFyZW5jeScsXHJcblxyXG4gIC8vIFxyXG4gIHNhQmFuZFNpemUgPSAnc2FCYW5kU2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhQmFuZENvbG9yID0gJ3NhQmFuZENvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCYW5kTGV2ZWwgPSAnc2FCYW5kTGV2ZWwnLFxyXG5cclxuICAvLyBcclxuICBzYUJvZHlUeXBlID0gJ3NhQm9keVR5cGUnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlckNvbG9yID0gJ3NhQm9yZGVyQ29sb3InLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlckNvbG9yVG9wID0gJ3NhQm9yZGVyQ29sb3JUb3AnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlckNvbG9yUmlnaHQgPSAnc2FCb3JkZXJDb2xvclJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCb3JkZXJDb2xvckJvdHRvbSA9ICdzYUJvcmRlckNvbG9yQm90dG9tJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCb3JkZXJDb2xvckxlZnQgPSAnc2FCb3JkZXJDb2xvckxlZnQnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlclN0eWxlID0gJ3NhQm9yZGVyU3R5bGUnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlclN0eWxlVG9wID0gJ3NhQm9yZGVyU3R5bGVUb3AnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlclN0eWxlUmlnaHQgPSAnc2FCb3JkZXJTdHlsZVJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCb3JkZXJTdHlsZUJvdHRvbSA9ICdzYUJvcmRlclN0eWxlQm90dG9tJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCb3JkZXJTdHlsZUxlZnQgPSAnc2FCb3JkZXJTdHlsZUxlZnQnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlcldpZHRoID0gJ3NhQm9yZGVyV2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlcldpZHRoVG9wID0gJ3NhQm9yZGVyV2lkdGhUb3AnLFxyXG5cclxuICAvLyBcclxuICBzYUJvcmRlcldpZHRoUmlnaHQgPSAnc2FCb3JkZXJXaWR0aFJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCb3JkZXJXaWR0aEJvdHRvbSA9ICdzYUJvcmRlcldpZHRoQm90dG9tJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FCb3JkZXJXaWR0aExlZnQgPSAnc2FCb3JkZXJXaWR0aExlZnQnLFxyXG5cclxuICAvLyBcclxuICBzYUJveHBsb3RTdHlsZSA9ICdzYUJveHBsb3RTdHlsZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhQnJlYWtPblNwZWNpYWwgPSAnc2FCcmVha09uU3BlY2lhbCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhQ2VsbCA9ICdzYUNlbGwnLFxyXG5cclxuICAvLyBcclxuICBzYUNlbGxXID0gJ3NhQ2VsbFcnLFxyXG5cclxuICAvLyBcclxuICBzYUNlbGxIID0gJ3NhQ2VsbEgnLFxyXG5cclxuICAvLyBcclxuICBzYUNlbGxRID0gJ3NhQ2VsbFEnLFxyXG5cclxuICAvLyBcclxuICBzYUNlbGxRTWFyayA9ICdzYUNlbGxRTWFyaycsXHJcblxyXG4gIC8vIFxyXG4gIHNhQ29sb3IgPSAnc2FDb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhQ29sb3JNb2RlID0gJ3NhQ29sb3JNb2RlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FDb2xMZXZlbHMgPSAnc2FDb2xMZXZlbHMnLFxyXG5cclxuICAvLyBcclxuICBzYUNvbFZlcnRMZXZlbHMgPSAnc2FDb2xWZXJ0TGV2ZWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FDb2xIb3JpekhlaWdodCA9ICdzYUNvbEhvcml6SGVpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FDb2xWZXJ0SGVpZ2h0ID0gJ3NhQ29sVmVydEhlaWdodCcsXHJcblxyXG4gIC8vIERlcHJlY2F0ZWRcclxuICBzYUNvbEhlaWdodCA9ICdzYUNvbEhlaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhQ29sV2lkdGggPSAnc2FDb2xXaWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhQ29udGVudCA9ICdzYUNvbnRlbnQnLFxyXG5cclxuICAvLyBcclxuICBzYURpc3BsYXlGaWVsZExhYmVscyA9ICdzYURpc3BsYXlGaWVsZExhYmVscycsXHJcblxyXG4gIC8vIFxyXG4gIHNhRGlzcGxheUhlYWRlciA9ICdzYURpc3BsYXlIZWFkZXInLFxyXG5cclxuICAvLyBcclxuICBzYURpc3BsYXlBbHRlcm5hdGVUZXh0ID0gJ3NhRGlzcGxheUFsdGVybmF0ZVRleHQnLFxyXG5cclxuICAvLyBcclxuICBzYURpdkxldmVsID0gJ3NhRGl2TGV2ZWwnLFxyXG5cclxuICAvLyBcclxuICBzYUVuYWJsZWQgPSAnc2FFbmFibGVkJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FGaWxsQWJvdmVDb2xvciA9ICdzYUZpbGxBYm92ZUNvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FGaWxsQmVsb3dDb2xvciA9ICdzYUZpbGxCZWxvd0NvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FGaWxsQ29sb3IgPSAnc2FGaWxsQ29sb3InLFxyXG5cclxuICAvLyBcclxuICBzYUZvZ0JHQ29sb3IgPSAnc2FGb2dCR0NvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FGb2dEZXNhdHVyYXRpb25XaXRob3V0U2VsZWN0aW9uID0gJ3NhRm9nRGVzYXR1cmF0aW9uV2l0aG91dFNlbGVjdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIHNhRm9nRGVzYXR1cmF0aW9uV2l0aFNlbGVjdGlvbiA9ICdzYUZvZ0Rlc2F0dXJhdGlvbldpdGhTZWxlY3Rpb24nLFxyXG5cclxuICAvLyBcclxuICBzYUZvbnQgPSAnc2FGb250JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FGb250RmFtaWx5ID0gJ3NhRm9udEZhbWlseScsXHJcblxyXG4gIC8vIFxyXG4gIHNhRm9udFNpemUgPSAnc2FGb250U2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhRm9udFN0eWxlID0gJ3NhRm9udFN0eWxlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FGb250V2VpZ2h0ID0gJ3NhRm9udFdlaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhR2VvZ3JhcGhpY0FyZWFUeXBlID0gJ3NhR2VvZ3JhcGhpY0FyZWFUeXBlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FIQWxpZ24gPSAnc2FIQWxpZ24nLFxyXG5cclxuICAvLyBcclxuICBzYUhhbG9Db2xvciA9ICdzYUhhbG9Db2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhSGFsb0NvbG9yU2VsZWN0ZWQgPSAnc2FIYWxvQ29sb3JTZWxlY3RlZCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhSGFzRmlsbCA9ICdzYUhhc0ZpbGwnLFxyXG5cclxuICAvLyBcclxuICBzYUhhc0hhbG8gPSAnc2FIYXNIYWxvJyxcclxuXHJcbiAgLy8gRGVwcmVjYXRlZFxyXG4gIHNhSGFzTGFiZWwgPSAnc2FIYXNMYWJlbCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhSGFzU3Ryb2tlID0gJ3NhSGFzU3Ryb2tlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FIZWlnaHQgPSAnc2FIZWlnaHQnLFxyXG5cclxuICAvLyBcclxuICBzYUhlaWdodEhlYWRlciA9ICdzYUhlaWdodEhlYWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhSGlnaGxpZ2h0TGVnZW5kID0gJ3NhSGlnaGxpZ2h0TGVnZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FIbmF4aXMgPSAnc2FIbmF4aXMnLFxyXG5cclxuICAvLyBcclxuICBzYUhubGFiZWwgPSAnc2FIbmxhYmVsJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FJblRvb2x0aXAgPSAnc2FJblRvb2x0aXAnLFxyXG5cclxuICAvLyBcclxuICBzYUxpbmVFbmQgPSAnc2FMaW5lRW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FMaW5lRW5kU2l6ZSA9ICdzYUxpbmVFbmRTaXplJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FMaW5lSW50ZXJwb2xhdGlvbiA9ICdzYUxpbmVJbnRlcnBvbGF0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FMaW5lUGF0dGVybiA9ICdzYUxpbmVQYXR0ZXJuJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FMaW5lUGF0dGVybk9ubHkgPSAnc2FMaW5lUGF0dGVybk9ubHknLFxyXG5cclxuICAvLyBcclxuICBzYUxpbmVWaXNpYmlsaXR5ID0gJ3NhTGluZVZpc2liaWxpdHknLFxyXG5cclxuICAvLyBcclxuICBzYU1hcCA9ICdzYU1hcCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFwU3R5bGUgPSAnc2FNYXBTdHlsZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFyZ2luID0gJ3NhTWFyZ2luJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNYXJnaW5Ub3AgPSAnc2FNYXJnaW5Ub3AnLFxyXG5cclxuICAvLyBcclxuICBzYU1hcmdpblJpZ2h0ID0gJ3NhTWFyZ2luUmlnaHQnLFxyXG5cclxuICAvLyBcclxuICBzYU1hcmdpbkJvdHRvbSA9ICdzYU1hcmdpbkJvdHRvbScsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFyZ2luTGVmdCA9ICdzYU1hcmdpbkxlZnQnLFxyXG5cclxuICAvLyBcclxuICBzYU1hcmtDb2xvciA9ICdzYU1hcmtDb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFya1RyYW5zcGFyZW5jeSA9ICdzYU1hcmtUcmFuc3BhcmVuY3knLFxyXG5cclxuICAvLyBcclxuICBzYU1hcmtMYWJlbHNTaG93ID0gJ3NhTWFya0xhYmVsc1Nob3cnLFxyXG5cclxuICAvLyBcclxuICBzYVJ1bm5pbmdPcmRlckxhYmVsc1Nob3cgPSAnc2FSdW5uaW5nT3JkZXJMYWJlbHNTaG93JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNYXJrTGFiZWxzTW9kZSA9ICdzYU1hcmtMYWJlbHNNb2RlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNYXJrTGFiZWxzQ3VsbCA9ICdzYU1hcmtMYWJlbHNDdWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNYXJrTGFiZWxzTGluZUVuZEZpcnN0ID0gJ3NhTWFya0xhYmVsc0xpbmVFbmRGaXJzdCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFya0xhYmVsc0xpbmVFbmRMYXN0ID0gJ3NhTWFya0xhYmVsc0xpbmVFbmRMYXN0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNYXJrTGFiZWxzUmFuZ2VNaW4gPSAnc2FNYXJrTGFiZWxzUmFuZ2VNaW4nLFxyXG5cclxuICAvLyBcclxuICBzYU1hcmtMYWJlbHNSYW5nZU1heCA9ICdzYU1hcmtMYWJlbHNSYW5nZU1heCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFya0xhYmVsc1JhbmdlU2NvcGUgPSAnc2FNYXJrTGFiZWxzUmFuZ2VTY29wZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFya0xhYmVsc1JhbmdlRmllbGQgPSAnc2FNYXJrTGFiZWxzUmFuZ2VGaWVsZCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWFya01hcmtlcnNNb2RlID0gJ3NhTWFya01hcmtlcnNNb2RlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNYXhIZWlnaHQgPSAnc2FNYXhIZWlnaHQnLFxyXG5cclxuICAvLyBcclxuICBzYU1heEZvbnRTaXplID0gJ3NhTWF4Rm9udFNpemUnLFxyXG5cclxuICAvLyBcclxuICBzYU1heFN0cm9rZVdpZHRoID0gJ3NhTWF4U3Ryb2tlV2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYU1heFdpZHRoID0gJ3NhTWF4V2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYU1pZFN0cm9rZVdpZHRoID0gJ3NhTWlkU3Ryb2tlV2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYU1pbkhlaWdodCA9ICdzYU1pbkhlaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWluRm9udFNpemUgPSAnc2FNaW5Gb250U2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWluTGVuZ3RoID0gJ3NhTWluTGVuZ3RoJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FNaW5NYXBTaXplID0gJ3NhTWluTWFwU2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhTWluU2l6ZSA9ICdzYU1pblNpemUnLFxyXG5cclxuICAvLyBcclxuICBzYU1pblN0cm9rZVdpZHRoID0gJ3NhTWluU3Ryb2tlV2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYU1pbldpZHRoID0gJ3NhTWluV2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYU5vbmhpZ2hsaWdodENvbG9yID0gJ3NhTm9uaGlnaGxpZ2h0Q29sb3InLFxyXG5cclxuICAvLyBcclxuICBzYU9taXRPblNwZWNpYWwgPSAnc2FPbWl0T25TcGVjaWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FPcGFjaXR5ID0gJ3NhT3BhY2l0eScsXHJcblxyXG4gIC8vIFxyXG4gIHNhT3JpZW50YXRpb24gPSAnc2FPcmllbnRhdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIHNhUGFkZGluZyA9ICdzYVBhZGRpbmcnLFxyXG5cclxuICAvLyBcclxuICBzYVBhZGRpbmdUb3AgPSAnc2FQYWRkaW5nVG9wJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FQYWRkaW5nUmlnaHQgPSAnc2FQYWRkaW5nUmlnaHQnLFxyXG5cclxuICAvLyBcclxuICBzYVBhZGRpbmdCb3R0b20gPSAnc2FQYWRkaW5nQm90dG9tJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FQYWRkaW5nTGVmdCA9ICdzYVBhZGRpbmdMZWZ0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FQYWxldHRlID0gJ3NhUGFsZXR0ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhUmVuZGVyRm9sZFJldmVyc2VkID0gJ3NhUmVuZGVyRm9sZFJldmVyc2VkJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FSZXZlcnNlUGFsZXR0ZSA9ICdzYVJldmVyc2VQYWxldHRlJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FSb3VuZGluZyA9ICdzYVJvdW5kaW5nJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FSb3dIb3JpekxldmVscyA9ICdzYVJvd0hvcml6TGV2ZWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FSb3dIb3JpeldpZHRoID0gJ3NhUm93SG9yaXpXaWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhUm93TGV2ZWxzID0gJ3NhUm93TGV2ZWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FSb3dWZXJ0V2lkdGggPSAnc2FSb3dWZXJ0V2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBzYVNlcGFyYXRvciA9ICdzYVNlcGFyYXRvcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhU2hhcGUgPSAnc2FTaGFwZScsXHJcblxyXG4gIC8vIERlcHJlY2F0ZWRcclxuICBzYVNob3dMYWJlbHMgPSAnc2FTaG93TGFiZWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FTaXplID0gJ3NhU2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhU2l6ZUJhciA9ICdzYVNpemVCYXInLFxyXG5cclxuICAvLyBcclxuICBzYVNtYXJ0QXV0b0FsaWdubWVudCA9ICdzYVNtYXJ0QXV0b0FsaWdubWVudCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhU3BhY2UgPSAnc2FTcGFjZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhU3Ryb2tlQ29sb3IgPSAnc2FTdHJva2VDb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhU3Ryb2tlU2l6ZSA9ICdzYVN0cm9rZVNpemUnLFxyXG5cclxuICAvLyBcclxuICBzYVN1YnRpdGxlID0gJ3NhU3VidGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBzYVRleHRBbGlnbiA9ICdzYVRleHRBbGlnbicsXHJcblxyXG4gIC8vIFxyXG4gIHNhVGV4dEFsaWduRGVmYXVsdCA9ICdzYVRleHRBbGlnbkRlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBzYVRleHREZWNvcmF0aW9uID0gJ3NhVGV4dERlY29yYXRpb24nLFxyXG5cclxuICAvLyBcclxuICBzYVRleHRJbmRlbnQgPSAnc2FUZXh0SW5kZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FUZXh0T3JpZW50YXRpb24gPSAnc2FUZXh0T3JpZW50YXRpb24nLFxyXG5cclxuICAvLyBcclxuICBzYVRleHRGb3JtYXQgPSAnc2FUZXh0Rm9ybWF0JyxcclxuXHJcbiAgLy8gXHJcbiAgc2FUaWNrQ29sb3IgPSAnc2FUaWNrQ29sb3InLFxyXG5cclxuICAvLyBcclxuICBzYVRpY2tMZW5ndGggPSAnc2FUaWNrTGVuZ3RoJyxcclxuXHJcbiAgLy8gRGVwcmVjYXRlZFxyXG4gIHNhVGlja1NwYWNpbmcgPSAnc2FUaWNrU3BhY2luZycsXHJcblxyXG4gIC8vIFxyXG4gIHNhVGl0bGUgPSAnc2FUaXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhVG90YWxMYWJlbCA9ICdzYVRvdGFsTGFiZWwnLFxyXG5cclxuICAvLyBcclxuICBzYVZBbGlnbiA9ICdzYVZBbGlnbicsXHJcblxyXG4gIC8vIFxyXG4gIHNhVmVydGljYWxBbGlnbiA9ICdzYVZlcnRpY2FsQWxpZ24nLFxyXG5cclxuICAvLyBcclxuICBzYVZlcnRpY2FsQWxpZ25EZWZhdWx0ID0gJ3NhVmVydGljYWxBbGlnbkRlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBzYVZuYXhpcyA9ICdzYVZuYXhpcycsXHJcblxyXG4gIC8vIFxyXG4gIHNhVm5sYWJlbCA9ICdzYVZubGFiZWwnLFxyXG5cclxuICAvLyBcclxuICBzYVdhcm5PblNwZWNpYWwgPSAnc2FXYXJuT25TcGVjaWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgc2FXYXNob3V0ID0gJ3NhV2FzaG91dCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhV2hpc2tlckVuZCA9ICdzYVdoaXNrZXJFbmQnLFxyXG5cclxuICAvLyBcclxuICBzYVdoaXNrZXJTdHJva2VDb2xvciA9ICdzYVdoaXNrZXJTdHJva2VDb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhV2hpc2tlclN0cm9rZVNpemUgPSAnc2FXaGlza2VyU3Ryb2tlU2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIHNhV2lkdGggPSAnc2FXaWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIHNhV2lkdGhIZWFkZXIgPSAnc2FXaWR0aEhlYWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIHNhV3JhcCA9ICdzYVdyYXAnLFxyXG5cclxuICAvLyBcclxuICBzYVpvb20gPSAnc2Fab29tJyxcclxuXHJcbiAgLy8gU3BlY2lhbCBhdHRyaWJ1dGVzIHVzZWQgZm9yIG1hdGNoaW5nXHJcbiAgc2FOb25lID0gJ3NhTm9uZScsXHJcblxyXG4gIC8vIFNwZWNpYWwgYXR0cmlidXRlcyB1c2VkIGZvciBtYXRjaGluZ1xyXG4gIHNhQW55ID0gJ3NhQW55J1xyXG59XHJcblxyXG4vLyBsb3dlc3QgYml0IG9mIGVudW0gdmFsdWUgZGVub3RlcyB0d28tdG9uZSBzdHlsZXM7IG5ld2x5IGFkZGVkIHN0eWxlcyBzaG91bGQgZm9sbG93IHRoaXMgcGF0dGVybi5cclxuZXhwb3J0IGVudW0gQm94cGxvdFN0eWxlIHtcclxuXHJcbiAgLy8gbWFzayBmb3IgY2hlY2tpbmcgaWYgYSBzdHlsZSBpcyB0d28tdG9uZVxyXG4gIEJveHBsb3RTdHlsZVR3b1RvbmUgPSAndHdvLXRvbmUnLFxyXG5cclxuICAvLyBcclxuICBCb3hwbG90U3R5bGVNb2Rlcm4gPSAnbW9kZXJuJyxcclxuXHJcbiAgLy8gXHJcbiAgQm94cGxvdFN0eWxlR2xhc3MgPSAnZ2xhc3MnLFxyXG5cclxuICAvLyBcclxuICBCb3hwbG90U3R5bGVDbGFzc2ljID0gJ2NsYXNzaWMnLFxyXG5cclxuICAvLyBcclxuICBCb3hwbG90U3R5bGVDbGFzc2ljVHdvVG9uZSA9ICdjbGFzc2ljLXR3by10b25lJ1xyXG59XHJcblxyXG4vLyB1c2VkIGZvciBib3hwbG90cyBhbmQgcHJlZGljdGlvbiBiYW5kIHdoaXNrZXJzXHJcbmV4cG9ydCBlbnVtIFdoaXNrZXJFbmQge1xyXG5cclxuICAvLyBcclxuICBXaGlza2VyRW5kTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgV2hpc2tlckVuZFNtYWxsID0gJ3NtYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgV2hpc2tlckVuZExhcmdlID0gJ2xhcmdlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU3R5bGVFbGVtZW50IHtcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudEF4aXMgPSAnZWxlbWVudEF4aXMnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50Q2VsbCA9ICdlbGVtZW50Q2VsbCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREYXRhbGFiZWwgPSAnZWxlbWVudERhdGFsYWJlbCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREcm9wc3BvdCA9ICdlbGVtZW50RHJvcHNwb3QnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50SGVhZGVyID0gJ2VsZW1lbnRIZWFkZXInLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50RmllbGRMYWJlbCA9ICdlbGVtZW50RmllbGRMYWJlbCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRGaWVsZExhYmVsRGVjb3JhdGlvbiA9ICdlbGVtZW50RmllbGRMYWJlbERlY29yYXRpb24nLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50RmllbGRMYWJlbFNwYW5uZXIgPSAnZWxlbWVudEZpZWxkTGFiZWxTcGFubmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudExhYmVsID0gJ2VsZW1lbnRMYWJlbCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRNYXJrID0gJ2VsZW1lbnRNYXJrJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFBhbmUgPSAnZWxlbWVudFBhbmUnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50VGFibGUgPSAnZWxlbWVudFRhYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFdvcmtzaGVldCA9ICdlbGVtZW50V29ya3NoZWV0JyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudEJhc2VzaGVldCA9ICdlbGVtZW50QmFzZXNoZWV0JyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudERhc2hib2FyZCA9ICdlbGVtZW50RGFzaGJvYXJkJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFN0b3J5Ym9hcmQgPSAnZWxlbWVudFN0b3J5Ym9hcmQnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50Q2FwdGlvbiA9ICdlbGVtZW50Q2FwdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREcm9wbGluZSA9ICdlbGVtZW50RHJvcGxpbmUnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50UmVmbGluZSA9ICdlbGVtZW50UmVmbGluZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRSZWZCYW5kID0gJ2VsZW1lbnRSZWZCYW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFJlZkJveHBsb3QgPSAnZWxlbWVudFJlZkJveHBsb3QnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50R3JpZGxpbmUgPSAnZWxlbWVudEdyaWRsaW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFplcm9saW5lID0gJ2VsZW1lbnRaZXJvbGluZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRUcmVuZGxpbmUgPSAnZWxlbWVudFRyZW5kbGluZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRUYWJsZURpdiA9ICdlbGVtZW50VGFibGVEaXYnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50SGVhZGVyRGl2ID0gJ2VsZW1lbnRIZWFkZXJEaXYnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50TWFwcGVkSW1hZ2UgPSAnZWxlbWVudE1hcHBlZEltYWdlJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudEFjdGlvbiA9ICdlbGVtZW50QWN0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFRpdGxlID0gJ2VsZW1lbnRUaXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRMZWdlbmQgPSAnZWxlbWVudExlZ2VuZCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRMZWdlbmRUaXRsZSA9ICdlbGVtZW50TGVnZW5kVGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50TGVnZW5kVGl0bGVUZXh0ID0gJ2VsZW1lbnRMZWdlbmRUaXRsZVRleHQnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50QXhpc1RpdGxlID0gJ2VsZW1lbnRBeGlzVGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50QW5ub3RhdGlvbiA9ICdlbGVtZW50QW5ub3RhdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREYXNoVGl0bGUgPSAnZWxlbWVudERhc2hUaXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREYXNoU3VidGl0bGUgPSAnZWxlbWVudERhc2hTdWJ0aXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREYXNoVGV4dCA9ICdlbGVtZW50RGFzaFRleHQnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50RGFzaFpvbmUgPSAnZWxlbWVudERhc2hab25lJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudERhc2hDb250YWluZXIgPSAnZWxlbWVudERhc2hDb250YWluZXInLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50U2Nyb2xsYmFyID0gJ2VsZW1lbnRTY3JvbGxiYXInLFxyXG5cclxuICAvLyBTdGF0aWMgb24vb2ZmIG1hcCBsYXllcnNcclxuICBlbGVtZW50TWFwTGF5ZXIgPSAnZWxlbWVudE1hcExheWVyJyxcclxuXHJcbiAgLy8gQ29udGFpbnMgd2FzaG91dFxyXG4gIGVsZW1lbnRNYXAgPSAnZWxlbWVudE1hcCcsXHJcblxyXG4gIC8vIEluaXRpYWxseSBmb3IgVXJiYW5NYXBwaW5nL0NsYXJpdGFzIGRhdGFcclxuICBlbGVtZW50TWFwRGF0YUxheWVyID0gJ2VsZW1lbnRNYXBEYXRhTGF5ZXInLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50UXVpY2tGaWx0ZXIgPSAnZWxlbWVudFF1aWNrRmlsdGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFF1aWNrRmlsdGVyVGl0bGUgPSAnZWxlbWVudFF1aWNrRmlsdGVyVGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50UGFyYW1ldGVyQ3RybCA9ICdlbGVtZW50UGFyYW1ldGVyQ3RybCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRQYXJhbWV0ZXJDdHJsVGl0bGUgPSAnZWxlbWVudFBhcmFtZXRlckN0cmxUaXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRQYWdlQ2FyZFRpdGxlID0gJ2VsZW1lbnRQYWdlQ2FyZFRpdGxlJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFN0b3J5RGVzY3JpcHRpb24gPSAnZWxlbWVudFN0b3J5RGVzY3JpcHRpb24nLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50U3RvcnlQb2ludENhcHRpb24gPSAnZWxlbWVudFN0b3J5UG9pbnRDYXB0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgZWxlbWVudFN0b3J5VGl0bGUgPSAnZWxlbWVudFN0b3J5VGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBlbGVtZW50VG9vbHRpcCA9ICdlbGVtZW50VG9vbHRpcCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRBbGwgPSAnZWxlbWVudEFsbCcsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnRQYWdlQ2FyZEJvZHkgPSAnZWxlbWVudFBhZ2VDYXJkQm9keScsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREYXRhSGlnaGxpZ2h0ZXIgPSAnZWxlbWVudERhdGFIaWdobGlnaHRlcicsXHJcblxyXG4gIC8vIFxyXG4gIGVsZW1lbnREYXRhSGlnaGxpZ2h0ZXJUaXRsZSA9ICdlbGVtZW50RGF0YUhpZ2hsaWdodGVyVGl0bGUnLFxyXG5cclxuICAvLyBTcGVjaWFsIGVsZW1lbnRzIHVzZWQgZm9yIG1hdGNoaW5nIGFuZCBvcmdhbml6YXRpb25cclxuICBlbGVtZW50Tm9uZSA9ICdlbGVtZW50Tm9uZScsXHJcblxyXG4gIC8vIFNwZWNpYWwgZWxlbWVudHMgdXNlZCBmb3IgbWF0Y2hpbmcgYW5kIG9yZ2FuaXphdGlvblxyXG4gIGVsZW1lbnRBbnkgPSAnZWxlbWVudEFueScsXHJcblxyXG4gIC8vIFNwZWNpYWwgZWxlbWVudHMgdXNlZCBmb3IgbWF0Y2hpbmcgYW5kIG9yZ2FuaXphdGlvblxyXG4gIGVsZW1lbnRSb290ID0gJ2VsZW1lbnRSb290J1xyXG59XHJcblxyXG4vLyBEbyBub3QgbWVzcyB3aXRoIHRoZXNlIHZhbHVlcy4gVGhleSBhcmUgc29tZXRpbWVzIHVzZWQgYXMgYXJyYXkgaW5kZXhlcy9ib3VuZHNcclxuZXhwb3J0IGVudW0gU3R5bGVEYXRhQ2xhc3Mge1xyXG5cclxuICAvLyBcclxuICBkY05vcm1hbCA9ICdkY05vcm1hbCcsXHJcblxyXG4gIC8vIFxyXG4gIGRjVG90YWwgPSAnZGNUb3RhbCcsXHJcblxyXG4gIC8vIFxyXG4gIGRjU3VidG90YWwgPSAnZGNTdWJ0b3RhbCcsXHJcblxyXG4gIC8vIFxyXG4gIGRjQ09VTlQgPSAnZGNDT1VOVCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFN0eWxlRmllbGRTY29wZSB7XHJcblxyXG4gIC8vIFxyXG4gIGZzTm9uZSA9ICdmc05vbmUnLFxyXG5cclxuICAvLyBcclxuICBmc1Jvd3MgPSAnZnNSb3dzJyxcclxuXHJcbiAgLy8gXHJcbiAgZnNDb2xzID0gJ2ZzQ29scydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFN0eWxlU3dhdGNoIHtcclxuXHJcbiAgLy8gXHJcbiAgc3NVbnNwZWNpZmllZCA9ICdzc1Vuc3BlY2lmaWVkJyxcclxuXHJcbiAgLy8gXHJcbiAgc3NMaWdodCA9ICdzc0xpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgc3NEYXJrID0gJ3NzRGFyaydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFRhYmxlYXVGb250U3R5bGUge1xyXG5cclxuICAvLyBcclxuICBOb3JtYWxTdHlsZSA9ICdmb250LXN0eWxlLW5vcm1hbCcsXHJcblxyXG4gIC8vIFxyXG4gIEl0YWxpYyA9ICdmb250LXN0eWxlLWl0YWxpYydcclxufVxyXG5cclxuLy8gVW5zdXBwb3J0ZWQgZm9yIEJldHN5XHJcbmV4cG9ydCBlbnVtIFRleHREZWNvcmF0aW9uIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9EZWNvcmF0aW9uID0gJ3RleHQtZGVjb3JhdGlvbi1ub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgVW5kZXJsaW5lID0gJ3RleHQtZGVjb3JhdGlvbi11bmRlcmxpbmUnLFxyXG5cclxuICAvLyBub3QgeWV0IHN1cHBvcnRlZFxyXG4gIE92ZXJsaW5lID0gJ3RleHQtZGVjb3JhdGlvbi1vdmVybGluZScsXHJcblxyXG4gIC8vIFxyXG4gIFN0cmlrZXRocm91Z2ggPSAndGV4dC1kZWNvcmF0aW9uLXN0cmlrZXRocm91Z2gnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGb250V2VpZ2h0IHtcclxuXHJcbiAgLy8gXHJcbiAgTm9ybWFsV2VpZ2h0ID0gJ2ZvbnQtd2VpZ2h0LW5vcm1hbCcsXHJcblxyXG4gIC8vIFxyXG4gIEJvbGQgPSAnZm9udC13ZWlnaHQtYm9sZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFRleHRPcmllbnQge1xyXG5cclxuICAvLyBcclxuICBUT19BdXRvID0gJ3RleHQtb3JpZW50LWF1dG8nLFxyXG5cclxuICAvLyBcclxuICBUT19Ib3J6ID0gJ3RleHQtb3JpZW50LWhvcml6b250YWwnLFxyXG5cclxuICAvLyBcclxuICBUT19WZXJ0VXAgPSAndGV4dC1vcmllbnQtdmVydGljYWwtdXAnLFxyXG5cclxuICAvLyBcclxuICBUT19WZXJ0RG93biA9ICd0ZXh0LW9yaWVudC12ZXJ0aWNhbC1kb3duJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVGV4dEFsaWduIHtcclxuXHJcbiAgLy8gXHJcbiAgVEFfU3RhcnQgPSAndGV4dC1hbGlnbi1zdGFydCcsXHJcblxyXG4gIC8vIFxyXG4gIFRBX0NlbnRlciA9ICd0ZXh0LWFsaWduLWNlbnRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFRBX0VuZCA9ICd0ZXh0LWFsaWduLWVuZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFRleHRXcmFwTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFRleHRXcmFwT2ZmID0gJ3RleHQtd3JhcC1vZmYnLFxyXG5cclxuICAvLyBcclxuICBUZXh0V3JhcFRydW5jYXRlID0gJ3RleHQtd3JhcC10cnVuY2F0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFRleHRXcmFwT24gPSAndGV4dC13cmFwLW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgVGV4dFdyYXBBdXRvID0gJ3RleHQtd3JhcC1hdXRvJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVGV4dFdob2xlTGluZU1vZGUge1xyXG5cclxuICAvLyBcclxuICBUZXh0V2hvbGVMaW5lT2ZmID0gJ3RleHQtd2hvbGUtbGluZS1vZmYnLFxyXG5cclxuICAvLyBcclxuICBUZXh0V2hvbGVMaW5lT24gPSAndGV4dC13aG9sZS1saW5lLW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgVGV4dFdob2xlTGluZUF1dG8gPSAndGV4dC13aG9sZS1saW5lLWF1dG8nXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBUZXh0QnJlYWtNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgVGV4dEJyZWFrV2hpdGVzcGFjZU9ubHkgPSAndGV4dC1icmVhay13cy1vbmx5JyxcclxuXHJcbiAgLy8gXHJcbiAgVGV4dEJyZWFrQXV0byA9ICd0ZXh0LWJyZWFrLWF1dG8nXHJcbn1cclxuXHJcbi8vIHR5cGUgb2YgYWdncmVnYXRpb25cclxuZXhwb3J0IGVudW0gQWdnVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEFHR19TVU0gPSAnc3VtJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX0FWRyA9ICdhdmVyYWdlJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX01JTiA9ICdtaW4nLFxyXG5cclxuICAvLyBcclxuICBBR0dfTUFYID0gJ21heCcsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19TVERFViA9ICdzdGQtZGV2JyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX1NUREVWUCA9ICdzdGQtZGV2LXAnLFxyXG5cclxuICAvLyBcclxuICBBR0dfVkFSID0gJ3ZhcicsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19WQVJQID0gJ3Zhci1wJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX0NPVU5UID0gJ2NvdW50JyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX0NPVU5URCA9ICdjb3VudC1kJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX01FRElBTiA9ICdtZWRpYW4nLFxyXG5cclxuICAvLyBcclxuICBBR0dfQVRUUiA9ICdhdHRyJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX05PTkUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19QRVJDRU5USUxFID0gJ3BlcmNlbnRpbGUnLFxyXG5cclxuICAvLyBcclxuICBBR0dfWUVBUiA9ICd5ZWFyJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX1FUUiA9ICdxdHInLFxyXG5cclxuICAvLyBcclxuICBBR0dfTU9OVEggPSAnbW9udGgnLFxyXG5cclxuICAvLyBcclxuICBBR0dfREFZID0gJ2RheScsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19IT1VSID0gJ2hvdXInLFxyXG5cclxuICAvLyBcclxuICBBR0dfTUlOVVRFID0gJ21pbnV0ZScsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19TRUNPTkQgPSAnc2Vjb25kJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX1dFRUsgPSAnd2VlaycsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19XRUVLREFZID0gJ3dlZWtkYXknLFxyXG5cclxuICAvLyBcclxuICBBR0dfTU9OVEhZRUFSID0gJ21vbnRoLXllYXInLFxyXG5cclxuICAvLyBcclxuICBBR0dfTURZID0gJ21keScsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19FTkQgPSAnZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgVFJVTkNfWUVBUiA9ICd0cnVuYy15ZWFyJyxcclxuXHJcbiAgLy8gXHJcbiAgVFJVTkNfUVRSID0gJ3RydW5jLXF0cicsXHJcblxyXG4gIC8vIFxyXG4gIFRSVU5DX01PTlRIID0gJ3RydW5jLW1vbnRoJyxcclxuXHJcbiAgLy8gXHJcbiAgVFJVTkNfV0VFSyA9ICd0cnVuYy13ZWVrJyxcclxuXHJcbiAgLy8gXHJcbiAgVFJVTkNfREFZID0gJ3RydW5jLWRheScsXHJcblxyXG4gIC8vIFxyXG4gIFRSVU5DX0hPVVIgPSAndHJ1bmMtaG91cicsXHJcblxyXG4gIC8vIFxyXG4gIFRSVU5DX01JTlVURSA9ICd0cnVuYy1taW51dGUnLFxyXG5cclxuICAvLyBcclxuICBUUlVOQ19TRUNPTkQgPSAndHJ1bmMtc2Vjb25kJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX1FVQVJUMSA9ICdxdWFydDEnLFxyXG5cclxuICAvLyBcclxuICBBR0dfUVVBUlQzID0gJ3F1YXJ0MycsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19TS0VXTkVTUyA9ICdza2V3bmVzcycsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19LVVJUT1NJUyA9ICdrdXJ0b3NpcycsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19JTk9VVCA9ICdpbi1vdXQnLFxyXG5cclxuICAvLyBcclxuICBBR0dfU1VNX1hTUVIgPSAnc3VtLXhzcXInLFxyXG5cclxuICAvLyBcclxuICBBR0dfVVNFUiA9ICd1c2VyJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX0NPTExFQ1QgPSAnY29sbGVjdCcsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19DT1ZBUiA9ICdjb3ZhcicsXHJcblxyXG4gIC8vIFxyXG4gIEFHR19DT1ZBUlAgPSAnY292YXJwJyxcclxuXHJcbiAgLy8gXHJcbiAgQUdHX0NPUlIgPSAnY29ycidcclxufVxyXG5cclxuLy8gRGF0YVZhbHVlRm9ybWF0dGVyOjpEYXRhVHlwZUVuY29kaW5ncyBoYXMgaGFyZGNvZGVkIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGZvbGxvd2luZyBlbnVtIG1lbWJlcnMuIFNvIGFueSBjaGFuZ2VzIGhlcmUgc2hvdWxkIGJlIGRvbmUgdGhlcmUgdG9vXHJcbmV4cG9ydCBlbnVtIERhdGFUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgRFRfSU5URUdFUiA9ICdpbnRlZ2VyJyxcclxuXHJcbiAgLy8gXHJcbiAgRFRfUkVBTCA9ICdyZWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgRFRfU1RSSU5HID0gJ2NzdHJpbmcnLFxyXG5cclxuICAvLyBcclxuICBEVF9EQVRFVElNRSA9ICdkYXRldGltZScsXHJcblxyXG4gIC8vIFxyXG4gIERUX0JPT0xFQU4gPSAnYm9vbGVhbicsXHJcblxyXG4gIC8vIFxyXG4gIERUX0RBVEUgPSAnZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIERUX1RVUExFID0gJ3R1cGxlJyxcclxuXHJcbiAgLy8gXHJcbiAgRFRfU1BBVElBTCA9ICdzcGF0aWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgRFRfVU5LTk9XTiA9ICd1bmtub3duJyxcclxuXHJcbiAgLy8gXHJcbiAgRFRfQklOQVJZID0gJ2JpbmFyeScsXHJcblxyXG4gIC8vIFxyXG4gIERUX1RJTUUgPSAndGltZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIERhdGVQZXJpb2RUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUGVyaW9kWWVhciA9ICd5ZWFyJyxcclxuXHJcbiAgLy8gXHJcbiAgUGVyaW9kUXVhcnRlciA9ICdxdWFydGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgUGVyaW9kTW9udGggPSAnbW9udGgnLFxyXG5cclxuICAvLyBcclxuICBQZXJpb2RXZWVrID0gJ3dlZWsnLFxyXG5cclxuICAvLyBcclxuICBQZXJpb2REYXkgPSAnZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgUGVyaW9kSG91ciA9ICdob3VyJyxcclxuXHJcbiAgLy8gXHJcbiAgUGVyaW9kTWludXRlID0gJ21pbnV0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFBlcmlvZFNlY29uZCA9ICdzZWNvbmQnXHJcbn1cclxuXHJcbi8vIEZvcm1hdCBwcmVwZW5kZWQgdG8gZm9ybWF0IHN0cmluZ3MgdG8gc3BlY2lmeSB0eXBlXHJcbmV4cG9ydCBlbnVtIEZvcm1hdENvZGUge1xyXG5cclxuICAvLyBcclxuICBBdXRvRm9ybWF0ID0gJ2F1dG8tZm9ybWF0JyxcclxuXHJcbiAgLy8gXHJcbiAgU3lzdGVtTG9uZ0RhdGUgPSAnc3lzdGVtLWxvbmctZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFN5c3RlbVNob3J0RGF0ZSA9ICdzeXN0ZW0tc2hvcnQtZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFN5c3RlbU51bWJlciA9ICdzeXN0ZW0tbnVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU3lzdGVtQ3VycmVuY3kgPSAnc3lzdGVtLWN1cnJlbmN5JyxcclxuXHJcbiAgLy8gXHJcbiAgU3lzdGVtVGltZSA9ICdzeXN0ZW0tdGltZScsXHJcblxyXG4gIC8vIFxyXG4gIEN1c3RvbSA9ICdjdXN0b20nLFxyXG5cclxuICAvLyBcclxuICBDdXN0b21JQ1UgPSAnY3VzdG9tLWljdScsXHJcblxyXG4gIC8vIFxyXG4gIEN1c3RvbU51bWJlciA9ICdjdXN0b20tbnVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgQ3VzdG9tQ3VycmVuY3kgPSAnY3VzdG9tLWN1cnJlbmN5JyxcclxuXHJcbiAgLy8gXHJcbiAgQ3VzdG9tU2NpZW50aWZpYyA9ICdjdXN0b20tc2NpZW50aWZpYycsXHJcblxyXG4gIC8vIFxyXG4gIEN1c3RvbVBlcmNlbnRhZ2UgPSAnY3VzdG9tLXBlcmNlbnRhZ2UnXHJcbn1cclxuXHJcbi8vIFVuaXRzIHNwZWNpZmllZCBpbiBhIGZvcm1hdCBzdHJpbmdcclxuZXhwb3J0IGVudW0gVW5pdHNGb3JtYXRFbnVtIHtcclxuXHJcbiAgLy8gXHJcbiAgVW5pdHNGbXROb25lID0gJ3VuaXRzLW5vbmUnLFxyXG5cclxuICAvLyBcclxuICBVbml0c0ZtdFRob3VzYW5kcyA9ICd1bml0cy10aG91c2FuZHMnLFxyXG5cclxuICAvLyBcclxuICBVbml0c0ZtdE1pbGxpb25zID0gJ3VuaXRzLW1pbGxpb25zJyxcclxuXHJcbiAgLy8gXHJcbiAgVW5pdHNGbXRCaWxsaW9uc0VuZ2xpc2ggPSAndW5pdHMtYmlsbGlvbnMtZW5nbGlzaCcsXHJcblxyXG4gIC8vIFxyXG4gIFVuaXRzRm10QmlsbGlvbnNTdGFuZGFyZCA9ICd1bml0cy1iaWxsaW9ucy1zdGFuZGFyZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZvcmVjYXN0Q29sdW1uVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEZPUkVDQVNUX05PTkUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIEZPUkVDQVNUX1ZBTFVFID0gJ3ZhbHVlJyxcclxuXHJcbiAgLy8gXHJcbiAgRk9SRUNBU1RfSU5ESUNBVE9SID0gJ2luZGljYXRvcicsXHJcblxyXG4gIC8vIFxyXG4gIEZPUkVDQVNUX1BSRUNJU0lPTiA9ICdwcmVjaXNpb24nLFxyXG5cclxuICAvLyBcclxuICBGT1JFQ0FTVF9RVUFMSVRZID0gJ3F1YWxpdHknLFxyXG5cclxuICAvLyBcclxuICBGT1JFQ0FTVF9GSVRfVFJFTkQgPSAnZml0X3RyZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgRk9SRUNBU1RfUFJFQ0lTSU9OX1BFUkNFTlQgPSAncHJlY2lzaW9uX3BlcmNlbnQnLFxyXG5cclxuICAvLyBcclxuICBGT1JFQ0FTVF9QUkVESUNUSU9OX0lOVEVSVkFMX1VQUEVSID0gJ3ByZWRpY3Rpb25fdXBwZXInLFxyXG5cclxuICAvLyBcclxuICBGT1JFQ0FTVF9QUkVESUNUSU9OX0lOVEVSVkFMX0xPV0VSID0gJ3ByZWRpY3Rpb25fbG93ZXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBNYXJrTWFya2Vyc01vZGUge1xyXG5cclxuICAvLyBcclxuICBNTU1fQXV0byA9ICdtbW0tYXV0bycsXHJcblxyXG4gIC8vIFxyXG4gIE1NTV9BbGwgPSAnbW1tX2FsbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1NTV9Ob25lID0gJ21tbV9ub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgTU1NX0RlZmF1bHQgPSAnbW1tX2RlZmF1bHQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBQZXJjZW50TW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFBFUkNFTlRfQ0VMTF9JTl9QQU5FID0gJ2NlbGwtaW4tcGFuZScsXHJcblxyXG4gIC8vIFxyXG4gIFBFUkNFTlRfUk9XX0lOX1BBTkUgPSAncm93LWluLXBhbmUnLFxyXG5cclxuICAvLyBcclxuICBQRVJDRU5UX0NPTFVNTl9JTl9QQU5FID0gJ2NvbHVtbi1pbi1wYW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgUEVSQ0VOVF9QQU5FID0gJ3BhbmUnLFxyXG5cclxuICAvLyBcclxuICBQRVJDRU5UX1JPVyA9ICdyb3cnLFxyXG5cclxuICAvLyBcclxuICBQRVJDRU5UX0NPTFVNTiA9ICdjb2x1bW4nLFxyXG5cclxuICAvLyBcclxuICBQRVJDRU5UX1RBQkxFID0gJ3RhYmxlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU3BlY2lhbFZhbHVlc01vZGUge1xyXG5cclxuICAvLyBcclxuICBTUEVDSUFMX1ZBTFVFU19ISURFX0FORF9XQVJOID0gJ2hpZGUtYW5kLXdhcm4nLFxyXG5cclxuICAvLyBcclxuICBTUEVDSUFMX1ZBTFVFU19ISURFID0gJ2hpZGUnLFxyXG5cclxuICAvLyBcclxuICBTUEVDSUFMX1ZBTFVFU19ISURFX0JSRUFLX0xJTkVTID0gJ2hpZGUtYnJlYWstbGluZXMnLFxyXG5cclxuICAvLyBcclxuICBTUEVDSUFMX1ZBTFVFU19TSE9XID0gJ3Nob3cnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBMYXlvdXRUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTEFZT1VUX0NBUlRFU0lBTiA9ICdjYXJ0ZXNpYW4nLFxyXG5cclxuICAvLyBcclxuICBMQVlPVVRfREVGQVVMVCA9ICdkZWZhdWx0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2hlbGZUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU1RfTk9ORSA9ICdub25lLXNoZWxmJyxcclxuXHJcbiAgLy8gXHJcbiAgU1RfQ09MVU1OU19TSEVMRiA9ICdjb2x1bW5zLXNoZWxmJyxcclxuXHJcbiAgLy8gXHJcbiAgU1RfUk9XU19TSEVMRiA9ICdyb3dzLXNoZWxmJyxcclxuXHJcbiAgLy8gXHJcbiAgU1RfUEFHRVNfU0hFTEYgPSAncGFnZXMtc2hlbGYnLFxyXG5cclxuICAvLyBcclxuICBTVF9GSUxURVJfU0hFTEYgPSAnZmlsdGVyLXNoZWxmJyxcclxuXHJcbiAgLy8gXHJcbiAgU1RfSU1BR0VfU0hFTEYgPSAnaW1hZ2Utc2hlbGYnLFxyXG5cclxuICAvLyBcclxuICBTVF9NRUFTVVJFU19TSEVMRiA9ICdtZWFzdXJlcy1zaGVsZicsXHJcblxyXG4gIC8vIFxyXG4gIFNUX1NIT1dNRV9TSEVMRiA9ICdzaG93LW1lLXNoZWxmJyxcclxuXHJcbiAgLy8gXHJcbiAgU1RfRU5DT0RJTkdfU0hFTEYgPSAnZW5jb2Rpbmctc2hlbGYnLFxyXG5cclxuICAvLyBcclxuICBTVF9DTFVTVEVSX1NIRUxGID0gJ2NsdXN0ZXItc2hlbGYnLFxyXG5cclxuICAvLyBcclxuICBTVF9HRU9NRVRSWV9TSEVMRiA9ICdnZW9tZXRyeS1zaGVsZicsXHJcblxyXG4gIC8vIFxyXG4gIFNUX0VORCA9ICdlbmQtc2hlbGYnLFxyXG5cclxuICAvLyBcclxuICBTVF9GSU5BTCA9ICdmaW5hbC1zaGVsZidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFJlc3RyaWN0VHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFJUX0lOVEVSU0VDVCA9ICdydC1pbnRlcnNlY3Rpb24nLFxyXG5cclxuICAvLyBcclxuICBSVF9VTklPTiA9ICdydC11bmlvbidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFRvb2x0aXBNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgVE1fTk9ORSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgVE1fU1RJQ0tZID0gJ3N0aWNreScsXHJcblxyXG4gIC8vIFxyXG4gIFRNX1NNT09USCA9ICdzbW9vdGgnLFxyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQ29sdW1uR3JvdXBzIHtcclxuXHJcbiAgLy8gMHgwMVxyXG4gIENPTFNfSU5fT1VUUFVUID0gJ2NvbHMtaW4tb3V0cHV0JyxcclxuXHJcbiAgLy8gMHgwMlxyXG4gIENPTFNfSU5fRklMVEVSX1NIRUxGID0gJ2NvbHMtaW4tZmlsdGVyLXNoZWxmJyxcclxuXHJcbiAgLy8gMHgwNFxyXG4gIENPTFNfUkVGX0JZX0ZJTFRFUlMgPSAnY29scy1yZWYtYnktZmlsdGVycycsXHJcblxyXG4gIC8vIDB4MDhcclxuICBDT0xTX1JFRl9CWV9PTUVBU1VSRVMgPSAnY29scy1yZWYtYnktb21lYXN1cmVzJyxcclxuXHJcbiAgLy8gMHgxMFxyXG4gIENPTFNfUkVGX0JZX0pPSU5fTE9EID0gJ2NvbHMtcmVmLWJ5LWpvaW4tbG9kJyxcclxuXHJcbiAgLy8gMHgyMFxyXG4gIENPTFNfSElEREVOID0gJ2NvbHMtaGlkZGVuJyxcclxuXHJcbiAgLy8gMHg0MFxyXG4gIENPTFNfUkVGX0JZX1NPUlRTID0gJ2NvbHMtcmVmLWJ5LXNvcnRzJyxcclxuXHJcbiAgLy8gXHJcbiAgQ09MU19SRUZfQllfRklMVEVSU19PUl9TT1JUUyA9ICdjb2xzLXJlZi1ieS1maWx0ZXJzLW9yLXNvcnRzJyxcclxuXHJcbiAgLy8gXHJcbiAgQ09MU19PTl9TSEVMVkVTID0gJ2NvbHMtb24tc2hlbHZlcycsXHJcblxyXG4gIC8vIFxyXG4gIENPTFNfQUxMID0gJ2NvbHMtYWxsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQnV0dG9uc09wdGlvbiB7XHJcblxyXG4gIC8vIFxyXG4gIEJPX0hJREUgPSAnYnV0dG9ucy1oaWRlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2VsZWN0aW9uUmVsYXhhdGlvbk9wdGlvbiB7XHJcblxyXG4gIC8vIFxyXG4gIFNST19BTExPVyA9ICdzZWxlY3Rpb24tcmVsYXhhdGlvbi1hbGxvdycsXHJcblxyXG4gIC8vIFxyXG4gIFNST19ESVNBTExPVyA9ICdzZWxlY3Rpb24tcmVsYXhhdGlvbi1kaXNhbGxvdydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEVuY29kaW5nVHlwZSB7XHJcblxyXG4gIC8vIGEgdGV4dCBlbmNvZGluZ1xyXG4gIEVUX1RFWFQgPSAndGV4dC1lbmNvZGluZycsXHJcblxyXG4gIC8vIGEgY29sb3IgZW5jb2RpbmdcclxuICBFVF9DT0xPUiA9ICdjb2xvci1lbmNvZGluZycsXHJcblxyXG4gIC8vIGEgc2l6ZSBlbmNvZGluZ1xyXG4gIEVUX1NJWkUgPSAnc2l6ZS1lbmNvZGluZycsXHJcblxyXG4gIC8vIGEgc2hhcGUgZW5jb2RpbmdcclxuICBFVF9TSEFQRSA9ICdzaGFwZS1lbmNvZGluZycsXHJcblxyXG4gIC8vIGFuIGltYWdlIGVuY29kaW5nXHJcbiAgRVRfSU1BR0UgPSAnaW1hZ2UtZW5jb2RpbmcnLFxyXG5cclxuICAvLyBhIHNvcnQgKHBhdGgpIGVuY29kaW5nIChjdXJyZW50bHkgb25seSBmb3IgbGluZSBvciBwb2x5Z29uIGNoYXJ0cylcclxuICBFVF9TT1JUID0gJ3NvcnQtZW5jb2RpbmcnLFxyXG5cclxuICAvLyBhIHdlZGdlIHNpemUgKGFuZ2xlKSBlbmNvZGluZyAoY3VycmVudGx5IG9ubHkgZm9yIHBpZSBjaGFydHMpXHJcbiAgRVRfV0VER0VTSVpFID0gJ3dlZGdlLXNpemUtZW5jb2RpbmcnLFxyXG5cclxuICAvLyBhIGdlb21ldHJ5IGVuY29kaW5nXHJcbiAgRVRfR0VPTUVUUlkgPSAnZ2VvbWV0cnktZW5jb2RpbmcnLFxyXG5cclxuICAvLyBhIGxldmVsIG9mIGRldGFpbCBlbmNvZGluZ1xyXG4gIEVUX0xPRCA9ICdsZXZlbC1vZi1kZXRhaWwtZW5jb2RpbmcnLFxyXG5cclxuICAvLyBlbmNvZGluZyB1c2VkIGZvciB0aGUgZGF0YSBoaWdobGlnaHRlci9sZWdlbmQgbWVjaGFuaXNtXHJcbiAgRVRfSElHSExJR0hUID0gJ2hpZ2hsaWdodC1lbmNvZGluZycsXHJcblxyXG4gIC8vIGEgdG9vbHRpcCBlbmNvZGluZ1xyXG4gIEVUX1RPT0xUSVAgPSAndG9vbHRpcC1lbmNvZGluZycsXHJcblxyXG4gIC8vIGEgdGVtcG9yYXJ5IGxhYmVsIHBsYWNlZCBhYm92ZSBtYXJrcyBmb3IgdGhlIHRhYmxlIGNhbGMgZGlhbG9nXHJcbiAgRVRfUlVOTklOR09SREVSID0gJ3J1bm5pbmdvcmRlci1lbmNvZGluZycsXHJcblxyXG4gIC8vIHRoZSBudW1iZXIgb2YgZW5jb2RpbmdzLCB0aGlzIGlzIGludmFsaWQgaW5wdXQgZm9yIGFuIGVuY29kaW5nIHByZXNlbnRhdGlvbiBtb2RlbFxyXG4gIE5VTV9FTkNPRElOR1MgPSAnbnVtLWVuY29kaW5ncycsXHJcblxyXG4gIC8vIGFuIGludmFsaWQgZW5jb2RpbmdcclxuICBFVF9JTlZBTElEID0gJ2ludmFsaWQtZW5jb2RpbmcnXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIG9mIHZhbGlkIGhvcml6b250YWwgYWxpZ25tZW50cy5cclxuZXhwb3J0IGVudW0gTGFiZWxIQWxpZ25tZW50IHtcclxuXHJcbiAgLy8gXHJcbiAgTEhBX0xlZnQgPSAnaC1hbGlnbi1sZWZ0JyxcclxuXHJcbiAgLy8gXHJcbiAgTEhBX0NlbnRlciA9ICdoLWFsaWduLWNlbnRlcicsXHJcblxyXG4gIC8vIFxyXG4gIExIQV9SaWdodCA9ICdoLWFsaWduLXJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgTEhBX0F1dG9tYXRpYyA9ICdoLWFsaWduLWF1dG8nXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIG9mIHZhbGlkIHZlcnRpY2FsIGFsaWdubWVudHMuXHJcbmV4cG9ydCBlbnVtIExhYmVsVkFsaWdubWVudCB7XHJcblxyXG4gIC8vIFxyXG4gIExWQV9Cb3R0b20gPSAndi1hbGlnbi1ib3R0b20nLFxyXG5cclxuICAvLyBcclxuICBMVkFfQ2VudGVyID0gJ3YtYWxpZ24tY2VudGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgTFZBX1RvcCA9ICd2LWFsaWduLXRvcCcsXHJcblxyXG4gIC8vIFxyXG4gIExWQV9BdXRvbWF0aWMgPSAndi1hbGlnbi1hdXRvJ1xyXG59XHJcblxyXG4vLyBFbnVtZXJhdGlvbiBvZiB2YWxpZCBsYWJlbCBwb3NpdGlvbnMuXHJcbmV4cG9ydCBlbnVtIExhYmVsUG9zaXRpb24ge1xyXG5cclxuICAvLyBQb3NpdGlvbiBlYWNoIHRleHQgcnVuIHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIG9yaWdpbmFsIGJib3guICBVc2UgdGhlIG9yaWdpbmFsIGJib3ggYXMgdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIHRleHQgbWFyay4gIFVzZWQgZm9yIG5vbi1zdGFja2VkIE9PIHRleHQgbWFya3MuXHJcbiAgQ2VudGVySW5PcmlnaW5hbEJib3ggPSAnbGFiZWwtcG9zaXRpb24tY2VudGVyLWluLW9yaWdpbmFsLWJveCcsXHJcblxyXG4gIC8vIFBvc2l0aW9uIGVhY2ggdGV4dCBydW4gcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgbWVhc3VyZWQgYmJveC4gVXNlIHRoZSBtZWFzdXJlZCBiYm94IGFzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBsYWJlbC4gVXNlZCBmb3IgbGFiZWxzXHJcbiAgT3JpZ2luQXRMb3dlckxlZnQgPSAnbGFiZWwtcG9zaXRpb24tb3JpZ2luLWF0LWxvd2VyLWxlZnQnLFxyXG5cclxuICAvLyBQb3NpdGlvbiBlYWNoIHRleHQgcnVuIHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIG1lYXN1cmVkIGJib3guIFVzZSB0aGUgbWVhc3VyZWQgYmJveCBhcyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgdGV4dCBtYXJrLiBVc2VkIGZvciBtb3N0IHRleHQgbWFya3MuXHJcbiAgT3JpZ2luQXRDZW50ZXIgPSAnbGFiZWwtcG9zaXRpb24tb3JpZ2luLWF0LWNlbnRlcidcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gb2Ygd2F5cyB0byB1c2UgY29sb3IuICBWYWx1ZXMgY2FuIGJlIG9yJ2VkIHRvZ2V0aGVyIHRvIG1ha2UgYSBtYXNrIGZvciBhbGxvd2VkIG9wdGlvbnNcclxuZXhwb3J0IGVudW0gQ29sb3JNb2RlIHtcclxuXHJcbiAgLy8gQ29sb3IgdXNlciBzcGVjaWZpZWRcclxuICBDTFJNX1VzZXIgPSAnY2xybS11c2VyJyxcclxuXHJcbiAgLy8gQ29sb3Igc2VsZWN0ZWQgYXV0b21hdGljYWxseVxyXG4gIENMUk1fQXV0byA9ICdjbHJtLWF1dG8nLFxyXG5cclxuICAvLyBDb2xvciBtYXRjaGVzIG1hcmsgY29sb3JcclxuICBDTFJNX01hdGNoID0gJ2Nscm0tbWF0Y2gnLFxyXG5cclxuICAvLyBObyBjb2xvciAodHJhbnNwYXJlbnQgb3Igbm90IGRyYXduKVxyXG4gIENMUk1fTm9uZSA9ICdjbHJtLW5vbmUnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBNYXJrTGFiZWxzTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIE1MTV9BbGwgPSAnbWxtLWFsbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1MTV9TZWxlY3Rpb24gPSAnbWxtLXNlbGVjdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIE1MTV9IaWdobGlnaHQgPSAnbWxtLWhpZ2hsaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIE1MTV9MaW5lRW5kcyA9ICdtbG0tbGluZS1lbmRzJyxcclxuXHJcbiAgLy8gbWluL21heCBzZXR0aW5nXHJcbiAgTUxNX1JhbmdlID0gJ21sbS1yYW5nZScsXHJcblxyXG4gIC8vIG1vc3QgcmVjZW50IChvbmx5IHJlbGV2YW50IHdoZW4gZGF0ZSBmaWVsZCBpcyBpbiBwbGF5KVxyXG4gIE1MTV9Nb3N0UmVjZW50ID0gJ21sbS1tb3N0LXJlY2VudCcsXHJcblxyXG4gIC8vIC4uLnRoaXMgaXMgXCIgdmlydHVhbCBcIiAocnVudGltZSBvbmx5LCBub3Qgc2F2ZWQsIG5vdCBzaG93biBhcyBhIHVzZXIgc2V0dGluZ1xyXG4gIE1MTV9NdWx0aXBsZVZhbHVlcyA9ICdtbG0tbXVsdGlwbGUtdmFsdWVzJyxcclxuXHJcbiAgLy8gXHJcbiAgTUxNX0RlZmF1bHQgPSAnbWxtLWRlZmF1bHQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBNYXJrTGFiZWxzU2NvcGUge1xyXG5cclxuICAvLyBcclxuICBNTFNfVGFibGUgPSAnbWxzLXRhYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgTUxTX1BhbmUgPSAnbWxzLXBhbmUnLFxyXG5cclxuICAvLyBcclxuICBNTFNfQ2VsbCA9ICdtbHMtY2VsbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1MU19NdWx0aU1hcmsgPSAnbWxzLW11bHRpbWFyaycsXHJcblxyXG4gIC8vIC4uLnRoaXMgaXMgXCIgdmlydHVhbCBcIiAocnVudGltZSBvbmx5LCBub3Qgc2F2ZWQsIG5vdCBzaG93biBhcyBhIHVzZXIgc2V0dGluZylcclxuICBNTFNfTXVsdGlwbGVWYWx1ZXMgPSAnbWxzLW11bHRpcGxlLXZhbHVlcycsXHJcblxyXG4gIC8vIFxyXG4gIE1MU19EZWZhdWx0ID0gJ21scy1kZWZhdWx0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTWFya0xhYmVsc1Zpc2liaWxpdHkge1xyXG5cclxuICAvLyBcclxuICBNTFZfSGlkZGVuID0gJ21sdi1oaWRkZW4nLFxyXG5cclxuICAvLyBcclxuICBNTFZfVmlzaWJsZSA9ICdtbHYtdmlzaWJsZScsXHJcblxyXG4gIC8vIFxyXG4gIE1MVl9Vc2VDdXJyZW50ID0gJ21sdi11c2UtY3VycmVudCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFN0YWNraW5nTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFN0YWNraW5nT2ZmID0gJ29mZicsXHJcblxyXG4gIC8vIFxyXG4gIFN0YWNraW5nT24gPSAnb24nLFxyXG5cclxuICAvLyBcclxuICBTdGFja2luZ0F1dG8gPSAnYXV0bydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIE1hcmtBbGlnbm1lbnQge1xyXG5cclxuICAvLyBcclxuICBNYXJrQWxpZ25tZW50TGVmdCA9ICdtYXJrLWFsaWdubWVudC1sZWZ0JyxcclxuXHJcbiAgLy8gXHJcbiAgTWFya0FsaWdubWVudFJpZ2h0ID0gJ21hcmstYWxpZ25tZW50LXJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgTWFya0FsaWdubWVudENlbnRlciA9ICdtYXJrLWFsaWdubWVudC1jZW50ZXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBQYW5lTGFiZWxDb21wb3NpdGlvbiB7XHJcblxyXG4gIC8vIFxyXG4gIFBMQ19Ob25lID0gJ3BhbmUtbGFiZWwtY29tcG9zaXRpb24tbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIFBMQ19NaXhlZCA9ICdwYW5lLWxhYmVsLWNvbXBvc2l0aW9uLW1peGVkJyxcclxuXHJcbiAgLy8gXHJcbiAgUExDX0FsbCA9ICdwYW5lLWxhYmVsLWNvbXBvc2l0aW9uLWFsbCdcclxufVxyXG5cclxuLy8gVGhlIHVzZXItc3BlY2lmaWVkIG1hcmsgdHlwZSBvbiB0aGUgTWFya3MgQ2FyZFxyXG5leHBvcnQgZW51bSBQcmltaXRpdmVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUFRfQVVUT01BVElDID0gJ2F1dG9tYXRpYycsXHJcblxyXG4gIC8vIFxyXG4gIFBUX1RFWFQgPSAndGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIFBUX0lNQUdFID0gJ2ltYWdlJyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfU0hBUEUgPSAnc2hhcGUnLFxyXG5cclxuICAvLyBcclxuICBQVF9SRUNUQU5HTEUgPSAncmVjdGFuZ2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfQkFSID0gJ2JhcicsXHJcblxyXG4gIC8vIFxyXG4gIFBUX0dBTlRUID0gJ2dhbnR0JyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfU1FVQVJFID0gJ3NxdWFyZScsXHJcblxyXG4gIC8vIFxyXG4gIFBUX0NJUkNMRSA9ICdjaXJjbGUnLFxyXG5cclxuICAvLyBcclxuICBQVF9QT0xZTElORSA9ICdwb2x5bGluZScsXHJcblxyXG4gIC8vIGxpbmUgY2hhcnRcclxuICBQVF9MSU5FID0gJ2xpbmUnLFxyXG5cclxuICAvLyBcclxuICBQVF9QT0xZR09OID0gJ3BvbHlnb24nLFxyXG5cclxuICAvLyBhcmVhIGNoYXJ0XHJcbiAgUFRfQVJFQSA9ICdhcmVhJyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfUElFID0gJ3BpZScsXHJcblxyXG4gIC8vIFxyXG4gIFBUX01VTFRJUE9MWUdPTiA9ICdtdWx0aXBvbHlnb24nLFxyXG5cclxuICAvLyBOb3QgYW4gYWN0dWFsIHByaW1pdGl2ZSB0eXBlLiBUaGlzIGlzIGp1c3QgdXNlZCB0byBmbGFnIHRoZSBVSSB0aGF0IG11bHRpcGxlIHR5cGVzIGFyZSBpbiBwbGF5LlxyXG4gIFBUX01VTFRJUExFID0gJ211bHRpcGxlJyxcclxuXHJcbiAgLy8gdXNlZCBmb3IgbG9vcGluZyBvdmVyIGFsbCB2YWx1ZXNcclxuICBOVU1fUFJJTUlUSVZFUyA9ICdjb3VudCcsXHJcblxyXG4gIC8vIHVzZWQgdG8gZmxhZyBhbiB1bnNldCBvciBpbnZhbGlkIHN0YXRlXHJcbiAgUFRfSU5WQUxJRCA9ICdpbnZhbGlkJ1xyXG59XHJcblxyXG4vLyBEZWZpbmVzIHRoZSB3YXkgYSBnaXZlbiBwcmltaXRpdmUgYmVoYXZlcyBvbiBhIHZpeiAtIGZvciBpbnN0YW5jZSwgYSBQVF9DSVJDTEUgaXMgdHJlYXRlZCBhcyBhIHBvaW50LCB3aGlsZSBhIFBUX1BPTFlHT04gd291bGQgYmUgdHJlYXRlZCBhcyBhbiBhcmVhLlxyXG5leHBvcnQgZW51bSBNYXJrVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIE1UX1BPSU5UID0gJ3BvaW50JyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfTElORSA9ICdsaW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfQVJFQSA9ICdhcmVhJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfSU5WQUxJRCA9ICdpbnZhbGlkJ1xyXG59XHJcblxyXG4vLyBQYW5lQXhpcyBpcyB1c2VkIHRvIGRlc2NyaWJlIHdoaWNoIGF4aXMgb2YgYSBwYW5lIGlzIHRoZSBpbmRlcGVuZGVudCBheGlzLlxyXG5leHBvcnQgZW51bSBQYW5lQXhpcyB7XHJcblxyXG4gIC8vIFRoZSBpbmRlcGVuZGVudCBheGlzIGlzIGluZmVycmVkIGZyb20gb3RoZXIgcHJvcGVydGllcyBvZiB0aGUgcGFuZS5cclxuICBBWElTX0FVVE8gPSAnYXV0bycsXHJcblxyXG4gIC8vIFxyXG4gIEFYSVNfWCA9ICd4JyxcclxuXHJcbiAgLy8gXHJcbiAgQVhJU19ZID0gJ3knXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBSb3VuZGluZyB7XHJcblxyXG4gIC8vIFxyXG4gIFJvdW5kaW5nX05vbmUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIFJvdW5kaW5nX1NtYWxsID0gJ3NtYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgUm91bmRpbmdfTWVkaXVtID0gJ21lZGl1bScsXHJcblxyXG4gIC8vIFxyXG4gIFJvdW5kaW5nX0xhcmdlID0gJ2xhcmdlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTGluZUVuZCB7XHJcblxyXG4gIC8vIFxyXG4gIExpbmVFbmRfTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZUVuZF9BcnJvdyA9ICdhcnJvdycsXHJcblxyXG4gIC8vIFxyXG4gIExpbmVFbmRfT3BlbkFycm93ID0gJ29wZW4tYXJyb3cnLFxyXG5cclxuICAvLyBcclxuICBMaW5lRW5kX0RvdCA9ICdkb3QnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBMaW5lRW5kU2l6ZSB7XHJcblxyXG4gIC8vIFxyXG4gIExpbmVFbmRTaXplX1NtYWxsZXN0ID0gJ3NtYWxsZXN0JyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZUVuZFNpemVfU21hbGxlciA9ICdzbWFsbGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZUVuZFNpemVfU21hbGwgPSAnc21hbGwnLFxyXG5cclxuICAvLyBcclxuICBMaW5lRW5kU2l6ZV9NZWRpdW0gPSAnbWVkaXVtJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZUVuZFNpemVfTGFyZ2UgPSAnbGFyZ2UnLFxyXG5cclxuICAvLyBcclxuICBMaW5lRW5kU2l6ZV9MYXJnZXIgPSAnbGFyZ2VyJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZUVuZFNpemVfTGFyZ2VzdCA9ICdsYXJnZXN0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQm9keVR5cGUge1xyXG5cclxuICAvLyBcclxuICBCb2R5VHlwZV9Ob25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBCb2R5VHlwZV9Cb3ggPSAnYm94JyxcclxuXHJcbiAgLy8gXHJcbiAgQm9keVR5cGVfRWRnZSA9ICdlZGdlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU3R5bGVUaGVtZSB7XHJcblxyXG4gIC8vIFxyXG4gIHRoZW1lQ2xhc3NpYyA9ICdjbGFzc2ljJyxcclxuXHJcbiAgLy8gXHJcbiAgdGhlbWVNb2Rlcm4gPSAnbW9kZXJuJyxcclxuXHJcbiAgLy8gXHJcbiAgdGhlbWVDbGVhbiA9ICdjbGVhbicsXHJcblxyXG4gIC8vIFxyXG4gIHRoZW1lU21vb3RoID0gJ3Ntb290aCcsXHJcblxyXG4gIC8vIFxyXG4gIHRoZW1lQ3VzdG9tID0gJ2N1c3RvbSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEF4aXNGb2xkU3RhdGUge1xyXG5cclxuICAvLyBcclxuICBhZk5vbmUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIGFmRm9sZGVkID0gJ2ZvbGRlZCcsXHJcblxyXG4gIC8vIFxyXG4gIGFmU3luY2hyb25pemVkID0gJ3N5bmNocm9uaXplZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIExpbmVQYXR0ZXJuIHtcclxuXHJcbiAgLy8gXHJcbiAgTGluZVBhdHRlcm5Ob25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBMaW5lUGF0dGVyblNvbGlkID0gJ3NvbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZVBhdHRlcm5EYXNoZWQgPSAnZGFzaGVkJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZVBhdHRlcm5Eb3R0ZWQgPSAnZG90dGVkJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTGluZVZpc2liaWxpdHkge1xyXG5cclxuICAvLyBcclxuICBMaW5lVmlzaWJpbGl0eUF1dG8gPSAnYXV0b21hdGljJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZVZpc2liaWxpdHlPbiA9ICdvbicsXHJcblxyXG4gIC8vIFxyXG4gIExpbmVWaXNpYmlsaXR5T2ZmID0gJ29mZidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFN0eWxlc0xpbmVQYXR0ZXJuIHtcclxuXHJcbiAgLy8gXHJcbiAgU3R5bGVzTGluZVBhdHRlcm5Tb2xpZCA9ICdzb2xpZCcsXHJcblxyXG4gIC8vIFxyXG4gIFN0eWxlc0xpbmVQYXR0ZXJuRGFzaGVkID0gJ2Rhc2hlZCcsXHJcblxyXG4gIC8vIFxyXG4gIFN0eWxlc0xpbmVQYXR0ZXJuRG90dGVkID0gJ2RvdHRlZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIExpbmVDYXAge1xyXG5cclxuICAvLyBcclxuICBMaW5lQ2FwRmxhdCA9ICdmbGF0JyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZUNhcFNxdWFyZSA9ICdzcXVhcmUnLFxyXG5cclxuICAvLyBcclxuICBMaW5lQ2FwUm91bmQgPSAncm91bmQnLFxyXG5cclxuICAvLyBcclxuICBMaW5lQ2FwVHJpYW5nbGUgPSAndHJpYW5nbGUnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBMaW5lSm9pbiB7XHJcblxyXG4gIC8vIFxyXG4gIEJldmVsSm9pbiA9ICdiZXZlbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1pdGVySm9pbiA9ICdtaXRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFJvdW5kSm9pbiA9ICdyb3VuZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIExpbmVBbGlnbm1lbnQge1xyXG5cclxuICAvLyBcclxuICBBbGlnbm1lbnRDZW50ZXIgPSAnY2VudGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgQWxpZ25tZW50SW5zZXQgPSAnaW5zZXQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGaWxsTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIEZpbGxFdmVuT2RkID0gJ2V2ZW4tb2RkJyxcclxuXHJcbiAgLy8gXHJcbiAgRmlsbFdpbmRpbmcgPSAnd2luZGluZydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEJvcmRlclN0eWxlIHtcclxuXHJcbiAgLy8gbm9uZVxyXG4gIEJvcmRlclN0eWxlTm9uZSA9ICdicy1ub25lJyxcclxuXHJcbiAgLy8gaGlkZGVuXHJcbiAgQm9yZGVyU3R5bGVIaWRkZW4gPSAnYnMtaGlkZGVuJyxcclxuXHJcbiAgLy8gZG90dGVkXHJcbiAgQm9yZGVyU3R5bGVEb3R0ZWQgPSAnYnMtZG90dGVkJyxcclxuXHJcbiAgLy8gZGFzaGVkXHJcbiAgQm9yZGVyU3R5bGVEYXNoZWQgPSAnYnMtZGFzaGVkJyxcclxuXHJcbiAgLy8gc29saWRcclxuICBCb3JkZXJTdHlsZVNvbGlkID0gJ2JzLXNvbGlkJyxcclxuXHJcbiAgLy8gZG91YmxlXHJcbiAgQm9yZGVyU3R5bGVEb3VibGUgPSAnYnMtZG91YmxlJyxcclxuXHJcbiAgLy8gZ3Jvb3ZlXHJcbiAgQm9yZGVyU3R5bGVHcm9vdmUgPSAnYnMtZ3Jvb3ZlJyxcclxuXHJcbiAgLy8gcmlkZ2VcclxuICBCb3JkZXJTdHlsZVJpZGdlID0gJ2JzLXJpZGdlJyxcclxuXHJcbiAgLy8gaW5zZXRcclxuICBCb3JkZXJTdHlsZUluc2V0ID0gJ2JzLWluc2V0JyxcclxuXHJcbiAgLy8gb3V0c2V0XHJcbiAgQm9yZGVyU3R5bGVPdXRzZXQgPSAnYnMtb3V0c2V0JyxcclxuXHJcbiAgLy8gaW52YWxpZFxyXG4gIEJvcmRlclN0eWxlSW52YWxpZCA9ICdicy1pbnZhbGlkJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQ29sb3JQYWxldHRlVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIENvbG9yUGFsZXR0ZVJlZ3VsYXIgPSAnY29sb3ItcGFsZXR0ZS1yZWd1bGFyJyxcclxuXHJcbiAgLy8gXHJcbiAgQ29sb3JQYWxldHRlT3JkZXJlZERpdmVyZ2luZyA9ICdwYWxldHRlLW9yZGVyZWQtZGl2ZXJnaW5nJyxcclxuXHJcbiAgLy8gXHJcbiAgQ29sb3JQYWxldHRlT3JkZXJlZExpbmVhciA9ICdwYWxldHRlLW9yZGVyZWQtbGluZWFyJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gUGFsZXR0ZUZsYWdzIHtcclxuXHJcbiAgLy8gXHJcbiAgUGFsZXR0ZUZsYWdOb25lID0gJ3BhbGV0dGUtZmxhZy1ub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgUGFsZXR0ZUZsYWdDdXN0b20gPSAncGFsZXR0ZS1mbGFnLWN1c3RvbScsXHJcblxyXG4gIC8vIFxyXG4gIFBhbGV0dGVGbGFnTm90UXVhbnRpdGF0aXZlID0gJ3BhbGV0dGUtZmxhZy1ub3QtcXVhbnRpdGF0aXZlJyxcclxuXHJcbiAgLy8gXHJcbiAgUGFsZXR0ZUZsYWdOb3RDYXRlZ29yaWNhbCA9ICdwYWxldHRlLWZsYWctbm90LWNhdGVnb3JpY2FsJyxcclxuXHJcbiAgLy8gXHJcbiAgUGFsZXR0ZUZsYWdOb3RSZWZlcmVuY2VCYW5kID0gJ3BhbGV0dGUtZmxhZy1ub3QtcmVmZXJlbmNlLWJhbmQnLFxyXG5cclxuICAvLyBcclxuICBQYWxldHRlRmxhZ05vdEJveHBsb3QgPSAncGFsZXR0ZS1mbGFnLW5vdC1ib3hwbG90JyxcclxuXHJcbiAgLy8gXHJcbiAgUGFsZXR0ZUZsYWdOb3RGaWxsZWRNYXBMaWdodCA9ICdwYWxldHRlLWZsYWctbm90LWZpbGxlZC1tYXAtbGlnaHQnLFxyXG5cclxuICAvLyBcclxuICBQYWxldHRlRmxhZ05vdEZpbGxlZE1hcERhcmsgPSAncGFsZXR0ZS1mbGFnLW5vdC1maWxsZWQtbWFwLWRhcmsnLFxyXG5cclxuICAvLyBcclxuICBQYWxldHRlRmxhZ0xlZ2FjeSA9ICdwYWxldHRlLWZsYWctbGVnYWN5J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRGVmYXVsdFBhbGV0dGVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU21hbGxOb21pbmFsID0gJ3BhbGV0dGUtZGVmYXVsdC1zbWFsbC1ub21pbmFsJyxcclxuXHJcbiAgLy8gXHJcbiAgTGFyZ2VOb21pbmFsID0gJ3BhbGV0dGUtZGVmYXVsdC1sYXJnZS1ub21pbmFsJyxcclxuXHJcbiAgLy8gXHJcbiAgT3JkaW5hbCA9ICdwYWxldHRlLWRlZmF1bHQtb3JkaW5hbCcsXHJcblxyXG4gIC8vIFxyXG4gIFF1YW50aXRhdGl2ZVBvc2l0aXZlID0gJ3BhbGV0dGUtZGVmYXVsdC1xdWFudC1wb3MnLFxyXG5cclxuICAvLyBcclxuICBRdWFudGl0YXRpdmVOZWdhdGl2ZSA9ICdwYWxldHRlLWRlZmF1bHQtcXVhbnQtbmVnJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVhbnRpdGF0aXZlRGl2ZXJnaW5nID0gJ3BhbGV0dGUtZGVmYXVsdC1xdWFudC1kaXYnLFxyXG5cclxuICAvLyBcclxuICBRdWFudGl0YXRpdmVQb3NpdGl2ZUxpZ2h0ID0gJ3BhbGV0dGUtZGVmYXVsdC1xdWFudC1wb3MtbGlnaHQnLFxyXG5cclxuICAvLyBcclxuICBRdWFudGl0YXRpdmVOZWdhdGl2ZUxpZ2h0ID0gJ3BhbGV0dGUtZGVmYXVsdC1xdWFudC1uZWctbGlnaHQnLFxyXG5cclxuICAvLyBcclxuICBRdWFudGl0YXRpdmVEaXZlcmdpbmdMaWdodCA9ICdwYWxldHRlLWRlZmF1bHQtcXVhbnQtZGl2LWxpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgUXVhbnRpdGF0aXZlUG9zaXRpdmVBcmVhID0gJ3BhbGV0dGUtZGVmYXVsdC1xdWFudC1wb3MtYXJlYScsXHJcblxyXG4gIC8vIFxyXG4gIFF1YW50aXRhdGl2ZU5lZ2F0aXZlQXJlYSA9ICdwYWxldHRlLWRlZmF1bHQtcXVhbnQtbmVnLWFyZWEnLFxyXG5cclxuICAvLyBcclxuICBRdWFudGl0YXRpdmVEaXZlcmdpbmdBcmVhID0gJ3BhbGV0dGUtZGVmYXVsdC1xdWFudC1kaXYtYXJlYSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNob3dCb3VuZHMge1xyXG5cclxuICAvLyBcclxuICBCb3RoID0gJ3Nob3ctYm90aCcsXHJcblxyXG4gIC8vIFxyXG4gIFVwcGVyID0gJ3Nob3ctdXBwZXInLFxyXG5cclxuICAvLyBcclxuICBMb3dlciA9ICdzaG93LWxvd2VyJ1xyXG59XHJcblxyXG4vLyBTYW1wbGUgdnMuIHBvcHVsYXRpb24gc3RhbmRhcmQgZGV2aWF0aW9uXHJcbmV4cG9ydCBlbnVtIFN0RGV2VHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNhbXBsZSA9ICdzdGRldi1zYW1wbGUnLFxyXG5cclxuICAvLyBcclxuICBQb3B1bGF0aW9uID0gJ3N0ZGV2LXBvcHVsYXRpb24nXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBSZWZlcmVuY2VMaW5lRm9ybXVsYUdyb3VwIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZSA9ICdsaW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgQmFuZCA9ICdiYW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgRGlzdHJpYnV0aW9uID0gJ2Rpc3RyaWJ1dGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIEJveHBsb3QgPSAnYm94cGxvdCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFJlZmVyZW5jZUxpbmVTY29wZVR5cGUge1xyXG5cclxuICAvLyBcclxuICBQZXJDZWxsID0gJ3Blci1jZWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgUGVyUGFuZSA9ICdwZXItcGFuZScsXHJcblxyXG4gIC8vIFxyXG4gIFBlclRhYmxlID0gJ3Blci10YWJsZScsXHJcbn1cclxuXHJcbi8vIGhvdyBzaG91bGQgdGhlIGxpbmUgYmUgbGFiZWxlZFxyXG5leHBvcnQgZW51bSBSZWZlcmVuY2VMaW5lTGFiZWxUeXBlIHtcclxuXHJcbiAgLy8gbm8gbGFiZWxcclxuICBOb25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBhbiBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBsYWJlbFxyXG4gIEF1dG9tYXRpYyA9ICdhdXRvbWF0aWMnLFxyXG5cclxuICAvLyBcclxuICBWYWx1ZSA9ICd2YWx1ZScsXHJcblxyXG4gIC8vIFxyXG4gIENvbXB1dGF0aW9uID0gJ2NvbXB1dGF0aW9uJyxcclxuXHJcbiAgLy8gYSB1c2VyIGRlZmluZWQgbGFiZWxcclxuICBDdXN0b20gPSAnY3VzdG9tJyxcclxufVxyXG5cclxuLy8gaG93IHNob3VsZCB0aGUgbGluZSBiZSBjb21wdXRlZFxyXG5leHBvcnQgZW51bSBSZWZlcmVuY2VMaW5lRm9ybXVsYVR5cGUge1xyXG5cclxuICAvLyBhIHVzZXIgc3BlY2lmaWVkIGNvbnN0YW50IHZhbHVlXHJcbiAgQ29uc3RhbnQgPSAnY29uc3RhbnQnLFxyXG5cclxuICAvLyBcclxuICBUb3RhbCA9ICd0b3RhbCcsXHJcblxyXG4gIC8vIHRvdGFsIG9mIGFsbCB2YWx1ZXMgYXQgdGhlIGdpdmVuIHNjb3BlIDwtIGlzIHRoaXMgY29ycmVjdD8gbG9va3MgbGlrZSBjb21tZW50IGZyb20gRm9ybXVsYVRvdGFsXHJcbiAgU3VtID0gJ3N1bScsXHJcblxyXG4gIC8vIG1pbmltdW0gdmFsdWUgaW4gdGhlIHNjb3BlXHJcbiAgTWluID0gJ21pbicsXHJcblxyXG4gIC8vIG1heGltdW0gdmFsdWUgaW4gdGhlIHNjb3BlXHJcbiAgTWF4ID0gJ21heCcsXHJcblxyXG4gIC8vIGF2ZXJhZ2UgdmFsdWUgaW4gdGhlIHNjb3BlXHJcbiAgQXZlcmFnZSA9ICdhdmVyYWdlJyxcclxuXHJcbiAgLy8gbWVkaWFuIHZhbHVlIGluIHRoZSBzY29wZVxyXG4gIE1lZGlhbiA9ICdtZWRpYW4nLFxyXG5cclxuICAvLyB0aGUgbiBxdWFudGlsZXMgdmFsdWVzIGluIHRoZSBzY29wZVxyXG4gIFF1YW50aWxlcyA9ICdxdWFudGlsZXMnLFxyXG5cclxuICAvLyBhIGdpdmVuIHBlcmNlbnRpbGUgaW4gdGhlIHNjb3BlXHJcbiAgUGVyY2VudGlsZSA9ICdwZXJjZW50aWxlJyxcclxuXHJcbiAgLy8gbWVhbiArLSBzdGFuZGFyZCBkZXZpYXRpb25cclxuICBTdGFuZGFyZERldmlhdGlvbiA9ICdzdGFuZGFyZC1kZXZpYXRpb24nLFxyXG5cclxuICAvLyBhIGdpdmVuIGNvbmZpZGVuY2UgaW50ZXJ2YWwgYXJvdW5kIHRoZSBtZWFuXHJcbiAgQ29uZmlkZW5jZUludGVydmFsID0gJ2NvbmZpZGVuY2UtaW50ZXJ2YWwnLFxyXG5cclxuICAvLyBcclxuICBNZWRpYW5Db25maWRlbmNlSW50ZXJ2YWwgPSAnbWVkaWFuLWNvbmZpZGVuY2UtaW50ZXJ2YWwnXHJcbn1cclxuXHJcbi8vIExpbmUgb3IgY29uZmlkZW5jZSBpbnRlcnZhbCBvciBib3RoXHJcbmV4cG9ydCBlbnVtIFJlZmVyZW5jZUxpbmVDb25maWRlbmNlSW50ZXJ2YWxTdGF0ZSB7XHJcblxyXG4gIC8vIGRpc3BsYXkgbGluZSBvbmx5XHJcbiAgTGluZU9ubHkgPSAnbGluZS1vbmx5JyxcclxuXHJcbiAgLy8gZGlzcGxheSB0aGUgbGluZSBhbmQgYSBjb25maWRlbmNlIGludGVydmFsXHJcbiAgTGluZUFuZENvbmZpZGVuY2VJbnRlcnZhbCA9ICdsaW5lLWFuZC1pbnRlcnZhbCcsXHJcblxyXG4gIC8vIGRpc3BsYXkgY29uZmlkZW5jZSBpbnRlcnZhbCBvbmx5XHJcbiAgQ29uZmlkZW5jZUludGVydmFsT25seSA9ICdpbnRlcnZhbC1vbmx5J1xyXG59XHJcblxyXG4vLyB0eXBlIG9mIGRpc3RyaWJ1dGlvbi4gaS5lLiBQZXJjZW50YWdlLCBQZXJjZW50aWxlLCBRdWFudGlsZSwgYW5kIFN0YW5kYXJkIERldmlhdGlvblxyXG5leHBvcnQgZW51bSBSZWZlcmVuY2VMaW5lRGlzdHJpYnV0aW9uVHlwZSB7XHJcblxyXG4gIC8vIGRpc3RyaWJ1dGlvbiB0eXBlIHBlcmNlbnRhZ2VcclxuICBQZXJjZW50YWdlcyA9ICdwZXJjZW50YWdlcycsXHJcblxyXG4gIC8vIGRpc3RyaWJ1dGlvbiB0eXBlIHBlcmNlbnRpbGVcclxuICBQZXJjZW50aWxlcyA9ICdwZXJjZW50aWxlcycsXHJcblxyXG4gIC8vIGRpc3RyaWJ1dGlvbiB0eXBlIHF1YW50aWxlXHJcbiAgUXVhbnRpbGVzID0gJ3F1YW50aWxlcycsXHJcblxyXG4gIC8vIGRpc3RyaWJ1dGlvbiB0eXBlIHN0YW5kYXJkIGRldmlhdGlvblxyXG4gIFN0YW5kYXJkRGV2aWF0aW9uID0gJ3N0YW5kYXJkLWRldmlhdGlvbidcclxufVxyXG5cclxuLy8gdGhlIGtpbmQgb2YgTE9EIGNhbGMgdG8gdXNlIGZvciBhIGdpdmVuIHJlZmVyZW5jZSBsaW5lXHJcbmV4cG9ydCBlbnVtIFJlZmVyZW5jZUxpbmVMT0RDYWxjVHlwZSB7XHJcblxyXG4gIC8vIENyZWF0ZSBhIGZvcm11bGEgdXNpbmcgYSBGSVhFRC1saWtlIGxldmVsLW9mLWRldGFpbCBjYWxjdWxhdGlvbiwgdG8gd2hpY2ggc2hlZXQgZmlsdGVycyBhcHBseSwgdGhhdCB3aWxsIGdvIG9udG8gYSBzcGVjaWZpYyBzaGVldFxyXG4gIE1lYXN1cmVGb3JtdWxhID0gJ21lYXN1cmUtZm9ybXVsYScsXHJcblxyXG4gIC8vIENyZWF0ZSBhIGJvb2xlYW4gZm9ybXVsYSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgZmlsdGVyXHJcbiAgQm9vbGVhbkZpbHRlciA9ICdib29sZWFuLWZpbHRlcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEJveHBsb3RXaGlza2VyVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFN0YW5kYXJkID0gJ3N0YW5kYXJkJyxcclxuXHJcbiAgLy8gXHJcbiAgTWlubWF4ID0gJ21pbm1heCdcclxufVxyXG5cclxuLy8gY2F0ZWdvcmllcyBvZiBjb25uZWN0aW9uIHR5cGVzIGRpc3BsYXllZCBieSB0aGUgY29ubmVjdGlvbiBVSVxyXG5leHBvcnQgZW51bSBDb25uZWN0aW9uVHlwZUNhdGVnb3J5IHtcclxuXHJcbiAgLy8gc3RhbmRhcmQgZGF0YWJhc2VcclxuICBDVENfRGF0YWJhc2UgPSAnZGF0YWJhc2UnLFxyXG5cclxuICAvLyAnTW9yZSBJdGVtcyAuLi4nIG1ldGEgaXRlbVxyXG4gIENUQ19Nb3JlID0gJ21vcmUnLFxyXG5cclxuICAvLyBPdGhlciBmaWxlIHR5cGVzXHJcbiAgQ1RDX090aGVyID0gJ290aGVyJyxcclxuXHJcbiAgLy8gaW52YWxpZCBjb25uZWN0aW9uIGNhdGVnb3J5XHJcbiAgQ1RDX0ludmFsaWQgPSAnaW52YWxpZCdcclxufVxyXG5cclxuLy8gYSBsb2dpY2FsIGdyb3VwaW5nIG9mIGNvbm5lY3Rpb24gdHlwZXMgZGlzcGxheWVkIGJ5IHRoZSBjb25uZWN0aW9uIFVJXHJcbmV4cG9ydCBlbnVtIENvbm5lY3Rpb25UeXBlR3JvdXAge1xyXG5cclxuICAvLyBpbiBhIGZpbGVcclxuICBDVEdfRmlsZSA9ICdmaWxlJyxcclxuXHJcbiAgLy8gb24gYSBzZXJ2ZXJcclxuICBDVEdfU2VydmVyID0gJ3NlcnZlcicsXHJcblxyXG4gIC8vIG9uIGEgcmVjZW50IHNlcnZlclxyXG4gIENUR19NcnVTZXJ2ZXIgPSAnbXJ1LXNlcnZlcicsXHJcblxyXG4gIC8vIGludmFsaWQgZ3JvdXBcclxuICBDVEdfSW52YWxpZCA9ICdpbnZhbGlkJ1xyXG59XHJcblxyXG4vLyBUaGUgdHlwZSBvZiBtZXRhZGF0YSBhIGNvbHVtbiBjb250YWluc1xyXG5leHBvcnQgZW51bSBDdWJlTWV0YWRhdGFDYXRlZ29yeSB7XHJcblxyXG4gIC8vIGN1YmUncyBuYW1lXHJcbiAgQ01DX05hbWUgPSAnbmFtZScsXHJcblxyXG4gIC8vIGN1YmUncyBkZXNjcmlwdGlvblxyXG4gIENNQ19EZXNjcmlwdGlvbiA9ICdkZXNjcmlwdGlvbicsXHJcblxyXG4gIC8vIGN1YmUncyBsYXN0IHVwZGF0ZWQgdGltZXN0YW1wXHJcbiAgQ01DX0xhc3RVcGRhdGVkID0gJ2xhc3QtdXBkYXRlZCcsXHJcblxyXG4gIC8vIGludmFsaWRcclxuICBDTUNfSW52YWxpZCA9ICdpbnZhbGlkJ1xyXG59XHJcblxyXG4vLyBUaGUgdHlwZSBvZiB3aWRnZXQgdG8gZGlzcGxheSB0byB0aGUgdXNlciB3aGVuIHRoZXkgYXJlIHNwZWNpZnlpbmcgY29ubmVjdGlvbiBpbmZvXHJcbmV4cG9ydCBlbnVtIENvbm5lY3Rpb25XaWRnZXRUeXBlIHtcclxuXHJcbiAgLy8gc2hvdyB0aGUgam9pbiBhcmVhXHJcbiAgQ1dUX0pvaW5BcmVhID0gJ2pvaW4tYXJlYScsXHJcblxyXG4gIC8vIHNob3cgdGhlIGN1YmUgc2VsZWN0aW9uIHVpXHJcbiAgQ1dUX0N1YmVTZWxlY3Rpb24gPSAnY3ViZS1zZWxlY3Rpb24nLFxyXG5cclxuICAvLyBzaG93IHRoZSBnb29nbGUgYW5hbHl0aWNzIHVpXHJcbiAgQ1dUX0dvb2dsZUFuYWx5dGljcyA9ICdnb29nbGUtYW5hbHl0aWNzJyxcclxuXHJcbiAgLy8gc2hvdyB0aGUgdGFibGVhdSBzZXJ2ZXIgdWlcclxuICBDV1RfVGFibGVhdVNlcnZlciA9ICd0YWJsZWF1LXNlcnZlcicsXHJcblxyXG4gIC8vIGRvIG5vdCBzaG93IGFueSBjb25uZWN0aW9uIHdpZGdldFxyXG4gIENXVF9Ob1dpZGdldCA9ICduby13aWRnZXQnLFxyXG5cclxuICAvLyBpbnZhbGlkXHJcbiAgQ1dUX0ludmFsaWQgPSAnaW52YWxpZCdcclxufVxyXG5cclxuLy8gVGhlIHR5cGUgb2YgZ29vZ2xlIGFuYWx5dGljcyBiYXNpYyBpbmZvXHJcbmV4cG9ydCBlbnVtIEdvb2dsZUJhc2ljSW5mb1R5cGUge1xyXG5cclxuICAvLyBnb29nbGUgYW5hbHl0aWNzIGFjY291bnRcclxuICBHQV9BY2NvdW50ID0gJ2dhLWFjY291bnQnLFxyXG5cclxuICAvLyBnb29nbGUgYW5hbHl0aWNzIHByb3BlcnR5XHJcbiAgR0FfUHJvcGVydHkgPSAnZ2EtcHJvcGVydHknLFxyXG5cclxuICAvLyBnb29nbGUgYW5hbHl0aWNzIHZpZXdcclxuICBHQV9WaWV3ID0gJ2dhLXZpZXcnLFxyXG5cclxuICAvLyBpbnZhbGlkXHJcbiAgR0FfSW52YWxpZCA9ICdpbnZhbGlkJ1xyXG59XHJcblxyXG4vLyBUaGUgd2F5IGluIHdoaWNoIGEgcGllY2Ugb2YgY29ubmVjdGlvbiBpbmZvcm1hdGlvbiBpcyBzcGVjaWZpZWRcclxuZXhwb3J0IGVudW0gQ29ubmVjdGlvblNwZWNpZmljYXRpb25UeXBlIHtcclxuXHJcbiAgLy8gVXNlcyBhIGNvbWJvIGJveFxyXG4gIENTVF9Db21ib0JveCA9ICdjb21iby1ib3gnLFxyXG5cclxuICAvLyBVc2VzIGEgbGluZSBlZGl0XHJcbiAgQ1NUX0xpbmVFZGl0ID0gJ2xpbmUtZWRpdCcsXHJcblxyXG4gIC8vIFVzZXMgYSBsaW5lIGVkaXQgd2l0aCBhIGJyb3dzZSBidXR0b24gbmV4dCB0byBpdFxyXG4gIENTVF9MaW5lRWRpdEJyb3dzZSA9ICdsaW5lLWVkaXQtYnJvd3NlJyxcclxuXHJcbiAgLy8gaW52YWxpZFxyXG4gIENTVF9JbnZhbGlkID0gJ2ludmFsaWQnXHJcbn1cclxuXHJcbi8vIEdBIERhdGUgUmFuZ2VcclxuZXhwb3J0IGVudW0gRGF0ZVJhbmdlIHtcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlRmlyc3QgPSAnZGF0ZS1yYW5nZS1maXJzdCcsXHJcblxyXG4gIC8vIFxyXG4gIERhdGVSYW5nZUxhc3QzMERheXMgPSAnZGF0ZS1yYW5nZS1sYXN0MzAnLFxyXG5cclxuICAvLyBcclxuICBEYXRlUmFuZ2VUb2RheSA9ICdkYXRlLXJhbmdlLXRvZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlWWVzdGVyZGF5ID0gJ2RhdGUtcmFuZ2UteWVzdGVyZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlTGFzdFdlZWsgPSAnZGF0ZS1yYW5nZS1sYXN0LXdlZWsnLFxyXG5cclxuICAvLyBcclxuICBEYXRlUmFuZ2VMYXN0TW9udGggPSAnZGF0ZS1yYW5nZS1sYXN0LW1vbnRoJyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlTGFzdFllYXIgPSAnZGF0ZS1yYW5nZS1sYXN0LXllYXInLFxyXG5cclxuICAvLyBcclxuICBEYXRlUmFuZ2VUaGlzV2Vla1RvWWVzdGVyZGF5ID0gJ2RhdGUtcmFuZ2UtdGhpcy13ZWVrLXRvLXllc3RlcmRheScsXHJcblxyXG4gIC8vIFxyXG4gIERhdGVSYW5nZVRoaXNNb250aFRvWWVzdGVyZGF5ID0gJ2RhdGUtcmFuZ2UtdGhpcy1tb250aC10by15ZXN0ZXJkYXknLFxyXG5cclxuICAvLyBcclxuICBEYXRlUmFuZ2VUaGlzWWVhclRvWWVzdGVyZGF5ID0gJ2RhdGUtcmFuZ2UtdGhpcy15ZWFyLXRvLXllc3RlcmRheScsXHJcblxyXG4gIC8vIFxyXG4gIERhdGVSYW5nZUxhc3RXZWVrVG9ZZXN0ZXJkYXkgPSAnZGF0ZS1yYW5nZS1sYXN0LXdlZWstdG8teWVzdGVyZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlTGFzdE1vbnRoVG9ZZXN0ZXJkYXkgPSAnZGF0ZS1yYW5nZS1sYXN0LW1vbnRoLXRvLXllc3RlcmRheScsXHJcblxyXG4gIC8vIFxyXG4gIERhdGVSYW5nZUxhc3RZZWFyVG9ZZXN0ZXJkYXkgPSAnZGF0ZS1yYW5nZS1sYXN0LXllYXItdG8teWVzdGVyZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlRml4ZWRSYW5nZSA9ICdkYXRlLXJhbmdlLWZpeGVkLXJhbmdlJyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlRml4ZWRTdGFydCA9ICdkYXRlLXJhbmdlLWZpeGVkLXN0YXJ0JyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZVJhbmdlQ291bnQgPSAnZGF0ZS1yYW5nZS1jb3VudCdcclxufVxyXG5cclxuLy8gU3BlY2lmaWVzIHRoZSB0eXBlIG9mIHdpZGdldCB0byBzaG93IGluIENvbm5lY3RTZXJ2ZXJXaWRnZXRcclxuZXhwb3J0IGVudW0gQ29ubmVjdFNlcnZlcldpZGdldFR5cGUge1xyXG5cclxuICAvLyBpbnZhbGlkXHJcbiAgQ1NXVF9JbnZhbGlkID0gJ2ludmFsaWQnLFxyXG5cclxuICAvLyBtaWNyb3NvZnQgYWNjZXNzXHJcbiAgQ1NXVF9BY2Nlc3MgPSAnYWNjZXNzJyxcclxuXHJcbiAgLy8gZ2VuZXJpYyBvZGJjXHJcbiAgQ1NXVF9PREJDID0gJ29kYmMnLFxyXG5cclxuICAvLyBjdWJlc1xyXG4gIENTV1RfQ3ViZSA9ICdjdWJlJyxcclxuXHJcbiAgLy8gcmVsYXRpb25hbCBkYXRhIHNvdXJjZXNcclxuICBDU1dUX1JlbGF0aW9uYWwgPSAncmVsYXRpb25hbCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEF1dGhlbnRpY2F0aW9uRW51bXNNb2RlIHtcclxuXHJcbiAgLy8gbm8gYXV0aGVudGljYXRpb24gd2lkZ2V0XHJcbiAgQXV0aE1vZGVOb25lID0gJ2F1dGgtbW9kZS1ub25lJyxcclxuXHJcbiAgLy8gdXNlcm5hbWUgYW5kIHBhc3N3b3JkXHJcbiAgQXV0aE1vZGVCYXNpYyA9ICdhdXRoLW1vZGUtYmFzaWMnLFxyXG5cclxuICAvLyB1c2VybmFtZSBhbmQgcGFzc3dvcmQgY2FuIGJlIGJsYW5rXHJcbiAgQXV0aE1vZGVCYXNpY05vVmFsaWRhdGVGaWVsZHMgPSAnYXV0aC1tb2RlLWJhc2ljLW5vLXZhbGlkYXRlLWZpZWxkcycsXHJcblxyXG4gIC8vIG9ubHkgdXNlcm5hbWVcclxuICBBdXRoTW9kZUJhc2ljVXNlck5hbWVPbmx5ID0gJ2F1dGgtbW9kZS1iYXNpYy11c2VybmFtZS1vbmx5JyxcclxuXHJcbiAgLy8gYXdzIGFjY2VzcyBrZXkgYW5kIHNlY3JldCBJRFxyXG4gIEF1dGhNb2RlQmFzaWNBV1MgPSAnYXV0aC1tb2RlLWJhc2ljLWF3cycsXHJcblxyXG4gIC8vIHVzZXJuYW1lLCBwYXNzd29yZCwgYW5kIGEgbGlzdCBvZiBBdXRoT3B0aW9ucyB3aXRoIHJhZGlvIGJ1dHRvbnNcclxuICBBdXRoTW9kZVJhZGlvID0gJ2F1dGgtbW9kZS1yYWRpbycsXHJcblxyXG4gIC8vIExpa2UgQXV0aE1vZGVSYWRpbywgYnV0IGVuYWJsZSB1c2VybmFtZS9wYXNzd29yZCBldmVuIGZvciBpbnRlZ3JhdGVkIGF1dGhcclxuICBBdXRoTW9kZVJhZGlvVW5pbmRlbnRlZCA9ICdhdXRoLW1vZGUtcmFkaW8tdW5pbmRlbnRlZCcsXHJcblxyXG4gIC8vIHVzZXJuYW1lLCBwYXNzd29yZCwgYW5kIGEgbGlzdCBvZiBBdXRoT3B0aW9ucyB3aXRoIGEgY29tYm9ib3hcclxuICBBdXRoTW9kZUNvbWJvQm94ID0gJ2F1dGgtbW9kZS1jb21ib2JveCcsXHJcblxyXG4gIC8vIExpa2UgQXV0aE1vZGVDb21ib2JveCwgYnV0IHdpdGggb3B0aW9uIG5vdCByZXF1aXJpbmcgdXNlcm5hbWUvcGFzc3dvcmRcclxuICBBdXRoTW9kZUNvbWJvQm94SW50ZWdyYXRlZCA9ICdhdXRoLW1vZGUtY29tYm9ib3gtaW50ZWdyYXRlZCcsXHJcblxyXG4gIC8vIGRyaXZlciwgYXV0aGVudGljYXRpb24sIHVzZXJuYW1lLCByZWFsbSwgZXRjXHJcbiAgQXV0aE1vZGVIaXZlID0gJ2F1dGgtbW9kZS1oaXZlJyxcclxuXHJcbiAgLy8gbm9uZSwgYXp1cmUgbWFya2V0cGxhY2UgYWNjb3VudCwgZXhwbGljaXRcclxuICBBdXRoTW9kZU9EYXRhID0gJ2F1dGgtbW9kZS1vZGF0YScsXHJcblxyXG4gIC8vIGVkaXRpb24sIGF1dGhlbnRpY2F0aW9uLCBzc28gZG9tYWluLCBldGNcclxuICBBdXRoTW9kZVNoYXJlUG9pbnQgPSAnYXV0aC1tb2RlLXNoYXJlcG9pbnQnLFxyXG5cclxuICAvLyB1c2VybmFtZSwgcGFzc3dvcmQsIGNsaWVudCwgJiBsYW5ndWFnZVxyXG4gIEF1dGhNb2RlU0FQQlcgPSAnYXV0aC1tb2RlLXNhcGJ3JyxcclxuXHJcbiAgLy8gQWJpbGl0eSB0byBzd2l0Y2ggYmV0d2VlbiB0d28gZGlmZmVyZW50IGF1dGggbW9kZXMgZWFjaCBpbiB0aGVpciBvd24gbW9kYWwgZGlhbG9ncyAoYmFzaWMgYW5kIG9hdXRoKVxyXG4gIEF1dGhNb2RlU3dpdGNoTW9kYWwgPSAnYXV0aC1tb2RlLXN3aXRjaC1tb2RhbCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEF1dGhlbnRpY2F0aW9uRW51bXNSZWNvbm5lY3RNb2RlIHtcclxuXHJcbiAgLy8gQXV0aCBub3QgbmVlZGVkIGZvciByZWNvbm5lY3RcclxuICBSZWNvbm5lY3RNb2RlTm9uZSA9ICdyZWNvbm5lY3QtbW9kZS1ub25lJyxcclxuXHJcbiAgLy8gVXNlcm5hbWUgYW5kIHBhc3N3b3JkXHJcbiAgUmVjb25uZWN0TW9kZUJhc2ljID0gJ3JlY29ubmVjdC1tb2RlLWJhc2ljJyxcclxuXHJcbiAgLy8gQWNjZXNzIGZpbGVcclxuICBSZWNvbm5lY3RNb2RlQWNjZXNzID0gJ3JlY29ubmVjdC1tb2RlLWFjY2VzcycsXHJcblxyXG4gIC8vIE1pY3Jvc29mdCBBenVyZSBEYXRhIE1hcmtldCAoT0RhdGEpXHJcbiAgUmVjb25uZWN0TW9kZURhdGFNYXJrZXQgPSAncmVjb25uZWN0LW1vZGUtZGF0YS1tYXJrZXQnLFxyXG5cclxuICAvLyBHb29nbGUgT0F1dGhcclxuICBSZWNvbm5lY3RNb2RlR29vZ2xlT0F1dGggPSAncmVjb25uZWN0LW1vZGUtZ29vZ2xlLW9hdXRoJyxcclxuXHJcbiAgLy8gU2FsZXNmb3JjZU9BdXRoLCB3aXRoIHRoZSBvcHRpb24gb2YgdXNlcm5hbWUvcGFzc3dvcmQgYXV0aFxyXG4gIFJlY29ubmVjdE1vZGVTYWxlc2ZvcmNlT0F1dGggPSAncmVjb25uZWN0LW1vZGUtc2FsZXNmb3JjZS1vYXV0aCcsXHJcblxyXG4gIC8vIFdlYiBkYXRhIGNvbm5lY3RvclxyXG4gIFJlY29ubmVjdE1vZGVXZWJEYXRhID0gJ3JlY29ubmVjdC1tb2RlLXdlYi1kYXRhJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQXV0aGVudGljYXRpb25FbnVtc0F1dGhPcHRpb24ge1xyXG5cclxuICAvLyBGSVJTVFxyXG4gIEF1dGhFeHBsaWNpdCA9ICdhdXRoLW9wdGlvbi1leHBsaWNpdCcsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhFeHBsaWNpdFVuaW5kZW50ZWQgPSAnYXV0aC1vcHRpb24tZXhwbGljaXQtdW5pbmRlbnRlZCcsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhVc2VXaW5kb3dzID0gJ2F1dGgtb3B0aW9uLXVzZS13aW5kb3dzJyxcclxuXHJcbiAgLy8gXHJcbiAgQXV0aFVzZVdpbmRvd3NQcmVmZXJyZWQgPSAnYXV0aC1vcHRpb24td2luZG93cy1wcmVmZXJyZWQnLFxyXG5cclxuICAvLyBcclxuICBBdXRoVGVyYWRhdGEgPSAnYXV0aC1vcHRpb24tdGVyYWRhdGEnLFxyXG5cclxuICAvLyBcclxuICBBdXRoTERBUCA9ICdhdXRoLW9wdGlvbi1sZGFwJyxcclxuXHJcbiAgLy8gXHJcbiAgQXV0aFZpcnR1YWxOb2RlID0gJ2F1dGgtb3B0aW9uLXZpcnR1YWwtbm9kZScsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhPRGF0YUFjY291bnQgPSAnYXV0aC1vcHRpb24tb2RhdGEnLFxyXG5cclxuICAvLyBcclxuICBBdXRoTm9uZSA9ICdhdXRoLW9wdGlvbi1ub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgQXV0aEtlcmJlcm9zID0gJ2F1dGgtb3B0aW9uLWtlcmJlcm9zJyxcclxuXHJcbiAgLy8gSW50cm9kdWNlZCBmb3IgS2VyYmVyb3Mgd2l0aCBmYWxsYmFjaywgcmVjb2duaXppbmcgdGhhdCB0aGUgZGIgbWF5IG9yIG1heSBub3QgYmUgb24gV2luZG93c1xyXG4gIEF1dGhJbnRlZ3JhdGVkID0gJ2F1dGgtb3B0aW9uLWludGVncmF0ZWQnLFxyXG5cclxuICAvLyBcclxuICBBdXRoVXNlcm5hbWUgPSAnYXV0aC1vcHRpb24tdXNlcm5hbWUnLFxyXG5cclxuICAvLyBcclxuICBBdXRoVXNlcm5hbWVBbmRQYXNzd29yZCA9ICdhdXRoLW9wdGlvbi11c2VybmFtZS1hbmQtcGFzc3dvcmQnLFxyXG5cclxuICAvLyBcclxuICBBdXRoU1NMID0gJ2F1dGgtb3B0aW9uLXNzbCcsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhIRElFbXVsYXRvciA9ICdhdXRoLWhkaS1lbXVsYXRvcicsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhIRElTZXJ2aWNlID0gJ2F1dGgtaGRpLXNlcnZpY2UnLFxyXG5cclxuICAvLyBcclxuICBBdXRoSFRUUCA9ICdhdXRoLWh0dHAnLFxyXG5cclxuICAvLyBcclxuICBBdXRoSFRUUFMgPSAnYXV0aC1odHRwcycsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhBY2Nlc3NOb1NlY3VyaXR5ID0gJ2F1dGgtb3B0aW9uLWFjY2Vzcy1ubycsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhBY2Nlc3NZZXNTZWN1cml0eSA9ICdhdXRoLW9wdGlvbi1hY2Nlc3MteWVzJyxcclxuXHJcbiAgLy8gXHJcbiAgQXV0aE9BdXRoID0gJ2F1dGgtb2F1dGgnLFxyXG5cclxuICAvLyBcclxuICBBdXRoRm9ybXMgPSAnYXV0aC1mb3JtcycsXHJcblxyXG4gIC8vIFxyXG4gIEF1dGhUaGlyZFBhcnR5U1NPID0gJ2F1dGgtdGhpcmQtcGFydHktU1NPJyxcclxuXHJcbiAgLy8gTEFTVFxyXG4gIEF1dGhJbnZhbGlkID0gJ2F1dGgtb3B0aW9uLWludmFsaWQnLFxyXG5cclxuICAvLyBcclxuICBBdXRoU0FNTElkUCA9ICdhdXRoLW9wdGlvbi1zYW1sLWlkcCdcclxufVxyXG5cclxuLy8gZGF0YSBzb3VyY2UgdmFsaWRhdGlvbiBtb2Rlc1xyXG5leHBvcnQgZW51bSBEYXRhU291cmNlUGFyc2VyVmFsaWRhdGlvbk1vZGUge1xyXG5cclxuICAvLyBcclxuICBXb3JrYm9va0xvYWRWYWxpZGF0aW9uID0gJ3dvcmtib29rLWxvYWQtdmFsaWRhdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIEF1dG9WYWxpZGF0aW9uID0gJ2F1dG8tdmFsaWRhdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcmNlVmFsaWRhdGlvbiA9ICdmb3JjZS12YWxpZGF0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgUHJldmVudFZhbGlkYXRpb24gPSAncHJldmVudC12YWxpZGF0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgUHJldmVudFZhbGlkYXRpb25BbmRUaHJvdyA9ICdwcmV2ZW50LXZhbGlkYXRpb24tYW5kLXRocm93J1xyXG59XHJcblxyXG4vLyBFbnVtIGZvciBEYXRhR3JpZC9NZXRhZGF0YUdyaWQgZmllbGRzIHJlb3JkZXJpbmdcclxuZXhwb3J0IGVudW0gRmllbGRPcmRlclR5cGUge1xyXG5cclxuICAvLyBcclxuICBEQVRBU09VUkNFX09SREVSID0gJ2RhdGFzb3VyY2Utb3JkZXInLFxyXG5cclxuICAvLyBcclxuICBBTFBIQV9QRVJfVEFCTEUgPSAnYWxwaGEtcGVyLXRhYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgQUxQSEFCRVRJQ0FMX09SREVSID0gJ2FscGhhYmV0aWNhbC1vcmRlcicsXHJcblxyXG4gIC8vIFxyXG4gIENVU1RPTV9PUkRFUiA9ICdjdXN0b20tb3JkZXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBMaW5lSW50ZXJwb2xhdGlvbk1vZGUge1xyXG5cclxuICAvLyBcclxuICBMSU1fTGluZWFyID0gJ2xpbS1saW5lYXInLFxyXG5cclxuICAvLyBcclxuICBMSU1fU3RlcCA9ICdsaW0tc3RlcCcsXHJcblxyXG4gIC8vIFxyXG4gIExJTV9KdW1wID0gJ2xpbS1qdW1wJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRm9sZGVyUm9sZSB7XHJcblxyXG4gIC8vIFxyXG4gIEZPTERFUl9ESU1FTlNJT05TID0gJ2RpbWVuc2lvbnMnLFxyXG5cclxuICAvLyBcclxuICBGT0xERVJfTUVBU1VSRVMgPSAnbWVhc3VyZScsXHJcblxyXG4gIC8vIFxyXG4gIEZPTERFUl9HUk9VUFMgPSAnZ3JvdXBzJyxcclxuXHJcbiAgLy8gXHJcbiAgRk9MREVSX1BBUkFNRVRFUlMgPSAncGFyYW1ldGVycydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZpZWxkVHlwZUljb25TZXQge1xyXG5cclxuICAvLyBcclxuICBGVF9TRVRfQUxMID0gJ2FsbCcsXHJcblxyXG4gIC8vIFxyXG4gIEZUX1NFVF9DVUJFX01FQVNVUkVTID0gJ2N1YmUtbWVhc3VyZXMnLFxyXG5cclxuICAvLyBcclxuICBGVF9TRVRfQ1VCRV9ESU1FTlNJT05TID0gJ2N1YmUtZGltZW5zaW9ucydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZpZWxkUGl2b3RTdHJhdGVneSB7XHJcblxyXG4gIC8vIFxyXG4gIFBJVk9UX09OX0tFWSA9ICdwaXZvdC1vbi1rZXknLFxyXG5cclxuICAvLyBcclxuICBQSVZPVF9PTl9BTElBUyA9ICdwaXZvdC1vbi1hbGlhcydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEFsaWFzVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEFMSUFTX05PVFNFVCA9ICdhbGlhcy1ub3Qtc2V0JyxcclxuXHJcbiAgLy8gXHJcbiAgQUxJQVNfQkVHSU4gPSAnYWxpYXMtYmVnaW4nLFxyXG5cclxuICAvLyBcclxuICBBTElBU19LRVkgPSAnYWxpYXMta2V5JyxcclxuXHJcbiAgLy8gXHJcbiAgQUxJQVNfS0VZX05BTUUgPSAnYWxpYXMta2V5LW5hbWUnLFxyXG5cclxuICAvLyBcclxuICBBTElBU19LRVlfTUVETkFNRSA9ICdhbGlhcy1rZXktbWVkbmFtZScsXHJcblxyXG4gIC8vIFxyXG4gIEFMSUFTX0tFWV9MT05HTkFNRSA9ICdhbGlhcy1rZXktbG9uZ25hbWUnLFxyXG5cclxuICAvLyBcclxuICBBTElBU19OQU1FID0gJ2FsaWFzLW5hbWUnLFxyXG5cclxuICAvLyBcclxuICBBTElBU19OQU1FX0tFWSA9ICdhbGlhcy1uYW1lLWtleScsXHJcblxyXG4gIC8vIFxyXG4gIEFMSUFTX01FRE5BTUUgPSAnYWxpYXMtbWVkbmFtZScsXHJcblxyXG4gIC8vIFxyXG4gIEFMSUFTX01FRE5BTUVfS0VZID0gJ2FsaWFzLW1lZG5hbWUta2V5JyxcclxuXHJcbiAgLy8gXHJcbiAgQUxJQVNfTE9OR05BTUUgPSAnYWxpYXMtbG9uZ25hbWUnLFxyXG5cclxuICAvLyBcclxuICBBTElBU19MT05HTkFNRV9LRVkgPSAnYWxpYXMtbG9uZ25hbWUta2V5JyxcclxuXHJcbiAgLy8gXHJcbiAgQUxJQVNfRU5EID0gJ2FsaWFzLWVuZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEFsaWFzVHlwZXMge1xyXG5cclxuICAvLyBcclxuICBNQVNLX0FMSUFTX0tFWSA9ICdtYXNrLWFsaWFzLWtleScsXHJcblxyXG4gIC8vIFxyXG4gIE1BU0tfQUxJQVNfTkFNRSA9ICdtYXNrLWFsaWFzLW5hbWUnLFxyXG5cclxuICAvLyBcclxuICBNQVNLX0FMSUFTX01FRE5BTUUgPSAnbWFzay1hbGlhcy1tZWRuYW1lJyxcclxuXHJcbiAgLy8gXHJcbiAgTUFTS19BTElBU19MT05HTkFNRSA9ICdtYXNrLWFsaWFzLWxvbmduYW1lJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRmllbGRSb2xlIHtcclxuXHJcbiAgLy8gXHJcbiAgUk9MRV9ESU1FTlNJT04gPSAnZGltZW5zaW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgUk9MRV9NRUFTVVJFID0gJ21lYXN1cmUnLFxyXG5cclxuICAvLyBcclxuICBST0xFX1VOS05PV04gPSAndW5rbm93bidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZpZWxkVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFRZUEVfUVVBTlRJVEFUSVZFID0gJ3F1YW50aXRhdGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIFRZUEVfT1JESU5BTCA9ICdvcmRpbmFsJyxcclxuXHJcbiAgLy8gXHJcbiAgVFlQRV9OT01JTkFMID0gJ25vbWluYWwnLFxyXG5cclxuICAvLyBcclxuICBUWVBFX1VOS05PV04gPSAndW5rbm93bidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIERhdGFTb3VyY2VPcmRlciB7XHJcblxyXG4gIC8vIFxyXG4gIERTT19BTFBIQUJFVElDID0gJ2Rzby1hbHBoYWJldGljJyxcclxuXHJcbiAgLy8gXHJcbiAgRFNPX09SRElOQUwgPSAnZHNvLW9yZGluYWwnXHJcbn1cclxuXHJcbi8vIFdoZXJlIHRoZSBjb2x1bW4gY29tZXMgZnJvbVxyXG5leHBvcnQgZW51bSBDb2x1bW5DbGFzcyB7XHJcblxyXG4gIC8vIEEgbWV0YWRhdGEgY29sdW1uIChPIG9yIFEgTWVhc3VyZXMpXHJcbiAgQ09MX01FVEFEQVRBID0gJ2NvbC1tZXRhZGF0YScsXHJcblxyXG4gIC8vIEEgcGh5c2ljYWwgY29sdW1uIG9uIHRoZSBkYXRhYmFzZVxyXG4gIENPTF9EQVRBQkFTRSA9ICdjb2wtZGF0YWJhc2UnLFxyXG5cclxuICAvLyBBIG51bWJlcmljIGJpbiAoYSBzcGVjaWFsIGtpbmQgb2YgY2FsY3VsYXRlZCBjb2x1bW4pXHJcbiAgQ09MX05VTUVSSUNCSU4gPSAnY29sLW51bWVyaWNiaW4nLFxyXG5cclxuICAvLyBBIENhdGVnb3JpY2FsIGJpbiAoZ3JvdXApXHJcbiAgQ09MX0NBVEVHT1JJQ0FMQklOID0gJ2NvbC1jYXRlZ29yaWNhbGJpbicsXHJcblxyXG4gIC8vIEEgY29sdW1uIGluc3RhbmNlXHJcbiAgQ09MX0lOU1RBTkNFID0gJ2NvbC1pbnN0YW5jZScsXHJcblxyXG4gIC8vIEEgKHJhdykgbWR4IGNhbGN1bGF0ZWQgY29sdW1uXHJcbiAgQ09MX01EWENBTEMgPSAnY29sLW1keGNhbGMnLFxyXG5cclxuICAvLyBBIHVzZXItZGVmaW5lZCBjYWxjdWxhdGVkIGNvbHVtbiwgVGFibGVhdSBleHByZXNzaW9uIHN5bnRheFxyXG4gIENPTF9VU0VSQ0FMQyA9ICdjb2wtdXNlcmNhbGMnLFxyXG5cclxuICAvLyBBIGNvbHVtbiB0aGF0IHdvdWxkIGhhdmUgYmVlbiBDT0xfREFUQUJBU0UsIGJ1dCB0aGUgdW5kZXJseWluZyBkYXRhYmFzZSBjb2x1bW4gZG9lcyBub3QgZXhpc3RcclxuICBDT0xfREFOR0xJTkcgPSAnY29sLWRhbmdsaW5nJyxcclxuXHJcbiAgLy8gQSBjb2x1bW4gdGhhdCBjb250YWlucyBsb2NhbCBzdXBwbGllZCBkYXRhIChlLmcuIExhdGl0dWRlKVxyXG4gIENPTF9MT0NBTERBVEEgPSAnY29sLWxvY2FsZGF0YScsXHJcblxyXG4gIC8vIEEgY29sdW1uIHRoYXQgY29udGFpbnMgYSB2aXN1YWwgbW9kZWwgYXR0cmlidXRlIChlLmcuIFBhbmVJbmRleCwgQ29sb3IsIC4uLilcclxuICBDT0xfVklTVUFMREFUQSA9ICdjb2wtdmlzdWFsZGF0YScsXHJcblxyXG4gIC8vIEEgY29sdW1uIHRoYXQncyBhIEdyb3VwIChhIFwiIFNldCBcIiBpbiBVSSB0ZXJtaW5vbG9neSlcclxuICBDT0xfR1JPVVAgPSAnY29sLWdyb3VwJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVlRBZ2dUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgVlRBR0dfU1VNID0gJ3N1bScsXHJcblxyXG4gIC8vIFxyXG4gIFZUQUdHX0FWRyA9ICdhdmcnLFxyXG5cclxuICAvLyBcclxuICBWVEFHR19NSU4gPSAnbWluJyxcclxuXHJcbiAgLy8gXHJcbiAgVlRBR0dfTUFYID0gJ21heCcsXHJcblxyXG4gIC8vIFxyXG4gIFZUQUdHX1NFUlZFUiA9ICdzZXJ2ZXInLFxyXG5cclxuICAvLyBcclxuICBWVEFHR19OT05FID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBWVEFHR19ERUZBVUxUID0gJ2RlZmF1bHQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBFbnRpdHlUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9FbnVtZXJhdGlvbkVudGl0eSA9ICduby1lbnVtZXJhdGlvbi1lbnRpdHknLFxyXG5cclxuICAvLyBcclxuICBEYXRhYmFzZUVudGl0eSA9ICdkYXRhYmFzZS1lbnRpdHknLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFFbnRpdHkgPSAnc2NoZW1hLWVudGl0eScsXHJcblxyXG4gIC8vIFxyXG4gIFRhYmxlRW50aXR5ID0gJ3RhYmxlLWVudGl0eSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFBpY2tFbnRpdHlTZWFyY2hUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUGlja0VudGl0eVNlYXJjaFR5cGVfU3RhcnRzV2l0aCA9ICdzdGFydHMtd2l0aCcsXHJcblxyXG4gIC8vIFxyXG4gIFBpY2tFbnRpdHlTZWFyY2hUeXBlX0NvbnRhaW5zID0gJ2NvbnRhaW5zJyxcclxuXHJcbiAgLy8gXHJcbiAgUGlja0VudGl0eVNlYXJjaFR5cGVfRXhhY3RNYXRjaCA9ICdleGFjdC1tYXRjaCcsXHJcblxyXG4gIC8vIFxyXG4gIFBpY2tFbnRpdHlTZWFyY2hUeXBlX0RFRkFVTFQgPSAnZGVmYXVsdCdcclxufVxyXG5cclxuLy8gUGFyc2luZyBtZXRob2RzIGFuZCBzdHJ1Y3R1cmVzLlxyXG5leHBvcnQgZW51bSBFeHByZXNzaW9uT3Age1xyXG5cclxuICAvLyBcclxuICBMb2dpY2FsT3IgPSAnb3AtbG9naWNhbC1vcicsXHJcblxyXG4gIC8vIFxyXG4gIExvZ2ljYWxBbmQgPSAnb3AtbG9naWNhbC1hbmQnLFxyXG5cclxuICAvLyBcclxuICBMb2dpY2FsTm90ID0gJ29wLWxvZ2ljYWwtbm90JyxcclxuXHJcbiAgLy8gXHJcbiAgQml0d2lzZVhPciA9ICdvcC1iaXR3aXNlLXhvcicsXHJcblxyXG4gIC8vIFxyXG4gIEJpdHdpc2VPciA9ICdvcC1iaXR3aXNlLW9yJyxcclxuXHJcbiAgLy8gXHJcbiAgRXF1YWxzID0gJ29wLWVxdWFscycsXHJcblxyXG4gIC8vIFxyXG4gIEdyZWF0ZXIgPSAnb3AtZ3JlYXRlcicsXHJcblxyXG4gIC8vIFxyXG4gIExlc3MgPSAnb3AtbGVzcycsXHJcblxyXG4gIC8vIFxyXG4gIEdFcXVhbCA9ICdvcC1nZXF1YWwnLFxyXG5cclxuICAvLyBcclxuICBMRXF1YWwgPSAnb3AtbGVxdWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgTkVxdWFsID0gJ29wLW5lcXVhbCcsXHJcblxyXG4gIC8vIFxyXG4gIFBsdXMgPSAnb3AtcGx1cycsXHJcblxyXG4gIC8vIFxyXG4gIE1pbnVzID0gJ29wLW1pbnVzJyxcclxuXHJcbiAgLy8gXHJcbiAgQml0d2lzZUFuZCA9ICdvcC1iaXR3aXNlLWFuZCcsXHJcblxyXG4gIC8vIFxyXG4gIE11bHRpcGx5ID0gJ29wLW11bHRpcGx5JyxcclxuXHJcbiAgLy8gXHJcbiAgRGl2aWRlID0gJ29wLWRpdmlkZScsXHJcblxyXG4gIC8vIFxyXG4gIE1vZHVsbyA9ICdvcC1tb2R1bG8nLFxyXG5cclxuICAvLyBcclxuICBQb3dlciA9ICdvcC1wb3dlcicsXHJcblxyXG4gIC8vIFxyXG4gIFBvc2l0aXZlID0gJ29wLXBvc2l0aXZlJyxcclxuXHJcbiAgLy8gXHJcbiAgTmVnYXRpdmUgPSAnb3AtbmVnYXRpdmUnLFxyXG5cclxuICAvLyBcclxuICBCaXR3aXNlTm90ID0gJ29wLWJpdHdpc2Utbm90JyxcclxuXHJcbiAgLy8gXHJcbiAgQ29sdW1uID0gJ29wLWNvbHVtbicsXHJcblxyXG4gIC8vIFxyXG4gIFN0cmluZyA9ICdvcC1zdHJpbmcnLFxyXG5cclxuICAvLyBcclxuICBOdW1iZXIgPSAnb3AtbnVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0ZSA9ICdvcC1kYXRlJyxcclxuXHJcbiAgLy8gXHJcbiAgQm9vbGVhbiA9ICdvcC1ib29sZWFuJyxcclxuXHJcbiAgLy8gXHJcbiAgRnVuY2FsbCA9ICdvcC1mdW5jYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgTFBhcmVuID0gJ29wLWxwYXJlbicsXHJcblxyXG4gIC8vIFxyXG4gIFJQYXJlbiA9ICdvcC1ycGFyZW4nLFxyXG5cclxuICAvLyBcclxuICBDb21tYSA9ICdvcC1jb21tYScsXHJcblxyXG4gIC8vIFxyXG4gIElkZW50ID0gJ29wLWlkZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgTnVsbCA9ICdvcC1udWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgSWYgPSAnb3AtaWYnLFxyXG5cclxuICAvLyBcclxuICBFbHNlaWYgPSAnb3AtZWxzZWlmJyxcclxuXHJcbiAgLy8gXHJcbiAgQ2FzZSA9ICdvcC1jYXNlJyxcclxuXHJcbiAgLy8gXHJcbiAgV2hlbiA9ICdvcC13aGVuJyxcclxuXHJcbiAgLy8gXHJcbiAgVGhlbiA9ICdvcC10aGVuJyxcclxuXHJcbiAgLy8gXHJcbiAgRWxzZSA9ICdvcC1lbHNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRW5kRXhwciA9ICdvcC1lbmRleHByJyxcclxuXHJcbiAgLy8gXHJcbiAgV2hpdGVzcGFjZSA9ICdvcC13aGl0ZXNwYWNlJyxcclxuXHJcbiAgLy8gXHJcbiAgQ29tbWVudCA9ICdvcC1jb21tZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgTEJyYWNlID0gJ29wLWxicmFjZScsXHJcblxyXG4gIC8vIFxyXG4gIFJCcmFjZSA9ICdvcC1yYnJhY2UnLFxyXG5cclxuICAvLyBcclxuICBDb2xvbiA9ICdvcC1jb2xvbicsXHJcblxyXG4gIC8vIFxyXG4gIEJhciA9ICdvcC1iYXInLFxyXG5cclxuICAvLyBcclxuICBUeHR5cGUgPSAnb3AtdHh0eXBlJyxcclxuXHJcbiAgLy8gXHJcbiAgRW5kID0gJ29wLWVuZCcsXHJcblxyXG4gIC8vIFxyXG4gIFJCcmFja2V0cyA9ICdvcC1yYnJhY2tldHMnLFxyXG5cclxuICAvLyB1c2VkIHRvIHJlcHJlc2VudCBpbnZhbGlkIHRva2Vuc1xyXG4gIEludmFsaWQgPSAnb3AtaW52YWxpZCdcclxufVxyXG5cclxuLy8gdHJpLXN0YXRlIGJvb2xcclxuZXhwb3J0IGVudW0gVHJpQm9vbCB7XHJcblxyXG4gIC8vIFxyXG4gIFRCX0ludmFsaWQgPSAndHJpYm9vbC1pbnZhbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgVEJfRmFsc2UgPSAndHJpYm9vbC1mYWxzZScsXHJcblxyXG4gIC8vIFxyXG4gIFRCX1RydWUgPSAndHJpYm9vbC10cnVlJ1xyXG59XHJcblxyXG4vLyB0YWJsZSBjYWxjIHJlZmVyZW5jZSBvcHRpb25zIHNldFxyXG5leHBvcnQgZW51bSBSZWZlcmVuY2VPcHRpb25zU2V0IHtcclxuXHJcbiAgLy8gXHJcbiAgUk9TX1JlbGF0aXZlID0gJ3JlZmVyZW5jZS1vcHRpb25zLXNldC1yZWxhdGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIFJPU19GaXhlZCA9ICdyZWZlcmVuY2Utb3B0aW9ucy1zZXQtZml4ZWQnLFxyXG5cclxuICAvLyBcclxuICBST1NfUGFyYW1ldGVyID0gJ3JlZmVyZW5jZS1vcHRpb25zLXNldC1wYXJhbWV0ZXInLFxyXG5cclxuICAvLyBcclxuICBST1NfTm9uZSA9ICdyZWZlcmVuY2Utb3B0aW9ucy1zZXQtbm9uZSdcclxufVxyXG5cclxuLy8gd2lkZ2V0IHN0YXRlXHJcbmV4cG9ydCBlbnVtIFdpZGdldFN0YXRlIHtcclxuXHJcbiAgLy8gXHJcbiAgSGlkZGVuID0gJ3dpZGdldC1zdGF0ZS1oaWRkZW4nLFxyXG5cclxuICAvLyBcclxuICBEaXNhYmxlZCA9ICd3aWRnZXQtc3RhdGUtZGlzYWJsZWQnLFxyXG5cclxuICAvLyBcclxuICBFbmFibGVkID0gJ3dpZGdldC1zdGF0ZS1lbmFibGVkJ1xyXG59XHJcblxyXG4vLyByYW5rIHR5cGVcclxuZXhwb3J0IGVudW0gUmFua1R5cGUge1xyXG5cclxuICAvLyBcclxuICBDb21wZXRpdGlvbiA9ICdyYW5rLXR5cGUtY29tcGV0aXRpb24nLFxyXG5cclxuICAvLyBcclxuICBNb2RpZmllZENvbXBldGl0aW9uID0gJ3JhbmstdHlwZS1tb2RpZmllZC1jb21wZXRpdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIERlbnNlID0gJ3JhbmstdHlwZS1kZW5zZScsXHJcblxyXG4gIC8vIFxyXG4gIFVuaXF1ZSA9ICdyYW5rLXR5cGUtdW5pcXVlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVGFibGVDYWxjQ29tbWFuZFR5cGUge1xyXG5cclxuICAvLyBcclxuICBUYWJsZUNhbGNDb21tYW5kQ2xlYXIgPSAnY2xlYXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBDYWxjTmVzdGluZ0xldmVsIHtcclxuXHJcbiAgLy8gXHJcbiAgUHJpbWFyeSA9ICdwcmltYXJ5JyxcclxuXHJcbiAgLy8gdXNlZCBvbmx5IGZvciB0eXBlICE9IFRDX0NVU1RPTVxyXG4gIFNlY29uZGFyeSA9ICdzZWNvbmRhcnknLFxyXG5cclxuICAvLyB1c2VkIG9ubHkgZm9yIHR5cGUgPT0gVENfQ1VTVE9NXHJcbiAgTmVzdGVkID0gJ25lc3RlZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIERlY2ltYWxNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgRGVjaW1hbE1vZGVBdXRvbWF0aWMgPSAnYXV0b21hdGljJyxcclxuXHJcbiAgLy8gXHJcbiAgRGVjaW1hbE1vZGVNYW51YWwgPSAnbWFudWFsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVGFibGVDYWxjT3JkZXJpbmdUeXBlIHtcclxuXHJcbiAgLy8gQWR2YW5jZWQuLi5cclxuICBPVEZpZWxkID0gJ2ZpZWxkJyxcclxuXHJcbiAgLy8gVGFibGUgKEFjcm9zcylcclxuICBPVFJvd3MgPSAncm93cycsXHJcblxyXG4gIC8vIFRhYmxlIChEb3duKVxyXG4gIE9UQ29sdW1ucyA9ICdjb2x1bW5zJyxcclxuXHJcbiAgLy8gVGFibGUgKEFjcm9zcyB0aGVuIERvd24pXHJcbiAgT1RUYWJsZSA9ICd0YWJsZScsXHJcblxyXG4gIC8vIFRhYmxlIChEb3duIHRoZW4gQWNyb3NzKVxyXG4gIE9UVGFibGVDb2x1bW5QcmVjZWRlbmNlID0gJ3RhYmxlLWNvbHVtbi1wcmVjZWRlbmNlJyxcclxuXHJcbiAgLy8gUGFuZSBBY3Jvc3NcclxuICBPVFJvd0luUGFuZSA9ICdyb3ctaW4tcGFuZScsXHJcblxyXG4gIC8vIFBhbmUgKERvd24pXHJcbiAgT1RDb2x1bW5JblBhbmUgPSAnY29sdW1uLWluLXBhbmUnLFxyXG5cclxuICAvLyBQYW5lIChBY3Jvc3MgdGhlbiBEb3duKVxyXG4gIE9UUGFuZSA9ICdwYW5lJyxcclxuXHJcbiAgLy8gUGFuZSAoRG93biB0aGVuIEFjcm9zcylcclxuICBPVFBhbmVDb2x1bW5QcmVjZWRlbmNlID0gJ3BhbmUtY29sdW1uLXByZWNlZGVuY2UnLFxyXG5cclxuICAvLyBDZWxsXHJcbiAgT1RDZWxsSW5QYW5lID0gJ2NlbGwtaW4tcGFuZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFRhYmxlQ2FsY1NvcnRNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgU01fQXV0b21hdGljID0gJ3NvcnQtbW9kZS1hdXRvbWF0aWMnLFxyXG5cclxuICAvLyBcclxuICBTTV9DdXN0b20gPSAnc29ydC1tb2RlLWN1c3RvbSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFRhYmxlQ2FsY1RhYmxlQ2FsY1R5cGUge1xyXG5cclxuICAvLyBub25lICh1c2VkIHRvIGluaXRpYWxpemUgdmFyaWFibGVzKVxyXG4gIFRDX05PTkUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFJ1bm5pbmcgVG90YWxcclxuICBUQ19DVU1VTEFUSVZFID0gJ2N1bXVsYXRpdmUnLFxyXG5cclxuICAvLyBNb3ZpbmcgQ2FsY3VsYXRpb25cclxuICBUQ19XSU5ET1cgPSAnd2luZG93JyxcclxuXHJcbiAgLy8gRGlmZmVyZW5jZSBGcm9tXHJcbiAgVENfRElGRiA9ICdkaWZmJyxcclxuXHJcbiAgLy8gUGVyY2VudCBEaWZmZXJlbmNlIEZyb21cclxuICBUQ19QQ1RESUZGID0gJ3BjdC1kaWZmJyxcclxuXHJcbiAgLy8gUGVyY2VudCBGcm9tXHJcbiAgVENfUENUVkFMVUUgPSAncGN0LXZhbHVlJyxcclxuXHJcbiAgLy8gUGVyY2VudCBPZiBUb3RhbFxyXG4gIFRDX1BDVFRPVEFMID0gJ3BjdC10b3RhbCcsXHJcblxyXG4gIC8vIFJhbmtcclxuICBUQ19SQU5LID0gJ3JhbmsnLFxyXG5cclxuICAvLyBQZXJjZW50aWxlXHJcbiAgVENfUENUUkFOSyA9ICdwY3QtcmFuaycsXHJcblxyXG4gIC8vIEN1c3RvbVxyXG4gIFRDX0NVU1RPTSA9ICdjdXN0b20nXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBRdWlja1RhYmxlQ2FsY0NvbW1hbmRUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tUYWJsZUNhbGNDb21tYW5kUnVuVG90YWwgPSAncnVuLXRvdGFsJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tUYWJsZUNhbGNDb21tYW5kRGlmZmVyZW5jZSA9ICdkaWZmZXJlbmNlJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tUYWJsZUNhbGNDb21tYW5kUGN0RGlmZiA9ICdwY3QtZGlmZicsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrVGFibGVDYWxjQ29tbWFuZFBjdFRvdGFsID0gJ3BjdC10b3RhbCcsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrVGFibGVDYWxjQ29tbWFuZFJhbmsgPSAncmFuaycsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrVGFibGVDYWxjQ29tbWFuZFBjdFJhbmsgPSAncGN0LXJhbmsnLFxyXG5cclxuICAvLyBcclxuICBRdWlja1RhYmxlQ2FsY0NvbW1hbmRNb3ZpbmdBdmcgPSAnbW92aW5nLWF2ZycsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrVGFibGVDYWxjQ29tbWFuZFl0ZCA9ICd5dGQnLFxyXG5cclxuICAvLyBcclxuICBRdWlja1RhYmxlQ2FsY0NvbW1hbmRDZ3IgPSAnY2dyJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tUYWJsZUNhbGNDb21tYW5kWU92ZXJZID0gJ3ktb3Zlci15JyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tUYWJsZUNhbGNDb21tYW5kWXRkR3Jvd3RoID0gJ3l0ZC1ncm93dGgnLFxyXG5cclxuICAvLyBcclxuICBRdWlja1RhYmxlQ2FsY0NvbW1hbmRDdXN0b20gPSAnY3VzdG9tJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVGFibGVDYWxjQWRkcmVzc0NvbW1hbmRUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgVGFibGVDYWxjQWRkcmVzc0NvbW1hbmRSZWwgPSAncmVsJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFibGVDYWxjQWRkcmVzc0NvbW1hbmRBYnMgPSAnYWJzJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFibGVDYWxjQWRkcmVzc0NvbW1hbmRQYXJhbSA9ICdwYXJhbScsXHJcblxyXG4gIC8vIFxyXG4gIFRhYmxlQ2FsY0FkZHJlc3NDb21tYW5kTW9yZSA9ICdtb3JlJ1xyXG59XHJcblxyXG4vLyByZWxhdGl2ZSBhZGRyZXNzaW5nXHJcbmV4cG9ydCBlbnVtIFRhYmxlQ2FsY1JlbGF0aXZlQWRkcmVzcyB7XHJcblxyXG4gIC8vIFxyXG4gIFJlbEFkZHJGaXJzdCA9ICdyZWxhdGl2ZS1hZGRyZXNzLWZpcnN0JyxcclxuXHJcbiAgLy8gXHJcbiAgUmVsQWRkclByZXZpb3VzID0gJ3JlbGF0aXZlLWFkZHJlc3MtcHJldmlvdXMnLFxyXG5cclxuICAvLyBcclxuICBSZWxBZGRyTmV4dCA9ICdyZWxhdGl2ZS1hZGRyZXNzLW5leHQnLFxyXG5cclxuICAvLyBcclxuICBSZWxBZGRyTGFzdCA9ICdyZWxhdGl2ZS1hZGRyZXNzLWxhc3QnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBDYXRlZ29yaWNhbEJpbkl0ZW1UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgVW5iaW5uZWQgPSAndW5iaW5uZWQnLFxyXG5cclxuICAvLyBcclxuICBCaW5NZW1iZXIgPSAnY2F0ZWdvcmljYWwtYmluLW1lbWJlcicsXHJcblxyXG4gIC8vIFxyXG4gIEJpbiA9ICdjYXRlZ29yaWNhbC1iaW4nXHJcbn1cclxuXHJcbi8vIFRoZSBjbGFzcyBwcm9wZXJ0aWVzXHJcbmV4cG9ydCBlbnVtIENyZWRlbnRpYWxUeXBlUHJvcGVydGllc0ZsYWcge1xyXG5cclxuICAvLyBcclxuICBOb25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBHZW5lcmljQXV0aENsYXNzID0gJ2dlbmVyaWMtYXV0aC1jbGFzcycsXHJcblxyXG4gIC8vIFxyXG4gIFByb3ZpZGVyQ2xhc3MgPSAncHJvdmlkZXItY2xhc3MnLFxyXG5cclxuICAvLyBcclxuICBEYXRhQ29ubmVjdGlvbkNsYXNzID0gJ2RhdGEtY29ubmVjdGlvbi1jbGFzcydcclxufVxyXG5cclxuLy8gVGhlIGNvbm5lY3RvciB0eXBlXHJcbmV4cG9ydCBlbnVtIENvbm5lY3RvclR5cGUge1xyXG5cclxuICAvLyBcclxuICBJbnZhbGlkID0gJ2ludmFsaWQnLFxyXG5cclxuICAvLyBcclxuICBXZWJEYXRhQ29ubmVjdG9yID0gJ3dlYi1kYXRhLWNvbm5lY3RvcicsXHJcblxyXG4gIC8vIFxyXG4gIENsb3VkRmlsZUNvbm5lY3RvciA9ICdjbG91ZC1maWxlLWNvbm5lY3RvcicsXHJcblxyXG4gIC8vIFxyXG4gIExlZ2FjeUNvbm5lY3RvciA9ICdsZWdhY3ktY29ubmVjdG9yJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVGFibGVQaWxsSWNvbiB7XHJcblxyXG4gIC8vIFxyXG4gIExpc3RJdGVtID0gJ2xpc3QtaXRlbScsXHJcblxyXG4gIC8vIFxyXG4gIFNoZWV0ID0gJ3NoZWV0JyxcclxuXHJcbiAgLy8gXHJcbiAgRm91bmRUYWJsZSA9ICdmb3VuZC10YWJsZScsXHJcblxyXG4gIC8vIFxyXG4gIE5hbWVkUmFuZ2UgPSAnbmFtZWQtcmFuZ2UnLFxyXG5cclxuICAvLyBcclxuICBTdG9yZWRQcm9jZWR1cmUgPSAnc3RvcmVkLXByb2NlZHVyZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEpvaW5WYWxpZGF0aW9uRXJyb3Ige1xyXG5cclxuICAvLyBcclxuICBKVkVfTm9FcnJvciA9ICduby1lcnJvcicsXHJcblxyXG4gIC8vIFxyXG4gIEpWRV9FbXB0eUNsYXVzZSA9ICdlbXB0eS1jbGF1c2UnLFxyXG5cclxuICAvLyBcclxuICBKVkVfVHlwZU1pc21hdGNoID0gJ3R5cGUtbWlzbWF0Y2gnLFxyXG5cclxuICAvLyBcclxuICBKVkVfSW52YWxpZEZpZWxkID0gJ2ludmFsaWQtZmllbGQnLFxyXG5cclxuICAvLyBcclxuICBKVkVfQmFkQ2xhdXNlID0gJ2JhZC1jbGF1c2UnLFxyXG5cclxuICAvLyBcclxuICBKVkVfQmFkSW5wdXRSZWxhdGlvbiA9ICdiYWQtaW5wdXQtcmVsYXRpb24nLFxyXG5cclxuICAvLyBcclxuICBKVkVfUmVwZWF0ZWRGaWVsZFJlZmVyZW5jZXMgPSAncmVwZWF0ZWQtZmllbGQtcmVmZXJlbmNlcycsXHJcblxyXG4gIC8vIFxyXG4gIEpWRV9VbnN1cHBvcnRlZEpvaW5UeXBlID0gJ3Vuc3VwcG9ydGVkLWpvaW4tdHlwZScsXHJcblxyXG4gIC8vIFxyXG4gIEpWRV9JbnZhbGlkQ2FsY3VsYXRpb24gPSAnaW52YWxpZC1jYWxjdWxhdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIEpWRV9Ob25TcGF0aWFsVHlwZSA9ICdub24tc3BhdGlhbC10eXBlJyxcclxuXHJcbiAgLy8gXHJcbiAgSlZFX05vblNwYXRpYWxDb21wYXJpc29uID0gJ25vbi1zcGF0aWFsLWNvbXAnLFxyXG5cclxuICAvLyBcclxuICBKVkVfVW5rbm93biA9ICd1bmtub3duJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQ29ubmVjdGlvblR5cGVFbnVtIHtcclxuXHJcbiAgLy8gLWQtcyBpcyB1c2VkIHRvIGZvcmNlIHRoZSBlbnVtIGdlbmVyYXRvciB0byBnZW5lcmF0ZSBEUyB3aXRoIGNhcGl0YWwgbGV0dGVycyBpbiAuY3MganVzdCBsaWtlIHRoZSAuY3BwXHJcbiAgSW52YWxpZERTID0gJ2ludmFsaWQtZC1zJyxcclxuXHJcbiAgLy8gXHJcbiAgRmlsZURTID0gJ2ZpbGUtZC1zJyxcclxuXHJcbiAgLy8gXHJcbiAgU2VydmVyRFMgPSAnc2VydmVyLWQtcycsXHJcblxyXG4gIC8vIFxyXG4gIEludGVybmV0RFMgPSAnaW50ZXJuZXQtZC1zJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFibGVhdVNlcnZlckRTID0gJ3RhYmxlYXUtc2VydmVyLWQtcydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIENvbm5lY3Rpb25FcnJvclN0YWdlIHtcclxuXHJcbiAgLy8gXHJcbiAgVW5rbm93biA9ICd1bmtub3duJyxcclxuXHJcbiAgLy8gXHJcbiAgQ3JlYXRlUHJvdG9jb2xGYWlsZWQgPSAnY3JlYXRlLXByb3RvY29sLWZhaWxlZCcsXHJcblxyXG4gIC8vIFxyXG4gIExvYWRNZXRhZGF0YUZhaWxlZCA9ICdsb2FkLW1ldGFkYXRhLWZhaWxlZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNvcnREaXJlY3Rpb24ge1xyXG5cclxuICAvLyBhc2NlbmRpbmdcclxuICBTVF9BU0MgPSAnYXNjJyxcclxuXHJcbiAgLy8gZGVzY2VuZGluZ1xyXG4gIFNUX0RFU0MgPSAnZGVzYydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNvcnRUeXBlIHtcclxuXHJcbiAgLy8gVXNlIHRoZSBkZWZpbmVkIG9yZGVyaW5nXHJcbiAgU1RfTkFUVVJBTCA9ICdkYXRhLXNvdXJjZS1vcmRlcicsXHJcblxyXG4gIC8vIEFscGhhYmV0aWMvbnVtZXJpYyBvcmRlcmluZyBvZiBkYXRhXHJcbiAgU1RfQUxQSEFCRVRJQyA9ICdhbHBoYScsXHJcblxyXG4gIC8vIFNwZWNpZnkgYSBzZWNvbmRhcnkgZmllbGRcclxuICBTVF9DT01QVVRFRCA9ICdmaWVsZCcsXHJcblxyXG4gIC8vIE1hbnVhbGx5IGRlZmluZWQgb3JkZXJpbmdcclxuICBTVF9NQU5VQUwgPSAnbWFudWFsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU29ydFBhcnRpdGlvbmluZyB7XHJcblxyXG4gIC8vIENvbXB1dGUgYSBzaW5nbGUgc29ydCBvcmRlciwgaWdub3JpbmcgdGhlIHBhcnRpdGlvbnMgdGhhdCB0aGUgZGltZW5zaW9uIGJlaW5nIHNvcnRlZCBpcyBlbmNsb3NlZCB3aXRoaW4uXHJcbiAgTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gQ29tcHV0ZSBhIHNlcGFyYXRlIHNvcnQgb3JkZXIgZm9yIGVhY2ggcGFydGl0aW9uIHRoYXQgdGhlIGRpbWVuc2lvbiBiZWluZyBzb3J0ZWQgaXMgZW5jbG9zZWQgd2l0aGluLlxyXG4gIE5lc3RlZCA9ICduZXN0ZWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTb3J0RW5kIHtcclxuXHJcbiAgLy8gXHJcbiAgU1RfVE9QID0gJ3RvcCcsXHJcblxyXG4gIC8vIFxyXG4gIFNUX0JPVFRPTSA9ICdib3R0b20nXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIGZvciB0aGUgdHlwZSBvZiBqb2luIGNvbm5lY3RpbmcgdHdvIHRhYmxlc1xyXG5leHBvcnQgZW51bSBTUUxKb2luVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNRTF9Jbm5lckpvaW4gPSAnc3FsLWlubmVyLWpvaW4nLFxyXG5cclxuICAvLyBcclxuICBTUUxfTGVmdEpvaW4gPSAnc3FsLWxlZnQtam9pbicsXHJcblxyXG4gIC8vIFxyXG4gIFNRTF9SaWdodEpvaW4gPSAnc3FsLXJpZ2h0LWpvaW4nLFxyXG5cclxuICAvLyBcclxuICBTUUxfRnVsbEpvaW4gPSAnc3FsLWZ1bGwtam9pbicsXHJcblxyXG4gIC8vIFxyXG4gIFNRTF9Dcm9zc0pvaW4gPSAnc3FsLWNyb3NzLWpvaW4nXHJcbn1cclxuXHJcbi8vIFRoZSByZXN1bHQgb2YgcGFyc2luZyBhbmQgc2V0dGluZyBhIGRhdGEgdmFsdWUgZm9yIGEgcHJvcGVydHkgb2YgYSBxdWFudGl0YXRpdmUgYXhpcy5cclxuZXhwb3J0IGVudW0gU2V0QXhpc0RhdGFWYWx1ZVJlc3VsdCB7XHJcblxyXG4gIC8vIFxyXG4gIFN1Y2Nlc3MgPSAnc2V0LWF4aXMtZGF0YS12YWx1ZS1yZXN1bHQtc3VjY2VzcycsXHJcblxyXG4gIC8vIFxyXG4gIFBhcnNlRmFpbHVyZSA9ICdzZXQtYXhpcy1kYXRhLXZhbHVlLXJlc3VsdC1wYXJzZS1mYWlsdXJlJyxcclxuXHJcbiAgLy8gXHJcbiAgVmFsdWVGYWlsdXJlID0gJ3NldC1heGlzLWRhdGEtdmFsdWUtcmVzdWx0LXZhbHVlLWZhaWx1cmUnXHJcbn1cclxuXHJcbi8vIFRoZSB0eXBlIG9mIGFuIGF4aXMnIGV4dGVudFxyXG5leHBvcnQgZW51bSBBeGlzRXh0ZW50VHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEF1dG9tYXRpYyA9ICdheGlzLWV4dGVudC1hdXRvbWF0aWMnLFxyXG5cclxuICAvLyBcclxuICBVbmlmb3JtID0gJ2F4aXMtZXh0ZW50LXVuaWZvcm0nLFxyXG5cclxuICAvLyBcclxuICBJbmRlcGVuZGVudCA9ICdheGlzLWV4dGVudC1pbmRlcGVuZGVudCcsXHJcblxyXG4gIC8vIFxyXG4gIEZpeGVkID0gJ2F4aXMtZXh0ZW50LWZpeGVkJ1xyXG59XHJcblxyXG4vLyBFbnVtZXJhdGlvbiBvZiB1bml0cyB0aWNrIHNwYWNpbmcgY2FuIHRha2VcclxuZXhwb3J0IGVudW0gVGlja1NwYWNpbmdVbml0cyB7XHJcblxyXG4gIC8vIFxyXG4gIE5vVW5pdHMgPSAnbm8tdW5pdHMnLFxyXG5cclxuICAvLyBcclxuICBZZWFycyA9ICd5ZWFycycsXHJcblxyXG4gIC8vIFxyXG4gIFF1YXJ0ZXJzID0gJ3F1YXJ0ZXJzJyxcclxuXHJcbiAgLy8gXHJcbiAgTW9udGhzID0gJ21vbnRocycsXHJcblxyXG4gIC8vIFxyXG4gIFdlZWtzID0gJ3dlZWtzJyxcclxuXHJcbiAgLy8gXHJcbiAgRGF5cyA9ICdkYXlzJyxcclxuXHJcbiAgLy8gXHJcbiAgSG91cnMgPSAnaG91cnMnLFxyXG5cclxuICAvLyBcclxuICBNaW51dGVzID0gJ21pbnV0ZXMnLFxyXG5cclxuICAvLyBcclxuICBTZWNvbmRzID0gJ3NlY29uZHMnXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIG9mIHdoZXRoZXIgdG90YWxzIGFyZSBpbmNsdWRlZCBpbiBvciBleGNsdWRlZCBmcm9tIHRoZSBjb2xvciBlbmNvZGluZ1xyXG5leHBvcnQgZW51bSBUb3RhbHNJbmNsdXNpb24ge1xyXG5cclxuICAvLyBUb3RhbHMgaW5jbHVkZWQgaW4gY29sb3IgZW5jb2RpbmdcclxuICBJbmNsdWRlVG90YWxzID0gJ2luY2x1ZGUtdG90YWxzJyxcclxuXHJcbiAgLy8gVG90YWxzIGV4Y2x1ZGVkIGZyb20gY29sb3IgZW5jb2RpbmdcclxuICBFeGNsdWRlVG90YWxzID0gJ2V4Y2x1ZGUtdG90YWxzJ1xyXG59XHJcblxyXG4vLyBIb3cgdGljayBtYXJrcyBhcmUgYmVpbmcgY2FsY3VsYXRlZFxyXG5leHBvcnQgZW51bSBUaWNrTWFya1N0YXRlIHtcclxuXHJcbiAgLy8gXHJcbiAgVGlja3NBdXRvbWF0aWMgPSAndGlja3MtYXV0b21hdGljJyxcclxuXHJcbiAgLy8gXHJcbiAgVGlja3NNYW51YWwgPSAndGlja3MtbWFudWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgVGlja3NOb25lID0gJ3RpY2tzLU5vbmUnXHJcbn1cclxuXHJcbi8vIFNldHRpbmcgZm9yIHR5cGUgb2YgYXhpcyByYW5nZVxyXG5leHBvcnQgZW51bSBBeGlzUmFuZ2VUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgQXV0b21hdGljUmFuZ2UgPSAnYXV0b21hdGljLXJhbmdlJyxcclxuXHJcbiAgLy8gXHJcbiAgVW5pZm9ybVJhbmdlID0gJ3VuaWZvcm0tcmFuZ2UnLFxyXG5cclxuICAvLyBcclxuICBJbmRlcGVuZGVudFJhbmdlID0gJ2luZGVwZW5kZW50LXJhbmdlJyxcclxuXHJcbiAgLy8gXHJcbiAgRml4ZWRSYW5nZSA9ICdmaXhlZC1yYW5nZScsXHJcblxyXG4gIC8vIFxyXG4gIEZpeGVkTWluID0gJ2ZpeGVkLW1pbicsXHJcblxyXG4gIC8vIFxyXG4gIEZpeGVkTWF4ID0gJ2ZpeGVkLW1heCcsXHJcblxyXG4gIC8vIFxyXG4gIEZpeGVkTWluVW5pZm9ybU1heCA9ICdmaXhlZC1taW4tdW5pZm9ybS1tYXgnLFxyXG5cclxuICAvLyBcclxuICBGaXhlZE1pbkluZGVwZW5kZW50TWF4ID0gJ2ZpeGVkLW1pbi1pbmRlcGVuZGVudC1tYXgnLFxyXG5cclxuICAvLyBcclxuICBGaXhlZE1heFVuaWZvcm1NaW4gPSAnZml4ZWQtbWF4LXVuaWZvcm0tbWluJyxcclxuXHJcbiAgLy8gXHJcbiAgRml4ZWRNYXhJbmRlcGVuZGVudE1pbiA9ICdmaXhlZC1tYXgtaW5kZXBlbmRlbnQtbWluJyxcclxuXHJcbiAgLy8gXHJcbiAgRml4ZWRSYW5nZU9yZGluYWwgPSAnZml4ZWQtcmFuZ2Utb3JkaW5hbCdcclxufVxyXG5cclxuLy8gcmVwcmVzZW50cyB0eXBlIG9mIHdpZGdldCBvbiB0aGUgdG9vbGJhciBvZiByaWNoIHRleHQgZWRpdG9yXHJcbmV4cG9ydCBlbnVtIFJpY2hUZXh0RWRpdG9yV2lkZ2V0S2V5IHtcclxuXHJcbiAgLy8gXHJcbiAgTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9udFNpemUgPSAnZm9udHNpemUnLFxyXG5cclxuICAvLyBcclxuICBGb250TmFtZSA9ICdmb250bmFtZScsXHJcblxyXG4gIC8vIFxyXG4gIEZvbnRDb2xvciA9ICdjb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIEJvbGQgPSAnYm9sZCcsXHJcblxyXG4gIC8vIFxyXG4gIEl0YWxpYyA9ICdpdGFsaWMnLFxyXG5cclxuICAvLyBcclxuICBVbmRlcmxpbmUgPSAndW5kZXJsaW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgQWxpZ25MZWZ0ID0gJ2p1c3RpZnlsZWZ0JyxcclxuXHJcbiAgLy8gXHJcbiAgQWxpZ25DZW50ZXIgPSAnanVzdGlmeWNlbnRlcicsXHJcblxyXG4gIC8vIFxyXG4gIEFsaWduUmlnaHQgPSAnanVzdGlmeXJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgQ2xlYXJGb3JtYXR0aW5nID0gJ2NsZWFyZm9ybWF0dGluZycsXHJcblxyXG4gIC8vIFxyXG4gIFRhYmxlYXVLZXl3b3JkcyA9ICd0YWJsZWF1a2V5d29yZHMnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBDZWxsU2l6ZUNoYW5nZSB7XHJcblxyXG4gIC8vIFxyXG4gIENTQ19UYWxsZXIgPSAndGFsbGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgQ1NDX1Nob3J0ZXIgPSAnc2hvcnRlcicsXHJcblxyXG4gIC8vIFxyXG4gIENTQ19XaWRlciA9ICd3aWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIENTQ19OYXJyb3dlciA9ICduYXJyb3dlcicsXHJcblxyXG4gIC8vIFxyXG4gIENTQ19CaWdnZXIgPSAnYmlnZ2VyJyxcclxuXHJcbiAgLy8gXHJcbiAgQ1NDX1NtYWxsZXIgPSAnc21hbGxlcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIENlbGxUeXBlRW51bSB7XHJcblxyXG4gIC8vIFxyXG4gIENMVF9TcXVhcmUgPSAnc3F1YXJlJyxcclxuXHJcbiAgLy8gXHJcbiAgQ0xUX1RleHQgPSAndGV4dCdcclxufVxyXG5cclxuLy8gcmVwcmVzZW50cyB0eXBlIG9mIGZvcm1hdHRpbmcgcHJlcyBtb2RlbFxyXG5leHBvcnQgZW51bSBUeXBlT2ZGb3JtYXRJdGVtIHtcclxuXHJcbiAgLy8gXHJcbiAgRlRfRm9ybWF0SXRlbSA9ICdmb3JtYXRJdGVtJyxcclxuXHJcbiAgLy8gXHJcbiAgRlRfRm9ybWF0Q29udGFpbmVyID0gJ2Zvcm1hdENvbnRhaW5lcicsXHJcblxyXG4gIC8vIFxyXG4gIEZUX0Zvcm1hdENvbnRyb2wgPSAnZm9ybWF0Q29udHJvbCdcclxufVxyXG5cclxuLy8gcmVwcmVzZW50cyB0eXBlIG9mIGZvcm1hdHRpbmcgY29udGFpbmVyXHJcbmV4cG9ydCBlbnVtIFR5cGVPZkZvcm1hdENvbnRhaW5lciB7XHJcblxyXG4gIC8vIFxyXG4gIEZUX0Zvcm1hdFBhbmUgPSAnZm9ybWF0UGFuZScsXHJcblxyXG4gIC8vIFxyXG4gIEZUX0Zvcm1hdFNlY3Rpb24gPSAnZm9ybWF0U2VjdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIEZUX0NvbGxhcHNpYmxlU2VjdGlvbiA9ICdjb2xsYXBzaWJsZVNlY3Rpb24nLFxyXG5cclxuICAvLyBcclxuICBGVF9Db21wb3NpdGVDb250YWluZXIgPSAnY29tcG9zaXRlQ29udGFpbmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgRlRfVW5pdENvbnRhaW5lciA9ICd1bml0Q29udGFpbmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgRlRfVGFiID0gJ3RhYicsXHJcblxyXG4gIC8vIFxyXG4gIEZUX1RhYkdyb3VwID0gJ3RhYkdyb3VwJ1xyXG59XHJcblxyXG4vLyByZXByZXNlbnRzIHR5cGUgb2YgZm9ybWF0dGluZyBjb250cm9sXHJcbmV4cG9ydCBlbnVtIFR5cGVPZkZvcm1hdENvbnRyb2wge1xyXG5cclxuICAvLyBcclxuICBGVF9Ob25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBGVF9OdW1lcmljQ29udHJvbCA9ICdudW1lcmljLWNvbnRyb2wnLFxyXG5cclxuICAvLyBcclxuICBGVF9UZXh0Q29udHJvbCA9ICd0ZXh0LWNvbnRyb2wnLFxyXG5cclxuICAvLyBcclxuICBGVF9Db2xvckNvbnRyb2wgPSAnY29sb3ItY29udHJvbCcsXHJcblxyXG4gIC8vIFxyXG4gIEZUX1NlbGVjdG9yQ29udHJvbCA9ICdzZWxlY3Rvci1jb250cm9sJyxcclxuXHJcbiAgLy8gXHJcbiAgRlRfVG9nZ2xlQ29udHJvbCA9ICd0b2dnbGUtY29udHJvbCdcclxufVxyXG5cclxuLy8gcmVwcmVzZW50cyB0eXBlIG9mIGZvcm1hdHRpbmcgd2lkZ2V0XHJcbmV4cG9ydCBlbnVtIEZvcm1hdFdpZGdldEtleSB7XHJcblxyXG4gIC8vIFxyXG4gIEZXS19Ob25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBGV0tfRm9udEZhbWlseSA9ICdmb250RmFtaWx5JyxcclxuXHJcbiAgLy8gXHJcbiAgRldLX0ZvbnRTaXplID0gJ2ZvbnRTaXplJyxcclxuXHJcbiAgLy8gXHJcbiAgRldLX0NvbG9yU3dhdGNoID0gJ2NvbG9yU3dhdGNoJyxcclxuXHJcbiAgLy8gXHJcbiAgRldLX0JvbGQgPSAnYm9sZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZXS19JdGFsaWNzID0gJ2l0YWxpY3MnLFxyXG5cclxuICAvLyBcclxuICBGV0tfVW5kZXJsaW5lID0gJ3VuZGVybGluZScsXHJcblxyXG4gIC8vIFxyXG4gIEZXS19MaW5lVmlzaWJpbGl0eSA9ICdsaW5lVmlzaWJpbGl0eScsXHJcblxyXG4gIC8vIFxyXG4gIEZXS19MaW5lUGF0dGVybiA9ICdsaW5lUGF0dGVybicsXHJcblxyXG4gIC8vIFxyXG4gIEZXS19MaW5lU2l6ZSA9ICdsaW5lU2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIEZXS19OdW1iZXJUeXBlID0gJ251bWVyaWNUeXBlJyxcclxuXHJcbiAgLy8gXHJcbiAgRldLX0RlY2ltYWxQbGFjZXMgPSAnZGVjaW1hbFBsYWNlcycsXHJcblxyXG4gIC8vIFxyXG4gIEZXS19UaG91c2FuZHNTZXBhcmF0b3IgPSAndGhvdXNhbmRzU2VwYXJhdG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgRldLX051bWVyaWNVbml0cyA9ICdudW1lcmljVW5pdHMnXHJcbn1cclxuXHJcbi8vIHJlcHJlc2VudHMgaWRlbnRpZmllciBmb3IgZWFjaCBub2RlIGluIGZvcm1hdCBwYW5lXHJcbmV4cG9ydCBlbnVtIEZvcm1hdE5vZGVJZGVudGlmaWVyIHtcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X05vbmVfS2V5ID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfV29ya2Jvb2tfS2V5ID0gJ3dvcmtib29rJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0ZvbnRfS2V5ID0gJ2ZvbnQnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfQ29sb3JfS2V5ID0gJ2NvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVzX0tleSA9ICdsaW5lcycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250QWxsX0tleSA9ICdmb250LWFsbCcsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250QWxsQ29udHJvbHNfS2V5ID0gJ2ZvbnQtYWxsLWNvbnRyb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0ZvbnRNb3JlX0tleSA9ICdmb250LW1vcmUnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfRm9udFdvcmtzaGVldFRpdGxlc19LZXkgPSAnd29ya3NoZWV0LXRpdGxlcycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250VG9vbFRpcF9LZXkgPSAnZm9udC10b29sdGlwJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0ZvbnRXb3Jrc2hlZXRfS2V5ID0gJ2ZvbnQtd29ya3NoZWV0JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0ZvbnREYXNoVGl0bGVzX0tleSA9ICdkYXNoLXRpdGxlcycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250U3RvcnlUaXRsZXNfS2V5ID0gJ3N0b3J5LXRpdGxlcycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250VGl0bGVzQ29udHJvbHNfS2V5ID0gJ3RpdGxlcy1jb250cm9scycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250VG9vbHRpcENvbnRyb2xzX0tleSA9ICd0b29sdGlwLWNvbnRyb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0ZvbnRXb3Jrc2hlZXRDb250cm9sc19LZXkgPSAnd29ya3NoZWV0LWNvbnRyb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVNb3JlX0tleSA9ICdsaW5lLW1vcmUnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZUdyaWRfS2V5ID0gJ2xpbmUtZ3JpZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lR3JpZFRhYnNfS2V5ID0gJ2xpbmUtZ3JpZC10YWJzJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVaZXJvX0tleSA9ICdsaW5lLXplcm8nLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZVplcm9UYWJzX0tleSA9ICdsaW5lLXplcm8tdGFicycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lQXhpc1RpY2tfS2V5ID0gJ2xpbmUtYXhpcy10aWNrJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzVGlja1RhYnNfS2V5ID0gJ2xpbmUtYXhpcy10aWNrLXRhYnMnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZUF4aXNSdWxlcl9LZXkgPSAnbGluZS1heGlzLXJ1bGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzUnVsZXJUYWJzX0tleSA9ICdsaW5lLWF4aXMtcnVsZXItdGFicycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lSGVhZGVyRGl2aWRlcl9LZXkgPSAnbGluZS1oZWFkZXItZGl2aWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lSGVhZGVyRGl2aWRlclRhYnNfS2V5ID0gJ2xpbmUtaGVhZGVyLWRpdmlkZXItdGFicycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lUGFuZURpdmlkZXJfS2V5ID0gJ2xpbmUtcGFuZURpdmlkZXInLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZVBhbmVEaXZpZGVyVGFic19LZXkgPSAnbGluZS1wYW5lRGl2aWRlci10YWJzJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVHcmlkQWxsX0tleSA9ICdsaW5lLWdyaWQtYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVHcmlkUm93X0tleSA9ICdsaW5lLWdyaWQtcm93JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVHcmlkQ29sdW1uX0tleSA9ICdsaW5lLWdyaWQtY29sdW1uJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVaZXJvQWxsX0tleSA9ICdsaW5lLXplcm8tYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVaZXJvUm93X0tleSA9ICdsaW5lLXplcm8tcm93JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVaZXJvQ29sdW1uX0tleSA9ICdsaW5lLXplcm8tY29sdW1uJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzVGlja0FsbF9LZXkgPSAnbGluZS1heGlzLXRpY2stYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzVGlja1Jvd19LZXkgPSAnbGluZS1heGlzLXRpY2stcm93JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzVGlja0NvbHVtbl9LZXkgPSAnbGluZS1heGlzLXRpY2stY29sdW1uJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzUnVsZXJBbGxfS2V5ID0gJ2xpbmUtYXhpcy1ydWxlci1hbGwnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZUF4aXNSdWxlclJvd19LZXkgPSAnbGluZS1heGlzLXJ1bGVyLXJvdycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lQXhpc1J1bGVyQ29sdW1uX0tleSA9ICdsaW5lLWF4aXMtcnVsZXItY29sdW1uJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVSZWZlcmVuY2VfS2V5ID0gJ2xpbmUtcmVmZXJlbmNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVEcm9wX0tleSA9ICdsaW5lLWRyb3AnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZVRyZW5kX0tleSA9ICdsaW5lLXRyZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVWaXNpYmlsaXR5X0tleSA9ICdsaW5lLXZpc2liaWxpdHknLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZVBhdHRlcm5fS2V5ID0gJ2xpbmUtcGF0dGVybicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9MaW5lV2lkdGhfS2V5ID0gJ2xpbmUtd2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZUNvbG9yX0tleSA9ICdsaW5lLWNvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X1RpY2tDb2xvcl9LZXkgPSAndGljay1jb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Cb3JkZXJQYXR0ZXJuX0tleSA9ICdib3JkZXItcGF0dGVybicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Cb3JkZXJDb2xvcl9LZXkgPSAnYm9yZGVyLWNvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0RpdmlkZXJDb2xvcl9LZXkgPSAnZGl2aWRlci1jb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9Gb250RmFtaWx5X0tleSA9ICdmb250LWZhbWlseS1rZXknLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfRm9udFNpemVfS2V5ID0gJ2ZvbnQtc2l6ZS1rZXknLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfQm9sZF9LZXkgPSAnYm9sZC1rZXknLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfSXRhbGljc19LZXkgPSAnaXRhbGljcy1rZXknLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfVW5kZXJsaW5lX0tleSA9ICd1bmRlcmxpbmUta2V5JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0ZvbnRDb2xvcl9LZXkgPSAnZm9udC1jb2xvci1rZXknLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTnVtYmVyX0NvbnRhaW5lcl9LZXkgPSAnbnVtYmVyLWNvbnRhaW5lcicsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9OdW1iZXJfVHlwZV9LZXkgPSAnbnVtYmVyLWNvbnRhaW5lci10eXBlJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X051bWJlcl9Vbml0c19LZXkgPSAnbnVtYmVyLWNvbnRhaW5lci11bml0cycsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm1hdF9OdW1iZXJfRGVjaW1hbF9LZXkgPSAnbnVtYmVyLWNvbnRhaW5lci1kZWNpbWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X051bWJlcl9UaG91c2FuZHNfU2VwYXJhdG9yX0tleSA9ICdudW1iZXItY29udGFpbmVyLXRob3VzYW5kcy1zZXBhcmF0b3InLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfRm9udFBpY2tlck1pbmltYWxfS2V5ID0gJ2ZvbnQtcGlja2VyLW1pbmltYWwnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfRm9udFBpY2tlckRlZmF1bHRfS2V5ID0gJ2ZvbnQtcGlja2VyLWRlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZVBpY2tlckRlZmF1bHRfS2V5ID0gJ2xpbmUtcGlja2VyLWRlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXRfTGluZVBpY2tlck5vVmlzX0tleSA9ICdsaW5lLXBpY2tlci1uby12aXNpYmlsaXR5JyxcclxuXHJcbiAgLy8gXHJcbiAgRm9ybWF0X0xpbmVBeGlzVGlja1BpY2tlcl9LZXkgPSAnbGluZS1heGlzLXRpY2stcGlja2VyJ1xyXG59XHJcblxyXG4vLyByZXByZXNlbnRzIHRoZSBjb2xvciBzd2F0Y2ggdGhhdCB3aWxsIGJlIHVzZWQgaW4gdGhlIENvbG9yQ29udHJvbFByZXNNb2RlbFxyXG5leHBvcnQgZW51bSBDb2xvclN3YXRjaFR5cGUge1xyXG5cclxuICAvLyBcclxuICBDU1RfRGFyayA9ICdkYXJrLXN3YXRjaCcsXHJcblxyXG4gIC8vIFxyXG4gIENTVF9MaWdodCA9ICdsaWdodC1zd2F0Y2gnXHJcbn1cclxuXHJcbi8vIHJlcHJlc2VudHMgdGhlIHR5cGUgb2YgYSBzdHlsZSBwaWNrZXIsIGFmZmVjdGluZyB0aGUgcHJldmlldyByZW5kZXJpbmcgYW5kLCBwb3NzaWJseSwgdGhlIGxheW91dFxyXG5leHBvcnQgZW51bSBQaWNrZXJUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUFRfTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfRm9udCA9ICdmb250JyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfTGluZSA9ICdsaW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgUFRfTnVtYmVyID0gJ251bWJlcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFVwZGF0ZVNjb3BlIHtcclxuXHJcbiAgLy8gXHJcbiAgVVNfV29ya3NoZWV0ID0gJ3dvcmtzaGVldCcsXHJcblxyXG4gIC8vIFxyXG4gIFVTX0Rhc2hib2FyZCA9ICdkYXNoYm9hcmQnLFxyXG5cclxuICAvLyBcclxuICBVU19RdWlja0ZpbHRlcnMgPSAncXVpY2stZmlsdGVycycsXHJcblxyXG4gIC8vIFxyXG4gIFVTX1N0b3J5ID0gJ3N0b3J5J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gUGFyYW1ldGVyQ3RybFR5cGVzRGlzcGxheU1vZGUge1xyXG5cclxuICAvLyBcclxuICBNT0RFX1RZUEVfSU4gPSAndHlwZV9pbicsXHJcblxyXG4gIC8vIFxyXG4gIE1PREVfQ09NUEFDVF9MSVNUID0gJ2NvbXBhY3QnLFxyXG5cclxuICAvLyBcclxuICBNT0RFX0xJU1QgPSAnbGlzdCcsXHJcblxyXG4gIC8vIFxyXG4gIE1PREVfU0xJREVSID0gJ3NsaWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIE1PREVfREFURVRJTUUgPSAnZGF0ZXRpbWUnXHJcbn1cclxuXHJcbi8vIGZsYWdzIGZvciBkaXNwbGF5IG9wdGlvbnNcclxuZXhwb3J0IGVudW0gUGFyYW1ldGVyQ3RybFR5cGVzRGlzcGxheUZsYWcge1xyXG5cclxuICAvLyBcclxuICBESVNQTEFZX0NVU1RPTV9USVRMRSA9ICdjdXN0b21fdGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBESVNQTEFZX0hJREVfU0xJREVSX1NMSURFUiA9ICdoaWRlX3NsaWRlcl9zbGlkZXInLFxyXG5cclxuICAvLyBcclxuICBESVNQTEFZX0hJREVfU0xJREVSX1JFQURPVVQgPSAnaGlkZV9zbGlkZXJfcmVhZG91dCcsXHJcblxyXG4gIC8vIFxyXG4gIERJU1BMQVlfSElERV9TTElERVJfQlVUVE9OUyA9ICdoaWRlX3NsaWRlcl9idXR0b25zJ1xyXG59XHJcblxyXG4vLyBUaGUgZm9sbG93IHN1cHBvcnRzIDEwMjQgY3VzdG9tIHBhbGV0dGVzLCBlYWNoIHdpdGggNG0gc2hhcGVzLiBFbmNvZGluZyBpcyBwYWxldHRlICZsdDsmbHQ7IFBhbGV0dGVTaGlmdCB8IHNoYXBlLlxyXG5leHBvcnQgZW51bSBTaGFwZUVuY29kZUNvbnN0YW50cyB7XHJcblxyXG4gIC8vIFNoaWZ0IHZhbHVlIGZvciBwYWxldHRlXHJcbiAgRW5jb2RlUGFsZXR0ZVNoaWZ0ID0gJ3BhbGV0dGVTaGlmdCcsXHJcblxyXG4gIC8vIE1hc2sgZm9yIGdldHRpbmcgcGFsZXR0ZSBmcm9tIGVuY29kZWQgdmFsdWUuIChUaGVuIHNoaWZ0IGRvd24pXHJcbiAgRW5jb2RlUGFsZXR0ZU1hc2sgPSAncGFsZXR0ZU1hc2snLFxyXG5cclxuICAvLyBNYXNrIGZvciBnZXR0aW5nIHNoYXBlIGZyb20gZW5jb2RlZCB2YWx1ZVxyXG4gIEVuY29kZVNoYXBlTWFzayA9ICdzaGFwZU1hc2snXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTaGFwZVR5cGUge1xyXG5cclxuICAvLyBcclxuICBTaGFwZUNpcmNsZSA9ICdjaXJjbGUnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZVNxdWFyZSA9ICdzcXVhcmUnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZVBsdXMgPSAncGx1cycsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlVGltZXMgPSAndGltZXMnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZUFzdGVyaXNrID0gJ2FzdGVyaXNrJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVEaWFtb25kID0gJ2RpYW1vbmQnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZVRyaWFuZ2xlID0gJ3RyaWFuZ2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVEb3duVHJpYW5nbGUgPSAnZG93bi10cmlhbmdsZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlTGVmdFRyaWFuZ2xlID0gJ2xlZnQtdHJpYW5nbGUnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZVJpZ2h0VHJpYW5nbGUgPSAncmlnaHQtdHJpYW5nbGUnLFxyXG5cclxuICAvLyBcclxuICBNYXhBbGxTaGFwZXMgPSAnaW52YWxpZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNoYXBlUGFsZXR0ZSB7XHJcblxyXG4gIC8vIGJ1aWx0LWluIHBhbGV0dGVcclxuICBTaGFwZVBhbGV0dGVGaWxsZWQgPSAnZmlsbGVkJyxcclxuXHJcbiAgLy8gY3VzdG9tIHBhbGV0dGVzXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tMSA9ICdjdXN0b20xJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tMiA9ICdjdXN0b20yJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tMyA9ICdjdXN0b20zJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tNCA9ICdjdXN0b200JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tNSA9ICdjdXN0b201JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tNiA9ICdjdXN0b202JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tNyA9ICdjdXN0b203JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tOCA9ICdjdXN0b204JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tOSA9ICdjdXN0b205JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlQ3VzdG9tMTAgPSAnY3VzdG9tMTAnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZVBhbGV0dGVDdXN0b20xMSA9ICdjdXN0b20xMScsXHJcblxyXG4gIC8vIGFuZCBzbyBvbi4uLlxyXG4gIFNoYXBlUGFsZXR0ZUN1c3RvbTEyID0gJ2N1c3RvbTEyJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQYWxldHRlSGlkZGVuID0gJ2hpZGRlbidcclxufVxyXG5cclxuLy8gU2hhcGVUeXBlIGFuZCBwYWxldHRlIG1hcHBlZCBpbnRvIGEgc2luZ2xlIHZhbHVlLiBUaGlzIGVudW0gZGVwZW5kcyBvbiBTaGFwZVR5cGUgYW5kIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBTaGFwZU1hbmFnZXI6OkludEVuY29kZS5cclxuZXhwb3J0IGVudW0gU2hhcGVJRCB7XHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURDaXJjbGUgPSAnc2hhcGVJRENpcmNsZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURTcXVhcmUgPSAnc2hhcGVJRFNxdWFyZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURQbHVzID0gJ3NoYXBlSURQbHVzJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVJRFRpbWVzID0gJ3NoYXBlSURUaW1lcycsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURBc3RlcmlzayA9ICdzaGFwZUlEQXN0ZXJpc2snLFxyXG5cclxuICAvLyBcclxuICBTaGFwZUlERGlhbW9uZCA9ICdzaGFwZUlERGlhbW9uZCcsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURUcmlhbmdsZSA9ICdzaGFwZUlEVHJpYW5nbGUnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZUlERG93blRyaWFuZ2xlID0gJ3NoYXBlSUREb3duVHJpYW5nbGUnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZUlETGVmdFRyaWFuZ2xlID0gJ3NoYXBlSURMZWZ0VHJpYW5nbGUnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZUlEUmlnaHRUcmlhbmdsZSA9ICdzaGFwZUlEUmlnaHRUcmlhbmdsZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURGaWxsZWRDaXJjbGUgPSAnc2hhcGVJREZpbGxlZENpcmNsZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURGaWxsZWRTcXVhcmUgPSAnc2hhcGVJREZpbGxlZFNxdWFyZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURGaWxsZWRQbHVzID0gJ3NoYXBlSURGaWxsZWRQbHVzJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVJREZpbGxlZFRpbWVzID0gJ3NoYXBlSURGaWxsZWRUaW1lcycsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlSURGaWxsZWRTdGFyID0gJ3NoYXBlSURGaWxsZWRTdGFyJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVJREZpbGxlZERpYW1vbmQgPSAnc2hhcGVJREZpbGxlZERpYW1vbmQnLFxyXG5cclxuICAvLyBcclxuICBTaGFwZUlERmlsbGVkVHJpYW5nbGUgPSAnc2hhcGVJREZpbGxlZFRyaWFuZ2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVJREZpbGxlZERvd25UcmlhbmdsZSA9ICdzaGFwZUlERmlsbGVkRG93blRyaWFuZ2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVJREZpbGxlZExlZnRUcmlhbmdsZSA9ICdzaGFwZUlERmlsbGVkTGVmdFRyaWFuZ2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVJREZpbGxlZFJpZ2h0VHJpYW5nbGUgPSAnc2hhcGVJREZpbGxlZFJpZ2h0VHJpYW5nbGUnLFxyXG5cclxuICAvLyAwKyhTaGFwZVBhbGV0dGVIaWRkZW48PEVuY29kZVBhbGV0dGVTaGlmdClcclxuICBTaGFwZUlEVW5zY2FsZWRGaWxsZWRDaXJjbGUgPSAnc2hhcGVJRFVuc2NhbGVkRmlsbGVkQ2lyY2xlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTGVnZW5kVHlwZUVudW0ge1xyXG5cclxuICAvLyBcclxuICBDb2xvciA9ICdjb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXBlID0gJ3NoYXBlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2l6ZSA9ICdzaXplJyxcclxuXHJcbiAgLy8gXHJcbiAgSGlnaGxpZ2h0TGVnZW5kID0gJ2hpZ2hsaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIE1hcCA9ICdtYXAnLFxyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQnJ1c2hTcGVjaWFsRmllbGRzIHtcclxuXHJcbiAgLy8gXHJcbiAgQlNGX0ludmFsaWQgPSAnaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIEJTRl9BbGxGaWVsZHMgPSAnYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgQlNGX0RhdGVzQW5kVGltZXMgPSAnZGF0ZS10aW1lJyxcclxuXHJcbiAgLy8gXHJcbiAgQlNGX1RyYWlscyA9ICd0cmFpbHMnLFxyXG5cclxuICAvLyBcclxuICBCU0ZfRW50aXJlVGFibGUgPSAndGFibGUnXHJcbn1cclxuXHJcbi8vIHdoYXQga2luZCBvZiBjdXJ2ZSB3aWxsIGJlIGZpdCB0byB0aGUgZGF0YSBnaXZlbiByZXNwb25zZSB2YXJpYWJsZSBZIGFuZCBhIHNpbmdsZSBxdWFudGl0YXRpdmUgZmFjdG9yIFhcclxuZXhwb3J0IGVudW0gVHJlbmRMaW5lRml0VHlwZSB7XHJcblxyXG4gIC8vIGVxdWF0aW9uID0gWSB+IFggKyAxXHJcbiAgVHJlbmRMaW5lRml0VHlwZV9fTGluZWFyRml0ID0gJ2xpbmVhcicsXHJcblxyXG4gIC8vIGVxdWF0aW9uID0gWSB+IFheMiArIFggKyAxXHJcbiAgVHJlbmRMaW5lRml0VHlwZV9fUG9seW5vbWlhbEZpdCA9ICdwb2x5bm9taWFsJyxcclxuXHJcbiAgLy8gZXF1YXRpb24gPSBZIH4gbG9nKFgpXHJcbiAgVHJlbmRMaW5lRml0VHlwZV9fTG9nRml0ID0gJ2xvZycsXHJcblxyXG4gIC8vIGVxdWF0aW9uID0gWSB+IGV4cChYKVxyXG4gIFRyZW5kTGluZUZpdFR5cGVfX0V4cEZpdCA9ICdleHAnLFxyXG5cclxuICAvLyBlcXVhdGlvbiA9IFkgfiBYXmJcclxuICBUcmVuZExpbmVGaXRUeXBlX19Qb3dlckZpdCA9ICdwb3dlcidcclxufVxyXG5cclxuLy8gdHlwZSBmb3IgY29tcG9uZW50cyBvZiBhIGNvbW1hbmQgcHJlc2VudGF0aW9uIG1vZGVsXHJcbmV4cG9ydCBlbnVtIENvbW1hbmRzRW51bUl0ZW1UeXBlIHtcclxuXHJcbiAgLy8gaXRlbSB3aXRoIHRleHQgYW5kIGFuIGFzc29jaWF0ZWQgY29tbWFuZFxyXG4gIEl0ZW0gPSAnaXRlbScsXHJcblxyXG4gIC8vIGR5bmFtaWMgcmFuZ2Ugb2YgaXRlbXMgZ2VuZXJhdGVkIGJ5IGFuIGFzc29jaWF0ZWQgY29tbWFuZFxyXG4gIEl0ZW1SYW5nZSA9ICdyYW5nZScsXHJcblxyXG4gIC8vIGxpc3Qgb2Ygc3ViY29tbWFuZHNcclxuICBTdWJDb21tYW5kc0l0ZW0gPSAnc3ViY29tbWFuZHMnLFxyXG5cclxuICAvLyBsb2dpY2FsIHNlcGFyYXRpb24gYmV0d2VlbiBncm91cHMgb2YgY29tbWFuZHNcclxuICBTZXBhcmF0b3JJdGVtID0gJ3NlcGFyYXRvcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFBhcmFtZXRlclR5cGVzRG9tYWluVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIERvbWFpbl9BbnkgPSAnYW55JyxcclxuXHJcbiAgLy8gXHJcbiAgRG9tYWluX0xpc3QgPSAnbGlzdCcsXHJcblxyXG4gIC8vIFxyXG4gIERvbWFpbl9SYW5nZSA9ICdyYW5nZSdcclxufVxyXG5cclxuLy8gQ2F0ZWdvcmljYWwgZmlsdGVyIHR5cGUgdXNhZ2UuXHJcbmV4cG9ydCBlbnVtIEZpbHRlcnNDYXRlZ29yaWNhbEZpbHRlclR5cGUge1xyXG5cclxuICAvLyBcclxuICBWaXN1YWwgPSAndmlzdWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgRXh0cmFjdCA9ICdleHRyYWN0JyxcclxuXHJcbiAgLy8gXHJcbiAgR3JvdXAgPSAnZ3JvdXAnXHJcbn1cclxuXHJcbi8vIFF1YW50aXRhdGl2ZSBmaWx0ZXIgdHlwZSB1c2FnZS5cclxuZXhwb3J0IGVudW0gRmlsdGVyc1F1YW50aXRhdGl2ZUZpbHRlclR5cGUge1xyXG5cclxuICAvLyBcclxuICBWaXN1YWwgPSAndmlzdWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgRGF0YVNvdXJjZSA9ICdkYXRhc291cmNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRXh0cmFjdCA9ICdleHRyYWN0J1xyXG59XHJcblxyXG4vLyBGaWx0ZXIgY29udGV4dCBkb21haW5zXHJcbmV4cG9ydCBlbnVtIEZpbHRlcnNEb21haW5UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUmVsZXZhbnQgPSAncmVsZXZhbnQnLFxyXG5cclxuICAvLyBcclxuICBDYXNjYWRpbmcgPSAnY2FzY2FkaW5nJyxcclxuXHJcbiAgLy8gXHJcbiAgQ2FzY2FkaW5nQ29udGV4dCA9ICdjYXNjYWRpbmctY29udGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIENvbnRleHQgPSAnY29udGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIERhdGFiYXNlID0gJ2FsbCdcclxufVxyXG5cclxuLy8gU2VsZWN0aW9uIChyZWxhdGlvbmFsIG9ubHkpIC0gUmFuZ2UgdHlwZVxyXG5leHBvcnQgZW51bSBGaWx0ZXJzUmFuZ2VUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgQWxsID0gJ2FsbCcsXHJcblxyXG4gIC8vIFxyXG4gIFNlbGVjdGVkID0gJ3NlbGVjdGVkJyxcclxuXHJcbiAgLy8gXHJcbiAgTWFudWFsID0gJ21hbnVhbCdcclxufVxyXG5cclxuLy8gUGF0dGVybiBiYXNlZCBmaWx0ZXJpbmdcclxuZXhwb3J0IGVudW0gRmlsdGVyc1BhdHRlcm5UeXBlIHtcclxuXHJcbiAgLy8gc3RhcnRzIHdpdGggdGhlIHNwZWNpZmllZCBwYXR0ZXJuIHRleHRcclxuICBTdGFydHNXaXRoID0gJ3N0YXJ0cy13aXRoJyxcclxuXHJcbiAgLy8gZW5kcyB3aXRoIHRoZSBzcGVjaWZpZWQgcGF0dGVybiB0ZXh0XHJcbiAgRW5kc1dpdGggPSAnZW5kcy13aXRoJyxcclxuXHJcbiAgLy8gY29udGFpbnMgdGhlIHNwZWNpZmllZCBwYXR0ZXJuIHRleHRcclxuICBDb250YWlucyA9ICdjb250YWlucycsXHJcblxyXG4gIC8vIGV4YWN0bHkgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIHBhdHRlcm4gdGV4dFxyXG4gIEV4YWN0TWF0Y2ggPSAnZXhhY3QtbWF0Y2gnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGaWx0ZXJzTGltaXRUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgQnlGaWVsZCA9ICdieS1maWVsZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm11bGEgPSAnZm9ybXVsYSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZpbHRlcnNDb25kaXRpb25UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gXHJcbiAgQnlGaWVsZCA9ICdieS1maWVsZCcsXHJcblxyXG4gIC8vIFxyXG4gIEZvcm11bGEgPSAnZm9ybXVsYSdcclxufVxyXG5cclxuLy8gSGlnaGVyIGxldmVsIGludGVwcmV0YXRpb24gb2YgYSByZWxhdGl2ZSBkYXRlIGZpbHRlcidzIHJhbmdlXHJcbmV4cG9ydCBlbnVtIEZpbHRlcnNSZWxhdGl2ZURhdGVSYW5nZVR5cGUge1xyXG5cclxuICAvLyBcclxuICBSYW5nZUN1cnJlbnQgPSAnY3VycicsXHJcblxyXG4gIC8vIFxyXG4gIFJhbmdlQ3VycmVudFRvRGF0ZSA9ICd0b2RhdGUnLFxyXG5cclxuICAvLyBcclxuICBSYW5nZUxhc3QxID0gJ2xhc3QnLFxyXG5cclxuICAvLyBcclxuICBSYW5nZU5leHQxID0gJ25leHQnLFxyXG5cclxuICAvLyBcclxuICBSYW5nZUxhc3ROID0gJ2xhc3RuJyxcclxuXHJcbiAgLy8gXHJcbiAgUmFuZ2VOZXh0TiA9ICduZXh0bicsXHJcblxyXG4gIC8vIFxyXG4gIFJhbmdlT3RoZXIxID0gJ290aGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgUmFuZ2VPdGhlck4gPSAnb3RoZXJuJyxcclxuXHJcbiAgLy8gXHJcbiAgUmFuZ2VJbnZhbGlkID0gJ2ludmFsaWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGaWx0ZXJzRmlsdGVyTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIExvY2FsID0gJ2xvY2FsJyxcclxuXHJcbiAgLy8gXHJcbiAgR2xvYmFsID0gJ2dsb2JhbCcsXHJcblxyXG4gIC8vIFxyXG4gIFNoYXJlZCA9ICdzaGFyZWQnLFxyXG5cclxuICAvLyBcclxuICBNYXBwZWRHbG9iYWwgPSAnbWFwcGVkLWdsb2JhbCdcclxufVxyXG5cclxuLy8gSG93IHVuY29tbWl0dGVkIHNlbGVjdGlvbiBzdGF0ZSBpcyBiZWluZyB0cmFja2VkXHJcbmV4cG9ydCBlbnVtIEZpbHRlcnNTZWxlY3Rpb25UcmFja2luZyB7XHJcblxyXG4gIC8vIFBhc3NlZCBtZW1iZXJzIGhhdmUgYmVlbiB1cGRhdGVkOiBlYWNoIGluY2x1ZGVkIG1lbWJlcnMnIHNlbGVjdGlvbiBzdGF0ZSBzaG91bGQgYmUgZmxpcHBlZCBmcm9tIGl0cyBpbml0aWFsIHN0YXRlLlxyXG4gIERpZmZlcmVuY2VzRnJvbUJhc2UgPSAnZGlmZmVyZW5jZXMnLFxyXG5cclxuICAvLyBQYXNzZWQgbWVtYmVycyBzaG91bGQgYmUgdW5jb25kaXRpb25hbGx5IHNlbGVjdGVkXHJcbiAgU2VsZWN0ZWRWYWx1ZXMgPSAnc2VsZWN0ZWQnLFxyXG5cclxuICAvLyBEb24ndCBzYXZlIGFueSBzZWxlY3Rpb24gc3RhdGUuIFRoaXMgc2F2ZXMgbWVtb3J5IGF0IHRoZSBjb3N0IG9mIG5vdCBiZWluZyByZWNvdmVyYWJsZSBpZiB0aGUgY29udHJvbGxlciBpcyBnb25lLlxyXG4gIE5vbmUgPSAnZG9udC10cmFjay1zZWxlY3Rpb24tc3RhdGUnXHJcbn1cclxuXHJcbi8vIGZpbHRlciB1cGRhdGUgb3B0aW9uc1xyXG5leHBvcnQgZW51bSBGaWx0ZXJVcGRhdGVUeXBlIHtcclxuXHJcbiAgLy8gc2VsZWN0IGFsbCB2YWx1ZXMgaW4gZmlsdGVyXHJcbiAgQUxMID0gJ2ZpbHRlci1hbGwnLFxyXG5cclxuICAvLyBhZGQgaXRlbXMgdG8gZXhpc3RpbmcgZmlsdGVyXHJcbiAgQUREID0gJ2ZpbHRlci1hZGQnLFxyXG5cclxuICAvLyByZW1vdmUgaXRlbXMgZnJvbSBleGlzdGluZyBmaWx0ZXJcclxuICBSRU1PVkUgPSAnZmlsdGVyLXJlbW92ZScsXHJcblxyXG4gIC8vIHJlcGxhY2UgZXhpc3RpbmcgZmlsdGVyIHdpdGggZ2l2ZW4gb3B0aW9uc1xyXG4gIFJFUExBQ0UgPSAnZmlsdGVyLXJlcGxhY2UnLFxyXG5cclxuICAvLyBtaXh0dXJlIG9mIGFkZCArIHJlbW92YWxcclxuICBERUxUQSA9ICdmaWx0ZXItZGVsdGEnLFxyXG5cclxuICAvLyBjbGVhciB0aGUgZmlsdGVyXHJcbiAgQ0xFQVIgPSAnZmlsdGVyLWNsZWFyJyxcclxuXHJcbiAgLy8gZWFjaCB2YWx1ZSBpbiB0aGUgZmlsdGVyLCBidXQgaW5kaXZpZHVhbGx5IHNlbGVjdGVkXHJcbiAgRUFDSCA9ICdmaWx0ZXItZWFjaCdcclxufVxyXG5cclxuLy8gYWRkaXRpb25hbCBjb250ZXh0IG5lZWRlZCB0byBwZXJmb3JtIGEgZmlsdGVyIHVwZGF0ZSBjb3JyZWN0bHlcclxuZXhwb3J0IGVudW0gRmlsdGVyVXBkYXRlUXVhbGlmaWVyVHlwZSB7XHJcblxyXG4gIC8vIHRoZSBmaWx0ZXIncyBkb21haW4gaXMgYSBtYW51YWxseSB0eXBlZCBpbiBvciBzZWxlY3RlZCBzdWJzZXQgb2YgdGhlIGZ1bGwgZG9tYWluXHJcbiAgQ1VTVE9NX0RPTUFJTiA9ICdmaWx0ZXItdXBkYXRlLWN1c3RvbS1kb21haW4nLFxyXG5cclxuICAvLyBubyBxdWFsaWZpY2F0aW9ucyB0byB0aGUgZmlsdGVyLXVwZGF0ZSBhcmUgc3BlY2lmaWVkXHJcbiAgTk9fUVVBTElGSUNBVElPTlMgPSAnZmlsdGVyLXVwZGF0ZS1uby1xdWFsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRmlsdGVyc1ByZXNldFR5cGUge1xyXG5cclxuICAvLyBrZWVwIHRoZSBzZWxlY3Rpb24gY2hvc2VuIGJ5IHRoZSB1c2VyXHJcbiAgTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gdXBkYXRlIHRvIHRoZSBsYXRlc3QgdmFsdWVzIGluIHRoZSBkYXRhYmFzZVxyXG4gIExhc3RWYWx1ZXMgPSAnbGFzdC12YWx1ZXMnLFxyXG5cclxuICAvLyBcclxuICBDdXJyZW50VmFsdWVzID0gJ2N1cnJlbnQtdmFsdWVzJ1xyXG59XHJcblxyXG4vLyBOb3RlOiBhbiBlbXB0eSByYW5nZSAoYm90aCBlbmRwb2ludHMgTlVMTCkgaXMgZGVmaW5lZCB0byBtZWFuICdhbGwgbm9uLU5VTEwgdmFsdWVzJywgYnkgc3ltbWV0cnkgd2l0aCB3aGF0IGEgc2luZ2xlLWVuZGVkIHJhbmdlIG1lYW5zLCBzbyBhbiBlbXB0eSByYW5nZSBhbmQgSW5SYW5nZSByZWFsbHkgbWVhbnMgTm9uTnVsbCwgYW5kIGFuIGVtcHR5IHJhbmdlIGFuZCBuUmFuZ2VPck51bGwgcmVhbGx5IG1lYW5zIEFsbFxyXG5leHBvcnQgZW51bSBGaWx0ZXJzUXVhbnRpdGF0aXZlSW5jbHVkZWRWYWx1ZXMge1xyXG5cclxuICAvLyB0aGUgaWRlbnRpdHkgZmlsdGVyIChldmVyeXRoaW5nIGlzIGluY2x1ZGVkKVxyXG4gIEFsbCA9ICdpbmNsdWRlLWFsbCcsXHJcblxyXG4gIC8vIGFsbCB2YWx1ZXMgd2hpY2ggYXJlIG5vbi1udWxscHRyXHJcbiAgTm9uTnVsbCA9ICdpbmNsdWRlLW5vbi1udWxsJyxcclxuXHJcbiAgLy8gYWxsIHZhbHVlcyB3aGljaCBhcmUgbnVsbHB0clxyXG4gIE51bGwgPSAnaW5jbHVkZS1udWxsJyxcclxuXHJcbiAgLy8gb25seSB2YWx1ZXMgd2l0aGluIHRoZSByYW5nZSBhbmQgd2hpY2ggYXJlIG5vbiBudWxsXHJcbiAgSW5SYW5nZSA9ICdpbmNsdWRlLXJhbmdlJyxcclxuXHJcbiAgLy8gdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2Ugb3Igd2hpY2ggYXJlIG51bGxwdHJcclxuICBJblJhbmdlT3JOdWxsID0gJ2luY2x1ZGUtcmFuZ2Utb3ItbnVsbCcsXHJcblxyXG4gIC8vIGFsbCB2YWx1ZXMgYXJlIGZpbHRlcmVkIG91dC4gVXNlciBjYW5ub3QgY3JlYXRlIHRoaXMgdHlwZSBvZiBmaWx0ZXIgZGlyZWN0bHk7IGlzIG9ubHkgY3JlYXRlZCB3aGVuIHR3byBmaWx0ZXJzIGludGVyc2VjdCBhbmQgdGhlaXIgaW5jbHVkZWRWYWx1ZXMgY29uZmxpY3Qgc28gdGhleSB3aWxsIGluY2x1ZGUgbm90aGluZyAoZS5nLiwgTm9uTnVsbCB3aXRoIE51bGwpXHJcbiAgTm9uZSA9ICdpbmNsdWRlLW5vbmUnXHJcbn1cclxuXHJcbi8vIEZpc2NhbCBZZWFyIFN0YXJ0aW5nIE1vbnRoXHJcbmV4cG9ydCBlbnVtIEZZU1ZhbHVlcyB7XHJcblxyXG4gIC8vIFxyXG4gIEZZU1ZhbHVlc19fRllTX0pBTlVBUlkgPSAnZnlzLWphbnVhcnknLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19GRUJSVUFSWSA9ICdmeXMtZmVicnVhcnknLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19NQVJDSCA9ICdmeXMtbWFyY2gnLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19BUFJJTCA9ICdmeXMtYXByaWwnLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19NQVkgPSAnZnlzLW1heScsXHJcblxyXG4gIC8vIFxyXG4gIEZZU1ZhbHVlc19fRllTX0pVTkUgPSAnZnlzLWp1bmUnLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19KVUxZID0gJ2Z5cy1qdWx5JyxcclxuXHJcbiAgLy8gXHJcbiAgRllTVmFsdWVzX19GWVNfQVVHVVNUID0gJ2Z5cy1hdWd1c3QnLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19TRVBURU1CRVIgPSAnZnlzLXNlcHRlbWJlcicsXHJcblxyXG4gIC8vIFxyXG4gIEZZU1ZhbHVlc19fRllTX09DVE9CRVIgPSAnZnlzLW9jdG9iZXInLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19OT1ZFTUJFUiA9ICdmeXMtbm92ZW1iZXInLFxyXG5cclxuICAvLyBcclxuICBGWVNWYWx1ZXNfX0ZZU19ERUNFTUJFUiA9ICdmeXMtZGVjZW1iZXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBQYWdlTmF2RmxhZ3NGbGFncyB7XHJcblxyXG4gIC8vIFxyXG4gIE5vbmUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIExvb3BlZFBsYXliYWNrID0gJ2xvb3BlZC1wbGF5YmFjaycsXHJcblxyXG4gIC8vIFxyXG4gIFNob3dEcm9wZG93biA9ICdzaG93LWRyb3Bkb3duJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hvd1NsaWRlciA9ICdzaG93LXNsaWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFNob3dQbGF5Q3RybHMgPSAnc2hvdy1wbGF5LWNvbnRyb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hvd1RyYWlsQ3RybHMgPSAnc2hvdy10cmFpbC1jb250cm9scycsXHJcblxyXG4gIC8vIFxyXG4gIFN5bmNocm9uaXplZCA9ICdzeW5jaHJvbml6ZWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBQYWdlVHJhaWxFbnVtc01hcmtzVG9UcmFpbCB7XHJcblxyXG4gIC8vIFxyXG4gIE1hbnVhbCA9ICdtYW51YWwnLFxyXG5cclxuICAvLyBcclxuICBBbGwgPSAnYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgU2VsZWN0ZWQgPSAnc2VsZWN0ZWQnLFxyXG5cclxuICAvLyBcclxuICBIaWdobGlnaHRlZCA9ICdoaWdobGlnaHRlZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFBhZ2VUcmFpbEVudW1zVHJhaWxUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTWFya3MgPSAnbWFya3MnLFxyXG5cclxuICAvLyBcclxuICBUcmFpbHMgPSAndHJhaWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgQm90aCA9ICdib3RoJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gUGFnZVRyYWlsRW51bXNUcmFpbEVmZmVjdCB7XHJcblxyXG4gIC8vIFxyXG4gIE5vbmUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIFRyYW5zcGFyZW5jeSA9ICd0cmFuc3BhcmVuY3knXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBQYWdlVHJhaWxFbnVtc1RyYWlsRmxhZ3Mge1xyXG5cclxuICAvLyBcclxuICBOb0ZsYWdzID0gJ25vLWZsYWdzJyxcclxuXHJcbiAgLy8gXHJcbiAgRHJhd0lmSGlnaGxpZ2h0ZWQgPSAnZHJhdy1pZi1oaWdobGlnaHRlZCcsXHJcblxyXG4gIC8vIFxyXG4gIERyYXdJZlNlbGVjdGVkID0gJ2RyYXctaWYtc2VsZWN0ZWQnLFxyXG5cclxuICAvLyBcclxuICBEcmF3QWx3YXlzID0gJ2RyYXctYWx3YXlzJyxcclxuXHJcbiAgLy8gXHJcbiAgTGluZXNFbmFibGVkID0gJ2xpbmVzLWVuYWJsZWQnXHJcbn1cclxuXHJcbi8vIHNpbXBsZSBwYWdlIGNoYW5nZSBjb21tYW5kc1xyXG5leHBvcnQgZW51bSBDaGFuZ2VQYWdlQ2hhbmdlVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFRvRmlyc3QgPSAnZmlyc3QnLFxyXG5cclxuICAvLyBcclxuICBUb05leHQgPSAnbmV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIFRvUHJldiA9ICdwcmV2aW91cycsXHJcblxyXG4gIC8vIFxyXG4gIFRvTGFzdCA9ICdsYXN0J1xyXG59XHJcblxyXG4vLyBTdG9wLCBzdGFydCBpbiBhIGRpcmVjdGlvbiwgb3Igc2V0IHNwZWVkIG9mIHBhZ2UgYW5pbWF0aW9uXHJcbmV4cG9ydCBlbnVtIENoYW5nZVBhZ2VQYWdlQW5pbWF0aW9uQ29udHJvbCB7XHJcblxyXG4gIC8vIFxyXG4gIFN0b3AgPSAnc3RvcCcsXHJcblxyXG4gIC8vIFxyXG4gIEZvcndhcmQgPSAnZm9yd2FyZCcsXHJcblxyXG4gIC8vIFxyXG4gIEJhY2t3YXJkID0gJ2JhY2t3YXJkJyxcclxuXHJcbiAgLy8gXHJcbiAgU2xvd1NwZWVkID0gJ3Nsb3ctc3BlZWQnLFxyXG5cclxuICAvLyBcclxuICBOb3JtYWxTcGVlZCA9ICdub3JtYWwtc3BlZWQnLFxyXG5cclxuICAvLyBcclxuICBGYXN0U3BlZWQgPSAnZmFzdC1zcGVlZCcsXHJcblxyXG4gIC8vIFxyXG4gIFRvZ2dsZUZvcndhcmQgPSAndG9nZ2xlLWZvcndhcmQnLFxyXG5cclxuICAvLyBcclxuICBUb2dnbGVCYWNrd2FyZCA9ICd0b2dnbGUtYmFja3dhcmQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBMZWdlbmRJdGVtTGF5b3V0IHtcclxuXHJcbiAgLy8gXHJcbiAgTGVnZW5kSXRlbUxheW91dF9fTGVnZW5kSXRlbUxheW91dFZlcnQgPSAndmVydGljYWwnLFxyXG5cclxuICAvLyBcclxuICBMZWdlbmRJdGVtTGF5b3V0X19MZWdlbmRJdGVtTGF5b3V0SG9yeiA9ICdob3Jpem9udGFsJyxcclxuXHJcbiAgLy8gXHJcbiAgTGVnZW5kSXRlbUxheW91dF9fTGVnZW5kSXRlbUxheW91dEdyaWQgPSAnZ3JpZCcsXHJcblxyXG4gIC8vIFxyXG4gIExlZ2VuZEl0ZW1MYXlvdXRfX0xlZ2VuZEl0ZW1MYXlvdXRBdXRvID0gJ2F1dG8nXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBMZWdlbmRJdGVtT3JkZXIge1xyXG5cclxuICAvLyBcclxuICBMZWdlbmRJdGVtT3JkZXJfX0xlZ2VuZEl0ZW1PcmRlck5vcm1hbCA9ICdub3JtYWwnLFxyXG5cclxuICAvLyBcclxuICBMZWdlbmRJdGVtT3JkZXJfX0xlZ2VuZEl0ZW1PcmRlclJldmVyc2VkID0gJ3JldmVyc2VkJyxcclxuXHJcbiAgLy8gXHJcbiAgTGVnZW5kSXRlbU9yZGVyX19MZWdlbmRJdGVtT3JkZXJBdXRvID0gJ2F1dG8nXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTaXplTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNpemVNb2RlQXV0byA9ICdzaXplLW1vZGUtYXV0bycsXHJcblxyXG4gIC8vIFxyXG4gIFNpemVNb2RlRml4ZWQgPSAnc2l6ZS1tb2RlLWZpeGVkJyxcclxuXHJcbiAgLy8gXHJcbiAgU2l6ZU1vZGVNaW4gPSAnc2l6ZS1tb2RlLW1pbicsXHJcblxyXG4gIC8vIFxyXG4gIFNpemVNb2RlTWF4ID0gJ3NpemUtbW9kZS1tYXgnLFxyXG5cclxuICAvLyBcclxuICBTaXplTW9kZVJhbmdlID0gJ3NpemUtbW9kZS1yYW5nZScsXHJcblxyXG4gIC8vIFxyXG4gIFNpemVNb2RlRml0V2lkdGggPSAnc2l6ZS1tb2RlLWZpdC13aWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIFNpemVNb2RlRml0SGVpZ2h0ID0gJ3NpemUtbW9kZS1oZWlnaHQnLFxyXG5cclxuICAvLyBcclxuICBTaXplTW9kZVNjcm9sbEhlaWdodCA9ICdzaXplLW1vZGUtc2Nyb2xsLWhlaWdodCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNob3dNZUNvbW1hbmRUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX1RFWFQgPSAndGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9IRUFUID0gJ2hlYXQnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfU1BPVFRBQkxFID0gJ3Nwb3QtdGFibGUnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfQkFSSE9SSVogPSAnYmFyLWhvcml6JyxcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX0JBUlNUQUNLID0gJ2Jhci1zdGFjaycsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9CQVJTSURFID0gJ2Jhci1zaWRlJyxcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX0JBUk1FQVNVUkUgPSAnYmFyLW1lYXN1cmUnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfT0xJTkUgPSAnby1saW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX1FJTElORSA9ICdxaS1saW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX09BUkVBID0gJ28tYXJlYScsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9RSUFSRUEgPSAncWktYXJlYScsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9DSVJDTEUgPSAnY2lyY2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX0NJUkNMRVNJREUgPSAnY2lyY2xlLXNpZGUnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfR0FOVFQgPSAnZ2FudHQnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfU0NBVFRFUiA9ICdzY2F0dGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU0hPV01FX1NDQVRURVJNQVRSSVggPSAnc2NhdHRlci1tYXRyaXgnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfSElTVE9HUkFNID0gJ2hpc3RvZ3JhbScsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9NQVBTID0gJ21hcHMnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfRklMTEVETUFQUyA9ICdmaWxsZWQtbWFwcycsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9QSUVTID0gJ3BpZXMnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfRFVBTEJBUkxJTkUgPSAnZHVhbC1iYXItbGluZScsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9EVUFMTElORSA9ICdkdWFsLWxpbmUnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfQlVMTEVUID0gJ2J1bGxldCcsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9UUkVFTUFQID0gJ3RyZWVtYXAnLFxyXG5cclxuICAvLyBcclxuICBTSE9XTUVfQlVCQkxFID0gJ2J1YmJsZScsXHJcblxyXG4gIC8vIFxyXG4gIFNIT1dNRV9CT1hQTE9UID0gJ2JveC1wbG90JyxcclxufVxyXG5cclxuLy8gaWNvbiB0byBkaXNwbGF5IGZvciBhbiBpdGVtIG9uIGEgc2hlbGZcclxuZXhwb3J0IGVudW0gU2hlbGZJY29uVHlwZSB7XHJcblxyXG4gIC8vIG5vdCBzZXRcclxuICBTSVRfTm9uZSA9ICdub25lJyxcclxuXHJcbiAgLy8gaW5jb21wYXRpYmxlIGZpZWxkXHJcbiAgU0lUX0luY29tcGF0aWJsZUZpZWxkID0gJ2luY29tcGF0aWJsZS1maWVsZCcsXHJcblxyXG4gIC8vIHJlbW90ZVxyXG4gIFNJVF9SZW1vdGUgPSAncmVtb3RlJyxcclxuXHJcbiAgLy8gZ3JvdXBcclxuICBTSVRfR3JvdXAgPSAnZ3JvdXAnLFxyXG5cclxuICAvLyB0YWJsZSBjYWxjXHJcbiAgU0lUX1RhYmxlQ2FsYyA9ICd0YWJsZS1jYWxjJyxcclxuXHJcbiAgLy8gaXRlbSBjb21lcyBmcm9tIGEgc2Vjb25kYXJ5IGRhdGFzb3VyY2VcclxuICBTSVRfU2Vjb25kYXJ5RGF0YXNvdXJjZSA9ICdzZWNvbmRhcnktZGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIHRhYmxlIGNhbGMgZnJvbSBhIHNlY29uZGFyeSBkYXRhc291cmNlXHJcbiAgU0lUX1RhYmxlQ2FsY1NlY29uZGFyeSA9ICd0YWJsZS1jYWxjLXNlY29uZGFyeScsXHJcblxyXG4gIC8vIGZvcmVjYXN0XHJcbiAgU0lUX0ZvcmVjYXN0ID0gJ2ZvcmVjYXN0JyxcclxuXHJcbiAgLy8gYXNjZW5kaW5nIHNvcnRcclxuICBTSVRfU29ydEFzYyA9ICdzb3J0LWFzYycsXHJcblxyXG4gIC8vIGRlc2NlbmRpbmcgc29ydFxyXG4gIFNJVF9Tb3J0RGVzYyA9ICdzb3J0LWRlc2MnLFxyXG5cclxuICAvLyBhbHBoYWJldGljIGFzY2VuZGluZyBzb3J0XHJcbiAgU0lUX1NvcnRBbHBoYWJldGljQXNjID0gJ3NvcnQtYWxwaGFiZXRpYy1hc2MnLFxyXG5cclxuICAvLyBhbHBoYWJldGljIGRlc2NlbmRpbmcgc29ydFxyXG4gIFNJVF9Tb3J0QWxwaGFiZXRpY0Rlc2MgPSAnc29ydC1hbHBoYWJldGljLWRlc2MnXHJcbn1cclxuXHJcbi8vIGljb24gdG8gZGlzcGxheSBmb3IgYW4gaXRlbSBvbiB0aGUgZmlsdGVycyBzaGVsZlxyXG5leHBvcnQgZW51bSBGaWx0ZXJJY29uVHlwZSB7XHJcblxyXG4gIC8vIGEgZ2xvYmFsIGZpbHRlciBpY29uXHJcbiAgRklUX0dsb2JhbCA9ICdnbG9iYWwtZmlsdGVyJyxcclxuXHJcbiAgLy8gYSBzaGFyZWQgZmlsdGVyIGljb25cclxuICBGSVRfU2hhcmVkID0gJ3NoYXJlZC1maWx0ZXInLFxyXG5cclxuICAvLyBhIG1hcHBlZCBzaGFyZWQgc291cmNlIGZpbHRlciBpY29uXHJcbiAgRklUX01hcHBlZFNoYXJlZFNvdXJjZSA9ICdtYXBwZWQtc2hhcmVkLXNvdXJjZS1maWx0ZXInLFxyXG5cclxuICAvLyBhIG1hcHBlZCBzaGFyZWQgdGFyZ2V0IGZpbHRlciBpY29uXHJcbiAgRklUX01hcHBlZFNoYXJlZFRhcmdldCA9ICdtYXBwZWQtc2hhcmVkLXRhcmdldC1maWx0ZXInLFxyXG5cclxuICAvLyBhIHNsaWNpbmcgZmlsdGVyIGljb25cclxuICBGSVRfU2xpY2UgPSAnc2xpY2UtZmlsdGVyJyxcclxuXHJcbiAgLy8gYSBsb2NhbCBmaWx0ZXIgaWNvblxyXG4gIEZJVF9Mb2NhbCA9ICdsb2NhbC1maWx0ZXInLFxyXG5cclxuICAvLyBhIG1hcHBlZCBnbG9iYWwgc291cmNlIGZpbHRlciBpY29uXHJcbiAgRklUX01hcHBlZEdsb2JhbFNvdXJjZSA9ICdtYXBwZWQtZ2xvYmFsLXNvdXJjZS1maWx0ZXInLFxyXG5cclxuICAvLyBhIG1hcHBlZCBnbG9iYWwgdGFyZ2V0IGZpbHRlciBpY29uXHJcbiAgRklUX01hcHBlZEdsb2JhbFRhcmdldCA9ICdtYXBwZWQtZ2xvYmFsLXRhcmdldC1maWx0ZXInLFxyXG5cclxuICAvLyBub3QgYSBmaWx0ZXJcclxuICBGSVRfTm9uZSA9ICduby1maWx0ZXInXHJcbn1cclxuXHJcbi8vIHVzZWQgdG8gaW5kaWNhdGUgaWYgYSBmaWVsZCBpcyBwYXJ0IG9mIGEgZHVhbCBheGlzXHJcbmV4cG9ydCBlbnVtIEl0ZW1EcmF3U3R5bGUge1xyXG5cclxuICAvLyBub3QgcGFydCBvZiBhIGR1YWwgYXhpc1xyXG4gIElURU1fRFJBV1NUWUxFX05PUk1BTCA9ICdub3JtYWwnLFxyXG5cclxuICAvLyBmaXJzdCBpdGVtIG9uIGR1YWwgYXhpc1xyXG4gIElURU1fRFJBV1NUWUxFX09QRU5FRCA9ICdvcGVuZWQnLFxyXG5cclxuICAvLyBzZWNvbmQgaXRlbSBvbiBkdWFsIGF4aXNcclxuICBJVEVNX0RSQVdTVFlMRV9DTE9TRUQgPSAnY2xvc2VkJyxcclxuXHJcbiAgLy8gbWlkZGxlIGl0ZW0gaW4gYSBzZXQgb2YgbGF5ZXJzXHJcbiAgSVRFTV9EUkFXU1RZTEVfTUlERExFID0gJ21pZGRsZSdcclxufVxyXG5cclxuLy8gaW5kaWNhdGVzIHRoZSBzaXplIG9mIHBhZ2UgZm9yIGEgc2hlZXRcclxuZXhwb3J0IGVudW0gUGFnZVNpemVPcHRpb24ge1xyXG5cclxuICAvLyBcclxuICBQQUdFU0laRV9MRVRURVIgPSAnbGV0dGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgUEFHRVNJWkVfTEVHQUwgPSAnbGVnYWwnLFxyXG5cclxuICAvLyBcclxuICBQQUdFU0laRV9OT1RFID0gJ25vdGUnLFxyXG5cclxuICAvLyBcclxuICBQQUdFU0laRV9GT0xJTyA9ICdmb2xpbycsXHJcblxyXG4gIC8vIFxyXG4gIFBBR0VTSVpFX1RBQkxPSUQgPSAndGFibG9pZCcsXHJcblxyXG4gIC8vIFxyXG4gIFBBR0VTSVpFX0xFREdFUiA9ICdsZWRnZXInLFxyXG5cclxuICAvLyBcclxuICBQQUdFU0laRV9TVEFURU1FTlQgPSAnc3RhdGVtZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgUEFHRVNJWkVfRVhFQ1VUSVZFID0gJ2V4ZWN1dGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIFBBR0VTSVpFX0EzID0gJ2EzJyxcclxuXHJcbiAgLy8gXHJcbiAgUEFHRVNJWkVfQTQgPSAnYTQnLFxyXG5cclxuICAvLyBcclxuICBQQUdFU0laRV9BNSA9ICdhNScsXHJcblxyXG4gIC8vIFxyXG4gIFBBR0VTSVpFX0I0ID0gJ2I0JyxcclxuXHJcbiAgLy8gXHJcbiAgUEFHRVNJWkVfQjUgPSAnYjUnLFxyXG5cclxuICAvLyBcclxuICBQQUdFU0laRV9RVUFSVE8gPSAncXVhcnRvJyxcclxuXHJcbiAgLy8gXHJcbiAgUEFHRVNJWkVfVU5TUEVDSUZJRUQgPSAndW5zcGVjaWZpZWQnLFxyXG59XHJcblxyXG4vLyBJbmRpY2F0ZXMgdGhlIGxheW91dCBvZiBwYWdlIGZvciBhIHNoZWV0XHJcbmV4cG9ydCBlbnVtIFBhZ2VPcmllbnRhdGlvbiB7XHJcblxyXG4gIC8vIFxyXG4gIE9yaWVudGF0aW9uUHJpbnRlciA9ICdwcmludGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgT3JpZW50YXRpb25Qb3J0cmFpdCA9ICdwb3J0cmFpdCcsXHJcblxyXG4gIC8vIFxyXG4gIE9yaWVudGF0aW9uTGFuZHNjYXBlID0gJ2xhbmRzY2FwZSdcclxufVxyXG5cclxuLy8gSW5kaWNhdGVzIHRoZSBtYW5uZXIgb2Ygc2NhbGluZyBvZiBwYWdlIGZvciBhIHNoZWV0XHJcbmV4cG9ydCBlbnVtIFNjYWxlTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNjYWxlQXV0byA9ICdhdXRvJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NhbGVQZXJjZW50YWdlID0gJ3BlcmNlbnQnLFxyXG5cclxuICAvLyBcclxuICBTY2FsZUZpdFBhZ2VzID0gJ2ZpdC1wYWdlcydcclxufVxyXG5cclxuLy8gSW5kaWNhdGVzIHRoZSBkZWZhdWx0L3NlbGVjdGFibGUgc2NhbGluZyBvZiBwYWdlIGZvciBhIHNoZWV0XHJcbmV4cG9ydCBlbnVtIFBhZ2VTY2FsaW5nT3B0aW9uIHtcclxuXHJcbiAgLy8gXHJcbiAgU2NhbGVQY3RBdXRvID0gJ2F1dG8nLFxyXG5cclxuICAvLyBcclxuICBTY2FsZVBjdDQwMCA9ICdwY3Q0MDAnLFxyXG5cclxuICAvLyBcclxuICBTY2FsZVBjdDIwMCA9ICdwY3QyMDAnLFxyXG5cclxuICAvLyBcclxuICBTY2FsZVBjdDEwMCA9ICdwY3QxMDAnLFxyXG5cclxuICAvLyBcclxuICBTY2FsZVBjdDkwID0gJ3BjdDkwJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NhbGVQY3Q4MCA9ICdwY3Q4MCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjYWxlUGN0NzUgPSAncGN0NzUnLFxyXG5cclxuICAvLyBcclxuICBTY2FsZVBjdDYwID0gJ3BjdDYwJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NhbGVQY3Q1MCA9ICdwY3Q1MCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjYWxlUGN0MjUgPSAncGN0MjUnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTaGVldFJhbmdlIHtcclxuXHJcbiAgLy8gXHJcbiAgU2hlZXRSYW5nZUFsbCA9ICdhbGwnLFxyXG5cclxuICAvLyBcclxuICBTaGVldFJhbmdlQWN0aXZlID0gJ2FjdGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIFNoZWV0UmFuZ2VTZWxlY3RlZCA9ICdzZWxlY3RlZCdcclxufVxyXG5cclxuLy8gc2hlZXQgdHlwZVxyXG5leHBvcnQgZW51bSBTaGVldFR5cGUge1xyXG5cclxuICAvLyBcclxuICBUWVBFX1dPUktTSEVFVCA9ICd3b3Jrc2hlZXQnLFxyXG5cclxuICAvLyBcclxuICBUWVBFX0RBU0hCT0FSRCA9ICdkYXNoYm9hcmQnLFxyXG5cclxuICAvLyBcclxuICBUWVBFX1NUT1JZID0gJ3N0b3J5J1xyXG59XHJcblxyXG4vLyBhIGRhc2hib2FyZCBpbWFnZSBtZXRyaWMncyB0eXBlXHJcbmV4cG9ydCBlbnVtIENsaWVudFVJTWV0cmljVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfU2Nyb2xsYmFyTWV0cmljID0gJ3Njcm9sbGJhci1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX1FGaWx0ZXJGaXhlZE1ldHJpYyA9ICdxLWZpbHRlci1maXhlZC1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX1FGaWx0ZXJTbGlkZXJNZXRyaWMgPSAncS1maWx0ZXItc2xpZGVyLW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfUUZpbHRlclJlYWRvdXRNZXRyaWMgPSAncS1maWx0ZXItcmVhZG91dC1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX0NGaWx0ZXJGaXhlZE1ldHJpYyA9ICdjLWZpbHRlci1maXhlZC1tZXRyaWMnLFxyXG5cclxuICAvLyBtaW5pbXVtIGNoZWNrL3JhZGlvbGlzdCBpdGVtIHNpemVcclxuICBVSU1UX0NGaWx0ZXJJdGVtTWV0cmljID0gJ2MtZmlsdGVyLWl0ZW0tbWV0cmljJyxcclxuXHJcbiAgLy8gXHJcbiAgVUlNVF9IRmlsdGVyRml4ZWRNZXRyaWMgPSAnaC1maWx0ZXItZml4ZWQtbWV0cmljJyxcclxuXHJcbiAgLy8gbWluaW11bSBoaWVyYXJjaGljYWwgaXRlbSBzaXplXHJcbiAgVUlNVF9IRmlsdGVySXRlbU1ldHJpYyA9ICdoLWZpbHRlci1pdGVtLW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfQ21TbGlkZXJGaWx0ZXJNZXRyaWMgPSAnY20tc2xpZGVyLWZpbHRlci1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX0NtRHJvcGRvd25GaWx0ZXJNZXRyaWMgPSAnY20tZHJvcGRvd24tZmlsdGVyLW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfQ21QYXR0ZXJuRmlsdGVyTWV0cmljID0gJ2NtLXBhdHRlcm4tZmlsdGVyLW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfUkRhdGVGaWx0ZXJNZXRyaWMgPSAnci1kYXRlLWZpbHRlci1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX1JEYXRlUEZpbHRlck1ldHJpYyA9ICdyLWRhdGUtcC1maWx0ZXItbWV0cmljJyxcclxuXHJcbiAgLy8gXHJcbiAgVUlNVF9QYXJhbVR5cGVJbk1ldHJpYyA9ICdwYXJhbS10eXBlLWluLW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfUGFyYW1Db21wYWN0TGlzdE1ldHJpYyA9ICdwYXJhbS1jb21wYWN0LWxpc3QtbWV0cmljJyxcclxuXHJcbiAgLy8gXHJcbiAgVUlNVF9QYXJhbUxpc3RNZXRyaWMgPSAncGFyYW0tbGlzdC1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX1BhcmFtU2xpZGVyTWV0cmljID0gJ3BhcmFtLXNsaWRlci1tZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBVSU1UX1BhcmFtRGF0ZVRpbWVNZXRyaWMgPSAncGFyYW0tZGF0ZS10aW1lLW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfQ0ZpbHRlckFwcGx5TWV0cmljID0gJ2MtZmlsdGVyLWFwcGx5LW1ldHJpYycsXHJcblxyXG4gIC8vIFxyXG4gIFVJTVRfQ21UeXBlSW5TZWFyY2hNZXRyaWMgPSAnY20tdHlwZS1pbi1zZWFyY2gtbWV0cmljJyxcclxuXHJcbiAgLy8gbWluaW11bSBjdXN0b20gbGlzdCBpdGVtIHNpemVcclxuICBVSU1UX0NGaWx0ZXJDdXN0b21JdGVtTWV0cmljID0gJ2MtZmlsdGVyLWN1c3RvbS1pdGVtLW1ldHJpYydcclxufVxyXG5cclxuLy8gYSByZWdpb24gb2YgYSB2aXogd2hlcmUgc29ydCBpbmRpY2F0b3JzIG1heSBhcHBlYXJcclxuZXhwb3J0IGVudW0gU29ydFJlZ2lvblR5cGUge1xyXG5cclxuICAvLyBcclxuICBTUlRfTEFCRUxTX1ggPSAneGhlYWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFNSVF9MQUJFTFNfWSA9ICd5aGVhZGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU1JUX0xBQkVMU19GSUVMRCA9ICd1bGVmdCcsXHJcblxyXG4gIC8vIFxyXG4gIFNSVF9BWElTX0xFRlQgPSAnbGVmdGF4aXMnLFxyXG5cclxuICAvLyBcclxuICBTUlRfQVhJU19CT1RUT00gPSAnYm90dG9tYXhpcycsXHJcblxyXG4gIC8vIFxyXG4gIFNSVF9BWElTX1JJR0hUID0gJ3JpZ2h0YXhpcycsXHJcblxyXG4gIC8vIFxyXG4gIFNSVF9BWElTX1RPUCA9ICd0b3BheGlzJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gUXRDdXJzb3JTaGFwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEFycm93Q3Vyc29yID0gJ2Fycm93JyxcclxuXHJcbiAgLy8gXHJcbiAgVXBBcnJvd0N1cnNvciA9ICd1cC1hcnJvdycsXHJcblxyXG4gIC8vIFxyXG4gIENyb3NzQ3Vyc29yID0gJ2Nyb3NzJyxcclxuXHJcbiAgLy8gXHJcbiAgV2FpdEN1cnNvciA9ICd3YWl0JyxcclxuXHJcbiAgLy8gXHJcbiAgSUJlYW1DdXJzb3IgPSAnaWJlYW0nLFxyXG5cclxuICAvLyBcclxuICBTaXplVmVyQ3Vyc29yID0gJ3NpemUtdmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU2l6ZUhvckN1cnNvciA9ICdzaXplLWhvcicsXHJcblxyXG4gIC8vIFxyXG4gIFNpemVCRGlhZ0N1cnNvciA9ICdzaXplLWJkaWFnJyxcclxuXHJcbiAgLy8gXHJcbiAgU2l6ZUZEaWFnQ3Vyc29yID0gJ3NpemUtZmRpYWcnLFxyXG5cclxuICAvLyBcclxuICBTaXplQWxsQ3Vyc29yID0gJ3NpemUtYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgQmxhbmtDdXJzb3IgPSAnYmxhbmsnLFxyXG5cclxuICAvLyBcclxuICBTcGxpdFZDdXJzb3IgPSAnc3BsaXQtdicsXHJcblxyXG4gIC8vIFxyXG4gIFNwbGl0SEN1cnNvciA9ICdzcGxpdC1oJyxcclxuXHJcbiAgLy8gXHJcbiAgUG9pbnRpbmdIYW5kQ3Vyc29yID0gJ3BvaW50aW5nLWhhbmQnLFxyXG5cclxuICAvLyBcclxuICBGb3JiaWRkZW5DdXJzb3IgPSAnZm9yYmlkZGVuJyxcclxuXHJcbiAgLy8gXHJcbiAgV2hhdHNUaGlzQ3Vyc29yID0gJ3doYXRzLXRoaXMnLFxyXG5cclxuICAvLyBcclxuICBCdXN5Q3Vyc29yID0gJ2J1c3knLFxyXG5cclxuICAvLyBcclxuICBPcGVuSGFuZEN1cnNvciA9ICdvcGVuLWhhbmQnLFxyXG5cclxuICAvLyBcclxuICBDbG9zZWRIYW5kQ3Vyc29yID0gJ2Nsb3NlZC1oYW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgRHJhZ0NvcHlDdXJzb3IgPSAnZHJhZy1jb3B5JyxcclxuXHJcbiAgLy8gXHJcbiAgRHJhZ01vdmVDdXJzb3IgPSAnZHJhZy1tb3ZlJyxcclxuXHJcbiAgLy8gXHJcbiAgRHJhZ0xpbmtDdXJzb3IgPSAnZHJhZy1saW5rJ1xyXG59XHJcblxyXG4vLyBzcGVjaWZpZXMgdmFyaW91cyBjb21wb25lbnRzIG9mIGEgdml6IHRoYXQgYXJlIHJlbmRlcmVkIGFzIGltYWdlc1xyXG5leHBvcnQgZW51bSBWaXpJbWFnZVJlZ2lvbiB7XHJcblxyXG4gIC8vIHRoZSBtYWluIHZpeiBhcmVhXHJcbiAgVklaX1JFR0lPTl9UQUJMRSA9ICd2aXonLFxyXG5cclxuICAvLyB5IGF4aXMgaXRlbXNcclxuICBWSVpfUkVHSU9OX1JPV0hFQURFUlMgPSAneWhlYWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fTEVGVEFYSVMgPSAnbGVmdGF4aXMnLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX1JJR0hUQVhJUyA9ICdyaWdodGF4aXMnLFxyXG5cclxuICAvLyB4IGF4aXMgaXRlbXNcclxuICBWSVpfUkVHSU9OX0NPTFVNTkhFQURFUlMgPSAneGhlYWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fQk9UVE9NQVhJUyA9ICdib3R0b21heGlzJyxcclxuXHJcbiAgLy8gXHJcbiAgVklaX1JFR0lPTl9UT1BBWElTID0gJ3RvcGF4aXMnLFxyXG5cclxuICAvLyBzcGFjaW5nIGFyZWFzXHJcbiAgVklaX1JFR0lPTl9VUFBFUkxFRlQgPSAndWxlZnQnLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX1VQUEVSUklHSFQgPSAndXJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgVklaX1JFR0lPTl9MT1dFUkxFRlQgPSAnbGxlZnQnLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX0xPV0VSUklHSFQgPSAnbHJpZ2h0JyxcclxuXHJcbiAgLy8gbGFiZWxsaW5nIGFyZWFzXHJcbiAgVklaX1JFR0lPTl9USVRMRSA9ICd0aXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fQ0FQVElPTiA9ICdjYXB0aW9uJyxcclxuXHJcbiAgLy8gbGVnZW5kIGFyZWFzXHJcbiAgVklaX1JFR0lPTl9DT0xPUkxFR0VORCA9ICdjb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fU0hBUEVMRUdFTkQgPSAnc2hhcGUnLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX1NJWkVMRUdFTkQgPSAnc2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fSElHSExJR0hUTEVHRU5EID0gJ2hpZ2hsaWdodC1sZWdlbmQnLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX01BUExFR0VORCA9ICdtYXAnLFxyXG5cclxuICAvLyBsZWdlbmQgdGl0bGVzXHJcbiAgVklaX1JFR0lPTl9DT0xPUkxFR0VORFRJVExFID0gJ2NvbG9yLXRpdGxlJyxcclxuXHJcbiAgLy8gXHJcbiAgVklaX1JFR0lPTl9TSEFQRUxFR0VORFRJVExFID0gJ3NoYXBlLXRpdGxlJyxcclxuXHJcbiAgLy8gXHJcbiAgVklaX1JFR0lPTl9TSVpFTEVHRU5EVElUTEUgPSAnc2l6ZS10aXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fSElHSExJR0hUTEVHRU5EVElUTEUgPSAnaGlnaGxpZ2h0LWxlZ2VuZC10aXRsZScsXHJcblxyXG4gIC8vIFxyXG4gIFZJWl9SRUdJT05fTUFQTEVHRU5EVElUTEUgPSAnbWFwLXRpdGxlJyxcclxuXHJcbiAgLy8gbGVnZW5kIGJvZGllc1xyXG4gIFZJWl9SRUdJT05fQ09MT1JMRUdFTkRCT0RZID0gJ2NvbG9yLWJvZHknLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX1NIQVBFTEVHRU5EQk9EWSA9ICdzaGFwZS1ib2R5JyxcclxuXHJcbiAgLy8gXHJcbiAgVklaX1JFR0lPTl9TSVpFTEVHRU5EQk9EWSA9ICdzaXplLWJvZHknLFxyXG5cclxuICAvLyBcclxuICBWSVpfUkVHSU9OX0hJR0hMSUdIVExFR0VOREJPRFkgPSAnaGlnaGxpZ2h0LWxlZ2VuZC1ib2R5JyxcclxuXHJcbiAgLy8gXHJcbiAgVklaX1JFR0lPTl9NQVBMRUdFTkRCT0RZID0gJ21hcC1ib2R5JyxcclxuXHJcbiAgLy8gVGhlc2UgYXJlIHJlZ2lvbiBuYW1lcyAocmFuZ2VzIG9mIG90aGVyIGVudW1zKVxyXG4gIFZJWl9SRUdJT05fRU5EID0gJ2VuZCcsXHJcbn1cclxuXHJcbi8vIG5hbWVzIG9mIGxlZ2FjeSBtZW51IGl0ZW1zXHJcbmV4cG9ydCBlbnVtIExlZ2FjeU1lbnVOYW1lIHtcclxuXHJcbiAgLy8gdmlldyB1bmRlcmx5aW5nIGRhdGFcclxuICBMTV9OQU1FX1ZJRVdEQVRBID0gJ3ZpZXdkYXRhJyxcclxuXHJcbiAgLy8gZXhwb3J0IGltYWdlXHJcbiAgTE1fTkFNRV9FWFBPUlRJTUFHRSA9ICdleHBvcnRpbWFnZScsXHJcblxyXG4gIC8vIGV4cG9ydCBkYXRhXHJcbiAgTE1fTkFNRV9FWFBPUlREQVRBID0gJ2V4cG9ydGRhdGEnLFxyXG5cclxuICAvLyBleHBvcnQgYXMgY3Jvc3N0YWJcclxuICBMTV9OQU1FX0VYUE9SVENST1NTVEFCID0gJ2V4cG9ydGNyb3NzdGFiJyxcclxuXHJcbiAgLy8gcHJpbnQgdG8gcGRmXHJcbiAgTE1fTkFNRV9QUklOVCA9ICdwcmludCdcclxufVxyXG5cclxuLy8gc3RhdGVzIG9mIGxlZ2FjeSBtZW51IGl0ZW1zXHJcbmV4cG9ydCBlbnVtIExlZ2FjeU1lbnVTdGF0ZSB7XHJcblxyXG4gIC8vIHZpc2libGUgc3RhdGVcclxuICBMTV9TVEFURV9WSVNJQkxFID0gJ3Zpc2libGUnLFxyXG5cclxuICAvLyBjaGVja2VkIHN0YXRlXHJcbiAgTE1fU1RBVEVfQ0hFQ0tFRCA9ICdjaGVja2VkJyxcclxuXHJcbiAgLy8gZ3JheWVkIHN0YXRlXHJcbiAgTE1fU1RBVEVfR1JBWUVEID0gJ2dyYXllZCcsXHJcblxyXG4gIC8vIHJhZGlvIHN0YXRlXHJcbiAgTE1fU1RBVEVfUkFESU8gPSAncmFkaW8nLFxyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTWVtYmVyVW5pcXVlbmVzc1R5cGUge1xyXG5cclxuICAvLyBcclxuICBVbmlxdWVXaXRoaW5DdWJlID0gJ2N1YmUtdW5pcXVlJyxcclxuXHJcbiAgLy8gXHJcbiAgVW5pcXVlV2l0aGluSGllcmFyY2h5ID0gJ2hpZXJhcmNoeS11bmlxdWUnLFxyXG5cclxuICAvLyBcclxuICBVbmlxdWVXaXRoaW5MZXZlbCA9ICdsZXZlbC11bmlxdWUnLFxyXG5cclxuICAvLyBcclxuICBVbmlxdWVXaXRoaW5QYXJlbnQgPSAncGFyZW50LXVuaXF1ZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIERpbWVuc2lvblR5cGUge1xyXG5cclxuICAvLyBqdXN0IGEgcmVndWxhciBkaW1lbnNpb24sIG5vIHNwZWNpYWwgc2VtYW50aWNzXHJcbiAgUmVndWxhckRpbWVuc2lvbiA9ICdyZWd1bGFyLWRpbWVuc2lvbicsXHJcblxyXG4gIC8vIHRoZSBtZWFzdXJlcyBkaW1lbnNpb24sIHdoaWNoIHdlIGRvbid0IG1vZGVsIGFzIHN1Y2hcclxuICBNZWFzdXJlRGltZW5zaW9uID0gJ21lYXN1cmUtZGltZW5zaW9uJyxcclxuXHJcbiAgLy8gYSB0aW1lIGRpbWVuc2lvblxyXG4gIFRpbWVEaW1lbnNpb24gPSAndGltZS1kaW1lbnNpb24nXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTY2hlbWFWaWV3ZXJEYXRhU291cmNlVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19OT1JNQUwgPSAnZGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19OT1JNQUxfUFJJTUFSWSA9ICdkYXRhc291cmNlLXByaW1hcnknLFxyXG5cclxuICAvLyBcclxuICBTVlRfRFNfTk9STUFMX1NFQ09OREFSWSA9ICdkYXRhc291cmNlLXNlY29uZGFyeScsXHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19FWFRSQUNUID0gJ2V4dHJhY3QnLFxyXG5cclxuICAvLyBcclxuICBTVlRfRFNfRVhUUkFDVF9QUklNQVJZID0gJ2V4dHJhY3QtcHJpbWFyeScsXHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19FWFRSQUNUX1NFQ09OREFSWSA9ICdleHRyYWN0LXNlY29uZGFyeScsXHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19DVUJFID0gJ2N1YmUnLFxyXG5cclxuICAvLyBcclxuICBTVlRfRFNfQ1VCRV9QUklNQVJZID0gJ2N1YmUtcHJpbWFyeScsXHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19DVUJFX1NFQ09OREFSWSA9ICdjdWJlLXNlY29uZGFyeScsXHJcblxyXG4gIC8vIFxyXG4gIFNWVF9EU19TRVJWRVIgPSAnc2VydmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU1ZUX0RTX1NFUlZFUl9QUklNQVJZID0gJ3NlcnZlci1wcmltYXJ5JyxcclxuXHJcbiAgLy8gXHJcbiAgU1ZUX0RTX1NFUlZFUl9TRUNPTkRBUlkgPSAnc2VydmVyLXNlY29uZGFyeSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNjaGVtYUl0ZW1UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgSVRfRElNRU5TSU9OID0gJ2RpbWVuc2lvbicsXHJcblxyXG4gIC8vIFxyXG4gIElUX0hJRVJBUkNIWSA9ICdoaWVyYXJjaHknLFxyXG5cclxuICAvLyBcclxuICBJVF9MRVZFTCA9ICdsZXZlbCcsXHJcblxyXG4gIC8vIFxyXG4gIElUX0NBVEVHT1JJQ0FMID0gJ2NhdGVnb3JpY2FsJyxcclxuXHJcbiAgLy8gXHJcbiAgSVRfTUVBU1VSRSA9ICdtZWFzdXJlJyxcclxuXHJcbiAgLy8gXHJcbiAgSVRfVkFMVUUgPSAndmFsdWUnLFxyXG5cclxuICAvLyBcclxuICBJVF9HUk9VUCA9ICdncm91cCcsXHJcblxyXG4gIC8vIFxyXG4gIElUX0ZPTERFUiA9ICdmb2xkZXInLFxyXG5cclxuICAvLyBcclxuICBJVF9UQUJMRSA9ICd0YWJsZScsXHJcblxyXG4gIC8vIFxyXG4gIElUX0RSSUxMUEFUSCA9ICdkcmlsbHBhdGgnLFxyXG5cclxuICAvLyBcclxuICBJVF9QQVJBTUVURVIgPSAncGFyYW1ldGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgSVRfSEVBREVSID0gJ2hlYWRlcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9CTEFOSyA9ICdibGFuaycsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9SRUxBVElPTkFMID0gJ3JlbGF0aW9uYWwnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfQ1VCRSA9ICdjdWJlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0RBVEVUSU1FID0gJ2RhdGV0aW1lJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0RBVEUgPSAnZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9USU1FID0gJ3RpbWUnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfVEVYVCA9ICd0ZXh0JyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX05VTUJFUiA9ICdudW1iZXInLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfQ1VSUkVOQ1kgPSAnY3VycmVuY3knLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfQk9PTCA9ICdib29sJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0hJRVJBUkNIWSA9ICdoaWVyYXJjaHknLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfTEVWRUwgPSAnbGV2ZWwnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfQVRUUklCVVRFID0gJ2F0dHJpYnV0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9GT0xERVJfQ0xPU0VEID0gJ2ZvbGRlci1jbG9zZWQnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfRk9MREVSX09QRU4gPSAnZm9sZGVyLW9wZW4nLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfR1JPVVAgPSAnZ3JwJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0lOVkFMSURfR1JPVVAgPSAnaW52YWxpZC1ncnAnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfU1ZSX0dSUCA9ICdzdnItZ3JwJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0lOVkFMSURfU1ZSX0dSUCA9ICdpbnZhbGlkLXN2ci1ncnAnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfTlVNRVJJQ19CSU5fTyA9ICdudW1lcmljLWJpbi1vJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX05VTUVSSUNfQklOX1EgPSAnbnVtZXJpYy1iaW4tcScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9JTlZBTElEX05VTUVSSUNfQklOID0gJ2ludmFsaWQtbnVtZXJpYy1iaW4nLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfRFJJTExQQVRIID0gJ2RyaWxscGF0aCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9WQUxJRF9TWVNHUlAgPSAndmFsaWQtc3lzZ3JwJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0lOVkFMSURfU1lTR1JQID0gJ2ludmFsaWQtc3lzZ3JwJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0NBVF9CSU4gPSAnY2F0LWJpbicsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9DQVRfQklOX0dFT0dBUEhJQ19PID0gJ2NhdC1iaW4tZ2VvZ2FwaGljLW8nLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfQ0FUX0JJTl9HRU9HQVBISUNfUSA9ICdjYXQtYmluLWdlb2dhcGhpYy1xJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0lOVkFMSURfQ0FUX0JJTiA9ICdpbnZhbGlkLWNhdC1iaW4nLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEFsbFR5cGVfX1NWVF9BTExfSU5WQUxJRF9DQVRfQklOX0dFT0dBUEhJQ19PID0gJ2ludmFsaWQtY2F0LWJpbi1nZW9nYXBoaWMtbycsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9JTlZBTElEX0NBVF9CSU5fR0VPR0FQSElDX1EgPSAnaW52YWxpZC1jYXQtYmluLWdlb2dhcGhpYy1xJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0dFT0dSQVBISUMgPSAnZ2VvZ3JhcGhpYycsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9JTlZBTElEX0dFT0dSQVBISUNfTyA9ICdpbnZhbGlkLWdlb2dyYXBoaWMtbycsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9JTlZBTElEX0dFT0dSQVBISUNfUSA9ICdpbnZhbGlkLWdlb2dyYXBoaWMtcScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQWxsVHlwZV9fU1ZUX0FMTF9JREVOVF9TRVQgPSAnaWRlbnQtc2V0JyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX0lOVkFMSURfSURFTlRfU0VUID0gJ2ludmFsaWQtaWRlbnQtc2V0JyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX1RBQkxFID0gJ3RhYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRBbGxUeXBlX19TVlRfQUxMX05PTkUgPSAnbm9uZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNjaGVtYVZpZXdlckZpZWxkQ3ViZU1lYXN1cmVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlTWVhc3VyZVR5cGVfX1NWVF9DVUJFX01fQkxBTksgPSAnY3ViZS1tLWJsYW5rJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlTWVhc3VyZVR5cGVfX1NWVF9DVUJFX01fRk9MREVSX0NMT1NFRCA9ICdjdWJlLW0tZm9sZGVyLWNsb3NlZCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZU1lYXN1cmVUeXBlX19TVlRfQ1VCRV9NX0ZPTERFUl9PUEVOID0gJ2N1YmUtbS1mb2xkZXItb3BlbicsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZU1lYXN1cmVUeXBlX19TVlRfQ1VCRV9NX0RBVEVUSU1FID0gJ2N1YmUtbS1kYXRldGltZScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZU1lYXN1cmVUeXBlX19TVlRfQ1VCRV9NX0RBVEUgPSAnY3ViZS1tLWRhdGUnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVNZWFzdXJlVHlwZV9fU1ZUX0NVQkVfTV9USU1FID0gJ2N1YmUtbS10aW1lJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlTWVhc3VyZVR5cGVfX1NWVF9DVUJFX01fVEVYVCA9ICdjdWJlLW0tdGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZU1lYXN1cmVUeXBlX19TVlRfQ1VCRV9NX05VTUJFUiA9ICdjdWJlLW0tbnVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlTWVhc3VyZVR5cGVfX1NWVF9DVUJFX01fQ1VSUkVOQ1kgPSAnY3ViZS1tLWN1cnJlbmN5JyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlTWVhc3VyZVR5cGVfX1NWVF9DVUJFX01fQk9PTEVBTiA9ICdjdWJlLW0tYm9vbGVhbicsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZU1lYXN1cmVUeXBlX19TVlRfQ1VCRV9NX0dFT0dSQVBISUMgPSAnY3ViZS1tLWdlb2dyYXBoaWMnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlRGltZW5zaW9uVHlwZV9fU1ZUX0NVQkVfRF9CTEFOSyA9ICdjdWJlLWQtYmxhbmsnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0hJRVJBUkNIWSA9ICdjdWJlLWQtaGllcmFyY2h5JyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlRGltZW5zaW9uVHlwZV9fU1ZUX0NVQkVfRF9MRVZFTCA9ICdjdWJlLWQtbGV2ZWwnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0hJRVJfQ0FMQyA9ICdjdWJlLWQtaGllci1jYWxjJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlRGltZW5zaW9uVHlwZV9fU1ZUX0NVQkVfRF9MVkxfQ0FMQyA9ICdjdWJlLWQtbHZsLWNhbGMnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0hJRVJfR0VPID0gJ2N1YmUtZC1oaWVyLWdlbycsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZURpbWVuc2lvblR5cGVfX1NWVF9DVUJFX0RfSElFUl9HRU9fQ1VTVE9NID0gJ2N1YmUtZC1oaWVyLWdlby1jdXN0b20nLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0ZPTERFUl9DTE9TRUQgPSAnY3ViZS1kLWZvbGRlci1jbG9zZWQnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0ZPTERFUl9PUEVOID0gJ2N1YmUtZC1mb2xkZXItb3BlbicsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZURpbWVuc2lvblR5cGVfX1NWVF9DVUJFX0RfQVRUUklCVVRFID0gJ2N1YmUtZC1hdHRyaWJ1dGUnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX1RFWFQgPSAnY3ViZS1kLXRleHQnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0RBVEVUSU1FID0gJ2N1YmUtZC1kYXRldGltZScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZURpbWVuc2lvblR5cGVfX1NWVF9DVUJFX0RfREFURVRJTUVfSU5WQUxJRCA9ICdjdWJlLWQtZGF0ZXRpbWUtaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZURpbWVuc2lvblR5cGVfX1NWVF9DVUJFX0RfREFURSA9ICdjdWJlLWQtZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFNjaGVtYVZpZXdlckZpZWxkQ3ViZURpbWVuc2lvblR5cGVfX1NWVF9DVUJFX0RfREFURV9JTlZBTElEID0gJ2N1YmUtZC1kYXRlLWludmFsaWQnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0dFT0dSQVBISUMgPSAnY3ViZS1kLWdlb2dyYXBoaWMnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0dFT0dSQVBISUNfSU5WQUxJRCA9ICdjdWJlLWQtZ2VvZ3JhcGhpYy1pbnZhbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlRGltZW5zaW9uVHlwZV9fU1ZUX0NVQkVfRF9HRU9HUkFQSElDX0NVU1RPTSA9ICdjdWJlLWQtZ2VvZ3JhcGhpYy1jdXN0b20nLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX0dFT0dSQVBISUNfQ1VTVE9NX0lOVkFMSUQgPSAnY3ViZS1kLWdlb2dyYXBoaWMtY3VzdG9tLWludmFsaWQnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX1ZBUllJTkcgPSAnY3ViZS1kLXZhcnlpbmcnLFxyXG5cclxuICAvLyBcclxuICBTY2hlbWFWaWV3ZXJGaWVsZEN1YmVEaW1lbnNpb25UeXBlX19TVlRfQ1VCRV9EX1VEQSA9ICdjdWJlLWQtdWRhJyxcclxuXHJcbiAgLy8gXHJcbiAgU2NoZW1hVmlld2VyRmllbGRDdWJlRGltZW5zaW9uVHlwZV9fU1ZUX0NVQkVfRF9OVU1CRVIgPSAnY3ViZS1kLW51bWJlcidcclxufVxyXG5cclxuLy8gU2NoZW1hIHZpZXdlciBtZW51IHR5cGVzXHJcbmV4cG9ydCBlbnVtIFNjaGVtYVZpZXdlck1lbnVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgSGVhZGVyID0gJ2hlYWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIEZpZWxkID0gJ2ZpZWxkJyxcclxuXHJcbiAgLy8gXHJcbiAgTGV2ZWwgPSAnbGV2ZWwnLFxyXG5cclxuICAvLyBcclxuICBIaWVyYXJjaHkgPSAnaGllcmFyY2h5JyxcclxuXHJcbiAgLy8gXHJcbiAgRGltZW5zaW9uID0gJ2RpbWVuc2lvbicsXHJcblxyXG4gIC8vIFxyXG4gIERyaWxsUGF0aCA9ICdkcmlsbC1wYXRoJyxcclxuXHJcbiAgLy8gXHJcbiAgR3JvdXAgPSAnZ3JvdXAnLFxyXG5cclxuICAvLyBcclxuICBVREEgPSAndWRhJyxcclxuXHJcbiAgLy8gXHJcbiAgUmVsYXRpb25hbFRhYmxlID0gJ3JlbGF0aW9uYWwtdGFibGUnXHJcbn1cclxuXHJcbi8vIEluZGljYXRlcyB0aGUgc2VsZWN0aW9uIG1vZGU6IFNpbmdsZSB8IE11bHRpcGxlLlxyXG5leHBvcnQgZW51bSBIU01TZWxlY3Rpb25Nb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgU2luZ2xlID0gJ3NlbGVjdGlvbi1tb2RlLXNpbmdsZScsXHJcblxyXG4gIC8vIFxyXG4gIE11bHRpcGxlID0gJ3NlbGVjdGlvbi1tb2RlLW11bHRpcGxlJ1xyXG59XHJcblxyXG4vLyBJbmRpY2F0ZXMgd2hhdCBkZWZhdWx0IG1lbWJlciB0byB1c2UgZm9yIGEgaGllcmFyY2hpY2FsIGZpZWxkLlxyXG5leHBvcnQgZW51bSBIU01EZWZhdWx0TWVtYmVyVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFVzZURlZmF1bHRNZW1iZXIgPSAndXNlLWRlZmF1bHQtbWVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgVXNlQWxsTWVtYmVyID0gJ3VzZS1hbGwtbWVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgVXNlU2VsZWN0ZWRNZW1iZXIgPSAndXNlLXNlbGVjdGVkLW1lbWJlcidcclxufVxyXG5cclxuLy8gSGllcmFyY2hpY2FsIHNlbGVjdCBtb2RlbCBwcmVzZW50YXRpb24gbGF5ZXIgbm90aWZpY2F0aW9uLlxyXG5leHBvcnQgZW51bSBIU01Ob3RpZmljYXRpb25UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgVXBkYXRlZCA9ICdoc20tbm90aWZpY2F0aW9uLXVwZGF0ZWQnLFxyXG5cclxuICAvLyBcclxuICBNaXNzaW5nTWVtYmVycyA9ICdoc20tbm90aWZpY2F0aW9uLW1pc3NpbmctbWVtYmVycydcclxufVxyXG5cclxuLy8gVHlwZSBvZiBoaWVyYXJjaHkgY29tbWFuZCBzZWxlY3Rpb24gdG8gYmUgcGVyZm9ybWVkLlxyXG5leHBvcnQgZW51bSBIU01TZWxlY3Rpb25SZXF1ZXN0VHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNlbGVjdE1vZGUgPSAnaHNtLXNlbGVjdGlvbi1yZXF1ZXN0LXNlbGVjdC1tb2RlJyxcclxuXHJcbiAgLy8gXHJcbiAgTWVtYmVyRGVzY2VuZGFudHNTdGF0ZSA9ICdoc20tc2VsZWN0aW9uLXJlcXVlc3QtZGVzY2VuZGFudHMtc3RhdGUnLFxyXG5cclxuICAvLyBcclxuICBTZWxlY3RlZE1lbWJlclR1cGxlID0gJ2hzbS1zZWxlY3Rpb24tcmVxdWVzdC1zZWxlY3RlZC1tZW1iZXItdHVwbGUnLFxyXG5cclxuICAvLyBcclxuICBTZWxlY3RlZE1lbWJlckNhcHRpb24gPSAnaHNtLXNlbGVjdGlvbi1yZXF1ZXN0LXNlbGVjdGVkLW1lbWJlci1jYXB0aW9uJ1xyXG59XHJcblxyXG4vLyBUeXBlIG9mIGhpZXJhcmNoeSBtZW1iZXIgc2VsZWN0aW9uIHRvIGJlIHBlcmZvcm1lZC5cclxuZXhwb3J0IGVudW0gSFNNTWVtYmVyU2VsZWN0UmVxdWVzdFR5cGUge1xyXG5cclxuICAvLyBcclxuICBTZWxlY3RNZW1iZXIgPSAnaHNtLW1lbWJlci1yZXF1ZXN0LXNlbGVjdC1tZW1iZXInLFxyXG5cclxuICAvLyBcclxuICBTZWxlY3RTdWJ0cmVlID0gJ2hzbS1tZW1iZXItcmVxdWVzdC1zZWxlY3Qtc3VidHJlZScsXHJcblxyXG4gIC8vIFxyXG4gIFNlbGVjdExldmVsID0gJ2hzbS1tZW1iZXItcmVxdWVzdC1zZWxlY3QtbGV2ZWwnLFxyXG5cclxuICAvLyBcclxuICBNZW1iZXJTZWxlY3QgPSAnaHNtLW1lbWJlci1yZXF1ZXN0LW1lbWJlci1zZWxlY3QnLFxyXG5cclxuICAvLyBcclxuICBNZW1iZXJMZXZlbCA9ICdoc20tbWVtYmVyLXJlcXVlc3QtbWVtYmVyLWxldmVsJ1xyXG59XHJcblxyXG4vLyBIaWVyYXJjaHkgbGV2ZWwgc2VsZWN0aW9uIHN0YXRlLlxyXG5leHBvcnQgZW51bSBIU01MZXZlbFNlbGVjdGlvblN0YXRlIHtcclxuXHJcbiAgLy8gXHJcbiAgQWxsU2VsZWN0ZWQgPSAnaHNtLWFsbC1zZWxlY3RlZCcsXHJcblxyXG4gIC8vIFxyXG4gIE5vbmVTZWxlY3RlZCA9ICdoc20tbm9uZS1zZWxlY3RlZCcsXHJcblxyXG4gIC8vIFxyXG4gIFNvbWVTZWxlY3RlZCA9ICdoc20tc29tZS1zZWxlY3RlZCcsXHJcblxyXG4gIC8vIFVzZWQgd2hlbiBhIHF1ZXJ5IGlzIG1hZGUgb2YgbGV2ZWxzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gdGhlIGdpdmVuIHN1YnRyZWUuIFdlIG5lZWQgdG8gZGlzdGluZ3Vpc2ggdGhhdCBmcm9tIG5vbmUgc2VsZWN0ZWQgd2hpY2ggaW1wbGllcyB0aGF0IG1lbWJlcnMgZXhpc3QgYnV0IGFyZSBub3Qgc2VsZWN0ZWQuXHJcbiAgVW5rbm93blNlbGVjdGVkID0gJ2hzbS11bmtub3duLXNlbGVjdGVkJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gSFNNTWVtYmVyTG9hZFN0YXRlIHtcclxuXHJcbiAgLy8gXHJcbiAgQWxsTG9hZGVkID0gJ2hzbS1hbGwtbG9hZGVkJyxcclxuXHJcbiAgLy8gXHJcbiAgTm9uZUxvYWRlZCA9ICdoc20tbm9uZS1sb2FkZWQnLFxyXG5cclxuICAvLyBcclxuICBTb21lTG9hZGVkID0gJ2hzbS1zb21lLWxvYWRlZCdcclxufVxyXG5cclxuLy8gUmV0dXJuIHZhbHVlIGZyb20gQ29ubmVjdGlvblN0YXRlQ29udHJvbGxlciBjb25uZWN0IG1ldGhvZHNcclxuZXhwb3J0IGVudW0gQ29ubmVjdGlvbkF0dGVtcHRSZXN1bHQge1xyXG5cclxuICAvLyBBbGwgZGF0YSBzb3VyY2VzIHJlcXVlc3RlZCBhcmUgY29ubmVjdGVkLlxyXG4gIENBUl9Db25uZWN0ZWQgPSAnY29ubmVjdGVkJyxcclxuXHJcbiAgLy8gTm90IGFsbCBkYXRhIHNvdXJjZXMgYXJlIGNvbm5lY3RlZC5cclxuICBDQVJfTm90Q29ubmVjdGVkID0gJ25vdC1jb25uZWN0ZWQnLFxyXG5cclxuICAvLyBUaGUgdXNlciBpbnRlcnJ1cHRlZCB0aGUgY29ubmVjdGlvbiBmbG93IHRvIGVkaXQgYSBjb25uZWN0aW9uLlxyXG4gIENBUl9Vc2VyRWRpdENvbm5lY3Rpb24gPSAndXNlci1lZGl0LWNvbm5lY3Rpb24nLFxyXG5cclxuICAvLyBUaGUgY29ubmVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoZSBjdXJyZW50IHBsYXRmb3JtLlxyXG4gIENBUl9Db25uZWN0aW9uTm90U3VwcG9ydGVkID0gJ2Nvbm5lY3Rpb24tbm90LXN1cHBvcnRlZCdcclxufVxyXG5cclxuLy8gUmV0dXJuIHZhbHVlIGZyb20gQ29ubmVjdFRvRGF0YVNlcnZlclNvdXJjZUNvbW1hbmQ6OkRvXHJcbmV4cG9ydCBlbnVtIERhdGFTZXJ2ZXJDb25uZWN0aW9uUmVzdWx0IHtcclxuXHJcbiAgLy8gVGhlIGRhdGEgc291cmNlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBhZGRlZC5cclxuICBEU0NSX1N1Y2Nlc3MgPSAnc3VjY2VzcycsXHJcblxyXG4gIC8vIEVycm9yIHRoYXQgd2FzIGhhbmRsZWQuIFRoZXJlJ3Mgbm8gbW9yZSB0byBkbyAoZXguIGNhbmNlbCwgb3IgYW4gZXhjZXB0aW9uIHRoYXQgdGhlIGNvbW1hbmQganVzdCBwcmludGVkIHRvIHRoZSBlcnJvciBkaWFsb2cpLlxyXG4gIERTQ1JfRmFpbHVyZSA9ICdmYWlsdXJlJyxcclxuXHJcbiAgLy8gVHJ5IGFnYWluIGFmdGVyIG1ha2luZyBhIG5ldyB3b3JrYm9vay5cclxuICBEU0NSX1JlcXVpcmVzV29ya2Jvb2tEb2MgPSAncmVxdWlyZXMtd29ya2Jvb2snLFxyXG5cclxuICAvLyBUcnkgYWdhaW4gYWZ0ZXIgbG9nZ2luZyBiYWNrIG9uIHRvIFRhYmxlYXUgc2VydmVyLlxyXG4gIERTQ1JfUmVxdWlyZXNBdXRoZW50aWNhdGlvbiA9ICdyZXF1aXJlcy1hdXRoZW50aWNhdGlvbicsXHJcblxyXG4gIC8vIFRyeSBhZ2FpbiBhZnRlciBnZXR0aW5nIGRhdGFiYXNlIGNyZWRlbnRpYWxzIGZyb20gdGhlIHVzZXIuIFBhc3MgdGhlbSBpbiB0aHJvdWdoIHRoZSBEUElfRGF0YXNvdXJjZVVzZXJuYW1lIGFuZCB0aGUgRFBJX0RhdGFzb3VyY2VQYXNzd29yZCBwYXJhbWV0ZXJzLlxyXG4gIERTQ1JfUmVxdWlyZXNEQkNyZWRlbnRpYWxzID0gJ3JlcXVpcmVzLWRiLWNyZWRlbnRpYWxzJyxcclxuXHJcbiAgLy8gVHJ5IGFnYWluIGFmdGVyIGFzc29jaWF0aW5nIGFuIE9BdXRoIGtleSBmcm9tIHRoZSB1c2VyIGtleWNoYWluIHdpdGggdGhlIGRhdGEgc291cmNlLlxyXG4gIERTQ1JfUmVxdWlyZXNPQXV0aEtleUFzc29jaWF0aW9uID0gJ3JlcXVpcmVzLW9hdXRoLWtleS1hc3NvY2lhdGlvbicsXHJcblxyXG4gIC8vIFRoZSBPQXV0aCBjcmVkZW50aWFscyB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFzb3VyY2UgYXJlIG5vdCB2YWxpZC5cclxuICBEU0NSX1JlcXVpcmVzVmFsaWRPQXV0aEtleSA9ICdyZXF1aXJlcy12YWxpZC1vYXV0aC1rZXknLFxyXG5cclxuICAvLyBNdWx0aXBsZSBsZWFmIGNvbm5lY3Rpb25zIHdpdGhpbiBhIGZlZGVyYXRlZCBkYXRhIHNvdXJjZSBjb250YWluIGVycm9ycyAoZS5nLiwgbXVsdGlwbGUgbGVhZnMgbWlnaHQgbmVlZCBjcmVkZW50aWFscykuXHJcbiAgRFNDUl9GZWRlcmF0ZWRFcnJvciA9ICdmZWRlcmF0ZWQtZXJyb3InXHJcbn1cclxuXHJcbi8vIFR5cGUgb2YgZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBjb25uZWN0LlxyXG5leHBvcnQgZW51bSBDb25uZWN0aW9uRXJyb3JUeXBlIHtcclxuXHJcbiAgLy8gQXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgYXJlIG5lZWRlZCBpbiBvcmRlciB0byBjb25uZWN0LlxyXG4gIENFVF9OZWVkc0F1dGhlbnRpY2F0aW9uID0gJ25lZWRzLWF1dGhlbnRpY2F0aW9uJyxcclxuXHJcbiAgLy8gVGhlIGRhdGEgc291cmNlIGlzIHByb3ZpZGVkIGJ5IERhdGEgU2VydmVyLCBidXQgbm8gRGF0YSBTZXJ2ZXIgY29ubmVjdGlvbiBpcyBwcmVzZW50LlxyXG4gIENFVF9EYXRhU2VydmVyRGlzY29ubmVjdGVkID0gJ2RhdGEtc2VydmVyLWRpc2Nvbm5lY3RlZCcsXHJcblxyXG4gIC8vIEFuIGV4Y2VwdGlvbiBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nLiAgVGhpcyBjb3VsZCBiZSBjYXVzZWQgYnkgYSBiYWQgcGFzc3dvcmQsIG9yIHdyb25nIHBhdGgvdXJsLlxyXG4gIENFVF9FeGNlcHRpb25XaGlsZUNvbm5lY3RpbmcgPSAnZXhjZXB0aW9uLXdoaWxlLWNvbm5lY3RpbmcnLFxyXG5cclxuICAvLyBBbiBleGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGNvbm5lY3QgdGhlIGRhdGEgc291cmNlIGFzIGEgd2hvbGUuXHJcbiAgQ0VUX0V4Y2VwdGlvbldoaWxlQ29ubmVjdGluZ0RhdGFTb3VyY2UgPSAnZXhjZXB0aW9uLXdoaWxlLWNvbm5lY3RpbmctZGF0YS1zb3VyY2UnLFxyXG5cclxuICAvLyBUaGUgY29ubmVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gIENFVF9Db25uZWN0aW9uTm90U3VwcG9ydGVkID0gJ2Nvbm5lY3Rpb24tbm90LXN1cHBvcnRlZCcsXHJcblxyXG4gIC8vIEFuIHVuZXhwZWN0ZWQgZXhjZXB0aW9uIG9jY3VycmVkLlxyXG4gIENFVF9VbmV4cGVjdGVkRXhjZXB0aW9uID0gJ3VuZXhwZWN0ZWQtZXhjZXB0aW9uJ1xyXG59XHJcblxyXG4vLyBpZGVudGlmaWVzIHRoZSBwaWVjZSBvZiB0aGUgdmlzdWFsXHJcbmV4cG9ydCBlbnVtIFZpc3VhbFBhcnQge1xyXG5cclxuICAvLyBkZWZhdWx0IGJ1Y2tldCBpZiB0eXBlIGlzbid0IHNwZWNpZmllZFxyXG4gIFZQX01pc2MgPSAnbWlzYycsXHJcblxyXG4gIC8vIFxyXG4gIFZQX0Fubm90YXRpb25zID0gJ2Fubm90YXRpb25zJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfQXhpc1J1bGVzID0gJ2F4aXMtcnVsZXMnLFxyXG5cclxuICAvLyBcclxuICBWUF9Ub3BBeGlzID0gJ3RvcC1heGlzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfQm90dG9tQXhpcyA9ICdib3R0b20tYXhpcycsXHJcblxyXG4gIC8vIFxyXG4gIFZQX0xlZnRBeGlzID0gJ2xlZnQtYXhpcycsXHJcblxyXG4gIC8vIFxyXG4gIFZQX1JpZ2h0QXhpcyA9ICdyaWdodC1heGlzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfQmFja2dyb3VuZCA9ICdiYWNrZ3JvdW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfQm9yZGVycyA9ICdib3JkZXJzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfQ2FwdGlvbiA9ICdjYXB0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfQ2VsbEJvcmRlcnMgPSAnY2VsbC1ib3JkZXJzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfRGVjb3JhdGlvbiA9ICdkZWNvcmF0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfRHJvcExpbmVzID0gJ2Ryb3AtbGluZXMnLFxyXG5cclxuICAvLyBcclxuICBWUF9YTGFiZWxzID0gJ3gtbGFiZWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfWUxhYmVscyA9ICd5LWxhYmVscycsXHJcblxyXG4gIC8vIFxyXG4gIFZQX0xlZ2VuZHMgPSAnbGVnZW5kcycsXHJcblxyXG4gIC8vIFxyXG4gIFZQX01hcmtzID0gJ21hcmtzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfTWFya0xhYmVscyA9ICdtYXJrLWxhYmVscycsXHJcblxyXG4gIC8vIFxyXG4gIFZQX01hcmtUcmFpbHMgPSAnbWFyay10cmFpbHMnLFxyXG5cclxuICAvLyBcclxuICBWUF9SZWZlcmVuY2VCYW5kcyA9ICdyZWYtYmFuZHMnLFxyXG5cclxuICAvLyBcclxuICBWUF9SZWZlcmVuY2VMaW5lcyA9ICdyZWYtbGluZXMnLFxyXG5cclxuICAvLyBcclxuICBWUF9QYW5lQm9yZGVycyA9ICdwYW5lLWJvcmRlcnMnLFxyXG5cclxuICAvLyBcclxuICBWUF9TY3JvbGxCYXJzID0gJ3Njcm9sbC1iYXJzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfVGl0bGUgPSAndGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBWUF9UcmVuZExpbmVzID0gJ3RyZW5kLWxpbmVzJyxcclxuXHJcbiAgLy8gXHJcbiAgVlBfVXBwZXJNYXBMYXllcnMgPSAndXBwZXItbWFwLWxheWVycydcclxufVxyXG5cclxuLy8gRGV0YWlscyBvZiB0aGUgcGFydCB3aXRoaW4gYW4gRWxlbWVudElkXHJcbmV4cG9ydCBlbnVtIFNjZW5lTW9kZWxUeXBlc0RldGFpbCB7XHJcblxyXG4gIC8vIFxyXG4gIE5vRGV0YWlsID0gJ25vLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1hcmtEZXRhaWwgPSAnbWFyay1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBMYWJlbERldGFpbCA9ICdsYWJlbC1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBMYWJlbEhhbmRsZURldGFpbCA9ICdsYWJlbC1oYW5kbGUtZGV0YWlsJyxcclxuXHJcbiAgLy8gXHJcbiAgVG9wTGVmdEhhbmRsZURldGFpbCA9ICd0b3AtbGVmdC1oYW5kbGUtZGV0YWlsJyxcclxuXHJcbiAgLy8gXHJcbiAgVG9wTWlkSGFuZGxlRGV0YWlsID0gJ3RvcC1taWQtaGFuZGxlLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIFRvcFJpZ2h0SGFuZGxlRGV0YWlsID0gJ3RvcC1yaWdodC1oYW5kbGUtZGV0YWlsJyxcclxuXHJcbiAgLy8gXHJcbiAgUmlnaHRNaWRIYW5kbGVEZXRhaWwgPSAncmlnaHQtbWlkLWhhbmRsZS1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBCb3R0b21SaWdodEhhbmRsZURldGFpbCA9ICdib3R0b20tcmlnaHQtaGFuZGxlLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIEJvdHRvbU1pZEhhbmRsZURldGFpbCA9ICdib3R0b20tbWlkLWhhbmRsZS1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBCb3R0b21MZWZ0SGFuZGxlRGV0YWlsID0gJ2JvdHRvbS1sZWZ0LWhhbmRsZS1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBMZWZ0TWlkSGFuZGxlRGV0YWlsID0gJ2xlZnQtbWlkLWhhbmRsZS1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBMaW5lRGV0YWlsID0gJ2xpbmUtZGV0YWlsJyxcclxuXHJcbiAgLy8gXHJcbiAgQXJyb3dIYW5kbGVEZXRhaWwgPSAnYXJyb3ctaGFuZGxlLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIFRleHRDZW50ZXJIYW5kbGVEZXRhaWwgPSAndGV4dC1jZW50ZXItaGFuZGxlLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIFRleHRCb3hIYW5kbGVEZXRhaWwgPSAndGV4dC1ib3gtaGFuZGxlLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1hcmtBcnJvd0hhbmRsZURldGFpbCA9ICdtYXJrLWFycm93LWhhbmRsZS1kZXRhaWwnLFxyXG5cclxuICAvLyBcclxuICBNYXJrTW92YWJsZUhhbmRsZURldGFpbCA9ICdtYXJrLW1vdmFibGUtaGFuZGxlLWRldGFpbCcsXHJcblxyXG4gIC8vIFxyXG4gIE1hcmtBbmNob3JEZXRhaWwgPSAnbWFyay1hbmNob3ItZGV0YWlsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2NlbmVNb2RlbFR5cGVzSGl0VHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIE5vSGl0ID0gJ25vLWhpdCcsXHJcblxyXG4gIC8vIFxyXG4gIEFyZWFIaXQgPSAnYXJlYS1oaXQnLFxyXG5cclxuICAvLyBcclxuICBOZWFySGl0ID0gJ25lYXItaGl0JyxcclxuXHJcbiAgLy8gXHJcbiAgRXhhY3RIaXQgPSAnZXhhY3QtaGl0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2NlbmVNb2RlbFR5cGVzSGl0VGVzdFN0eWxlIHtcclxuXHJcbiAgLy8gXHJcbiAgQm91bmRzVGVzdCA9ICdib3VuZHMtdGVzdCcsXHJcblxyXG4gIC8vIFxyXG4gIEV4YWN0VGVzdCA9ICdleGFjdC10ZXN0JyxcclxuXHJcbiAgLy8gXHJcbiAgUmFkaWFsRGlzdGFuY2VUZXN0ID0gJ3JhZGlhbC1kaXN0YW5jZS10ZXN0JyxcclxuXHJcbiAgLy8gXHJcbiAgTGFiZWxUZXN0ID0gJ2xhYmVsLXRlc3QnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTY2VuZU1vZGVsVHlwZXNIaXRUZXN0RmxhZ3Mge1xyXG5cclxuICAvLyBcclxuICBIaXRUZXN0QWxsID0gJ2hpdC10ZXN0LWFsbCcsXHJcblxyXG4gIC8vIFxyXG4gIEhpdFRlc3RJZ25vcmVMYWJlbHMgPSAnaGl0LXRlc3QtaWdub3JlLWxhYmVscycsXHJcblxyXG4gIC8vIFxyXG4gIEhpdFRlc3RJZ25vcmVBbm5vdGF0aW9ucyA9ICdoaXQtdGVzdC1pZ25vcmUtYW5ub3RhdGlvbnMnLFxyXG5cclxuICAvLyBcclxuICBIaXRUZXN0Rm9yT3ZlcmxheSA9ICdoaXQtdGVzdC1mb3Itb3ZlcmxheSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEFubm90YXRlRW51bSB7XHJcblxyXG4gIC8vIFxyXG4gIEFFX01hcmsgPSAnbWFyaycsXHJcblxyXG4gIC8vIFxyXG4gIEFFX1BvaW50ID0gJ3BvaW50JyxcclxuXHJcbiAgLy8gXHJcbiAgQUVfQXJlYSA9ICdhcmVhJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTWFya0VudW0ge1xyXG5cclxuICAvLyBcclxuICBNRV9BdXRvID0gJ2F1dG8nLFxyXG5cclxuICAvLyBcclxuICBNRV9PbiA9ICdvbicsXHJcblxyXG4gIC8vIFxyXG4gIE1FX09mZiA9ICdvZmYnLFxyXG5cclxuICAvLyBcclxuICBNRV9DbGVhciA9ICdjbGVhcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFpvb21MZXZlbCB7XHJcblxyXG4gIC8vIFxyXG4gIFpPT01fRU5USVJFX1ZJRVcgPSAnem9vbS1lbnRpcmUtdmlldycsXHJcblxyXG4gIC8vIFxyXG4gIFpPT01fRklUX1dJRFRIID0gJ3pvb20tZml0LXdpZHRoJyxcclxuXHJcbiAgLy8gXHJcbiAgWk9PTV9GSVRfSEVJR0hUID0gJ3pvb20tZml0LWhlaWdodCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEFjdGlvblR5cGUge1xyXG5cclxuICAvLyBcclxuICBBVF9Vbmtub3duID0gJ3Vua25vd24nLFxyXG5cclxuICAvLyBcclxuICBBVF9CcnVzaCA9ICdicnVzaCcsXHJcblxyXG4gIC8vIFxyXG4gIEFUX0ZpbHRlciA9ICdmaWx0ZXInLFxyXG5cclxuICAvLyBcclxuICBBVF9VUkwgPSAndXJsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2hlbGZEcm9wQWN0aW9uIHtcclxuXHJcbiAgLy8gXHJcbiAgU2RhUmVwbGFjZSA9ICdyZXBsYWNlJyxcclxuXHJcbiAgLy8gXHJcbiAgU2RhQ29tYmluZSA9ICdjb21iaW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgU2RhSW5zZXJ0ID0gJ2luc2VydCcsXHJcblxyXG4gIC8vIFxyXG4gIFNkYVN3YXAgPSAnc3dhcCcsXHJcblxyXG4gIC8vIFxyXG4gIFNkYVJlcGxhY2VBbGwgPSAncmVwbGFjZS1hbGwnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTaGVsZkRyb3BDb250ZXh0IHtcclxuXHJcbiAgLy8gXHJcbiAgU2hlbGZEcm9wQ29udGV4dF9Ob25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBTaGVsZkRyb3BDb250ZXh0X0NhdGVnb3JpY2FsID0gJ2NhdGVnb3JpY2FsJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hlbGZEcm9wQ29udGV4dF9RdWFudGl0YXRpdmUgPSAncXVhbnRpdGF0aXZlJ1xyXG59XHJcblxyXG4vLyBEcmFnL0Ryb3Agc291cmNlIGFuZCB0YXJnZXRcclxuZXhwb3J0IGVudW0gRHJhZ0Ryb3BUeXBlIHtcclxuXHJcbiAgLy8gZHJhZyBmcm9tIG9yIGRyb3Agb250byB2aXpcclxuICBEcmFnRHJvcF9WaXogPSAnZHJhZy1kcm9wLXZpeicsXHJcblxyXG4gIC8vIGRyYWcgZnJvbSBvciBkcm9wIG9udG8gc2hlbGZcclxuICBEcmFnRHJvcF9TaGVsZiA9ICdkcmFnLWRyb3Atc2hlbGYnLFxyXG5cclxuICAvLyBkcmFnIGZyb20gb3IgZHJvcCBvbnRvIHNjaGVtYVxyXG4gIERyYWdEcm9wX1NjaGVtYSA9ICdkcmFnLWRyb3Atc2NoZW1hJyxcclxuXHJcbiAgLy8gZHJhZyBmcm9tIG9yIGRyb3Agb250byBub3doZXJlXHJcbiAgRHJhZ0Ryb3BfTm9uZSA9ICdkcmFnLWRyb3Atbm9uZScsXHJcblxyXG4gIC8vIGRyYWcgZnJvbSBvciBkcm9wIG9udG8gY2FsY3VsYXRpb24gZWRpdG9yXHJcbiAgRHJhZ0Ryb3BfQ2FsY3VsYXRpb25FZGl0b3IgPSAnZHJhZy1kcm9wLWNhbGN1bGF0aW9uLWVkaXRvcicsXHJcblxyXG4gIC8vIGRyYWcgZnJvbSBwaXZvdCB3aW5kb3dcclxuICBEcmFnRHJvcF9QaXZvdCA9ICdkcmFnLWRyb3AtcGl2b3QnXHJcbn1cclxuXHJcbi8vIERpYWxvZyB0eXBlIHJlbGF0ZWQgdG8gcmVkaXJlY3QgYWN0aW9uIHJlcXVpcmVkIGJ5IFVJXHJcbmV4cG9ydCBlbnVtIENvbW1hbmRSZWRpcmVjdFR5cGUge1xyXG5cclxuICAvLyBhZGQgbmV3IGRhdGEgY29ubmVjdGlvbiBkaWFsb2dcclxuICBDb21tYW5kUmVkaXJlY3RfQWRkRGF0YUNvbm5lY3Rpb24gPSAnY29tbWFuZC1yZWRpcmVjdC1hZGQtZGF0YS1jb25uZWN0aW9uJyxcclxuXHJcbiAgLy8gY3JlYXRlIGRyaWxsIHBhdGggZGlhbG9nXHJcbiAgQ29tbWFuZFJlZGlyZWN0X0FkZERyaWxsUGF0aCA9ICdjb21tYW5kLXJlZGlyZWN0LWFkZC1kcmlsbC1wYXRoJyxcclxuXHJcbiAgLy8gY29uZmlybWF0aW9uIGRpYWxvZ1xyXG4gIENvbW1hbmRSZWRpcmVjdF9Db25maXJtYXRpb24gPSAnY29tbWFuZC1yZWRpcmVjdC1jb25maXJtYXRpb24nLFxyXG5cclxuICAvLyBzaG93cyB0aGUgZm9ybWF0IHdvcmtib29rIHBhbmVcclxuICBDb21tYW5kUmVkaXJlY3RfRm9ybWF0V29ya2Jvb2sgPSAnY29tbWFuZC1yZWRpcmVjdC1mb3JtYXQtd29ya2Jvb2snLFxyXG5cclxuICAvLyBub3RpZmljYXRpb24gZGlhbG9nXHJcbiAgQ29tbWFuZFJlZGlyZWN0X05vdGlmaWNhdGlvbiA9ICdjb21tYW5kLXJlZGlyZWN0LW5vdGlmaWNhdGlvbicsXHJcblxyXG4gIC8vIHNob3cgbnVtYmVyIGZvcm1hdHRpbmcgZGlhbG9nXHJcbiAgQ29tbWFuZFJlZGlyZWN0X051bWJlckZvcm1hdCA9ICdjb21tYW5kLXJlZGlyZWN0LW51bWJlci1mb3JtYXQnLFxyXG5cclxuICAvLyBmdWxsLWZlYXR1cmVkIGVkaXRvclxyXG4gIENvbW1hbmRSZWRpcmVjdF9FZGl0ID0gJ2NvbW1hbmQtcmVkaXJlY3QtZWRpdCcsXHJcblxyXG4gIC8vIHF1aWNrIGVkaXRvclxyXG4gIENvbW1hbmRSZWRpcmVjdF9RdWlja0VkaXQgPSAnY29tbWFuZC1yZWRpcmVjdC1xdWljay1lZGl0JyxcclxuXHJcbiAgLy8gaW5saW5lIHJlbmFtZSBmaWVsZFxyXG4gIENvbW1hbmRSZWRpcmVjdF9SZW5hbWVGaWVsZCA9ICdjb21tYW5kLXJlZGlyZWN0LXJlbmFtZS1maWVsZCcsXHJcblxyXG4gIC8vIHJlbmFtZSBkcmlsbCBwYXRoIGRpYWxvZ1xyXG4gIENvbW1hbmRSZWRpcmVjdF9SZW5hbWVEcmlsbFBhdGggPSAnY29tbWFuZC1yZWRpcmVjdC1yZW5hbWUtZHJpbGwtcGF0aCcsXHJcblxyXG4gIC8vIHJlbmFtZSBzaGVldCBkaWFsb2dcclxuICBDb21tYW5kUmVkaXJlY3RfUmVuYW1lU2hlZXQgPSAnY29tbWFuZC1yZWRpcmVjdC1yZW5hbWUtc2hlZXQnLFxyXG5cclxuICAvLyBlZGl0IHdlYiB6b25lIHVybFxyXG4gIENvbW1hbmRSZWRpcmVjdF9FZGl0V2ViWm9uZVVybCA9ICdjb21tYW5kLXJlZGlyZWN0LWVkaXQtd2ViLXpvbmUtdXJsJyxcclxuXHJcbiAgLy8gZWRpdCBmb3JtYXR0aW5nXHJcbiAgQ29tbWFuZFJlZGlyZWN0X0VkaXRGb3JtYXR0aW5nID0gJ2NvbW1hbmQtcmVkaXJlY3QtZWRpdC1mb3JtYXR0aW5nJyxcclxuXHJcbiAgLy8gY2F0ZWdvcmljYWwgYmluIGVkaXQgZGlhbG9nXHJcbiAgQ29tbWFuZFJlZGlyZWN0X0NhdGVnb3JpY2FsQmluRWRpdCA9ICdjb21tYW5kLXJlZGlyZWN0LWNhdGVnb3JpY2FsLWJpbi1lZGl0JyxcclxuXHJcbiAgLy8gbnVtZXJpYyBiaW4gZWRpdCBkaWFsb2dcclxuICBDb21tYW5kUmVkaXJlY3RfTnVtZXJpY0JpbkVkaXQgPSAnY29tbWFuZC1yZWRpcmVjdC1udW1lcmljLWJpbi1lZGl0JyxcclxuXHJcbiAgLy8gcmljaCB0ZXh0IGRpYWxvZ1xyXG4gIENvbW1hbmRSZWRpcmVjdF9SaWNoVGV4dCA9ICdjb21tYW5kLXJlZGlyZWN0LXJpY2gtdGV4dCcsXHJcblxyXG4gIC8vIGRlbGV0ZSBzaGVldCBkaWFsb2dcclxuICBDb21tYW5kUmVkaXJlY3RfRGVsZXRlU2hlZXQgPSAnY29tbWFuZC1yZWRpcmVjdC1kZWxldGUtc2hlZXQnLFxyXG5cclxuICAvLyBObyByZWRpcmVjdCByZXF1aXJlZFxyXG4gIENvbW1hbmRSZWRpcmVjdF9Ob25lID0gJ2NvbW1hbmQtcmVkaXJlY3Qtbm9uZSdcclxufVxyXG5cclxuLy8gRGlyZWN0aXZlcyBmb3IgaGV1cmlzdGljYWxseSBpbnRlcnByZXRpbmcgdXNlciBpbnRlbnQgb2YgY29tbWFuZFxyXG5leHBvcnQgZW51bSBIZXVyaXN0aWNDb21tYW5kUmVpbnRlcnByZXRhdGlvbiB7XHJcblxyXG4gIC8vIERpcmVjdHMgVGFibGVhdSB0byBub3QgcmVpbnRlcnByZXQgc3BlY2lmaWNzIG9mIHRoZSBjb21tYW5kXHJcbiAgRG9Ob3RSZWludGVycHJldENvbW1hbmQgPSAnZG8tbm90LXJlaW50ZXJwcmV0LWNvbW1hbmQnLFxyXG5cclxuICAvLyBEaXJlY3RzIFRhYmxlYXUgdG8gZ3Vlc3MgdGhhdCB3aGVuIHRoZSB1c2VyIHNlbGVjdGVkIGFsbCBpdGVtcyBpbiBhIGZpbHRlciwgdGhlIGludGVudCB3YXMgYWN0dWFsbHkgdG8gc2VsZWN0IEFMTFxyXG4gIENhdGVnb3JpY2FsRmlsdGVyX0luZmVyQWxsV2hlbkV2ZXJ5dGhpbmdTZWxlY3RlZCA9ICdjYXRlZ29yaWNhbC1maWx0ZXItaW5mZXItYWxsLXdoZW4tZXZlcnl0aGluZy1zZWxlY3RlZCdcclxufVxyXG5cclxuLy8gZmlsdGVyIHR5cGVzXHJcbmV4cG9ydCBlbnVtIEZpbHRlclR5cGUge1xyXG5cclxuICAvLyBRdWFudGl0YXRpdmVcclxuICBGTFRSX1F1YW50aXRhdGl2ZSA9ICdRdWFudGl0YXRpdmUnLFxyXG5cclxuICAvLyBDYXRlZ29yaWNhbFxyXG4gIEZMVFJfQ2F0ZWdvcmljYWwgPSAnQ2F0ZWdvcmljYWwnLFxyXG5cclxuICAvLyBIaWVyYXJjaGljYWxcclxuICBGTFRSX0hpZXJhcmNoaWNhbCA9ICdIaWVyYXJjaGljYWwnLFxyXG5cclxuICAvLyBSZWxhdGl2ZSBEYXRlXHJcbiAgRkxUUl9SZWxhdGl2ZURhdGUgPSAnUmVsYXRpdmVEYXRlJyxcclxuXHJcbiAgLy8gUmVsYXRpdmVEYXRlUGlja1xyXG4gIEZMVFJfUmVsYXRpdmVEYXRlUGljayA9ICdSZWxhdGl2ZURhdGVQaWNrJyxcclxuXHJcbiAgLy8gTm90U3BlY2lmaWVkXHJcbiAgRkxUUl9EZWZhdWx0ID0gJ0ZpbHRlckRlZmF1bHQnXHJcbn1cclxuXHJcbi8vIFBhcmFtZXRlciBlcnJvcnNcclxuZXhwb3J0IGVudW0gUGFyYW1ldGVyRXJyb3Ige1xyXG5cclxuICAvLyBmaWVsZCBhZ2dyZWdhdGlvbiBpcyBpbnZhbGlkXHJcbiAgSW52YWxpZEFnZ0ZpZWxkcyA9ICdpbnZhbGlkLWFnZy1maWVsZHMnLFxyXG5cclxuICAvLyBmaWVsZCBpcyBpbnZhbGlkXHJcbiAgSW52YWxpZEZpZWxkcyA9ICdpbnZhbGlkLWZpZWxkcycsXHJcblxyXG4gIC8vIGZpbHRlciB2YWx1ZXMgYXJlIGludmFsaWRcclxuICBJbnZhbGlkRmlsdGVyVmFsdWVzID0gJ2ludmFsaWQtZmlsdGVyLXZhbHVlcycsXHJcblxyXG4gIC8vIGRhdGUgdmFsdWUgaXMgaW52YWxpZFxyXG4gIEludmFsaWREYXRlcyA9ICdpbnZhbGlkLWRhdGVzJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2VsZWN0aW9uVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNUX1R1cGxlcyA9ICd0dXBsZXMnLFxyXG5cclxuICAvLyBcclxuICBTVF9Ob2RlcyA9ICdub2RlcycsXHJcblxyXG4gIC8vIFxyXG4gIFNUX1RyZW5kTGluZXMgPSAndHJlbmQtbGluZXMnLFxyXG5cclxuICAvLyBcclxuICBTVF9MZWdlbmRJdGVtcyA9ICdsZWdlbmQtaXRlbXMnLFxyXG5cclxuICAvLyBcclxuICBTVF9SZWZMaW5lcyA9ICdyZWYtbGluZXMnLFxyXG5cclxuICAvLyBcclxuICBTVF9Bbm5vdGF0aW9ucyA9ICdhbm5vdGF0aW9ucycsXHJcblxyXG4gIC8vIFxyXG4gIFNUX09yaWVudGVkTm9kZXMgPSAnb3JpZW50ZWQtbm9kZXMnLFxyXG5cclxuICAvLyBcclxuICBTVF9TaGVsZkZpZWxkcyA9ICdzaGVsZi1maWVsZHMnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTZWxlY3Rpb25VcGRhdGVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU1VfQUREID0gJ3NlbGVjdC1hZGQnLFxyXG5cclxuICAvLyBcclxuICBTVV9SRU1PVkUgPSAnc2VsZWN0LXJlbW92ZScsXHJcblxyXG4gIC8vIFxyXG4gIFNVX1JFUExBQ0UgPSAnc2VsZWN0LXJlcGxhY2UnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBTZWxlY3RPcHRpb25zIHtcclxuXHJcbiAgLy8gTm8ga2V5IGRvd25cclxuICBTZWxlY3RPcHRpb25zU2ltcGxlID0gJ3NlbGVjdC1vcHRpb25zLXNpbXBsZScsXHJcblxyXG4gIC8vIEN0cmwga2V5IGRvd25cclxuICBTZWxlY3RPcHRpb25zVG9nZ2xlID0gJ3NlbGVjdC1vcHRpb25zLXRvZ2dsZScsXHJcblxyXG4gIC8vIFNoaWZ0IGtleSBkb3duXHJcbiAgU2VsZWN0T3B0aW9uc1JhbmdlID0gJ3NlbGVjdC1vcHRpb25zLXJhbmdlJyxcclxuXHJcbiAgLy8gVXN1YWxseSB0cmlnZ2VyZWQgYnkgcmlnaHQgY2xpY2tcclxuICBTZWxlY3RPcHRpb25zTW91c2VNZW51ID0gJ3NlbGVjdC1vcHRpb25zLW1lbnUnLFxyXG5cclxuICAvLyBBbiBhdHRlbXB0IHRvIHNlbGVjdCB2aWEgc2VhcmNoXHJcbiAgU2VsZWN0T3B0aW9uc1NlYXJjaE1hdGNoID0gJ3NlbGVjdC1vcHRpb25zLXNlYXJjaCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFdoaXRlc3BhY2VTZWxlY3Rpb25CZWhhdmlvciB7XHJcblxyXG4gIC8vIENsZWFyIHNlbGVjdGlvbiBvdmVyIHdoaXRlc3BhY2UgYmFzZWQgb24gZGVmYXVsdCBmYWN0b3JzIChpLmUuLCBhcmUgd2UgaW4gYXBwZW5kIG1vZGU/KVxyXG4gIERlZmF1bHQgPSAnZGVmYXVsdCcsXHJcblxyXG4gIC8vIEFsd2F5cyBjbGVhciBzZWxlY3Rpb24gb3ZlciB3aGl0ZXNwYWNlXHJcbiAgQWx3YXlzQ2xlYXIgPSAnYWx3YXlzLWNsZWFyJyxcclxuXHJcbiAgLy8gTmV2ZXIgY2xlYXIgc2VsZWN0aW9uIG92ZXIgd2hpdGVzcGFjZVxyXG4gIE5ldmVyQ2xlYXIgPSAnbmV2ZXItY2xlYXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBPcmllbnRhdGlvbiB7XHJcblxyXG4gIC8vIFxyXG4gIFZlcnRpY2FsID0gJ28tdmVydCcsXHJcblxyXG4gIC8vIFxyXG4gIEhvcml6b250YWwgPSAnby1ob3JpeicsXHJcblxyXG4gIC8vIFxyXG4gIE9BdXRvbWF0aWMgPSAnby1hdXRvJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2NhbGVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTG9nID0gJ2xvZycsXHJcblxyXG4gIC8vIFxyXG4gIExpbmVhciA9ICdsaW5lYXInXHJcbn1cclxuXHJcbi8vIHR5cGUgb2Ygb2JqZWN0IGFjdGlvbiBhcHBsaWVzIHRvXHJcbmV4cG9ydCBlbnVtIFNvdXJjZVR5cGUge1xyXG5cclxuICAvLyBhbGwgc2hlZXRzIGluIHRoZSB3b3JrYm9va1xyXG4gIFNUX0FsbCA9ICdhbGwnLFxyXG5cclxuICAvLyBhbGwgc2hlZXRzIHJlZmVyZW5jaW5nIGEgZ2l2ZW4gZGF0YXNvdXJjZVxyXG4gIFNUX0RhdGFzb3VyY2UgPSAnZGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIHdvcmtzaGVldCBvciBkYXNoYm9hcmRcclxuICBTVF9TaGVldCA9ICdzaGVldCdcclxufVxyXG5cclxuLy8gaG93IGFuIGFjdGlvbiBnZXRzIGFjdGl2YXRlZFxyXG5leHBvcnQgZW51bSBBY3RpdmF0aW9uTWV0aG9kIHtcclxuXHJcbiAgLy8gZS5nLiBieSBwaWNraW5nIGFuIG9wdGlvbiBmcm9tIGEgY29udGV4dCBtZW51XHJcbiAgQU1fRXhwbGljaXQgPSAnZXhwbGljaXRseScsXHJcblxyXG4gIC8vIGF1dG8gYWN0aXZhdGVkIHdoZW4gbWFya3MgYXJlIHNlbGVjdGVkXHJcbiAgQU1fT25TZWxlY3QgPSAnb24tc2VsZWN0JyxcclxuXHJcbiAgLy8gYXV0byBhY3RpdmF0ZWQgd2hlbiB0aGUgdXNlciBtb3ZlcyB0aGUgbW91c2Ugb3ZlciBhIG1hcmtcclxuICBBTV9PbkhvdmVyID0gJ29uLWhvdmVyJ1xyXG59XHJcblxyXG4vLyB3aGV0aGVyIGFuIGFjdGlvbiBzaG91bGQgYmUgcnVuIHdoZW4gc2VsZWN0aW9uIGlzIGNsZWFyZWRcclxuZXhwb3J0IGVudW0gT25DbGVhciB7XHJcblxyXG4gIC8vIGRvIG5vdGhpbmcsIGUuZy4gbGVhdmUgZmlsdGVyIGluIHBsYWNlXHJcbiAgT0NfTm90aGluZyA9ICdub3RoaW5nJyxcclxuXHJcbiAgLy8gc2hvdyBhbGwgdmFsdWVzXHJcbiAgT0NfU2hvd0FsbCA9ICdzaG93LWFsbCcsXHJcblxyXG4gIC8vIGV4Y2x1ZGUgZXZlcnl0aGluZ1xyXG4gIE9DX0V4Y2x1ZGVBbGwgPSAnZXhjbHVkZS1hbGwnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBNZXJnZU9yU3BsaXQge1xyXG5cclxuICAvLyBcclxuICBNT1NfTUVSR0UgPSAnbWVyZ2UnLFxyXG5cclxuICAvLyBcclxuICBNT1NfU1BMSVQgPSAnc3BsaXQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBNYXJrTGF5b3V0UHJpbWl0aXZlIHtcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVQcmltaXRpdmUgPSAnc2hhcGUnLFxyXG5cclxuICAvLyBcclxuICBMaW5lUHJpbWl0aXZlID0gJ2xpbmUnLFxyXG5cclxuICAvLyBcclxuICBCYXJQcmltaXRpdmUgPSAnYmFyJyxcclxuXHJcbiAgLy8gXHJcbiAgUG9sYXJCYXJQcmltaXRpdmUgPSAncG9sYXItYmFyJyxcclxuXHJcbiAgLy8gXHJcbiAgVGV4dFByaW1pdGl2ZSA9ICd0ZXh0JyxcclxuXHJcbiAgLy8gXHJcbiAgTGFiZWxQcmltaXRpdmUgPSAnbGFiZWwnLFxyXG5cclxuICAvLyBcclxuICBQaWVQcmltaXRpdmUgPSAncGllJyxcclxuXHJcbiAgLy8gXHJcbiAgQXJlYVByaW1pdGl2ZSA9ICdhcmVhJyxcclxuXHJcbiAgLy8gXHJcbiAgUG9seWdvblByaW1pdGl2ZSA9ICdwb2x5Z29uJyxcclxuXHJcbiAgLy8gXHJcbiAgTXVsdGlwb2x5Z29uUHJpbWl0aXZlID0gJ211bHRpcG9seWdvbicsXHJcblxyXG4gIC8vIFxyXG4gIFNxdWFyZVByaW1pdGl2ZSA9ICdzcXVhcmUnXHJcbn1cclxuXHJcbi8vIERvZXMgdGhlIFBhbmVUeXBlL1ByaW1pdGl2ZVR5cGUvTGF5b3V0VHlwZSB0cmlwbGV0IHJlc3VsdCBpbiB2ZXJ5IHNwZWNpZmljIGxheW91dCBydWxlcz9cclxuZXhwb3J0IGVudW0gTWFya0xheW91dFZpelR5cGUge1xyXG5cclxuICAvLyBObyBzcGVjaWFsIHJ1bGVzXHJcbiAgU3RhbmRhcmQgPSAnc3RhbmRhcmQnLFxyXG5cclxuICAvLyBHZW5lcmljIE9PIFN0YWNrZWQgcnVsZXNcclxuICBPT1N0YWNrZWQgPSAnb28tc3RhY2tlZCcsXHJcblxyXG4gIC8vIE9PIEdhbnR0IFN0YWNrZWQgcnVsZXNcclxuICBHYW50dFN0YWNrZWQgPSAnZ2FudHQtc3RhY2tlZCcsXHJcblxyXG4gIC8vIFRyZWVtYXBcclxuICBUcmVlbWFwID0gJ3RyZWVtYXAnLFxyXG5cclxuICAvLyBCdWJibGUgQ2hhcnQgLS0gT08gUGFja2VkIGNpcmNsZXMgb3Igc2hhcGVzXHJcbiAgQnViYmxlID0gJ2J1YmJsZScsXHJcblxyXG4gIC8vIFdvcmRsZVxyXG4gIFdvcmRsZSA9ICd3b3JkbGUnLFxyXG5cclxuICAvLyBIaWdobGlnaHQgVGFibGVcclxuICBIaWdobGlnaHQgPSAnaGlnaGxpZ2h0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTWFya0xheW91dEhhbmRsZVNwZWNpYWxzIHtcclxuXHJcbiAgLy8gXHJcbiAgQ2F0ZWdvcmljYWxBeGlzID0gJ2NhdGVnb3JpY2FsLWF4aXMnLFxyXG5cclxuICAvLyBcclxuICBTaG93U3BlY2lhbHMgPSAnc2hvdy1zcGVjaWFscycsXHJcblxyXG4gIC8vIFxyXG4gIE9taXRTcGVjaWFscyA9ICdvbWl0LXNwZWNpYWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgQnJlYWtPblNwZWNpYWxzID0gJ2JyZWFrLW9uLXNwZWNpYWxzJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTWFya0xheW91dE1hcmtGbGFnIHtcclxuXHJcbiAgLy8gbWFyayBkb2VzIG5vdCBjb25uZWN0IHRvIHRoZSBuZXh0IG1hcmtcclxuICBFbmQgPSAnZW5kJyxcclxuXHJcbiAgLy8gbGFzdCBtYXJrIGluIGEgbXVsdGktcHJpbWl0aXZlXHJcbiAgRW5kUHJpbWl0aXZlID0gJ2VuZHByaW1pdGl2ZScsXHJcblxyXG4gIC8vIGxhc3QgbWFyayBoYXMgYW4gZWRnZSBjb25uZWN0b3IgdG8gZmlyc3QgbWFya1xyXG4gIENsb3NlZFByaW1pdGl2ZSA9ICdjbG9zZWRwcmltaXRpdmUnLFxyXG5cclxuICAvLyB2aXN1YWwgbWFya2VyIHNob3VsZCBiZSBkaXNwbGF5ZWRcclxuICBNYXJrZWQgPSAnbWFya2VkJyxcclxuXHJcbiAgLy8gdmlzdWFsIG1hcmtlciBzaG91bGQgYmUgZGlzcGxheWVkIGlmIGxhYmVsbGVkXHJcbiAgTWFya2VkSWZMYWJlbCA9ICdtYXJrZWRpZmxhYmVsJyxcclxuXHJcbiAgLy8gZGlzcGxheSBkZWJ1ZyBpbmZvcm1hdGlvblxyXG4gIERlYnVnID0gJ2RlYnVnJyxcclxuXHJcbiAgLy8gdXNlciBmbGFncyBjYW4gYmVnaW4gaGVyZVxyXG4gIFVzZXIgPSAndXNlcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIE1hcmtMYXlvdXRQYW5lRmxhZyB7XHJcblxyXG4gIC8vIEFsbG93cyBzY2VuZSB0byBiZSBwYW5uZWQgaW4gdGhlIFggZGlyZWN0aW9uXHJcbiAgRW5hYmxlUGFuWCA9ICdlbmFibGUtcGFuLXgnLFxyXG5cclxuICAvLyBBbGxvd3Mgc2NlbmUgdG8gYmUgcGFubmVkIGluIHRoZSBZIGRpcmVjdGlvblxyXG4gIEVuYWJsZVBhblkgPSAnZW5hYmxlLXBhbi15JyxcclxuXHJcbiAgLy8gQWxsb3dzIHRoZSBwb3NpdGlvbnMgb2YgbWFya3MgdG8gYmUgc2NhbGVkIGluIHRoZSBYIGRpcmVjdGlvbiBhcyB0aGUgdmlldyBpcyB6b29tZWRcclxuICBFbmFibGVab29tWCA9ICdlbmFibGUtem9vbS14JyxcclxuXHJcbiAgLy8gQWxsb3dzIHRoZSBwb3NpdGlvbnMgb2YgbWFya3MgdG8gYmUgc2NhbGVkIGluIHRoZSBZIGRpcmVjdGlvbiBhcyB0aGUgdmlldyBpcyB6b29tZWRcclxuICBFbmFibGVab29tWSA9ICdlbmFibGUtem9vbS15JyxcclxuXHJcbiAgLy8gQWxsb3dzIHRoZSBzaXplIG9mIG1hcmtzIHRvIGJlIHNjYWxlZCBpbiB0aGUgWCBkaXJlY3Rpb24gYXMgdGhlIHZpZXcgaXMgem9vbWVkOyByZXF1aXJlcyB3aWR0aCBpbiBkb21haW4gY29vcmRpbmF0ZXNcclxuICBFbmFibGVTY2FsZVggPSAnZW5hYmxlLXNjYWxlLXgnLFxyXG5cclxuICAvLyBBbGxvd3MgdGhlIHNpemUgb2YgbWFya3MgdG8gYmUgc2NhbGVkIGluIHRoZSBZIGRpcmVjdGlvbiBhcyB0aGUgdmlldyBpcyB6b29tZWQ7IHJlcXVpcmVzIGhlaWdodCBpbiBkb21haW4gY29vcmRpbmF0ZXNcclxuICBFbmFibGVTY2FsZVkgPSAnZW5hYmxlLXNjYWxlLXknLFxyXG5cclxuICAvLyBDbGlwIHRvIGNlbGwgYm9yZGVycyBpbiB0aGUgeCBkaXJlY3Rpb25cclxuICBDbGlwVG9DZWxsWCA9ICdjbGlwLXRvLWNlbGwteCcsXHJcblxyXG4gIC8vIENsaXAgdG8gY2VsbCBib3JkZXJzIGluIHRoZSB5IGRpcmVjdGlvblxyXG4gIENsaXBUb0NlbGxZID0gJ2NsaXAtdG8tY2VsbC15JyxcclxuXHJcbiAgLy8gVXNlIGNlbGwgY2xpcHBpbmcgZm9yIHNlbGVjdGlvblxyXG4gIENsaXBUb0NlbGxGb3JTZWxlY3Rpb24gPSAnY2xpcC10by1jZWxsLWZvci1zZWxlY3Rpb24nLFxyXG5cclxuICAvLyBUaGUgeC1heGlzIGlzIG9uIHRvcCBvZiBwYW5lXHJcbiAgWEF4aXNPblRvcCA9ICd4LWF4aXMtb24tdG9wJyxcclxuXHJcbiAgLy8gVGhlIHktYXhpcyBpcyBvbiB0aGUgcmlnaHQgb2YgcGFuZVxyXG4gIFlBeGlzT25SaWdodCA9ICd5LWF4aXMtb24tcmlnaHQnLFxyXG5cclxuICAvLyBUaGUgcGFuZSBoYXMgY2VsbHMgaW4gdGhlIHggYXhpc1xyXG4gIEhhc0NlbGxzWCA9ICdoYXMtY2VsbHMteCcsXHJcblxyXG4gIC8vIFRoZSBwYW5lIGhhcyBjZWxscyBpbiB0aGUgeSBheGlzXHJcbiAgSGFzQ2VsbHNZID0gJ2hhcy1jZWxscy15J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gTWFya0xheW91dERyb3BMaW5lRmxhZyB7XHJcblxyXG4gIC8vIFNob3cgZHJvcCBsaW5lcyBvbiBzZWxlY3RlZCBtYXJrXHJcbiAgRHJvcExpbmVTaG93U2VsZWN0ZWQgPSAnZHJvcGxpbmUtc2hvdy1zZWxlY3RlZCcsXHJcblxyXG4gIC8vIFNob3cgZHJvcCBsaW5lcyBvbiBhbGwgbWFya3NcclxuICBEcm9wTGluZVNob3dBbGwgPSAnZHJvcGxpbmUtc2hvdy1hbGwnLFxyXG5cclxuICAvLyBEcm9wIGxpbmUgdG8geC1heGlzXHJcbiAgRHJvcExpbmVYID0gJ2Ryb3BsaW5lLXgnLFxyXG5cclxuICAvLyBEcm9wIGxpbmUgdG8geS1heGlzXHJcbiAgRHJvcExpbmVZID0gJ2Ryb3BsaW5lLXknLFxyXG5cclxuICAvLyBTaG93IGxhYmVscyBvbiBkcm9wIGxpbmVzXHJcbiAgRHJvcExpbmVMYWJlbHMgPSAnZHJvcGxpbmUtbGFiZWxzJ1xyXG59XHJcblxyXG4vLyBJZGVudGlmaWVzIHRoZSBvZmZzZXQgZm9yIGEgcGFydGljdWxhciB0YWJsZSBpbiB0aGUgYXJyYXkgb2YgdGFibGVzIGluIFBETWFya3NQcmVzTW9kZWxcclxuZXhwb3J0IGVudW0gTWFya0xheW91dERhdGFUYWJsZUlEIHtcclxuXHJcbiAgLy8gVGhlIHRhYmxlIHRoYXQgY29udGFpbnMgdGhlIG1hcmsgaW5mb3JtYXRpb25cclxuICBNYXJrVGFibGUgPSAnbWFyay10YWJsZScsXHJcblxyXG4gIC8vIFRoZSB0YWJsZSB0aGF0IGNvbnRhaW5zIHRleHQgcnVucyBmb3IgdGV4dCBtYXJrcyBhbmQgbGFiZWxzXHJcbiAgVGV4dFJ1blRhYmxlID0gJ3RleHQtcnVuLXRhYmxlJyxcclxuXHJcbiAgLy8gVGhlIHRhYmxlIHRoYXQgY29udGFpbnMgdGV4dCBzdHlsZXMgZm9yIGVhY2ggdGV4dCBydW4uXHJcbiAgVGV4dFN0eWxlVGFibGUgPSAndGV4dC1zdHlsZS10YWJsZSdcclxufVxyXG5cclxuLy8gV2hpY2ggbGFiZWxpbmcgYWxnb3JpdGhtIHNob3VsZCBiZSB1c2VkPyAgQ2xvc2VseSByZWxhdGVkIHRvIE1hcmtMYXlvdXQ6OlZpelR5cGVcclxuZXhwb3J0IGVudW0gTGFiZWxMYXlvdXRUeXBlIHtcclxuXHJcbiAgLy8gTm8gbGFiZWxzXHJcbiAgTEFCRUxfTEFZT1VUX05PTkUgPSAndW5sYWJlbGVkJyxcclxuXHJcbiAgLy8gVHJlZW1hcCAtIGxhYmVscyBpbnNpZGUgdGhlIHJlY3RhbmdsZXNcclxuICBMQUJFTF9MQVlPVVRfVFJFRU1BUCA9ICd0cmVlbWFwLWxhYmVscycsXHJcblxyXG4gIC8vIEJ1YmJsZSBDaGFydCAtIGxhYmVscyBpbnNpZGUgdGhlIHNoYXBlc1xyXG4gIExBQkVMX0xBWU9VVF9CVUJCTEVDSEFSVCA9ICdidWJibGUtbGFiZWxzJyxcclxuXHJcbiAgLy8gU2NhdHRlcnBsb3QgLSBkeW5hbWljIGJlc3QtZml0IGxhYmVsc1xyXG4gIExBQkVMX0xBWU9VVF9TQ0FUVEVSUExPVCA9ICdzY2F0dGVycGxvdC1sYWJlbHMnLFxyXG5cclxuICAvLyBTdGFuZGFyZCBsYWJlbGluZ1xyXG4gIExBQkVMX0xBWU9VVF9TVEFOREFSRCA9ICdzdGFuZGFyZC1sYWJlbHMnLFxyXG5cclxuICAvLyBIaWdobGlnaHQgdGFibGVcclxuICBMQUJFTF9MQVlPVVRfSElHSExJR0hUX1RBQkxFID0gJ2hpZ2hsaWdodC10YWJsZS1sYWJlbHMnXHJcbn1cclxuXHJcbi8vIE1hcmtMYXllciByZXByZXNlbnRzIHRoZSBsYXllcnMgb2YgYSBtYXJrIGdpdmVuIHRoZSB2YXJpb3VzIHN0YXRlc1xyXG5leHBvcnQgZW51bSBNYXJrTGF5ZXIge1xyXG5cclxuICAvLyBcclxuICBOb3JtYWxVbmRlciA9ICdub3JtYWxVbmRlcicsXHJcblxyXG4gIC8vIFxyXG4gIE5vcm1hbE9uID0gJ25vcm1hbE9uJyxcclxuXHJcbiAgLy8gXHJcbiAgU2VsZWN0ZWRVbmRlciA9ICdzZWxlY3RlZFVuZGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU2VsZWN0ZWRPbiA9ICdzZWxlY3RlZE9uJyxcclxuXHJcbiAgLy8gXHJcbiAgSGlnaGxpZ2h0ZWRVbmRlciA9ICdoaWdobGlnaHRlZFVuZGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgSGlnaGxpZ2h0ZWRPbiA9ICdoaWdobGlnaHRlZE9uJyxcclxuXHJcbiAgLy8gXHJcbiAgRWRnZVVuZGVyID0gJ2VkZ2VVbmRlcicsXHJcblxyXG4gIC8vIFxyXG4gIEVkZ2VPbiA9ICdlZGdlT24nLFxyXG5cclxuICAvLyBcclxuICBCb3JkZXIgPSAnYm9yZGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgU2VsZWN0ZWRVbmRlcjEgPSAnc2VsZWN0ZWRVbmRlcjEnLFxyXG5cclxuICAvLyBcclxuICBTZWxlY3RlZE9uMSA9ICdzZWxlY3RlZE9uMScsXHJcblxyXG4gIC8vIFxyXG4gIFVuU2VsZWN0ZWRDdXN0b21TaGFwZSA9ICd1blNlbGVjdGVkQ3VzdG9tU2hhcGUnLFxyXG5cclxuICAvLyBcclxuICBOb3JtYWxBbHBoYU1hc2sgPSAnbm9ybWFsQWxwaGFNYXNrJyxcclxuXHJcbiAgLy8gXHJcbiAgSGFsb0FscGhhTWFzayA9ICdoYWxvQWxwaGFNYXNrJyxcclxuXHJcbiAgLy8gXHJcbiAgSGlnaGxpZ2h0ZWRVbmRlcjEgPSAnaGlnaGxpZ2h0ZWRVbmRlcjEnLFxyXG5cclxuICAvLyBcclxuICBIaWdobGlnaHRlZE9uMSA9ICdoaWdobGlnaHRlZE9uMScsXHJcblxyXG4gIC8vIFxyXG4gIFNlbGVjdGVkRWRnZVVuZGVyID0gJ3NlbGVjdGVkRWRnZVVuZGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgQmxvYlVuZGVyID0gJ2Jsb2JVbmRlcicsXHJcblxyXG4gIC8vIFxyXG4gIEJsb2JPbiA9ICdibG9iT24nLFxyXG5cclxuICAvLyBcclxuICBIb3Zlck92ZXJsYXkgPSAnaG92ZXJPdmVybGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgUHJlc3NlZE92ZXJsYXkgPSAncHJlc3NlZE92ZXJsYXknXHJcbn1cclxuXHJcbi8vIENvbG9yT3ZlcnJpZGVNb2RlIHJlcHJlc2VudHMgdGhlIGRpZmZlcmVudCB3YXlzIGluIHdoaWNoIG1hcmsgY29sb3JzIG1heSBiZSBtb2RpZmllZC5cclxuZXhwb3J0IGVudW0gQ29sb3JPdmVycmlkZU1vZGUge1xyXG5cclxuICAvLyBcclxuICBDb2xvck92ZXJyaWRlTm9uZSA9ICdjb2xvck92ZXJyaWRlTm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yT3ZlcnJpZGVGb2cgPSAnY29sb3JPdmVycmlkZUZvZycsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yT3ZlcnJpZGVPcGFxdWUgPSAnY29sb3JPdmVycmlkZU9wYXF1ZScsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yT3ZlcnJpZGVSZXBsYWNlQWxwaGEgPSAnY29sb3JPdmVycmlkZVJlcGxhY2VBbHBoYScsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yT3ZlcnJpZGVDb3VudCA9ICdjb2xvck92ZXJyaWRlQ291bnQnXHJcbn1cclxuXHJcbi8vIENvbG9yVHJhbnNmb3JtTW9kZSByZXByZXNlbnRzIHRoZSBkaWZmZXJlbnQgd2F5cyBpbiB3aGljaCBtYXJrIGNvbG9ycyBtYXkgYmUgbW9kaWZpZWQuXHJcbmV4cG9ydCBlbnVtIENvbG9yVHJhbnNmb3JtTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIENvbG9yVHJhbnNmb3JtTm9uZSA9ICdjb2xvclRyYW5zZm9ybU5vbmUnLFxyXG5cclxuICAvLyBcclxuICBDb2xvclRyYW5zZm9ybUZvZyA9ICdjb2xvclRyYW5zZm9ybUZvZycsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yVHJhbnNmb3JtT3BhcXVlID0gJ2NvbG9yVHJhbnNmb3JtT3BhcXVlJyxcclxuXHJcbiAgLy8gXHJcbiAgQ29sb3JUcmFuc2Zvcm1PdmVycmlkZUNvbG9yID0gJ2NvbG9yVHJhbnNmb3JtT3ZlcnJpZGVDb2xvcicsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yVHJhbnNmb3JtT3ZlcnJpZGVBbHBoYSA9ICdjb2xvclRyYW5zZm9ybU92ZXJyaWRlQWxwaGEnXHJcbn1cclxuXHJcbi8vIE1hcmtTdGF0ZSByZXByZXNlbnRzIHZhbGlkIHN0YXRlcyBmb3IgYSBtYXJrLlxyXG5leHBvcnQgZW51bSBNYXJrU3RhdGUge1xyXG5cclxuICAvLyBcclxuICBNYXJrU3RhdGVOb3JtYWwgPSAnbWFya1N0YXRlTm9ybWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgTWFya1N0YXRlSGlnaGxpZ2h0ZWQgPSAnbWFya1N0YXRlSGlnaGxpZ2h0ZWQnLFxyXG5cclxuICAvLyBcclxuICBNYXJrU3RhdGVTZWxlY3RlZCA9ICdtYXJrU3RhdGVTZWxlY3RlZCcsXHJcblxyXG4gIC8vIFxyXG4gIE1hcmtTdGF0ZUludmlzaWJsZSA9ICdtYXJrU3RhdGVJbnZpc2libGUnXHJcbn1cclxuXHJcbi8vIExpbmVTdGF0ZSByZXByZXNlbnRzIHZhbGlkIHN0YXRlcyBmb3IgYSBsaW5lIG11bHRpLW1hcmsuXHJcbmV4cG9ydCBlbnVtIExpbmVTdGF0ZSB7XHJcblxyXG4gIC8vIFxyXG4gIExpbmVTdGF0ZU5vcm1hbCA9ICdsaW5lU3RhdGVOb3JtYWwnLFxyXG5cclxuICAvLyBcclxuICBMaW5lU3RhdGVIaWdobGlnaHRlZCA9ICdsaW5lU3RhdGVIaWdobGlnaHRlZCcsXHJcblxyXG4gIC8vIFxyXG4gIExpbmVTdGF0ZVNlbGVjdGVkID0gJ2xpbmVTdGF0ZVNlbGVjdGVkJ1xyXG59XHJcblxyXG4vLyBSZW5kZXJQYXNzIHJlcHJlc2VudHMgZWFjaCBwYXNzIG92ZXIgdGhlIHNjZW5lIGVsZW1lbnRzIGFzIGVhY2ggbGF5ZXIgaXMgcmVuZGVyZWQuXHJcbmV4cG9ydCBlbnVtIFJlbmRlclBhc3Mge1xyXG5cclxuICAvLyBcclxuICBOb3JtYWxVbmRlclBhc3MgPSAnbm9ybWFsVW5kZXJQYXNzJyxcclxuXHJcbiAgLy8gXHJcbiAgTm9ybWFsT25QYXNzID0gJ25vcm1hbE9uUGFzcycsXHJcblxyXG4gIC8vIFxyXG4gIEhpZ2hsaWdodGVkVW5kZXJQYXNzID0gJ2hpZ2hsaWdodGVkVW5kZXJQYXNzJyxcclxuXHJcbiAgLy8gXHJcbiAgSGlnaGxpZ2h0ZWRPblBhc3MgPSAnaGlnaGxpZ2h0ZWRPblBhc3MnLFxyXG5cclxuICAvLyBcclxuICBTZWxlY3RlZFVuZGVyUGFzcyA9ICdzZWxlY3RlZFVuZGVyUGFzcycsXHJcblxyXG4gIC8vIFxyXG4gIFNlbGVjdGVkT25QYXNzID0gJ3NlbGVjdGVkT25QYXNzJyxcclxuXHJcbiAgLy8gXHJcbiAgUmVuZGVyUGFzc0NvdW50ID0gJ3JlbmRlclBhc3NDb3VudCdcclxufVxyXG5cclxuLy8gVGhlIHJvbGUgYXNzb2NpYXRlZCB3aXRoIGEgc2NlbmUgZWxlbWVudC4gVGhpcyBhbGxvd3MgdGhlIGRyYXcgb3JkZXJpbmcgdG8gYmUgbW9yZSBlZmZpY2llbnQuXHJcbmV4cG9ydCBlbnVtIEVsZW1lbnRSb2xlIHtcclxuXHJcbiAgLy8gXHJcbiAgTW9kZWxDb250YWluZXJSb2xlID0gJ21vZGVsQ29udGFpbmVyUm9sZScsXHJcblxyXG4gIC8vIFxyXG4gIEJhY2tncm91bmRSb2xlID0gJ2JhY2tncm91bmRSb2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgVW5kZXJNYXJrUm9sZSA9ICd1bmRlck1hcmtSb2xlJyxcclxuXHJcbiAgLy8gXHJcbiAgTWFya1JvbGUgPSAnbWFya1JvbGUnLFxyXG5cclxuICAvLyBcclxuICBVbmRlckxhYmVsUm9sZSA9ICd1bmRlckxhYmVsUm9sZScsXHJcblxyXG4gIC8vIFxyXG4gIExhYmVsUm9sZSA9ICdsYWJlbFJvbGUnLFxyXG5cclxuICAvLyBcclxuICBGb3JlZ3JvdW5kUm9sZSA9ICdmb3JlZ3JvdW5kUm9sZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFBhdGhFbGVtZW50IHtcclxuXHJcbiAgLy8gXHJcbiAgUGF0aE1vdmVUbyA9ICdtb3ZldG8nLFxyXG5cclxuICAvLyBcclxuICBQYXRoTGluZVRvID0gJ2xpbmV0bycsXHJcblxyXG4gIC8vIFxyXG4gIFBhdGhDdXJ2ZVRvID0gJ2N1cnZldG8nXHJcbn1cclxuXHJcbi8vIFRoZSBzZXJpYWxpemF0aW9uIGlzIHN0aWxsIGR1cGxpY2F0ZWQgaW4gSnNvblV0aWxzOjpab25lVXRpbHM6OlpvbmVOYW1lcyBhbmQgdHlwZXMuanNcclxuZXhwb3J0IGVudW0gWm9uZVR5cGUge1xyXG5cclxuICAvLyBcclxuICBaVF9JbnZhbGlkID0gJ2ludmFsaWQnLFxyXG5cclxuICAvLyBzZWN0aW9uOiBuYW1lID0gd29ya3NoZWV0IG5hbWVcclxuICBaVF9WaXogPSAndml6JyxcclxuXHJcbiAgLy8gXHJcbiAgWlRfQ29sb3JMZWdlbmQgPSAnY29sb3InLFxyXG5cclxuICAvLyBcclxuICBaVF9TaGFwZUxlZ2VuZCA9ICdzaGFwZScsXHJcblxyXG4gIC8vIFxyXG4gIFpUX1NpemVMZWdlbmQgPSAnc2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIFpUX01hcExlZ2VuZCA9ICdtYXAnLFxyXG5cclxuICAvLyBwYXJhbSA9IGZpZWxkIG5hbWVcclxuICBaVF9RdWlja0ZpbHRlciA9ICdmaWx0ZXInLFxyXG5cclxuICAvLyBwYXJhbSA9IGZpZWxkIG5hbWVcclxuICBaVF9IaWdobGlnaHRlciA9ICdoaWdobGlnaHRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFpUX0N1cnJQYWdlID0gJ2N1cnJlbnQtcGFnZScsXHJcblxyXG4gIC8vIHNlY3Rpb246IG5hbWUgdW51c2VkXHJcbiAgWlRfRW1wdHkgPSAnZW1wdHknLFxyXG5cclxuICAvLyBwYXJhbSA9IHRpdGxlXHJcbiAgWlRfVGl0bGUgPSAndGl0bGUnLFxyXG5cclxuICAvLyBwYXJhbSA9IHRleHRcclxuICBaVF9UZXh0ID0gJ3RleHQnLFxyXG5cclxuICAvLyBwYXJhbSA9IGZpbGUgbmFtZVxyXG4gIFpUX0JpdG1hcCA9ICdiaXRtYXAnLFxyXG5cclxuICAvLyBwYXJhbSA9IFVSTFxyXG4gIFpUX1dlYiA9ICd3ZWInLFxyXG5cclxuICAvLyBwYXJhbSA9IGFkZC1pbiBpZFxyXG4gIFpUX0FkZEluID0gJ2FkZC1pbicsXHJcblxyXG4gIC8vIFxyXG4gIFpUX0Rhc2hib2FyZE9iamVjdCA9ICdkYXNoYm9hcmQtb2JqZWN0JyxcclxuXHJcbiAgLy8gcGFyYW0gPSBmaWVsZCBuYW1lXHJcbiAgWlRfUGFyYW1DdHJsID0gJ3BhcmFtY3RybCcsXHJcblxyXG4gIC8vIFxyXG4gIFpUX0ZsaXBib2FyZE5hdiA9ICdmbGlwYm9hcmQtbmF2JyxcclxuXHJcbiAgLy8gXHJcbiAgWlRfRmxpcGJvYXJkID0gJ2ZsaXBib2FyZCcsXHJcblxyXG4gIC8vIHNlY3Rpb246IGxheW91dFxyXG4gIFpUX0xheW91dEJhc2ljID0gJ2xheW91dC1iYXNpYycsXHJcblxyXG4gIC8vIFxyXG4gIFpUX0xheW91dEZsb3cgPSAnbGF5b3V0LWZsb3cnLFxyXG5cclxuICAvLyBcclxuICBaVF9MYXlvdXRGcmVlRm9ybSA9ICdsYXlvdXQtZnJlZS1mb3JtJyxcclxuXHJcbiAgLy8gdXNlZCBvbmx5IGZvciBlbnVtIGl0ZXJhdGlvblxyXG4gIFpUX0VuZCA9ICdlbmQnXHJcbn1cclxuXHJcbi8vIFRoZSBzZXJpYWxpemF0aW9uIGlzIHN0aWxsIGR1cGxpY2F0ZWQgaW4gSnNvblV0aWxzOjpab25lVXRpbHM6OkRvY0Rhc2hib2FyZE9iamVjdE5hbWVzIGFuZCB0eXBlcy5qc1xyXG5leHBvcnQgZW51bSBEb2NEYXNoYm9hcmRPYmplY3RUeXBlcyB7XHJcblxyXG4gIC8vIFxyXG4gIERCT19JbnZhbGlkID0gJ2ludmFsaWQnLFxyXG5cclxuICAvLyBcclxuICBEQk9fQnV0dG9uID0gJ2J1dHRvbidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIENvbnRlbnRUeXBlIHtcclxuXHJcbiAgLy8gc2VjdGlvbjogbmFtZSA9IHdvcmtzaGVldCBuYW1lXHJcbiAgQ1RfVml6ID0gJ3ZpeicsXHJcblxyXG4gIC8vIFxyXG4gIENUX0NvbG9yTGVnZW5kID0gJ2NvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgQ1RfU2hhcGVMZWdlbmQgPSAnc2hhcGUnLFxyXG5cclxuICAvLyBcclxuICBDVF9TaXplTGVnZW5kID0gJ3NpemUnLFxyXG5cclxuICAvLyBcclxuICBDVF9NYXBMZWdlbmQgPSAnbWFwJyxcclxuXHJcbiAgLy8gcGFyYW0gPSBmaWVsZCBuYW1lXHJcbiAgQ1RfUXVpY2tGaWx0ZXIgPSAnZmlsdGVyJyxcclxuXHJcbiAgLy8gcGFyYW0gPSBmaWVsZCBuYW1lXHJcbiAgQ1RfSGlnaGxpZ2h0ZXIgPSAnaGlnaGxpZ2h0ZXInLFxyXG5cclxuICAvLyBcclxuICBDVF9DdXJyUGFnZSA9ICdjdXJyZW50LXBhZ2UnLFxyXG5cclxuICAvLyBwYXJhbSA9IGZpZWxkIG5hbWVcclxuICBDVF9QYXJhbUN0cmwgPSAncGFyYW1jdHJsJyxcclxuXHJcbiAgLy8gcGFyYW0gPSB0aXRsZVxyXG4gIENUX1RpdGxlID0gJ3RpdGxlJyxcclxuXHJcbiAgLy8gcGFyYW0gPSB0ZXh0XHJcbiAgQ1RfVGV4dCA9ICd0ZXh0JyxcclxuXHJcbiAgLy8gcGFyYW0gPSBmaWxlIG5hbWVcclxuICBDVF9CaXRtYXAgPSAnYml0bWFwJyxcclxuXHJcbiAgLy8gcGFyYW0gPSBVUkxcclxuICBDVF9XZWIgPSAnd2ViJyxcclxuXHJcbiAgLy8gcGFyYW0gPSBhZGQtaW4gaWRcclxuICBDVF9BZGRJbiA9ICdhZGQtaW4nLFxyXG5cclxuICAvLyBcclxuICBDVF9EYXNoYm9hcmRPYmplY3QgPSAnZGFzaGJvYXJkLW9iamVjdCcsXHJcblxyXG4gIC8vIFxyXG4gIENUX0ZsaXBib2FyZE5hdiA9ICdmbGlwYm9hcmQtbmF2JyxcclxuXHJcbiAgLy8gXHJcbiAgQ1RfRmxpcGJvYXJkID0gJ2ZsaXBib2FyZCcsXHJcblxyXG4gIC8vIERlbm90ZXMgdGhhdCB0aGlzIHpvbmUgaGFzIG5vIGNvbnRlbnQgYW5kIHRoZXJlZm9yZSBoYXMgYSBtZWFuaW5nZnVsIGxheW91dCB0eXBlXHJcbiAgQ1RfTm9uZSA9ICdjb250ZW50LW5vbmUnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBab25lTGF5b3V0VHlwZSB7XHJcblxyXG4gIC8vIHNlY3Rpb246IGxheW91dFxyXG4gIFpMVF9CYXNpYyA9ICdiYXNpYycsXHJcblxyXG4gIC8vIFxyXG4gIFpMVF9GcmVlRm9ybSA9ICdmcmVlLWZvcm0nLFxyXG5cclxuICAvLyBcclxuICBaTFRfRmxvdyA9ICdmbG93JyxcclxuXHJcbiAgLy8gXHJcbiAgWkxUX0Rpc3RyaWJ1dGVFdmVubHkgPSAnZGlzdHJpYnV0ZS1ldmVubHknLFxyXG5cclxuICAvLyBcclxuICBaTFRfVHJpdmlhbCA9ICd0cml2aWFsJ1xyXG59XHJcblxyXG4vLyBSZWN0YW5sZ2VzIGluIHRoZSBib3ggbW9kZWxcclxuZXhwb3J0IGVudW0gQm94VHlwZSB7XHJcblxyXG4gIC8vIGJvdW5kaW5nIHJlY3RhbmdsZSBpbiB0aGUgYm94IG1vZGVsXHJcbiAgQlRfQm91bmRpbmcgPSAnYm91bmRpbmcnLFxyXG5cclxuICAvLyBib3JkZXIgcmVjdGFuZ2xlIGluIHRoZSBib3ggbW9kZWwgZXhjbHVkaW5nIG1hcmdpbnNcclxuICBCVF9Cb3JkZXIgPSAnYm9yZGVyJyxcclxuXHJcbiAgLy8gY29udGVudCByZWFjdG5hZ2UgaW4gdGhlIGJveCBtb2RlbCBleGNsdWRpbmcgbWFyZ2lucyBwbHVzIGJvcmRlcnMgYW5kIHBhZGRpbmdzXHJcbiAgQlRfQ29udGVudCA9ICdjb250ZW50J1xyXG59XHJcblxyXG4vLyBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIGNvbW1hbmQgdG8gYmUgcGVyZm9ybWVkIG9uIHRoZSB6LW9yZGVyIG9mIGEgem9uZVxyXG5leHBvcnQgZW51bSBNb2RpZnlab25lWk9yZGVyQ29tbWFuZFR5cGUge1xyXG5cclxuICAvLyBcclxuICBNb2RpZnlab25lWk9yZGVyQ29tbWFuZEZyb250ID0gJ2Zyb250JyxcclxuXHJcbiAgLy8gXHJcbiAgTW9kaWZ5Wm9uZVpPcmRlckNvbW1hbmRCYWNrID0gJ2JhY2snLFxyXG5cclxuICAvLyBcclxuICBNb2RpZnlab25lWk9yZGVyQ29tbWFuZFJlbGF0aXZlUG9zID0gJ3JlbC1wb3MnXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIG9mIHZhbGlkIGhvcml6b250YWwgYWxpZ25tZW50cyBmb3IgdGV4dCByZWdpb25zLlxyXG5leHBvcnQgZW51bSBUZXh0UmVnaW9uSEFsaWduIHtcclxuXHJcbiAgLy8gXHJcbiAgVEhBX0xlZnQgPSAnaC1hbGlnbi1sZWZ0JyxcclxuXHJcbiAgLy8gXHJcbiAgVEhBX0NlbnRlciA9ICdoLWFsaWduLWNlbnRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFRIQV9SaWdodCA9ICdoLWFsaWduLXJpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgVEhBX0F1dG9tYXRpYyA9ICdoLWFsaWduLWF1dG8nXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIG9mIHZhbGlkIHZlcnRpY2FsIGFsaWdubWVudHMgZm9yIHRleHQgcmVnaW9ucy5cclxuZXhwb3J0IGVudW0gVGV4dFJlZ2lvblZBbGlnbiB7XHJcblxyXG4gIC8vIFxyXG4gIFRWQV9Cb3R0b20gPSAndi1hbGlnbi1ib3R0b20nLFxyXG5cclxuICAvLyBcclxuICBUVkFfQ2VudGVyID0gJ3YtYWxpZ24tY2VudGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgVFZBX1RvcCA9ICd2LWFsaWduLXRvcCcsXHJcblxyXG4gIC8vIFxyXG4gIFRWQV9BdXRvbWF0aWMgPSAndi1hbGlnbi1hdXRvJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQXV0b0NvbXBsZXRlSXRlbVR5cGUge1xyXG5cclxuICAvLyBcclxuICBBQ0lUX0ludmFsaWQgPSAnaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIEFDSVRfRmllbGQgPSAnZmllbGQnLFxyXG5cclxuICAvLyBcclxuICBBQ0lUX0Z1bmN0aW9uID0gJ2Z1bmMnLFxyXG5cclxuICAvLyBcclxuICBBQ0lUX1NlcGFyYXRvciA9ICdzZXBhcmF0b3InLFxyXG5cclxuICAvLyBcclxuICBBQ0lUX0hlYWRlciA9ICdoZWFkZXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBDYWxjdWxhdGlvbkNvbnRleHQge1xyXG5cclxuICAvLyBcclxuICBDQ19DYWxjdWxhdGlvbkRpYWxvZyA9ICdjYWxjdWxhdGlvbi1kaWFsb2cnLFxyXG5cclxuICAvLyBcclxuICBDQ19UeXBlSW5QaWxsID0gJ3R5cGUtaW4tcGlsbCcsXHJcblxyXG4gIC8vIFxyXG4gIENDX0ZpbHRlclRvcCA9ICdmaWx0ZXItdG9wJyxcclxuXHJcbiAgLy8gXHJcbiAgQ0NfRmlsdGVyQ29uZGl0aW9uID0gJ2ZpbHRlci1jb25kaXRpb24nLFxyXG5cclxuICAvLyBcclxuICBDQ19Kb2luQ2FsY0RpYWxvZyA9ICdqb2luLWNhbGMtZGlhbG9nJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRm9yZWNhc3RDb21wb25lbnRUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgRm9yZWNhc3RDb21wb25lbnRUeXBlX19FVFNfTk9ORSA9ICdldHMtbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIEZvcmVjYXN0Q29tcG9uZW50VHlwZV9fRVRTX0FERElUSVZFID0gJ2V0cy1hZGRpdGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIEZvcmVjYXN0Q29tcG9uZW50VHlwZV9fRVRTX01VTFRJUExJQ0FUSVZFID0gJ2V0cy1tdWx0aXBsaWNhdGl2ZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFByZWRpY3Rpb25JbnRlcnZhbEF4aXMge1xyXG5cclxuICAvLyBcclxuICBQSV9BWElTX05PTkUgPSAnbm9uZScsXHJcblxyXG4gIC8vIFxyXG4gIFBJX0FYSVNfWCA9ICdheGlzLXgnLFxyXG5cclxuICAvLyBcclxuICBQSV9BWElTX1kgPSAnYXhpcy15J1xyXG59XHJcblxyXG4vLyBJbmRpY2F0ZXMgdGhlIHR5cGUgb2YgcXVpY2sgZmlsdGVyXHJcbmV4cG9ydCBlbnVtIFF1aWNrRmlsdGVyVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFFGVF9Vbmtub3duID0gJ3Vua25vd24nLFxyXG5cclxuICAvLyBcclxuICBRRlRfUXVhbnRpdGF0aXZlID0gJ3F1YW50aXRhdGl2ZScsXHJcblxyXG4gIC8vIFxyXG4gIFFGVF9SZWxhdGl2ZURhdGUgPSAncmVsYXRpdmUtZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIFFGVF9IaWVyYXJjaHkgPSAnaGllcmFyY2h5JyxcclxuXHJcbiAgLy8gXHJcbiAgUUZUX0NhdGVnb3JpY2FsID0gJ2NhdGVnb3JpY2FsJ1xyXG59XHJcblxyXG4vLyBJbmRpY2F0ZXMgYSBjYXRlZ29yaWNhbCBVSSBjb250cm9sXHJcbmV4cG9ydCBlbnVtIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxDdHJsIHtcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbEN0cmxfX1FGQ0NfUmVhZG91dCA9ICdyZWFkb3V0JyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbEN0cmxfX1FGQ0NfU2xpZGVyID0gJ3NsaWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxDdHJsX19RRkNDX1N0ZXBCdG5zID0gJ3N0ZXAtYnV0dG9ucycsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxDdHJsX19RRkNDX0FsbEJ0biA9ICdhbGwtYnV0dG9ucycsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxDdHJsX19RRkNDX0ZpbHRlclN0YXRlID0gJ2ZpbHRlcnN0YXRlLWJ1dHRvbicsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxDdHJsX19RRkNDX1NlYXJjaCA9ICdzZWFyY2gnLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlckNhdGVnb3JpY2FsQ3RybF9fUUZDQ19Eb21haW4gPSAnZG9tYWluJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbEN0cmxfX1FGQ0NfTW9yZUZld2VyQnV0dG9uID0gJ21vcmVmZXdlci1idXR0b24nLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlckNhdGVnb3JpY2FsQ3RybF9fUUZDQ19FeGNsdWRlID0gJ2V4Y2x1ZGUnLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlckNhdGVnb3JpY2FsQ3RybF9fUUZDQ19Nb2RlID0gJ21vZGUnLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlckNhdGVnb3JpY2FsQ3RybF9fUUZDQ19MZXZlbHMgPSAnbGV2ZWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbEN0cmxfX1FGQ0NfQXBwbHlCdXR0b24gPSAnYXBwbHktYnV0dG9uJ1xyXG59XHJcblxyXG4vLyBJbmRpY2F0ZXMgYSBjYXRlZ29yaWNhbCBtb2RlXHJcbmV4cG9ydCBlbnVtIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbE1vZGVfX1FGQ01fQ2hlY2tMaXN0ID0gJ2NoZWNrLWxpc3QnLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlckNhdGVnb3JpY2FsTW9kZV9fUUZDTV9SYWRpb0xpc3QgPSAncmFkaW8tbGlzdCcsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxNb2RlX19RRkNNX0Ryb3Bkb3duID0gJ2Ryb3Bkb3duJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbE1vZGVfX1FGQ01fU2xpZGVyID0gJ3NsaWRlcicsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxNb2RlX19RRkNNX1BhdHRlcm4gPSAncGF0dGVybicsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyQ2F0ZWdvcmljYWxNb2RlX19RRkNNX1R5cGVJbkxpc3QgPSAndHlwZS1pbi1saXN0JyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJDYXRlZ29yaWNhbE1vZGVfX1FGQ01fQ2hlY2tEcm9wZG93biA9ICdjaGVjay1kcm9wZG93bicsXHJcbn1cclxuXHJcbi8vIEluZGljYXRlcyBhIHF1YW50aXRhdGl2ZSBVSSBjb250cm9sXHJcbmV4cG9ydCBlbnVtIFF1aWNrRmlsdGVyUXVhbnRpdGF0aXZlQ3RybCB7XHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyUXVhbnRpdGF0aXZlQ3RybF9fUUZRQ19SZWFkb3V0cyA9ICdyZWFkb3V0cycsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyUXVhbnRpdGF0aXZlQ3RybF9fUUZRQ19TbGlkZXIgPSAnc2xpZGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJRdWFudGl0YXRpdmVDdHJsX19RRlFDX051bGxDdHJscyA9ICdudWxsLWNvbnRyb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJRdWFudGl0YXRpdmVDdHJsX19RRlFDX1JlbGRhdGVQaWNrZXIgPSAncmVsLWRhdGUtcGlja2VyJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJRdWFudGl0YXRpdmVDdHJsX19RRlFDX0RvbWFpbiA9ICdkb21haW4nLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlclF1YW50aXRhdGl2ZUN0cmxfX1FGUUNfTW9yZUZld2VyQnV0dG9uID0gJ21vcmVmZXdlci1idXR0b24nLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlclF1YW50aXRhdGl2ZUN0cmxfX1FGUUNfRmlsdGVyU3RhdGUgPSAnZmlsdGVyc3RhdGUtYnV0dG9uJ1xyXG59XHJcblxyXG4vLyBJbmRpY2F0ZXMgYSBxdWFudGl0YXRpdmUgbW9kZVxyXG5leHBvcnQgZW51bSBRdWlja0ZpbHRlclF1YW50aXRhdGl2ZU1vZGUge1xyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlclF1YW50aXRhdGl2ZU1vZGVfX1FGUU1fTWluTWF4ID0gJ21pbi1tYXgnLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlclF1YW50aXRhdGl2ZU1vZGVfX1FGUU1fTWluT25seSA9ICdtaW4tb25seScsXHJcblxyXG4gIC8vIFxyXG4gIFF1aWNrRmlsdGVyUXVhbnRpdGF0aXZlTW9kZV9fUUZRTV9NYXhPbmx5ID0gJ21heC1vbmx5JyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXJRdWFudGl0YXRpdmVNb2RlX19RRlFNX1JlbERhdGUgPSAncmVsLWRhdGUnLFxyXG5cclxuICAvLyBcclxuICBRdWlja0ZpbHRlclF1YW50aXRhdGl2ZU1vZGVfX1FGUU1fUmVsUGljayA9ICdyZWwtcGljaydcclxufVxyXG5cclxuLy8gV2hlcmUgaXMgcmVuZGVyaW5nIGhhcHBlbmluZyAtIGNsaWVudCBvciBzZXJ2ZXJcclxuZXhwb3J0IGVudW0gUmVuZGVyTW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFJlbmRlck1vZGVTZXJ2ZXIgPSAncmVuZGVyLW1vZGUtc2VydmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgUmVuZGVyTW9kZUNsaWVudCA9ICdyZW5kZXItbW9kZS1jbGllbnQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBBZGRPclJlbW92ZU1hcmtzIHtcclxuXHJcbiAgLy8gXHJcbiAgQU9STV9BREQgPSAnYWRkJyxcclxuXHJcbiAgLy8gXHJcbiAgQU9STV9SRU1PVkUgPSAncmVtb3ZlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVmlzdWFsRG9jRW51bXNHZW9TZWFyY2hWaXNpYmlsaXR5IHtcclxuXHJcbiAgLy8gXHJcbiAgR1NWX09uID0gJ29uJyxcclxuXHJcbiAgLy8gXHJcbiAgR1NWX09mZiA9ICdvZmYnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBWaXN1YWxEb2NFbnVtc01hcFNjYWxlVmlzaWJpbGl0eSB7XHJcblxyXG4gIC8vIFxyXG4gIE1TVl9PbiA9ICdvbicsXHJcblxyXG4gIC8vIFxyXG4gIE1TVl9PZmYgPSAnb2ZmJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVmlzdWFsRG9jRW51bXNBdXRvRHJpbGxWaXNpYmlsaXR5IHtcclxuXHJcbiAgLy8gXHJcbiAgQURWX09uID0gJ29uJyxcclxuXHJcbiAgLy8gXHJcbiAgQURWX09mZiA9ICdvZmYnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBWaXN1YWxEb2NFbnVtc01hcFRvb2xTZWxlY3Rpb24ge1xyXG5cclxuICAvLyBcclxuICBNVF9QYW5fTWFwID0gJ3Bhbi1tYXAnLFxyXG5cclxuICAvLyBcclxuICBNVF9SZWN0YW5ndWxhcl9TZWxlY3Rpb24gPSAncmVjdGFuZ3VsYXItc2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfUmFkaWFsX1NlbGVjdGlvbiA9ICdyYWRpYWwtc2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfWm9vbV9JbiA9ICd6b29tLWluJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfWm9vbV9PdXQgPSAnem9vbS1vdXQnLFxyXG5cclxuICAvLyBcclxuICBNVF9TaW5nbGVfU2VsZWN0aW9uID0gJ3NpbmdsZS1zZWxlY3Rpb24nLFxyXG5cclxuICAvLyBcclxuICBNVF9MYXNzb19TZWxlY3Rpb24gPSAnbGFzc28tc2VsZWN0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfQWxsX1NlbGVjdGlvbl9Ub29scyA9ICdhbGwtc2VsZWN0aW9uLXRvb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfQXJlYV9ab29tID0gJ2FyZWEtem9vbScsXHJcblxyXG4gIC8vIFxyXG4gIE1UX05vX1Rvb2xzID0gJ25vLXRvb2xzJyxcclxuXHJcbiAgLy8gXHJcbiAgTVRfQWR2YW5jZWRfU2VsZWN0aW9uX1Rvb2xzID0gJ2FkdmFuY2VkLXNlbGVjdGlvbi10b29scycsXHJcblxyXG4gIC8vIFxyXG4gIE1UX01hcF9Ub29scyA9ICdtYXAtdG9vbHMnLFxyXG5cclxuICAvLyBcclxuICBNVF9Ob25fTWFwX1Rvb2xzID0gJ25vbi1tYXAtdG9vbHMnLFxyXG5cclxuICAvLyBcclxuICBNVF9Ub29sX01hc2sgPSAndG9vbC1tYXNrJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVmlzdWFsRG9jRW51bXNGbG9hdGluZ1Rvb2xiYXJWaXNpYmlsaXR5IHtcclxuXHJcbiAgLy8gXHJcbiAgRlRWX0F1dG8gPSAnYXV0bycsXHJcblxyXG4gIC8vIFxyXG4gIEZUVl9TaG93ID0gJ3Nob3cnLFxyXG5cclxuICAvLyBcclxuICBGVFZfSGlkZSA9ICdoaWRlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVmlzdWFsRG9jRW51bXNWaXpOYXZpZ2F0aW9uU2V0dGluZyB7XHJcblxyXG4gIC8vIFxyXG4gIE5BVl9BdXRvID0gJ2F1dG8nLFxyXG5cclxuICAvLyBcclxuICBOQVZfRml4ZWQgPSAnZml4ZWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBWaXN1YWxEb2NFbnVtc1pvb21UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUGVyY2VudCA9ICdwZXJjZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgRW50aXJlVmlldyA9ICdlbnRpcmUtdmlldycsXHJcblxyXG4gIC8vIFxyXG4gIEZpdFdpZHRoID0gJ2ZpdC13aWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIEZpdEhlaWdodCA9ICdmaXQtaGVpZ2h0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gU2hlZXRTY3JvbGxEaXJlY3Rpb24ge1xyXG5cclxuICAvLyBzY3JvbGwtZmlyc3RcclxuICBTaGVldFNjcm9sbEZpcnN0ID0gJ3Njcm9sbC1maXJzdCcsXHJcblxyXG4gIC8vIHNjcm9sbC1wcmV2XHJcbiAgU2hlZXRTY3JvbGxQcmV2ID0gJ3Njcm9sbC1wcmV2JyxcclxuXHJcbiAgLy8gc2Nyb2xsLW5leHRcclxuICBTaGVldFNjcm9sbE5leHQgPSAnc2Nyb2xsLW5leHQnLFxyXG5cclxuICAvLyBzY3JvbGwtbGFzdFxyXG4gIFNoZWV0U2Nyb2xsTGFzdCA9ICdzY3JvbGwtbGFzdCdcclxufVxyXG5cclxuLy8gYWdncmVnYXRpb24gdHlwZSBmb3IgcGVyc3BlY3RpdmVzXHJcbmV4cG9ydCBlbnVtIFBlcnNwZWN0aXZlVXRpbHNBZ2dyZWdhdGVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgUkVBTElUWSA9ICdyZWFsaXR5JyxcclxuXHJcbiAgLy8gXHJcbiAgRklSU1QgPSAnZmlyc3QtdGltZS1pbi1jdWJlJyxcclxuXHJcbiAgLy8gXHJcbiAgTEFTVCA9ICdsYXRlc3QtdGltZS1pbi1jdWJlJyxcclxuXHJcbiAgLy8gXHJcbiAgQ1VTVE9NX0ZPUl9DVUJFID0gJ2N1c3RvbS1mb3ItY3ViZScsXHJcblxyXG4gIC8vIFxyXG4gIENVU1RPTV9QRVJfQVRUUklCVVRFID0gJ2N1c3RvbS1wZXItYXR0cmlidXRlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gWm9uZUVkZ2VNb3ZlIHtcclxuXHJcbiAgLy8gXHJcbiAgRWRnZURyYWcgPSAnZWRnZS1kcmFnJyxcclxuXHJcbiAgLy8gXHJcbiAgRWRnZVNuYXBBbGlnbiA9ICdlZGdlLXNuYXAtYWxpZ24nLFxyXG5cclxuICAvLyBcclxuICBFZGdlU25hcFBvc2l0aW9uID0gJ2VkZ2Utc25hcC1wb3NpdGlvbidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZvcm1hdENvbnRyb2xUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgRkNUX05PTkUgPSAnZmN0LW5vbmUnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfQ29sb3IgPSAnZmN0LWNvbG9yJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX0ZvbnQgPSAnZmN0LWZvbnQnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfQm9yZGVyID0gJ2ZjdC1ib3JkZXInLFxyXG5cclxuICAvLyBcclxuICBGQ1RfU3Ryb2tlID0gJ2ZjdC1zdHJva2UnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfTnVtYmVyID0gJ2ZjdC1udW1iZXInLFxyXG5cclxuICAvLyBcclxuICBGQ1RfTGF5b3V0ID0gJ2ZjdC1sYXlvdXQnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfVGV4dCA9ICdmY3QtdGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9PcHRDb2xvciA9ICdmY3Qtb3B0Y29sb3InLFxyXG5cclxuICAvLyBcclxuICBGQ1RfQmFuZENvbG9yID0gJ2ZjdC1iYW5kY29sb3InLFxyXG5cclxuICAvLyBcclxuICBGQ1RfQmFuZFNpemUgPSAnZmN0LWJhbmRzaXplJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX0JhbmRMZXZlbCA9ICdmY3QtYmFuZGxldmVsJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX0RpdkxldmVsID0gJ2ZjdC1kaXZsZXZlbCcsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9TcGVjVmFsc1RleHQgPSAnZmN0LXNwZWN2YWxzdGV4dCcsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9TcGVjVmFsc0dyYXBoID0gJ2ZjdC1zcGVjdmFsc2dyYXBoJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX0hBbGlnbiA9ICdmY3QtaGFsaWduJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX09yaWVudCA9ICdmY3Qtb3JpZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX1JvdW5kaW5nID0gJ2ZjdC1yb3VuZGluZycsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9MaW5lRW5kID0gJ2ZjdC1saW5lZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX0xpbmVFbmRTaXplID0gJ2ZjdC1saW5lZW5kc2l6ZScsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9Cb2R5VHlwZSA9ICdmY3QtYm9keXR5cGUnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfQWxwaGFMZXZlbCA9ICdmY3QtYWxwaGFsZXZlbCcsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9MaW5lSW50ZXJwb2xhdGlvbiA9ICdmY3QtbGluZS1pbnRlcnBvbGF0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX01hcmtCb3JkZXIgPSAnZmN0LW1hcmtib3JkZXInLFxyXG5cclxuICAvLyBcclxuICBGQ1RfTWFya0hhbG8gPSAnZmN0LW1hcmtoYWxvJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX01hcmtNYXJrZXJzID0gJ2ZjdC1tYXJrbWFya2VycycsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9SZWZMaW5lUGFsZXR0ZSA9ICdmY3QtcmVmbGluZXBhbGV0dGUnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfUmV2ZXJzZSA9ICdmY3QtcmV2ZXJzZScsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9XaGlza2VycyA9ICdmY3Qtd2hpc2tlcnMnLFxyXG5cclxuICAvLyBcclxuICBGQ1RfQm94cGxvdFBhbGV0dGUgPSAnZmN0LWJveHBsb3RwYWxldHRlJyxcclxuXHJcbiAgLy8gXHJcbiAgRkNUX1NvbGlkU3Ryb2tlID0gJ2ZjdC1zb2xpZHN0cm9rZScsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9Cb3hwbG90U3R5bGUgPSAnZmN0LWJveHBsb3RzdHlsZScsXHJcblxyXG4gIC8vIFxyXG4gIEZDVF9Cb3hwbG90Q29tcG91bmRGaWxsID0gJ2ZjdC1ib3hwbG90Y29tcG91bmRmaWxsJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRm9ybWF0Q29udHJvbEZsYWcge1xyXG5cclxuICAvLyBcclxuICBGQ0ZfVmlzdWFsU3R5bGVzaGVldCA9ICdmY2ZfdmlzdWFsc3R5bGVzaGVldCcsXHJcblxyXG4gIC8vIFxyXG4gIEZDRl9QYW5lU3R5bGVzaGVldCA9ICdmY2ZfcGFuZXN0eWxlc2hlZXQnLFxyXG5cclxuICAvLyBcclxuICBGQ0ZfRml4ZWRTY29wZSA9ICdmY2ZfZml4ZWRzY29wZScsXHJcblxyXG4gIC8vIFxyXG4gIEZDRl9BbGxvd1RyYW5zcGFyZW5jeSA9ICdmY2ZfYWxsb3d0cmFuc3BhcmVuY3knXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBBcHBDb25maWdFbnVtIHtcclxuXHJcbiAgLy8gZGVmYXVsdCBkaXJlY3Rvcnkgd2hlcmUgVGFibGVhdSBmaW5kcyBkYXRhIHNvdXJjZXMsIGxvZ3MsIHNoYXBlcywgZXRjLlxyXG4gIEFDU19SZXBvc2l0b3J5RGlyID0gJ3JlcG9zaXRvcnktZGlyJyxcclxuXHJcbiAgLy8gYXBwbGljYXRpb24gZGlyZWN0b3J5XHJcbiAgQUNTX0FwcGxpY2F0aW9uRGlyID0gJ2FwcGxpY2F0aW9uLWRpcicsXHJcblxyXG4gIC8vIHNhbXBsZSB3b3JrYm9va3MgZGlyZWN0b3J5XHJcbiAgQUNTX1NhbXBsZXNEaXIgPSAnc2FtcGxlcy1kaXInXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBEZWx0YVR5cGUge1xyXG5cclxuICAvLyBcclxuICBERUxUQV9OT05FID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBERUxUQV9BRERFRCA9ICdhZGRlZCcsXHJcblxyXG4gIC8vIFxyXG4gIERFTFRBX0VESVRFRCA9ICdlZGl0ZWQnLFxyXG5cclxuICAvLyBcclxuICBERUxUQV9SRU1PVkVEID0gJ3JlbW92ZWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBFeHRyYWN0VHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEV4dHJhY3RUeXBlX0FsbCA9ICdleHRyYWN0LXR5cGUtYWxsJyxcclxuXHJcbiAgLy8gXHJcbiAgRXh0cmFjdFR5cGVfU29tZSA9ICdleHRyYWN0LXR5cGUtc29tZScsXHJcblxyXG4gIC8vIFxyXG4gIEV4dHJhY3RUeXBlX05vbmUgPSAnZXh0cmFjdC10eXBlLW5vbmUnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBFeHRyYWN0UmVmcmVzaFN0YXR1cyB7XHJcblxyXG4gIC8vIFxyXG4gIEV4dHJhY3RSZWZyZXNoX05vbmUgPSAnZXh0cmFjdC1yZWZyZXNoLW5vbmUnLFxyXG5cclxuICAvLyBcclxuICBFeHRyYWN0UmVmcmVzaF9QZW5kaW5nID0gJ2V4dHJhY3QtcmVmcmVzaC1wZW5kaW5nJyxcclxuXHJcbiAgLy8gXHJcbiAgRXh0cmFjdFJlZnJlc2hfSW5Qcm9ncmVzcyA9ICdleHRyYWN0LXJlZnJlc2gtaW5wcm9ncmVzcycsXHJcblxyXG4gIC8vIFxyXG4gIEV4dHJhY3RSZWZyZXNoX0RvbmUgPSAnZXh0cmFjdC1yZWZyZXNoLWRvbmUnLFxyXG5cclxuICAvLyBcclxuICBFeHRyYWN0UmVmcmVzaF9FcnJvciA9ICdleHRyYWN0LXJlZnJlc2gtZXJyb3InLFxyXG5cclxuICAvLyBcclxuICBFeHRyYWN0UmVmcmVzaF9DYW5jZWxlZCA9ICdleHRyYWN0LXJlZnJlc2gtY2FuY2VsZWQnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBNYXBVbml0U2VsZWN0aW9uRW51bSB7XHJcblxyXG4gIC8vIFxyXG4gIE1VU19BdXRvbWF0aWMgPSAnYXV0b21hdGljJyxcclxuXHJcbiAgLy8gXHJcbiAgTVVTX01ldHJpYyA9ICdtZXRyaWMnLFxyXG5cclxuICAvLyBcclxuICBNVVNfVVMgPSAndXMnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBEYXRhQ29ubmVjdGlvbkhpc3RvcnlSZWZyZXNoVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIFJUX0ZVTEwgPSAnZnVsbCcsXHJcblxyXG4gIC8vIFxyXG4gIFJUX0lOQ1JFTUVOVCA9ICdpbmNyZW1lbnQnLFxyXG5cclxuICAvLyBcclxuICBSVF9BUFBFTkRfRlJPTV9EQVRBX1NPVVJDRSA9ICdhcHBlbmQtZnJvbS1kYXRhLXNvdXJjZScsXHJcblxyXG4gIC8vIFxyXG4gIFJUX0FQUEVORF9GUk9NX0ZJTEUgPSAnYXBwZW5kLWZyb20tZmlsZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIENhbGNTdHlsZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNDRV9TVFlMRV9ERUZBVUxUID0gJ3N0eWxlX2RlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfUFJJTUFSWV9GSUVMRCA9ICdzdHlsZV9wcmltX2ZpZWxkJyxcclxuXHJcbiAgLy8gXHJcbiAgU0NFX1NUWUxFX1NFQ09OREFSWV9GSUVMRCA9ICdzdHlsZV9zZWNfZmllbGQnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfTE9DQUxfRlVOQ1RJT04gPSAnc3R5bGVfbG9jYWxfZnVuYycsXHJcblxyXG4gIC8vIFxyXG4gIFNDRV9TVFlMRV9SRU1PVEVfRlVOQ1RJT04gPSAnc3R5bGVfcmVtb3RlX2Z1bmMnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfUEFSQU1FVEVSID0gJ3N0eWxlX3BhcmFtJyxcclxuXHJcbiAgLy8gXHJcbiAgU0NFX1NUWUxFX0NPTU1FTlQgPSAnc3R5bGVfY29tbWVudCcsXHJcblxyXG4gIC8vIFxyXG4gIFNDRV9TVFlMRV9JTlZBTElEX0ZJRUxEID0gJ3N0eWxlX2ludmFsaWRfZmllbGQnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfVEFCTEVfRVhQUiA9ICdzdHlsZV90YWJsZV9leHByJyxcclxuXHJcbiAgLy8gXHJcbiAgU0NFX1NUWUxFX1NUUklORyA9ICdzdHlsZV9zdHJpbmcnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfRElTQUJMRUQgPSAnc3R5bGVfZGlzYWJsZWQnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfRFJBR19PVkVSX0ZJRUxEID0gJ3N0eWxlX2RyYWdfb3Zlcl9maWVsZCcsXHJcblxyXG4gIC8vIFxyXG4gIFNDRV9TVFlMRV9EUkFHX09WRVJfU0VMID0gJ3N0eWxlX2RyYWdfb3Zlcl9zZWwnLFxyXG5cclxuICAvLyBcclxuICBTQ0VfU1RZTEVfU0VMRUNUSU9OID0gJ3N0eWxlX3NlbGVjdGlvbidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZ1bmN0aW9uR3JvdXAge1xyXG5cclxuICAvLyBcclxuICBGR19OVU1FUklDID0gJ251bScsXHJcblxyXG4gIC8vIFxyXG4gIEZHX1NUUklORyA9ICdzdHInLFxyXG5cclxuICAvLyBcclxuICBGR19EQVRFID0gJ2RhdGUnLFxyXG5cclxuICAvLyBcclxuICBGR19DQVNUID0gJ2Nhc3QnLFxyXG5cclxuICAvLyBcclxuICBGR19MT0dJQ0FMID0gJ2xvZ2ljJyxcclxuXHJcbiAgLy8gXHJcbiAgRkdfQUdHUkVHQVRFID0gJ2FnZycsXHJcblxyXG4gIC8vIFxyXG4gIEZHX09QRVJBVE9SID0gJ29wZXInLFxyXG5cclxuICAvLyBcclxuICBGR19TWVNURU0gPSAnc3lzJyxcclxuXHJcbiAgLy8gXHJcbiAgRkdfUEFTU1RIUlUgPSAncGFzcycsXHJcblxyXG4gIC8vIFxyXG4gIEZHX1NQRUNJQUwgPSAnc3BlYycsXHJcblxyXG4gIC8vIFxyXG4gIEZHX1VTRVIgPSAndXNlcicsXHJcblxyXG4gIC8vIFxyXG4gIEZHX1RBQkxFQ0FMQyA9ICd0YWJsZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZ1bmN0aW9uQXJnVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIEZBVF9OT05FID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBGQVRfQk9PTCA9ICdib29sZWFuJyxcclxuXHJcbiAgLy8gXHJcbiAgRkFUX1JFQUwgPSAncmVhbCcsXHJcblxyXG4gIC8vIFxyXG4gIEZBVF9JTlQgPSAnaW50ZWdlcicsXHJcblxyXG4gIC8vIFxyXG4gIEZBVF9TVFIgPSAnc3RyJyxcclxuXHJcbiAgLy8gXHJcbiAgRkFUX0RBVEVUSU1FID0gJ2RhdGV0aW1lJyxcclxuXHJcbiAgLy8gXHJcbiAgRkFUX0RBVEUgPSAnZGF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIEZBVF9MT0NBTFNUUiA9ICdsb2NzdHInLFxyXG5cclxuICAvLyBcclxuICBGQVRfTlVMTCA9ICduaWwnLFxyXG5cclxuICAvLyBcclxuICBGQVRfRVJST1IgPSAnZXJyJyxcclxuXHJcbiAgLy8gXHJcbiAgRkFUX0FOWSA9ICdhbnknLFxyXG5cclxuICAvLyBcclxuICBGQVRfQklOID0gJ2JpbicsXHJcblxyXG4gIC8vIFxyXG4gIEZBVF9UVVBMRSA9ICd0dXAnLFxyXG5cclxuICAvLyBcclxuICBGQVRfTE9DQUxSRUFMID0gJ2xvY3JlYWwnLFxyXG5cclxuICAvLyBcclxuICBGQVRfTE9DQUxJTlQgPSAnbG9jaW50JyxcclxuXHJcbiAgLy8gXHJcbiAgRkFUX1NQQVRJQUwgPSAnc3BhdGlhbCdcclxufVxyXG5cclxuLy8gbG9naWNhbCBwb3NpdGlvbiBvZiBhY3Rpdml0eSBzdWNoIGFzIEJlZ2FuIG9yIEVuZGVkXHJcbmV4cG9ydCBlbnVtIEFjdGl2aXR5RGlzcG9zaXRpb24ge1xyXG5cclxuICAvLyBubyBhY3Rpdml0eVxyXG4gIE5vRGlzcG9zaXRpb24gPSAnbm8tZGlzcG9zaXRpb24nLFxyXG5cclxuICAvLyBhY3Rpdml0eSBoYXMgYmVnYW5cclxuICBCZWdhbiA9ICdiZWdhbicsXHJcblxyXG4gIC8vIGFjdGl2aXR5IGhhcyBlbmRlZFxyXG4gIEVuZGVkID0gJ2VuZGVkJyxcclxuXHJcbiAgLy8gYWN0aXZpdHkgaGFzIG9jY3VycmVkIGJ1dCBuZWl0aGVyIGJlZ2FuIG5vciBlbmRlZCBpcyBrbm93blxyXG4gIE9jY3VycmVkID0gJ29jY3VycmVkJyxcclxuXHJcbiAgLy8gaW5kZWZpbml0ZSBhY3Rpdml0eSBpcyBleGVjdXRpbmdcclxuICBBY3RpdmUgPSAnYWN0aXZlJyxcclxuXHJcbiAgLy8gaW5kZWZpbml0ZSBhY3Rpdml0eSBoYXMgeWllbGRlZCAoZS5nLiwgaWRsZSwgd2FpdGluZywgc2xlZXBpbmcsIHF1aWVzY2UpXHJcbiAgSWRsZSA9ICdpZGxlJ1xyXG59XHJcblxyXG4vLyByZXN1bHQgb2YgYWN0aXZpdHkgc3VjaCBhcyBTdWNjZXNzIGFuZCBGYWlsdXJlXHJcbmV4cG9ydCBlbnVtIEFjdGl2aXR5UmVzdWx0IHtcclxuXHJcbiAgLy8gYWN0aXZpdHkgaGFzIG5vIHJlc3VsdFxyXG4gIE5vUmVzdWx0ID0gJ25vLXJlc3VsdCcsXHJcblxyXG4gIC8vIGFjdGl2aXR5IGVuZGVkIHdpdGggc3VjY2Vzc1xyXG4gIFN1Y2NlZWRlZCA9ICdzdWNjZWVkZWQnLFxyXG5cclxuICAvLyBhY3Rpdml0eSBlbmRlZCB3aXRoIGZhaWx1cmVcclxuICBGYWlsZWQgPSAnZmFpbHVyZScsXHJcblxyXG4gIC8vIGFjdGl2aXR5IGVuZGVkIHdpdGggdGhyb3duIGV4Y2VwdGlvblxyXG4gIFRocmV3RXhjZXB0aW9uID0gJ3RocmV3LWV4Y2VwdGlvbicsXHJcblxyXG4gIC8vIGFjdGl2aXR5IGVuZGVkIGR1ZSB0byBhIHRpbWVvdXRcclxuICBUaW1lZE91dCA9ICd0aW1lZC1vdXQnLFxyXG5cclxuICAvLyBhY3Rpdml0eSB3YXMgY2FuY2VsZWRcclxuICBDYW5jZWxlZCA9ICdjYW5jZWxlZCcsXHJcblxyXG4gIC8vIGFjdGl2aXR5IGhhcyB1bmtub3duIHJlc3VsdFxyXG4gIFVua25vd25SZXN1bHQgPSAndW5rbm93bi1yZXN1bHQnXHJcbn1cclxuXHJcbi8vIHR5cGUgb2YgYW5hbHl0aWNzIG9iamVjdFxyXG5leHBvcnQgZW51bSBBbmFseXRpY3NPYmplY3RUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgQ29uc3RhbnRSZWZlcmVuY2VMaW5lID0gJ2NvbnN0YW50LXJlZmVyZW5jZS1saW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgQXZlcmFnZVJlZmVyZW5jZUxpbmUgPSAnYXZlcmFnZS1yZWZlcmVuY2UtbGluZScsXHJcblxyXG4gIC8vIFxyXG4gIEN1c3RvbVJlZmVyZW5jZUxpbmUgPSAnY3VzdG9tLXJlZmVyZW5jZS1saW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgQ3VzdG9tUmVmZXJlbmNlQmFuZCA9ICdjdXN0b20tcmVmZXJlbmNlLWJhbmQnLFxyXG5cclxuICAvLyBcclxuICBBdmVyYWdlQW5kTmluZXR5Rml2ZSA9ICdhdmVyYWdlLWFuZC1uaW5ldHktZml2ZScsXHJcblxyXG4gIC8vIFxyXG4gIE1lZGlhbkFuZE5pbmV0eUZpdmUgPSAnbWVkaWFuLWFuZC1uaW5ldHktZml2ZScsXHJcblxyXG4gIC8vIFxyXG4gIEN1c3RvbURpc3RyaWJ1dGlvbkJhbmQgPSAnY3VzdG9tLWRpc3RyaWJ1dGlvbi1iYW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgQm94cGxvdCA9ICdib3hwbG90JyxcclxuXHJcbiAgLy8gXHJcbiAgQ3VzdG9tQm94cGxvdCA9ICdjdXN0b20tYm94cGxvdCcsXHJcblxyXG4gIC8vIFxyXG4gIFRvdGFscyA9ICd0b3RhbHMnLFxyXG5cclxuICAvLyBcclxuICBUcmVuZExpbmVPYmplY3QgPSAndHJlbmQtbGluZS1vYmplY3QnLFxyXG5cclxuICAvLyBcclxuICBGb3JlY2FzdCA9ICdmb3JlY2FzdCcsXHJcblxyXG4gIC8vIFxyXG4gIENsdXN0ZXIgPSAnY2x1c3RlcicsXHJcblxyXG4gIC8vIFxyXG4gIE91dGxpZXIgPSAnb3V0bGllcicsXHJcblxyXG4gIC8vIFxyXG4gIE1lZGlhbkFuZFF1YXJ0aWxlcyA9ICdtZWRpYW4tYW5kLXF1YXJ0aWxlcycsXHJcblxyXG4gIC8vIFxyXG4gIFVua25vd24gPSAndW5rbm93bidcclxufVxyXG5cclxuLy8gdGFyZ2V0IHdoZXJlIGFuIGFuYWx5dGljcyBvYmplY3QgbWF5IGJlIGRyb3BwZWRcclxuZXhwb3J0IGVudW0gQW5hbHl0aWNzT2JqZWN0RHJvcFRhcmdldCB7XHJcblxyXG4gIC8vIFxyXG4gIFRhcmdldENlbGwgPSAndGFyZ2V0LWNlbGwnLFxyXG5cclxuICAvLyBcclxuICBUYXJnZXRQYW5lID0gJ3RhcmdldC1wYW5lJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFyZ2V0VGFibGUgPSAndGFyZ2V0LXRhYmxlJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFyZ2V0TGluZWFyID0gJ3RhcmdldC1saW5lYXInLFxyXG5cclxuICAvLyBcclxuICBUYXJnZXRMb2cgPSAndGFyZ2V0LWxvZycsXHJcblxyXG4gIC8vIFxyXG4gIFRhcmdldEV4cG9uZW50aWFsID0gJ3RhcmdldC1leHBvbmVudGlhbCcsXHJcblxyXG4gIC8vIFxyXG4gIFRhcmdldFBvbHlub21pYWwgPSAndGFyZ2V0LXBvbHlub21pYWwnLFxyXG5cclxuICAvLyBcclxuICBUYXJnZXRQb3dlciA9ICd0YXJnZXQtcG93ZXInLFxyXG5cclxuICAvLyBcclxuICBUYXJnZXRGb3JlY2FzdCA9ICd0YXJnZXQtZm9yZWNhc3QnLFxyXG5cclxuICAvLyBcclxuICBUYXJnZXRDbHVzdGVyID0gJ3RhcmdldC1jbHVzdGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFyZ2V0T3V0bGllciA9ICd0YXJnZXQtb3V0bGllcicsXHJcblxyXG4gIC8vIFxyXG4gIFRhcmdldFN1YnRvdGFscyA9ICd0YXJnZXQtc3VidG90YWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFyZ2V0Q29sdW1uVG90YWxzID0gJ3RhcmdldC1jb2x1bW4tdG90YWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgVGFyZ2V0Um93VG90YWxzID0gJ3RhcmdldC1yb3ctdG90YWxzJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gQ2FsY0FwcGx5UmVzdWx0IHtcclxuXHJcbiAgLy8gY2FwdGlvbiBmb3IgbmV3IGNhbGN1bGF0aW9uIGlzIGludmFsaWRcclxuICBJTlZBTElEX0NBUFRJT04gPSAnaW52YWxpZC1jYXB0aW9uLWZvci1uZXctY2FsYycsXHJcblxyXG4gIC8vIGZvcm11bGEgaXMgaW52YWxpZFxyXG4gIElOVkFMSURfRk9STVVMQSA9ICdpbnZhbGlkLWZvcm11bGEnLFxyXG5cclxuICAvLyBzdWNjZXNzZnVsbHkgYXBwbGllZFxyXG4gIFNVQ0NFRUQgPSAnc3VjY2VlZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFVJQXV0b21hdGlvbkNvbW1hbmRTdGF0dXMge1xyXG5cclxuICAvLyBcclxuICBVSUF1dG9tYXRpb25Db21tYW5kU3RhdHVzX1N1Y2Nlc3MgPSAnc3VjY2VzcycsXHJcblxyXG4gIC8vIFxyXG4gIFVJQXV0b21hdGlvbkNvbW1hbmRTdGF0dXNfVW5zdXBwb3J0ZWRDb250cm9sVHlwZUVycm9yID0gJ3Vuc3VwcG9ydGVkLWNvbnRyb2wtdHlwZS1lcnJvcicsXHJcblxyXG4gIC8vIFxyXG4gIFVJQXV0b21hdGlvbkNvbW1hbmRTdGF0dXNfVW5zdXBwb3J0ZWRBY3Rpb25FcnJvciA9ICd1bnN1cHBvcnRlZC1hY3Rpb24tZXJyb3InLFxyXG5cclxuICAvLyBcclxuICBVSUF1dG9tYXRpb25Db21tYW5kU3RhdHVzX0NvbXBvbmVudE5vdEZvdW5kRXJyb3IgPSAnY29tcG9uZW50LW5vdC1mb3VuZC1lcnJvcicsXHJcblxyXG4gIC8vIFxyXG4gIFVJQXV0b21hdGlvbkNvbW1hbmRTdGF0dXNfVW5rbm93bkVycm9yID0gJ3Vua25vd24tZXJyb3InLFxyXG5cclxuICAvLyBcclxuICBVSUF1dG9tYXRpb25Db21tYW5kU3RhdHVzX1NhdmVFcnJvciA9ICdzYXZlLWVycm9yJyxcclxuXHJcbiAgLy8gXHJcbiAgVUlBdXRvbWF0aW9uQ29tbWFuZFN0YXR1c19CYWRJbnB1dEVycm9yID0gJ2JhZC1pbnB1dC1lcnJvcidcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIERyb3BXaGVuIHtcclxuXHJcbiAgLy8gXHJcbiAgRHJvcFdoZW5OZXZlciA9ICduZXZlcicsXHJcblxyXG4gIC8vIFxyXG4gIERyb3BXaGVuQWx3YXlzID0gJ2Fsd2F5cycsXHJcblxyXG4gIC8vIFxyXG4gIERyb3BXaGVuU2VsZWN0ZWQgPSAnd2hlbi1zZWxlY3RlZCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFZhbHVlRG9tYWluVHlwZSB7XHJcblxyXG4gIC8vIGludmFsaWQgZG9tYWluXHJcbiAgRE9NQUlOX0lOVkFMSUQgPSAnZG9tYWluLWludmFsaWQnLFxyXG5cclxuICAvLyB1c2VyIGNhbiB0eXBlIGluIGFueSB2YWx1ZSB0aGV5IHBsZWFzZVwiIDFcclxuICBET01BSU5fRlJFRV9FTlRSWSA9ICdkb21haW4tZnJlZS1lbnRyeScsXHJcblxyXG4gIC8vIHVzZXIgbXVzdCBzZWxlY3QgYSB2YWx1ZSBmcm9tIHRoZSBsaXN0XHJcbiAgRE9NQUlOX0xJU1QgPSAnZG9tYWluLWxpc3QnLFxyXG5cclxuICAvLyB1c2VyIGNhbiBmcmVlbHkgZW50ZXIgdmFsdWVzIGFzIGxvbmcgYXMgdGhleSBhcmUgYWJvdmUgbWluIHZhbHVlXHJcbiAgRE9NQUlOX01JTiA9ICdkb21haW4tbWluJyxcclxuXHJcbiAgLy8gdXNlciBjYW4gZnJlZWx5IGVudGVyIHZhbHVlcyBhcyBsb25nIGFzIHRoZXkgYXJlIGJlbG93IG1heCB2YWx1ZVxyXG4gIERPTUFJTl9NQVggPSAnZG9tYWluLW1heCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIE9wZXJhdGlvblR5cGUge1xyXG5cclxuICAvLyBcclxuICBFcXVhbHMgPSAnZXF1YWxzJyxcclxuXHJcbiAgLy8gXHJcbiAgTm90RXF1YWxzID0gJ25vdC1lcXVhbHMnLFxyXG5cclxuICAvLyBcclxuICBMZXNzVGhhbiA9ICdsZXNzLXRoYW4nLFxyXG5cclxuICAvLyBcclxuICBMZXNzVGhhbkVxdWFsID0gJ2xlc3MtdGhhbi1lcXVhbCcsXHJcblxyXG4gIC8vIFxyXG4gIEdyZWF0ZXJUaGFuID0gJ2dyZWF0ZXItdGhhbicsXHJcblxyXG4gIC8vIFxyXG4gIEdyZWF0ZXJUaGFuRXF1YWwgPSAnZ3JlYXRlci10aGFuLWVxdWFsJyxcclxuXHJcbiAgLy8gXHJcbiAgUmFuZ2VJbmNsdXNpdmUgPSAncmFuZ2UtaW5jbHVzaXZlJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRHJvcEZpZWxkUmVzdWx0IHtcclxuXHJcbiAgLy8gXHJcbiAgRHJvcEZpZWxkTm8gPSAnbm8nLFxyXG5cclxuICAvLyBcclxuICBEcm9wRmllbGRZZXMgPSAneWVzJyxcclxuXHJcbiAgLy8gXHJcbiAgRHJvcEZpZWxkTG9jayA9ICdsb2NrJyxcclxuXHJcbiAgLy8gXHJcbiAgRHJvcEZpZWxkRmlsdGVyID0gJ2ZpbHRlcicsXHJcblxyXG4gIC8vIFxyXG4gIERyb3BGaWVsZERpc2FnZ3JlZ2F0ZSA9ICdkaXNhZ2dyZWdhdGUnXHJcbn1cclxuXHJcbi8vIHJlc29sdXRpb24gdHlwZSBmb3IgYSBuYW1lIGNvbmZsaWN0XHJcbmV4cG9ydCBlbnVtIE5hbWVDb25mbGljdFJlc29sdXRpb24ge1xyXG5cclxuICAvLyBcclxuICBOUkNfVXNlT2xkID0gJ3VzZS1vbGQnLFxyXG5cclxuICAvLyBcclxuICBOUkNfVXNlTmV3ID0gJ3VzZS1uZXcnLFxyXG5cclxuICAvLyBcclxuICBOUkNfUmVuYW1lTmV3ID0gJ3JlbmFtZS1uZXcnXHJcbn1cclxuXHJcbi8vIHVzZSBlaXRoZXIgYSBzdHJpbmcgc2VwYXJhdG9yIG9yIGEgc2V0IG51bWJlciBvZiBjaGFyYWN0ZXJzXHJcbmV4cG9ydCBlbnVtIFNlcGFyYXRvclR5cGUge1xyXG5cclxuICAvLyBcclxuICBTZXBhcmF0b3JUeXBlX19TdHJpbmdTZXBhcmF0b3IgPSAnc3RyaW5nLXNlcGFyYXRvcicsXHJcblxyXG4gIC8vIFxyXG4gIFNlcGFyYXRvclR5cGVfX0NoYXJhY3RlckNvdW50U2VwYXJhdG9yID0gJ2NoYXJhY3Rlci1jb3VudC1zZXBhcmF0b3InXHJcbn1cclxuXHJcbi8vIHNwbGl0IGdsb2JhbGx5IG9yIG9ubHkgb24gdGhlIGZpcnN0IG9jY3VycmVuY2Ugb3Igb25seSBvbiB0aGUgbGFzdCBvY2N1cnJlbmNlXHJcbmV4cG9ydCBlbnVtIFNwbGl0TW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNwbGl0TW9kZV9fQ1NfQUxMID0gJ3NwbGl0LWFsbCcsXHJcblxyXG4gIC8vIFxyXG4gIFNwbGl0TW9kZV9fQ1NfRklSU1QgPSAnc3BsaXQtZmlyc3QnLFxyXG5cclxuICAvLyBcclxuICBTcGxpdE1vZGVfX0NTX0xBU1QgPSAnc3BsaXQtbGFzdCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIE5vZGVTZWxlY3Rpb25UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9kZVNlbGVjdGlvbl9Ob25lID0gJ25vbmUnLFxyXG5cclxuICAvLyBcclxuICBOb2RlU2VsZWN0aW9uX1NpbmdsZVJvdyA9ICdzaW5nbGUtcm93JyxcclxuXHJcbiAgLy8gXHJcbiAgTm9kZVNlbGVjdGlvbl9NdWx0aVJvdyA9ICdtdWx0aS1yb3cnLFxyXG5cclxuICAvLyBcclxuICBOb2RlU2VsZWN0aW9uX1NpbmdsZUNvbHVtbiA9ICdzaW5nbGUtY29sdW1uJyxcclxuXHJcbiAgLy8gXHJcbiAgTm9kZVNlbGVjdGlvbl9NdWx0aUNvbHVtbiA9ICdtdWx0aS1jb2x1bW4nLFxyXG5cclxuICAvLyBcclxuICBOb2RlU2VsZWN0aW9uX01peGVkID0gJ21peGVkJ1xyXG59XHJcblxyXG4vLyBpY29ucyBmb3IgQWN0aW9ue1NvdXJjZS9EZXN0fUNvbWJvXHJcbmV4cG9ydCBlbnVtIFNvdXJjZURlc3RJY29uIHtcclxuXHJcbiAgLy8gXHJcbiAgU0RJX0RhdGFTb3VyY2UgPSAnZGF0YS1zb3VyY2UnLFxyXG5cclxuICAvLyBcclxuICBTRElfV29ya3NoZWV0ID0gJ3dvcmtzaGVldCcsXHJcblxyXG4gIC8vIFxyXG4gIFNESV9EYXNoYm9hcmQgPSAnZGFzaGJvYXJkJyxcclxuXHJcbiAgLy8gXHJcbiAgU0RJX0FsbCA9ICdhbGwnXHJcbn1cclxuXHJcbi8vIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBvZiBsZWdlbmRzIG9uIGEgc2hlZXRcclxuZXhwb3J0IGVudW0gTGVnZW5kTGF5b3V0IHtcclxuXHJcbiAgLy8gXHJcbiAgTExfUmlnaHRWZXJ0aWNhbCA9ICdyaWdodC12ZXJ0aWNhbCcsXHJcblxyXG4gIC8vIFxyXG4gIExMX1JpZ2h0SG9yaXpvbnRhbCA9ICdyaWdodC1ob3Jpem9udGFsJyxcclxuXHJcbiAgLy8gXHJcbiAgTExfQm90dG9tVmVydGljYWwgPSAnYm90dG9tLXZlcnRpY2FsJyxcclxuXHJcbiAgLy8gXHJcbiAgTExfQm90dG9tSG9yaXpvbnRhbCA9ICdib3R0b20taG9yaXpvbnRhbCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEdldEpzb25SZXNwb25zZUVudW0ge1xyXG5cclxuICAvLyB0aGUganNvbiByZXBvbnNlIGV4aXN0cyBhbmQgaXMgdmFsaWRcclxuICBKU09OX09LID0gJ29rJyxcclxuXHJcbiAgLy8gdGhlIHNoZWV0IHNwZWNpZmllZCBpcyBub3QgdmFsaWRcclxuICBKU09OX05PX1NIRUVUID0gJ25vLXNoZWV0JyxcclxuXHJcbiAgLy8gdGhlIGZpZWxkIGlkIGlzIGludmFsaWQgZm9yIHRoaXMgZmlsdGVyXHJcbiAgSlNPTl9JTlZBTElEX0ZJRUxEID0gJ2ludmFsaWQtZmllbGQnXHJcbn1cclxuXHJcbi8vIGNsaWVudCBtZXRyaWMgZGVzY3JpcHRpb25zXHJcbmV4cG9ydCBlbnVtIENsaWVudE1ldHJpYyB7XHJcblxyXG4gIC8vIFVua25vd24gTWV0cmljXHJcbiAgQ01fVW5rbm93biA9ICdVTktOV04nLFxyXG5cclxuICAvLyBCb290c3RyYXAgUmVxdWVzdFxyXG4gIENNX0Jvb3RzdHJhcFJlcXVlc3QgPSAnQlRTVFJQJyxcclxuXHJcbiAgLy8gUHJvY2VzcyBQcmltYXJ5IFBheWxvYWRcclxuICBDTV9Qcm9jZXNzUHJpbWFyeVBheWxvYWQgPSAnUFJPUFJJJyxcclxuXHJcbiAgLy8gUHJvY2VzcyBTZWNvbmRhcnkgUGF5bG9hZFxyXG4gIENNX1Byb2Nlc3NTZWNvbmRhcnlQYXlsb2FkID0gJ1BST1NFQycsXHJcblxyXG4gIC8vIEluaXRpYWxpemUgTW9kZWxzXHJcbiAgQ01fSW5pdGlhbGl6ZU1vZGVscyA9ICdNRExJTkknLFxyXG5cclxuICAvLyBIYW5kbGUgTW9kZWwgRXZlbnRzXHJcbiAgQ01fSGFuZGxlTW9kZWxFdmVudHMgPSAnTURMRVZUJyxcclxuXHJcbiAgLy8gRXhlY3V0ZSBMb2NhbCBDb21tYW5kXHJcbiAgQ01fRXhlY3V0ZUxvY2FsQ29tbWFuZCA9ICdFWEVMT0MnLFxyXG5cclxuICAvLyBFeGVjdXRlIFJlbW90ZSBDb21tYW5kXHJcbiAgQ01fRXhlY3V0ZVJlbW90ZUNvbW1hbmQgPSAnRVhFUkVNJyxcclxuXHJcbiAgLy8gUHJvY2VzcyBMb2NhbCBDb21tYW5kIFJlc3BvbnNlXHJcbiAgQ01fUHJvY2Vzc0xvY2FsUmVzcG9uc2UgPSAnUFJPTE9DJyxcclxuXHJcbiAgLy8gUHJvY2VzcyBSZW1vdGUgQ29tbWFuZCBSZXNwb25zZVxyXG4gIENNX1Byb2Nlc3NSZW1vdGVSZXNwb25zZSA9ICdQUk9SRU0nLFxyXG5cclxuICAvLyBSZW5kZXIgUGFuZXRhYmxlXHJcbiAgQ01fUmVuZGVyUGFuZXRhYmxlID0gJ1JORFJQVCcsXHJcblxyXG4gIC8vIFJlbmRlciBSZWdpb25cclxuICBDTV9SZW5kZXJSZWdpb24gPSAnUk5EUlJHJyxcclxuXHJcbiAgLy8gUnVudGltZSBtb2RlbCBwcmVzbW9kZWwgY29udmVyc2lvblxyXG4gIENNX1J1bnRpbWVDb252ZXJzaW9uID0gJ1JUQ09OVicsXHJcblxyXG4gIC8vIENsaWVudCBMb2FkZWRcclxuICBDTV9DbGllbnRMb2FkZWQgPSAnQ0xOVExEJyxcclxuXHJcbiAgLy8gQXBwbGljYXRpb24gU3RhcnR1cFxyXG4gIENNX0FwcGxpY2F0aW9uU3RhcnR1cCA9ICdBUFBTVFInLFxyXG5cclxuICAvLyBBcHBsaWNhdGlvbiBJbnRlcmFjdGl2ZVxyXG4gIENNX0FwcGxpY2F0aW9uSW50ZXJhY3RpdmUgPSAnQVBQSU5UJyxcclxuXHJcbiAgLy8gQWxsIFpvbmVzIExvYWRlZFxyXG4gIENNX0FsbFpvbmVzTG9hZGVkID0gJ0FMTFpOUycsXHJcblxyXG4gIC8vIFRvb2xiYXIgTGF5b3V0XHJcbiAgQ01fVG9vbGJhckxheW91dCA9ICdUQlJMQVknLFxyXG5cclxuICAvLyBUb29sYmFyIEhhbmRsZU5ld1Rvb2xiYXJcclxuICBDTV9Ub29sYmFySGFuZGxlTmV3VG9vbGJhciA9ICdUQlJITlQnLFxyXG5cclxuICAvLyBUb29sYmFyIEFkZFRvb2xiYXJcclxuICBDTV9Ub29sYmFyQWRkVG9vbGJhciA9ICdUQlJBREQnLFxyXG5cclxuICAvLyBUb29sYmFyIEhhbmRsZVJlc2l6ZVxyXG4gIENNX1Rvb2xiYXJIYW5kbGVSZXNpemUgPSAnVEJSSFJFJyxcclxuXHJcbiAgLy8gSmF2YVNjcmlwdCBNb2R1bGUgbG9hZGVkIGFzeW5jaHJvbm91c2x5XHJcbiAgQ01fTW9kdWxlTG9hZGVkID0gJ01ETE9BRCcsXHJcblxyXG4gIC8vIEVtc2NyaXB0ZW4gbWV0aG9kIG9uUnVudGltZUluaXRpYWxpemVkIGNhbGxlZCwgYW5kIGluaXRpYWwgcGF5bG9hZCByZWFkeVxyXG4gIENNX1J1bnRpbWVMb2FkZWQgPSAnUlRMT0FEJyxcclxuXHJcbiAgLy8gSW5pdGlhbCBwYXlsb2FkIGV4ZWN1dGVkIGluIHRoZSBydW50aW1lXHJcbiAgQ01fUnVudGltZUZpcnN0UnVuID0gJ1JURlJVTidcclxufVxyXG5cclxuLy8gcmVzdWx0IGNvZGUgZm9yIGltYWdlcyBlZGl0IG9wZXJhdGlvblxyXG5leHBvcnQgZW51bSBJbWFnZXNFZGl0UmVzdWx0Q29kZSB7XHJcblxyXG4gIC8vIFxyXG4gIElFUl9TdWNjZXNzID0gJ3N1Y2Nlc3MnLFxyXG5cclxuICAvLyBcclxuICBJRVJfRW1wdHlDYXB0aW9uID0gJ2VtcHR5LWNhcHRpb24nLFxyXG5cclxuICAvLyBcclxuICBJRVJfRHVwbGljYXRlQ2FwdGlvbiA9ICdkdXBsaWNhdGUtY2FwdGlvbicsXHJcblxyXG4gIC8vIFxyXG4gIElFUl9GYWlsZWRWYWxpZGF0aW9uID0gJ2ZhaWxlZC12YWxpZGF0aW9uJyxcclxuXHJcbiAgLy8gXHJcbiAgSUVSX0ludmFsaWRVUkwgPSAnaW52YWxpZC11cmwnLFxyXG5cclxuICAvLyBcclxuICBJRVJfRW1wdHlYUmFuZ2UgPSAnZW1wdHkteC1yYW5nZScsXHJcblxyXG4gIC8vIFxyXG4gIElFUl9FbXB0eVlSYW5nZSA9ICdlbXB0eS15LXJhbmdlJyxcclxuXHJcbiAgLy8gXHJcbiAgSUVSX05vSW1hZ2VQcmV2aWV3ID0gJ25vLWltYWdlLXByZXZpZXcnLFxyXG5cclxuICAvLyBcclxuICBJRVJfUmVuZGVyRXhjZXB0aW9uID0gJ3JlbmRlci1leGNlcHRpb24nLFxyXG5cclxuICAvLyBcclxuICBJRVJfVGFibGVhdUV4Y2VwdGlvbiA9ICd0YWJsZWF1LWV4Y2VwdGlvbidcclxufVxyXG5cclxuLy8gdGhlIHNvdXJjZSBvZiB0aGUgdW5kZXJseWluZyBkYXRhIHVzZWQgYnkgdGhlIGRhdGEgcHJvdmlkZXJcclxuZXhwb3J0IGVudW0gRGF0YVByb3ZpZGVyVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIERQX0RhdGFzb3VyY2UgPSAnZGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIFxyXG4gIERQX1NlbGVjdGlvbiA9ICdzZWxlY3Rpb24nLFxyXG5cclxuICAvLyBcclxuICBEUF9UYWJsZSA9ICd0YWJsZScsXHJcblxyXG4gIC8vIFxyXG4gIERQX1NRTFF1ZXJ5ID0gJ3NxbC1xdWVyeSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIERhc2hib2FyZERldmljZUxheW91dCB7XHJcblxyXG4gIC8vIFxyXG4gIERhc2hib2FyZERldmljZUxheW91dF9EZWZhdWx0ID0gJ2RlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBEYXNoYm9hcmREZXZpY2VMYXlvdXRfRGVza3RvcCA9ICdkZXNrdG9wJyxcclxuXHJcbiAgLy8gXHJcbiAgRGFzaGJvYXJkRGV2aWNlTGF5b3V0X1RhYmxldCA9ICd0YWJsZXQnLFxyXG5cclxuICAvLyBcclxuICBEYXNoYm9hcmREZXZpY2VMYXlvdXRfUGhvbmUgPSAncGhvbmUnXHJcbn1cclxuXHJcbi8vIHdobyBpcyBjYWxsaW5nIHRoZSBkZXZpY2UgZGV0ZWN0aW9uIGxvZ2ljXHJcbmV4cG9ydCBlbnVtIERldmljZVNvdXJjZSB7XHJcblxyXG4gIC8vIE5vdGhpbmcgc3BlY2lhbCBhYm91dCB0aGUgY2FsbGVyIHRvIHRoZSBkZXRlY3Rpb24gbG9naWMuIFRoaXMgbWVhbnMgaXQgaXMgdGhlIHdlYiBicm93c2VyLlxyXG4gIERldmljZVNvdXJjZV9Vbmtub3duID0gJ3Vua25vd24nLFxyXG5cclxuICAvLyB0aGUgc25hcHNob3Qgc2VydmljZSBmb3IgdGhlIG1vYmlsZSBhcHBcclxuICBEZXZpY2VTb3VyY2VfU25hcHNob3RTZXJ2aWNlID0gJ3NuYXBzaG90LXNydicsXHJcblxyXG4gIC8vIHRoZSA6ZGV2aWNlIHVybCBwYXJhbWV0ZXJcclxuICBEZXZpY2VTb3VyY2VfVXJsUGFyYW0gPSAndXJsLXBhcmFtJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gRGFzaGJvYXJkU2l6aW5nRGltZW5zaW9uIHtcclxuXHJcbiAgLy8gXHJcbiAgTm9EaW1lbnNpb24gPSAnbm8nLFxyXG5cclxuICAvLyBcclxuICBNaW5XaWR0aERpbWVuc2lvbiA9ICdtaW53aWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIE1pbkhlaWdodERpbWVuc2lvbiA9ICdtaW5oZWlnaHQnLFxyXG5cclxuICAvLyBcclxuICBNYXhXaWR0aERpbWVuc2lvbiA9ICdtYXh3aWR0aCcsXHJcblxyXG4gIC8vIFxyXG4gIE1heEhlaWdodERpbWVuc2lvbiA9ICdtYXhoZWlnaHQnLFxyXG5cclxuICAvLyBcclxuICBGaXhlZFdpZHRoRGltZW5zaW9uID0gJ2ZpeGVkd2lkdGgnLFxyXG5cclxuICAvLyBcclxuICBGaXhlZEhlaWdodERpbWVuc2lvbiA9ICdmaXhlZGhlaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIFNjcm9sbGFibGVIZWlnaHREaW1lbnNpb24gPSAnc2Nyb2xsYWJsZWhlaWdodCcsXHJcblxyXG4gIC8vIFxyXG4gIE1pbkRpbWVuc2lvbnMgPSAnbWlucycsXHJcblxyXG4gIC8vIFxyXG4gIE1heERpbWVuc2lvbnMgPSAnbWF4cydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEZsaXBib2FyZE5hdlR5cGUge1xyXG5cclxuICAvLyBcclxuICBDYXB0aW9uID0gJ2NhcHRpb24nLFxyXG5cclxuICAvLyBcclxuICBOdW1iZXIgPSAnbnVtYmVyJyxcclxuXHJcbiAgLy8gXHJcbiAgRG90ID0gJ2RvdCcsXHJcblxyXG4gIC8vIFxyXG4gIEFycm93T25seSA9ICdhcnJvd29ubHknXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBEYXNoYm9hcmRTaXppbmdNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgVW5zcGVjaWZpZWRTaXppbmcgPSAndW5zcGVjaWZpZWQnLFxyXG5cclxuICAvLyBcclxuICBBdXRvbWF0aWNTaXppbmcgPSAnYXV0b21hdGljJyxcclxuXHJcbiAgLy8gXHJcbiAgRml4ZWRTaXppbmcgPSAnZml4ZWQnLFxyXG5cclxuICAvLyBcclxuICBSYW5nZVNpemluZyA9ICdyYW5nZScsXHJcblxyXG4gIC8vIFxyXG4gIFZTY3JvbGxTaXppbmcgPSAndnNjcm9sbCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIEdyaWRPdmVybGF5TW9kZSB7XHJcblxyXG4gIC8vIFxyXG4gIEdPTV9BdXRvbWF0aWMgPSAnZ29tLWF1dG9tYXRpYycsXHJcblxyXG4gIC8vIFxyXG4gIEdPTV9PbiA9ICdnb20tb24nLFxyXG5cclxuICAvLyBcclxuICBHT01fT2ZmID0gJ2dvbS1vZmYnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBGaWVsZFBpY2tlckRpYWxvZ1VzZUNhc2Uge1xyXG5cclxuICAvLyBcclxuICBGaWVsZFBpY2tlckRpYWxvZ1VzZUNhc2VfUmVwbGFjZUZpZWxkID0gJ3JlcGxhY2UtZmllbGQtdXNlLWNhc2UnLFxyXG5cclxuICAvLyBcclxuICBGaWVsZFBpY2tlckRpYWxvZ1VzZUNhc2VfQ3JlYXRlSWRlbnRpdHlTZXQgPSAnY3JlYXRlLWlkZW50aXR5LXNldCcsXHJcblxyXG4gIC8vIFxyXG4gIEZpZWxkUGlja2VyRGlhbG9nVXNlQ2FzZV9FZGl0RGF0YXNyb3VjZUFsaWFzZXMgPSAnZWRpdC1kYXRhc291cmNlLWFsaWFzZXMtdXNlLWNhc2UnLFxyXG5cclxuICAvLyBcclxuICBGaWVsZFBpY2tlckRpYWxvZ1VzZUNhc2VfRWRpdEZpbHRlcnMgPSAnZWRpdC1maWx0ZXJzLXVzZS1jYXNlJyxcclxuXHJcbiAgLy8gXHJcbiAgRmllbGRQaWNrZXJEaWFsb2dVc2VDYXNlX0V4dHJhY3RGaWx0ZXIgPSAnaW5jcmVtZW50YWwtZXh0cmFjdC11c2UtY2FzZSdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFNpZGVUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgU1RfVG9wID0gJ3RvcCcsXHJcblxyXG4gIC8vIFxyXG4gIFNUX1JpZ2h0ID0gJ3JpZ2h0JyxcclxuXHJcbiAgLy8gXHJcbiAgU1RfQm90dG9tID0gJ2JvdHRvbScsXHJcblxyXG4gIC8vIFxyXG4gIFNUX0xlZnQgPSAnbGVmdCdcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFdvcmtncm91cFB1Ymxpc2hFcnJvclR5cGUge1xyXG5cclxuICAvLyBcclxuICBFQV9Ob25lID0gJ2VhLW5vbmUnLFxyXG5cclxuICAvLyBcclxuICBFQV9XYXJuaW5nID0gJ2VhLXdhcm5pbmcnLFxyXG5cclxuICAvLyBcclxuICBFQV9Qcm9tcHQgPSAnZWEtcHJvbXB0JyxcclxuXHJcbiAgLy8gXHJcbiAgRUFfSW5mbyA9ICdlYS1pbmZvJyxcclxuXHJcbiAgLy8gXHJcbiAgRUFfU2VydmVyID0gJ2VhLXNlcnZlcidcclxufVxyXG5cclxuLy8gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHVzZXIgaGFzIHNpZ25lZCBpbiBvciBpcyBzaWduZWQgaW50byBhIHNlcnZlclxyXG5leHBvcnQgZW51bSBTZXJ2ZXJDb25uZWN0aW9uU3RhdHVzIHtcclxuXHJcbiAgLy8gVGhlIHVzZXIgaGFzIG5ldmVyIHNpZ25lZCBpblxyXG4gIE5ldmVyU2lnbmVkSW4gPSAnc2VydmVyLWNvbm5lY3Rpb24tc3RhdHVzLW5ldmVyLXNpZ25lZC1pbicsXHJcblxyXG4gIC8vIFRoZSB1c2VyIGhhcyBzaWduZWQgaW4gYXQgbGVhc3Qgb25jZVxyXG4gIEhhc1NpZ25lZEluID0gJ3NlcnZlci1jb25uZWN0aW9uX3N0YXR1cy1oYXMtc2lnbmVkLWluJyxcclxuXHJcbiAgLy8gQXV0byBzaWduIGluIHdpbGwgYmUgYXR0ZW1wdGVkXHJcbiAgV2lsbEF1dG9TaWduSW4gPSAnc2VydmVyLWNvbm5lY3Rpb25fc3RhdHVzLXdpbGwtYXV0by1zaWduLWluJyxcclxuXHJcbiAgLy8gVGhlIHVzZXIgaXMgc2lnbmVkIGluXHJcbiAgU2lnbmVkSW4gPSAnc2VydmVyLWNvbm5lY3Rpb25fc3RhdHVzLXNpZ25lZC1pbidcclxufVxyXG5cclxuLy8gU3RhcnQgb2YgV2VlayAoU3RhcnRpbmcgRGF5KVxyXG5leHBvcnQgZW51bSBTT1dWYWx1ZSB7XHJcblxyXG4gIC8vIFxyXG4gIFNPV1ZhbHVlX19TT1dfU1lTVEVNREVGQVVMVCA9ICdzb3ctc3lzdGVtLWRlZmF1bHQnLFxyXG5cclxuICAvLyBcclxuICBTT1dWYWx1ZV9fU09XXzdEQVlQRVJJT0QgPSAnc293LTctZGF5LXBlcmlvZCcsXHJcblxyXG4gIC8vIFxyXG4gIFNPV1ZhbHVlX19TT1dfU1VOREFZID0gJ3Nvdy1zdW5kYXknLFxyXG5cclxuICAvLyBcclxuICBTT1dWYWx1ZV9fU09XX01PTkRBWSA9ICdzb3ctbW9uZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgU09XVmFsdWVfX1NPV19UVUVTREFZID0gJ3Nvdy10dWVzZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgU09XVmFsdWVfX1NPV19XRURORVNEQVkgPSAnc293LXdlZG5lc2RheScsXHJcblxyXG4gIC8vIFxyXG4gIFNPV1ZhbHVlX19TT1dfVEhVUlNEQVkgPSAnc293LXRodXJzZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgU09XVmFsdWVfX1NPV19GUklEQVkgPSAnc293LWZyaWRheScsXHJcblxyXG4gIC8vIFxyXG4gIFNPV1ZhbHVlX19TT1dfU0FUVVJEQVkgPSAnc293LXNhdHVyZGF5JyxcclxuXHJcbiAgLy8gXHJcbiAgU09XVmFsdWVfX1NPV19JU084NjAxV0VFSyA9ICdzb3ctaXNvODYwMS13ZWVrJ1xyXG59XHJcblxyXG4vLyBUeXBlIG9mIEZpbmQgdG8gcGVyZm9ybVxyXG5leHBvcnQgZW51bSBGaW5kVHlwZSB7XHJcblxyXG4gIC8vIFN0YXJ0cyBXaXRoXHJcbiAgRmluZFR5cGVfU3RhcnRzID0gJ2ZpbmR0eXBlLXN0YXJ0cycsXHJcblxyXG4gIC8vIEVuZHMgV2l0aFxyXG4gIEZpbmRUeXBlX0VuZHMgPSAnZmluZHR5cGUtZW5kcycsXHJcblxyXG4gIC8vIENvbnRhaW5zXHJcbiAgRmluZFR5cGVfQ29udGFpbnMgPSAnZmluZHR5cGUtY29udGFpbnMnLFxyXG5cclxuICAvLyBFeGFjdFxyXG4gIEZpbmRUeXBlX0V4YWN0ID0gJ2ZpbmR0eXBlLWV4YWN0J1xyXG59XHJcblxyXG4vLyBQZXJzcGVjdGl2ZVR5cGUgb2YgYSBnaXZlbiBQZXJzcGVjdGl2ZVByZXNNb2RlbFxyXG5leHBvcnQgZW51bSBQZXJzcGVjdGl2ZUVudW1QZXJzcGVjdGl2ZVR5cGUge1xyXG5cclxuICAvLyBSZWFsaXR5XHJcbiAgUGVyc3BlY3RpdmVUeXBlX1JlYWxpdHkgPSAncGVyc3BlY3RpdmV0eXBlLXJlYWxpdHknLFxyXG5cclxuICAvLyBGaXJzdFxyXG4gIFBlcnNwZWN0aXZlVHlwZV9GaXJzdCA9ICdwZXJzcGVjdGl2ZXR5cGUtZmlyc3QnLFxyXG5cclxuICAvLyBMYXN0XHJcbiAgUGVyc3BlY3RpdmVUeXBlX0xhc3QgPSAncGVyc3BlY3RpdmV0eXBlLWxhc3QnLFxyXG5cclxuICAvLyBDdXN0b21cclxuICBQZXJzcGVjdGl2ZVR5cGVfQ3VzdG9tID0gJ3BlcnNwZWN0aXZldHlwZS1jdXN0b20nXHJcbn1cclxuXHJcbi8vIExpc3Qgb2Ygb3B0aW9ucyBmb3Igd2hhdCB0byB3cml0ZSBvdXQgZnJvbSBnZXQtcnVudGltZS1pbmZvXHJcbmV4cG9ydCBlbnVtIFJ1bnRpbWVJbmZvUnVudGltZU91dHB1dCB7XHJcblxyXG4gIC8vIG91dHB1dCB0aGUgVlRMIGZyb20gdGhlIHByb2R1Y2Vyc1xyXG4gIFJhd1ZUTCA9ICdyYXctdnRsJyxcclxuXHJcbiAgLy8gb3V0cHV0IHRoZSBkYXRhIHN0b3JlIGZyb20gdGhlIHByb2R1Y2Vyc1xyXG4gIFJhd1N0b3JlID0gJ3Jhdy1zdG9yZScsXHJcblxyXG4gIC8vIG91dHB1dCB0aGUgZ3JhcGggYW5kIGNvbXBpbGVkIFZUTFxyXG4gIFBheWxvYWRWVEwgPSAncGF5bG9hZC12dGwnLFxyXG5cclxuICAvLyBvdXRwdXQgdGhlIGZpbmFsIGRhdGEgc3RvcmUgYWZ0ZXIgdHJhbnNmb3JtcyBhcmUgcnVuXHJcbiAgRmluYWxTdG9yZSA9ICdmaW5hbC1zdG9yZScsXHJcblxyXG4gIC8vIG91dHB1dCB0aGUgVlRMIGFuZCBkYXRhIHN0b3JlIGZyb20gdGhlIHByb2R1Y2Vyc1xyXG4gIElucHV0ID0gJ2lucHV0JyxcclxuXHJcbiAgLy8gb3V0cHV0IHRoZSBmaW5hbCBWVEwgYW5kIGRhdGEgc3RvcmUgYWZ0ZXIgY29tcGlsYXRpb24gYW5kIHJ1bm5pbmdcclxuICBPdXRwdXQgPSAnb3V0cHV0J1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gR2VvbWV0cnlUeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgRW1wdHkgPSAnZW1wdHknLFxyXG5cclxuICAvLyBcclxuICBNdWx0aVBvbHlnb24gPSAnbXVsdGlQb2x5Z29uJyxcclxuXHJcbiAgLy8gXHJcbiAgTXVsdGlQb2ludCA9ICdtdWx0aVBvaW50JyxcclxuXHJcbiAgLy8gXHJcbiAgTXVsdGlMaW5lU3RyaW5nID0gJ211bHRpTGluZVN0cmluZydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIE1hcmtTaXppbmdTZXR0aW5nIHtcclxuXHJcbiAgLy8gXHJcbiAgTWFya3NTY2FsaW5nQXV0b21hdGljID0gJ21hcmtzLXNjYWxpbmctYXV0b21hdGljJyxcclxuXHJcbiAgLy8gXHJcbiAgTWFya3NTY2FsaW5nT24gPSAnbWFya3Mtc2NhbGluZy1vbicsXHJcblxyXG4gIC8vIFxyXG4gIE1hcmtzU2NhbGluZ09mZiA9ICdtYXJrcy1zY2FsaW5nLW9mZidcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gZm9yIGNhcmQgdHlwZSBvbiB3b3Jrc2hlZXRzLlxyXG5leHBvcnQgZW51bSBDYXJkVHlwZSB7XHJcblxyXG4gIC8vIENhcmRNYW5hZ2VyIHRyZWF0cyB6ZXJvIHNwZWNpYWxseSwgc28gd2UgY2FuJ3Qgc3RhcnQgYXQgemVyby5cclxuICBDb2x1bW5zID0gJ2NhcmR0eXBlLWNvbHVtbnMnLFxyXG5cclxuICAvLyBcclxuICBSb3dzID0gJ2NhcmR0eXBlLXJvd3MnLFxyXG5cclxuICAvLyBcclxuICBQYWdlcyA9ICdjYXJkdHlwZS1wYWdlcycsXHJcblxyXG4gIC8vIFxyXG4gIEN1cnJlbnRQYWdlID0gJ2NhcmR0eXBlLWN1cnJlbnRQYWdlJyxcclxuXHJcbiAgLy8gXHJcbiAgRmlsdGVycyA9ICdjYXJkdHlwZS1maWx0ZXJzJyxcclxuXHJcbiAgLy8gXHJcbiAgTWFya3MgPSAnY2FyZHR5cGUtbWFya3MnLFxyXG5cclxuICAvLyBcclxuICBNZWFzdXJlcyA9ICdjYXJkdHlwZS1tZWFzdXJlcycsXHJcblxyXG4gIC8vIFxyXG4gIENvbG9yTGVnZW5kID0gJ2NhcmR0eXBlLWNvbG9yTGVnZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgU2hhcGVMZWdlbmQgPSAnY2FyZHR5cGUtc2hhcGVMZWdlbmQnLFxyXG5cclxuICAvLyBcclxuICBTaXplTGVnZW5kID0gJ2NhcmR0eXBlLXNpemVMZWdlbmQnLFxyXG5cclxuICAvLyBcclxuICBNYXBMZWdlbmQgPSAnY2FyZHR5cGUtbWFwTGVnZW5kJyxcclxuXHJcbiAgLy8gXHJcbiAgVGl0bGUgPSAnY2FyZHR5cGUtdGl0bGUnLFxyXG5cclxuICAvLyBcclxuICBDYXB0aW9uID0gJ2NhcmR0eXBlLWNhcHRpb24nLFxyXG5cclxuICAvLyBcclxuICBTdW1tYXJ5ID0gJ2NhcmR0eXBlLXN1bW1hcnknLFxyXG5cclxuICAvLyBcclxuICBQYXJhbWV0ZXIgPSAnY2FyZHR5cGUtcGFyYW1ldGVyJyxcclxuXHJcbiAgLy8gXHJcbiAgUXVpY2tGaWx0ZXIgPSAnY2FyZHR5cGUtcXVpY2tGaWx0ZXInLFxyXG5cclxuICAvLyBcclxuICBIaWdobGlnaHRlciA9ICdjYXJkdHlwZS1oaWdobGlnaHRlcidcclxufVxyXG5cclxuLy8gSW5kaWNhdGVzIHRoZSB0eXBlIG9mIHRhYmxlIGRhdGEgdG8gYmUgZGlzcGxheWVkLlxyXG5leHBvcnQgZW51bSBUYWJsZVZpZXdEYXRhVHlwZSB7XHJcblxyXG4gIC8vIFRhYmxlIHZpZXcgd2l0aCBlYWNoIGNvbHVtbiBpcyBzcGVjaWZpZWQgYnkgRmllbGROYW1lLiBEUElfQ29sdW1ucyBpcyByZXF1aXJlZC5cclxuICBUYWJsZVZpZXdGaWVsZERhdGEgPSAndGFibGUtdmlldy1maWVsZC1kYXRhJyxcclxuXHJcbiAgLy8gVGFibGUgdmlldyB3aGVyZSB0aGUgY29sdW1ucyBhcmUgZGVmaW5lZCBieSBhIGdyb3VwLiBEUElfRmllbGROYW1lIGlzIHJlcXVpcmVkLlxyXG4gIFRhYmxlVmlld0dyb3VwRGF0YSA9ICd0YWJsZS12aWV3LWdyb3VwLWRhdGEnXHJcbn1cclxuXHJcbi8vIFxyXG5leHBvcnQgZW51bSBXYXJuaW5nVHlwZSB7XHJcblxyXG4gIC8vIFxyXG4gIExJTktfRVJST1IgPSAnbGlua2Vycm9yJyxcclxuXHJcbiAgLy8gXHJcbiAgT1ZFUkxBUF9URVhUID0gJ1dhcm5PdmVybGFwcGluZ1RleHQnLFxyXG5cclxuICAvLyBcclxuICBJTlZBTElEX1dPUktTSEVFVCA9ICdXYXJuSW52YWxpZFdvcmtzaGVldCcsXHJcblxyXG4gIC8vIFxyXG4gIE9QRU5fQk9PSyA9ICdvcGVuYm9vaycsXHJcblxyXG4gIC8vIFxyXG4gIE9QRU5fREFUQVNPVVJDRSA9ICdvcGVuZGF0YXNvdXJjZScsXHJcblxyXG4gIC8vIFxyXG4gIE9QRU5fU0hFRVQgPSAnb3BlbnNoZWV0JyxcclxuXHJcbiAgLy8gXHJcbiAgTE9DQUxEQVRBX0FNQklHVUlUWSA9ICdMb2NhbERhdGFBbWJpZ3VpdHknLFxyXG5cclxuICAvLyBcclxuICBMT0NBTERBVEFfTUlTTUFUQ0ggPSAnTG9jYWxEYXRhTWlzbWF0Y2gnLFxyXG5cclxuICAvLyBcclxuICBNSVNTSU5HX0xPQ0FMX1RJTEUgPSAnTWlzc2luZ0xvY2FsVGlsZXMnLFxyXG5cclxuICAvLyBcclxuICBNQVBfVElMRV9ET1dOTE9BRCA9ICdNYXBUaWxlRG93bmxvYWRFcnJvcicsXHJcblxyXG4gIC8vIFxyXG4gIE1BUF9USUxFX0lOVEVSTUlUVEVOVCA9ICdNYXBUaWxlSW50ZXJtaXR0ZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgTUFQX1RJTEVfUkVHSU9OID0gJ01hcFRpbGVSZWdpb24nLFxyXG5cclxuICAvLyBcclxuICBNQVBfU0VSVkVSX0ZPUkJJRERFTiA9ICdNYXBTZXJ2ZXJGb3JiaWRkZW4nLFxyXG5cclxuICAvLyBcclxuICBETV9DQU5OT1RfU0NPUkUgPSAnRE1DYW5ub3RTY29yZScsXHJcblxyXG4gIC8vIFxyXG4gIERNX1NDT1JJTkdfTk9UX1JFQyA9ICdETVNjb3JpbmdOb3RSZWNvbW1lbmRlZCcsXHJcblxyXG4gIC8vIFxyXG4gIExPQ0FMX0RBVEFfTElCUkFSWV9NSVNTSU5HID0gJ0xvY2FsRGF0YUxpYnJhcnlNaXNzaW5nJyxcclxuXHJcbiAgLy8gXHJcbiAgRE1fTUlTU0lOR19NT0RFTCA9ICdETU1pc3NpbmdNb2RlbCcsXHJcblxyXG4gIC8vIFxyXG4gIERJX05PX0xJTksgPSAnRElOb0xpbmsnLFxyXG5cclxuICAvLyBcclxuICBMT0NBTERBVEFfTk9fR0VPTUVUUlkgPSAnTG9jYWxEYXRhTm9HZW9tZXRyeScsXHJcblxyXG4gIC8vIFxyXG4gIExPQ0FMREFUQV9OT19HRU9NRVRSWV9VUEdSQURFID0gJ0xvY2FsRGF0YU5vR2VvbWV0cnlVcGdyYWRlJyxcclxuXHJcbiAgLy8gXHJcbiAgRElfTk9fUkVMQVRJT05TSElQUyA9ICdESU5vUmVsYXRpb25zaGlwcydcclxufVxyXG5cclxuLy8gXHJcbmV4cG9ydCBlbnVtIFdvcmtib29rVUlNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgRGF0YVRhYiA9ICdkYXRhLXRhYicsXHJcblxyXG4gIC8vIFxyXG4gIERvY3VtZW50ID0gJ2RvY3VtZW50JyxcclxuXHJcbiAgLy8gXHJcbiAgU2hlZXRTb3J0ZXIgPSAnc2hlZXQtc29ydGVyJ1xyXG59XHJcblxyXG4vLyBcclxuZXhwb3J0IGVudW0gVG9wTGV2ZWxNZW51SXRlbSB7XHJcblxyXG4gIC8vIFxyXG4gIEZpbGUgPSAnZmlsZScsXHJcblxyXG4gIC8vIFxyXG4gIERhdGEgPSAnZGF0YScsXHJcblxyXG4gIC8vIFxyXG4gIFdvcmtzaGVldCA9ICd3b3Jrc2hlZXQnLFxyXG5cclxuICAvLyBcclxuICBEYXNoYm9hcmQgPSAnZGFzaGJvYXJkJyxcclxuXHJcbiAgLy8gXHJcbiAgQW5hbHlzaXMgPSAnYW5hbHlzaXMnLFxyXG5cclxuICAvLyBcclxuICBGb3JtYXQgPSAnZm9ybWF0JyxcclxuXHJcbiAgLy8gXHJcbiAgTWFwID0gJ21hcCcsXHJcblxyXG4gIC8vIFxyXG4gIEhlbHAgPSAnaGVscCdcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gZm9yIGRpZmZlcmVudCB0eXBlcyBvZiBBZGRJbnMgKFByb2plY3QgRnJlbGFyZClcclxuZXhwb3J0IGVudW0gQWRkSW5UeXBlIHtcclxuXHJcbiAgLy8gXHJcbiAgSW52YWxpZCA9ICdpbnZhbGlkJyxcclxuXHJcbiAgLy8gXHJcbiAgRGFzaGJvYXJkID0gJ2Rhc2hib2FyZCdcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gb2YgZGlmZmVyZW50IGNvbnRleHRzIGFuIGFkZC1pbiBjYW4gcnVuIGluXHJcbmV4cG9ydCBlbnVtIEFkZEluQ29udGV4dCB7XHJcblxyXG4gIC8vIFxyXG4gIFVua25vd24gPSAndW5rbm93bicsXHJcblxyXG4gIC8vIFxyXG4gIERlc2t0b3AgPSAnZGVza3RvcCcsXHJcblxyXG4gIC8vIFxyXG4gIFNlcnZlciA9ICdzZXJ2ZXInXHJcbn1cclxuXHJcbi8vIEVudW1lcmF0aW9uIG9mIGRpZmZlcmVudCBtb2RlcyBhbiBhZGQtaW4gY2FuIHJ1biBpblxyXG5leHBvcnQgZW51bSBBZGRJbk1vZGUge1xyXG5cclxuICAvLyBcclxuICBVbmtub3duID0gJ3Vua25vd24nLFxyXG5cclxuICAvLyBcclxuICBBdXRob3JpbmcgPSAnYXV0aG9yaW5nJyxcclxuXHJcbiAgLy8gXHJcbiAgVmlld2luZyA9ICd2aWV3aW5nJ1xyXG59XHJcblxyXG4vLyBNYXJrZXJzIGZvciBhcnJheS1vZi1mbG9hdCBlbmNvZGluZyBvZiBnZW9tZXRyeVxyXG5leHBvcnQgZW51bSBMaW5lYXJGbG9hdEdlb21ldHJ5TWFya2VyIHtcclxuXHJcbiAgLy8gXHJcbiAgTEZHX0ludmFsaWQgPSAnaW52YWxpZCcsXHJcblxyXG4gIC8vIFxyXG4gIExGR19NdWx0aVBvbHlnb24gPSAnbXVsdGlQb2x5Z29uJyxcclxuXHJcbiAgLy8gXHJcbiAgTEZHX011bHRpTGluZSA9ICdtdWx0aUxpbmUnLFxyXG5cclxuICAvLyBcclxuICBMRkdfTXVsdGlQb2ludCA9ICdtdWx0aVBvaW50JyxcclxuXHJcbiAgLy8gXHJcbiAgTEZHX1N0YXJ0T2JqZWN0ID0gJ3N0YXJ0T2JqZWN0JyxcclxuXHJcbiAgLy8gXHJcbiAgTEZHX1N0YXJ0UG9seWdvbiA9ICdzdGFydFBvbHlnb24nLFxyXG5cclxuICAvLyBcclxuICBMRkdfU3RhcnRMaW5lID0gJ3N0YXJ0TGluZScsXHJcblxyXG4gIC8vIFxyXG4gIExGR19FbmRHZW9tZXRyeSA9ICdlbmRHZW9tZXRyeSdcclxufVxyXG5cclxuLy8gVmFsdWVzIGZvciB0eXBlIG9mIHVzZXIgaW5pdGlhdGVkIG5hdmlnYXRpb24uIFVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBuZWVkIHRvIGNsb25lIGEgbmV3IHNlc3Npb24gb24gcmVxdWVzdCBmb3IgYm9vdHN0cmFwXHJcbmV4cG9ydCBlbnVtIE5hdmlnYXRpb25UeXBlIHtcclxuXHJcbiAgLy8gTmF2aWdhdGlvbiBzdGFydGVkIGJ5IGNsaWNraW5nIGEgbGluaywgZW50ZXJpbmcgVVJMIGluIGFkZHJlc3MgYmFyLCBmb3JtIHN1Ym1pc3Npb24sIHNjcmlwdCBvcGVyYXRpb25zIG90aGVyIHRoYW4gUmVsb2FkL0JhY2tGb3J3YXJkIGxpc3RlZCBiZWxvd1xyXG4gIE5hdmlnYXRlID0gJ05hdicsXHJcblxyXG4gIC8vIE5hdmlnYXRpb24gZHVlIHRvIHJlbG9hZCBvcGVyYXRpb24gZnJvbSBVSSBvciBsb2NhdGlvbi5yZWxvYWQgZnJvbSBzY3JpcHRcclxuICBSZWxvYWQgPSAnUmVsb2FkJyxcclxuXHJcbiAgLy8gTmF2aWdhdGlvbiBkdWUgdG8gaGlzdG9yeSB0cmF2ZXJzYWwgb3BlcmF0aW9uIGJ5IHVzZXIgb3Igc2NyaXB0XHJcbiAgQmFja0ZvcndhcmQgPSAnQmFja0Z3ZCcsXHJcblxyXG4gIC8vIFJlc2VydmVkIHZhbHVlIGluZGljYXRpbmcgbmF2aWdhdGlvbiB0eXBlcyBub3QgZGVmaW5lZCBieSB2YWx1ZXMgYWJvdmVcclxuICBSZXNlcnZlZCA9ICdSZXNlcnZlZCdcclxufVxyXG5cclxuLy8gU291cmNlIG9mIHRoZSBOYXZpZ2F0aW9uIHR5cGUgLSBpbXBvcnRhbnQgZm9yIHRlbGVtZXRyeVxyXG5leHBvcnQgZW51bSBOYXZpZ2F0aW9uU291cmNlIHtcclxuXHJcbiAgLy8gTmF2aWdhdGlvbiB0eXBlIHdhcyBwcm92aWRlZCBpbiB2aXogY3JlYXRlIG9wdGlvbnMuXHJcbiAgQ3JlYXRlT3B0aW9ucyA9ICdPcHQnLFxyXG5cclxuICAvLyBOYXZpZ2F0aW9uIHR5cGUgd2FzIG9taXR0ZWQgaW4gdml6IGNyZWF0ZSBvcHRpb25zIGFuZCBjYXB0dXJlZCB3aGlsZSBwYXJzaW5nIHZpeiBwYXJhbWV0ZXJzLiBXZWJwYWdlIHJlbG9hZCBieSB1c2VyIG1heSBiZSBjb21pbmcgYXMgbmF2aWdhdGUgZHVlIHRvIHNjcmlwdCBuYXZpZ2F0aW9uLlxyXG4gIFBhcmFtZXRlclBhcnNlID0gJ1BhcnNlJyxcclxuXHJcbiAgLy8gTmF2aWdhdGlvbiB0eXBlIHdhcyBjYXB0dXJlZCBhdCBib290c3RyYXAgdGltZSB3aGlsZSBlbWJlZGRlZC4gU2hvdWxkIG5vdCBoYXBwZW4gd2hlbiB2aXogaXMgZW1iZWRkZWQgdmlhIHZpenBvcnRhbCBvciB1c2luZyBKUyBBUEksIGJ1dCB0aGUgd2ViIGNhbiBiZSB1bnByZWRpY3RhYmxlIVxyXG4gIEJvb3RzdHJhcCA9ICdCb290JyxcclxuXHJcbiAgLy8gTmF2aWdhdGlvbiB0eXBlIHdhcyBkZXRlcm1pbmVkIGZyb20gdml6IGl0c2VsZiBhcyB0aGUgdG9wIGxldmVsIHdlYiBwYWdlLlxyXG4gIFRvcExldmVsVml6ID0gJ1RvcCdcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gb2YgdGhlIGRpZmZlcmVudCBzb3J0IGluZGljYXRvciBpY29ucyB0aGF0IGNhbiBhcHBlYXJcclxuZXhwb3J0IGVudW0gU29ydEluZGljYXRvclR5cGUge1xyXG5cclxuICAvLyBhbHBoYWJldGljIHNvcnRcclxuICBBbHBoYWJldGljID0gJ2FscGhhYmV0aWMnLFxyXG5cclxuICAvLyBzb3J0IHRoYXQgdXNlcyB0aGUgZ2VuZXJpYyBzb3J0IGljb24sIHN1Y2ggYXMgYSBjb21wdXRlZCBvciBtYW51YWwgc29ydFxyXG4gIEdlbmVyaWMgPSAnZ2VuZXJpYycsXHJcblxyXG4gIC8vIG5lc3RlZCBjb21wdXRlZCBzb3J0XHJcbiAgTmVzdGVkID0gJ25lc3RlZCdcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gZm9yIGRhdGEgYWxlcnQgdHlwZXMuXHJcbmV4cG9ydCBlbnVtIERhdGFBbGVydFR5cGUge1xyXG5cclxuICAvLyBcclxuICBEYXRhUHJlc2VudCA9ICdkYXRhLXByZXNlbnQnLFxyXG5cclxuICAvLyBcclxuICBDb25zdENvbXBhcmlzb24gPSAnY29uc3QtY29tcGFyaXNvbidcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gZm9yIHZhbGlkIG9wZXJhdGlvbnMgaW4gZGF0YSBhbGVydCBjb25kaXRpb25zXHJcbmV4cG9ydCBlbnVtIERhdGFBbGVydENvbmRpdGlvbk9wZXJhdGlvblR5cGUge1xyXG5cclxuICAvLyBcclxuICBHcmVhdGVyVGhhbiA9ICdncmVhdGVyLXRoYW4nLFxyXG5cclxuICAvLyBcclxuICBHcmVhdGVyVGhhbkVxdWFsID0gJ2dyZWF0ZXItdGhhbi1lcXVhbCcsXHJcblxyXG4gIC8vIFxyXG4gIEVxdWFscyA9ICdlcXVhbHMnLFxyXG5cclxuICAvLyBcclxuICBMZXNzVGhhbiA9ICdsZXNzLXRoYW4nLFxyXG5cclxuICAvLyBcclxuICBMZXNzVGhhbkVxdWFsID0gJ2xlc3MtdGhhbi1lcXVhbCdcclxufVxyXG5cclxuLy8gRW51bWVyYXRpb24gZm9yIG1vZGVzIHRoZSBkYXRhIGFsZXJ0IGRpYWxvZyBjb3VsZCBiZSBpblxyXG5leHBvcnQgZW51bSBEYXRhQWxlcnREaWFsb2dNb2RlIHtcclxuXHJcbiAgLy8gXHJcbiAgQ3JlYXRlID0gJ2NyZWF0ZScsXHJcblxyXG4gIC8vIFxyXG4gIEVkaXQgPSAnZWRpdCdcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1jb3JlL2dlbi1zcmMvcHJlc2xheWVyL0VudW1zLnRzXG4gKiovIiwiaW1wb3J0IHsgTW9kZWwsIFBhcmFtZXRlcklkIGFzIEFwaSwgU2hlZXRQYXRoLCBWZXJzaW9uTnVtYmVyIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IFBhcmFtZXRlcklkIGFzIFBMIH0gZnJvbSAnLi4vLi4vZ2VuLXNyYy9wcmVzbGF5ZXIvUGFyYW1zJztcclxuaW1wb3J0IHsgUHJlc2VudGF0aW9uTW9kZWwgfSBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9QcmVzTW9kZWxzJztcclxuaW1wb3J0IHsgQWN0aXZlTWFya3NEYXRhQ29udmVydGVyIH0gZnJvbSAnLi9BY3RpdmVNYXJrc0RhdGFDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBBcGlUb1ByZXNMYXllckNvbnZlcnRlciB9IGZyb20gJy4vQXBpVG9QcmVzTGF5ZXJDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBGaWx0ZXJzQ29udmVydGVyIH0gZnJvbSAnLi9GaWx0ZXJzQ29udmVydGVyJztcclxuaW1wb3J0IHsgTWFwcGluZ1JlZ2lzdHJ5IH0gZnJvbSAnLi9NYXBwaW5nUmVnaXN0cnknO1xyXG5pbXBvcnQgeyBQYXJhbWV0ZXJzRGF0YUNvbnZlcnRlciB9IGZyb20gJy4vUGFyYW1ldGVyc0RhdGFDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlciB9IGZyb20gJy4vUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBVbmRlcmx5aW5nRGF0YUNvbnZlcnRlciB9IGZyb20gJy4vVW5kZXJseWluZ0RhdGFDb252ZXJ0ZXInO1xyXG5cclxuLyp0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cclxuY29uc3QgaWQgPSBmdW5jdGlvbihpblBhcmFtOiBhbnkpOiBhbnkgeyByZXR1cm4gaW5QYXJhbTsgfVxyXG5cclxuLyoqXHJcbiAqIEZhY3RvcnkgY2xhc3MgZm9yIGNyZWF0aW5nIHBhcmFtZXRlcnMgbWFwcGluZ3MgYmFzZWQgb24gdGhlIFZlcnNpb25OdW1iZXIgb2YgdGhlIEFwaVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBQYXJhbWV0ZXJNYXBwaW5nUmVnaXN0cnlGYWN0b3J5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVyTWFwcGluZ1JlZ2lzdHJ5RmFjdG9yeSB7XHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVQcmVzTGF5ZXJUb0FwaVBhcmFtUmVnaXN0cnkodmVyc2lvbk51bWJlcjogVmVyc2lvbk51bWJlcik6IFByZXNMYXllclRvQXBpTWFwcGluZ1JlZ2lzdHJ5IHtcclxuICAgIGxldCByZXN1bHQgPSBuZXcgUHJlc0xheWVyVG9BcGlNYXBwaW5nUmVnaXN0cnkoKTtcclxuXHJcbiAgICAvLyBUT0RPIC0gY2hlY2sgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBjb25zdHJ1Y3QgYXBwcm9wcmlhdGUgY29udmVyc2lvbnNcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5BZGRJbkxvY2F0b3IsXHJcbiAgICAgIEFwaS5FeHRlbnNpb25Mb2NhdG9yLFxyXG4gICAgICBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0RXh0ZW5zaW9uTG9jYXRvcik7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuQWRkSW5Cb290c3RyYXBJbmZvLFxyXG4gICAgICBBcGkuRXh0ZW5zaW9uQm9vdHN0cmFwSW5mbyxcclxuICAgICAgUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuY29udmVydEV4dGVuc2lvbkJvb3RzdHJhcEluZm9cclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuVW5kZXJseWluZ0RhdGFUYWJsZSxcclxuICAgICAgQXBpLlVuZGVybHlpbmdEYXRhVGFibGUsXHJcbiAgICAgIFVuZGVybHlpbmdEYXRhQ29udmVydGVyLmJ1aWxkVW5kZXJseWluZ0RhdGFUYWJsZS5iaW5kKHVuZGVmaW5lZCwgZmFsc2UpXHJcbiAgICApO1xyXG5cclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLlVuZGVybHlpbmdEYXRhVGFibGUsXHJcbiAgICAgIEFwaS5VbmRlcmx5aW5nU3VtbWFyeURhdGFUYWJsZSxcclxuICAgICAgVW5kZXJseWluZ0RhdGFDb252ZXJ0ZXIuYnVpbGRVbmRlcmx5aW5nRGF0YVRhYmxlLmJpbmQodW5kZWZpbmVkLCB0cnVlKVxyXG4gICAgKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5VbmRlcmx5aW5nRGF0YVRhYmxlLFxyXG4gICAgICBBcGkuRGF0YVNvdXJjZURhdGFUYWJsZSxcclxuICAgICAgVW5kZXJseWluZ0RhdGFDb252ZXJ0ZXIuYnVpbGRVbmRlcmx5aW5nRGF0YVRhYmxlLmJpbmQodW5kZWZpbmVkLCB0cnVlKVxyXG4gICAgKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5GaWVsZENhcHRpb24sXHJcbiAgICAgIEFwaS5GaWVsZE5hbWUsXHJcbiAgICAgIGlkXHJcbiAgICApO1xyXG5cclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLlNlbGVjdGlvbkRhdGEsXHJcbiAgICAgIEFwaS5TZWxlY3RlZERhdGEsXHJcbiAgICAgIEFjdGl2ZU1hcmtzRGF0YUNvbnZlcnRlci5idWlsZFNlbGVjdGVkRGF0YVRhYmxlXHJcbiAgICApO1xyXG5cclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLkhpZ2hsaWdodGVkRGF0YSxcclxuICAgICAgQXBpLkhpZ2hsaWdodGVkRGF0YSxcclxuICAgICAgQWN0aXZlTWFya3NEYXRhQ29udmVydGVyLmJ1aWxkSGlnaGxpZ2h0ZWREYXRhVGFibGVcclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuQWRkSW5TZXR0aW5nc0luZm8sXHJcbiAgICAgIEFwaS5FeHRlbnNpb25TZXR0aW5nc0luZm8sXHJcbiAgICAgIFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnRFeHRlbnNpb25TZXR0aW5nc0luZm9cclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuV29ya3NoZWV0LFxyXG4gICAgICBBcGkuV29ya3NoZWV0TmFtZSxcclxuICAgICAgaWRcclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuUGFyYW1ldGVyQ3RybHMsXHJcbiAgICAgIEFwaS5QYXJhbWV0ZXJJbmZvcyxcclxuICAgICAgUGFyYW1ldGVyc0RhdGFDb252ZXJ0ZXIuY29udmVydFBhcmFtZXRlckxpc3RcclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuUGFyYW1ldGVyQ3RybCxcclxuICAgICAgQXBpLlBhcmFtZXRlckluZm8sXHJcbiAgICAgIFBhcmFtZXRlcnNEYXRhQ29udmVydGVyLmNvbnZlcnRQYXJhbWV0ZXJcclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuRGF0YVNjaGVtYSxcclxuICAgICAgQXBpLkRhdGFTY2hlbWEsXHJcbiAgICAgIFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnREYXRhU2NoZW1hXHJcbiAgICApO1xyXG5cclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oXHJcbiAgICAgIFBMLkZpbHRlcnNJbmZvLFxyXG4gICAgICBBcGkuV29ya3NoZWV0RmlsdGVycyxcclxuICAgICAgRmlsdGVyc0NvbnZlcnRlci5jb252ZXJ0RmlsdGVyc1ByZXNNb2RlbFxyXG4gICAgKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5DYXRlZ29yaWNhbERvbWFpbixcclxuICAgICAgQXBpLkNhdGVnb3JpY2FsRG9tYWluLFxyXG4gICAgICBGaWx0ZXJzQ29udmVydGVyLmNvbnZlcnRDYXRlZ29yaWNhbERvbWFpblxyXG4gICAgKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5RdWFudGl0YXRpdmVEb21haW4sXHJcbiAgICAgIEFwaS5RdWFudGl0YXRpdmVEb21haW4sXHJcbiAgICAgIEZpbHRlcnNDb252ZXJ0ZXIuY29udmVydFF1YW50aXRhdGl2ZURvbWFpblxyXG4gICAgKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKFxyXG4gICAgICBQTC5Kb2luRGVzY3JpcHRpb24sXHJcbiAgICAgIEFwaS5Kb2luRGVzY3JpcHRpb24sXHJcbiAgICAgIFByZXNMYXllclRvQXBpQ29udmVydGVyLmNvbnZlcnRKb2luRGVzY3JpcHRpb25cclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuQ29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyaWVzLFxyXG4gICAgICBBcGkuQ29ubmVjdGlvbkRlc2NyaXB0aW9uU3VtbWFyaWVzLFxyXG4gICAgICBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0Q29ubmVjdGlvbkRlc2NycHRpb25TdW1tYXJpZXNcclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihcclxuICAgICAgUEwuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCxcclxuICAgICAgQXBpLkV4dGVuc2lvbkRpYWxvZ1BheWxvYWQsXHJcbiAgICAgIGlkXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUFwaVRvUHJlc0xheWVyUGFyYW1SZWdpc3RyeSh2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uTnVtYmVyKTogQXBpVG9QcmVzTGF5ZXJNYXBwaW5nUmVnaXN0cnkge1xyXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBBcGlUb1ByZXNMYXllck1hcHBpbmdSZWdpc3RyeSgpO1xyXG5cclxuICAgIC8vIFRPRE8gLSBjaGVjayB0aGUgdmVyc2lvbiBudW1iZXIgYW5kIGNvbnN0cnVjdCBhcHByb3ByaWF0ZSBjb252ZXJzaW9uc1xyXG5cclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLkV4dGVuc2lvbkxvY2F0b3IsIFBMLkFkZEluTG9jYXRvciwgQXBpVG9QcmVzTGF5ZXJDb252ZXJ0ZXIuY29udmVydEV4dGVuc2lvbkxvY2F0b3IpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuU2V0dGluZ3NWYWx1ZXMsIFBMLkFkZEluU2V0dGluZ3MsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLklnbm9yZUFsaWFzZXMsIFBMLklnbm9yZUFsaWFzZXMsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLklnbm9yZVNlbGVjdGlvbiwgUEwuSWdub3JlU2VsZWN0aW9uLCBpZCk7XHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5JbmNsdWRlQWxsQ29sdW1ucywgUEwuSW5jbHVkZUFsbENvbHVtbnMsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLk1heFJvd3MsIFBMLk1heFJvd3MsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLlZpc3VhbElkLCBQTC5WaXN1YWxJRFBNLCBBcGlUb1ByZXNMYXllckNvbnZlcnRlci5jb252ZXJ0VmlzdWFsSWQpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuQ29sdW1uc1RvSW5jbHVkZSwgUEwuRmllbGREaXNwbGF5TmFtZXMsIGlkKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5GaWVsZE5hbWUsIFBMLlF1YWxpZmllZEZpZWxkQ2FwdGlvbiwgaWQpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuRmlsdGVyVmFsdWVzLCBQTC5GaWx0ZXJBbGlhc2VzLCBBcGlUb1ByZXNMYXllckNvbnZlcnRlci5jb252ZXJ0RmlsdGVyVmFsdWVzKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLkZpbHRlclVwZGF0ZVR5cGUsIFBMLkZpbHRlclVwZGF0ZVR5cGUsIEFwaVRvUHJlc0xheWVyQ29udmVydGVyLmNvbnZlcnRGaWx0ZXJUeXBlKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLklzRXhjbHVkZU1vZGUsIFBMLkV4Y2x1ZGUsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLkZpbHRlclJhbmdlTWluLCBQTC5SYW5nZU1pbiwgaWQpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuRmlsdGVyUmFuZ2VNYXgsIFBMLlJhbmdlTWF4LCBpZCk7XHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5GaWx0ZXJSYW5nZU51bGxPcHRpb24sIFBMLkluY2x1ZGVkLCBBcGlUb1ByZXNMYXllckNvbnZlcnRlci5Db252ZXJ0TnVsbE9wdGlvbik7XHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5GaWVsZElkLCBQTC5GaWVsZE5hbWUsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLkRvbWFpblR5cGUsIFBMLkZpbHRlckRvbWFpblR5cGUsIEFwaVRvUHJlc0xheWVyQ29udmVydGVyLkNvbnZlcnRGaWx0ZXJEb21haW5UeXBlKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5WaXN1YWxJZCwgUEwuV29ya3NoZWV0LCBBcGlUb1ByZXNMYXllckNvbnZlcnRlci5jb252ZXJ0VmlzdWFsSWRUb1dvcmtzaGVldCk7XHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5WaXN1YWxJZCwgUEwuRGFzaGJvYXJkLCBBcGlUb1ByZXNMYXllckNvbnZlcnRlci5jb252ZXJ0VmlzdWFsSWRUb0Rhc2hib2FyZCk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuUGFyYW1ldGVyQ2FwdGlvbiwgUEwuRmllbGRDYXB0aW9uLCBpZCk7XHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5QYXJhbWV0ZXJGaWVsZE5hbWUsIFBMLkZpZWxkTmFtZVN0cmluZywgaWQpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuUGFyYW1ldGVyRmllbGROYW1lLCBQTC5HbG9iYWxGaWVsZE5hbWUsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLlBhcmFtZXRlclZhbHVlLCBQTC5WYWx1ZVN0ciwgaWQpO1xyXG5cclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oXHJcbiAgICAgIEFwaS5TaGVldFBhdGgsXHJcbiAgICAgIFBMLlNoZWV0UGF0aFBNLFxyXG4gICAgICBwbSA9PiBBcGlUb1ByZXNMYXllckNvbnZlcnRlci5jb252ZXJ0U2hlZXRQYXRoKHBtIGFzIFNoZWV0UGF0aClcclxuICAgICk7XHJcblxyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuU2VsZWN0aW9uLCBQTC5TZWxlY3Rpb24sIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLlNlbGVjdGlvblVwZGF0ZVR5cGUsIFBMLlNlbGVjdGlvblVwZGF0ZVR5cGUsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLkhpZXJWYWxTZWxlY3Rpb25Nb2RlbHMsIFBMLkhpZXJWYWxTZWxlY3Rpb25Nb2RlbHMsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLlF1YW50UmFuZ2VTZWxlY3Rpb25Nb2RlbHMsIFBMLlF1YW50UmFuZ2VTZWxlY3Rpb25Nb2RlbHMsIGlkKTtcclxuICAgIHJlc3VsdC5hZGRSZWdpc3RyYXRpb24oQXBpLkRpbVZhbFNlbGVjdGlvbk1vZGVscywgUEwuRGltVmFsU2VsZWN0aW9uTW9kZWxzLCBpZCk7XHJcblxyXG4gICAgLy8gVGhlIHBhcmFtIFBMLkRhdGFzb3VyY2UgaXMgdGhlIElEIHN0cmluZyBmb3IgYSBzcGVjaWZpYyBkYXRhc291cmNlLCBub3QgdG8gYmUgY29uZnVzZWRcclxuICAgIC8vIHdpdGggdGhlIHBhcmFtIFBMLkRhdGFTb3VyY2UsIHdoaWNoIGlzIHRoZSBmdWxsIHByZXMgbW9kZWwgZm9yIGEgZGF0YSBzb3VyY2UuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5EYXRhU291cmNlSWQsIFBMLkRhdGFzb3VyY2UsIGlkKTtcclxuXHJcbiAgICByZXN1bHQuYWRkUmVnaXN0cmF0aW9uKEFwaS5FeHRlbnNpb25EaWFsb2dVcmwsIFBMLkV4dGVuc2lvbkRpYWxvZ1VybCwgaWQpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCwgUEwuRXh0ZW5zaW9uRGlhbG9nUGF5bG9hZCwgaWQpO1xyXG4gICAgcmVzdWx0LmFkZFJlZ2lzdHJhdGlvbihBcGkuSXNFeHRlbnNpb25EaWFsb2csIFBMLklzRXh0ZW5zaW9uRGlhbG9nLCBpZCk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBcGlUb1ByZXNMYXllck1hcHBpbmdSZWdpc3RyeVxyXG4gIGV4dGVuZHMgTWFwcGluZ1JlZ2lzdHJ5PEFwaSwgUEwsIChhcGlNb2RlbDogTW9kZWwpID0+IFByZXNlbnRhdGlvbk1vZGVsPiB7fVxyXG5cclxuZXhwb3J0IGNsYXNzIFByZXNMYXllclRvQXBpTWFwcGluZ1JlZ2lzdHJ5XHJcbiAgZXh0ZW5kcyBNYXBwaW5nUmVnaXN0cnk8UEwsIEFwaSwgKHByZXNMYXllclBtOiBQcmVzZW50YXRpb25Nb2RlbCkgPT4gTW9kZWw+IHt9XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL1BhcmFtZXRlck1hcHBpbmdSZWdpc3RyeUZhY3RvcnkudHNcbiAqKi8iLCJpbXBvcnQge1xyXG4gIERhdGFIZWFkZXIsXHJcbiAgRGF0YVRhYmxlLFxyXG4gIERhdGFWYWx1ZSxcclxuICBIaWdobGlnaHRlZE1hcmtzVGFibGUsXHJcbiAgTWFya0luZm8sXHJcbiAgTWFya1R5cGUsXHJcbiAgU2VsZWN0ZWRNYXJrc1RhYmxlXHJcbn0gZnJvbSAnQHRhYmxlYXUvYXBpLWludGVybmFsLWNvbnRyYWN0JztcclxuaW1wb3J0IHsgVGFibGVhdUV4Y2VwdGlvbiB9IGZyb20gJ0B0YWJsZWF1L2FwaS11dGlscyc7XHJcblxyXG5pbXBvcnQge1xyXG4gIERhdGFEaWN0aW9uYXJ5UHJlc01vZGVsLFxyXG4gIEhpZ2hsaWdodGVkRGF0YVByZXNNb2RlbCxcclxuICBTZWxlY3Rpb25EYXRhUHJlc01vZGVsLFxyXG4gIFZpekRhdGFQcmVzTW9kZWxcclxufSBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9QcmVzTW9kZWxzJztcclxuaW1wb3J0IHsgUHJlc0xheWVyVG9BcGlFbnVtTWFwcGluZ3MgYXMgRW51bU1hcHBpbmcgfSBmcm9tICcuL0VudW1NYXBwaW5ncyc7XHJcbmltcG9ydCB7IFVuZGVybHlpbmdEYXRhQ29udmVydGVyIH0gZnJvbSAnLi9VbmRlcmx5aW5nRGF0YUNvbnZlcnRlcic7XHJcblxyXG4vKipcclxuICogQ29udGFpbnMgbG9naWMgZm9yIGNvbnZlcnRpbmcgdGhlIGFjdGl2ZSBtYXJrcyBvbiBhIHZpeiBpbnRvIHRoZSBBUEkgcHJlcyBtb2RlbHMuXHJcbiAqIEluIHRoZSBvcmlnaW5hbCBwcm9qZWN0LCBtb3N0IG9mIHRoaXMgd2FzIGluIHRoZSBQcm9jZXNzQWN0aXZlTWFya3MgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBY3RpdmVNYXJrc0RhdGFDb252ZXJ0ZXIge1xyXG4gIHByaXZhdGUgc3RhdGljIE1BTEZPUk1FRF9EQVRBOiBzdHJpbmcgPSAnTWFsZm9ybWVkIGRhdGEgdGFibGUnO1xyXG4gIHB1YmxpYyBzdGF0aWMgYnVpbGRTZWxlY3RlZERhdGFUYWJsZShzZWxlY3RlZERhdGE6IFNlbGVjdGlvbkRhdGFQcmVzTW9kZWwpOiBTZWxlY3RlZE1hcmtzVGFibGUge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGF0YTogQWN0aXZlTWFya3NEYXRhQ29udmVydGVyLmJ1aWxkQWN0aXZlTWFya3NMaXN0KHNlbGVjdGVkRGF0YS5kYXRhRGljdGlvbmFyeSwgc2VsZWN0ZWREYXRhLnZpekRhdGEpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBidWlsZEhpZ2hsaWdodGVkRGF0YVRhYmxlKGhpZ2hsaWdodGVkRGF0YTogSGlnaGxpZ2h0ZWREYXRhUHJlc01vZGVsKTogSGlnaGxpZ2h0ZWRNYXJrc1RhYmxlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhdGE6IEFjdGl2ZU1hcmtzRGF0YUNvbnZlcnRlci5idWlsZEFjdGl2ZU1hcmtzTGlzdChoaWdobGlnaHRlZERhdGEuZGF0YURpY3Rpb25hcnksIGhpZ2hsaWdodGVkRGF0YS52aXpEYXRhKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGJ1aWxkQWN0aXZlTWFya3NMaXN0KGRhdGFEaWN0aW9uYXJ5OiBEYXRhRGljdGlvbmFyeVByZXNNb2RlbCwgdml6RGF0YTogVml6RGF0YVByZXNNb2RlbCk6IEFycmF5PERhdGFUYWJsZT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PERhdGFUYWJsZT4oKTtcclxuXHJcbiAgICAvLyBUaGUgZGF0YSBtb2RlbCBmb3IgdGhlIFZpekRhdGFQcmVzTW9kZWwgaXMgYSBsaXR0bGUgc3RyYW5nZSwgc28gdGhpcyBwYXJzaW5nIHRha2VzIHNvbWUgdGltZSB0byBmaWd1cmUgb3V0LlxyXG4gICAgLy8gVGhlcmUgY2FuIGJlIG11bHRpcGxlIHBhbmVzIG9mIGRhdGEsIHNvIHdlIG11c3QgZ28gdGhyb3VnaCB0aGVtIG9uZSBhdCBhIHRpbWUgdG8gY3JlYXRlIGRhdGEgdGFibGVzXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpekRhdGEucGFuZUNvbHVtbnNEYXRhLnBhbmVDb2x1bW5zTGlzdC5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgLy8gTmVlZCB0byBmaWx0ZXIgdG8gZmluZCBhbGwgdGhlIGNvbHVtbnMgd2hpY2ggYXJlIGluIHRoaXMgcGFuZVxyXG4gICAgICBjb25zdCBjb2x1bW5zID0gdml6RGF0YS5wYW5lQ29sdW1uc0RhdGEudml6RGF0YUNvbHVtbnMuZmlsdGVyKHZpekRhdGFDb2x1bW4gPT4ge1xyXG4gICAgICAgIC8vIFdlIGtub3cgdGhpcyBjb2x1bW4gbWF0dGVycyBmb3IgdGhlIGN1cnJlbnQgcGFuZSBpZiB0aGlzIHBhbmUncyBpbmRleCBpcyBpbiBwYW5lSW5kaWNlc1xyXG4gICAgICAgIHJldHVybiB2aXpEYXRhQ29sdW1uLnBhbmVJbmRpY2VzLmluZGV4T2YoaSkgPiAtMTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgYSBtYXBwaW5nIG9mIHdoaWNoIGluZGV4IGluIHRoZSBkYXRhIGRpY3Rpb25hcnkgb3VyIGNvbHVtbnMgYXJlIGluXHJcbiAgICAgIGNvbnN0IGNvbHVtbkluZGljZXMgPSBjb2x1bW5zLm1hcCh2aXpEYXRhQ29sdW1uID0+IHtcclxuXHJcbiAgICAgICAgLy8gVGhlIGNvbHVtbkluZGV4IGlzIGluIHRoZSBzYW1lIHBvc2l0aW9uIGFzIHRoZSBwYW5lSW5kZXhcclxuICAgICAgICBjb25zdCBwYW5lSW5kZXggPSB2aXpEYXRhQ29sdW1uLnBhbmVJbmRpY2VzLmluZGV4T2YoaSk7XHJcbiAgICAgICAgY29uc3QgY29sdW1uSW5kZXggPSB2aXpEYXRhQ29sdW1uLmNvbHVtbkluZGljZXNbcGFuZUluZGV4XTtcclxuICAgICAgICByZXR1cm4gY29sdW1uSW5kZXg7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gR2V0IHRoZSBkYXRhIGZvciB0aGUgcGFuZSB3ZSBhcmUgcHJvY2Vzc2luZ1xyXG4gICAgICBjb25zdCB2aXpQYW5lID0gdml6RGF0YS5wYW5lQ29sdW1uc0RhdGEucGFuZUNvbHVtbnNMaXN0W2ldO1xyXG5cclxuICAgICAgaWYgKHZpelBhbmUudml6UGFuZUNvbHVtbnMubGVuZ3RoICE9PSBjb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uZXJyb3IoQWN0aXZlTWFya3NEYXRhQ29udmVydGVyLk1BTEZPUk1FRF9EQVRBKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBBcnJheTxEYXRhSGVhZGVyPigpO1xyXG4gICAgICBjb25zdCByb3dzID0gbmV3IEFycmF5PEFycmF5PERhdGFWYWx1ZT4+KCk7XHJcblxyXG4gICAgICAvLyBDb2x1bW4gMCB3aWxsIGJlIHRoZSB0dXBsZSBpZCBjb2x1bW4uIFdlIGNhbiB1c2UgdGhpcyBhcyBhIGNvdW50ZXIgZm9yIGhvdyBtYW55IHJvd3Mgd2UgaGF2ZVxyXG4gICAgICBjb25zdCB0dXBsZUlkcyA9IHZpelBhbmUudml6UGFuZUNvbHVtbnNbMF0udHVwbGVJZHM7XHJcbiAgICAgIGNvbnN0IG1hcmtzID0gbmV3IEFycmF5PE1hcmtJbmZvPigpO1xyXG4gICAgICBmb3IgKGxldCB0dXBsZUluZGV4ID0gMDsgdHVwbGVJbmRleCA8IHR1cGxlSWRzLmxlbmd0aDsgdHVwbGVJbmRleCsrKSB7XHJcbiAgICAgICAgLy8gVE9ETyBOZWVkIHRvIHJldmFsdWF0ZSB0aGUgcGxhY2Ugb2YgdGhpcyBsb2dpYy4gSWYgaXQgdHVybnMgb3V0IHRoYXQgd2UgbmVlZCBhIHNlcGFyYXRlIGNvbW1hbmRcclxuICAgICAgICAvLyBjYWxsIHRvIGdldCB0aGUgbWFya3MgaW5mbywgdGhlbiB0aGlzIGxvZ2ljIHNob3VsZCBub3QgYmUgaGVyZSBidXQgaW5zdGVhZCBpbiBhIGxheWVyIGFib3ZlIHNvbWV3aGVyZVxyXG4gICAgICAgIGxldCBtYXJrOiBNYXJrSW5mbyA9IHtcclxuICAgICAgICAgIHR5cGU6IE1hcmtUeXBlLkJhciwgLy8gaGFyZGNvZGluZyB0aGlzIGZvciBub3dcclxuICAgICAgICAgIGNvbG9yOiAncmVkJywgLy8gaGFyZGNvZGluZyB0aGlzIGZvciBub3dcclxuICAgICAgICAgIHR1cGxlSWQ6IHR1cGxlSWRzW3R1cGxlSW5kZXhdLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbWFya3MucHVzaChtYXJrKTtcclxuICAgICAgICAvLyBXZSB3aWxsIGhhdmUgMSBsZXNzIHZhbHVlIGluIHRoaXMgcm93IHNpbmNlIHRoZXJlJ3MgdGhlIHR1cGxlSWQgY29sdW1uXHJcbiAgICAgICAgY29uc3QgY2VsbHMgPSBuZXcgQXJyYXk8RGF0YVZhbHVlPih2aXpQYW5lLnZpelBhbmVDb2x1bW5zLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gMS8qIHNraXAgdGhlIGZpcnN0IHdoaWNoIGlzIHR1cGxlIGlkcyAqLzsgaiA8IHZpelBhbmUudml6UGFuZUNvbHVtbnMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgIC8vIE5leHQsIHdlIG5lZWQgdG8gZmlndXJlIG91dCB3aGljaCBjb2x1bW4gd2UgYXJlIHJlYWRpbmcgZGF0YSBmb3JcclxuICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHVtbnNbY29sdW1uSW5kaWNlc1tqXV07XHJcbiAgICAgICAgICBjb25zdCB2aXpQYW5lQ29sdW1uRGF0YSA9IHZpelBhbmUudml6UGFuZUNvbHVtbnNbal07XHJcblxyXG4gICAgICAgICAgLy8gRGVmaW5lIHRoZSBoZWFkZXIgd2hlbiB3ZSBhcmUgcHJvY2Vzc2luZyB0aGUgZmlyc3Qgcm93XHJcbiAgICAgICAgICBpZiAodHVwbGVJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXI6IERhdGFIZWFkZXIgPSB7XHJcbiAgICAgICAgICAgICAgZGF0YVR5cGU6IEVudW1NYXBwaW5nLmRhdGFUeXBlLmNvbnZlcnQoY29sdW1uLmRhdGFUeXBlKSxcclxuICAgICAgICAgICAgICBmaWVsZE5hbWU6IGNvbHVtbi5mbixcclxuICAgICAgICAgICAgICBpc1JlZmVyZW5jZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgaW5kZXg6IGogLSAxLFxyXG4gICAgICAgICAgICAgIGZpZWxkQ2FwdGlvbjogY29sdW1uLmZpZWxkQ2FwdGlvblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaGVhZGVycy5wdXNoKGhlYWRlcik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBVbmRlcmx5aW5nRGF0YUNvbnZlcnRlci5sb29rdXBWYWx1ZUZyb21EaWN0aW9uYXJ5KFxyXG4gICAgICAgICAgICBkYXRhRGljdGlvbmFyeSwgY29sdW1uLmRhdGFUeXBlLCB2aXpQYW5lQ29sdW1uRGF0YS52YWx1ZUluZGljZXNbdHVwbGVJbmRleF0pO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGFsaWFzVmFsdWUgPSBVbmRlcmx5aW5nRGF0YUNvbnZlcnRlci5sb29rdXBWYWx1ZUZyb21EaWN0aW9uYXJ5KFxyXG4gICAgICAgICAgICBkYXRhRGljdGlvbmFyeSwgY29sdW1uLmRhdGFUeXBlLCB2aXpQYW5lQ29sdW1uRGF0YS5hbGlhc0luZGljZXNbdHVwbGVJbmRleF0pIHx8ICcnO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gYWxpYXNWYWx1ZTsgLy8gVE9ETyAtIEZpZ3VyZSBvdXQgaG93IHRvIHVzZSB0aGUgZm9ybWF0U3RyaW5nc1xyXG5cclxuICAgICAgICAgIGNvbnN0IGRhdGFDZWxsOiBEYXRhVmFsdWUgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWU6IGZvcm1hdHRlZFZhbHVlLFxyXG4gICAgICAgICAgICBhbGlhc2VkVmFsdWU6IGFsaWFzVmFsdWVcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgLy8gQWRkIG91ciBjZWxsIHRvIHRoaXMgcm93XHJcbiAgICAgICAgICBjZWxsc1tqIC0gMV0gPSBkYXRhQ2VsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJvd3MucHVzaChjZWxscyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRhdGFUYWJsZTogRGF0YVRhYmxlID0ge1xyXG4gICAgICAgIGRhdGFUYWJsZTogcm93cyxcclxuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgIG1hcmtzOiBtYXJrc1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmVzdWx0LnB1c2goZGF0YVRhYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9BY3RpdmVNYXJrc0RhdGFDb252ZXJ0ZXIudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBFbnVtcyBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9FbnVtcyc7XHJcbmltcG9ydCB7XHJcbiAgRGF0YURpY3Rpb25hcnlQcmVzTW9kZWwsXHJcbiAgVW5kZXJseWluZ0RhdGFUYWJsZUNvbHVtblByZXNNb2RlbCxcclxuICBVbmRlcmx5aW5nRGF0YVRhYmxlUHJlc01vZGVsLFxyXG4gIFZpekRhdGFQcmVzTW9kZWxcclxufSBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9QcmVzTW9kZWxzJztcclxuaW1wb3J0IHsgUHJlc0xheWVyVG9BcGlFbnVtTWFwcGluZ3MgYXMgRW51bU1hcHBpbmcgfSBmcm9tICcuL0VudW1NYXBwaW5ncyc7XHJcblxyXG5pbXBvcnQgeyBEYXRhSGVhZGVyLCBEYXRhVGFibGUsIERhdGFWYWx1ZSwgVW5kZXJseWluZ0RhdGFUYWJsZSB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG4vKipcclxuICogQ29udGFpbnMgc3RhdGljIGhlbHBlciBtZXRob2RzIGZvciBjb252ZXJ0aW5nIGZyb20gYW4gdW5kZXJseWluZyBkYXRhIHByZXMgbW9kZWwgaW50byB0aGUgYXBpIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBNb3N0IG9mIHRoZSBjb2RlIGlzIGEgZGlyZWN0IHBvcnQgZnJvbSBBcGlVbmRlcmx5aW5nRGF0YUhhbmRsZXIuY3NcclxuICogaHR0cHM6Ly9vcGVuZ3Jvay9zb3VyY2UveHJlZi90ZWFtc19uZWFyL3dvcmtncm91cC92cWx3ZWIvc2NyaXB0c2hhcnAvc3JjL1VJL0FwaS9BcGlVbmRlcmx5aW5nRGF0YUhhbmRsZXIuY3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVbmRlcmx5aW5nRGF0YUNvbnZlcnRlciB7XHJcbiAgcHVibGljIHN0YXRpYyBsb29rdXBWYWx1ZUZyb21EaWN0aW9uYXJ5KGRhdGFEaWN0aW9uYXJ5OiBEYXRhRGljdGlvbmFyeVByZXNNb2RlbCwgZHQ6IEVudW1zLkRhdGFUeXBlLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgIC8vIHBlciBjbCAyODAzOTYgLyBidWd6aWQgODExOTcgbmVnYXRpdmUgZGF0YSB2YWx1ZSBpbmRleCBtZWFucyB0aGF0IGl0IGlzIHNwZWNpYWxcclxuICAgICAgZHQgPSBFbnVtcy5EYXRhVHlwZS5EVF9TVFJJTkc7XHJcbiAgICAgIGluZGV4ID0gLWluZGV4IC0gMTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBjb25zdCByYXdWYWx1ZSA9IFVuZGVybHlpbmdEYXRhQ29udmVydGVyLmdldFJhd1ZhbHVlKGRhdGFEaWN0aW9uYXJ5LCBkdCwgaW5kZXgpO1xyXG4gICAgaWYgKHJhd1ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIHJlc3VsdCA9IHJhd1ZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFJhd1ZhbHVlKGRhdGFEaWN0aW9uYXJ5OiBEYXRhRGljdGlvbmFyeVByZXNNb2RlbCwgZHQ6IEVudW1zLkRhdGFUeXBlLCBpbmRleDogbnVtYmVyKTogYW55IHtcclxuICAgIGlmICghZGF0YURpY3Rpb25hcnkuZGF0YVNlZ21lbnRzKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGRhdGFEaWN0aW9uYXJ5LmRhdGFTZWdtZW50cykpIHtcclxuICAgICAgY29uc3QgZGF0YVNlZ21lbnQgPSBkYXRhRGljdGlvbmFyeS5kYXRhU2VnbWVudHNba2V5XTtcclxuICAgICAgZm9yIChjb25zdCBkYXRhQ29sdW1uIG9mIGRhdGFTZWdtZW50LmRhdGFDb2x1bW5zKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhQ29sdW1uIHx8IGRhdGFDb2x1bW4uZGF0YVR5cGUgIT09IGR0KSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA8IGRhdGFDb2x1bW4uZGF0YVZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgIHJldHVybiBkYXRhQ29sdW1uLmRhdGFWYWx1ZXNbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5kZXggLT0gZGF0YUNvbHVtbi5kYXRhVmFsdWVzLmxlbmd0aDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBidWlsZERhdGFUYWJsZShcclxuICAgIGRhdGFEaWN0aW9uYXJ5OiBEYXRhRGljdGlvbmFyeVByZXNNb2RlbCwgY29sdW1uczogQXJyYXk8VW5kZXJseWluZ0RhdGFUYWJsZUNvbHVtblByZXNNb2RlbD4pOiBEYXRhVGFibGUge1xyXG4gICAgY29uc3QgcmVzdWx0OiBEYXRhVGFibGUgPSB7XHJcbiAgICAgIGRhdGFUYWJsZTogVW5kZXJseWluZ0RhdGFDb252ZXJ0ZXIuYnVpbGRUYWJsZShkYXRhRGljdGlvbmFyeSwgY29sdW1ucyksXHJcbiAgICAgIGhlYWRlcnM6IGNvbHVtbnMubWFwKChjLCBpKSA9PiBVbmRlcmx5aW5nRGF0YUNvbnZlcnRlci5idWlsZENvbHVtbk1vZGVsKGMsIGkpKVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBidWlsZFVuZGVybHlpbmdEYXRhVGFibGUoaXNTdW1tYXJ5OiBib29sZWFuLCB1bmRlcmx5aW5nRGF0YVRhYmxlOiBVbmRlcmx5aW5nRGF0YVRhYmxlUHJlc01vZGVsKTogVW5kZXJseWluZ0RhdGFUYWJsZSB7XHJcbiAgICBjb25zdCByZXN1bHQ6IFVuZGVybHlpbmdEYXRhVGFibGUgPSB7XHJcbiAgICAgIGRhdGE6IFVuZGVybHlpbmdEYXRhQ29udmVydGVyLmJ1aWxkRGF0YVRhYmxlKHVuZGVybHlpbmdEYXRhVGFibGUuZGF0YURpY3Rpb25hcnksIHVuZGVybHlpbmdEYXRhVGFibGUudW5kZXJseWluZ0RhdGFUYWJsZUNvbHVtbnMpLFxyXG4gICAgICBpc1N1bW1hcnk6IGlzU3VtbWFyeVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBidWlsZEFjdGl2ZU1hcmtzVGFibGUoZGF0YURpY3Rpb25hcnk6IERhdGFEaWN0aW9uYXJ5UHJlc01vZGVsLCB2aXpEYXRhOiBWaXpEYXRhUHJlc01vZGVsKTogRGF0YVRhYmxlIHtcclxuICAgIHRocm93IFRhYmxlYXVFeGNlcHRpb24uYXBpTm90SW1wbGVtZW50ZWQoWydidWlsZEFjdGl2ZU1hcmtzVGFibGUnXSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBidWlsZENvbHVtbk1vZGVsKGNvbHVtbjogVW5kZXJseWluZ0RhdGFUYWJsZUNvbHVtblByZXNNb2RlbCwgaW5kZXg6IG51bWJlcik6IERhdGFIZWFkZXIge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGF0YVR5cGU6IEVudW1NYXBwaW5nLmRhdGFUeXBlLmNvbnZlcnQoY29sdW1uLmRhdGFUeXBlKSxcclxuICAgICAgZmllbGROYW1lOiBjb2x1bW4uZm4sXHJcbiAgICAgIGZpZWxkQ2FwdGlvbjogY29sdW1uLmZpZWxkQ2FwdGlvbixcclxuICAgICAgaXNSZWZlcmVuY2VkOiAhIWNvbHVtbi5pc1JlZmVyZW5jZWQsXHJcbiAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGJ1aWxkVGFibGUoXHJcbiAgICBkYXRhRGljdGlvbmFyeTogRGF0YURpY3Rpb25hcnlQcmVzTW9kZWwsIGNvbHVtbnM6IEFycmF5PFVuZGVybHlpbmdEYXRhVGFibGVDb2x1bW5QcmVzTW9kZWw+KTogQXJyYXk8QXJyYXk8RGF0YVZhbHVlPj4ge1xyXG5cclxuICAgIGlmIChjb2x1bW5zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gbmV3IEFycmF5PEFycmF5PERhdGFWYWx1ZT4+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgcm93Q291bnQgPSBjb2x1bW5zWzBdLmZvcm1hdFZhbElkeHMubGVuZ3RoO1xyXG4gICAgY29uc3QgY29sdW1uQ291bnQgPSBjb2x1bW5zLmxlbmd0aDtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8QXJyYXk8RGF0YVZhbHVlPj4ocm93Q291bnQpO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgYWxsIG9mIG91ciByb3dzXHJcbiAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93Q291bnQ7IHJvd0luZGV4KyspIHtcclxuICAgICAgcmVzdWx0W3Jvd0luZGV4XSA9IG5ldyBBcnJheTxEYXRhVmFsdWU+KGNvbHVtbkNvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHbyB0aHJvdWdoIGNvbHVtbi1ieS1jb2x1bW4gYW5kIGNvbnZlcnQgdGhlIHZhbHVlc1xyXG4gICAgZm9yIChsZXQgY29sdW1uSW5kZXggPSAwOyBjb2x1bW5JbmRleCA8IGNvbHVtbkNvdW50OyBjb2x1bW5JbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHVtbnNbY29sdW1uSW5kZXhdO1xyXG4gICAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93Q291bnQ7IHJvd0luZGV4KyspIHtcclxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IFVuZGVybHlpbmdEYXRhQ29udmVydGVyLmxvb2t1cFZhbHVlRnJvbURpY3Rpb25hcnkoXHJcbiAgICAgICAgICAgIGRhdGFEaWN0aW9uYXJ5LCBFbnVtcy5EYXRhVHlwZS5EVF9TVFJJTkcsIGNvbHVtbi5mb3JtYXRWYWxJZHhzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgIGlmIChmb3JtYXR0ZWRWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pc051bGwoWydmb3JtYXR0ZWRWYWx1ZSddKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlOiBEYXRhVmFsdWUgPSB7XHJcbiAgICAgICAgICB2YWx1ZTogVW5kZXJseWluZ0RhdGFDb252ZXJ0ZXIubG9va3VwVmFsdWVGcm9tRGljdGlvbmFyeShcclxuICAgICAgICAgICAgZGF0YURpY3Rpb25hcnksIGNvbHVtbi5kYXRhVHlwZSwgY29sdW1uLnZhbHVlSW5kaWNlc1tyb3dJbmRleF0pLFxyXG4gICAgICAgICAgZm9ybWF0dGVkVmFsdWU6IGZvcm1hdHRlZFZhbHVlLFxyXG4gICAgICAgICAgYWxpYXNlZFZhbHVlOiBmb3JtYXR0ZWRWYWx1ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJlc3VsdFtyb3dJbmRleF1bY29sdW1uSW5kZXhdID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBEOi9kZXYvanMtYXBpL2FwaS1jb3JlL3NyYy9tYXBwaW5ncy9VbmRlcmx5aW5nRGF0YUNvbnZlcnRlci50c1xuICoqLyIsImltcG9ydCAqIGFzIEFwaSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5pbXBvcnQgeyBUYWJsZWF1RXhjZXB0aW9uIH0gZnJvbSAnQHRhYmxlYXUvYXBpLXV0aWxzJztcclxuaW1wb3J0ICogYXMgUHJlc0xheWVyIGZyb20gJy4uLy4uL2dlbi1zcmMvcHJlc2xheWVyL1ByZXNNb2RlbHMnO1xyXG5pbXBvcnQgeyBBcGlUb1ByZXNMYXllckVudW1NYXBwaW5ncyBhcyBFbnVtQ29udmVydGVyIH0gZnJvbSAnLi9FbnVtTWFwcGluZ3MnO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIGNvbnRhaW5pbmcgaGVscGVyIG1ldGhvZHMgZm9yIGNvbnZlcnRpbmcgZnJvbSBBcGlQcmVzTW9kZWxzIHRvIHRoZWlyIFByZXNMYXllciBlcXVpdmFsZW50c1xyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBBcGlUb1ByZXNMYXllckNvbnZlcnRlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFwaVRvUHJlc0xheWVyQ29udmVydGVyIHtcclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRTaGVldFBhdGgoYXBpU2hlZXRQYXRoPzogQXBpLlNoZWV0UGF0aCk6IFByZXNMYXllci5TaGVldFBhdGhQcmVzTW9kZWwge1xyXG4gICAgaWYgKCFhcGlTaGVldFBhdGgpIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pc1VuZGVmaW5lZChbJ3NoZWV0UGF0aCddKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXN1bHQ6IFByZXNMYXllci5TaGVldFBhdGhQcmVzTW9kZWwgPSB7XHJcbiAgICAgIHNoZWV0TmFtZTogYXBpU2hlZXRQYXRoLnNoZWV0TmFtZSxcclxuICAgICAgaXNEYXNoYm9hcmQ6IGFwaVNoZWV0UGF0aC5pc0Rhc2hib2FyZCxcclxuICAgICAgc3Rvcnlib2FyZDogYXBpU2hlZXRQYXRoLnN0b3J5Ym9hcmQgfHwgJycsXHJcbiAgICAgIGZsaXBib2FyZFpvbmVJZDogYXBpU2hlZXRQYXRoLmZsaXBib2FyZFpvbmVJRCB8fCAwLFxyXG4gICAgICBzdG9yeVBvaW50SWQ6IGFwaVNoZWV0UGF0aC5zdG9yeVBvaW50SUQgfHwgMCxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydEV4dGVuc2lvbkxvY2F0b3IoYXBpRXh0ZW5zaW9uTG9jYXRvcjogQXBpLkV4dGVuc2lvbkxvY2F0b3IpOiBQcmVzTGF5ZXIuQWRkSW5Mb2NhdG9yUHJlc01vZGVsIHtcclxuICAgIGNvbnN0IHJlc3VsdDogUHJlc0xheWVyLkFkZEluTG9jYXRvclByZXNNb2RlbCA9IHtcclxuICAgICAgYWRkSW5JbnN0YW5jZUlkOiBhcGlFeHRlbnNpb25Mb2NhdG9yLmluc3RhbmNlSWQsXHJcbiAgICAgIHNoZWV0UGF0aDogQXBpVG9QcmVzTGF5ZXJDb252ZXJ0ZXIuY29udmVydFNoZWV0UGF0aChhcGlFeHRlbnNpb25Mb2NhdG9yLmRhc2hib2FyZFBhdGgpXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRWaXN1YWxJZChhcGlWaXN1YWxpZDogQXBpLlZpc3VhbElkKTogUHJlc0xheWVyLlZpc3VhbElEUHJlc01vZGVsIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgd29ya3NoZWV0OiBhcGlWaXN1YWxpZC53b3Jrc2hlZXQsXHJcbiAgICAgIGRhc2hib2FyZDogYXBpVmlzdWFsaWQuZGFzaGJvYXJkLFxyXG4gICAgICBzdG9yeWJvYXJkOiBhcGlWaXN1YWxpZC5zdG9yeWJvYXJkLFxyXG4gICAgICBzdG9yeVBvaW50SWQ6IGFwaVZpc3VhbGlkLnN0b3J5UG9pbnRJRCxcclxuICAgICAgZmxpcGJvYXJkWm9uZUlkOiBhcGlWaXN1YWxpZC5mbGlwYm9hcmRab25lSURcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCBhcyBQcmVzTGF5ZXIuVmlzdWFsSURQcmVzTW9kZWw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRWaXN1YWxJZFRvV29ya3NoZWV0KGFwaVZpc3VhbElkOiBBcGkuVmlzdWFsSWQpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGFwaVZpc3VhbElkLndvcmtzaGVldDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFZpc3VhbElkVG9EYXNoYm9hcmQoYXBpVmlzdWFsSWQ6IEFwaS5WaXN1YWxJZCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYXBpVmlzdWFsSWQuZGFzaGJvYXJkIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RmlsdGVyVmFsdWVzKGZpbHRlclZhbHVlczogQXJyYXk8c3RyaW5nPik6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgaWYgKGZpbHRlclZhbHVlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gcGxhdGZvcm0gY29kZSBleHBlY3RzIGFuIGVtcHR5IHN0cmluZyBmb3IgY2xlYXJpbmcgZmlsdGVyIHZhbHVlc1xyXG4gICAgICByZXR1cm4gWycnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmaWx0ZXJWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRGaWx0ZXJUeXBlKGZpbHRlclVwZGF0ZVR5cGU6IEFwaS5GaWx0ZXJVcGRhdGVUeXBlKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBFbnVtQ29udmVydGVyLmZpbHRlclVwZGF0ZVR5cGUuY29udmVydChmaWx0ZXJVcGRhdGVUeXBlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgQ29udmVydE51bGxPcHRpb24obnVsbE9wdGlvbjogQXBpLkZpbHRlck51bGxPcHRpb24pOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEVudW1Db252ZXJ0ZXIubnVsbE9wdGlvbi5jb252ZXJ0KG51bGxPcHRpb24pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBDb252ZXJ0RmlsdGVyRG9tYWluVHlwZShmaWx0ZXJEb21haW5UeXBlOiBBcGkuRmlsdGVyRG9tYWluVHlwZSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gRW51bUNvbnZlcnRlci5maWx0ZXJEb21haW5UeXBlLmNvbnZlcnQoZmlsdGVyRG9tYWluVHlwZSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL0FwaVRvUHJlc0xheWVyQ29udmVydGVyLnRzXG4gKiovIiwiaW1wb3J0IHtcclxuICBDYXRlZ29yaWNhbERvbWFpbixcclxuICBDYXRlZ29yaWNhbEZpbHRlcixcclxuICBEYXRhVmFsdWUsXHJcbiAgRmlsdGVyLFxyXG4gIEZpbHRlclR5cGUsXHJcbiAgUmFuZ2VEb21haW4sXHJcbiAgUmFuZ2VGaWx0ZXIsXHJcbiAgUmVsYXRpdmVEYXRlRmlsdGVyLFxyXG59IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIERhdGFUeXBlLFxyXG4gIEZpbHRlcnNRdWFudGl0YXRpdmVJbmNsdWRlZFZhbHVlcyBhcyBJbmNsdWRlZFZhbHVlcyxcclxuICBGaWx0ZXJUeXBlIGFzIFByZXNMYXllckZpbHRlclR5cGUsXHJcbn0gZnJvbSAnLi4vLi4vZ2VuLXNyYy9wcmVzbGF5ZXIvRW51bXMnO1xyXG5cclxuaW1wb3J0IHtcclxuICBDYXRlZ29yaWNhbERvbWFpblByZXNNb2RlbCxcclxuICBGaWx0ZXJJbmZvUHJlc01vZGVsLFxyXG4gIEZpbHRlclZhbHVlUHJlc01vZGVsLFxyXG4gIFF1YW50aXRhdGl2ZURvbWFpblByZXNNb2RlbCxcclxufSBmcm9tICcuLi8uLi9nZW4tc3JjL3ByZXNsYXllci9QcmVzTW9kZWxzJztcclxuXHJcbmltcG9ydCB7IFByZXNMYXllclRvQXBpRW51bU1hcHBpbmdzIGFzIEVudW1NYXBwaW5ncyB9IGZyb20gJy4vRW51bU1hcHBpbmdzJztcclxuaW1wb3J0IHsgUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIgfSBmcm9tICcuL1ByZXNMYXllclRvQXBpQ29udmVydGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJzQ29udmVydGVyIHtcclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRGaWx0ZXJzUHJlc01vZGVsKGZpbHRlclBtczogQXJyYXk8RmlsdGVySW5mb1ByZXNNb2RlbD4pOiBBcnJheTxGaWx0ZXI+IHtcclxuICAgIGxldCBmaWx0ZXJzOiBBcnJheTxGaWx0ZXI+ID0gW107XHJcbiAgICBmaWx0ZXJQbXMuZm9yRWFjaCggZmlsdGVyUG0gPT4ge1xyXG4gICAgICBzd2l0Y2ggKGZpbHRlclBtLmZpbHRlclR5cGUpIHtcclxuICAgICAgICBjYXNlIFByZXNMYXllckZpbHRlclR5cGUuRkxUUl9DYXRlZ29yaWNhbDoge1xyXG4gICAgICAgICAgZmlsdGVycy5wdXNoKEZpbHRlcnNDb252ZXJ0ZXIuY29udmVydENhdGVnb3JpY2FsRmlsdGVyUHJlc01vZGVsKGZpbHRlclBtKSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgUHJlc0xheWVyRmlsdGVyVHlwZS5GTFRSX1F1YW50aXRhdGl2ZToge1xyXG4gICAgICAgICAgZmlsdGVycy5wdXNoKEZpbHRlcnNDb252ZXJ0ZXIuY29udmVydFF1YW50aXRhdGl2ZUZpbHRlclByZXNNb2RlbChmaWx0ZXJQbSkpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlIFByZXNMYXllckZpbHRlclR5cGUuRkxUUl9SZWxhdGl2ZURhdGU6IHtcclxuICAgICAgICAgIGZpbHRlcnMucHVzaChGaWx0ZXJzQ29udmVydGVyLmNvbnZlcnRSZWxhdGl2ZURhdGVGaWx0ZXJQcmVzTW9kZWwoZmlsdGVyUG0pKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZmlsdGVycztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydENhdGVnb3JpY2FsRmlsdGVyUHJlc01vZGVsKGZpbHRlclBtOiBGaWx0ZXJJbmZvUHJlc01vZGVsKTogQ2F0ZWdvcmljYWxGaWx0ZXIge1xyXG4gICAgbGV0IHNlbGVjdGVkVmFsdWVzOiBBcnJheTxEYXRhVmFsdWU+ID0gZmlsdGVyUG0uY2F0ZWdvcmljYWxGaWx0ZXJJbmZvLmNhcHRpb25lZEZpbHRlclZhbHVlTGlzdC5tYXAoZmlsdGVyVmFsdWUgPT4ge1xyXG4gICAgICByZXR1cm4gRmlsdGVyc0NvbnZlcnRlci5jb252ZXJ0RmlsdGVyVmFsdWVQcmVzTW9kZWwoZmlsdGVyVmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgZmlsdGVyOiBDYXRlZ29yaWNhbEZpbHRlciA9IHtcclxuICAgICAgdmFsdWVzOiBzZWxlY3RlZFZhbHVlcyxcclxuICAgICAgaXNFeGNsdWRlOiBmaWx0ZXJQbS5jYXRlZ29yaWNhbEZpbHRlckluZm8uZXhjbHVkZSxcclxuICAgICAgZmlsdGVyVHlwZTogRmlsdGVyVHlwZS5DYXRlZ29yaWNhbCxcclxuICAgICAgZmllbGRDYXB0aW9uOiBmaWx0ZXJQbS5maWVsZENhcHRpb24sXHJcbiAgICAgIGZpZWxkTmFtZTogZmlsdGVyUG0uZm4sXHJcbiAgICAgIHZpc3VhbElkOiBQcmVzTGF5ZXJUb0FwaUNvbnZlcnRlci5jb252ZXJ0VmlzdWFsSWQoZmlsdGVyUG0udmlzdWFsSWRQcmVzTW9kZWwpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZpbHRlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFF1YW50aXRhdGl2ZUZpbHRlclByZXNNb2RlbChmaWx0ZXJQbTogRmlsdGVySW5mb1ByZXNNb2RlbCk6IFJhbmdlRmlsdGVyIHtcclxuICAgIGxldCBtaW5WYWx1ZTogRGF0YVZhbHVlID0gRmlsdGVyc0NvbnZlcnRlci5jb252ZXJ0RmlsdGVyVmFsdWVQcmVzTW9kZWwoXHJcbiAgICAgIGZpbHRlclBtLnF1YW50aXRhdGl2ZUZpbHRlckluZm8uY2FwdGlvbmVkUmFuZ2VNaW5cclxuICAgICk7XHJcbiAgICBsZXQgbWF4VmFsdWU6IERhdGFWYWx1ZSA9IEZpbHRlcnNDb252ZXJ0ZXIuY29udmVydEZpbHRlclZhbHVlUHJlc01vZGVsKFxyXG4gICAgICBmaWx0ZXJQbS5xdWFudGl0YXRpdmVGaWx0ZXJJbmZvLmNhcHRpb25lZFJhbmdlTWF4XHJcbiAgICApO1xyXG4gICAgbGV0IGZpbHRlcjogUmFuZ2VGaWx0ZXIgPSB7XHJcbiAgICAgIGZpbHRlclR5cGU6IEZpbHRlclR5cGUuUmFuZ2UsXHJcbiAgICAgIGZpZWxkQ2FwdGlvbjogZmlsdGVyUG0uZmllbGRDYXB0aW9uLFxyXG4gICAgICBmaWVsZE5hbWU6IGZpbHRlclBtLmZuLFxyXG4gICAgICB2aXN1YWxJZDogUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuY29udmVydFZpc3VhbElkKGZpbHRlclBtLnZpc3VhbElkUHJlc01vZGVsKSxcclxuICAgICAgbWluOiBtaW5WYWx1ZSxcclxuICAgICAgbWF4OiBtYXhWYWx1ZSxcclxuICAgICAgaW5jbHVkZU51bGxWYWx1ZXM6IEZpbHRlcnNDb252ZXJ0ZXIuY29udmVydEluY2x1ZGVkTnVsbFZhbHVlcyhmaWx0ZXJQbS5xdWFudGl0YXRpdmVGaWx0ZXJJbmZvLmluY2x1ZGVkKVxyXG4gICAgfTtcclxuICAgIHJldHVybiBmaWx0ZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRSZWxhdGl2ZURhdGVGaWx0ZXJQcmVzTW9kZWwoZmlsdGVyUG06IEZpbHRlckluZm9QcmVzTW9kZWwpOiBSZWxhdGl2ZURhdGVGaWx0ZXIge1xyXG4gICAgbGV0IGFuY2hvckRhdGVWYWx1ZTogRGF0YVZhbHVlID0gRmlsdGVyc0NvbnZlcnRlci5jb252ZXJ0RmlsdGVyVmFsdWVQcmVzTW9kZWwoXHJcbiAgICAgIGZpbHRlclBtLnJlbGF0aXZlRGF0ZUZpbHRlckluZm8uY2FwdGlvbmVkQW5jaG9yRGF0ZVxyXG4gICAgKTtcclxuICAgIGxldCBmaWx0ZXI6IFJlbGF0aXZlRGF0ZUZpbHRlciA9IHtcclxuICAgICAgZmlsdGVyVHlwZTogRmlsdGVyVHlwZS5SZWxhdGl2ZURhdGUsXHJcbiAgICAgIGZpZWxkQ2FwdGlvbjogZmlsdGVyUG0uZmllbGRDYXB0aW9uLFxyXG4gICAgICBmaWVsZE5hbWU6IGZpbHRlclBtLmZuLFxyXG4gICAgICB2aXN1YWxJZDogUHJlc0xheWVyVG9BcGlDb252ZXJ0ZXIuY29udmVydFZpc3VhbElkKGZpbHRlclBtLnZpc3VhbElkUHJlc01vZGVsKSxcclxuICAgICAgYW5jaG9yRGF0ZTogYW5jaG9yRGF0ZVZhbHVlLFxyXG4gICAgICBwZXJpb2RUeXBlOiBFbnVtTWFwcGluZ3MuZGF0ZVN0ZXBQZXJpb2QuY29udmVydChmaWx0ZXJQbS5yZWxhdGl2ZURhdGVGaWx0ZXJJbmZvLmRhdGVQZXJpb2RUeXBlKSxcclxuICAgICAgcmFuZ2VUeXBlOiBFbnVtTWFwcGluZ3MuZGF0ZVJhbmdlVHlwZS5jb252ZXJ0KGZpbHRlclBtLnJlbGF0aXZlRGF0ZUZpbHRlckluZm8uZGF0ZVJhbmdlVHlwZSksXHJcbiAgICAgIHJhbmdlTjogZmlsdGVyUG0ucmVsYXRpdmVEYXRlRmlsdGVySW5mby5yYW5nZU5cclxuICAgIH07XHJcbiAgICByZXR1cm4gZmlsdGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0Q2F0ZWdvcmljYWxEb21haW4oZG9tYWluUG06IENhdGVnb3JpY2FsRG9tYWluUHJlc01vZGVsKTogQ2F0ZWdvcmljYWxEb21haW4ge1xyXG4gICAgbGV0IGRvbWFpblZhbHVlczogQXJyYXk8RGF0YVZhbHVlPiA9IGRvbWFpblBtLmNhcHRpb25lZEZpbHRlclZhbHVlTGlzdC5tYXAoZmlsdGVyVmFsdWUgPT4ge1xyXG4gICAgICByZXR1cm4gRmlsdGVyc0NvbnZlcnRlci5jb252ZXJ0RmlsdGVyVmFsdWVQcmVzTW9kZWwoZmlsdGVyVmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4geyB2YWx1ZXM6IGRvbWFpblZhbHVlc307XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRRdWFudGl0YXRpdmVEb21haW4oZG9tYWluUG06IFF1YW50aXRhdGl2ZURvbWFpblByZXNNb2RlbCk6IFJhbmdlRG9tYWluIHtcclxuICAgIGxldCBtaW5WYWx1ZTogRGF0YVZhbHVlID0gRmlsdGVyc0NvbnZlcnRlci5jb252ZXJ0RmlsdGVyVmFsdWVQcmVzTW9kZWwoZG9tYWluUG0uY2FwdGlvbmVkUmFuZ2VNaW4pO1xyXG4gICAgbGV0IG1heFZhbHVlOiBEYXRhVmFsdWUgPSBGaWx0ZXJzQ29udmVydGVyLmNvbnZlcnRGaWx0ZXJWYWx1ZVByZXNNb2RlbChkb21haW5QbS5jYXB0aW9uZWRSYW5nZU1heCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtYXg6IG1heFZhbHVlLFxyXG4gICAgICBtaW46IG1pblZhbHVlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RmlsdGVyVmFsdWVQcmVzTW9kZWwoZHZQTTogRmlsdGVyVmFsdWVQcmVzTW9kZWwpOiBEYXRhVmFsdWUge1xyXG4gICAgLyp0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXHJcbiAgICBsZXQgdmFsdWU6IGFueTtcclxuICAgIHN3aXRjaCAoZHZQTS5kYXRhVHlwZSkge1xyXG4gICAgICBjYXNlIERhdGFUeXBlLkRUX0JPT0xFQU46IHtcclxuICAgICAgICB2YWx1ZSA9IEJvb2xlYW4oZHZQTS5kYXRhVmFsdWVTdHIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgRGF0YVR5cGUuRFRfREFURToge1xyXG4gICAgICAgIHZhbHVlID0gbmV3IERhdGUoZHZQTS5kYXRhVmFsdWVTdHIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgRGF0YVR5cGUuRFRfREFURVRJTUU6IHtcclxuICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKGR2UE0uZGF0YVZhbHVlU3RyKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIERhdGFUeXBlLkRUX0lOVEVHRVI6IHtcclxuICAgICAgICB2YWx1ZSA9IE51bWJlci5wYXJzZUludChkdlBNLmRhdGFWYWx1ZVN0cik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBEYXRhVHlwZS5EVF9SRUFMOiB7XHJcbiAgICAgICAgdmFsdWUgPSBOdW1iZXIucGFyc2VGbG9hdChkdlBNLmRhdGFWYWx1ZVN0cik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgLy8gZGVmYXVsdCB0byBzdHJpbmdcclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIHZhbHVlID0gZHZQTS5kYXRhVmFsdWVTdHI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgLy8gVE9ETzogbm8gZWFzeSB3YXkgb2YgZ2V0dGluZyBiYWNrIGFsaWFzZWQgdmFsdWUgZnJvbSBwbGF0Zm9ybSwgd2lsbCBuZWVkIHRvIGludmVzdGlnYXRlIGZ1cnRoZXJcclxuICAgICAgYWxpYXNlZFZhbHVlOiAnJyxcclxuICAgICAgZm9ybWF0dGVkVmFsdWU6IGR2UE0uZGF0YVZhbHVlRGlzcGxheVN0cmluZ1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydEluY2x1ZGVkTnVsbFZhbHVlcyhpbmNsdWRlTnVsbDogSW5jbHVkZWRWYWx1ZXMpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoaW5jbHVkZU51bGwgPT09IEluY2x1ZGVkVmFsdWVzLkluUmFuZ2VPck51bGwgfHxcclxuICAgICAgaW5jbHVkZU51bGwgPT09IEluY2x1ZGVkVmFsdWVzLkFsbCB8fFxyXG4gICAgICBpbmNsdWRlTnVsbCA9PT0gSW5jbHVkZWRWYWx1ZXMuTnVsbFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRDovZGV2L2pzLWFwaS9hcGktY29yZS9zcmMvbWFwcGluZ3MvRmlsdGVyc0NvbnZlcnRlci50c1xuICoqLyIsImltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG4vKipcclxuICogU2ltcGxlIHJlZ2lzdHJ5IGNsYXNzIHdoaWNoIGNyZWF0ZXMgYSBtYXBwaW5nIGJhc2VkIG9uIHR3byBrZXlzLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBNYXBwaW5nUmVnaXN0cnlcclxuICogQHRlbXBsYXRlIFRJbnB1dEVudW1UeXBlXHJcbiAqIEB0ZW1wbGF0ZSBUT3V0cHV0RW51bVR5cGVcclxuICogQHRlbXBsYXRlIFRNYXBwaW5nU3RvcmFnZVR5cGVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNYXBwaW5nUmVnaXN0cnk8VElucHV0RW51bVR5cGUgZXh0ZW5kcyBzdHJpbmcsIFRPdXRwdXRFbnVtVHlwZSBleHRlbmRzIHN0cmluZywgVE1hcHBpbmdTdG9yYWdlVHlwZT4ge1xyXG4gIHByaXZhdGUgc3RhdGljIE1JU1NJTkdfUkVRVUVTVEVEX01BUFBJTkc6IHN0cmluZyA9ICdNaXNzaW5nIHJlcXVlc3RlZCBtYXBwaW5nOiAlMSB0byAlMic7XHJcbiAgcHJpdmF0ZSBfcmVnaXN0cnk6IHsgW2tleTogc3RyaW5nXTogVE1hcHBpbmdTdG9yYWdlVHlwZSB9O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9yZWdpc3RyeSA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhcyhpbnB1dFR5cGU6IFRJbnB1dEVudW1UeXBlLCBvdXRwdXRUeXBlOiBUT3V0cHV0RW51bVR5cGUpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGtleSA9IHRoaXMubWFrZUtleShpbnB1dFR5cGUsIG91dHB1dFR5cGUpO1xyXG4gICAgaWYgKCF0aGlzLl9yZWdpc3RyeS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuX3JlZ2lzdHJ5W2tleV0pIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldChpbnB1dFR5cGU6IFRJbnB1dEVudW1UeXBlLCBvdXRwdXRUeXBlOiBUT3V0cHV0RW51bVR5cGUpOiBUTWFwcGluZ1N0b3JhZ2VUeXBlIHtcclxuICAgIGlmICghdGhpcy5oYXMoaW5wdXRUeXBlLCBvdXRwdXRUeXBlKSkge1xyXG4gICAgICB0aHJvdyBUYWJsZWF1RXhjZXB0aW9uLmVycm9yKE1hcHBpbmdSZWdpc3RyeS5NSVNTSU5HX1JFUVVFU1RFRF9NQVBQSU5HLCBbaW5wdXRUeXBlLCBvdXRwdXRUeXBlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga2V5ID0gdGhpcy5tYWtlS2V5KGlucHV0VHlwZSwgb3V0cHV0VHlwZSk7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVnaXN0cnlba2V5XTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRSZWdpc3RyYXRpb24oaW5wdXRUeXBlOiBUSW5wdXRFbnVtVHlwZSwgb3V0cHV0VHlwZTogVE91dHB1dEVudW1UeXBlLCBzdG9yYWdlSXRlbTogVE1hcHBpbmdTdG9yYWdlVHlwZSk6IHZvaWQge1xyXG4gICAgY29uc3Qga2V5ID0gdGhpcy5tYWtlS2V5KGlucHV0VHlwZSwgb3V0cHV0VHlwZSk7XHJcblxyXG4gICAgLy8gQWRkIHRoaXMgaXRlbVxyXG4gICAgdGhpcy5fcmVnaXN0cnlba2V5XSA9IHN0b3JhZ2VJdGVtO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29tYmluZXMgdGhlIHR3byBrZXlzIGludG8gYSB1bmlxdWUgc3RyaW5nXHJcbiAgICpcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7VElucHV0RW51bVR5cGV9IGlucHV0VHlwZVxyXG4gICAqIEBwYXJhbSB7VE91dHB1dEVudW1UeXBlfSBvdXRwdXRUeXBlXHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKiBAbWVtYmVyb2YgTWFwcGluZ1JlZ2lzdHJ5XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtYWtlS2V5KGlucHV0VHlwZTogVElucHV0RW51bVR5cGUsIG91dHB1dFR5cGU6IFRPdXRwdXRFbnVtVHlwZSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBrZXlPYmogPSB7IGlucHV0OiBpbnB1dFR5cGUsIG91dHB1dDogb3V0cHV0VHlwZSB9O1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGtleU9iaik7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL01hcHBpbmdSZWdpc3RyeS50c1xuICoqLyIsImltcG9ydCB7IERhdGFUeXBlLCBEYXRhVmFsdWUsIERvbWFpblJlc3RyaWN0aW9uVHlwZSwgUGFyYW1ldGVySW5mbyB9IGZyb20gJ0B0YWJsZWF1L2FwaS1pbnRlcm5hbC1jb250cmFjdCc7XHJcbmltcG9ydCB7IFRhYmxlYXVFeGNlcHRpb24gfSBmcm9tICdAdGFibGVhdS9hcGktdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgUGFyYW1ldGVyQ3RybFByZXNNb2RlbCB9IGZyb20gJy4uLy4uL2dlbi1zcmMvcHJlc2xheWVyL1ByZXNNb2RlbHMnO1xyXG5pbXBvcnQgeyBQcmVzTGF5ZXJUb0FwaUVudW1NYXBwaW5ncyBhcyBFbnVtTWFwcGluZyB9IGZyb20gJy4vRW51bU1hcHBpbmdzJztcclxuXHJcbi8qKlxyXG4gKiBDb250YWlucyBsb2dpYyBmb3IgY29udmVydGluZyBQYXJhbWV0ZXIgbW9kZWxzIGludG8gdGhlaXIgZXF1aXZhbGVudCBBcGkgdmVyc2lvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJzRGF0YUNvbnZlcnRlciB7XHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0UGFyYW1ldGVyTGlzdChwYXJhbWV0ZXJzOiBBcnJheTxQYXJhbWV0ZXJDdHJsUHJlc01vZGVsPik6IEFycmF5PFBhcmFtZXRlckluZm8+IHtcclxuICAgIHJldHVybiBwYXJhbWV0ZXJzLm1hcChQYXJhbWV0ZXJzRGF0YUNvbnZlcnRlci5jb252ZXJ0UGFyYW1ldGVyKTtcclxuICB9XHJcblxyXG4gIC8vIENvbnZlcnRzIGEgc2luZ2xlIHBhcmFtZXRlci5cclxuICAvLyBSb3VnaCBwb3J0IG9mIGh0dHBzOi8vb3Blbmdyb2svc291cmNlL3hyZWYvZGV2X25lc3NpZS93b3JrZ3JvdXAvdnFsd2ViL3NjcmlwdHNoYXJwL3NyYy9VSS9BcGkvQXBpUGFyYW1ldGVySGFuZGxlci5jcyM5NVxyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFBhcmFtZXRlcihwYXJhbTogUGFyYW1ldGVyQ3RybFByZXNNb2RlbCk6IFBhcmFtZXRlckluZm8ge1xyXG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gUGFyYW1ldGVyc0RhdGFDb252ZXJ0ZXIuY29udmVydEFsaWFzZWREYXRhVmFsdWUocGFyYW0udmFsdWVBbGlhcywgcGFyYW0uZm9ybWF0dGVkVmFsdWUpO1xyXG4gICAgY29uc3QgYWxsb3dhYmxlVmFsdWVzVHlwZSA9IEVudW1NYXBwaW5nLnBhcmFtZXRlclR5cGVzRG9tYWluVHlwZS5jb252ZXJ0KHBhcmFtLnBhcmFtZXRlckRvbWFpblR5cGUpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdDogUGFyYW1ldGVySW5mbyA9IHtcclxuICAgICAgbmFtZTogcGFyYW0uZmllbGRDYXB0aW9uLFxyXG4gICAgICBmaWVsZE5hbWU6IHBhcmFtLnBhcmFtZXRlck5hbWUsXHJcbiAgICAgIGRhdGFUeXBlOiBFbnVtTWFwcGluZy5kYXRhVHlwZS5jb252ZXJ0KHBhcmFtLmRhdGFUeXBlKSxcclxuICAgICAgY3VycmVudFZhbHVlOiBjdXJyZW50VmFsdWUsXHJcbiAgICAgIGFsbG93YWJsZVZhbHVlc1R5cGU6IGFsbG93YWJsZVZhbHVlc1R5cGVcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGFsbG93YWJsZVZhbHVlc1R5cGUgPT09IERvbWFpblJlc3RyaWN0aW9uVHlwZS5MaXN0KSB7XHJcbiAgICAgIGNvbnN0IGFsbG93YWJsZVZhbHVlcyA9IG5ldyBBcnJheTxEYXRhVmFsdWU+KCk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW0udmFsdWVzQWxpYXNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFkdiA9IHBhcmFtLnZhbHVlc0FsaWFzZXNbaV07XHJcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBwYXJhbS5mb3JtYXR0ZWRWYWx1ZXNbaV07XHJcbiAgICAgICAgYWxsb3dhYmxlVmFsdWVzLnB1c2goUGFyYW1ldGVyc0RhdGFDb252ZXJ0ZXIuY29udmVydEFsaWFzZWREYXRhVmFsdWUoYWR2LCBmb3JtYXR0ZWRWYWx1ZSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXN1bHQuYWxsb3dhYmxlVmFsdWVzID0gYWxsb3dhYmxlVmFsdWVzO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoYWxsb3dhYmxlVmFsdWVzVHlwZSA9PT0gRG9tYWluUmVzdHJpY3Rpb25UeXBlLlJhbmdlKSB7XHJcbiAgICAgIHJlc3VsdC5taW5WYWx1ZSA9IFBhcmFtZXRlcnNEYXRhQ29udmVydGVyLm1ha2VEYXRhVmFsdWUocGFyYW0udmFsdWVNaW4sIHBhcmFtLmZvcm1hdHRlZE1pbik7XHJcbiAgICAgIHJlc3VsdC5tYXhWYWx1ZSA9IFBhcmFtZXRlcnNEYXRhQ29udmVydGVyLm1ha2VEYXRhVmFsdWUocGFyYW0udmFsdWVNYXgsIHBhcmFtLmZvcm1hdHRlZE1heCk7XHJcbiAgICAgIHJlc3VsdC5zdGVwU2l6ZSA9IFBhcmFtZXRlcnNEYXRhQ29udmVydGVyLmNvbnZlcnROdW1iZXIocmVzdWx0LmRhdGFUeXBlLCBwYXJhbS52YWx1ZUluYyk7XHJcbiAgICAgIHJlc3VsdC5kYXRlU3RlcFBlcmlvZCA9IEVudW1NYXBwaW5nLmRhdGVTdGVwUGVyaW9kLmNvbnZlcnQocGFyYW0uZGF0ZVBlcmlvZFR5cGUsIGZhbHNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gaW4gdGhlIGNhc2UgdGhhdCBhbGwgdmFsdWVzIGFyZSBhbGxvd2VkXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGNvbnZlcnROdW1iZXIoZGF0YVR5cGU6IERhdGFUeXBlLCB2YWx1ZTogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBpZiAoZGF0YVR5cGUgPT09IERhdGFUeXBlLkludCB8fCBkYXRhVHlwZSA9PT0gRGF0YVR5cGUuRGF0ZSB8fCBkYXRhVHlwZSA9PT0gRGF0YVR5cGUuRGF0ZVRpbWUpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcclxuICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gRGF0YVR5cGUuRmxvYXQpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgLyp0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55ICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgbWFrZURhdGFWYWx1ZSh2YWx1ZTogYW55LCBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nLCBhbGlhcz86IHN0cmluZyk6IERhdGFWYWx1ZSB7XHJcbiAgICBjb25zdCByZXN1bHQ6IERhdGFWYWx1ZSA9IHtcclxuICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICBmb3JtYXR0ZWRWYWx1ZTogZm9ybWF0dGVkVmFsdWUsXHJcbiAgICAgIGFsaWFzZWRWYWx1ZTogYWxpYXMgfHwgZm9ybWF0dGVkVmFsdWVcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGNvbnZlcnRBbGlhc2VkRGF0YVZhbHVlKGFkdjogQXJyYXk8YW55PiwgZm9ybWF0dGVkVmFsdWU6IHN0cmluZyk6IERhdGFWYWx1ZSB7XHJcbiAgICAvLyBBbGlhc2VkRGF0YVZhbHVlcyBhcmUgc2VyaWFsaXplZCBpbiBraW5kIG9mIGEgc3RyYW5nZSB3YXkgZnJvbSB0aGUgcGxhdGZvcm0gY29kZS4gVGhleSBhcmUgb3V0cHV0XHJcbiAgICAvLyBhcyBhbiBhcnJheSBvZiAyIHZhbHVlcy4gVGhlIGZpcnN0IGlzIHRoZSBhY3R1YWwgdmFsdWUsIHRoZSBzZWNvbmQgaXMgdGhlIGFsaWFzLiBTZWUgQWxpYXNlZERhdGFWYWx1ZVNlcmlhbGl6ZXI6OlRvU2VyaWFsaXplclxyXG4gICAgaWYgKCFhZHYgfHwgIShhZHYgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgdGhyb3cgVGFibGVhdUV4Y2VwdGlvbi5pbnZhbGlkKFsnYWxpYXNlZCBkYXRhIHZhbHVlJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhbHVlID0gYWR2WzBdO1xyXG4gICAgY29uc3QgYWxpYXMgPSBhZHYubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IGFkdlsxXSBhcyBzdHJpbmc7XHJcblxyXG4gICAgcmV0dXJuIFBhcmFtZXRlcnNEYXRhQ29udmVydGVyLm1ha2VEYXRhVmFsdWUodmFsdWUsIGZvcm1hdHRlZFZhbHVlLCBhbGlhcyk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIEQ6L2Rldi9qcy1hcGkvYXBpLWNvcmUvc3JjL21hcHBpbmdzL1BhcmFtZXRlcnNEYXRhQ29udmVydGVyLnRzXG4gKiovIiwiaW1wb3J0IHsgQWRkSW5JbnN0YW5jZVByZXNNb2RlbCB9IGZyb20gJ0B0YWJsZWF1L2FwaS1jb3JlJztcclxuaW1wb3J0ICogYXMgY29udHJhY3QgZnJvbSAnQHRhYmxlYXUvcHJlc2xheWVyLWFwaS1jb250cmFjdCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIEFkZEluQXBpUHJlc0xheWVySW50ZXJvcE9iamVjdCxcclxuICBOb3RpZmljYXRpb24gYXMgUHJlc0xheWVyTm90aWZpY2F0aW9uLFxyXG59IGZyb20gJy4vdHlwZXMvQWRkSW5BcGlQcmVzTGF5ZXJJbnRlcm9wT2JqZWN0JztcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbmF0aW9uIG9mIHRoZSBQcmVzZW50YXRpb25MYXllciBjb250cmFjdCB3aXRoIGEgYml0IG9mIGV4dHJhIGluZm9ybWF0aW9uXHJcbiAqIGFkZGVkIHRvIHdvcmsgd2l0aCBhZGQtaW5zLiBNb3N0IHdvcmsgaXMgZGVsZWdhdGVkIGRvd24gdG8gdGhlIGludGVyb3BPYmplY3Qgd2hpY2hcclxuICogY29tbXVuaWNhdGVzIGRpcmVjdGx5IHdpdGggdGhlIGMrKyBsYXllciB2aWEgUVdlYkNoYW5uZWxcclxuICpcclxuICogQGNsYXNzIEFkZEluQXBpUHJlc0xheWVySW1wbFxyXG4gKiBAaW1wbGVtZW50cyB7Y29udHJhY3QuUHJlc2VudGF0aW9uTGF5ZXJ9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQWRkSW5BcGlQcmVzTGF5ZXJJbXBsIGltcGxlbWVudHMgY29udHJhY3QuUHJlc2VudGF0aW9uTGF5ZXIge1xyXG4gICAgcHJpdmF0ZSBfbm90aWZpY2F0aW9uSGFuZGxlcnM6IHsgW2V2ZW50aWQ6IHN0cmluZ106IFtjb250cmFjdC5Ob3RpZmljYXRpb25IYW5kbGVyXSB9O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbnRlcm9wT2JqZWN0OiBBZGRJbkFwaVByZXNMYXllckludGVyb3BPYmplY3QpIHtcclxuICAgICAgICB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVycyA9IHt9O1xyXG4gICAgICAgIGlmIChfaW50ZXJvcE9iamVjdCAmJiBfaW50ZXJvcE9iamVjdC5Pbk5vdGlmaWNhdGlvbikge1xyXG4gICAgICAgICAgICBfaW50ZXJvcE9iamVjdC5Pbk5vdGlmaWNhdGlvbi5jb25uZWN0KG5vdGlmaWNhdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGluc3RhbmNlIGluZm8gZm9yIHRoaXMgcGFydGljdWxhciBhZGQtaW4gZnJvbSB0aGUgYysrIGNvZGVcclxuICAgICAqXHJcbiAgICAgKiBAcmVhZG9ubHlcclxuICAgICAqIEB0eXBlIHtBZGRJbkluc3RhbmNlUHJlc01vZGVsfVxyXG4gICAgICogQG1lbWJlcm9mIEFkZEluQXBpUHJlc0xheWVySW1wbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IEFkZEluSW5zdGFuY2VJbmZvKCk6IEFkZEluSW5zdGFuY2VQcmVzTW9kZWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm9wT2JqZWN0LmFkZEluSW5zdGFuY2VJbmZvIGFzIEFkZEluSW5zdGFuY2VQcmVzTW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIGEgY29tbWFuZCB1c2luZyB0aGUgcHJlcy1sYXllciBpbnRlcm9wXHJcbiAgICAgKlxyXG4gICAgICogQHRlbXBsYXRlIFQgLSBUaGUgZXhwZWN0ZWQgcmV0dXJuIHR5cGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21tYW5kTmFtZXNwYWNlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWFuZE5hbWVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fVxyXG4gICAgICogQG1lbWJlcm9mIEFkZEluQXBpUHJlc0xheWVySW1wbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW52b2tlQ29tbWFuZDxUPihjb21tYW5kTmFtZXNwYWNlOiBzdHJpbmcsIGNvbW1hbmROYW1lOiBzdHJpbmcsIHBhcmFtczogb2JqZWN0KTogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lc3BhY2UgPSBjb21tYW5kTmFtZXNwYWNlIHx8ICd0YWJkb2MnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJvcE9iamVjdC5FeGVjdXRlQ29tbWFuZDxUPihcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZXNwYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyxcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuU3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1zZyA9ICdFeGVjdXRlQ29tbWFuZCBmYWlsZWQsIHdpdGggcmVzdWx0OicgKyBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5SZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihtc2cpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiB3aWxsIHJlZ2lzdHJhdGlvbiBhIHNpbmdsZSBpbnN0YW5jZSBvZiBhIG5vdGlmaWNhdGlvbiBoYW5kbGVyIHdpdGggdGhlIE5hdGl2ZSBDKysgb2JqZWN0LFxyXG4gICAgLy8gYW5kIGltcGxlbWVudCBtdWx0aS1kaXNwYXRjaCB0byB0aGUgd2ViIG9iamVjdHMgZnJvbSBoLmVyZVxyXG4gICAgcHVibGljIHJlZ2lzdGVyTm90aWZpY2F0aW9uSGFuZGxlcihldmVudElkOiBzdHJpbmcsIGhhbmRsZXI6IGNvbnRyYWN0Lk5vdGlmaWNhdGlvbkhhbmRsZXIpOiAoKSA9PiB2b2lkIHtcclxuICAgICAgICBpZiAoZXZlbnRJZCBpbiB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVycykge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVyc1tldmVudElkXS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdGlmaWNhdGlvbkhhbmRsZXJzW2V2ZW50SWRdID0gW2hhbmRsZXJdO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJvcE9iamVjdC5SZWdpc3Rlck5vdGlmaWNhdGlvbkhhbmRsZXIoZXZlbnRJZCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1JlZ2lzdGVyTm90aWZpY2F0aW9uSGFuZGxlciBmYWlsZWQ6ICcgKyBlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoKSA9PiB0aGlzLnJlbW92ZU5vdGlmaWNhdGlvbkhhbmRsZXIoZXZlbnRJZCwgaGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW1vdmVOb3RpZmljYXRpb25IYW5kbGVyKGV2ZW50SWQ6IHN0cmluZywgaGFuZGxlcjogY29udHJhY3QuTm90aWZpY2F0aW9uSGFuZGxlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZXJMaXN0ID0gdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlcnNbZXZlbnRJZF07XHJcbiAgICAgICAgaWYgKCFoYW5kbGVyTGlzdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZvdW5kSW5kZXggPSBoYW5kbGVyTGlzdC5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgIGlmIChmb3VuZEluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgaGFuZGxlckxpc3Quc3BsaWNlKGZvdW5kSW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFuZGxlckxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVyc1tldmVudElkXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGRpc3BhdGNoTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbjogUHJlc0xheWVyTm90aWZpY2F0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlY2VpdmVkIG5vdGlmaWNhdGlvbjogJyArIEpTT04uc3RyaW5naWZ5KG5vdGlmaWNhdGlvbikpO1xyXG4gICAgICAgIGxldCBldmVudElkID0gbm90aWZpY2F0aW9uLmV2ZW50SWQ7XHJcbiAgICAgICAgbGV0IHByZXNNb2RlbCA9IG5vdGlmaWNhdGlvbi5wcmVzTW9kZWw7XHJcbiAgICAgICAgaWYgKGV2ZW50SWQgaW4gdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlcnNbZXZlbnRJZF07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbaV0ocHJlc01vZGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuLi9zcmMvQWRkSW5BcGlQcmVzTGF5ZXJJbXBsLnRzXG4gKiovIiwiaW1wb3J0IHsgQXBpRXZlbnRIYW5kbGVyIH0gZnJvbSAnQHRhYmxlYXUvYXBpLWNvcmUnO1xyXG5pbXBvcnQge1xyXG4gIEV4ZWN1dGVQYXJhbWV0ZXJzLFxyXG4gIEV4ZWN1dGVSZXNwb25zZSxcclxuICBJbnRlcm5hbEFwaURpc3BhdGNoZXIsXHJcbiAgTm90aWZpY2F0aW9uSGFuZGxlcixcclxuICBWZXJiSWQsXHJcbiAgVmVyc2lvbk51bWJlcixcclxufSBmcm9tICdAdGFibGVhdS9hcGktaW50ZXJuYWwtY29udHJhY3QnO1xyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBJbnRlcm5hbEFwaURpc3BhdGNoZXIgZm9yIGRlc2t0b3AuIFNpbmNlIHRoaXMgd2lsbCBydW4gaW4gdGhlIHNhbWVcclxuICogZnJhbWUgYXMgdGhlIEFwaUV2ZW50SGFuZGxlciwgdGhpcyBjbGFzcyBtb3N0bHkganVzdCBtYXJzaGFsbHMgZG93biB0byB0aGF0IGltcGxlbWVudGF0aW9uXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIERlc2t0b3BBcGlEaXNwYXRjaGVyXHJcbiAqIEBpbXBsZW1lbnRzIHtJbnRlcm5hbEFwaURpc3BhdGNoZXJ9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGVza3RvcEFwaURpc3BhdGNoZXIgaW1wbGVtZW50cyBJbnRlcm5hbEFwaURpc3BhdGNoZXIge1xyXG4gIHByaXZhdGUgX25vdGlmaWNhdGlvbkhhbmRsZXJzOiBBcnJheTxOb3RpZmljYXRpb25IYW5kbGVyPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2FwaUV2ZW50SGFuZGxlcjogQXBpRXZlbnRIYW5kbGVyKSB7XHJcbiAgICB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVycyA9IFtdO1xyXG4gICAgdGhpcy5fYXBpRXZlbnRIYW5kbGVyLnNldEV2ZW50SGFuZGxlcigobm90aWZpY2F0aW9uSWQsIG1vZGVsKSA9PiB7XHJcbiAgICAgIHRoaXMuX25vdGlmaWNhdGlvbkhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiBoYW5kbGVyKHtcclxuICAgICAgICBub3RpZmljYXRpb25JZDogbm90aWZpY2F0aW9uSWQsXHJcbiAgICAgICAgZGF0YTogbW9kZWxcclxuICAgICAgfSkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0VmVyc2lvbk51bWJlcih2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uTnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9hcGlFdmVudEhhbmRsZXIuc2V0VmVyc2lvbk51bWJlcih2ZXJzaW9uTnVtYmVyKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBleGVjdXRlKHZlcmI6IFZlcmJJZCwgcGFyYW1ldGVyczogRXhlY3V0ZVBhcmFtZXRlcnMpOiBQcm9taXNlPEV4ZWN1dGVSZXNwb25zZT4ge1xyXG4gICAgLy8gSnVzdCBwYXNzIHRoaXMgcmlnaHQgdGhyb3VnaCB0byB0aGUgQXBpRXZlbnRIYW5kbGVyXHJcbiAgICByZXR1cm4gdGhpcy5fYXBpRXZlbnRIYW5kbGVyLmV4ZWN1dGUodmVyYiwgcGFyYW1ldGVycyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVnaXN0ZXJOb3RpZmljYXRpb25IYW5kbGVyKGhhbmRsZXI6IE5vdGlmaWNhdGlvbkhhbmRsZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX25vdGlmaWNhdGlvbkhhbmRsZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdW5yZWdpc3Rlck5vdGlmaWNhdGlvbkhhbmRsZXIoaGFuZGxlcjogTm90aWZpY2F0aW9uSGFuZGxlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlcnMgPSB0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVycy5maWx0ZXIoaCA9PiBoICE9PSBoYW5kbGVyKTtcclxuICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi4vc3JjL0Rlc2t0b3BBcGlEaXNwYXRjaGVyLnRzXG4gKiovIiwiaW1wb3J0ICcuL3R5cGVzL1F0VHlwZXMnO1xyXG5cclxuaW1wb3J0IHsgUVdlYkNoYW5uZWwgfSBmcm9tICdxd2ViY2hhbm5lbCc7XHJcblxyXG5pbXBvcnQgeyBBZGRJbkFwaVByZXNMYXllckludGVyb3BPYmplY3QgfSBmcm9tICcuL3R5cGVzL0FkZEluQXBpUHJlc0xheWVySW50ZXJvcE9iamVjdCc7XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgdGhlIFFXZWJDaGFubmVsIGNvbnRyYWN0IGFuZCByZXR1cm5zIHRoZSBwcmVzIGxheWVyIGludGVyb3Agb2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPEFkZEluQXBpUHJlc0xheWVySW50ZXJvcE9iamVjdD59XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVdlYkNoYW5uZWxQcmVzTGF5ZXIoKTogUHJvbWlzZTxBZGRJbkFwaVByZXNMYXllckludGVyb3BPYmplY3Q+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2U8QWRkSW5BcGlQcmVzTGF5ZXJJbnRlcm9wT2JqZWN0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgIG5ldyBRV2ViQ2hhbm5lbChxdC53ZWJDaGFubmVsVHJhbnNwb3J0LCAoY2hhbm5lbCkgPT4ge1xyXG5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICBjb25zdCBhZGRJblByZXNMYXllciA9IGNoYW5uZWwub2JqZWN0c1snYWRkSW5QcmVzTGF5ZXInXSBhcyBBZGRJbkFwaVByZXNMYXllckludGVyb3BPYmplY3Q7XHJcbiAgICAgICAgcmVzb2x2ZShhZGRJblByZXNMYXllcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZWplY3QoZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNRdCgpOiBib29sZWFuIHtcclxuICByZXR1cm4gdHlwZW9mIHF0ID09PSAnb2JqZWN0JztcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuLi9zcmMvUXRXZWJDaGFubmVsSW1wbC50c1xuICoqLyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4qKlxuKiogQ29weXJpZ2h0IChDKSAyMDE1IFRoZSBRdCBDb21wYW55IEx0ZC5cbioqIENvcHlyaWdodCAoQykgMjAxNCBLbGFyw6RsdmRhbGVucyBEYXRha29uc3VsdCBBQiwgYSBLREFCIEdyb3VwIGNvbXBhbnksIGluZm9Aa2RhYi5jb20sIGF1dGhvciBNaWxpYW4gV29sZmYgPG1pbGlhbi53b2xmZkBrZGFiLmNvbT5cbioqIENvbnRhY3Q6IGh0dHA6Ly93d3cucXQuaW8vbGljZW5zaW5nL1xuKipcbioqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBRdFdlYkNoYW5uZWwgbW9kdWxlIG9mIHRoZSBRdCBUb29sa2l0LlxuKipcbioqICRRVF9CRUdJTl9MSUNFTlNFOkxHUEwyMSRcbioqIENvbW1lcmNpYWwgTGljZW5zZSBVc2FnZVxuKiogTGljZW5zZWVzIGhvbGRpbmcgdmFsaWQgY29tbWVyY2lhbCBRdCBsaWNlbnNlcyBtYXkgdXNlIHRoaXMgZmlsZSBpblxuKiogYWNjb3JkYW5jZSB3aXRoIHRoZSBjb21tZXJjaWFsIGxpY2Vuc2UgYWdyZWVtZW50IHByb3ZpZGVkIHdpdGggdGhlXG4qKiBTb2Z0d2FyZSBvciwgYWx0ZXJuYXRpdmVseSwgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBjb250YWluZWQgaW5cbioqIGEgd3JpdHRlbiBhZ3JlZW1lbnQgYmV0d2VlbiB5b3UgYW5kIFRoZSBRdCBDb21wYW55LiBGb3IgbGljZW5zaW5nIHRlcm1zXG4qKiBhbmQgY29uZGl0aW9ucyBzZWUgaHR0cDovL3d3dy5xdC5pby90ZXJtcy1jb25kaXRpb25zLiBGb3IgZnVydGhlclxuKiogaW5mb3JtYXRpb24gdXNlIHRoZSBjb250YWN0IGZvcm0gYXQgaHR0cDovL3d3dy5xdC5pby9jb250YWN0LXVzLlxuKipcbioqIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBVc2FnZVxuKiogQWx0ZXJuYXRpdmVseSwgdGhpcyBmaWxlIG1heSBiZSB1c2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuKiogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uIDIuMSBvciB2ZXJzaW9uIDMgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlXG4qKiBTb2Z0d2FyZSBGb3VuZGF0aW9uIGFuZCBhcHBlYXJpbmcgaW4gdGhlIGZpbGUgTElDRU5TRS5MR1BMdjIxIGFuZFxuKiogTElDRU5TRS5MR1BMdjMgaW5jbHVkZWQgaW4gdGhlIHBhY2thZ2luZyBvZiB0aGlzIGZpbGUuIFBsZWFzZSByZXZpZXcgdGhlXG4qKiBmb2xsb3dpbmcgaW5mb3JtYXRpb24gdG8gZW5zdXJlIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbioqIHJlcXVpcmVtZW50cyB3aWxsIGJlIG1ldDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWwgYW5kXG4qKiBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLmh0bWwuXG4qKlxuKiogQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgVGhlIFF0IENvbXBhbnkgZ2l2ZXMgeW91IGNlcnRhaW4gYWRkaXRpb25hbFxuKiogcmlnaHRzLiBUaGVzZSByaWdodHMgYXJlIGRlc2NyaWJlZCBpbiBUaGUgUXQgQ29tcGFueSBMR1BMIEV4Y2VwdGlvblxuKiogdmVyc2lvbiAxLjEsIGluY2x1ZGVkIGluIHRoZSBmaWxlIExHUExfRVhDRVBUSU9OLnR4dCBpbiB0aGlzIHBhY2thZ2UuXG4qKlxuKiogJFFUX0VORF9MSUNFTlNFJFxuKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUVdlYkNoYW5uZWxNZXNzYWdlVHlwZXMgPSB7XG4gICAgc2lnbmFsOiAxLFxuICAgIHByb3BlcnR5VXBkYXRlOiAyLFxuICAgIGluaXQ6IDMsXG4gICAgaWRsZTogNCxcbiAgICBkZWJ1ZzogNSxcbiAgICBpbnZva2VNZXRob2Q6IDYsXG4gICAgY29ubmVjdFRvU2lnbmFsOiA3LFxuICAgIGRpc2Nvbm5lY3RGcm9tU2lnbmFsOiA4LFxuICAgIHNldFByb3BlcnR5OiA5LFxuICAgIHJlc3BvbnNlOiAxMCxcbn07XG5cbnZhciBRV2ViQ2hhbm5lbCA9IGZ1bmN0aW9uKHRyYW5zcG9ydCwgaW5pdENhbGxiYWNrKVxue1xuICAgIGlmICh0eXBlb2YgdHJhbnNwb3J0ICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiB0cmFuc3BvcnQuc2VuZCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgUVdlYkNoYW5uZWwgZXhwZWN0cyBhIHRyYW5zcG9ydCBvYmplY3Qgd2l0aCBhIHNlbmQgZnVuY3Rpb24gYW5kIG9ubWVzc2FnZSBjYWxsYmFjayBwcm9wZXJ0eS5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgXCIgR2l2ZW4gaXM6IHRyYW5zcG9ydDogXCIgKyB0eXBlb2YodHJhbnNwb3J0KSArIFwiLCB0cmFuc3BvcnQuc2VuZDogXCIgKyB0eXBlb2YodHJhbnNwb3J0LnNlbmQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjaGFubmVsID0gdGhpcztcbiAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpXG4gICAge1xuICAgICAgICBpZiAodHlwZW9mKGRhdGEpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hhbm5lbC50cmFuc3BvcnQuc2VuZChkYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYW5zcG9ydC5vbm1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKVxuICAgIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtZXNzYWdlLmRhdGE7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUVdlYkNoYW5uZWxNZXNzYWdlVHlwZXMuc2lnbmFsOlxuICAgICAgICAgICAgICAgIGNoYW5uZWwuaGFuZGxlU2lnbmFsKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBRV2ViQ2hhbm5lbE1lc3NhZ2VUeXBlcy5yZXNwb25zZTpcbiAgICAgICAgICAgICAgICBjaGFubmVsLmhhbmRsZVJlc3BvbnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBRV2ViQ2hhbm5lbE1lc3NhZ2VUeXBlcy5wcm9wZXJ0eVVwZGF0ZTpcbiAgICAgICAgICAgICAgICBjaGFubmVsLmhhbmRsZVByb3BlcnR5VXBkYXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiaW52YWxpZCBtZXNzYWdlIHJlY2VpdmVkOlwiLCBtZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5leGVjQ2FsbGJhY2tzID0ge307XG4gICAgdGhpcy5leGVjSWQgPSAwO1xuICAgIHRoaXMuZXhlYyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gaWYgbm8gY2FsbGJhY2sgaXMgZ2l2ZW4sIHNlbmQgZGlyZWN0bHlcbiAgICAgICAgICAgIGNoYW5uZWwuc2VuZChkYXRhKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbm5lbC5leGVjSWQgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIC8vIHdyYXBcbiAgICAgICAgICAgIGNoYW5uZWwuZXhlY0lkID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGV4ZWMgbWVzc2FnZSB3aXRoIHByb3BlcnR5IGlkOiBcIiArIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmlkID0gY2hhbm5lbC5leGVjSWQrKztcbiAgICAgICAgY2hhbm5lbC5leGVjQ2FsbGJhY2tzW2RhdGEuaWRdID0gY2FsbGJhY2s7XG4gICAgICAgIGNoYW5uZWwuc2VuZChkYXRhKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vYmplY3RzID0ge307XG5cbiAgICB0aGlzLmhhbmRsZVNpZ25hbCA9IGZ1bmN0aW9uKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICB2YXIgb2JqZWN0ID0gY2hhbm5lbC5vYmplY3RzW21lc3NhZ2Uub2JqZWN0XTtcbiAgICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICAgICAgb2JqZWN0LnNpZ25hbEVtaXR0ZWQobWVzc2FnZS5zaWduYWwsIG1lc3NhZ2UuYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmhhbmRsZWQgc2lnbmFsOiBcIiArIG1lc3NhZ2Uub2JqZWN0ICsgXCI6OlwiICsgbWVzc2FnZS5zaWduYWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVSZXNwb25zZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICBpZiAoIW1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgcmVzcG9uc2UgbWVzc2FnZSByZWNlaXZlZDogXCIsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjaGFubmVsLmV4ZWNDYWxsYmFja3NbbWVzc2FnZS5pZF0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgZGVsZXRlIGNoYW5uZWwuZXhlY0NhbGxiYWNrc1ttZXNzYWdlLmlkXTtcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZVByb3BlcnR5VXBkYXRlID0gZnVuY3Rpb24obWVzc2FnZSlcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gbWVzc2FnZS5kYXRhKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YVtpXTtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBjaGFubmVsLm9iamVjdHNbZGF0YS5vYmplY3RdO1xuICAgICAgICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5wcm9wZXJ0eVVwZGF0ZShkYXRhLnNpZ25hbHMsIGRhdGEucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVuaGFuZGxlZCBwcm9wZXJ0eSB1cGRhdGU6IFwiICsgZGF0YS5vYmplY3QgKyBcIjo6XCIgKyBkYXRhLnNpZ25hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hhbm5lbC5leGVjKHt0eXBlOiBRV2ViQ2hhbm5lbE1lc3NhZ2VUeXBlcy5pZGxlfSk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZyA9IGZ1bmN0aW9uKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICBjaGFubmVsLnNlbmQoe3R5cGU6IFFXZWJDaGFubmVsTWVzc2FnZVR5cGVzLmRlYnVnLCBkYXRhOiBtZXNzYWdlfSk7XG4gICAgfTtcblxuICAgIGNoYW5uZWwuZXhlYyh7dHlwZTogUVdlYkNoYW5uZWxNZXNzYWdlVHlwZXMuaW5pdH0sIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgb2JqZWN0TmFtZSBpbiBkYXRhKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gbmV3IFFPYmplY3Qob2JqZWN0TmFtZSwgZGF0YVtvYmplY3ROYW1lXSwgY2hhbm5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm93IHVud3JhcCBwcm9wZXJ0aWVzLCB3aGljaCBtaWdodCByZWZlcmVuY2Ugb3RoZXIgcmVnaXN0ZXJlZCBvYmplY3RzXG4gICAgICAgIGZvciAodmFyIG9iamVjdE5hbWUgaW4gY2hhbm5lbC5vYmplY3RzKSB7XG4gICAgICAgICAgICBjaGFubmVsLm9iamVjdHNbb2JqZWN0TmFtZV0udW53cmFwUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbml0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIGluaXRDYWxsYmFjayhjaGFubmVsKTtcbiAgICAgICAgfVxuICAgICAgICBjaGFubmVsLmV4ZWMoe3R5cGU6IFFXZWJDaGFubmVsTWVzc2FnZVR5cGVzLmlkbGV9KTtcbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIFFPYmplY3QobmFtZSwgZGF0YSwgd2ViQ2hhbm5lbClcbntcbiAgICB0aGlzLl9faWRfXyA9IG5hbWU7XG4gICAgd2ViQ2hhbm5lbC5vYmplY3RzW25hbWVdID0gdGhpcztcblxuICAgIC8vIExpc3Qgb2YgY2FsbGJhY2tzIHRoYXQgZ2V0IGludm9rZWQgdXBvbiBzaWduYWwgZW1pc3Npb25cbiAgICB0aGlzLl9fb2JqZWN0U2lnbmFsc19fID0ge307XG5cbiAgICAvLyBDYWNoZSBvZiBhbGwgcHJvcGVydGllcywgdXBkYXRlZCB3aGVuIGEgbm90aWZ5IHNpZ25hbCBpcyBlbWl0dGVkXG4gICAgdGhpcy5fX3Byb3BlcnR5Q2FjaGVfXyA9IHt9O1xuXG4gICAgdmFyIG9iamVjdCA9IHRoaXM7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICB0aGlzLnVud3JhcFFPYmplY3QgPSBmdW5jdGlvbihyZXNwb25zZSlcbiAgICB7XG4gICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAvLyBzdXBwb3J0IGxpc3Qgb2Ygb2JqZWN0c1xuICAgICAgICAgICAgdmFyIHJldCA9IG5ldyBBcnJheShyZXNwb25zZS5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IG9iamVjdC51bndyYXBRT2JqZWN0KHJlc3BvbnNlW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXNwb25zZVxuICAgICAgICAgICAgfHwgIXJlc3BvbnNlW1wiX19RT2JqZWN0Kl9fXCJdXG4gICAgICAgICAgICB8fCByZXNwb25zZVtcImlkXCJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvYmplY3RJZCA9IHJlc3BvbnNlLmlkO1xuICAgICAgICBpZiAod2ViQ2hhbm5lbC5vYmplY3RzW29iamVjdElkXSlcbiAgICAgICAgICAgIHJldHVybiB3ZWJDaGFubmVsLm9iamVjdHNbb2JqZWN0SWRdO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCB1bndyYXAgdW5rbm93biBRT2JqZWN0IFwiICsgb2JqZWN0SWQgKyBcIiB3aXRob3V0IGRhdGEuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHFPYmplY3QgPSBuZXcgUU9iamVjdCggb2JqZWN0SWQsIHJlc3BvbnNlLmRhdGEsIHdlYkNoYW5uZWwgKTtcbiAgICAgICAgcU9iamVjdC5kZXN0cm95ZWQuY29ubmVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh3ZWJDaGFubmVsLm9iamVjdHNbb2JqZWN0SWRdID09PSBxT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHdlYkNoYW5uZWwub2JqZWN0c1tvYmplY3RJZF07XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIG5vdyBkZWxldGVkIFFPYmplY3QgdG8gYW4gZW1wdHkge30gb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8ganVzdCBhc3NpZ25pbmcge30gdGhvdWdoIHdvdWxkIG5vdCBoYXZlIHRoZSBkZXNpcmVkIGVmZmVjdCwgYnV0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGJlbG93IGFsc28gZW5zdXJlcyBhbGwgZXh0ZXJuYWwgcmVmZXJlbmNlcyB3aWxsIHNlZSB0aGUgZW1wdHkgbWFwXG4gICAgICAgICAgICAgICAgLy8gTk9URTogdGhpcyBkZXRvdXIgaXMgbmVjZXNzYXJ5IHRvIHdvcmthcm91bmQgUVRCVUctNDAwMjFcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBxT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZXMucHVzaChwcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpZHggaW4gcHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcU9iamVjdFtwcm9wZXJ0eU5hbWVzW2lkeF1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGhlcmUgd2UgYXJlIGFscmVhZHkgaW5pdGlhbGl6ZWQsIGFuZCB0aHVzIG11c3QgZGlyZWN0bHkgdW53cmFwIHRoZSBwcm9wZXJ0aWVzXG4gICAgICAgIHFPYmplY3QudW53cmFwUHJvcGVydGllcygpO1xuICAgICAgICByZXR1cm4gcU9iamVjdDtcbiAgICB9XG5cbiAgICB0aGlzLnVud3JhcFByb3BlcnRpZXMgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eUlkeCBpbiBvYmplY3QuX19wcm9wZXJ0eUNhY2hlX18pIHtcbiAgICAgICAgICAgIG9iamVjdC5fX3Byb3BlcnR5Q2FjaGVfX1twcm9wZXJ0eUlkeF0gPSBvYmplY3QudW53cmFwUU9iamVjdChvYmplY3QuX19wcm9wZXJ0eUNhY2hlX19bcHJvcGVydHlJZHhdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFNpZ25hbChzaWduYWxEYXRhLCBpc1Byb3BlcnR5Tm90aWZ5U2lnbmFsKVxuICAgIHtcbiAgICAgICAgdmFyIHNpZ25hbE5hbWUgPSBzaWduYWxEYXRhWzBdO1xuICAgICAgICB2YXIgc2lnbmFsSW5kZXggPSBzaWduYWxEYXRhWzFdO1xuICAgICAgICBvYmplY3Rbc2lnbmFsTmFtZV0gPSB7XG4gICAgICAgICAgICBjb25uZWN0OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoY2FsbGJhY2spICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkJhZCBjYWxsYmFjayBnaXZlbiB0byBjb25uZWN0IHRvIHNpZ25hbCBcIiArIHNpZ25hbE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fb2JqZWN0U2lnbmFsc19fW3NpZ25hbEluZGV4XSA9IG9iamVjdC5fX29iamVjdFNpZ25hbHNfX1tzaWduYWxJbmRleF0gfHwgW107XG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fb2JqZWN0U2lnbmFsc19fW3NpZ25hbEluZGV4XS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNQcm9wZXJ0eU5vdGlmeVNpZ25hbCAmJiBzaWduYWxOYW1lICE9PSBcImRlc3Ryb3llZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgcmVxdWlyZWQgZm9yIFwicHVyZVwiIHNpZ25hbHMsIGhhbmRsZWQgc2VwYXJhdGVseSBmb3IgcHJvcGVydGllcyBpbiBwcm9wZXJ0eVVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIG5vdGUgdGhhdCB3ZSBhbHdheXMgZ2V0IG5vdGlmaWVkIGFib3V0IHRoZSBkZXN0cm95ZWQgc2lnbmFsXG4gICAgICAgICAgICAgICAgICAgIHdlYkNoYW5uZWwuZXhlYyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBRV2ViQ2hhbm5lbE1lc3NhZ2VUeXBlcy5jb25uZWN0VG9TaWduYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IG9iamVjdC5fX2lkX18sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IHNpZ25hbEluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNjb25uZWN0OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoY2FsbGJhY2spICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkJhZCBjYWxsYmFjayBnaXZlbiB0byBkaXNjb25uZWN0IGZyb20gc2lnbmFsIFwiICsgc2lnbmFsTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fb2JqZWN0U2lnbmFsc19fW3NpZ25hbEluZGV4XSA9IG9iamVjdC5fX29iamVjdFNpZ25hbHNfX1tzaWduYWxJbmRleF0gfHwgW107XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IG9iamVjdC5fX29iamVjdFNpZ25hbHNfX1tzaWduYWxJbmRleF0uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBmaW5kIGNvbm5lY3Rpb24gb2Ygc2lnbmFsIFwiICsgc2lnbmFsTmFtZSArIFwiIHRvIFwiICsgY2FsbGJhY2submFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fb2JqZWN0U2lnbmFsc19fW3NpZ25hbEluZGV4XS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzUHJvcGVydHlOb3RpZnlTaWduYWwgJiYgb2JqZWN0Ll9fb2JqZWN0U2lnbmFsc19fW3NpZ25hbEluZGV4XS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSByZXF1aXJlZCBmb3IgXCJwdXJlXCIgc2lnbmFscywgaGFuZGxlZCBzZXBhcmF0ZWx5IGZvciBwcm9wZXJ0aWVzIGluIHByb3BlcnR5VXBkYXRlXG4gICAgICAgICAgICAgICAgICAgIHdlYkNoYW5uZWwuZXhlYyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBRV2ViQ2hhbm5lbE1lc3NhZ2VUeXBlcy5kaXNjb25uZWN0RnJvbVNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0Ll9faWRfXyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIGdpdmVuIHNpZ25hbG5hbWUuIEFsc28gd29ya3MgZm9yIHByb3BlcnR5IG5vdGlmeSBjYWxsYmFja3MuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlU2lnbmFsQ2FsbGJhY2tzKHNpZ25hbE5hbWUsIHNpZ25hbEFyZ3MpXG4gICAge1xuICAgICAgICB2YXIgY29ubmVjdGlvbnMgPSBvYmplY3QuX19vYmplY3RTaWduYWxzX19bc2lnbmFsTmFtZV07XG4gICAgICAgIGlmIChjb25uZWN0aW9ucykge1xuICAgICAgICAgICAgY29ubmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBzaWduYWxBcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wZXJ0eVVwZGF0ZSA9IGZ1bmN0aW9uKHNpZ25hbHMsIHByb3BlcnR5TWFwKVxuICAgIHtcbiAgICAgICAgLy8gdXBkYXRlIHByb3BlcnR5IGNhY2hlXG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5SW5kZXggaW4gcHJvcGVydHlNYXApIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eVZhbHVlID0gcHJvcGVydHlNYXBbcHJvcGVydHlJbmRleF07XG4gICAgICAgICAgICBvYmplY3QuX19wcm9wZXJ0eUNhY2hlX19bcHJvcGVydHlJbmRleF0gPSBwcm9wZXJ0eVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgc2lnbmFsTmFtZSBpbiBzaWduYWxzKSB7XG4gICAgICAgICAgICAvLyBJbnZva2UgYWxsIGNhbGxiYWNrcywgYXMgc2lnbmFsRW1pdHRlZCgpIGRvZXMgbm90LiBUaGlzIGVuc3VyZXMgdGhlXG4gICAgICAgICAgICAvLyBwcm9wZXJ0eSBjYWNoZSBpcyB1cGRhdGVkIGJlZm9yZSB0aGUgY2FsbGJhY2tzIGFyZSBpbnZva2VkLlxuICAgICAgICAgICAgaW52b2tlU2lnbmFsQ2FsbGJhY2tzKHNpZ25hbE5hbWUsIHNpZ25hbHNbc2lnbmFsTmFtZV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zaWduYWxFbWl0dGVkID0gZnVuY3Rpb24oc2lnbmFsTmFtZSwgc2lnbmFsQXJncylcbiAgICB7XG4gICAgICAgIGludm9rZVNpZ25hbENhbGxiYWNrcyhzaWduYWxOYW1lLCBzaWduYWxBcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRNZXRob2QobWV0aG9kRGF0YSlcbiAgICB7XG4gICAgICAgIHZhciBtZXRob2ROYW1lID0gbWV0aG9kRGF0YVswXTtcbiAgICAgICAgdmFyIG1ldGhvZElkeCA9IG1ldGhvZERhdGFbMV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjaztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2ViQ2hhbm5lbC5leGVjKHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogUVdlYkNoYW5uZWxNZXNzYWdlVHlwZXMuaW52b2tlTWV0aG9kLFxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCI6IG9iamVjdC5fX2lkX18sXG4gICAgICAgICAgICAgICAgXCJtZXRob2RcIjogbWV0aG9kSWR4LFxuICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBhcmdzXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QudW53cmFwUU9iamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNhbGxiYWNrKShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmluZEdldHRlclNldHRlcihwcm9wZXJ0eUluZm8pXG4gICAge1xuICAgICAgICB2YXIgcHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5mb1swXTtcbiAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IHByb3BlcnR5SW5mb1sxXTtcbiAgICAgICAgdmFyIG5vdGlmeVNpZ25hbERhdGEgPSBwcm9wZXJ0eUluZm9bMl07XG4gICAgICAgIC8vIGluaXRpYWxpemUgcHJvcGVydHkgY2FjaGUgd2l0aCBjdXJyZW50IHZhbHVlXG4gICAgICAgIC8vIE5PVEU6IGlmIHRoaXMgaXMgYW4gb2JqZWN0LCBpdCBpcyBub3QgZGlyZWN0bHkgdW53cmFwcGVkIGFzIGl0IG1pZ2h0XG4gICAgICAgIC8vIHJlZmVyZW5jZSBvdGhlciBRT2JqZWN0IHRoYXQgd2UgZG8gbm90IGtub3cgeWV0XG4gICAgICAgIG9iamVjdC5fX3Byb3BlcnR5Q2FjaGVfX1twcm9wZXJ0eUluZGV4XSA9IHByb3BlcnR5SW5mb1szXTtcblxuICAgICAgICBpZiAobm90aWZ5U2lnbmFsRGF0YSkge1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNpZ25hbERhdGFbMF0gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBzaWduYWwgbmFtZSBpcyBvcHRpbWl6ZWQgYXdheSwgcmVjb25zdHJ1Y3QgdGhlIGFjdHVhbCBuYW1lXG4gICAgICAgICAgICAgICAgbm90aWZ5U2lnbmFsRGF0YVswXSA9IHByb3BlcnR5TmFtZSArIFwiQ2hhbmdlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkU2lnbmFsKG5vdGlmeVNpZ25hbERhdGEsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHlOYW1lLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlWYWx1ZSA9IG9iamVjdC5fX3Byb3BlcnR5Q2FjaGVfX1twcm9wZXJ0eUluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmRlZmluZWQgdmFsdWUgaW4gcHJvcGVydHkgY2FjaGUgZm9yIHByb3BlcnR5IFxcXCJcIiArIHByb3BlcnR5TmFtZSArIFwiXFxcIiBpbiBvYmplY3QgXCIgKyBvYmplY3QuX19pZF9fKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUHJvcGVydHkgc2V0dGVyIGZvciBcIiArIHByb3BlcnR5TmFtZSArIFwiIGNhbGxlZCB3aXRoIHVuZGVmaW5lZCB2YWx1ZSFcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvcGVydHlDYWNoZV9fW3Byb3BlcnR5SW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgd2ViQ2hhbm5lbC5leGVjKHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFFXZWJDaGFubmVsTWVzc2FnZVR5cGVzLnNldFByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICBcIm9iamVjdFwiOiBvYmplY3QuX19pZF9fLFxuICAgICAgICAgICAgICAgICAgICBcInByb3BlcnR5XCI6IHByb3BlcnR5SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBkYXRhLm1ldGhvZHMuZm9yRWFjaChhZGRNZXRob2QpO1xuXG4gICAgZGF0YS5wcm9wZXJ0aWVzLmZvckVhY2goYmluZEdldHRlclNldHRlcik7XG5cbiAgICBkYXRhLnNpZ25hbHMuZm9yRWFjaChmdW5jdGlvbihzaWduYWwpIHsgYWRkU2lnbmFsKHNpZ25hbCwgZmFsc2UpOyB9KTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZGF0YS5lbnVtcykge1xuICAgICAgICBvYmplY3RbbmFtZV0gPSBkYXRhLmVudW1zW25hbWVdO1xuICAgIH1cbn1cblxuLy9yZXF1aXJlZCBmb3IgdXNlIHdpdGggbm9kZWpzXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgUVdlYkNoYW5uZWw6IFFXZWJDaGFubmVsXG4gICAgfTtcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vfi9xd2ViY2hhbm5lbC9xd2ViY2hhbm5lbC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==